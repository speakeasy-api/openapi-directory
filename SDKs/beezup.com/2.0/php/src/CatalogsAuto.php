<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CatalogsAuto 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Configure Auto Import Interval
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoConfigureAutoImportIntervalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoConfigureAutoImportIntervalResponse
     */
	public function autoConfigureAutoImportInterval(
        \OpenAPI\OpenAPI\Models\Operations\AutoConfigureAutoImportIntervalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoConfigureAutoImportIntervalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport/scheduling/interval', \OpenAPI\OpenAPI\Models\Operations\AutoConfigureAutoImportIntervalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "configureAutoImportIntervalRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoConfigureAutoImportIntervalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Auto Import
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoDeleteAutoImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoDeleteAutoImportResponse
     */
	public function autoDeleteAutoImport(
        \OpenAPI\OpenAPI\Models\Operations\AutoDeleteAutoImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoDeleteAutoImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport', \OpenAPI\OpenAPI\Models\Operations\AutoDeleteAutoImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoDeleteAutoImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the auto import configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoGetAutoImportConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoGetAutoImportConfigurationResponse
     */
	public function autoGetAutoImportConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\AutoGetAutoImportConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoGetAutoImportConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport', \OpenAPI\OpenAPI\Models\Operations\AutoGetAutoImportConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoGetAutoImportConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autoImportConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutoImportConfiguration', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pause Auto Import
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoPauseAutoImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoPauseAutoImportResponse
     */
	public function autoPauseAutoImport(
        \OpenAPI\OpenAPI\Models\Operations\AutoPauseAutoImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoPauseAutoImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport/pause', \OpenAPI\OpenAPI\Models\Operations\AutoPauseAutoImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoPauseAutoImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resume Auto Import
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoResumeAutoImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoResumeAutoImportResponse
     */
	public function autoResumeAutoImport(
        \OpenAPI\OpenAPI\Models\Operations\AutoResumeAutoImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoResumeAutoImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport/resume', \OpenAPI\OpenAPI\Models\Operations\AutoResumeAutoImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoResumeAutoImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Configure Auto Import Schedules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoScheduleAutoImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoScheduleAutoImportResponse
     */
	public function autoScheduleAutoImport(
        \OpenAPI\OpenAPI\Models\Operations\AutoScheduleAutoImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoScheduleAutoImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules', \OpenAPI\OpenAPI\Models\Operations\AutoScheduleAutoImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scheduleAutoImportRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoScheduleAutoImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start Auto Import Manually
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AutoStartAutoImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AutoStartAutoImportResponse
     */
	public function autoStartAutoImport(
        \OpenAPI\OpenAPI\Models\Operations\AutoStartAutoImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AutoStartAutoImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport/start', \OpenAPI\OpenAPI\Models\Operations\AutoStartAutoImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AutoStartAutoImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linksImportationGetImportationMonitoringLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinksImportationGetImportationMonitoringLink', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activate the auto importation of the last successful manual catalog importation.
     * 
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationActivateAutoImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationActivateAutoImportResponse
     */
	public function importationActivateAutoImport(
        \OpenAPI\OpenAPI\Models\Operations\ImportationActivateAutoImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationActivateAutoImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/autoImport/activate', \OpenAPI\OpenAPI\Models\Operations\ImportationActivateAutoImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationActivateAutoImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}