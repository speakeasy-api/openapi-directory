// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserTSPsPathParams struct {
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type UserTSPsRequest struct {
	PathParams UserTSPsPathParams
}

// UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum - Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
// `media_link` - Media link
type UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum string

const (
	UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnumToll      UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum = "toll"
	UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnumTollfree  UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum = "tollfree"
	UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnumMediaLink UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum = "media_link"
)

func (e *UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		fallthrough
	case "media_link":
		*e = UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum: %s", s)
	}
}

type UserTSPs200ApplicationXMLTSPAccountsListDialInNumbers struct {
	// Country code.
	Code *string
	// Country Label, if passed, will display in place of code.
	CountryLabel *string
	// Dial-in number: length is less than 16.
	Number *string
	// Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
	// `media_link` - Media link
	Type *UserTSPs200ApplicationXMLTSPAccountsListDialInNumbersTypeEnum
}

// UserTSPs200ApplicationXMLTSPAccountsListIDEnum - The ID of the TSP account.
type UserTSPs200ApplicationXMLTSPAccountsListIDEnum string

const (
	UserTSPs200ApplicationXMLTSPAccountsListIDEnumOne UserTSPs200ApplicationXMLTSPAccountsListIDEnum = "1"
	UserTSPs200ApplicationXMLTSPAccountsListIDEnumTwo UserTSPs200ApplicationXMLTSPAccountsListIDEnum = "2"
)

func (e *UserTSPs200ApplicationXMLTSPAccountsListIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = UserTSPs200ApplicationXMLTSPAccountsListIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPs200ApplicationXMLTSPAccountsListIDEnum: %s", s)
	}
}

// UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum - Telephony bridge
type UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum string

const (
	UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnumUsTspTb UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum = "US_TSP_TB"
	UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnumEuTspTb UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum = "EU_TSP_TB"
)

func (e *UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US_TSP_TB":
		fallthrough
	case "EU_TSP_TB":
		*e = UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum: %s", s)
	}
}

// UserTSPs200ApplicationXMLTSPAccountsList - List of TSP accounts.
type UserTSPs200ApplicationXMLTSPAccountsList struct {
	// Conference code: numeric value, length is less than 16.
	ConferenceCode string
	// List of dial in numbers.
	DialInNumbers []UserTSPs200ApplicationXMLTSPAccountsListDialInNumbers
	// The ID of the TSP account.
	ID *UserTSPs200ApplicationXMLTSPAccountsListIDEnum
	// Leader PIN: numeric value, length is less than 16.
	LeaderPin string
	// Telephony bridge
	//
	TspBridge *UserTSPs200ApplicationXMLTSPAccountsListTSPBridgeEnum
}

// UserTSPs200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// TSP account list returned successfully.
type UserTSPs200ApplicationXML struct {
	TspAccounts []UserTSPs200ApplicationXMLTSPAccountsList
}

// UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum - Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
// `media_link` - Media link
type UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum string

const (
	UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnumToll      UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum = "toll"
	UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnumTollfree  UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum = "tollfree"
	UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnumMediaLink UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum = "media_link"
)

func (e *UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		fallthrough
	case "media_link":
		*e = UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum: %s", s)
	}
}

type UserTSPs200ApplicationJSONTSPAccountsListDialInNumbers struct {
	// Country code.
	Code *string `json:"code,omitempty"`
	// Country Label, if passed, will display in place of code.
	CountryLabel *string `json:"country_label,omitempty"`
	// Dial-in number: length is less than 16.
	Number *string `json:"number,omitempty"`
	// Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
	// `media_link` - Media link
	Type *UserTSPs200ApplicationJSONTSPAccountsListDialInNumbersTypeEnum `json:"type,omitempty"`
}

// UserTSPs200ApplicationJSONTSPAccountsListIDEnum - The ID of the TSP account.
type UserTSPs200ApplicationJSONTSPAccountsListIDEnum string

const (
	UserTSPs200ApplicationJSONTSPAccountsListIDEnumOne UserTSPs200ApplicationJSONTSPAccountsListIDEnum = "1"
	UserTSPs200ApplicationJSONTSPAccountsListIDEnumTwo UserTSPs200ApplicationJSONTSPAccountsListIDEnum = "2"
)

func (e *UserTSPs200ApplicationJSONTSPAccountsListIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = UserTSPs200ApplicationJSONTSPAccountsListIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPs200ApplicationJSONTSPAccountsListIDEnum: %s", s)
	}
}

// UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum - Telephony bridge
type UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum string

const (
	UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnumUsTspTb UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum = "US_TSP_TB"
	UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnumEuTspTb UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum = "EU_TSP_TB"
)

func (e *UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US_TSP_TB":
		fallthrough
	case "EU_TSP_TB":
		*e = UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum: %s", s)
	}
}

// UserTSPs200ApplicationJSONTSPAccountsList - List of TSP accounts.
type UserTSPs200ApplicationJSONTSPAccountsList struct {
	// Conference code: numeric value, length is less than 16.
	ConferenceCode string `json:"conference_code"`
	// List of dial in numbers.
	DialInNumbers []UserTSPs200ApplicationJSONTSPAccountsListDialInNumbers `json:"dial_in_numbers,omitempty"`
	// The ID of the TSP account.
	ID *UserTSPs200ApplicationJSONTSPAccountsListIDEnum `json:"id,omitempty"`
	// Leader PIN: numeric value, length is less than 16.
	LeaderPin string `json:"leader_pin"`
	// Telephony bridge
	//
	TspBridge *UserTSPs200ApplicationJSONTSPAccountsListTSPBridgeEnum `json:"tsp_bridge,omitempty"`
}

// UserTSPs200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// TSP account list returned successfully.
type UserTSPs200ApplicationJSON struct {
	TspAccounts []UserTSPs200ApplicationJSONTSPAccountsList `json:"tsp_accounts,omitempty"`
}

type UserTSPsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// TSP account list returned successfully.
	UserTSPs200ApplicationJSONObject *UserTSPs200ApplicationJSON
}
