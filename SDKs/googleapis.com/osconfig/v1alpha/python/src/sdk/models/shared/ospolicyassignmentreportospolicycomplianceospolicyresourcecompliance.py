"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ospolicyassignmentreportospolicycomplianceospolicyresourcecomplianceexecresourceoutput as shared_ospolicyassignmentreportospolicycomplianceospolicyresourcecomplianceexecresourceoutput
from ..shared import ospolicyassignmentreportospolicycomplianceospolicyresourcecomplianceospolicyresourceconfigstep as shared_ospolicyassignmentreportospolicycomplianceospolicyresourcecomplianceospolicyresourceconfigstep
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceComplianceStateEnum(str, Enum):
    r"""The compliance state of the resource."""
    UNKNOWN = 'UNKNOWN'
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance:
    r"""Compliance data for an OS policy resource."""
    
    compliance_state: Optional[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceComplianceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complianceState'), 'exclude': lambda f: f is None }})
    r"""The compliance state of the resource."""  
    compliance_state_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complianceStateReason'), 'exclude': lambda f: f is None }})
    r"""A reason for the resource to be in the given compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. The following values are supported when `compliance_state == UNKNOWN` * `execution-errors`: Errors were encountered by the agent while executing the resource and the compliance state couldn't be determined. * `execution-skipped-by-agent`: Resource execution was skipped by the agent because errors were encountered while executing prior resources in the OS policy. * `os-policy-execution-attempt-failed`: The execution of the OS policy containing this resource failed and the compliance state couldn't be determined."""  
    config_steps: Optional[list[shared_ospolicyassignmentreportospolicycomplianceospolicyresourcecomplianceospolicyresourceconfigstep.OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configSteps'), 'exclude': lambda f: f is None }})
    r"""Ordered list of configuration completed by the agent for the OS policy resource."""  
    exec_resource_output: Optional[shared_ospolicyassignmentreportospolicycomplianceospolicyresourcecomplianceexecresourceoutput.OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execResourceOutput'), 'exclude': lambda f: f is None }})
    r"""ExecResource specific output."""  
    os_policy_resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osPolicyResourceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the OS policy resource."""  
    