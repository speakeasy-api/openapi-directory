/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConsentManagerPatientID } from "./consentmanagerpatientid";
import { OrganizationRepresentation } from "./organizationrepresentation";
import { SubscriptionCategoryEnum } from "./subscriptioncategoryenum";
import { SubscriptionPeriod } from "./subscriptionperiod";
import { UsePurpose } from "./usepurpose";
import { Expose, Transform, Type } from "class-transformer";

export class SubscriptionRequestSubscription extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  categories: SubscriptionCategoryEnum[];

  @SpeakeasyMetadata({ elemType: OrganizationRepresentation })
  @Expose({ name: "hips" })
  @Type(() => OrganizationRepresentation)
  hips?: OrganizationRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "hiu" })
  @Type(() => OrganizationRepresentation)
  hiu: OrganizationRepresentation;

  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => ConsentManagerPatientID)
  patient: ConsentManagerPatientID;

  @SpeakeasyMetadata()
  @Expose({ name: "period" })
  @Type(() => SubscriptionPeriod)
  period: SubscriptionPeriod;

  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  @Type(() => UsePurpose)
  purpose: UsePurpose;
}

export class SubscriptionRequest extends SpeakeasyBase {
  /**
   * a nonce, unique for each HTTP request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription" })
  @Type(() => SubscriptionRequestSubscription)
  subscription: SubscriptionRequestSubscription;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
