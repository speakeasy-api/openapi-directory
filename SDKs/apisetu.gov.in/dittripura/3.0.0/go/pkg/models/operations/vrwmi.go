// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type VrwmiSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type VrwmiRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// VrwmiRequestBodyFormatEnum - The format of the certificate in response.
type VrwmiRequestBodyFormatEnum string

const (
	VrwmiRequestBodyFormatEnumPdf VrwmiRequestBodyFormatEnum = "pdf"
)

func (e VrwmiRequestBodyFormatEnum) ToPointer() *VrwmiRequestBodyFormatEnum {
	return &e
}

func (e *VrwmiRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = VrwmiRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VrwmiRequestBodyFormatEnum: %v", v)
	}
}

// VrwmiRequestBody - Request format
type VrwmiRequestBody struct {
	CertificateParameters *VrwmiRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format VrwmiRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Vrwmi504ApplicationJSONErrorEnum string

const (
	Vrwmi504ApplicationJSONErrorEnumGatewayTimeout Vrwmi504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Vrwmi504ApplicationJSONErrorEnum) ToPointer() *Vrwmi504ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Vrwmi504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi504ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi504ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Vrwmi504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Vrwmi504ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Vrwmi504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi504ApplicationJSON - Gateway timeout
type Vrwmi504ApplicationJSON struct {
	Error            *Vrwmi504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vrwmi503ApplicationJSONErrorEnum string

const (
	Vrwmi503ApplicationJSONErrorEnumServiceUnavailable Vrwmi503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Vrwmi503ApplicationJSONErrorEnum) ToPointer() *Vrwmi503ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Vrwmi503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi503ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi503ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Vrwmi503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Vrwmi503ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Vrwmi503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi503ApplicationJSON - Service unavailable
type Vrwmi503ApplicationJSON struct {
	Error            *Vrwmi503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vrwmi502ApplicationJSONErrorEnum string

const (
	Vrwmi502ApplicationJSONErrorEnumBadGatewy Vrwmi502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Vrwmi502ApplicationJSONErrorEnum) ToPointer() *Vrwmi502ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Vrwmi502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi502ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi502ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Vrwmi502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Vrwmi502ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Vrwmi502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi502ApplicationJSON - Bad gateway
type Vrwmi502ApplicationJSON struct {
	Error            *Vrwmi502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vrwmi500ApplicationJSONErrorEnum string

const (
	Vrwmi500ApplicationJSONErrorEnumInternalServerError Vrwmi500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Vrwmi500ApplicationJSONErrorEnum) ToPointer() *Vrwmi500ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Vrwmi500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi500ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi500ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi500ApplicationJSONErrorDescriptionEnumInternalServerError Vrwmi500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Vrwmi500ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Vrwmi500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi500ApplicationJSON - Internal server error
type Vrwmi500ApplicationJSON struct {
	Error            *Vrwmi500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vrwmi404ApplicationJSONErrorEnum string

const (
	Vrwmi404ApplicationJSONErrorEnumRecordNotFound Vrwmi404ApplicationJSONErrorEnum = "record_not_found"
	Vrwmi404ApplicationJSONErrorEnumURLNotFound    Vrwmi404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Vrwmi404ApplicationJSONErrorEnum) ToPointer() *Vrwmi404ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Vrwmi404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi404ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi404ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi404ApplicationJSONErrorDescriptionEnumNoRecordFound               Vrwmi404ApplicationJSONErrorDescriptionEnum = "No record found"
	Vrwmi404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Vrwmi404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Vrwmi404ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Vrwmi404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi404ApplicationJSON - No record found
type Vrwmi404ApplicationJSON struct {
	Error            *Vrwmi404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vrwmi401ApplicationJSONErrorEnum string

const (
	Vrwmi401ApplicationJSONErrorEnumInvalidAuthentication Vrwmi401ApplicationJSONErrorEnum = "invalid_authentication"
	Vrwmi401ApplicationJSONErrorEnumInvalidAuthorization  Vrwmi401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Vrwmi401ApplicationJSONErrorEnum) ToPointer() *Vrwmi401ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Vrwmi401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi401ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi401ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Vrwmi401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Vrwmi401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Vrwmi401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Vrwmi401ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Vrwmi401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi401ApplicationJSON - Unauthorized access
type Vrwmi401ApplicationJSON struct {
	Error            *Vrwmi401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vrwmi400ApplicationJSONErrorEnum string

const (
	Vrwmi400ApplicationJSONErrorEnumMissingParameter Vrwmi400ApplicationJSONErrorEnum = "missing_parameter"
	Vrwmi400ApplicationJSONErrorEnumInvalidParameter Vrwmi400ApplicationJSONErrorEnum = "invalid_parameter"
	Vrwmi400ApplicationJSONErrorEnumInvalidFormat    Vrwmi400ApplicationJSONErrorEnum = "invalid_format"
	Vrwmi400ApplicationJSONErrorEnumInvalidTxnid     Vrwmi400ApplicationJSONErrorEnum = "invalid_txnid"
	Vrwmi400ApplicationJSONErrorEnumInvalidConsentid Vrwmi400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Vrwmi400ApplicationJSONErrorEnum) ToPointer() *Vrwmi400ApplicationJSONErrorEnum {
	return &e
}

func (e *Vrwmi400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Vrwmi400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi400ApplicationJSONErrorEnum: %v", v)
	}
}

type Vrwmi400ApplicationJSONErrorDescriptionEnum string

const (
	Vrwmi400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Vrwmi400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Vrwmi400ApplicationJSONErrorDescriptionEnumBadRequest                              Vrwmi400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Vrwmi400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Vrwmi400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Vrwmi400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Vrwmi400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Vrwmi400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Vrwmi400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Vrwmi400ApplicationJSONErrorDescriptionEnum) ToPointer() *Vrwmi400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Vrwmi400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Vrwmi400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Vrwmi400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Vrwmi400ApplicationJSON - Bad request
type Vrwmi400ApplicationJSON struct {
	Error            *Vrwmi400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vrwmi400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type VrwmiResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Vrwmi400ApplicationJSONObject *Vrwmi400ApplicationJSON
	// Unauthorized access
	Vrwmi401ApplicationJSONObject *Vrwmi401ApplicationJSON
	// No record found
	Vrwmi404ApplicationJSONObject *Vrwmi404ApplicationJSON
	// Internal server error
	Vrwmi500ApplicationJSONObject *Vrwmi500ApplicationJSON
	// Bad gateway
	Vrwmi502ApplicationJSONObject *Vrwmi502ApplicationJSON
	// Service unavailable
	Vrwmi503ApplicationJSONObject *Vrwmi503ApplicationJSON
	// Gateway timeout
	Vrwmi504ApplicationJSONObject *Vrwmi504ApplicationJSON
}
