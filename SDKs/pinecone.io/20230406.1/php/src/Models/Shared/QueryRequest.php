<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class QueryRequest
{
    /**
     * If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
     * 
     * @var ?array<string, mixed> $filter
     */
	#[\JMS\Serializer\Annotation\SerializedName('filter')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filter = null;
    
    /**
     * The unique ID of a vector
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('includeMetadata')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $includeMetadata = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('includeValues')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $includeValues = null;
    
    /**
     * An index namespace name
     * 
     * @var ?string $namespace
     */
	#[\JMS\Serializer\Annotation\SerializedName('namespace')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $namespace = null;
    
    /**
     * Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SparseVectorData $sparseVector
     */
	#[\JMS\Serializer\Annotation\SerializedName('sparseVector')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SparseVectorData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SparseVectorData $sparseVector = null;
    
    /**
     * The number of results to return for each query.
     * 
     * @var int $topK
     */
	#[\JMS\Serializer\Annotation\SerializedName('topK')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $topK;
    
    /**
     * Vector dense data. This should be the same length as the dimension of the index being queried.
     * 
     * @var ?array<float> $vector
     */
	#[\JMS\Serializer\Annotation\SerializedName('vector')]
    #[\JMS\Serializer\Annotation\Type('array<float>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $vector = null;
    
	public function __construct()
	{
		$this->filter = null;
		$this->id = null;
		$this->includeMetadata = null;
		$this->includeValues = null;
		$this->namespace = null;
		$this->sparseVector = null;
		$this->topK = 0;
		$this->vector = null;
	}
}
