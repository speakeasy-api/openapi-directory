/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Disk Shrink Config for a given instance.
   */
  sqlProjectsInstancesGetDiskShrinkConfig(
    req: operations.SqlProjectsInstancesGetDiskShrinkConfigRequest,
    security: operations.SqlProjectsInstancesGetDiskShrinkConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlProjectsInstancesGetDiskShrinkConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlProjectsInstancesGetDiskShrinkConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/instances/{instance}/getDiskShrinkConfig",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlProjectsInstancesGetDiskShrinkConfigSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlProjectsInstancesGetDiskShrinkConfigResponse =
        new operations.SqlProjectsInstancesGetDiskShrinkConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sqlInstancesGetDiskShrinkConfigResponse = utils.objectToClass(
              httpRes?.data,
              shared.SqlInstancesGetDiskShrinkConfigResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Perform Disk Shrink on primary instance.
   */
  sqlProjectsInstancesPerformDiskShrink(
    req: operations.SqlProjectsInstancesPerformDiskShrinkRequest,
    security: operations.SqlProjectsInstancesPerformDiskShrinkSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlProjectsInstancesPerformDiskShrinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlProjectsInstancesPerformDiskShrinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/instances/{instance}/performDiskShrink",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "performDiskShrinkContext",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlProjectsInstancesPerformDiskShrinkSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlProjectsInstancesPerformDiskShrinkResponse =
        new operations.SqlProjectsInstancesPerformDiskShrinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reschedules the maintenance on the given instance.
   */
  sqlProjectsInstancesRescheduleMaintenance(
    req: operations.SqlProjectsInstancesRescheduleMaintenanceRequest,
    security: operations.SqlProjectsInstancesRescheduleMaintenanceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlProjectsInstancesRescheduleMaintenanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlProjectsInstancesRescheduleMaintenanceRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/instances/{instance}/rescheduleMaintenance",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sqlInstancesRescheduleMaintenanceRequestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SqlProjectsInstancesRescheduleMaintenanceSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlProjectsInstancesRescheduleMaintenanceResponse =
        new operations.SqlProjectsInstancesRescheduleMaintenanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reset Replica Size to primary instance disk size.
   */
  sqlProjectsInstancesResetReplicaSize(
    req: operations.SqlProjectsInstancesResetReplicaSizeRequest,
    security: operations.SqlProjectsInstancesResetReplicaSizeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlProjectsInstancesResetReplicaSizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlProjectsInstancesResetReplicaSizeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/instances/{instance}/resetReplicaSize",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlProjectsInstancesResetReplicaSizeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlProjectsInstancesResetReplicaSizeResponse =
        new operations.SqlProjectsInstancesResetReplicaSizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start External primary instance migration.
   */
  sqlProjectsInstancesStartExternalSync(
    req: operations.SqlProjectsInstancesStartExternalSyncRequest,
    security: operations.SqlProjectsInstancesStartExternalSyncSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlProjectsInstancesStartExternalSyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlProjectsInstancesStartExternalSyncRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/instances/{instance}/startExternalSync",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sqlInstancesStartExternalSyncRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlProjectsInstancesStartExternalSyncSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlProjectsInstancesStartExternalSyncResponse =
        new operations.SqlProjectsInstancesStartExternalSyncResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verify External primary instance external sync settings.
   */
  sqlProjectsInstancesVerifyExternalSyncSettings(
    req: operations.SqlProjectsInstancesVerifyExternalSyncSettingsRequest,
    security: operations.SqlProjectsInstancesVerifyExternalSyncSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlProjectsInstancesVerifyExternalSyncSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.SqlProjectsInstancesVerifyExternalSyncSettingsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/instances/{instance}/verifyExternalSyncSettings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sqlInstancesVerifyExternalSyncSettingsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SqlProjectsInstancesVerifyExternalSyncSettingsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlProjectsInstancesVerifyExternalSyncSettingsResponse =
        new operations.SqlProjectsInstancesVerifyExternalSyncSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sqlInstancesVerifyExternalSyncSettingsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.SqlInstancesVerifyExternalSyncSettingsResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
