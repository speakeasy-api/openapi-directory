/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DataType } from "./datatype";
import { Expose, Transform } from "class-transformer";

/**
 * `StructType` defines the DataType-s of a STRUCT type.
 */
export class StructType extends SpeakeasyBase {
  /**
   * Unordered map of struct field names to their data types. Fields cannot be added or removed via Update. Their names and data types are still mutable.
   */
  @SpeakeasyMetadata({ elemType: DataType })
  @Expose({ name: "fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DataType> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DataType);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields?: Record<string, DataType>;
}
