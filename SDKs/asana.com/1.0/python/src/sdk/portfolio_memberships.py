"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PortfolioMemberships:
    r"""This object determines if a user is a member of a portfolio."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_portfolio_membership(self, request: operations.GetPortfolioMembershipRequest) -> operations.GetPortfolioMembershipResponse:
        r"""Get a portfolio membership
        Returns the complete portfolio record for a single portfolio membership.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioMembershipRequest, base_url, '/portfolio_memberships/{portfolio_membership_gid}', request)
        
        query_params = utils.get_query_params(operations.GetPortfolioMembershipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioMembershipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioMembership200ApplicationJSON])
                res.get_portfolio_membership_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_portfolio_memberships(self, request: operations.GetPortfolioMembershipsRequest) -> operations.GetPortfolioMembershipsResponse:
        r"""Get multiple portfolio memberships
        Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio_memberships'
        
        query_params = utils.get_query_params(operations.GetPortfolioMembershipsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioMembershipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioMemberships200ApplicationJSON])
                res.get_portfolio_memberships_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_portfolio_memberships_for_portfolio(self, request: operations.GetPortfolioMembershipsForPortfolioRequest) -> operations.GetPortfolioMembershipsForPortfolioResponse:
        r"""Get memberships from a portfolio
        Returns the compact portfolio membership records for the portfolio.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioMembershipsForPortfolioRequest, base_url, '/portfolios/{portfolio_gid}/portfolio_memberships', request)
        
        query_params = utils.get_query_params(operations.GetPortfolioMembershipsForPortfolioRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioMembershipsForPortfolioResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioMembershipsForPortfolio200ApplicationJSON])
                res.get_portfolio_memberships_for_portfolio_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    