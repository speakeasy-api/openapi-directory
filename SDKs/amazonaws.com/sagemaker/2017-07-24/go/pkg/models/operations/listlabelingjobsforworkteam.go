// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListLabelingJobsForWorkteamQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListLabelingJobsForWorkteamXAmzTargetEnum
type ListLabelingJobsForWorkteamXAmzTargetEnum string

const (
	ListLabelingJobsForWorkteamXAmzTargetEnumSageMakerListLabelingJobsForWorkteam ListLabelingJobsForWorkteamXAmzTargetEnum = "SageMaker.ListLabelingJobsForWorkteam"
)

func (e *ListLabelingJobsForWorkteamXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.ListLabelingJobsForWorkteam":
		*e = ListLabelingJobsForWorkteamXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLabelingJobsForWorkteamXAmzTargetEnum: %s", s)
	}
}

type ListLabelingJobsForWorkteamHeaders struct {
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListLabelingJobsForWorkteamXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListLabelingJobsForWorkteamRequest struct {
	QueryParams ListLabelingJobsForWorkteamQueryParams
	Headers     ListLabelingJobsForWorkteamHeaders
	Request     shared.ListLabelingJobsForWorkteamRequest `request:"mediaType=application/json"`
}

type ListLabelingJobsForWorkteamResponse struct {
	ContentType string
	// Success
	ListLabelingJobsForWorkteamResponse *shared.ListLabelingJobsForWorkteamResponse
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
}
