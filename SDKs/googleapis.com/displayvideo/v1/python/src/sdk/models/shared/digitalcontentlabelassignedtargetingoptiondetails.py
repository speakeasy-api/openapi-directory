"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTierEnum(str, Enum):
    r"""Output only. The display name of the digital content label rating tier."""
    CONTENT_RATING_TIER_UNSPECIFIED = 'CONTENT_RATING_TIER_UNSPECIFIED'
    CONTENT_RATING_TIER_UNRATED = 'CONTENT_RATING_TIER_UNRATED'
    CONTENT_RATING_TIER_GENERAL = 'CONTENT_RATING_TIER_GENERAL'
    CONTENT_RATING_TIER_PARENTAL_GUIDANCE = 'CONTENT_RATING_TIER_PARENTAL_GUIDANCE'
    CONTENT_RATING_TIER_TEENS = 'CONTENT_RATING_TIER_TEENS'
    CONTENT_RATING_TIER_MATURE = 'CONTENT_RATING_TIER_MATURE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DigitalContentLabelAssignedTargetingOptionDetails:
    r"""Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`."""
    
    content_rating_tier: Optional[DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentRatingTier'), 'exclude': lambda f: f is None }})
    r"""Output only. The display name of the digital content label rating tier."""  
    excluded_targeting_option_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedTargetingOptionId'), 'exclude': lambda f: f is None }})
    r"""Required. ID of the digital content label to be EXCLUDED."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DigitalContentLabelAssignedTargetingOptionDetailsInput:
    r"""Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`."""
    
    excluded_targeting_option_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedTargetingOptionId'), 'exclude': lambda f: f is None }})
    r"""Required. ID of the digital content label to be EXCLUDED."""  
    