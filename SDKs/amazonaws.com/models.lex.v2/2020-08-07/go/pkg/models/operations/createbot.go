// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateBotRequestBodyBotTypeEnum - The type of a bot to create.
type CreateBotRequestBodyBotTypeEnum string

const (
	CreateBotRequestBodyBotTypeEnumBot        CreateBotRequestBodyBotTypeEnum = "Bot"
	CreateBotRequestBodyBotTypeEnumBotNetwork CreateBotRequestBodyBotTypeEnum = "BotNetwork"
)

func (e CreateBotRequestBodyBotTypeEnum) ToPointer() *CreateBotRequestBodyBotTypeEnum {
	return &e
}

func (e *CreateBotRequestBodyBotTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bot":
		fallthrough
	case "BotNetwork":
		*e = CreateBotRequestBodyBotTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBotRequestBodyBotTypeEnum: %v", v)
	}
}

// CreateBotRequestBodyDataPrivacy - By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
type CreateBotRequestBodyDataPrivacy struct {
	ChildDirected *bool `json:"childDirected,omitempty"`
}

type CreateBotRequestBody struct {
	// The list of bot members in a network to be created.
	BotMembers []shared.BotMember `json:"botMembers,omitempty"`
	// The name of the bot. The bot name must be unique in the account that creates the bot.
	BotName string `json:"botName"`
	// A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.
	BotTags map[string]string `json:"botTags,omitempty"`
	// The type of a bot to create.
	BotType *CreateBotRequestBodyBotTypeEnum `json:"botType,omitempty"`
	// By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
	DataPrivacy CreateBotRequestBodyDataPrivacy `json:"dataPrivacy"`
	// A description of the bot. It appears in lists to help you identify a particular bot.
	Description *string `json:"description,omitempty"`
	// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
	IdleSessionTTLInSeconds int64 `json:"idleSessionTTLInSeconds"`
	// The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
	RoleArn string `json:"roleArn"`
	// A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.
	TestBotAliasTags map[string]string `json:"testBotAliasTags,omitempty"`
}

type CreateBotRequest struct {
	RequestBody       CreateBotRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateBotResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateBotResponse *shared.CreateBotResponse
	// InternalServerException
	InternalServerException interface{}
	// PreconditionFailedException
	PreconditionFailedException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
