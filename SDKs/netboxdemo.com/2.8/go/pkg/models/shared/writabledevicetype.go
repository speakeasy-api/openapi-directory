// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WritableDeviceTypeParentChildStatusEnum - Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
type WritableDeviceTypeParentChildStatusEnum string

const (
	WritableDeviceTypeParentChildStatusEnumParent WritableDeviceTypeParentChildStatusEnum = "parent"
	WritableDeviceTypeParentChildStatusEnumChild  WritableDeviceTypeParentChildStatusEnum = "child"
)

func (e *WritableDeviceTypeParentChildStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "parent":
		fallthrough
	case "child":
		*e = WritableDeviceTypeParentChildStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceTypeParentChildStatusEnum: %s", s)
	}
}

type WritableDeviceTypeInput struct {
	Comments     *string                `json:"comments,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	// Device consumes both front and rear rack faces
	IsFullDepth  *bool  `json:"is_full_depth,omitempty"`
	Manufacturer int64  `json:"manufacturer"`
	Model        string `json:"model"`
	// Discrete part number (optional)
	PartNumber *string `json:"part_number,omitempty"`
	Slug       string  `json:"slug"`
	// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
	SubdeviceRole *WritableDeviceTypeParentChildStatusEnum `json:"subdevice_role,omitempty"`
	Tags          []string                                 `json:"tags,omitempty"`
	UHeight       *int64                                   `json:"u_height,omitempty"`
}
