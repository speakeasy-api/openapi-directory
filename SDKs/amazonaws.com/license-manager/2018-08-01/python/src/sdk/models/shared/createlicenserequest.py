"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import consumptionconfiguration as shared_consumptionconfiguration
from ..shared import datetimerange as shared_datetimerange
from ..shared import entitlement as shared_entitlement
from ..shared import issuer as shared_issuer
from ..shared import metadata as shared_metadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateLicenseRequest:
    
    beneficiary: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Beneficiary') }})  
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken') }})  
    consumption_configuration: shared_consumptionconfiguration.ConsumptionConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsumptionConfiguration') }})  
    entitlements: list[shared_entitlement.Entitlement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Entitlements') }})  
    home_region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeRegion') }})  
    issuer: shared_issuer.Issuer = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Issuer') }})  
    license_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseName') }})  
    product_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductName') }})  
    product_sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductSKU') }})  
    validity: shared_datetimerange.DatetimeRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Validity') }})  
    license_metadata: Optional[list[shared_metadata.Metadata]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseMetadata'), 'exclude': lambda f: f is None }})  
    