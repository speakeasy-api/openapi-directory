// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkHealthAlertsPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

type GetNetworkHealthAlertsRequest struct {
	PathParams GetNetworkHealthAlertsPathParams
}

type GetNetworkHealthAlerts200ApplicationJSONScopeApplications struct {
	// Name of the application
	Name *string `json:"name,omitempty"`
	// URL to the application
	URL *string `json:"url,omitempty"`
}

type GetNetworkHealthAlerts200ApplicationJSONScopeDevicesClients struct {
	// Mac address of the client
	Mac *string `json:"mac,omitempty"`
}

// GetNetworkHealthAlerts200ApplicationJSONScopeDevicesLldp - Lldp information
type GetNetworkHealthAlerts200ApplicationJSONScopeDevicesLldp struct {
	// Port Id
	PortID *string `json:"portId,omitempty"`
}

type GetNetworkHealthAlerts200ApplicationJSONScopeDevices struct {
	// Clients related to the device
	Clients []GetNetworkHealthAlerts200ApplicationJSONScopeDevicesClients `json:"clients,omitempty"`
	// Lldp information
	Lldp *GetNetworkHealthAlerts200ApplicationJSONScopeDevicesLldp `json:"lldp,omitempty"`
	// The mac address of the device
	Mac *string `json:"mac,omitempty"`
	// Name of the device
	Name *string `json:"name,omitempty"`
	// Product type of the device
	ProductType *string `json:"productType,omitempty"`
	// Serial number of the device
	Serial *string `json:"serial,omitempty"`
	// URL to the device
	URL *string `json:"url,omitempty"`
}

// GetNetworkHealthAlerts200ApplicationJSONScopePeersNetwork - Network of the peer
type GetNetworkHealthAlerts200ApplicationJSONScopePeersNetwork struct {
	// Id of the network
	ID *string `json:"id,omitempty"`
	// Name of the network
	Name *string `json:"name,omitempty"`
}

type GetNetworkHealthAlerts200ApplicationJSONScopePeers struct {
	// Network of the peer
	Network *GetNetworkHealthAlerts200ApplicationJSONScopePeersNetwork `json:"network,omitempty"`
	// URL to the peer
	URL *string `json:"url,omitempty"`
}

// GetNetworkHealthAlerts200ApplicationJSONScope - The scope of the alert
type GetNetworkHealthAlerts200ApplicationJSONScope struct {
	// Applications related to the alert
	Applications []GetNetworkHealthAlerts200ApplicationJSONScopeApplications `json:"applications,omitempty"`
	// Devices related to the alert
	Devices []GetNetworkHealthAlerts200ApplicationJSONScopeDevices `json:"devices,omitempty"`
	// Peers related to the alert
	Peers []GetNetworkHealthAlerts200ApplicationJSONScopePeers `json:"peers,omitempty"`
}

// GetNetworkHealthAlerts200ApplicationJSONSeverityEnum - Severity of the alert
type GetNetworkHealthAlerts200ApplicationJSONSeverityEnum string

const (
	GetNetworkHealthAlerts200ApplicationJSONSeverityEnumError   GetNetworkHealthAlerts200ApplicationJSONSeverityEnum = "error"
	GetNetworkHealthAlerts200ApplicationJSONSeverityEnumInfo    GetNetworkHealthAlerts200ApplicationJSONSeverityEnum = "info"
	GetNetworkHealthAlerts200ApplicationJSONSeverityEnumWarning GetNetworkHealthAlerts200ApplicationJSONSeverityEnum = "warning"
)

func (e *GetNetworkHealthAlerts200ApplicationJSONSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "error":
		fallthrough
	case "info":
		fallthrough
	case "warning":
		*e = GetNetworkHealthAlerts200ApplicationJSONSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkHealthAlerts200ApplicationJSONSeverityEnum: %s", s)
	}
}

type GetNetworkHealthAlerts200ApplicationJSON struct {
	// Category of the alert
	Category *string `json:"category,omitempty"`
	// Alert identifier. Value can be empty
	ID *string `json:"id,omitempty"`
	// The scope of the alert
	Scope *GetNetworkHealthAlerts200ApplicationJSONScope `json:"scope,omitempty"`
	// Severity of the alert
	Severity *GetNetworkHealthAlerts200ApplicationJSONSeverityEnum `json:"severity,omitempty"`
	// Alert type
	Type *string `json:"type,omitempty"`
}

type GetNetworkHealthAlertsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkHealthAlerts200ApplicationJSONObjects []GetNetworkHealthAlerts200ApplicationJSON
}
