// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum - The id of the action
type ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum string

const (
	ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnumReloadAllDatasourcesAllNodes ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum = "ReloadAllDatasourcesAllNodes"
)

func (e *ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ReloadAllDatasourcesAllNodes":
		*e = ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum: %s", s)
	}
}

// ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum - Result of the request
type ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum string

const (
	ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnumSuccess ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum = "success"
	ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnumError   ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum = "error"
)

func (e *ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum: %s", s)
	}
}

// ReloadAllDatasourcesAllNodes200ApplicationJSON - Data source reloaded
type ReloadAllDatasourcesAllNodes200ApplicationJSON struct {
	// The id of the action
	Action ReloadAllDatasourcesAllNodes200ApplicationJSONActionEnum `json:"action"`
	Data   string                                                   `json:"data"`
	// Result of the request
	Result ReloadAllDatasourcesAllNodes200ApplicationJSONResultEnum `json:"result"`
}

type ReloadAllDatasourcesAllNodesResponse struct {
	ContentType string
	// Data source reloaded
	ReloadAllDatasourcesAllNodes200ApplicationJSONObject *ReloadAllDatasourcesAllNodes200ApplicationJSON
	StatusCode                                           int
	RawResponse                                          *http.Response
}
