"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSONAPI:
    r"""API related settings"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable API access"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSONCloudRegion:
    r"""Region info"""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of region"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSONCloud:
    r"""Data for this organization"""
    
    region: Optional[GetOrganizations200ApplicationJSONCloudRegion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""Region info"""  
    
class GetOrganizations200ApplicationJSONLicensingModelEnum(str, Enum):
    r"""Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'."""
    CO_TERM = 'co-term'
    PER_DEVICE = 'per-device'
    SUBSCRIPTION = 'subscription'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSONLicensing:
    r"""Licensing related settings"""
    
    model: Optional[GetOrganizations200ApplicationJSONLicensingModelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSONManagementDetails:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of management data"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of management data"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSONManagement:
    r"""Information about the organization's management system"""
    
    details: Optional[list[GetOrganizations200ApplicationJSONManagementDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Details related to organization management, possibly empty"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizations200ApplicationJSON:
    
    api: Optional[GetOrganizations200ApplicationJSONAPI] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api'), 'exclude': lambda f: f is None }})
    r"""API related settings"""  
    cloud: Optional[GetOrganizations200ApplicationJSONCloud] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloud'), 'exclude': lambda f: f is None }})
    r"""Data for this organization"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Organization ID"""  
    licensing: Optional[GetOrganizations200ApplicationJSONLicensing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licensing'), 'exclude': lambda f: f is None }})
    r"""Licensing related settings"""  
    management: Optional[GetOrganizations200ApplicationJSONManagement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('management'), 'exclude': lambda f: f is None }})
    r"""Information about the organization's management system"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Organization name"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Organization URL"""  
    

@dataclasses.dataclass
class GetOrganizationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organizations_200_application_json_objects: Optional[list[GetOrganizations200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    