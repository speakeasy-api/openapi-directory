// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type Item3 struct {
	// String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.
	CodeHex *string `json:"code_hex,omitempty"`
	// Object containing the new configuration. This will be applied automatically when the values are valid.
	ConfigRequest map[string]interface{} `json:"config_request,omitempty"`
	// The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
	Custom interface{} `json:"custom,omitempty"`
	// Last known geolocation estimate of this object. Not guaranteed to be included in response.
	GeoCoords *GeoCoordsReadOnly `json:"geo_coords,omitempty"`
	// Unique identifier for resource.
	ID *string `json:"id,omitempty"`
	// Is this item actively detected in one of the zones at this moment? True when it is, false if it's not.
	IsPresent *bool `json:"is_present,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label *string `json:"label,omitempty"`
	// Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
	LocationRequest *string `json:"location_request,omitempty"`
	// Url to the individual resource.
	LocationURL *string `json:"location_url,omitempty"`
	// Object of searchable metadata for this resource. Can be freely used to store metadata properties.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// How many times this item moved since it's created on this server. Note that it is likely that not all moved events are available in the events (they are deleted after a configurable number of time). This field is never decreases. It gives a good indication of the usage of this item.
	MoveCount *int64 `json:"move_count,omitempty"`
	// Type of protocol that was used to decode this item.
	Protocol *ItemProtocolEnum `json:"protocol,omitempty"`
	// List of set ids
	Sets []string `json:"sets,omitempty"`
	// Type of technology that was used to detect this item.
	Technology *TechnologyEnum `json:"technology,omitempty"`
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
	TimeCreated *string `json:"time_created,omitempty"`
	// Last time the item was present.
	TimeLastPresent *string `json:"time_last_present,omitempty"`
	// Last time this item moved. This is the last time that the location for this item was changed.
	TimeMoved *string `json:"time_moved,omitempty"`
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
	TimeUpdated *string `json:"time_updated,omitempty"`
	// Type of item.
	Type *ItemTypeEnum `json:"type,omitempty"`
	// Url to the individual resource.
	URL *string `json:"url,omitempty"`
}

type Item2 struct {
	// String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.
	CodeHex *string `json:"code_hex,omitempty"`
	// Object containing the new configuration. This will be applied automatically when the values are valid.
	ConfigRequest map[string]interface{} `json:"config_request,omitempty"`
	// The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
	Custom interface{} `json:"custom,omitempty"`
	// Last known geolocation estimate of this object. Not guaranteed to be included in response.
	GeoCoords *GeoCoordsReadOnly `json:"geo_coords,omitempty"`
	// Unique identifier for resource.
	ID *string `json:"id,omitempty"`
	// Is this item actively detected in one of the zones at this moment? True when it is, false if it's not.
	IsPresent *bool `json:"is_present,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label *string `json:"label,omitempty"`
	// Unique identifier for resource.
	LocationID *string `json:"location_id,omitempty"`
	// Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
	LocationRequest *string `json:"location_request,omitempty"`
	// Object of searchable metadata for this resource. Can be freely used to store metadata properties.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// How many times this item moved since it's created on this server. Note that it is likely that not all moved events are available in the events (they are deleted after a configurable number of time). This field is never decreases. It gives a good indication of the usage of this item.
	MoveCount *int64 `json:"move_count,omitempty"`
	// Type of protocol that was used to decode this item.
	Protocol *ItemProtocolEnum `json:"protocol,omitempty"`
	// List of set ids
	Sets []string `json:"sets,omitempty"`
	// Type of technology that was used to detect this item.
	Technology *TechnologyEnum `json:"technology,omitempty"`
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
	TimeCreated *string `json:"time_created,omitempty"`
	// Last time the item was present.
	TimeLastPresent *string `json:"time_last_present,omitempty"`
	// Last time this item moved. This is the last time that the location for this item was changed.
	TimeMoved *string `json:"time_moved,omitempty"`
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
	TimeUpdated *string `json:"time_updated,omitempty"`
	// Type of item.
	Type *ItemTypeEnum `json:"type,omitempty"`
	// Url to the individual resource.
	URL *string `json:"url,omitempty"`
}

type Item1 struct {
	// String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.
	CodeHex *string `json:"code_hex,omitempty"`
	// Object containing the new configuration. This will be applied automatically when the values are valid.
	ConfigRequest map[string]interface{} `json:"config_request,omitempty"`
	// The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
	Custom interface{} `json:"custom,omitempty"`
	// Last known geolocation estimate of this object. Not guaranteed to be included in response.
	GeoCoords *GeoCoordsReadOnly `json:"geo_coords,omitempty"`
	// Unique identifier for resource.
	ID *string `json:"id,omitempty"`
	// Is this item actively detected in one of the zones at this moment? True when it is, false if it's not.
	IsPresent *bool `json:"is_present,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label    *string   `json:"label,omitempty"`
	Location *Location `json:"location,omitempty"`
	// Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
	LocationRequest *string `json:"location_request,omitempty"`
	// Object of searchable metadata for this resource. Can be freely used to store metadata properties.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// How many times this item moved since it's created on this server. Note that it is likely that not all moved events are available in the events (they are deleted after a configurable number of time). This field is never decreases. It gives a good indication of the usage of this item.
	MoveCount *int64 `json:"move_count,omitempty"`
	// Type of protocol that was used to decode this item.
	Protocol *ItemProtocolEnum `json:"protocol,omitempty"`
	// List of set ids
	Sets []string `json:"sets,omitempty"`
	// Type of technology that was used to detect this item.
	Technology *TechnologyEnum `json:"technology,omitempty"`
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
	TimeCreated *string `json:"time_created,omitempty"`
	// Last time the item was present.
	TimeLastPresent *string `json:"time_last_present,omitempty"`
	// Last time this item moved. This is the last time that the location for this item was changed.
	TimeMoved *string `json:"time_moved,omitempty"`
	// [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
	TimeUpdated *string `json:"time_updated,omitempty"`
	// Type of item.
	Type *ItemTypeEnum `json:"type,omitempty"`
	// Url to the individual resource.
	URL *string `json:"url,omitempty"`
}

type ItemType string

const (
	ItemTypeItem1 ItemType = "Item_1"
	ItemTypeItem2 ItemType = "Item_2"
	ItemTypeItem3 ItemType = "Item_3"
)

type Item struct {
	Item1 *Item1
	Item2 *Item2
	Item3 *Item3

	Type ItemType
}

func CreateItemItem1(item1 Item1) Item {
	typ := ItemTypeItem1

	return Item{
		Item1: &item1,
		Type:  typ,
	}
}

func CreateItemItem2(item2 Item2) Item {
	typ := ItemTypeItem2

	return Item{
		Item2: &item2,
		Type:  typ,
	}
}

func CreateItemItem3(item3 Item3) Item {
	typ := ItemTypeItem3

	return Item{
		Item3: &item3,
		Type:  typ,
	}
}

func (u *Item) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	item1 := new(Item1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&item1); err == nil {
		u.Item1 = item1
		u.Type = ItemTypeItem1
		return nil
	}

	item2 := new(Item2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&item2); err == nil {
		u.Item2 = item2
		u.Type = ItemTypeItem2
		return nil
	}

	item3 := new(Item3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&item3); err == nil {
		u.Item3 = item3
		u.Type = ItemTypeItem3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Item) MarshalJSON() ([]byte, error) {
	if u.Item1 != nil {
		return json.Marshal(u.Item1)
	}

	if u.Item2 != nil {
		return json.Marshal(u.Item2)
	}

	if u.Item3 != nil {
		return json.Marshal(u.Item3)
	}

	return nil, nil
}

type Item3Input struct {
	// String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.
	CodeHex *string `json:"code_hex,omitempty"`
	// Object containing the new configuration. This will be applied automatically when the values are valid.
	ConfigRequest map[string]interface{} `json:"config_request,omitempty"`
	// The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
	Custom interface{} `json:"custom,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label *string `json:"label,omitempty"`
	// Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
	LocationRequest *string `json:"location_request,omitempty"`
	// Object of searchable metadata for this resource. Can be freely used to store metadata properties.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Type of protocol that was used to decode this item.
	Protocol *ItemProtocolEnum `json:"protocol,omitempty"`
	// Type of technology that was used to detect this item.
	Technology *TechnologyEnum `json:"technology,omitempty"`
	// Type of item.
	Type *ItemTypeEnum `json:"type,omitempty"`
}

type Item2Input struct {
	// String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.
	CodeHex *string `json:"code_hex,omitempty"`
	// Object containing the new configuration. This will be applied automatically when the values are valid.
	ConfigRequest map[string]interface{} `json:"config_request,omitempty"`
	// The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
	Custom interface{} `json:"custom,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label *string `json:"label,omitempty"`
	// Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
	LocationRequest *string `json:"location_request,omitempty"`
	// Object of searchable metadata for this resource. Can be freely used to store metadata properties.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Type of protocol that was used to decode this item.
	Protocol *ItemProtocolEnum `json:"protocol,omitempty"`
	// Type of technology that was used to detect this item.
	Technology *TechnologyEnum `json:"technology,omitempty"`
	// Type of item.
	Type *ItemTypeEnum `json:"type,omitempty"`
}

type Item1Input struct {
	// String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.
	CodeHex *string `json:"code_hex,omitempty"`
	// Object containing the new configuration. This will be applied automatically when the values are valid.
	ConfigRequest map[string]interface{} `json:"config_request,omitempty"`
	// The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
	Custom interface{} `json:"custom,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label *string `json:"label,omitempty"`
	// Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
	LocationRequest *string `json:"location_request,omitempty"`
	// Object of searchable metadata for this resource. Can be freely used to store metadata properties.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Type of protocol that was used to decode this item.
	Protocol *ItemProtocolEnum `json:"protocol,omitempty"`
	// Type of technology that was used to detect this item.
	Technology *TechnologyEnum `json:"technology,omitempty"`
	// Type of item.
	Type *ItemTypeEnum `json:"type,omitempty"`
}
