/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetV2CallDataRecordsJsonRequest {
    /**
     * Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=created_at")
    public String[] createdAt;

    public GetV2CallDataRecordsJsonRequest withCreatedAt(String[] createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Return only call data records which have or do not have a call logged for them
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=has_call")
    public Boolean hasCall;

    public GetV2CallDataRecordsJsonRequest withHasCall(Boolean hasCall) {
        this.hasCall = hasCall;
        return this;
    }
    
    /**
     * IDs of call data records to fetch. If a record can't be found, that record won't be returned and your request will be successful
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=ids")
    public Long[] ids;

    public GetV2CallDataRecordsJsonRequest withIds(Long[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_paging_counts")
    public Boolean includePagingCounts;

    public GetV2CallDataRecordsJsonRequest withIncludePagingCounts(Boolean includePagingCounts) {
        this.includePagingCounts = includePagingCounts;
        return this;
    }
    
    /**
     * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit_paging_counts")
    public Boolean limitPagingCounts;

    public GetV2CallDataRecordsJsonRequest withLimitPagingCounts(Boolean limitPagingCounts) {
        this.limitPagingCounts = limitPagingCounts;
        return this;
    }
    
    /**
     * The current page to fetch results from. Defaults to 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;

    public GetV2CallDataRecordsJsonRequest withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;

    public GetV2CallDataRecordsJsonRequest withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Filters list by person_id. Multiple person ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=person_id")
    public Long[] personId;

    public GetV2CallDataRecordsJsonRequest withPersonId(Long[] personId) {
        this.personId = personId;
        return this;
    }
    
    /**
     * Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public String sortBy;

    public GetV2CallDataRecordsJsonRequest withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_direction")
    public String sortDirection;

    public GetV2CallDataRecordsJsonRequest withSortDirection(String sortDirection) {
        this.sortDirection = sortDirection;
        return this;
    }
    
    /**
     * Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=updated_at")
    public String[] updatedAt;

    public GetV2CallDataRecordsJsonRequest withUpdatedAt(String[] updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Filters list to only include guids
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=user_guid")
    public String[] userGuid;

    public GetV2CallDataRecordsJsonRequest withUserGuid(String[] userGuid) {
        this.userGuid = userGuid;
        return this;
    }
    
    public GetV2CallDataRecordsJsonRequest(){}
}
