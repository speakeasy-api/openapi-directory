"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class SchemaResponsePpostSchemaResponsesAttributesReviewsStateEnum(str, Enum):
    r"""A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."""
    INITIAL = 'initial'
    IN_PROGRESS = 'in_progress'
    APPROVED = 'approved'
    PENDING_MODERATION = 'pending_moderation'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemaResponsePpostSchemaResponsesAttributesInput:
    r"""The properties of the Schema Response."""
    
    date_created: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_created'), 'exclude': lambda f: f is None }})
    r"""The date the Schema Response was created"""  
    date_modified: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_modified'), 'exclude': lambda f: f is None }})
    r"""The date the Schema Response was most recently changed."""  
    date_submitted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_submitted'), 'exclude': lambda f: f is None }})
    r"""The date the Schema Response was submitted for approval."""  
    is_original_response: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_original_response'), 'exclude': lambda f: f is None }})
    r"""A bool that represents whether the Schema Response is the original one that was made when the registration was created."""  
    is_pending_current_user_approval: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pending_current_user_approval'), 'exclude': lambda f: f is None }})
    r"""A bool that represents whether the Schema Response needs the current user to approve the state transition."""  
    reviews_state: Optional[SchemaResponsePpostSchemaResponsesAttributesReviewsStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviews_state'), 'exclude': lambda f: f is None }})
    r"""A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."""  
    revision_justification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision_justification'), 'exclude': lambda f: f is None }})
    r"""A user provided string representing the reason a new Schema Response was needed."""  
    revision_responses: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision_responses'), 'exclude': lambda f: f is None }})
    r"""A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\\"q1\\": \\"Answer 1\\"}` the block key is `q1`.."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemaResponsePpostSchemaResponsesLinks:
    r"""URLs to alternative representations of the Schema Response entity."""
    
    self_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})
    r"""A link to the detail page for a Schema Response."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemaResponsePpostSchemaResponsesRelationships:
    r"""Links to other entities or entity collections that have a relationship to the file entity."""
    
    actions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions'), 'exclude': lambda f: f is None }})
    r"""A link to the Registration Schema Actions endpoint for this Schema Response."""  
    initiated_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initiated_by'), 'exclude': lambda f: f is None }})
    r"""A link to the User who initiated the creation of the Schema Response."""  
    registration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration'), 'exclude': lambda f: f is None }})
    r"""A link to the Registration for this Schema Response."""  
    registration_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_schema'), 'exclude': lambda f: f is None }})
    r"""A link to the Registration Schema for this Schema Response."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemaResponsePpostSchemaResponsesInput:
    
    attributes: SchemaResponsePpostSchemaResponsesAttributesInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})
    r"""The properties of the Schema Response."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type identifier of the Schema Response (`schema-response`)."""  
    links: Optional[SchemaResponsePpostSchemaResponsesLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    r"""URLs to alternative representations of the Schema Response entity."""  
    relationships: Optional[SchemaResponsePpostSchemaResponsesRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""Links to other entities or entity collections that have a relationship to the file entity."""  
    

@dataclasses.dataclass
class SchemaResponsePpostSchemaResponsesAttributes:
    r"""The properties of the Schema Response."""
    
    date_created: Optional[int] = dataclasses.field(default=None)
    r"""The date the Schema Response was created"""  
    date_modified: Optional[int] = dataclasses.field(default=None)
    r"""The date the Schema Response was most recently changed."""  
    date_submitted: Optional[int] = dataclasses.field(default=None)
    r"""The date the Schema Response was submitted for approval."""  
    is_original_response: Optional[bool] = dataclasses.field(default=None)
    r"""A bool that represents whether the Schema Response is the original one that was made when the registration was created."""  
    is_pending_current_user_approval: Optional[bool] = dataclasses.field(default=None)
    r"""A bool that represents whether the Schema Response needs the current user to approve the state transition."""  
    reviews_state: Optional[SchemaResponsePpostSchemaResponsesAttributesReviewsStateEnum] = dataclasses.field(default=None)
    r"""A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."""  
    revision_justification: Optional[str] = dataclasses.field(default=None)
    r"""A user provided string representing the reason a new Schema Response was needed."""  
    revision_responses: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\\"q1\\": \\"Answer 1\\"}` the block key is `q1`.."""  
    updated_response_keys: Optional[list[Any]] = dataclasses.field(default=None)
    r"""A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."""  
    

@dataclasses.dataclass
class SchemaResponsePpostSchemaResponses:
    r"""OK"""
    
    attributes: SchemaResponsePpostSchemaResponsesAttributes = dataclasses.field()
    r"""The properties of the Schema Response."""  
    type: str = dataclasses.field()
    r"""The type identifier of the Schema Response (`schema-response`)."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The unique identifier of the Schema Response."""  
    links: Optional[SchemaResponsePpostSchemaResponsesLinks] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the Schema Response entity."""  
    relationships: Optional[SchemaResponsePpostSchemaResponsesRelationships] = dataclasses.field(default=None)
    r"""Links to other entities or entity collections that have a relationship to the file entity."""  
    

@dataclasses.dataclass
class SchemaResponsePpostResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    