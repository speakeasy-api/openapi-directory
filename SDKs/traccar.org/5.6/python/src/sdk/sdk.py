"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .attributes import Attributes
from .calendars import Calendars
from .commands import Commands
from .devices import Devices
from .drivers import Drivers
from .events import Events
from .geofences import Geofences
from .groups import Groups
from .maintenance import Maintenance
from .notifications import Notifications
from .permissions import Permissions
from .positions import Positions
from .reports import Reports
from .server import Server
from .session import Session
from .statistics import Statistics
from .users import Users
from sdk.models import shared

SERVERS = [
    "https://demo.traccar.org/api",
    r"""Demo Server 1"""
    "https://demo2.traccar.org/api",
    r"""Demo Server 2"""
    "https://demo3.traccar.org/api",
    r"""Demo Server 3"""
    "https://demo4.traccar.org/api",
    r"""Demo Server 4"""
    "https://server.traccar.org/api",
    r"""Subscription Server"""
    "http://{host}:{port}/api",
    r"""Other Server"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Open Source GPS Tracking Platform"""
    attributes: Attributes
    r"""Computed attributes management"""
    calendars: Calendars
    r"""Calendar management"""
    commands: Commands
    r"""Sending commands to devices and stored command management"""
    devices: Devices
    r"""Device management"""
    drivers: Drivers
    r"""Drivers management"""
    events: Events
    r"""Retrieving event information"""
    geofences: Geofences
    r"""Geofence management"""
    groups: Groups
    r"""Group management"""
    maintenance: Maintenance
    r"""Maintenance management"""
    notifications: Notifications
    r"""User notifications management"""
    permissions: Permissions
    r"""User permissions and other object linking"""
    positions: Positions
    r"""Retrieving raw location information"""
    reports: Reports
    r"""Reports generation"""
    server: Server
    r"""Server information"""
    session: Session
    r"""User session management"""
    statistics: Statistics
    r"""Retrieving server statistics"""
    users: Users
    r"""User management"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.attributes = Attributes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.calendars = Calendars(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.commands = Commands(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.devices = Devices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.drivers = Drivers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.events = Events(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.geofences = Geofences(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.groups = Groups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.maintenance = Maintenance(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.notifications = Notifications(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.permissions = Permissions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.positions = Positions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.reports = Reports(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.server = Server(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.session = Session(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.statistics = Statistics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    