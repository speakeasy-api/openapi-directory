<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TasksClassic 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds files to a given task.
     * 
     * Adds files to a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddFileResponse
     */
	public function addFile(
        \OpenAPI\OpenAPI\Models\Operations\AddFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/files/input', \OpenAPI\OpenAPI\Models\Operations\AddFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a task.
     * 
     * Removes a task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete14Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete14Response
     */
	public function delete14(
        \OpenAPI\OpenAPI\Models\Operations\Delete14Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete14Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}', \OpenAPI\OpenAPI\Models\Operations\Delete14Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Delete14Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete14Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns contacts of a given task.
     * 
     * Returns contacts of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContacts1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContacts1Response
     */
	public function getContacts1(
        \OpenAPI\OpenAPI\Models\Operations\GetContacts1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContacts1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/contacts', \OpenAPI\OpenAPI\Models\Operations\GetContacts1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContacts1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given task.
     * 
     * Returns custom fields of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields7Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields7Response
     */
	public function getCustomFields7(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields7Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields7Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields7Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields7Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns dates of a given task.
     * 
     * Returns dates of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDates3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDates3Response
     */
	public function getDates3(
        \OpenAPI\OpenAPI\Models\Operations\GetDates3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDates3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/dates', \OpenAPI\OpenAPI\Models\Operations\GetDates3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDates3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDatesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDatesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns instructions of a given task.
     * 
     * Returns instructions of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInstructions2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInstructions2Response
     */
	public function getInstructions2(
        \OpenAPI\OpenAPI\Models\Operations\GetInstructions2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInstructions2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/instructions', \OpenAPI\OpenAPI\Models\Operations\GetInstructions2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInstructions2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instructionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstructionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns progress of a given task.
     * 
     * Returns progress of a given task. Progress contains information about task's status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProgressResponse
     */
	public function getProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/progress', \OpenAPI\OpenAPI\Models\Operations\GetProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskProgressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskProgressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns lists of files of a given task.
     * 
     * Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaskFilesResponse
     */
	public function getTaskFiles(
        \OpenAPI\OpenAPI\Models\Operations\GetTaskFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaskFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/files', \OpenAPI\OpenAPI\Models\Operations\GetTaskFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaskFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskFilesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskFilesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a task.
     * 
     * Starts a task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Start1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Start1Response
     */
	public function start1(
        \OpenAPI\OpenAPI\Models\Operations\Start1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Start1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/start', \OpenAPI\OpenAPI\Models\Operations\Start1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Start1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Task PO Number of a given task.
     * 
     * Updates Client Task PO Number of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientTaskPONumberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientTaskPONumberResponse
     */
	public function updateClientTaskPONumber(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientTaskPONumberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientTaskPONumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/clientTaskPONumber', \OpenAPI\OpenAPI\Models\Operations\UpdateClientTaskPONumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientTaskPONumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates contacts of a given task.
     * 
     * Updates contacts of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContacts1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContacts1Response
     */
	public function updateContacts1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContacts1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContacts1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/contacts', \OpenAPI\OpenAPI\Models\Operations\UpdateContacts1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContacts1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates custom fields of a given task.
     * 
     * Updates custom fields of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields5Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields5Response
     */
	public function updateCustomFields5(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields5Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/customFields', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields5Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates dates of a given task.
     * 
     * Updates dates of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDates2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDates2Response
     */
	public function updateDates2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDates2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDates2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/dates', \OpenAPI\OpenAPI\Models\Operations\UpdateDates2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectDatesDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDates2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDatesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDatesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates instructions of a given task.
     * 
     * Updates instructions of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions3Response
     */
	public function updateInstructions3(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/instructions', \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instructionsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instructionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstructionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates name of a given task.
     * 
     * Updates name of a given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNameResponse
     */
	public function updateName(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/{taskId}/name', \OpenAPI\OpenAPI\Models\Operations\UpdateNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringDTO', 'json');
            }
        }

        return $response;
    }
}