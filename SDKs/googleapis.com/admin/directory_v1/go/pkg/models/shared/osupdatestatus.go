// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OsUpdateStatusStateEnum - The update state of an OS update.
type OsUpdateStatusStateEnum string

const (
	OsUpdateStatusStateEnumUpdateStateUnspecified        OsUpdateStatusStateEnum = "updateStateUnspecified"
	OsUpdateStatusStateEnumUpdateStateNotStarted         OsUpdateStatusStateEnum = "updateStateNotStarted"
	OsUpdateStatusStateEnumUpdateStateDownloadInProgress OsUpdateStatusStateEnum = "updateStateDownloadInProgress"
	OsUpdateStatusStateEnumUpdateStateNeedReboot         OsUpdateStatusStateEnum = "updateStateNeedReboot"
)

func (e *OsUpdateStatusStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateStateUnspecified":
		fallthrough
	case "updateStateNotStarted":
		fallthrough
	case "updateStateDownloadInProgress":
		fallthrough
	case "updateStateNeedReboot":
		*e = OsUpdateStatusStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OsUpdateStatusStateEnum: %s", s)
	}
}

// OsUpdateStatus - Contains information regarding the current OS update status.
type OsUpdateStatus struct {
	// Date and time of the last reboot.
	RebootTime *string `json:"rebootTime,omitempty"`
	// The update state of an OS update.
	State *OsUpdateStatusStateEnum `json:"state,omitempty"`
	// New required platform version from the pending updated kiosk app.
	TargetKioskAppVersion *string `json:"targetKioskAppVersion,omitempty"`
	// New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot.
	TargetOsVersion *string `json:"targetOsVersion,omitempty"`
	// Date and time of the last update check.
	UpdateCheckTime *string `json:"updateCheckTime,omitempty"`
	// Date and time of the last successful OS update.
	UpdateTime *string `json:"updateTime,omitempty"`
}
