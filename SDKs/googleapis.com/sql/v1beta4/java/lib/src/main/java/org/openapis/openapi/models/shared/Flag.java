/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Flag - A flag resource.
 */
public class Flag {
    /**
     * Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedIntValues")
    public String[] allowedIntValues;
    public Flag withAllowedIntValues(String[] allowedIntValues) {
        this.allowedIntValues = allowedIntValues;
        return this;
    }
    
    /**
     * For `STRING` flags, a list of strings that the value can be set to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedStringValues")
    public String[] allowedStringValues;
    public Flag withAllowedStringValues(String[] allowedStringValues) {
        this.allowedStringValues = allowedStringValues;
        return this;
    }
    
    /**
     * The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliesTo")
    public FlagAppliesToEnum[] appliesTo;
    public Flag withAppliesTo(FlagAppliesToEnum[] appliesTo) {
        this.appliesTo = appliesTo;
        return this;
    }
    
    /**
     * Whether or not the flag is considered in beta.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inBeta")
    public Boolean inBeta;
    public Flag withInBeta(Boolean inBeta) {
        this.inBeta = inBeta;
        return this;
    }
    
    /**
     * This is always `sql#flag`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Flag withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * For `INTEGER` flags, the maximum allowed value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxValue")
    public String maxValue;
    public Flag withMaxValue(String maxValue) {
        this.maxValue = maxValue;
        return this;
    }
    
    /**
     * For `INTEGER` flags, the minimum allowed value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minValue")
    public String minValue;
    public Flag withMinValue(String minValue) {
        this.minValue = minValue;
        return this;
    }
    
    /**
     * This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Flag withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requiresRestart")
    public Boolean requiresRestart;
    public Flag withRequiresRestart(Boolean requiresRestart) {
        this.requiresRestart = requiresRestart;
        return this;
    }
    
    /**
     * The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public FlagTypeEnum type;
    public Flag withType(FlagTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
