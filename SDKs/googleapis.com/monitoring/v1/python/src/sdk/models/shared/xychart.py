"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import axis as shared_axis
from ..shared import chartoptions as shared_chartoptions
from ..shared import dataset as shared_dataset
from ..shared import threshold as shared_threshold
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class XyChart:
    r"""A chart that displays data on a 2D (X and Y axes) plane."""
    
    chart_options: Optional[shared_chartoptions.ChartOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chartOptions'), 'exclude': lambda f: f is None }})
    r"""Options to control visual rendering of a chart."""  
    data_sets: Optional[list[shared_dataset.DataSet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSets'), 'exclude': lambda f: f is None }})
    r"""Required. The data displayed in this chart."""  
    thresholds: Optional[list[shared_threshold.Threshold]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thresholds'), 'exclude': lambda f: f is None }})
    r"""Threshold lines drawn horizontally across the chart."""  
    timeshift_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeshiftDuration'), 'exclude': lambda f: f is None }})
    r"""The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type."""  
    x_axis: Optional[shared_axis.Axis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xAxis'), 'exclude': lambda f: f is None }})
    r"""A chart axis."""  
    y2_axis: Optional[shared_axis.Axis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('y2Axis'), 'exclude': lambda f: f is None }})
    r"""A chart axis."""  
    y_axis: Optional[shared_axis.Axis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yAxis'), 'exclude': lambda f: f is None }})
    r"""A chart axis."""  
    