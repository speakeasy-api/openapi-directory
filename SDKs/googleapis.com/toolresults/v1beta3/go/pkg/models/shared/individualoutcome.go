// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IndividualOutcomeOutcomeSummaryEnum string

const (
	IndividualOutcomeOutcomeSummaryEnumUnset        IndividualOutcomeOutcomeSummaryEnum = "unset"
	IndividualOutcomeOutcomeSummaryEnumSuccess      IndividualOutcomeOutcomeSummaryEnum = "success"
	IndividualOutcomeOutcomeSummaryEnumFailure      IndividualOutcomeOutcomeSummaryEnum = "failure"
	IndividualOutcomeOutcomeSummaryEnumInconclusive IndividualOutcomeOutcomeSummaryEnum = "inconclusive"
	IndividualOutcomeOutcomeSummaryEnumSkipped      IndividualOutcomeOutcomeSummaryEnum = "skipped"
	IndividualOutcomeOutcomeSummaryEnumFlaky        IndividualOutcomeOutcomeSummaryEnum = "flaky"
)

func (e *IndividualOutcomeOutcomeSummaryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unset":
		fallthrough
	case "success":
		fallthrough
	case "failure":
		fallthrough
	case "inconclusive":
		fallthrough
	case "skipped":
		fallthrough
	case "flaky":
		*e = IndividualOutcomeOutcomeSummaryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualOutcomeOutcomeSummaryEnum: %s", s)
	}
}

// IndividualOutcome - Step Id and outcome of each individual step that was run as a group with other steps with the same configuration.
type IndividualOutcome struct {
	// Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.
	MultistepNumber *int                                 `json:"multistepNumber,omitempty"`
	OutcomeSummary  *IndividualOutcomeOutcomeSummaryEnum `json:"outcomeSummary,omitempty"`
	//  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
	RunDuration *Duration `json:"runDuration,omitempty"`
	StepID      *string   `json:"stepId,omitempty"`
}
