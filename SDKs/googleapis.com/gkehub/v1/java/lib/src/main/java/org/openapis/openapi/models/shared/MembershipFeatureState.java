/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MembershipFeatureState - MembershipFeatureState contains Feature status information for a single Membership.
 */
public class MembershipFeatureState {
    /**
     * State for App Dev Exp Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appdevexperience")
    public AppDevExperienceFeatureState appdevexperience;

    public MembershipFeatureState withAppdevexperience(AppDevExperienceFeatureState appdevexperience) {
        this.appdevexperience = appdevexperience;
        return this;
    }
    
    /**
     * **Anthos Config Management**: State for a single cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configmanagement")
    public ConfigManagementMembershipState configmanagement;

    public MembershipFeatureState withConfigmanagement(ConfigManagementMembershipState configmanagement) {
        this.configmanagement = configmanagement;
        return this;
    }
    
    /**
     * **FleetObservability**: An empty state left as an example membership-specific Feature state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fleetobservability")
    public java.util.Map<String, Object> fleetobservability;

    public MembershipFeatureState withFleetobservability(java.util.Map<String, Object> fleetobservability) {
        this.fleetobservability = fleetobservability;
        return this;
    }
    
    /**
     * **Anthos Identity Service**: State for a single Membership.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityservice")
    public IdentityServiceMembershipState identityservice;

    public MembershipFeatureState withIdentityservice(IdentityServiceMembershipState identityservice) {
        this.identityservice = identityservice;
        return this;
    }
    
    /**
     * **Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicemesh")
    public ServiceMeshMembershipState servicemesh;

    public MembershipFeatureState withServicemesh(ServiceMeshMembershipState servicemesh) {
        this.servicemesh = servicemesh;
        return this;
    }
    
    /**
     * FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public FeatureState state;

    public MembershipFeatureState withState(FeatureState state) {
        this.state = state;
        return this;
    }
    
    public MembershipFeatureState(){}
}
