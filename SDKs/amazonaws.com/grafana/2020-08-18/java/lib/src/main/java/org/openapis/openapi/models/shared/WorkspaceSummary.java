/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * WorkspaceSummary - A structure that contains some information about one workspace in the account.
 */
public class WorkspaceSummary {
    @JsonProperty("authentication")
    public AuthenticationSummary authentication;

    public WorkspaceSummary withAuthentication(AuthenticationSummary authentication) {
        this.authentication = authentication;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public WorkspaceSummary withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public WorkspaceSummary withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonProperty("endpoint")
    public String endpoint;

    public WorkspaceSummary withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }
    
    @JsonProperty("grafanaVersion")
    public String grafanaVersion;

    public WorkspaceSummary withGrafanaVersion(String grafanaVersion) {
        this.grafanaVersion = grafanaVersion;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public WorkspaceSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modified")
    public OffsetDateTime modified;

    public WorkspaceSummary withModified(OffsetDateTime modified) {
        this.modified = modified;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public WorkspaceSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationDestinations")
    public NotificationDestinationTypeEnum[] notificationDestinations;

    public WorkspaceSummary withNotificationDestinations(NotificationDestinationTypeEnum[] notificationDestinations) {
        this.notificationDestinations = notificationDestinations;
        return this;
    }
    
    @JsonProperty("status")
    public WorkspaceStatusEnum status;

    public WorkspaceSummary withStatus(WorkspaceStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public WorkspaceSummary withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    public WorkspaceSummary(@JsonProperty("authentication") AuthenticationSummary authentication, @JsonProperty("created") OffsetDateTime created, @JsonProperty("endpoint") String endpoint, @JsonProperty("grafanaVersion") String grafanaVersion, @JsonProperty("id") String id, @JsonProperty("modified") OffsetDateTime modified, @JsonProperty("status") WorkspaceStatusEnum status) {
        this.authentication = authentication;
        this.created = created;
        this.endpoint = endpoint;
        this.grafanaVersion = grafanaVersion;
        this.id = id;
        this.modified = modified;
        this.status = status;
  }
}
