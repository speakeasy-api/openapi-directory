// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetExportThermalPrintBelegeBelegUUIDDialectEnum - The thermal printer dialect.
type GetExportThermalPrintBelegeBelegUUIDDialectEnum string

const (
	GetExportThermalPrintBelegeBelegUUIDDialectEnumEscpos     GetExportThermalPrintBelegeBelegUUIDDialectEnum = "escpos"
	GetExportThermalPrintBelegeBelegUUIDDialectEnumEscposlite GetExportThermalPrintBelegeBelegUUIDDialectEnum = "escposlite"
	GetExportThermalPrintBelegeBelegUUIDDialectEnumStar       GetExportThermalPrintBelegeBelegUUIDDialectEnum = "star"
	GetExportThermalPrintBelegeBelegUUIDDialectEnumText       GetExportThermalPrintBelegeBelegUUIDDialectEnum = "text"
)

func (e GetExportThermalPrintBelegeBelegUUIDDialectEnum) ToPointer() *GetExportThermalPrintBelegeBelegUUIDDialectEnum {
	return &e
}

func (e *GetExportThermalPrintBelegeBelegUUIDDialectEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "escpos":
		fallthrough
	case "escposlite":
		fallthrough
	case "star":
		fallthrough
	case "text":
		*e = GetExportThermalPrintBelegeBelegUUIDDialectEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetExportThermalPrintBelegeBelegUUIDDialectEnum: %v", v)
	}
}

// GetExportThermalPrintBelegeBelegUUIDEncodingEnum - The encoding of the binary data.
type GetExportThermalPrintBelegeBelegUUIDEncodingEnum string

const (
	GetExportThermalPrintBelegeBelegUUIDEncodingEnumRaw    GetExportThermalPrintBelegeBelegUUIDEncodingEnum = "raw"
	GetExportThermalPrintBelegeBelegUUIDEncodingEnumBase64 GetExportThermalPrintBelegeBelegUUIDEncodingEnum = "base64"
)

func (e GetExportThermalPrintBelegeBelegUUIDEncodingEnum) ToPointer() *GetExportThermalPrintBelegeBelegUUIDEncodingEnum {
	return &e
}

func (e *GetExportThermalPrintBelegeBelegUUIDEncodingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raw":
		fallthrough
	case "base64":
		*e = GetExportThermalPrintBelegeBelegUUIDEncodingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetExportThermalPrintBelegeBelegUUIDEncodingEnum: %v", v)
	}
}

type GetExportThermalPrintBelegeBelegUUIDRequest struct {
	// The `_uuid` of a particular `Beleg` to export.
	BelegUUID string `pathParam:"style=simple,explode=false,name=belegUuid"`
	// The thermal printer dialect.
	Dialect *GetExportThermalPrintBelegeBelegUUIDDialectEnum `queryParam:"style=form,explode=true,name=dialect"`
	// The encoding of the binary data.
	Encoding *GetExportThermalPrintBelegeBelegUUIDEncodingEnum `queryParam:"style=form,explode=true,name=encoding"`
	// Should the RKSV QR code should be rendered?
	Qr *bool `queryParam:"style=form,explode=true,name=qr"`
	// Number of characters per line.
	Width *int64 `queryParam:"style=form,explode=true,name=width"`
}

type GetExportThermalPrintBelegeBelegUUIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
