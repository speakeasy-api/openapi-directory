/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The type of the entity for which the synonym is being created (usually a table or a sequence).
 */
export enum SynonymEntitySourceTypeEnum {
  DatabaseEntityTypeUnspecified = "DATABASE_ENTITY_TYPE_UNSPECIFIED",
  DatabaseEntityTypeSchema = "DATABASE_ENTITY_TYPE_SCHEMA",
  DatabaseEntityTypeTable = "DATABASE_ENTITY_TYPE_TABLE",
  DatabaseEntityTypeColumn = "DATABASE_ENTITY_TYPE_COLUMN",
  DatabaseEntityTypeConstraint = "DATABASE_ENTITY_TYPE_CONSTRAINT",
  DatabaseEntityTypeIndex = "DATABASE_ENTITY_TYPE_INDEX",
  DatabaseEntityTypeTrigger = "DATABASE_ENTITY_TYPE_TRIGGER",
  DatabaseEntityTypeView = "DATABASE_ENTITY_TYPE_VIEW",
  DatabaseEntityTypeSequence = "DATABASE_ENTITY_TYPE_SEQUENCE",
  DatabaseEntityTypeStoredProcedure = "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",
  DatabaseEntityTypeFunction = "DATABASE_ENTITY_TYPE_FUNCTION",
  DatabaseEntityTypeSynonym = "DATABASE_ENTITY_TYPE_SYNONYM",
  DatabaseEntityTypeDatabasePackage = "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",
  DatabaseEntityTypeUdt = "DATABASE_ENTITY_TYPE_UDT",
  DatabaseEntityTypeMaterialView = "DATABASE_ENTITY_TYPE_MATERIAL_VIEW",
  DatabaseEntityTypeDatabase = "DATABASE_ENTITY_TYPE_DATABASE",
}

/**
 * Synonym's parent is a schema.
 */
export class SynonymEntity extends SpeakeasyBase {
  /**
   * Custom engine specific features.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customFeatures" })
  customFeatures?: Record<string, any>;

  /**
   * The name of the entity for which the synonym is being created (the source).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceEntity" })
  sourceEntity?: string;

  /**
   * The type of the entity for which the synonym is being created (usually a table or a sequence).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceType" })
  sourceType?: SynonymEntitySourceTypeEnum;
}
