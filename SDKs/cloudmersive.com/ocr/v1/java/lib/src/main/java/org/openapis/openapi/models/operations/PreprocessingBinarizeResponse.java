/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class PreprocessingBinarizeResponse {
    
    public String contentType;

    public PreprocessingBinarizeResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * OK
     */
    
    public String preprocessingBinarize200ApplicationJSONByteString;

    public PreprocessingBinarizeResponse withPreprocessingBinarize200ApplicationJSONByteString(String preprocessingBinarize200ApplicationJSONByteString) {
        this.preprocessingBinarize200ApplicationJSONByteString = preprocessingBinarize200ApplicationJSONByteString;
        return this;
    }
    
    /**
     * OK
     */
    
    public String preprocessingBinarize200ApplicationXMLByteString;

    public PreprocessingBinarizeResponse withPreprocessingBinarize200ApplicationXMLByteString(String preprocessingBinarize200ApplicationXMLByteString) {
        this.preprocessingBinarize200ApplicationXMLByteString = preprocessingBinarize200ApplicationXMLByteString;
        return this;
    }
    
    /**
     * OK
     */
    
    public String preprocessingBinarize200TextJSONByteString;

    public PreprocessingBinarizeResponse withPreprocessingBinarize200TextJSONByteString(String preprocessingBinarize200TextJSONByteString) {
        this.preprocessingBinarize200TextJSONByteString = preprocessingBinarize200TextJSONByteString;
        return this;
    }
    
    /**
     * OK
     */
    
    public String preprocessingBinarize200TextXMLByteString;

    public PreprocessingBinarizeResponse withPreprocessingBinarize200TextXMLByteString(String preprocessingBinarize200TextXMLByteString) {
        this.preprocessingBinarize200TextXMLByteString = preprocessingBinarize200TextXMLByteString;
        return this;
    }
    
    
    public Integer statusCode;

    public PreprocessingBinarizeResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public PreprocessingBinarizeResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    public PreprocessingBinarizeResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
