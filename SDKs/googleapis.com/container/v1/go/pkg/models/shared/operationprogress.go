// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OperationProgressStatusEnum - Status of an operation stage. Unset for single-stage operations.
type OperationProgressStatusEnum string

const (
	OperationProgressStatusEnumStatusUnspecified OperationProgressStatusEnum = "STATUS_UNSPECIFIED"
	OperationProgressStatusEnumPending           OperationProgressStatusEnum = "PENDING"
	OperationProgressStatusEnumRunning           OperationProgressStatusEnum = "RUNNING"
	OperationProgressStatusEnumDone              OperationProgressStatusEnum = "DONE"
	OperationProgressStatusEnumAborting          OperationProgressStatusEnum = "ABORTING"
)

func (e *OperationProgressStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATUS_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "DONE":
		fallthrough
	case "ABORTING":
		*e = OperationProgressStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OperationProgressStatusEnum: %s", s)
	}
}

// OperationProgress - Information about operation (or operation stage) progress.
type OperationProgress struct {
	// Progress metric bundle, for example: metrics: [{name: "nodes done", int_value: 15}, {name: "nodes total", int_value: 32}] or metrics: [{name: "progress", double_value: 0.56}, {name: "progress scale", double_value: 1.0}]
	Metrics []Metric `json:"metrics,omitempty"`
	// A non-parameterized string describing an operation stage. Unset for single-stage operations.
	Name *string `json:"name,omitempty"`
	// Substages of an operation or a stage.
	Stages []OperationProgress `json:"stages,omitempty"`
	// Status of an operation stage. Unset for single-stage operations.
	Status *OperationProgressStatusEnum `json:"status,omitempty"`
}
