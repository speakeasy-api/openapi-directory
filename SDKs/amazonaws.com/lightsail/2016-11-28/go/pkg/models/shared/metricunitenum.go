// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MetricUnitEnum string

const (
	MetricUnitEnumSeconds         MetricUnitEnum = "Seconds"
	MetricUnitEnumMicroseconds    MetricUnitEnum = "Microseconds"
	MetricUnitEnumMilliseconds    MetricUnitEnum = "Milliseconds"
	MetricUnitEnumBytes           MetricUnitEnum = "Bytes"
	MetricUnitEnumKilobytes       MetricUnitEnum = "Kilobytes"
	MetricUnitEnumMegabytes       MetricUnitEnum = "Megabytes"
	MetricUnitEnumGigabytes       MetricUnitEnum = "Gigabytes"
	MetricUnitEnumTerabytes       MetricUnitEnum = "Terabytes"
	MetricUnitEnumBits            MetricUnitEnum = "Bits"
	MetricUnitEnumKilobits        MetricUnitEnum = "Kilobits"
	MetricUnitEnumMegabits        MetricUnitEnum = "Megabits"
	MetricUnitEnumGigabits        MetricUnitEnum = "Gigabits"
	MetricUnitEnumTerabits        MetricUnitEnum = "Terabits"
	MetricUnitEnumPercent         MetricUnitEnum = "Percent"
	MetricUnitEnumCount           MetricUnitEnum = "Count"
	MetricUnitEnumBytesSecond     MetricUnitEnum = "Bytes/Second"
	MetricUnitEnumKilobytesSecond MetricUnitEnum = "Kilobytes/Second"
	MetricUnitEnumMegabytesSecond MetricUnitEnum = "Megabytes/Second"
	MetricUnitEnumGigabytesSecond MetricUnitEnum = "Gigabytes/Second"
	MetricUnitEnumTerabytesSecond MetricUnitEnum = "Terabytes/Second"
	MetricUnitEnumBitsSecond      MetricUnitEnum = "Bits/Second"
	MetricUnitEnumKilobitsSecond  MetricUnitEnum = "Kilobits/Second"
	MetricUnitEnumMegabitsSecond  MetricUnitEnum = "Megabits/Second"
	MetricUnitEnumGigabitsSecond  MetricUnitEnum = "Gigabits/Second"
	MetricUnitEnumTerabitsSecond  MetricUnitEnum = "Terabits/Second"
	MetricUnitEnumCountSecond     MetricUnitEnum = "Count/Second"
	MetricUnitEnumNone            MetricUnitEnum = "None"
)

func (e MetricUnitEnum) ToPointer() *MetricUnitEnum {
	return &e
}

func (e *MetricUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Seconds":
		fallthrough
	case "Microseconds":
		fallthrough
	case "Milliseconds":
		fallthrough
	case "Bytes":
		fallthrough
	case "Kilobytes":
		fallthrough
	case "Megabytes":
		fallthrough
	case "Gigabytes":
		fallthrough
	case "Terabytes":
		fallthrough
	case "Bits":
		fallthrough
	case "Kilobits":
		fallthrough
	case "Megabits":
		fallthrough
	case "Gigabits":
		fallthrough
	case "Terabits":
		fallthrough
	case "Percent":
		fallthrough
	case "Count":
		fallthrough
	case "Bytes/Second":
		fallthrough
	case "Kilobytes/Second":
		fallthrough
	case "Megabytes/Second":
		fallthrough
	case "Gigabytes/Second":
		fallthrough
	case "Terabytes/Second":
		fallthrough
	case "Bits/Second":
		fallthrough
	case "Kilobits/Second":
		fallthrough
	case "Megabits/Second":
		fallthrough
	case "Gigabits/Second":
		fallthrough
	case "Terabits/Second":
		fallthrough
	case "Count/Second":
		fallthrough
	case "None":
		*e = MetricUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricUnitEnum: %v", v)
	}
}
