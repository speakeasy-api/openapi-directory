// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type TestCreateDeviceSetOfUserSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type TestCreateDeviceSetOfUserPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// TestCreateDeviceSetOfUserDeviceSetUpdateInformation - The name of the device set and the list of device IDs
type TestCreateDeviceSetOfUserDeviceSetUpdateInformation struct {
	// List of device IDs
	Devices []string `json:"devices"`
	// The name of the device set
	Name string `json:"name"`
}

type TestCreateDeviceSetOfUserRequest struct {
	PathParams TestCreateDeviceSetOfUserPathParams
	Request    TestCreateDeviceSetOfUserDeviceSetUpdateInformation `request:"mediaType=application/json"`
	Security   TestCreateDeviceSetOfUserSecurity
}

// TestCreateDeviceSetOfUserTestCloudErrorDetails - Details of a failed operation
type TestCreateDeviceSetOfUserTestCloudErrorDetails struct {
	// Human-readable message that describes the error
	Message string `json:"message"`
	// Status of the operation
	Status string `json:"status"`
}

type TestCreateDeviceSetOfUserDeviceSetDeviceConfigurationsImage struct {
	Thumb *string `json:"thumb,omitempty"`
}

type TestCreateDeviceSetOfUserDeviceSetDeviceConfigurationsModel struct {
	FormFactor   *string `json:"formFactor,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
	ReleaseDate  *string `json:"releaseDate,omitempty"`
}

type TestCreateDeviceSetOfUserDeviceSetDeviceConfigurations struct {
	// The unique id of the device configuration
	ID     *string                                                      `json:"id,omitempty"`
	Image  *TestCreateDeviceSetOfUserDeviceSetDeviceConfigurationsImage `json:"image,omitempty"`
	Model  *TestCreateDeviceSetOfUserDeviceSetDeviceConfigurationsModel `json:"model,omitempty"`
	Os     *string                                                      `json:"os,omitempty"`
	OsName *string                                                      `json:"osName,omitempty"`
}

// TestCreateDeviceSetOfUserDeviceSetDeviceSetOwner - The owner of a device set
type TestCreateDeviceSetOfUserDeviceSetDeviceSetOwner struct {
	// Display name of the account
	DisplayName *string `json:"displayName,omitempty"`
	// Account ID
	ID string `json:"id"`
	// Name of the account
	Name string `json:"name"`
	// Type of account
	Type string `json:"type"`
}

// TestCreateDeviceSetOfUserDeviceSet - The name and devices of the device set
type TestCreateDeviceSetOfUserDeviceSet struct {
	DeviceConfigurations []TestCreateDeviceSetOfUserDeviceSetDeviceConfigurations `json:"deviceConfigurations"`
	// Identifier of the device set
	ID string `json:"id"`
	// The number of manufacturers in the device set's device selection
	ManufacturerCount *float64 `json:"manufacturerCount,omitempty"`
	// Name of the device set
	Name string `json:"name"`
	// The number of os versions in the device set's device selection
	OsVersionCount *float64 `json:"osVersionCount,omitempty"`
	// The owner of a device set
	Owner TestCreateDeviceSetOfUserDeviceSetDeviceSetOwner `json:"owner"`
	// Slug of the device set
	Slug *string `json:"slug,omitempty"`
}

type TestCreateDeviceSetOfUserResponse struct {
	ContentType string
	// OK
	DeviceSet   *TestCreateDeviceSetOfUserDeviceSet
	StatusCode  int
	RawResponse *http.Response
	// Invalid list of device IDs or conflicting name
	TestCloudErrorDetails *TestCreateDeviceSetOfUserTestCloudErrorDetails
}
