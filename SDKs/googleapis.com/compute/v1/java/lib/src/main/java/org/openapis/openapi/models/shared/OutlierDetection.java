/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OutlierDetection - Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
 */
public class OutlierDetection {
    /**
     * A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseEjectionTime")
    public Duration baseEjectionTime;

    public OutlierDetection withBaseEjectionTime(Duration baseEjectionTime) {
        this.baseEjectionTime = baseEjectionTime;
        return this;
    }
    
    /**
     * Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consecutiveErrors")
    public Integer consecutiveErrors;

    public OutlierDetection withConsecutiveErrors(Integer consecutiveErrors) {
        this.consecutiveErrors = consecutiveErrors;
        return this;
    }
    
    /**
     * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consecutiveGatewayFailure")
    public Integer consecutiveGatewayFailure;

    public OutlierDetection withConsecutiveGatewayFailure(Integer consecutiveGatewayFailure) {
        this.consecutiveGatewayFailure = consecutiveGatewayFailure;
        return this;
    }
    
    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforcingConsecutiveErrors")
    public Integer enforcingConsecutiveErrors;

    public OutlierDetection withEnforcingConsecutiveErrors(Integer enforcingConsecutiveErrors) {
        this.enforcingConsecutiveErrors = enforcingConsecutiveErrors;
        return this;
    }
    
    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforcingConsecutiveGatewayFailure")
    public Integer enforcingConsecutiveGatewayFailure;

    public OutlierDetection withEnforcingConsecutiveGatewayFailure(Integer enforcingConsecutiveGatewayFailure) {
        this.enforcingConsecutiveGatewayFailure = enforcingConsecutiveGatewayFailure;
        return this;
    }
    
    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforcingSuccessRate")
    public Integer enforcingSuccessRate;

    public OutlierDetection withEnforcingSuccessRate(Integer enforcingSuccessRate) {
        this.enforcingSuccessRate = enforcingSuccessRate;
        return this;
    }
    
    /**
     * A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    public Duration interval;

    public OutlierDetection withInterval(Duration interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxEjectionPercent")
    public Integer maxEjectionPercent;

    public OutlierDetection withMaxEjectionPercent(Integer maxEjectionPercent) {
        this.maxEjectionPercent = maxEjectionPercent;
        return this;
    }
    
    /**
     * The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successRateMinimumHosts")
    public Integer successRateMinimumHosts;

    public OutlierDetection withSuccessRateMinimumHosts(Integer successRateMinimumHosts) {
        this.successRateMinimumHosts = successRateMinimumHosts;
        return this;
    }
    
    /**
     * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successRateRequestVolume")
    public Integer successRateRequestVolume;

    public OutlierDetection withSuccessRateRequestVolume(Integer successRateRequestVolume) {
        this.successRateRequestVolume = successRateRequestVolume;
        return this;
    }
    
    /**
     * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successRateStdevFactor")
    public Integer successRateStdevFactor;

    public OutlierDetection withSuccessRateStdevFactor(Integer successRateStdevFactor) {
        this.successRateStdevFactor = successRateStdevFactor;
        return this;
    }
    
    public OutlierDetection(){}
}
