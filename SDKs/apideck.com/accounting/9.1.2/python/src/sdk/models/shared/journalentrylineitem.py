"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import linkedledgeraccount as shared_linkedledgeraccount
from ..shared import linkedtaxrate as shared_linkedtaxrate
from ..shared import linkedtrackingcategory as shared_linkedtrackingcategory
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class JournalEntryLineItemTypeEnum(str, Enum):
    r"""Debit entries are considered positive, and credit entries are considered negative."""
    DEBIT = 'debit'
    CREDIT = 'credit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalEntryLineItemInput:
    
    ledger_account: shared_linkedledgeraccount.LinkedLedgerAccountInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ledger_account') }})  
    total_amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount') }})
    r"""Debit entries are considered positive, and credit entries are considered negative."""  
    type: JournalEntryLineItemTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Debit entries are considered positive, and credit entries are considered negative."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User defined description"""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount'), 'exclude': lambda f: f is None }})
    r"""Tax amount"""  
    tax_rate: Optional[shared_linkedtaxrate.LinkedTaxRateInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_rate'), 'exclude': lambda f: f is None }})  
    tracking_category: Optional[shared_linkedtrackingcategory.LinkedTrackingCategory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_category'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalEntryLineItem:
    
    ledger_account: shared_linkedledgeraccount.LinkedLedgerAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ledger_account') }})  
    total_amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount') }})
    r"""Debit entries are considered positive, and credit entries are considered negative."""  
    type: JournalEntryLineItemTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Debit entries are considered positive, and credit entries are considered negative."""  
    department_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('department_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an object."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User defined description"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an object."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an object."""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount'), 'exclude': lambda f: f is None }})
    r"""Tax amount"""  
    tax_rate: Optional[shared_linkedtaxrate.LinkedTaxRate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_rate'), 'exclude': lambda f: f is None }})  
    tracking_category: Optional[shared_linkedtrackingcategory.LinkedTrackingCategory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_category'), 'exclude': lambda f: f is None }})  
    