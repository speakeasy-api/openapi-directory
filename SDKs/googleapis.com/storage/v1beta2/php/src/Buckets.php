<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Buckets 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Permanently deletes an empty bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteResponse
     */
	public function storageBucketsDelete(
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}', \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageBucketsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns metadata for the specified bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetResponse
     */
	public function storageBucketsGet(
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}', \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageBucketsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertResponse
     */
	public function storageBucketsInsert(
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bucket", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageBucketsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of buckets for a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListResponse
     */
	public function storageBucketsList(
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageBucketsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageBucketsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buckets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Buckets', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a bucket. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchResponse
     */
	public function storageBucketsPatch(
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}', \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bucket1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageBucketsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateResponse
     */
	public function storageBucketsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}', \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bucket1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageBucketsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bucket', 'json');
            }
        }

        return $response;
    }
}