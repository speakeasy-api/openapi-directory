// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetPaymentsForPayoutPAV3PathParams struct {
	// The id (UUID) of the payout.
	PayoutID string `pathParam:"style=simple,explode=false,name=payoutId"`
}

// GetPaymentsForPayoutPAV3StatusEnum - Payment Status
type GetPaymentsForPayoutPAV3StatusEnum string

const (
	GetPaymentsForPayoutPAV3StatusEnumAccepted             GetPaymentsForPayoutPAV3StatusEnum = "ACCEPTED"
	GetPaymentsForPayoutPAV3StatusEnumAwaitingFunds        GetPaymentsForPayoutPAV3StatusEnum = "AWAITING_FUNDS"
	GetPaymentsForPayoutPAV3StatusEnumFunded               GetPaymentsForPayoutPAV3StatusEnum = "FUNDED"
	GetPaymentsForPayoutPAV3StatusEnumUnfunded             GetPaymentsForPayoutPAV3StatusEnum = "UNFUNDED"
	GetPaymentsForPayoutPAV3StatusEnumBankPaymentRequested GetPaymentsForPayoutPAV3StatusEnum = "BANK_PAYMENT_REQUESTED"
	GetPaymentsForPayoutPAV3StatusEnumRejected             GetPaymentsForPayoutPAV3StatusEnum = "REJECTED"
	GetPaymentsForPayoutPAV3StatusEnumAcceptedByRails      GetPaymentsForPayoutPAV3StatusEnum = "ACCEPTED_BY_RAILS"
	GetPaymentsForPayoutPAV3StatusEnumConfirmed            GetPaymentsForPayoutPAV3StatusEnum = "CONFIRMED"
	GetPaymentsForPayoutPAV3StatusEnumFailed               GetPaymentsForPayoutPAV3StatusEnum = "FAILED"
	GetPaymentsForPayoutPAV3StatusEnumReturned             GetPaymentsForPayoutPAV3StatusEnum = "RETURNED"
	GetPaymentsForPayoutPAV3StatusEnumWithdrawn            GetPaymentsForPayoutPAV3StatusEnum = "WITHDRAWN"
)

func (e *GetPaymentsForPayoutPAV3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "AWAITING_FUNDS":
		fallthrough
	case "FUNDED":
		fallthrough
	case "UNFUNDED":
		fallthrough
	case "BANK_PAYMENT_REQUESTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "ACCEPTED_BY_RAILS":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "FAILED":
		fallthrough
	case "RETURNED":
		fallthrough
	case "WITHDRAWN":
		*e = GetPaymentsForPayoutPAV3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentsForPayoutPAV3StatusEnum: %s", s)
	}
}

type GetPaymentsForPayoutPAV3QueryParams struct {
	// Page number. Default is 1.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results to return in a page
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
	PaymentAmountFrom *int `queryParam:"style=form,explode=true,name=paymentAmountFrom"`
	// The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
	PaymentAmountTo *int `queryParam:"style=form,explode=true,name=paymentAmountTo"`
	// The remote id of the payees.
	RemoteID *string `queryParam:"style=form,explode=true,name=remoteId"`
	// Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
	// If set to true, and you have permission, the PII values will be returned as their original unmasked values.
	//
	Sensitive *bool `queryParam:"style=form,explode=true,name=sensitive"`
	// <p>List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId</p>
	// <p>The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
	// routingNumber, accountNumber, remoteId, submittedDateTime and status</p>
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
	SourceAmountFrom *int `queryParam:"style=form,explode=true,name=sourceAmountFrom"`
	// The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
	SourceAmountTo *int `queryParam:"style=form,explode=true,name=sourceAmountTo"`
	// Payment Status
	Status *GetPaymentsForPayoutPAV3StatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The submitted date from range filter. Format is yyyy-MM-dd.
	SubmittedDateFrom *types.Date `queryParam:"style=form,explode=true,name=submittedDateFrom"`
	// The submitted date to range filter. Format is yyyy-MM-dd.
	SubmittedDateTo *types.Date `queryParam:"style=form,explode=true,name=submittedDateTo"`
}

type GetPaymentsForPayoutPAV3Request struct {
	PathParams  GetPaymentsForPayoutPAV3PathParams
	QueryParams GetPaymentsForPayoutPAV3QueryParams
}

type GetPaymentsForPayoutPAV3Response struct {
	ContentType string
	// 200 response, data found okay
	GetPaymentsForPayoutResponseV3 *shared.GetPaymentsForPayoutResponseV3
	StatusCode                     int
	RawResponse                    *http.Response
	// Invalid request. See Error message payload for details of failure
	InlineResponse400 *shared.InlineResponse400
	// Invalid access token. May be expired or invalid
	InlineResponse401 *shared.InlineResponse401
	// The authentication does not have permissions to access the resource
	// This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions
	//
	InlineResponse403 *shared.InlineResponse403
	// The resource was not found or is no longer available
	//
	InlineResponse404 *shared.InlineResponse404
}
