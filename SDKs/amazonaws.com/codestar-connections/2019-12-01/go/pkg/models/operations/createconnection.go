// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateConnectionXAmzTargetEnum
type CreateConnectionXAmzTargetEnum string

const (
	CreateConnectionXAmzTargetEnumComAmazonawsCodestarConnectionsCodeStarConnections20191201CreateConnection CreateConnectionXAmzTargetEnum = "com.amazonaws.codestar.connections.CodeStar_connections_20191201.CreateConnection"
)

func (e CreateConnectionXAmzTargetEnum) ToPointer() *CreateConnectionXAmzTargetEnum {
	return &e
}

func (e *CreateConnectionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com.amazonaws.codestar.connections.CodeStar_connections_20191201.CreateConnection":
		*e = CreateConnectionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConnectionXAmzTargetEnum: %v", v)
	}
}

type CreateConnectionRequest struct {
	CreateConnectionInput shared.CreateConnectionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateConnectionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateConnectionResponse struct {
	ContentType string
	// Success
	CreateConnectionOutput *shared.CreateConnectionOutput
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceUnavailableException
	ResourceUnavailableException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
