"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NodePoolAutoscalingLocationPolicyEnum(str, Enum):
    r"""Location policy used when scaling up a nodepool."""
    LOCATION_POLICY_UNSPECIFIED = 'LOCATION_POLICY_UNSPECIFIED'
    BALANCED = 'BALANCED'
    ANY = 'ANY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodePoolAutoscaling:
    r"""NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage."""
    
    autoprovisioned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoprovisioned'), 'exclude': lambda f: f is None }})
    r"""Can this node pool be deleted automatically."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Is autoscaling enabled for this node pool."""  
    location_policy: Optional[NodePoolAutoscalingLocationPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationPolicy'), 'exclude': lambda f: f is None }})
    r"""Location policy used when scaling up a nodepool."""  
    max_node_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNodeCount'), 'exclude': lambda f: f is None }})
    r"""Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster."""  
    min_node_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minNodeCount'), 'exclude': lambda f: f is None }})
    r"""Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count."""  
    total_max_node_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalMaxNodeCount'), 'exclude': lambda f: f is None }})
    r"""Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields."""  
    total_min_node_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalMinNodeCount'), 'exclude': lambda f: f is None }})
    r"""Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields."""  
    