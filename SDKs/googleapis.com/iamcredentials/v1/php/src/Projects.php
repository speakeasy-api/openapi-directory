<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generates an OAuth 2.0 access token for a service account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse
     */
	public function iamcredentialsProjectsServiceAccountsGenerateAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:generateAccessToken', \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateAccessTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateAccessTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateAccessTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates an OpenID Connect ID token for a service account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenResponse
     */
	public function iamcredentialsProjectsServiceAccountsGenerateIdToken(
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:generateIdToken', \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateIdTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsGenerateIdTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateIdTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateIdTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Signs a blob using a service account's system-managed private key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobResponse
     */
	public function iamcredentialsProjectsServiceAccountsSignBlob(
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:signBlob', \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "signBlobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignBlobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->signBlobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SignBlobResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Signs a JWT using a service account's system-managed private key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtResponse
     */
	public function iamcredentialsProjectsServiceAccountsSignJwt(
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:signJwt', \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "signJwtRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IamcredentialsProjectsServiceAccountsSignJwtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->signJwtResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SignJwtResponse', 'json');
            }
        }

        return $response;
    }
}