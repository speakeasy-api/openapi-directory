import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
/**
 * Contains information about CloudTrail access.
 */
export declare class StartPolicyGenerationRequestBodyCloudTrailDetails extends SpeakeasyBase {
    accessRole?: string;
    endTime?: Date;
    startTime?: Date;
    trails?: shared.Trail[];
}
/**
 * Contains the ARN details about the IAM entity for which the policy is generated.
 */
export declare class StartPolicyGenerationRequestBodyPolicyGenerationDetails extends SpeakeasyBase {
    principalArn?: string;
}
export declare class StartPolicyGenerationRequestBody extends SpeakeasyBase {
    /**
     * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p> <p>If you do not specify a client token, one is automatically generated by the Amazon Web Services SDK.</p>
     */
    clientToken?: string;
    /**
     * Contains information about CloudTrail access.
     */
    cloudTrailDetails?: StartPolicyGenerationRequestBodyCloudTrailDetails;
    /**
     * Contains the ARN details about the IAM entity for which the policy is generated.
     */
    policyGenerationDetails: StartPolicyGenerationRequestBodyPolicyGenerationDetails;
}
export declare class StartPolicyGenerationRequest extends SpeakeasyBase {
    requestBody: StartPolicyGenerationRequestBody;
    xAmzAlgorithm?: string;
    xAmzContentSha256?: string;
    xAmzCredential?: string;
    xAmzDate?: string;
    xAmzSecurityToken?: string;
    xAmzSignature?: string;
    xAmzSignedHeaders?: string;
}
export declare class StartPolicyGenerationResponse extends SpeakeasyBase {
    /**
     * AccessDeniedException
     */
    accessDeniedException?: any;
    /**
     * ConflictException
     */
    conflictException?: any;
    contentType: string;
    /**
     * InternalServerException
     */
    internalServerException?: any;
    /**
     * ServiceQuotaExceededException
     */
    serviceQuotaExceededException?: any;
    /**
     * Success
     */
    startPolicyGenerationResponse?: shared.StartPolicyGenerationResponse;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * ThrottlingException
     */
    throttlingException?: any;
    /**
     * ValidationException
     */
    validationException?: any;
}
