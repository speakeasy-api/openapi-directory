/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class GetDetailsSingleBatchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=batchUuid",
  })
  batchUuid: string;
}

/**
 * status of the batch object
 */
export enum GetDetailsSingleBatchBatchStatusEnum {
  PendingApproval = "PENDING_APPROVAL",
  Rejected = "REJECTED",
  Complete = "COMPLETE",
  Open = "OPEN",
  Cancelled = "CANCELLED",
  PendingParentBatchApproval = "PENDING_PARENT_BATCH_APPROVAL",
  ReadyForProcessing = "READY_FOR_PROCESSING",
  Processing = "PROCESSING",
}

/**
 * The type of the batch - can be one of the listed 3
 */
export enum GetDetailsSingleBatchBatchTypeEnum {
  InternalTransfer = "INTERNAL_TRANSFER",
  BankTransfer = "BANK_TRANSFER",
  NewPayee = "NEW_PAYEE",
}

/**
 * Returns the details of the batch specified in the API endpoint - {batchUuid}.
 */
export class GetDetailsSingleBatchBatch extends SpeakeasyBase {
  /**
   * An optional name you give to the batch at creation time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchName" })
  batchName?: string;

  /**
   * A UUID for this item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchUuid" })
  batchUuid?: string;

  /**
   * An optional POST URL that all events for this batch will be sent to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "callbackUrl" })
  callbackUrl?: string;

  /**
   * All payments in the batch must be the same currency - either EUR or GBP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCreated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCreated?: Date;

  /**
   * An optional job number you can give to the batch to help link it to your own system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobNumber" })
  jobNumber?: string;

  /**
   * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  /**
   * Once processed, a count of the number of items that didn’t process successfully.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfItemsFailed" })
  numberOfItemsFailed?: number;

  /**
   * A count of the number of items in the batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfItemsSubmitted" })
  numberOfItemsSubmitted?: number;

  /**
   * Once processed, a count of the number of items that processed successfully.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfItemsSucceeded" })
  numberOfItemsSucceeded?: number;

  /**
   * A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceName" })
  sourceName?: string;

  /**
   * status of the batch object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetDetailsSingleBatchBatchStatusEnum;

  /**
   * The type of the batch - can be one of the listed 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetDetailsSingleBatchBatchTypeEnum;

  /**
   * Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueOfItemsFailed" })
  valueOfItemsFailed?: number;

  /**
   * A sum of the value of items in the batch. Specified in pence or cent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueOfItemsSubmitted" })
  valueOfItemsSubmitted?: number;

  /**
   * Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueOfItemsSucceeded" })
  valueOfItemsSucceeded?: number;
}

export class GetDetailsSingleBatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Returns the details of the batch specified in the API endpoint - {batchUuid}.
   */
  @SpeakeasyMetadata()
  batch?: GetDetailsSingleBatchBatch;
}
