"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetGroupRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Use group name instead of id"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetGroup200ApplicationJSONExtras:
    
    visible_group_names: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible_group_names') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetGroup200ApplicationJSONGroup:
    
    allow_membership_requests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_membership_requests') }})  
    allow_unknown_sender_topic_replies: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_unknown_sender_topic_replies') }})  
    automatic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatic') }})  
    automatic_membership_email_domains: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatic_membership_email_domains') }})  
    bio_cooked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_cooked') }})  
    bio_excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_excerpt') }})  
    bio_raw: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_raw') }})  
    can_admin_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_admin_group') }})  
    can_see_members: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_see_members') }})  
    default_notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_notification_level') }})  
    email_password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_password') }})  
    email_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_username') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    grant_trust_level: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_trust_level') }})  
    has_messages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_messages') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    imap_last_error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_last_error') }})  
    imap_mailbox_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_mailbox_name') }})  
    imap_mailboxes: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_mailboxes') }})  
    imap_new_emails: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_new_emails') }})  
    imap_old_emails: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_old_emails') }})  
    imap_port: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_port') }})  
    imap_server: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_server') }})  
    imap_ssl: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_ssl') }})  
    incoming_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incoming_email') }})  
    is_group_owner_display: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_group_owner_display') }})  
    is_group_user: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_group_user') }})  
    members_visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_visibility_level') }})  
    membership_request_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership_request_template') }})  
    mentionable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionable') }})  
    mentionable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionable_level') }})  
    message_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_count') }})  
    messageable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageable') }})  
    messageable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageable_level') }})  
    muted_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted_category_ids') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    primary_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group') }})  
    public_admission: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_admission') }})  
    public_exit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_exit') }})  
    publish_read_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_read_state') }})  
    regular_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_category_ids') }})  
    smtp_port: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_port') }})  
    smtp_server: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_server') }})  
    smtp_ssl: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_ssl') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    tracking_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_category_ids') }})  
    user_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_count') }})  
    visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility_level') }})  
    watching_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_category_ids') }})  
    watching_first_post_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_first_post_category_ids') }})  
    associated_group_ids: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associated_group_ids'), 'exclude': lambda f: f is None }})  
    can_edit_group: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit_group'), 'exclude': lambda f: f is None }})  
    email_from_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_from_alias'), 'exclude': lambda f: f is None }})  
    imap_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_enabled'), 'exclude': lambda f: f is None }})  
    imap_updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_updated_at'), 'exclude': lambda f: f is None }})  
    imap_updated_by: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imap_updated_by'), 'exclude': lambda f: f is None }})  
    muted_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted_tags'), 'exclude': lambda f: f is None }})  
    regular_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular_tags'), 'exclude': lambda f: f is None }})  
    smtp_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_enabled'), 'exclude': lambda f: f is None }})  
    smtp_updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_updated_at'), 'exclude': lambda f: f is None }})  
    smtp_updated_by: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_updated_by'), 'exclude': lambda f: f is None }})  
    tracking_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_tags'), 'exclude': lambda f: f is None }})  
    watching_first_post_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_first_post_tags'), 'exclude': lambda f: f is None }})  
    watching_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_tags'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetGroup200ApplicationJSON:
    r"""success response"""
    
    extras: GetGroup200ApplicationJSONExtras = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extras') }})  
    group: GetGroup200ApplicationJSONGroup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group') }})  
    

@dataclasses.dataclass
class GetGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_group_200_application_json_object: Optional[GetGroup200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    