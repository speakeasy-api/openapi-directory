/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Integration - GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
public class Integration {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public Integration withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_secret")
    public String clientSecret;
    public Integration withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Integration withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("description")
    public String description;
    public Integration withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The list of events for the GitHub app
     */
    @JsonProperty("events")
    public String[] events;
    public Integration withEvents(String[] events) {
        this.events = events;
        return this;
    }
    
    @JsonProperty("external_url")
    public String externalUrl;
    public Integration withExternalUrl(String externalUrl) {
        this.externalUrl = externalUrl;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;
    public Integration withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * Unique identifier of the GitHub app
     */
    @JsonProperty("id")
    public Long id;
    public Integration withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of installations associated with the GitHub app
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installations_count")
    public Long installationsCount;
    public Integration withInstallationsCount(Long installationsCount) {
        this.installationsCount = installationsCount;
        return this;
    }
    
    /**
     * The name of the GitHub app
     */
    @JsonProperty("name")
    public String name;
    public Integration withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;
    public Integration withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * Simple User
     */
    @JsonProperty("owner")
    public NullableSimpleUser owner;
    public Integration withOwner(NullableSimpleUser owner) {
        this.owner = owner;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pem")
    public String pem;
    public Integration withPem(String pem) {
        this.pem = pem;
        return this;
    }
    
    /**
     * The set of permissions for the GitHub app
     */
    @JsonProperty("permissions")
    public java.util.Map<String, String> permissions;
    public Integration withPermissions(java.util.Map<String, String> permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * The slug name of the GitHub app
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    public String slug;
    public Integration withSlug(String slug) {
        this.slug = slug;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Integration withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook_secret")
    public String webhookSecret;
    public Integration withWebhookSecret(String webhookSecret) {
        this.webhookSecret = webhookSecret;
        return this;
    }
    
}
