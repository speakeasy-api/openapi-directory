"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import destinationroute as shared_destinationroute
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConfigTransportProtocolEnum(str, Enum):
    r"""Required. Immutable. The transport protocol used between the client and the server."""
    TRANSPORT_PROTOCOL_UNSPECIFIED = 'TRANSPORT_PROTOCOL_UNSPECIFIED'
    TCP = 'TCP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Config:
    r"""The basic ingress config for ClientGateways."""
    
    destination_routes: Optional[list[shared_destinationroute.DestinationRoute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationRoutes'), 'exclude': lambda f: f is None }})
    r"""Required. The settings used to configure basic ClientGateways."""  
    transport_protocol: Optional[ConfigTransportProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transportProtocol'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The transport protocol used between the client and the server."""  
    