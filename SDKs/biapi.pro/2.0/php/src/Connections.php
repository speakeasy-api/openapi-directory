<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Connections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Disable a connection source
     * 
     * This will make it so the specified source will not be synchronized anymore.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceResponse
     */
	public function deleteConnectionsIdConnectionSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connections/{id_connection}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionsIdConnectionSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectionSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectionSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete all connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsResponse
     */
	public function deleteUsersIdUserConnections(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a connection.
     * 
     * This endpoint deletes a connection and all related accounts and transactions.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionResponse
     */
	public function deleteUsersIdUserConnectionsIdConnection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable a connection source
     * 
     * This will make it so the specified source will not be synchronized anymore.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse
     */
	public function deleteUsersIdUserConnectionsIdConnectionSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectionSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectionSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of connectors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBanksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBanksResponse
     */
	public function getBanks(
        \OpenAPI\OpenAPI\Models\Operations\GetBanksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBanksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBanksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBanksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBanks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBanks200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a connector
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankResponse
     */
	public function getBanksIdBank(
        \OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banks/{id_bank}', \OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBanksIdBankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connector = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connector', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a subset of id_connection for a given bank. Different selection methode are possible
     * 
     * By default, it selects a set of 3 connections with the 'diversity' method<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsResponse
     */
	public function getBanksIdConnectorConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banks/{id_connector}/connections', \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBanksIdConnectorConnections200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorConnections200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of connector sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesResponse
     */
	public function getBanksIdConnectorSources(
        \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banks/{id_connector}/sources', \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBanksIdConnectorSources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get fields specific to a domain and a source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsResponse
     */
	public function getBanksIdConnectorSourcesIdConnectorSourceFields(
        \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banks/{id_connector}/sources/{id_connector_source}/fields', \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBanksIdConnectorSourcesIdConnectorSourceFields200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdConnectorSourceFields200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the connector source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceResponse
     */
	public function getBanksIdConnectorSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banks/{id_connector}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBanksIdConnectorSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectorSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectorSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connections without a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectionsResponse
     */
	public function getConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConnections200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConnections200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection logs
     * 
     * Get logs about connections.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsResponse
     */
	public function getConnectionsIdConnectionLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connections/{id_connection}/logs', \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConnectionsIdConnectionLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionLogs200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesResponse
     */
	public function getConnectionsIdConnectionSources(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connections/{id_connection}/sources', \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConnectionsIdConnectionSources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConnectionsIdConnectionSources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of connectors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectorsResponse
     */
	public function getConnectors(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectorsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConnectors200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConnectors200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a connector
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorResponse
     */
	public function getConnectorsIdConnector(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors/{id_connector}', \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connector = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connector', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of connector sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesResponse
     */
	public function getConnectorsIdConnectorSources(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors/{id_connector}/sources', \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConnectorsIdConnectorSources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get fields specific to a domain and a source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsResponse
     */
	public function getConnectorsIdConnectorSourcesIdConnectorSourceFields(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors/{id_connector}/sources/{id_connector_source}/fields', \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getConnectorsIdConnectorSourcesIdConnectorSourceFields200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdConnectorSourceFields200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the connector source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceResponse
     */
	public function getConnectorsIdConnectorSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors/{id_connector}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConnectorsIdConnectorSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectorSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectorSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection logs
     * 
     * Get logs about connections.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLogsResponse
     */
	public function getLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/logs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLogsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetLogs200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of connectors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProvidersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProvidersResponse
     */
	public function getProviders(
        \OpenAPI\OpenAPI\Models\Operations\GetProvidersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProvidersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProvidersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProvidersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProviders200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProviders200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a random subset of provider's id_connection
     * 
     * By default, it selects a set of 3 connections.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsResponse
     */
	public function getProvidersIdConnectorConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{id_connector}/connections', \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProvidersIdConnectorConnections200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorConnections200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of connector sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesResponse
     */
	public function getProvidersIdConnectorSources(
        \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{id_connector}/sources', \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProvidersIdConnectorSources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get fields specific to a domain and a source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsResponse
     */
	public function getProvidersIdConnectorSourcesIdConnectorSourceFields(
        \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{id_connector}/sources/{id_connector_source}/fields', \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProvidersIdConnectorSourcesIdConnectorSourceFields200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdConnectorSourceFields200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the connector source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceResponse
     */
	public function getProvidersIdConnectorSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{id_connector}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdConnectorSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectorSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectorSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a connector
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderResponse
     */
	public function getProvidersIdProvider(
        \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{id_provider}', \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProvidersIdProviderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connector = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connector', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsResponse
     */
	public function getUsersIdUserConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserConnections200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnections200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection additionnal informations
     * 
     * <br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsResponse
     */
	public function getUsersIdUserConnectionsIdConnectionInformations(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}/informations', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserConnectionsIdConnectionInformations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionInformations200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection logs
     * 
     * Get logs about connections.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsResponse
     */
	public function getUsersIdUserConnectionsIdConnectionLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}/logs', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserConnectionsIdConnectionLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionLogs200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesResponse
     */
	public function getUsersIdUserConnectionsIdConnectionSources(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}/sources', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserConnectionsIdConnectionSources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserConnectionsIdConnectionSources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get connection logs
     * 
     * Get logs about connections.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsResponse
     */
	public function getUsersIdUserLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/logs', \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersIdUserLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersIdUserLogs200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * "
     * 
     * This endpoint is used to enable a source or force a synchronization on it.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceResponse
     */
	public function postConnectionsIdConnectionSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connections/{id_connection}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConnectionsIdConnectionSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectionSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectionSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request a new connector
     * 
     * Send a request to add a new connector<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConnectorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConnectorsResponse
     */
	public function postConnectors(
        \OpenAPI\OpenAPI\Models\Operations\PostConnectorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConnectorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConnectorsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConnectorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connector = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connector', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new connection.
     * 
     * Create a new connection to a given bank or provider. You have to give all needed parameters (use /banks/ID/fields or /providers/ID/fields to get them).<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsResponse
     */
	public function postUsersIdUserConnections(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a connection.
     * 
     * Give new parameters to change on the configuration of this connection (for example "password").<br><br>It tests connection to website, and if it fails, a 400 response is given with the error code "wrongpass" or "websiteUnavailable".<br><br>You can also supply meta-parameters on connection, like 'active' or 'expire'.<br><br>It's possible to execute the update/synchronization in the background with a query parameter. If done in background this endpoint will respond with data that is not yet updated. To obtain updated data, polling is required as the the data will be filled in the background.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionResponse
     */
	public function postUsersIdUserConnectionsIdConnection(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * "
     * 
     * This endpoint is used to enable a source or force a synchronization on it.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse
     */
	public function postUsersIdUserConnectionsIdConnectionSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectionSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectionSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update connection source
     * 
     * This endpoint is used to enable a source or force a synchronization on it.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceResponse
     */
	public function putConnectionsIdConnectionSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connections/{id_connection}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutConnectionsIdConnectionSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectionSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectionSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit several connector sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesResponse
     */
	public function putConnectorsIdConnectorSources(
        \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors/{id_connector}/sources', \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectorSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectorSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit the provided connector source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceResponse
     */
	public function putConnectorsIdConnectorSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connectors/{id_connector}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutConnectorsIdConnectorSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectorSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectorSource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Force synchronisation of a connection.
     * 
     * We suggest to pass parameter expand=accounts[transactions] to get all *new* and *updated* transactions.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionResponse
     */
	public function putUsersIdUserConnectionsIdConnection(
        \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}', \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update connection source
     * 
     * This endpoint is used to enable a source or force a synchronization on it.<br><br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse
     */
	public function putUsersIdUserConnectionsIdConnectionSourcesIdSource(
        \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{id_user}/connections/{id_connection}/sources/{id_source}', \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutUsersIdUserConnectionsIdConnectionSourcesIdSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectionSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectionSource', 'json');
            }
        }

        return $response;
    }
}