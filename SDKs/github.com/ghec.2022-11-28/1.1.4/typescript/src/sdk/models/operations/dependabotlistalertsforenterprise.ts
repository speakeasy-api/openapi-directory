/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class DependabotListAlertsForEnterpriseRequest extends SpeakeasyBase {
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=after" })
  after?: string;

  /**
   * A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=before",
  })
  before?: string;

  /**
   * The direction to sort the results by.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: shared.DirectionEnum;

  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   *
   * @remarks
   *
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ecosystem",
  })
  ecosystem?: string;

  /**
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=enterprise",
  })
  enterprise: string;

  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   *
   * @remarks
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=first" })
  first?: number;

  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   *
   * @remarks
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=last" })
  last?: number;

  /**
   * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=package",
  })
  package?: string;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=scope" })
  scope?: shared.DependabotAlertScopeEnum;

  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   *
   * @remarks
   *
   * Can be: `low`, `medium`, `high`, `critical`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=severity",
  })
  severity?: string;

  /**
   * The property by which to sort the results.
   *
   * @remarks
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: shared.DependabotAlertSortEnum;

  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   *
   * @remarks
   *
   * Can be: `dismissed`, `fixed`, `open`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: string;
}

export class DependabotListAlertsForEnterpriseResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.DependabotAlertWithRepository })
  dependabotAlertWithRepositories?: shared.DependabotAlertWithRepository[];

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationErrorSimple?: shared.ValidationErrorSimple;
}
