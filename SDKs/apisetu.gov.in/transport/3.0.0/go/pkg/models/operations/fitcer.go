// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type FitcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type FitcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Chassis No
	ChasisNo string `json:"chasis_no"`
	// Vehicle Registration No
	RegNo string `json:"reg_no"`
	// Son / Wife / Daughter of
	SwdName string `json:"swd_name"`
}

// FitcerRequestBodyFormatEnum - The format of the certificate in response.
type FitcerRequestBodyFormatEnum string

const (
	FitcerRequestBodyFormatEnumXML FitcerRequestBodyFormatEnum = "xml"
	FitcerRequestBodyFormatEnumPdf FitcerRequestBodyFormatEnum = "pdf"
)

func (e FitcerRequestBodyFormatEnum) ToPointer() *FitcerRequestBodyFormatEnum {
	return &e
}

func (e *FitcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "xml":
		fallthrough
	case "pdf":
		*e = FitcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FitcerRequestBodyFormatEnum: %v", v)
	}
}

// FitcerRequestBody - Request format
type FitcerRequestBody struct {
	CertificateParameters *FitcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema           `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format FitcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Fitcer504ApplicationJSONErrorEnum string

const (
	Fitcer504ApplicationJSONErrorEnumGatewayTimeout Fitcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Fitcer504ApplicationJSONErrorEnum) ToPointer() *Fitcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Fitcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer504ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Fitcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Fitcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Fitcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer504ApplicationJSON - Gateway timeout
type Fitcer504ApplicationJSON struct {
	Error            *Fitcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fitcer503ApplicationJSONErrorEnum string

const (
	Fitcer503ApplicationJSONErrorEnumServiceUnavailable Fitcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Fitcer503ApplicationJSONErrorEnum) ToPointer() *Fitcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Fitcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer503ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Fitcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Fitcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Fitcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer503ApplicationJSON - Service unavailable
type Fitcer503ApplicationJSON struct {
	Error            *Fitcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fitcer502ApplicationJSONErrorEnum string

const (
	Fitcer502ApplicationJSONErrorEnumBadGatewy Fitcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Fitcer502ApplicationJSONErrorEnum) ToPointer() *Fitcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Fitcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer502ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Fitcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Fitcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Fitcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer502ApplicationJSON - Bad gateway
type Fitcer502ApplicationJSON struct {
	Error            *Fitcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fitcer500ApplicationJSONErrorEnum string

const (
	Fitcer500ApplicationJSONErrorEnumInternalServerError Fitcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Fitcer500ApplicationJSONErrorEnum) ToPointer() *Fitcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Fitcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer500ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer500ApplicationJSONErrorDescriptionEnumInternalServerError Fitcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Fitcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Fitcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer500ApplicationJSON - Internal server error
type Fitcer500ApplicationJSON struct {
	Error            *Fitcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fitcer404ApplicationJSONErrorEnum string

const (
	Fitcer404ApplicationJSONErrorEnumRecordNotFound Fitcer404ApplicationJSONErrorEnum = "record_not_found"
	Fitcer404ApplicationJSONErrorEnumURLNotFound    Fitcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Fitcer404ApplicationJSONErrorEnum) ToPointer() *Fitcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Fitcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer404ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Fitcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Fitcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Fitcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Fitcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Fitcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer404ApplicationJSON - No record found
type Fitcer404ApplicationJSON struct {
	Error            *Fitcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fitcer401ApplicationJSONErrorEnum string

const (
	Fitcer401ApplicationJSONErrorEnumInvalidAuthentication Fitcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Fitcer401ApplicationJSONErrorEnumInvalidAuthorization  Fitcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Fitcer401ApplicationJSONErrorEnum) ToPointer() *Fitcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Fitcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer401ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Fitcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Fitcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Fitcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Fitcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Fitcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer401ApplicationJSON - Unauthorized access
type Fitcer401ApplicationJSON struct {
	Error            *Fitcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fitcer400ApplicationJSONErrorEnum string

const (
	Fitcer400ApplicationJSONErrorEnumMissingParameter Fitcer400ApplicationJSONErrorEnum = "missing_parameter"
	Fitcer400ApplicationJSONErrorEnumInvalidParameter Fitcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Fitcer400ApplicationJSONErrorEnumInvalidFormat    Fitcer400ApplicationJSONErrorEnum = "invalid_format"
	Fitcer400ApplicationJSONErrorEnumInvalidTxnid     Fitcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Fitcer400ApplicationJSONErrorEnumInvalidConsentid Fitcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Fitcer400ApplicationJSONErrorEnum) ToPointer() *Fitcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Fitcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Fitcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Fitcer400ApplicationJSONErrorDescriptionEnum string

const (
	Fitcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Fitcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Fitcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Fitcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Fitcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Fitcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Fitcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Fitcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Fitcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Fitcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Fitcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Fitcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Fitcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Fitcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Fitcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Fitcer400ApplicationJSON - Bad request
type Fitcer400ApplicationJSON struct {
	Error            *Fitcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fitcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type FitcerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Fitcer400ApplicationJSONObject *Fitcer400ApplicationJSON
	// Unauthorized access
	Fitcer401ApplicationJSONObject *Fitcer401ApplicationJSON
	// No record found
	Fitcer404ApplicationJSONObject *Fitcer404ApplicationJSON
	// Internal server error
	Fitcer500ApplicationJSONObject *Fitcer500ApplicationJSON
	// Bad gateway
	Fitcer502ApplicationJSONObject *Fitcer502ApplicationJSON
	// Service unavailable
	Fitcer503ApplicationJSONObject *Fitcer503ApplicationJSON
	// Gateway timeout
	Fitcer504ApplicationJSONObject *Fitcer504ApplicationJSON
}
