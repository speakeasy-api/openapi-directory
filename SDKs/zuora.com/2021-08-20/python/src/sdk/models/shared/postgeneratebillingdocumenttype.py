"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PostGenerateBillingDocumentTypeAutoPostEnum(str, Enum):
    r"""Whether to automatically post the billing documents after the draft billing documents are generated.
    
    If an error occurs during posting billing documents, the draft billing documents are not generated too.
    """
    TRUE = 'true'
    FALSE = 'false'

class PostGenerateBillingDocumentTypeAutoRenewEnum(str, Enum):
    r"""Whether to automatically renew the subscriptions with **Auto Renew** set to **Yes**."""
    TRUE = 'true'
    FALSE = 'false'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostGenerateBillingDocumentType:
    
    auto_post: Optional[PostGenerateBillingDocumentTypeAutoPostEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoPost'), 'exclude': lambda f: f is None }})
    r"""Whether to automatically post the billing documents after the draft billing documents are generated.
    
    If an error occurs during posting billing documents, the draft billing documents are not generated too.
    """  
    auto_renew: Optional[PostGenerateBillingDocumentTypeAutoRenewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenew'), 'exclude': lambda f: f is None }})
    r"""Whether to automatically renew the subscriptions with **Auto Renew** set to **Yes**."""  
    charge_type_to_exclude: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeTypeToExclude'), 'exclude': lambda f: f is None }})
    r"""The types of the charges to be excluded from the generation of billing documents. The field values are case insensitive. Supported values include `onetime`, `recurring`, and `usage`."""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which to generate the billing documents, in `yyyy-mm-dd` format."""  
    subscription_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the subscriptions that you want to create the billing documents for."""  
    target_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date used to determine which charges are to be billed, in `yyyy-mm-dd` format."""  
    