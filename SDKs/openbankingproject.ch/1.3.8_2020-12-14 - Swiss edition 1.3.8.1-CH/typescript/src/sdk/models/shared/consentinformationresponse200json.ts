/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AccountAccess } from "./accountaccess";
import { ConsentStatusEnum } from "./consentstatusenum";
import { HrefType } from "./hreftype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Body of the JSON response for a successfull get consent request.
 */
export class ConsentInformationResponse200Json extends SpeakeasyBase {
  /**
   * A list of hyperlinks to be recognised by the TPP.
   *
   * @remarks
   *
   * Links of type "account" and/or "cardAccount", depending on the nature of the consent.
   *
   */
  @SpeakeasyMetadata({ elemType: HrefType })
  @Expose({ name: "_links" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, HrefType> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], HrefType);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  links?: Record<string, HrefType>;

  /**
   * Requested access services for a consent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "access" })
  @Type(() => AccountAccess)
  access: AccountAccess;

  /**
   * This is the overall lifecycle status of the consent.
   *
   * @remarks
   *
   * Valid values are:
   *   - 'received': The consent data have been received and are technically correct.
   *     The data is not authorised yet.
   *   - 'rejected': The consent data have been rejected e.g. since no successful authorisation has taken place.
   *   - 'valid': The consent is accepted and valid for GET account data calls and others as specified in the consent object.
   *   - 'revokedByPsu': The consent has been revoked by the PSU towards the ASPSP.
   *   - 'expired': The consent expired.
   *   - 'terminatedByTpp': The corresponding TPP has terminated the consent by applying the DELETE method to the consent resource.
   *   - 'partiallyAuthorised': The consent is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.
   *
   * The ASPSP might add further codes. These codes then shall be contained in the ASPSP's documentation of the XS2A interface
   * and has to be added to this API definition as well.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "consentStatus" })
  consentStatus: ConsentStatusEnum;

  /**
   * This field indicates the requested maximum frequency for an access without PSU involvement per day.
   *
   * @remarks
   * For a one-off access, this attribute is set to "1".
   *
   * The frequency needs to be greater equal to one.
   *
   * If not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frequencyPerDay" })
  frequencyPerDay: number;

  /**
   * This date is containing the date of the last action on the consent object either through
   *
   * @remarks
   * the XS2A interface or the PSU/ASPSP interface having an impact on the status.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastActionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastActionDate: Date;

  /**
   * "true", if the consent is for recurring access to the account data.
   *
   * @remarks
   *
   * "false", if the consent is for one access to the account data.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurringIndicator" })
  recurringIndicator: boolean;

  /**
   * This parameter is defining a valid until date (including the mentioned date) for the requested consent.
   *
   * @remarks
   * The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.
   *
   * Future dates might get adjusted by ASPSP.
   *
   * If a maximal available date is requested, a date in far future is to be used: "9999-12-31".
   *
   * In both cases the consent object to be retrieved by the get consent request will contain the adjusted date.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validUntil" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  validUntil: Date;
}
