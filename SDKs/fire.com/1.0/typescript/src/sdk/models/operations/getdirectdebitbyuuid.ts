/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetDirectDebitByUuidRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=directDebitUuid",
  })
  directDebitUuid: string;
}

/**
 * The three letter code for the currency - either `EUR` or `GBP`.
 */
export enum GetDirectDebitByUuidDirectDebitCurrencyCodeEnum {
  Eur = "EUR",
  Gbp = "GBP",
}

/**
 * The currency.
 */
export class GetDirectDebitByUuidDirectDebitCurrency extends SpeakeasyBase {
  /**
   * The three letter code for the currency - either `EUR` or `GBP`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: GetDirectDebitByUuidDirectDebitCurrencyCodeEnum;

  /**
   * The name of the currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;
}

/**
 * The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
 */
export enum GetDirectDebitByUuidDirectDebitSchemeRejectReasonCodeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
  Nine = "9",
  A = "A",
  B = "B",
}

/**
 * The statuses of the direct debit payments associated with the mandate.
 *
 * @remarks
 * * 'RECIEVED' - Direct Debit has been recieved
 * * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
 * * 'REJECT_READY_FOR_PROCESSING'
 * * 'REJECT_RECORD_IN_PROGRESS'
 * * 'REJECT_RECORDED'
 * * 'REJECT_FILE_CREATED'
 * * 'REJECT_FILE_SENT'
 * * 'COLLECTED' - Direct debit collected
 * * 'REFUND_REQUESTED' - Refund requested on direct debit
 * * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
 * * 'REFUND_RECORDED'
 * * 'REFUND_FILE_CREATED'
 * * 'REFUND_FILE_SENT'
 *
 */
export enum GetDirectDebitByUuidDirectDebitStatusEnum {
  Recieved = "RECIEVED",
  RejectRequested = "REJECT_REQUESTED",
  RejectReadyForProcessing = "REJECT_READY_FOR_PROCESSING",
  RejectRecordInProgress = "REJECT_RECORD_IN_PROGRESS",
  RejectRecorded = "REJECT_RECORDED",
  RejectFileCreated = "REJECT_FILE_CREATED",
  RejectFileSent = "REJECT_FILE_SENT",
  Collected = "COLLECTED",
  RefundRequested = "REFUND_REQUESTED",
  RefundRecordInProgress = "REFUND_RECORD_IN_PROGRESS",
  RefundRecorded = "REFUND_RECORDED",
  RefundFileCreated = "REFUND_FILE_CREATED",
  RefundFileSent = "REFUND_FILE_SENT",
}

/**
 * The type of the direct debit.
 */
export enum GetDirectDebitByUuidDirectDebitTypeEnum {
  FirstCollection = "FIRST_COLLECTION",
  OngoingCollection = "ONGOING_COLLECTION",
  RepresentedCollection = "REPRESENTED_COLLECTION",
  FinalCollection = "FINAL_COLLECTION",
}

/**
 * Retrieve all details of a single direct debit collection/payment
 */
export class GetDirectDebitByUuidDirectDebit extends SpeakeasyBase {
  /**
   * Value of the payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * The currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  @Type(() => GetDirectDebitByUuidDirectDebitCurrency)
  currency?: GetDirectDebitByUuidDirectDebitCurrency;

  /**
   * Date the direct debit was created. Milliseconds since the epoch (1970).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCreated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCreated?: Date;

  /**
   * The direct debit reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directDebitReference" })
  directDebitReference?: string;

  /**
   * The UUID for the direct debit payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directDebitUuid" })
  directDebitUuid?: string;

  /**
   * DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDDIC" })
  isDDIC?: boolean;

  /**
   * Date the direct debit was last updated. Milliseconds since the epoch (1970).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  /**
   * The UUID for the mandate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateUUid" })
  mandateUUid?: string;

  /**
   * The Alias of the party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorAlias" })
  originatorAlias?: string;

  /**
   * The creator of the party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorName" })
  originatorName?: string;

  /**
   * Set by party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorReference" })
  originatorReference?: string;

  /**
   * Reason why rejected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schemeRejectReason" })
  schemeRejectReason?: string;

  /**
   * The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schemeRejectReasonCode" })
  schemeRejectReasonCode?: GetDirectDebitByUuidDirectDebitSchemeRejectReasonCodeEnum;

  /**
   * The statuses of the direct debit payments associated with the mandate.
   *
   * @remarks
   * * 'RECIEVED' - Direct Debit has been recieved
   * * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
   * * 'REJECT_READY_FOR_PROCESSING'
   * * 'REJECT_RECORD_IN_PROGRESS'
   * * 'REJECT_RECORDED'
   * * 'REJECT_FILE_CREATED'
   * * 'REJECT_FILE_SENT'
   * * 'COLLECTED' - Direct debit collected
   * * 'REFUND_REQUESTED' - Refund requested on direct debit
   * * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
   * * 'REFUND_RECORDED'
   * * 'REFUND_FILE_CREATED'
   * * 'REFUND_FILE_SENT'
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetDirectDebitByUuidDirectDebitStatusEnum;

  /**
   * The ican of your fire account that the money was taken from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetIcan" })
  targetIcan?: number;

  /**
   * The payee that was created when the DD was processed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetPayeeId" })
  targetPayeeId?: number;

  /**
   * The type of the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetDirectDebitByUuidDirectDebitTypeEnum;
}

export class GetDirectDebitByUuidResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Retrieve all details of a single direct debit collection/payment
   */
  @SpeakeasyMetadata()
  directDebit?: GetDirectDebitByUuidDirectDebit;
}
