// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ContactsCreateStringSecurity struct {
	SakariAuth shared.SchemeSakariAuth `security:"scheme,type=oauth2"`
}

type ContactsCreateStringPathParams struct {
	// Account to apply operations to
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
}

// ContactsCreateStringMergeStrategyEnum - Determines how existing contacts with matching mobile numbers are treated
type ContactsCreateStringMergeStrategyEnum string

const (
	ContactsCreateStringMergeStrategyEnumAppend ContactsCreateStringMergeStrategyEnum = "append"
	ContactsCreateStringMergeStrategyEnumCore   ContactsCreateStringMergeStrategyEnum = "core"
	ContactsCreateStringMergeStrategyEnumRemove ContactsCreateStringMergeStrategyEnum = "remove"
)

func (e *ContactsCreateStringMergeStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "append":
		fallthrough
	case "core":
		fallthrough
	case "remove":
		*e = ContactsCreateStringMergeStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContactsCreateStringMergeStrategyEnum: %s", s)
	}
}

type ContactsCreateStringQueryParams struct {
	// Determines how existing contacts with matching mobile numbers are treated
	MergeStrategy *ContactsCreateStringMergeStrategyEnum `queryParam:"style=form,explode=true,name=mergeStrategy"`
}

type ContactsCreateStringRequest struct {
	PathParams  ContactsCreateStringPathParams
	QueryParams ContactsCreateStringQueryParams
	Request     *string `request:"mediaType=text/csv"`
	Security    ContactsCreateStringSecurity
}

type ContactsCreateString201ApplicationJSONType string

const (
	ContactsCreateString201ApplicationJSONTypeContactsResponse      ContactsCreateString201ApplicationJSONType = "ContactsResponse"
	ContactsCreateString201ApplicationJSONTypeContactUploadResponse ContactsCreateString201ApplicationJSONType = "ContactUploadResponse"
)

type ContactsCreateString201ApplicationJSON struct {
	ContactsResponse      *shared.ContactsResponse
	ContactUploadResponse *shared.ContactUploadResponse

	Type ContactsCreateString201ApplicationJSONType
}

func CreateContactsCreateString201ApplicationJSONContactsResponse(contactsResponse shared.ContactsResponse) ContactsCreateString201ApplicationJSON {
	typ := ContactsCreateString201ApplicationJSONTypeContactsResponse

	return ContactsCreateString201ApplicationJSON{
		ContactsResponse: &contactsResponse,
		Type:             typ,
	}
}

func CreateContactsCreateString201ApplicationJSONContactUploadResponse(contactUploadResponse shared.ContactUploadResponse) ContactsCreateString201ApplicationJSON {
	typ := ContactsCreateString201ApplicationJSONTypeContactUploadResponse

	return ContactsCreateString201ApplicationJSON{
		ContactUploadResponse: &contactUploadResponse,
		Type:                  typ,
	}
}

func (u *ContactsCreateString201ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	contactsResponse := new(shared.ContactsResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contactsResponse); err == nil {
		u.ContactsResponse = contactsResponse
		u.Type = ContactsCreateString201ApplicationJSONTypeContactsResponse
		return nil
	}

	contactUploadResponse := new(shared.ContactUploadResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contactUploadResponse); err == nil {
		u.ContactUploadResponse = contactUploadResponse
		u.Type = ContactsCreateString201ApplicationJSONTypeContactUploadResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ContactsCreateString201ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ContactsResponse != nil {
		return json.Marshal(u.ContactsResponse)
	}

	if u.ContactUploadResponse != nil {
		return json.Marshal(u.ContactUploadResponse)
	}

	return nil, nil
}

type ContactsCreateStringResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// successful operation
	ContactsCreateString201ApplicationJSONOneOf *ContactsCreateString201ApplicationJSON
}
