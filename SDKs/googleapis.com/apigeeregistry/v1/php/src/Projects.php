<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a specified API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateResponse
     */
	public function apigeeregistryProjectsLocationsApisCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/apis', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->api = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Api', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a specified deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateResponse
     */
	public function apigeeregistryProjectsLocationsApisDeploymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiDeploymentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns matching deployments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListResponse
     */
	public function apigeeregistryProjectsLocationsApisDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listApiDeploymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListApiDeploymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns matching APIs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListResponse
     */
	public function apigeeregistryProjectsLocationsApisList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/apis', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listApisResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListApisResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a specified version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiVersionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns matching versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listApiVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListApiVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a specified spec.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/specs', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiSpecInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiSpec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a revision of a spec.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevision(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:deleteRevision', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsDeleteRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiSpec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns matching specs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/specs', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listApiSpecsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListApiSpecsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all revisions of a spec. Revisions are returned in descending order of revision creation time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsListRevisions(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:listRevisions', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsListRevisionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listApiSpecRevisionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListApiSpecRevisionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Used to modify a specified spec.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiSpecInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiSpec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsRollback(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:rollback', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rollbackApiSpecRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiSpec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a tag to a specified revision of a spec.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionResponse
     */
	public function apigeeregistryProjectsLocationsApisVersionsSpecsTagRevision(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:tagRevision', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tagApiSpecRevisionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsApisVersionsSpecsTagRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiSpec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiSpec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a specified artifact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateResponse
     */
	public function apigeeregistryProjectsLocationsArtifactsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/artifacts', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "artifactInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifact = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Artifact', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsResponse
     */
	public function apigeeregistryProjectsLocationsArtifactsGetContents(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:getContents', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsGetContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns matching artifacts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListResponse
     */
	public function apigeeregistryProjectsLocationsArtifactsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/artifacts', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listArtifactsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListArtifactsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Used to replace a specified artifact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactResponse
     */
	public function apigeeregistryProjectsLocationsArtifactsReplaceArtifact(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "artifactInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsArtifactsReplaceArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifact = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Artifact', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provisions instance resources for the Registry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateResponse
     */
	public function apigeeregistryProjectsLocationsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListResponse
     */
	public function apigeeregistryProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelResponse
     */
	public function apigeeregistryProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteResponse
     */
	public function apigeeregistryProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetResponse
     */
	public function apigeeregistryProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/* /operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListResponse
     */
	public function apigeeregistryProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyResponse
     */
	public function apigeeregistryProjectsLocationsRuntimeGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyResponse
     */
	public function apigeeregistryProjectsLocationsRuntimeSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsResponse
     */
	public function apigeeregistryProjectsLocationsRuntimeTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigeeregistryProjectsLocationsRuntimeTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}