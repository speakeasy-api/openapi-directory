"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import date_ as shared_date_
from ..shared import productviewitemissue as shared_productviewitemissue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProductViewAggregatedDestinationStatusEnum(str, Enum):
    r"""Aggregated destination status."""
    AGGREGATED_STATUS_UNSPECIFIED = 'AGGREGATED_STATUS_UNSPECIFIED'
    NOT_ELIGIBLE_OR_DISAPPROVED = 'NOT_ELIGIBLE_OR_DISAPPROVED'
    PENDING = 'PENDING'
    ELIGIBLE_LIMITED = 'ELIGIBLE_LIMITED'
    ELIGIBLE = 'ELIGIBLE'

class ProductViewChannelEnum(str, Enum):
    r"""Channel of the product (online versus local)."""
    CHANNEL_UNSPECIFIED = 'CHANNEL_UNSPECIFIED'
    LOCAL = 'LOCAL'
    ONLINE = 'ONLINE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductView:
    r"""Product fields. Values are only set for fields requested explicitly in the request's search query."""
    
    aggregated_destination_status: Optional[ProductViewAggregatedDestinationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregatedDestinationStatus'), 'exclude': lambda f: f is None }})
    r"""Aggregated destination status."""  
    availability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Availability of the product."""  
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""Brand of the product."""  
    category_l1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryL1'), 'exclude': lambda f: f is None }})
    r"""First level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    category_l2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryL2'), 'exclude': lambda f: f is None }})
    r"""Second level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    category_l3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryL3'), 'exclude': lambda f: f is None }})
    r"""Third level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    category_l4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryL4'), 'exclude': lambda f: f is None }})
    r"""Fourth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    category_l5: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryL5'), 'exclude': lambda f: f is None }})
    r"""Fifth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    channel: Optional[ProductViewChannelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""Channel of the product (online versus local)."""  
    condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""Condition of the product."""  
    creation_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'exclude': lambda f: f is None }})
    r"""The time the merchant created the product in timestamp seconds."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""Product price currency code (for example, ISO 4217). Absent if product price is not available."""  
    expiration_date: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    gtin: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gtin'), 'exclude': lambda f: f is None }})
    r"""GTIN of the product."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The REST ID of the product, in the form of channel:contentLanguage:targetCountry:offerId. Content API methods that operate on products take this as their productId parameter. Should always be included in the SELECT clause."""  
    item_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemGroupId'), 'exclude': lambda f: f is None }})
    r"""Item group ID provided by the merchant for grouping variants together."""  
    item_issues: Optional[list[shared_productviewitemissue.ProductViewItemIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIssues'), 'exclude': lambda f: f is None }})
    r"""List of item issues for the product."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""Language code of the product in BCP 47 format."""  
    offer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerId'), 'exclude': lambda f: f is None }})
    r"""Merchant-provided id of the product."""  
    price_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceMicros'), 'exclude': lambda f: f is None }})
    r"""Product price specified as micros (1 millionth of a standard unit, 1 USD = 1000000 micros) in the product currency. Absent in case the information about the price of the product is not available."""  
    product_type_l1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTypeL1'), 'exclude': lambda f: f is None }})
    r"""First level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    product_type_l2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTypeL2'), 'exclude': lambda f: f is None }})
    r"""Second level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    product_type_l3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTypeL3'), 'exclude': lambda f: f is None }})
    r"""Third level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    product_type_l4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTypeL4'), 'exclude': lambda f: f is None }})
    r"""Fourth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    product_type_l5: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTypeL5'), 'exclude': lambda f: f is None }})
    r"""Fifth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436)."""  
    shipping_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingLabel'), 'exclude': lambda f: f is None }})
    r"""The normalized shipping label specified in the feed"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of the product."""  
    