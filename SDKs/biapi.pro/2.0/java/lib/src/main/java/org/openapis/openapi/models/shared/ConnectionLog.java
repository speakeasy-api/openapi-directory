/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ConnectionLog {
    /**
     * If fail, contains the error code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public String error;

    public ConnectionLog withError(String error) {
        this.error = error;
        return this;
    }
    
    /**
     * If fail, error message received from connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_message")
    public String errorMessage;

    public ConnectionLog withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    /**
     * MD5 hash of the exception backtrace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_uid")
    public String errorUid;

    public ConnectionLog withErrorUid(String errorUid) {
        this.errorUid = errorUid;
        return this;
    }
    
    /**
     * Fields for connection in additionalInformationNeeded state with background option
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public String fields;

    public ConnectionLog withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * ID of the log
     */
    @JsonProperty("id")
    public Long id;

    public ConnectionLog withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the connection
     */
    @JsonProperty("id_connection")
    public Long idConnection;

    public ConnectionLog withIdConnection(Long idConnection) {
        this.idConnection = idConnection;
        return this;
    }
    
    /**
     * ID of the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_connector")
    public Long idConnector;

    public ConnectionLog withIdConnector(Long idConnector) {
        this.idConnector = idConnector;
        return this;
    }
    
    /**
     * ID of the related connection source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_source")
    public Long idSource;

    public ConnectionLog withIdSource(Long idSource) {
        this.idSource = idSource;
        return this;
    }
    
    /**
     * ID of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_user")
    public Long idUser;

    public ConnectionLog withIdUser(Long idUser) {
        this.idUser = idUser;
        return this;
    }
    
    /**
     * bcrypt hash of the login
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login")
    public String login;

    public ConnectionLog withLogin(String login) {
        this.login = login;
        return this;
    }
    
    /**
     * In case of bank connection, number of accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nb_accounts")
    public Long nbAccounts;

    public ConnectionLog withNbAccounts(Long nbAccounts) {
        this.nbAccounts = nbAccounts;
        return this;
    }
    
    /**
     * If fail, the date represents the next try to connect
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("next_try")
    public OffsetDateTime nextTry;

    public ConnectionLog withNextTry(OffsetDateTime nextTry) {
        this.nextTry = nextTry;
        return this;
    }
    
    /**
     * Session folder uid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("session_folder_id")
    public String sessionFolderId;

    public ConnectionLog withSessionFolderId(String sessionFolderId) {
        this.sessionFolderId = sessionFolderId;
        return this;
    }
    
    /**
     * Timestamp when the synchronization has started
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start")
    public OffsetDateTime start;

    public ConnectionLog withStart(OffsetDateTime start) {
        this.start = start;
        return this;
    }
    
    /**
     * Status of user (1 = charged user)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statut")
    public Long statut;

    public ConnectionLog withStatut(Long statut) {
        this.statut = statut;
        return this;
    }
    
    /**
     * Timestamp of log, when the synchronization has finished
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timestamp")
    public OffsetDateTime timestamp;

    public ConnectionLog withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * Worker used to do synchronization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("worker")
    public String worker;

    public ConnectionLog withWorker(String worker) {
        this.worker = worker;
        return this;
    }
    
    public ConnectionLog(@JsonProperty("id") Long id, @JsonProperty("id_connection") Long idConnection, @JsonProperty("timestamp") OffsetDateTime timestamp) {
        this.id = id;
        this.idConnection = idConnection;
        this.timestamp = timestamp;
  }
}
