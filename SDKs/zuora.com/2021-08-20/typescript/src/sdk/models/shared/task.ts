/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The type of the task.
 *
 * @remarks
 *
 */
export enum TaskActionTypeEnum {
  Approval = "Approval",
  Attachment = "Attachment",
  BillingBillRun = "Billing::BillRun",
  BillingCurrencyConversion = "Billing::CurrencyConversion",
  BillingCustomInvoice = "Billing::CustomInvoice",
  Callout = "Callout",
  Cancel = "Cancel",
  Create = "Create",
  CustomObjectCreate = "CustomObject::Create",
  CustomObjectDelete = "CustomObject::Delete",
  CustomObjectQuery = "CustomObject::Query",
  CustomObjectUpdate = "CustomObject::Update",
  DataBillingPreviewRun = "Data::BillingPreviewRun",
  DataLink = "Data::Link",
  Delay = "Delay",
  Delete = "Delete",
  DownloadSFTP = "Download::SFTP",
  Email = "Email",
  Export = "Export",
  FileCustomPDFCustomDocument = "File::CustomPDF::CustomDocument",
  If = "If",
  InvoiceGenerate = "InvoiceGenerate",
  Iterate = "Iterate",
  LogicCSVTranslator = "Logic::CSVTranslator",
  LogicCase = "Logic::Case",
  LogicCustomCode = "Logic::CustomCode",
  LogicJSONTransform = "Logic::JSONTransform",
  LogicLambda = "Logic::Lambda",
  LogicResponseFormatter = "Logic::ResponseFormatter",
  LogicXMLTransform = "Logic::XMLTransform",
  NewProduct = "NewProduct",
  NotificationsGoogleCloudPrint = "Notifications::GoogleCloudPrint",
  NotificationsPhoneCall = "Notifications::PhoneCall",
  NotificationsSMS = "Notifications::SMS",
  PaymentGatewayReconciliation = "Payment::GatewayReconciliation",
  PaymentPaymentRun = "Payment::PaymentRun",
  Query = "Query",
  RemoveProduct = "RemoveProduct",
  ReportingReportData = "Reporting::ReportData",
  ReportingRunReport = "Reporting::RunReport",
  Resume = "Resume",
  Suspend = "Suspend",
  UIPage = "UI::Page",
  UIStop = "UI::Stop",
  Update = "Update",
  UploadFTP = "Upload::FTP",
  UploadSFTP = "Upload::SFTP",
  WriteOff = "WriteOff",
}

/**
 * If **Instance** is **true**, the status of the task instance.
 *
 * @remarks
 *
 */
export enum TaskStatusEnum {
  Queued = "Queued",
  Processing = "Processing",
  Pending = "Pending",
  Success = "Success",
  Stopped = "Stopped",
  Error = "Error",
}

/**
 * A task.
 *
 * @remarks
 *
 */
export class Task extends SpeakeasyBase {
  /**
   * The type of the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action_type" })
  actionType?: TaskActionTypeEnum;

  /**
   * The type of API used.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "call_type" })
  callType?: string;

  /**
   * the number of concurrent tasks that are allowed to run simultaneously
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concurrent_limit" })
  concurrentLimit?: number;

  /**
   * The data payload for the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  data?: Record<string, any>;

  /**
   * If **Instance** is **true**, the end time of the task instance.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  endTime?: string;

  /**
   * If **Instance** is **true** and **status** is **Error**, the error reason of the task instance failure.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  /**
   * If **Instance** is **true** and **status** is **Error**, the error class of the task instance failure.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_class" })
  errorClass?: string;

  /**
   * If **Instance** is **true** and **status** is **Error**, the error details of the task instance failure.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_details" })
  errorDetails?: string;

  /**
   * The unique ID of the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Indicates whether this task belongs to an instance of a workflow.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  instance?: boolean;

  /**
   * The name of the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The selected object for the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "object" })
  object?: string;

  /**
   * The id of the selected object of the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "object_id" })
  objectId?: string;

  /**
   * If **Instance** is **true**, the ID of the original task in the original workflow.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_task_id" })
  originalTaskId?: number;

  /**
   * If **Instance** is **true**, the ID of the original workflow.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_workflow_id" })
  originalWorkflowId?: number;

  /**
   * The configuration of the task.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  parameters?: Record<string, any>;

  /**
   * If **Instance** is **true**, the start time of the task instance.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  startTime?: string;

  /**
   * If **Instance** is **true**, the status of the task instance.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: TaskStatusEnum;

  /**
   * The array of filter tags.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * the id of this task's parent task. Will be null if this is the first task of the workflow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "task_id" })
  taskId?: number;

  /**
   * The ID of the workflow that the task belongs to.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflow_id" })
  workflowId?: number;
}
