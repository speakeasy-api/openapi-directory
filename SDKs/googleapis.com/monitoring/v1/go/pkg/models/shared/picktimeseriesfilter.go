// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PickTimeSeriesFilterDirectionEnum - How to use the ranking to select time series that pass through the filter.
type PickTimeSeriesFilterDirectionEnum string

const (
	PickTimeSeriesFilterDirectionEnumDirectionUnspecified PickTimeSeriesFilterDirectionEnum = "DIRECTION_UNSPECIFIED"
	PickTimeSeriesFilterDirectionEnumTop                  PickTimeSeriesFilterDirectionEnum = "TOP"
	PickTimeSeriesFilterDirectionEnumBottom               PickTimeSeriesFilterDirectionEnum = "BOTTOM"
)

func (e PickTimeSeriesFilterDirectionEnum) ToPointer() *PickTimeSeriesFilterDirectionEnum {
	return &e
}

func (e *PickTimeSeriesFilterDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DIRECTION_UNSPECIFIED":
		fallthrough
	case "TOP":
		fallthrough
	case "BOTTOM":
		*e = PickTimeSeriesFilterDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PickTimeSeriesFilterDirectionEnum: %v", v)
	}
}

// PickTimeSeriesFilterRankingMethodEnum - ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
type PickTimeSeriesFilterRankingMethodEnum string

const (
	PickTimeSeriesFilterRankingMethodEnumMethodUnspecified PickTimeSeriesFilterRankingMethodEnum = "METHOD_UNSPECIFIED"
	PickTimeSeriesFilterRankingMethodEnumMethodMean        PickTimeSeriesFilterRankingMethodEnum = "METHOD_MEAN"
	PickTimeSeriesFilterRankingMethodEnumMethodMax         PickTimeSeriesFilterRankingMethodEnum = "METHOD_MAX"
	PickTimeSeriesFilterRankingMethodEnumMethodMin         PickTimeSeriesFilterRankingMethodEnum = "METHOD_MIN"
	PickTimeSeriesFilterRankingMethodEnumMethodSum         PickTimeSeriesFilterRankingMethodEnum = "METHOD_SUM"
	PickTimeSeriesFilterRankingMethodEnumMethodLatest      PickTimeSeriesFilterRankingMethodEnum = "METHOD_LATEST"
)

func (e PickTimeSeriesFilterRankingMethodEnum) ToPointer() *PickTimeSeriesFilterRankingMethodEnum {
	return &e
}

func (e *PickTimeSeriesFilterRankingMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "METHOD_UNSPECIFIED":
		fallthrough
	case "METHOD_MEAN":
		fallthrough
	case "METHOD_MAX":
		fallthrough
	case "METHOD_MIN":
		fallthrough
	case "METHOD_SUM":
		fallthrough
	case "METHOD_LATEST":
		*e = PickTimeSeriesFilterRankingMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PickTimeSeriesFilterRankingMethodEnum: %v", v)
	}
}

// PickTimeSeriesFilter - Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.
type PickTimeSeriesFilter struct {
	// How to use the ranking to select time series that pass through the filter.
	Direction *PickTimeSeriesFilterDirectionEnum `json:"direction,omitempty"`
	// How many time series to allow to pass through the filter.
	NumTimeSeries *int `json:"numTimeSeries,omitempty"`
	// ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
	RankingMethod *PickTimeSeriesFilterRankingMethodEnum `json:"rankingMethod,omitempty"`
}
