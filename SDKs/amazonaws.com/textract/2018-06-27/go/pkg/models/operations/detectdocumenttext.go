// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DetectDocumentTextXAmzTargetEnum
type DetectDocumentTextXAmzTargetEnum string

const (
	DetectDocumentTextXAmzTargetEnumTextractDetectDocumentText DetectDocumentTextXAmzTargetEnum = "Textract.DetectDocumentText"
)

func (e DetectDocumentTextXAmzTargetEnum) ToPointer() *DetectDocumentTextXAmzTargetEnum {
	return &e
}

func (e *DetectDocumentTextXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Textract.DetectDocumentText":
		*e = DetectDocumentTextXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DetectDocumentTextXAmzTargetEnum: %v", v)
	}
}

type DetectDocumentTextRequest struct {
	DetectDocumentTextRequest shared.DetectDocumentTextRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                DetectDocumentTextXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DetectDocumentTextResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// BadDocumentException
	BadDocumentException interface{}
	ContentType          string
	// Success
	DetectDocumentTextResponse *shared.DetectDocumentTextResponse
	// DocumentTooLargeException
	DocumentTooLargeException interface{}
	// InternalServerError
	InternalServerError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3ObjectException
	InvalidS3ObjectException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	StatusCode                             int
	RawResponse                            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// UnsupportedDocumentException
	UnsupportedDocumentException interface{}
}
