"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutAdditionalRoleInfoRoleSets:
    
    additional_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRoles'), 'exclude': lambda f: f is None }})
    r"""The supported additional roles with the primary role."""  
    primary_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryRole'), 'exclude': lambda f: f is None }})
    r"""A primary permission role."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutAdditionalRoleInfo:
    
    role_sets: Optional[list[AboutAdditionalRoleInfoRoleSets]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleSets'), 'exclude': lambda f: f is None }})
    r"""The supported additional roles per primary role."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The content type that this additional role info applies to."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutDriveThemes:
    
    background_image_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundImageLink'), 'exclude': lambda f: f is None }})
    r"""A link to this theme's background image."""  
    color_rgb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colorRgb'), 'exclude': lambda f: f is None }})
    r"""The color of this theme as an RGB hex string."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the theme."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutExportFormats:
    
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The content type to convert from."""  
    targets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})
    r"""The possible content types to convert to."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutFeatures:
    
    feature_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featureName'), 'exclude': lambda f: f is None }})
    r"""The name of the feature."""  
    feature_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featureRate'), 'exclude': lambda f: f is None }})
    r"""The request limit rate for this feature, in queries per second."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutImportFormats:
    
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The imported file's content type to convert from."""  
    targets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})
    r"""The possible content types to convert to."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutMaxUploadSizes:
    
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The max upload size for this type."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The file type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutQuotaBytesByService:
    
    bytes_used: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytesUsed'), 'exclude': lambda f: f is None }})
    r"""The storage quota bytes used by the service."""  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceName'), 'exclude': lambda f: f is None }})
    r"""The service's name, e.g. DRIVE, GMAIL, or PHOTOS."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AboutTeamDriveThemes:
    
    background_image_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundImageLink'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use driveThemes/backgroundImageLink instead."""  
    color_rgb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colorRgb'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use driveThemes/colorRgb instead."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use driveThemes/id instead."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class About:
    r"""An item with user information and settings."""
    
    additional_role_info: Optional[list[AboutAdditionalRoleInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRoleInfo'), 'exclude': lambda f: f is None }})
    r"""Information about supported additional roles per file type. The most specific type takes precedence."""  
    can_create_drives: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canCreateDrives'), 'exclude': lambda f: f is None }})
    r"""Whether the user can create shared drives."""  
    can_create_team_drives: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canCreateTeamDrives'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use canCreateDrives instead."""  
    domain_sharing_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainSharingPolicy'), 'exclude': lambda f: f is None }})
    r"""The domain sharing policy for the current user. Possible values are:
    - allowed 
    - allowedWithWarning 
    - incomingOnly 
    - disallowed
    """  
    drive_themes: Optional[list[AboutDriveThemes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driveThemes'), 'exclude': lambda f: f is None }})
    r"""A list of themes that are supported for shared drives."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""The ETag of the item."""  
    export_formats: Optional[list[AboutExportFormats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportFormats'), 'exclude': lambda f: f is None }})
    r"""The allowable export formats."""  
    features: Optional[list[AboutFeatures]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""List of additional features enabled on this account."""  
    folder_color_palette: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folderColorPalette'), 'exclude': lambda f: f is None }})
    r"""The palette of allowable folder colors as RGB hex strings."""  
    import_formats: Optional[list[AboutImportFormats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importFormats'), 'exclude': lambda f: f is None }})
    r"""The allowable import formats."""  
    is_current_app_installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCurrentAppInstalled'), 'exclude': lambda f: f is None }})
    r"""A boolean indicating whether the authenticated app is installed by the authenticated user."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always drive#about."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/)."""  
    largest_change_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('largestChangeId'), 'exclude': lambda f: f is None }})
    r"""The largest change id."""  
    max_upload_sizes: Optional[list[AboutMaxUploadSizes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUploadSizes'), 'exclude': lambda f: f is None }})
    r"""List of max upload sizes for each file type. The most specific type takes precedence."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the current user."""  
    permission_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionId'), 'exclude': lambda f: f is None }})
    r"""The current user's ID as visible in the permissions collection."""  
    quota_bytes_by_service: Optional[list[AboutQuotaBytesByService]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaBytesByService'), 'exclude': lambda f: f is None }})
    r"""The amount of storage quota used by different Google services."""  
    quota_bytes_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaBytesTotal'), 'exclude': lambda f: f is None }})
    r"""The total number of quota bytes. This is only relevant when quotaType is LIMITED."""  
    quota_bytes_used: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaBytesUsed'), 'exclude': lambda f: f is None }})
    r"""The number of quota bytes used by Google Drive."""  
    quota_bytes_used_aggregate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaBytesUsedAggregate'), 'exclude': lambda f: f is None }})
    r"""The number of quota bytes used by all Google apps (Drive, Picasa, etc.)."""  
    quota_bytes_used_in_trash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaBytesUsedInTrash'), 'exclude': lambda f: f is None }})
    r"""The number of quota bytes used by trashed items."""  
    quota_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaType'), 'exclude': lambda f: f is None }})
    r"""The type of the user's storage quota. Possible values are:
    - LIMITED 
    - UNLIMITED
    """  
    remaining_change_ids: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingChangeIds'), 'exclude': lambda f: f is None }})
    r"""The number of remaining change ids, limited to no more than 2500."""  
    root_folder_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rootFolderId'), 'exclude': lambda f: f is None }})
    r"""The id of the root folder."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""A link back to this item."""  
    team_drive_themes: Optional[list[AboutTeamDriveThemes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teamDriveThemes'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use driveThemes instead."""  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Information about a Drive user."""  
    