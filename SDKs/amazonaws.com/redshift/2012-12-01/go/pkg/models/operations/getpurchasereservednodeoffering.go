// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETPurchaseReservedNodeOfferingActionEnum
type GETPurchaseReservedNodeOfferingActionEnum string

const (
	GETPurchaseReservedNodeOfferingActionEnumPurchaseReservedNodeOffering GETPurchaseReservedNodeOfferingActionEnum = "PurchaseReservedNodeOffering"
)

func (e *GETPurchaseReservedNodeOfferingActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PurchaseReservedNodeOffering":
		*e = GETPurchaseReservedNodeOfferingActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPurchaseReservedNodeOfferingActionEnum: %s", s)
	}
}

// GETPurchaseReservedNodeOfferingVersionEnum
type GETPurchaseReservedNodeOfferingVersionEnum string

const (
	GETPurchaseReservedNodeOfferingVersionEnumTwoThousandAndTwelve1201 GETPurchaseReservedNodeOfferingVersionEnum = "2012-12-01"
)

func (e *GETPurchaseReservedNodeOfferingVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETPurchaseReservedNodeOfferingVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPurchaseReservedNodeOfferingVersionEnum: %s", s)
	}
}

type GETPurchaseReservedNodeOfferingRequest struct {
	Action GETPurchaseReservedNodeOfferingActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p>
	NodeCount *int64 `queryParam:"style=form,explode=true,name=NodeCount"`
	// The unique identifier of the reserved node offering you want to purchase.
	ReservedNodeOfferingID string                                     `queryParam:"style=form,explode=true,name=ReservedNodeOfferingId"`
	Version                GETPurchaseReservedNodeOfferingVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm          *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETPurchaseReservedNodeOfferingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
