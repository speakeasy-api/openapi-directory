"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Likes:
    r"""Liking Tracks & Playlists."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_likes_playlists_playlist_id_(self, request: operations.DeleteLikesPlaylistsPlaylistIDRequest, security: operations.DeleteLikesPlaylistsPlaylistIDSecurity) -> operations.DeleteLikesPlaylistsPlaylistIDResponse:
        r"""Unlikes a playlist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLikesPlaylistsPlaylistIDRequest, base_url, '/likes/playlists/{playlist_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLikesPlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_likes_tracks_track_id_(self, request: operations.DeleteLikesTracksTrackIDRequest, security: operations.DeleteLikesTracksTrackIDSecurity) -> operations.DeleteLikesTracksTrackIDResponse:
        r"""Unlikes a track."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLikesTracksTrackIDRequest, base_url, '/likes/tracks/{track_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLikesTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_likes_playlists_playlist_id_(self, request: operations.PostLikesPlaylistsPlaylistIDRequest, security: operations.PostLikesPlaylistsPlaylistIDSecurity) -> operations.PostLikesPlaylistsPlaylistIDResponse:
        r"""Likes a playlist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostLikesPlaylistsPlaylistIDRequest, base_url, '/likes/playlists/{playlist_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostLikesPlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            pass
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TooManyRequests])
                res.too_many_requests = out

        return res

    def post_likes_tracks_track_id_(self, request: operations.PostLikesTracksTrackIDRequest, security: operations.PostLikesTracksTrackIDSecurity) -> operations.PostLikesTracksTrackIDResponse:
        r"""Likes a track."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostLikesTracksTrackIDRequest, base_url, '/likes/tracks/{track_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostLikesTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TooManyRequests])
                res.too_many_requests = out

        return res

    