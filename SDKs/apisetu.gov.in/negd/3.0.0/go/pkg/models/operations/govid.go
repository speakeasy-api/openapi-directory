// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GovidSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type GovidRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Card No.
	Cardno string `json:"cardno"`
}

// GovidRequestBodyFormatEnum - The format of the certificate in response.
type GovidRequestBodyFormatEnum string

const (
	GovidRequestBodyFormatEnumPdf GovidRequestBodyFormatEnum = "pdf"
)

func (e GovidRequestBodyFormatEnum) ToPointer() *GovidRequestBodyFormatEnum {
	return &e
}

func (e *GovidRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = GovidRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GovidRequestBodyFormatEnum: %v", v)
	}
}

// GovidRequestBody - Request format
type GovidRequestBody struct {
	CertificateParameters *GovidRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format GovidRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Govid504ApplicationJSONErrorEnum string

const (
	Govid504ApplicationJSONErrorEnumGatewayTimeout Govid504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Govid504ApplicationJSONErrorEnum) ToPointer() *Govid504ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Govid504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid504ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid504ApplicationJSONErrorDescriptionEnum string

const (
	Govid504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Govid504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Govid504ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Govid504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid504ApplicationJSON - Gateway timeout
type Govid504ApplicationJSON struct {
	Error            *Govid504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Govid503ApplicationJSONErrorEnum string

const (
	Govid503ApplicationJSONErrorEnumServiceUnavailable Govid503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Govid503ApplicationJSONErrorEnum) ToPointer() *Govid503ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Govid503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid503ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid503ApplicationJSONErrorDescriptionEnum string

const (
	Govid503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Govid503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Govid503ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Govid503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid503ApplicationJSON - Service unavailable
type Govid503ApplicationJSON struct {
	Error            *Govid503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Govid502ApplicationJSONErrorEnum string

const (
	Govid502ApplicationJSONErrorEnumBadGatewy Govid502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Govid502ApplicationJSONErrorEnum) ToPointer() *Govid502ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Govid502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid502ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid502ApplicationJSONErrorDescriptionEnum string

const (
	Govid502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Govid502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Govid502ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Govid502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid502ApplicationJSON - Bad gateway
type Govid502ApplicationJSON struct {
	Error            *Govid502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Govid500ApplicationJSONErrorEnum string

const (
	Govid500ApplicationJSONErrorEnumInternalServerError Govid500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Govid500ApplicationJSONErrorEnum) ToPointer() *Govid500ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Govid500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid500ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid500ApplicationJSONErrorDescriptionEnum string

const (
	Govid500ApplicationJSONErrorDescriptionEnumInternalServerError Govid500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Govid500ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Govid500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid500ApplicationJSON - Internal server error
type Govid500ApplicationJSON struct {
	Error            *Govid500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Govid404ApplicationJSONErrorEnum string

const (
	Govid404ApplicationJSONErrorEnumRecordNotFound Govid404ApplicationJSONErrorEnum = "record_not_found"
	Govid404ApplicationJSONErrorEnumURLNotFound    Govid404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Govid404ApplicationJSONErrorEnum) ToPointer() *Govid404ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Govid404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid404ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid404ApplicationJSONErrorDescriptionEnum string

const (
	Govid404ApplicationJSONErrorDescriptionEnumNoRecordFound               Govid404ApplicationJSONErrorDescriptionEnum = "No record found"
	Govid404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Govid404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Govid404ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Govid404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid404ApplicationJSON - No record found
type Govid404ApplicationJSON struct {
	Error            *Govid404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Govid401ApplicationJSONErrorEnum string

const (
	Govid401ApplicationJSONErrorEnumInvalidAuthentication Govid401ApplicationJSONErrorEnum = "invalid_authentication"
	Govid401ApplicationJSONErrorEnumInvalidAuthorization  Govid401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Govid401ApplicationJSONErrorEnum) ToPointer() *Govid401ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Govid401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid401ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid401ApplicationJSONErrorDescriptionEnum string

const (
	Govid401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Govid401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Govid401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Govid401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Govid401ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Govid401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid401ApplicationJSON - Unauthorized access
type Govid401ApplicationJSON struct {
	Error            *Govid401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Govid400ApplicationJSONErrorEnum string

const (
	Govid400ApplicationJSONErrorEnumMissingParameter Govid400ApplicationJSONErrorEnum = "missing_parameter"
	Govid400ApplicationJSONErrorEnumInvalidParameter Govid400ApplicationJSONErrorEnum = "invalid_parameter"
	Govid400ApplicationJSONErrorEnumInvalidFormat    Govid400ApplicationJSONErrorEnum = "invalid_format"
	Govid400ApplicationJSONErrorEnumInvalidTxnid     Govid400ApplicationJSONErrorEnum = "invalid_txnid"
	Govid400ApplicationJSONErrorEnumInvalidConsentid Govid400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Govid400ApplicationJSONErrorEnum) ToPointer() *Govid400ApplicationJSONErrorEnum {
	return &e
}

func (e *Govid400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Govid400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid400ApplicationJSONErrorEnum: %v", v)
	}
}

type Govid400ApplicationJSONErrorDescriptionEnum string

const (
	Govid400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Govid400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Govid400ApplicationJSONErrorDescriptionEnumBadRequest                              Govid400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Govid400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Govid400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Govid400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Govid400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Govid400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Govid400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Govid400ApplicationJSONErrorDescriptionEnum) ToPointer() *Govid400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Govid400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Govid400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Govid400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Govid400ApplicationJSON - Bad request
type Govid400ApplicationJSON struct {
	Error            *Govid400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Govid400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type GovidResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Govid400ApplicationJSONObject *Govid400ApplicationJSON
	// Unauthorized access
	Govid401ApplicationJSONObject *Govid401ApplicationJSON
	// No record found
	Govid404ApplicationJSONObject *Govid404ApplicationJSON
	// Internal server error
	Govid500ApplicationJSONObject *Govid500ApplicationJSON
	// Bad gateway
	Govid502ApplicationJSONObject *Govid502ApplicationJSON
	// Service unavailable
	Govid503ApplicationJSONObject *Govid503ApplicationJSON
	// Gateway timeout
	Govid504ApplicationJSONObject *Govid504ApplicationJSON
}
