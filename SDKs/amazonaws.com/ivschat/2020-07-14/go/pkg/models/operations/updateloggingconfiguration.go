// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateLoggingConfigurationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateLoggingConfigurationRequestBodyDestinationConfiguration - A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).
type UpdateLoggingConfigurationRequestBodyDestinationConfiguration struct {
	CloudWatchLogs *shared.CloudWatchLogsDestinationConfiguration `json:"cloudWatchLogs,omitempty"`
	Firehose       *shared.FirehoseDestinationConfiguration       `json:"firehose,omitempty"`
	S3             *shared.S3DestinationConfiguration             `json:"s3,omitempty"`
}

type UpdateLoggingConfigurationRequestBody struct {
	// A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).
	DestinationConfiguration *UpdateLoggingConfigurationRequestBodyDestinationConfiguration `json:"destinationConfiguration,omitempty"`
	// Identifier of the logging configuration to be updated.
	Identifier string `json:"identifier"`
	// Logging-configuration name. The value does not need to be unique.
	Name *string `json:"name,omitempty"`
}

type UpdateLoggingConfigurationRequest struct {
	Headers UpdateLoggingConfigurationHeaders
	Request UpdateLoggingConfigurationRequestBody `request:"mediaType=application/json"`
}

type UpdateLoggingConfigurationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// PendingVerification
	PendingVerification interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	UpdateLoggingConfigurationResponse *shared.UpdateLoggingConfigurationResponse
	// ValidationException
	ValidationException interface{}
}
