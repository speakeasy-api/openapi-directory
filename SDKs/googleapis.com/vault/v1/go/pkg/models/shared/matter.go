// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MatterStateEnum - The state of the matter.
type MatterStateEnum string

const (
	MatterStateEnumStateUnspecified MatterStateEnum = "STATE_UNSPECIFIED"
	MatterStateEnumOpen             MatterStateEnum = "OPEN"
	MatterStateEnumClosed           MatterStateEnum = "CLOSED"
	MatterStateEnumDeleted          MatterStateEnum = "DELETED"
)

func (e *MatterStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "DELETED":
		*e = MatterStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MatterStateEnum: %s", s)
	}
}

// Matter - Represents a matter. To work with Vault resources, the account must have the [required Vault privileges] (https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege.
type Matter struct {
	// An optional description for the matter.
	Description *string `json:"description,omitempty"`
	// The matter ID, which is generated by the server. Leave blank when creating a matter.
	MatterID *string `json:"matterId,omitempty"`
	// Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have.
	MatterPermissions []MatterPermission `json:"matterPermissions,omitempty"`
	// The name of the matter.
	Name *string `json:"name,omitempty"`
	// The state of the matter.
	State *MatterStateEnum `json:"state,omitempty"`
}
