"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceAttributes:
    
    fulfilled_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_at') }})
    r"""Date at which the reward earning was fulfilled. (Must be at the same time or after the reward was earned)"""  
    fulfilled_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_value') }})
    r"""Value of the earned reward that has been fulfilled. (Must be greater than or equal to 0)"""  
    fulfilled_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_unit'), 'exclude': lambda f: f is None }})
    r"""Unit of the earned reward that has been fulfilled. (Read-only property)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceRelationshipsPatientData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceRelationshipsPatient:
    
    data: Optional[RewardEarningFulfillmentResourceRelationshipsPatientData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceRelationshipsRewardEarningData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceRelationshipsRewardEarning:
    
    data: Optional[RewardEarningFulfillmentResourceRelationshipsRewardEarningData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceRelationships:
    
    reward_earning: RewardEarningFulfillmentResourceRelationshipsRewardEarning = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward_earning') }})  
    patient: Optional[RewardEarningFulfillmentResourceRelationshipsPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResource:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardEarningFulfillmentResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardEarningFulfillmentResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceAttributesInput:
    
    fulfilled_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_at') }})
    r"""Date at which the reward earning was fulfilled. (Must be at the same time or after the reward was earned)"""  
    fulfilled_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_value') }})
    r"""Value of the earned reward that has been fulfilled. (Must be greater than or equal to 0)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceRelationshipsInput:
    
    reward_earning: RewardEarningFulfillmentResourceRelationshipsRewardEarning = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward_earning') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningFulfillmentResourceInput:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardEarningFulfillmentResourceAttributesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardEarningFulfillmentResourceRelationshipsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    