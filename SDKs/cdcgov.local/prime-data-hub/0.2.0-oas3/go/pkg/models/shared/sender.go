// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SenderFormatEnum - the payload format
type SenderFormatEnum string

const (
	SenderFormatEnumCsv SenderFormatEnum = "CSV"
)

func (e SenderFormatEnum) ToPointer() *SenderFormatEnum {
	return &e
}

func (e *SenderFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CSV":
		*e = SenderFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SenderFormatEnum: %v", v)
	}
}

// SenderInput - An sender of reports to the data hub
type SenderInput struct {
	// Display ready description of the sender
	Description string `json:"description"`
	// the payload format
	Format SenderFormatEnum `json:"format"`
	// Unique name for the senders, includes the orgninzation name
	Name string `json:"name"`
	// the schema name for this sender
	Schema string `json:"schema"`
	// Topic of for this sender. Must match the supported topics.
	Topic string `json:"topic"`
}

// Sender - An sender of reports to the data hub
type Sender struct {
	// Display ready description of the sender
	Description string `json:"description"`
	// the payload format
	Format SenderFormatEnum `json:"format"`
	// The metadata associated with an setting
	Meta *SettingMetadata `json:"meta,omitempty"`
	// Unique name for the senders, includes the orgninzation name
	Name string `json:"name"`
	// Name of the organization that this sender belongs to
	OrganizationName *string `json:"organizationName,omitempty"`
	// the schema name for this sender
	Schema string `json:"schema"`
	// Topic of for this sender. Must match the supported topics.
	Topic string `json:"topic"`
}
