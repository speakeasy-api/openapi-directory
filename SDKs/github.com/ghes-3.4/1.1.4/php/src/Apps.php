<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Apps 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a repository to an app installation
     * 
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.
     * 
     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.4/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#add-a-repository-to-an-app-installation - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsAddRepoToInstallationForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsAddRepoToInstallationForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#add-a-repository-to-an-app-installation
     */
	public function appsAddRepoToInstallationForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\AppsAddRepoToInstallationForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsAddRepoToInstallationForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/installations/{installation_id}/repositories/{repository_id}', \OpenAPI\OpenAPI\Models\Operations\AppsAddRepoToInstallationForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsAddRepoToInstallationForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check a token
     * 
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#check-a-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCheckTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsCheckTokenResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#check-a-token
     */
	public function appsCheckToken(
        \OpenAPI\OpenAPI\Models\Operations\AppsCheckTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsCheckTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/applications/{client_id}/token', \OpenAPI\OpenAPI\Models\Operations\AppsCheckTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsCheckTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Authorization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a GitHub App from a manifest
     * 
     * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#create-a-github-app-from-a-manifest - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCreateFromManifestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsCreateFromManifestResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#create-a-github-app-from-a-manifest
     */
	public function appsCreateFromManifest(
        \OpenAPI\OpenAPI\Models\Operations\AppsCreateFromManifestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsCreateFromManifestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app-manifests/{code}/conversions', \OpenAPI\OpenAPI\Models\Operations\AppsCreateFromManifestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsCreateFromManifestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gitHubApp = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an installation access token for an app
     * 
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps/#create-an-installation-access-token-for-an-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsCreateInstallationAccessTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsCreateInstallationAccessTokenResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps/#create-an-installation-access-token-for-an-app
     */
	public function appsCreateInstallationAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\AppsCreateInstallationAccessTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsCreateInstallationAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/installations/{installation_id}/access_tokens', \OpenAPI\OpenAPI\Models\Operations\AppsCreateInstallationAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsCreateInstallationAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installationToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstallationToken', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an app authorization
     * 
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#delete-an-app-authorization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAuthorizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAuthorizationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#delete-an-app-authorization
     */
	public function appsDeleteAuthorization(
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAuthorizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAuthorizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/applications/{client_id}/grant', \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAuthorizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsDeleteAuthorizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an installation for the authenticated app
     * 
     * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/enterprise-server@3.4/rest/reference/apps/#suspend-an-app-installation)" endpoint.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#delete-an-installation-for-the-authenticated-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsDeleteInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#delete-an-installation-for-the-authenticated-app
     */
	public function appsDeleteInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsDeleteInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/installations/{installation_id}', \OpenAPI\OpenAPI\Models\Operations\AppsDeleteInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsDeleteInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an app token
     * 
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#delete-an-app-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsDeleteTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsDeleteTokenResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#delete-an-app-token
     */
	public function appsDeleteToken(
        \OpenAPI\OpenAPI\Models\Operations\AppsDeleteTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsDeleteTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/applications/{client_id}/token', \OpenAPI\OpenAPI\Models\Operations\AppsDeleteTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsDeleteTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the authenticated app
     * 
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-the-authenticated-app - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetAuthenticatedResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-the-authenticated-app
     */
	public function appsGetAuthenticated(
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetAuthenticatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetAuthenticatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Integration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an app
     * 
     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     * 
     * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/enterprise-server@3.4/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps/#get-an-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetBySlugRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetBySlugResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps/#get-an-app
     */
	public function appsGetBySlug(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetBySlugRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetBySlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{app_slug}', \OpenAPI\OpenAPI\Models\Operations\AppsGetBySlugRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetBySlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Integration', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an installation for the authenticated app
     * 
     * Enables an authenticated GitHub App to find an installation's information using the installation id.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-an-installation-for-the-authenticated-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-an-installation-for-the-authenticated-app
     */
	public function appsGetInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/installations/{installation_id}', \OpenAPI\OpenAPI\Models\Operations\AppsGetInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Installation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an organization installation for the authenticated app
     * 
     * Enables an authenticated GitHub App to find the organization's installation information.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetOrgInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetOrgInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app
     */
	public function appsGetOrgInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetOrgInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetOrgInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/installation', \OpenAPI\OpenAPI\Models\Operations\AppsGetOrgInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetOrgInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Installation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a repository installation for the authenticated app
     * 
     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetRepoInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetRepoInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app
     */
	public function appsGetRepoInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetRepoInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetRepoInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/installation', \OpenAPI\OpenAPI\Models\Operations\AppsGetRepoInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetRepoInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Installation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 301 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user installation for the authenticated app
     * 
     * Enables an authenticated GitHub App to find the user’s installation information.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-user-installation-for-the-authenticated-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetUserInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetUserInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-user-installation-for-the-authenticated-app
     */
	public function appsGetUserInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetUserInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetUserInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/installation', \OpenAPI\OpenAPI\Models\Operations\AppsGetUserInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetUserInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Installation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook configuration for an app
     * 
     * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-webhook-configuration-for-an-app - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookConfigForAppResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-webhook-configuration-for-an-app
     */
	public function appsGetWebhookConfigForApp(
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookConfigForAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/hook/config');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookConfigForAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WebhookConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a delivery for an app webhook
     * 
     * Returns a delivery for the webhook configured for a GitHub App.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-delivery-for-an-app-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookDeliveryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookDeliveryResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#get-a-delivery-for-an-app-webhook
     */
	public function appsGetWebhookDelivery(
        \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookDeliveryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookDeliveryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/hook/deliveries/{delivery_id}', \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookDeliveryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsGetWebhookDeliveryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hookDelivery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HookDelivery', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories accessible to the user access token
     * 
     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
     * 
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     * 
     * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     * 
     * The access the user has to each repository is included in the hash under the `permissions` key.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-repositories-accessible-to-the-user-access-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-repositories-accessible-to-the-user-access-token
     */
	public function appsListInstallationReposForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/installations/{installation_id}/repositories', \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListInstallationReposForAuthenticatedUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsListInstallationReposForAuthenticatedUser200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List installations for the authenticated app
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * 
     * The permissions the installation has are included under the `permissions` key.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-installations-for-the-authenticated-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-installations-for-the-authenticated-app
     */
	public function appsListInstallations(
        \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/installations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Installation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List app installations accessible to the user access token
     * 
     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     * 
     * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     * 
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     * 
     * You can find the permissions for the installation under the `permissions` key.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token
     */
	public function appsListInstallationsForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/installations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListInstallationsForAuthenticatedUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsListInstallationsForAuthenticatedUser200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories accessible to the app installation
     * 
     * List repositories that an app installation can access.
     * 
     * You must use an [installation access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-repositories-accessible-to-the-app-installation - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-repositories-accessible-to-the-app-installation
     */
	public function appsListReposAccessibleToInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/installation/repositories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsListReposAccessibleToInstallation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppsListReposAccessibleToInstallation200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List deliveries for an app webhook
     * 
     * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-deliveries-for-an-app-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsListWebhookDeliveriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsListWebhookDeliveriesResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#list-deliveries-for-an-app-webhook
     */
	public function appsListWebhookDeliveries(
        \OpenAPI\OpenAPI\Models\Operations\AppsListWebhookDeliveriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsListWebhookDeliveriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/hook/deliveries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppsListWebhookDeliveriesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsListWebhookDeliveriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hookDeliveryItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\HookDeliveryItem>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Redeliver a delivery for an app webhook
     * 
     * Redeliver a delivery for the webhook configured for a GitHub App.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsRedeliverWebhookDeliveryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsRedeliverWebhookDeliveryResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook
     */
	public function appsRedeliverWebhookDelivery(
        \OpenAPI\OpenAPI\Models\Operations\AppsRedeliverWebhookDeliveryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsRedeliverWebhookDeliveryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/hook/deliveries/{delivery_id}/attempts', \OpenAPI\OpenAPI\Models\Operations\AppsRedeliverWebhookDeliveryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsRedeliverWebhookDeliveryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appsRedeliverWebhookDelivery202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/scim+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scimError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScimError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a repository from an app installation
     * 
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
     * 
     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.4/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#remove-a-repository-from-an-app-installation - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsRemoveRepoFromInstallationForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsRemoveRepoFromInstallationForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#remove-a-repository-from-an-app-installation
     */
	public function appsRemoveRepoFromInstallationForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\AppsRemoveRepoFromInstallationForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsRemoveRepoFromInstallationForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/installations/{installation_id}/repositories/{repository_id}', \OpenAPI\OpenAPI\Models\Operations\AppsRemoveRepoFromInstallationForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsRemoveRepoFromInstallationForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset a token
     * 
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#reset-a-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsResetTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsResetTokenResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#reset-a-token
     */
	public function appsResetToken(
        \OpenAPI\OpenAPI\Models\Operations\AppsResetTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsResetTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/applications/{client_id}/token', \OpenAPI\OpenAPI\Models\Operations\AppsResetTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsResetTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Authorization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Revoke an installation access token
     * 
     * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
     * 
     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.4/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
     * 
     * You must use an [installation access token](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#revoke-an-installation-access-token - API method documentation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsRevokeInstallationAccessTokenResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#revoke-an-installation-access-token
     */
	public function appsRevokeInstallationAccessToken(
    ): \OpenAPI\OpenAPI\Models\Operations\AppsRevokeInstallationAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/installation/token');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsRevokeInstallationAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create a scoped access token
     * 
     * Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.4/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * https://docs.github.com/enterprise-server@3.4/rest/apps/apps#create-a-scoped-access-token - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsScopeTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsScopeTokenResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/apps/apps#create-a-scoped-access-token
     */
	public function appsScopeToken(
        \OpenAPI\OpenAPI\Models\Operations\AppsScopeTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsScopeTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/applications/{client_id}/token/scoped', \OpenAPI\OpenAPI\Models\Operations\AppsScopeTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsScopeTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authorization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Authorization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suspend an app installation
     * 
     * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#suspend-an-app-installation - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsSuspendInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsSuspendInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#suspend-an-app-installation
     */
	public function appsSuspendInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsSuspendInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsSuspendInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/installations/{installation_id}/suspended', \OpenAPI\OpenAPI\Models\Operations\AppsSuspendInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsSuspendInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unsuspend an app installation
     * 
     * Removes a GitHub App installation suspension.
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#unsuspend-an-app-installation - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUnsuspendInstallationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsUnsuspendInstallationResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#unsuspend-an-app-installation
     */
	public function appsUnsuspendInstallation(
        \OpenAPI\OpenAPI\Models\Operations\AppsUnsuspendInstallationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsUnsuspendInstallationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/installations/{installation_id}/suspended', \OpenAPI\OpenAPI\Models\Operations\AppsUnsuspendInstallationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsUnsuspendInstallationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook configuration for an app
     * 
     * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     * 
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.4/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * https://docs.github.com/enterprise-server@3.4/rest/reference/apps#update-a-webhook-configuration-for-an-app - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppsUpdateWebhookConfigForAppRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppsUpdateWebhookConfigForAppResponse
     * @see https://docs.github.com/enterprise-server@3.4/rest/reference/apps#update-a-webhook-configuration-for-an-app
     */
	public function appsUpdateWebhookConfigForApp(
        \OpenAPI\OpenAPI\Models\Operations\AppsUpdateWebhookConfigForAppRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppsUpdateWebhookConfigForAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/app/hook/config');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppsUpdateWebhookConfigForAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WebhookConfig', 'json');
            }
        }

        return $response;
    }
}