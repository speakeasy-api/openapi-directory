// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum - Output only. Sentiment for this annotation.
type GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum string

const (
	GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnumAnnotationSentimentUnspecified GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum = "ANNOTATION_SENTIMENT_UNSPECIFIED"
	GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnumNegative                       GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum = "NEGATIVE"
	GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnumPositive                       GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum = "POSITIVE"
)

func (e *GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ANNOTATION_SENTIMENT_UNSPECIFIED":
		fallthrough
	case "NEGATIVE":
		fallthrough
	case "POSITIVE":
		*e = GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum: %s", s)
	}
}

// GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum - Output only. The source of the annotation.
type GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum string

const (
	GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnumAnnotationSourceUnspecified GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum = "ANNOTATION_SOURCE_UNSPECIFIED"
	GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnumOperator                    GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum = "OPERATOR"
)

func (e *GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ANNOTATION_SOURCE_UNSPECIFIED":
		fallthrough
	case "OPERATOR":
		*e = GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum: %s", s)
	}
}

// GoogleCloudDatalabelingV1beta1Annotation - Annotation for Example. Each example may have one or more annotations. For example in image classification problem, each image might have one or more labels. We call labels binded with this image an Annotation.
type GoogleCloudDatalabelingV1beta1Annotation struct {
	// Additional information associated with the annotation.
	AnnotationMetadata *GoogleCloudDatalabelingV1beta1AnnotationMetadata `json:"annotationMetadata,omitempty"`
	// Output only. Sentiment for this annotation.
	AnnotationSentiment *GoogleCloudDatalabelingV1beta1AnnotationAnnotationSentimentEnum `json:"annotationSentiment,omitempty"`
	// Output only. The source of the annotation.
	AnnotationSource *GoogleCloudDatalabelingV1beta1AnnotationAnnotationSourceEnum `json:"annotationSource,omitempty"`
	// Annotation value for an example.
	AnnotationValue *GoogleCloudDatalabelingV1beta1AnnotationValue `json:"annotationValue,omitempty"`
	// Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}
	Name *string `json:"name,omitempty"`
}
