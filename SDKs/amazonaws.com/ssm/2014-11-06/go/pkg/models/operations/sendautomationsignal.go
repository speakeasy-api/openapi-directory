// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SendAutomationSignalXAmzTargetEnum
type SendAutomationSignalXAmzTargetEnum string

const (
	SendAutomationSignalXAmzTargetEnumAmazonSsmSendAutomationSignal SendAutomationSignalXAmzTargetEnum = "AmazonSSM.SendAutomationSignal"
)

func (e SendAutomationSignalXAmzTargetEnum) ToPointer() *SendAutomationSignalXAmzTargetEnum {
	return &e
}

func (e *SendAutomationSignalXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonSSM.SendAutomationSignal":
		*e = SendAutomationSignalXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SendAutomationSignalXAmzTargetEnum: %v", v)
	}
}

type SendAutomationSignalRequest struct {
	SendAutomationSignalRequest shared.SendAutomationSignalRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  SendAutomationSignalXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SendAutomationSignalResponse struct {
	// AutomationExecutionNotFoundException
	AutomationExecutionNotFoundException interface{}
	// AutomationStepNotFoundException
	AutomationStepNotFoundException interface{}
	ContentType                     string
	// InternalServerError
	InternalServerError interface{}
	// InvalidAutomationSignalException
	InvalidAutomationSignalException interface{}
	// Success
	SendAutomationSignalResult map[string]interface{}
	StatusCode                 int
	RawResponse                *http.Response
}
