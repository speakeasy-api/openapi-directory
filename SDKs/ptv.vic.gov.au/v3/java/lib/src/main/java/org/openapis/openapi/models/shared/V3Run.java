/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class V3Run {
    /**
     * Name of destination of run
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_name")
    public String destinationName;

    public V3Run withDestinationName(String destinationName) {
        this.destinationName = destinationName;
        return this;
    }
    
    /**
     * Direction of travel identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction_id")
    public Integer directionId;

    public V3Run withDirectionId(Integer directionId) {
        this.directionId = directionId;
        return this;
    }
    
    /**
     * The number of remaining skipped/express stations for the run/service from a stop
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("express_stop_count")
    public Integer expressStopCount;

    public V3Run withExpressStopCount(Integer expressStopCount) {
        this.expressStopCount = expressStopCount;
        return this;
    }
    
    /**
     * stop_id of final stop of run
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("final_stop_id")
    public Integer finalStopId;

    public V3Run withFinalStopId(Integer finalStopId) {
        this.finalStopId = finalStopId;
        return this;
    }
    
    /**
     * Geopath of the route
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geopath")
    public java.util.Map<String, Object>[] geopath;

    public V3Run withGeopath(java.util.Map<String, Object>[] geopath) {
        this.geopath = geopath;
        return this;
    }
    
    /**
     * Route identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("route_id")
    public Integer routeId;

    public V3Run withRouteId(Integer routeId) {
        this.routeId = routeId;
        return this;
    }
    
    /**
     * Transport mode identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("route_type")
    public Integer routeType;

    public V3Run withRouteType(Integer routeType) {
        this.routeType = routeType;
        return this;
    }
    
    /**
     * Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_id")
    public Integer runId;

    public V3Run withRunId(Integer runId) {
        this.runId = runId;
        return this;
    }
    
    /**
     * Alphanumeric trip/service run identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_ref")
    public String runRef;

    public V3Run withRunRef(String runRef) {
        this.runRef = runRef;
        return this;
    }
    
    /**
     * Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_sequence")
    public Integer runSequence;

    public V3Run withRunSequence(Integer runSequence) {
        this.runSequence = runSequence;
        return this;
    }
    
    /**
     * Status of metropolitan train run; returns "scheduled" for other modes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public V3Run withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicle_descriptor")
    public V3VehicleDescriptor vehicleDescriptor;

    public V3Run withVehicleDescriptor(V3VehicleDescriptor vehicleDescriptor) {
        this.vehicleDescriptor = vehicleDescriptor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicle_position")
    public V3VehiclePosition vehiclePosition;

    public V3Run withVehiclePosition(V3VehiclePosition vehiclePosition) {
        this.vehiclePosition = vehiclePosition;
        return this;
    }
    
    public V3Run(){}
}
