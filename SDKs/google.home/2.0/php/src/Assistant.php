<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Assistant 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Accessibility
     * 
     * This controls Accessibility sounds. `hotword_enabled` is for 'Play start sound' and `endpoint_enabled` is for 'Play end sound'.  
     * Sending an empty-body POST request returns the current values.  
     * Either of the fields or both can be sent and new values will be saved.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AccessibilityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AccessibilityResponse
     */
	public function accessibility(
        \OpenAPI\OpenAPI\Models\Shared\AccessibilityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AccessibilityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/a11y_mode');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccessibilityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getcurrentvalues = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Getcurrentvalues', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Alarm Volume
     * 
     * This gets and sets alarms and timers volume.  
     * **Note:** This is not the same as normal volume.
     * 
     * Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.  
     * Sending an empty body gets the volume. Sending `volume` sets the volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AlarmVolumeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AlarmVolumeResponse
     */
	public function alarmVolume(
        \OpenAPI\OpenAPI\Models\Shared\AlarmVolumeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AlarmVolumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/alarms/volume');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlarmVolumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getvolume = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Getvolume', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Alarms and Timers
     * 
     * This deletes alarms and timers by their id.
     * 
     * `ids` is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The `/` in the ids have to be escaped like `\/`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DeleteAlarmsandTimersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlarmsandTimersResponse
     */
	public function deleteAlarmsandTimers(
        \OpenAPI\OpenAPI\Models\Shared\DeleteAlarmsandTimersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlarmsandTimersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/alarms/delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlarmsandTimersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example19 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example19', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Do Not Disturb
     * 
     * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoNotDisturbRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DoNotDisturbResponse
     */
	public function doNotDisturb(
        \OpenAPI\OpenAPI\Models\Operations\DoNotDisturbRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DoNotDisturbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/notifications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoNotDisturbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getcurrentstate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Getcurrentstate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Alarms and Timers
     * 
     * This gives a list of all active alarms and timers.
     * 
     * Both alarms and timers have `id`s which can be used to delete them. (There is no known way of creating/deleting yet). The value of `status` have different meanings for alarms and timers (given below).
     * 
     * Alarms have `date_pattern` and `time_pattern` with day, month, year, hour, minute, second. `fire_time` is the same in unix time (milliseconds, not seconds).  
     * `status` is 1 for set up and 2 for ringing.
     * 
     * Timers have `original_duration` is the original duration.  
     * `status` is 1 for set up and 3 for ringing.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlarmsandTimersResponse
     */
	public function getAlarmsandTimers(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlarmsandTimersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/alarms');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlarmsandTimersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example18 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example18', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set Equalizer Values
     * 
     * This can only set new equalizer values. To get already set values, use /setup/eureka_info.
     * 
     * The body is mandatory. It can either contain `low_shelf` or `high_shelf` or both.
     * 
     * `low_shelf.gain_db` and `high_shelf.gain_db` refer to **bass** and **treble** respectively.
     * 
     * Default values are 0 for both.  
     * While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SetEqualizerValuesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetEqualizerValuesResponse
     */
	public function setEqualizerValues(
        \OpenAPI\OpenAPI\Models\Shared\SetEqualizerValuesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetEqualizerValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_eq/set_equalizer');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetEqualizerValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->setEqualizerValues200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}