// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDPayrollsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                   `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                   `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 struct {
	Accounting            *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author                *string                                                       `json:"Author,omitempty"`
	Begin                 *string                                                       `json:"Begin,omitempty"`
	Code                  *string                                                       `json:"Code,omitempty"`
	Comment               *string                                                       `json:"Comment,omitempty"`
	Date                  *string                                                       `json:"Date,omitempty"`
	EmployeeContributions *float32                                                      `json:"EmployeeContributions,omitempty"`
	EmployerContributions *float32                                                      `json:"EmployerContributions,omitempty"`
	End                   *string                                                       `json:"End,omitempty"`
	File                  PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2File        `json:"File"`
	NetAmount             *float32                                                      `json:"NetAmount,omitempty"`
	Title                 string                                                        `json:"Title"`
	TotalGrossAmount      *float32                                                      `json:"TotalGrossAmount,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 struct {
	Begin                 *string  `json:"Begin,omitempty"`
	DocumentID            string   `json:"DocumentId"`
	EmployeeContributions *float32 `json:"EmployeeContributions,omitempty"`
	EmployerContributions *float32 `json:"EmployerContributions,omitempty"`
	End                   *string  `json:"End,omitempty"`
	NetAmount             *float32 `json:"NetAmount,omitempty"`
	TotalGrossAmount      *float32 `json:"TotalGrossAmount,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/payrolls_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/payrolls_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1
	PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDPayrollsApplicationJSONPostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1(postSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1) PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON{
		PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1: &postSpacesSpaceIDFoldersIDPayrollsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDPayrollsApplicationJSONPostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2(postSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2) PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON{
		PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2: &postSpacesSpaceIDFoldersIDPayrollsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDPayrollsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 = postSpacesSpaceIDFoldersIDPayrollsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDPayrollsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 = postSpacesSpaceIDFoldersIDPayrollsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDPayrollsApplicationJSONTypePostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDPayrollsJSONRequest struct {
	// Payroll to add or to generate
	RequestBody PostSpacesSpaceIDFoldersIDPayrollsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder social
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDPayrollsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDPayrollsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDPayrollsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDPayrollsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDPayrollsJSON201ApplicationJSON
}
