/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RuntimeSoftwareConfigInput - Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
 */
public class RuntimeSoftwareConfigInput {
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customGpuDriverPath")
    public String customGpuDriverPath;
    public RuntimeSoftwareConfigInput withCustomGpuDriverPath(String customGpuDriverPath) {
        this.customGpuDriverPath = customGpuDriverPath;
        return this;
    }
    
    /**
     * Bool indicating whether JupyterLab terminal will be available or not. Default: False
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableTerminal")
    public Boolean disableTerminal;
    public RuntimeSoftwareConfigInput withDisableTerminal(Boolean disableTerminal) {
        this.disableTerminal = disableTerminal;
        return this;
    }
    
    /**
     * Verifies core internal services are running. Default: True
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableHealthMonitoring")
    public Boolean enableHealthMonitoring;
    public RuntimeSoftwareConfigInput withEnableHealthMonitoring(Boolean enableHealthMonitoring) {
        this.enableHealthMonitoring = enableHealthMonitoring;
        return this;
    }
    
    /**
     * Runtime will automatically shutdown after idle_shutdown_time. Default: True
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idleShutdown")
    public Boolean idleShutdown;
    public RuntimeSoftwareConfigInput withIdleShutdown(Boolean idleShutdown) {
        this.idleShutdown = idleShutdown;
        return this;
    }
    
    /**
     * Time in minutes to wait before shutting down runtime. Default: 180 minutes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idleShutdownTimeout")
    public Integer idleShutdownTimeout;
    public RuntimeSoftwareConfigInput withIdleShutdownTimeout(Integer idleShutdownTimeout) {
        this.idleShutdownTimeout = idleShutdownTimeout;
        return this;
    }
    
    /**
     * Install Nvidia Driver automatically. Default: True
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installGpuDriver")
    public Boolean installGpuDriver;
    public RuntimeSoftwareConfigInput withInstallGpuDriver(Boolean installGpuDriver) {
        this.installGpuDriver = installGpuDriver;
        return this;
    }
    
    /**
     * Optional. Use a list of container images to use as Kernels in the notebook instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kernels")
    public ContainerImage[] kernels;
    public RuntimeSoftwareConfigInput withKernels(ContainerImage[] kernels) {
        this.kernels = kernels;
        return this;
    }
    
    /**
     * Bool indicating whether mixer client should be disabled. Default: False
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mixerDisabled")
    public Boolean mixerDisabled;
    public RuntimeSoftwareConfigInput withMixerDisabled(Boolean mixerDisabled) {
        this.mixerDisabled = mixerDisabled;
        return this;
    }
    
    /**
     * Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notebookUpgradeSchedule")
    public String notebookUpgradeSchedule;
    public RuntimeSoftwareConfigInput withNotebookUpgradeSchedule(String notebookUpgradeSchedule) {
        this.notebookUpgradeSchedule = notebookUpgradeSchedule;
        return this;
    }
    
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postStartupScript")
    public String postStartupScript;
    public RuntimeSoftwareConfigInput withPostStartupScript(String postStartupScript) {
        this.postStartupScript = postStartupScript;
        return this;
    }
    
    /**
     * Behavior for the post startup script.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postStartupScriptBehavior")
    public RuntimeSoftwareConfigPostStartupScriptBehaviorEnum postStartupScriptBehavior;
    public RuntimeSoftwareConfigInput withPostStartupScriptBehavior(RuntimeSoftwareConfigPostStartupScriptBehaviorEnum postStartupScriptBehavior) {
        this.postStartupScriptBehavior = postStartupScriptBehavior;
        return this;
    }
    
}
