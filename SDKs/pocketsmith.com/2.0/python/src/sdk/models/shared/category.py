"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CategoryRefundBehaviourEnum(str, Enum):
    r"""How the category's refunds or deductions should be reported on."""
    DEBITS_ARE_DEDUCTIONS = 'debits_are_deductions'
    CREDITS_ARE_REFUNDS = 'credits_are_refunds'
    NULL = 'null'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Category:
    r"""Success"""
    
    children: Optional[list[Category]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})
    r"""The category's child categories."""  
    colour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colour'), 'exclude': lambda f: f is None }})
    r"""The colour for the category."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""When the category was created."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the category."""  
    is_bill: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_bill'), 'exclude': lambda f: f is None }})
    r"""Whether the category is a bill category. A bill category is when budgeted amounts are normally spent at once, instead of spread across a budgeting period. This category will be included in the bill reminder email when set to true."""  
    is_transfer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_transfer'), 'exclude': lambda f: f is None }})
    r"""Whether this category has been marked as a transfer category."""  
    parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)"""  
    refund_behaviour: Optional[CategoryRefundBehaviourEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund_behaviour'), 'exclude': lambda f: f is None }})
    r"""How the category's refunds or deductions should be reported on."""  
    roll_up: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roll_up'), 'exclude': lambda f: f is None }})
    r"""Whether the category's budget is rolled up into its parent category, if a parent category is present."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the category."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""When the category was last updated."""  
    