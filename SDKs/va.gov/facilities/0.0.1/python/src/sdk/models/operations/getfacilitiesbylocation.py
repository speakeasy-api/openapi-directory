"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apierror as shared_apierror
from ..shared import facilitiesresponse as shared_facilitiesresponse
from ..shared import genericerror as shared_genericerror
from ..shared import geofacilitiesresponse as shared_geofacilitiesresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetFacilitiesByLocationSecurity:
    
    apikey: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'apikey' }})  
    
class GetFacilitiesByLocationTypeEnum(str, Enum):
    r"""Optional facility type search filter"""
    HEALTH = 'health'
    CEMETERY = 'cemetery'
    BENEFITS = 'benefits'
    VET_CENTER = 'vet_center'


@dataclasses.dataclass
class GetFacilitiesByLocationRequest:
    
    bbox: Optional[list[float]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bbox[]', 'style': 'form', 'explode': True }})
    r"""Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system)"""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location."""  
    lat: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lat', 'style': 'form', 'explode': True }})
    r"""Latitude of point to search for facilities, in WGS84 coordinate reference system."""  
    long: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'long', 'style': 'form', 'explode': True }})
    r"""Longitude of point to search for facilities, in WGS84 coordinate reference system."""  
    mobile: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mobile', 'style': 'form', 'explode': True }})
    r"""Optional facility mobile search filter"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page of results to return per paginated response."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results to return per paginated response."""  
    services: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'services[]', 'style': 'form', 'explode': True }})
    r"""Optional facility service search filter"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""State in which to search for facilities. Except in rare cases, this is two characters."""  
    type: Optional[GetFacilitiesByLocationTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Optional facility type search filter"""  
    visn: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'visn', 'style': 'form', 'explode': True }})
    r"""VISN search of matching facilities."""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return."""  
    

@dataclasses.dataclass
class GetFacilitiesByLocationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_error: Optional[shared_apierror.APIError] = dataclasses.field(default=None)
    r"""Requested format unacceptable"""  
    facilities_response: Optional[shared_facilitiesresponse.FacilitiesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    generic_error: Optional[shared_genericerror.GenericError] = dataclasses.field(default=None)
    r"""Missing API token"""  
    geo_facilities_response: Optional[shared_geofacilitiesresponse.GeoFacilitiesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    