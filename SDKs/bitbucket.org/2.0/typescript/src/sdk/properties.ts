/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Properties {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a commit application property
   *
   * @remarks
   * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
   */
  deleteCommitHostedPropertyValue(
    req: operations.DeleteCommitHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCommitHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCommitHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCommitHostedPropertyValueResponse =
        new operations.DeleteCommitHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a pull request application property
   *
   * @remarks
   * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
   */
  deletePullRequestHostedPropertyValue(
    req: operations.DeletePullRequestHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePullRequestHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePullRequestHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePullRequestHostedPropertyValueResponse =
        new operations.DeletePullRequestHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a repository application property
   *
   * @remarks
   * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
   */
  deleteRepositoryHostedPropertyValue(
    req: operations.DeleteRepositoryHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRepositoryHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRepositoryHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRepositoryHostedPropertyValueResponse =
        new operations.DeleteRepositoryHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a user application property
   *
   * @remarks
   * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
   */
  deleteUserHostedPropertyValue(
    req: operations.DeleteUserHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteUserHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteUserHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteUserHostedPropertyValueResponse =
        new operations.DeleteUserHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get a commit application property
   *
   * @remarks
   * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
   */
  getCommitHostedPropertyValue(
    req: operations.GetCommitHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCommitHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCommitHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCommitHostedPropertyValueResponse =
        new operations.GetCommitHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationProperty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a pull request application property
   *
   * @remarks
   * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
   */
  getPullRequestHostedPropertyValue(
    req: operations.GetPullRequestHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPullRequestHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPullRequestHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPullRequestHostedPropertyValueResponse =
        new operations.GetPullRequestHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationProperty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a repository application property
   *
   * @remarks
   * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
   */
  getRepositoryHostedPropertyValue(
    req: operations.GetRepositoryHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRepositoryHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRepositoryHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRepositoryHostedPropertyValueResponse =
        new operations.GetRepositoryHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationProperty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a user application property
   *
   * @remarks
   * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
   */
  retrieveUserHostedPropertyValue(
    req: operations.RetrieveUserHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveUserHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveUserHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/properties/{app_key}/{property_name}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveUserHostedPropertyValueResponse =
        new operations.RetrieveUserHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationProperty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a commit application property
   *
   * @remarks
   * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
   */
  updateCommitHostedPropertyValue(
    req: operations.UpdateCommitHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCommitHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCommitHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCommitHostedPropertyValueResponse =
        new operations.UpdateCommitHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Update a pull request application property
   *
   * @remarks
   * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
   */
  updatePullRequestHostedPropertyValue(
    req: operations.UpdatePullRequestHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePullRequestHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePullRequestHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePullRequestHostedPropertyValueResponse =
        new operations.UpdatePullRequestHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Update a repository application property
   *
   * @remarks
   * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
   */
  updateRepositoryHostedPropertyValue(
    req: operations.UpdateRepositoryHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateRepositoryHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRepositoryHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateRepositoryHostedPropertyValueResponse =
        new operations.UpdateRepositoryHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Update a user application property
   *
   * @remarks
   * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
   */
  updateUserHostedPropertyValue(
    req: operations.UpdateUserHostedPropertyValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateUserHostedPropertyValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateUserHostedPropertyValueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/properties/{app_key}/{property_name}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateUserHostedPropertyValueResponse =
        new operations.UpdateUserHostedPropertyValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
