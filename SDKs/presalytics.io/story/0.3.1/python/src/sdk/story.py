"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Story:
    r"""Story"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def story_get(self, request: operations.StoryGetRequest) -> operations.StoryGetResponse:
        r"""Story: Get List of User Stories
        Returns a list of stories for this user identifie via the access token presentated to the api
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        query_params = utils.get_query_params(operations.StoryGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Story]])
                res.stories = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_analytics(self, request: operations.StoryIDAnalyticsRequest) -> operations.StoryIDAnalyticsResponse:
        r"""Story: View Analytics
        returns an html document containing session and event metrics for the story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDAnalyticsRequest, base_url, '/{id}/analytics', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDAnalyticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.reveal_js_presenation_with_analytics_data = http_res.content
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/html'):
                res.login_button = http_res.content

        return res

    def story_id_delete(self, request: operations.StoryIDDeleteRequest) -> operations.StoryIDDeleteResponse:
        r"""Story: Delete by Id
        Remove a story and dependant data.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDDeleteRequest, base_url, '/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_file_ooxmlautomationid_delete(self, request: operations.StoryIDFileOoxmlautomationidDeleteRequest) -> operations.StoryIDFileOoxmlautomationidDeleteResponse:
        r"""Story: Delete Subdocument
        Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDFileOoxmlautomationidDeleteRequest, base_url, '/{id}/file/{ooxml_automation_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDFileOoxmlautomationidDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_file_ooxmlautomationid_get(self, request: operations.StoryIDFileOoxmlautomationidGetRequest) -> operations.StoryIDFileOoxmlautomationidGetResponse:
        r"""Story: Download Updated File
        Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDFileOoxmlautomationidGetRequest, base_url, '/{id}/file/{ooxml_automation_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDFileOoxmlautomationidGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.openxmlformats-officedocument.presentationml.presentation'):
                res.powerpoint_presentation = http_res.content
            if utils.match_content_type(content_type, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'):
                res.word_document = http_res.content
            if utils.match_content_type(content_type, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'):
                res.excel_spreadsheet = http_res.content
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_file_post(self, request: operations.StoryIDFilePostRequest) -> operations.StoryIDFilePostResponse:
        r"""Story: Upload a File To Existing Story
        Upload a file to an existing story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDFilePostRequest, base_url, '/{id}/file', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.StoryIDFilePostRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDFilePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [415, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_get(self, request: operations.StoryIDGetRequest) -> operations.StoryIDGetResponse:
        r"""Story: Get by Id
        Returns story metadata, inlcuding json object with story outline
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDGetRequest, base_url, '/{id}', request)
        
        query_params = utils.get_query_params(operations.StoryIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_outline_get(self, request: operations.StoryIDOutlineGetRequest) -> operations.StoryIDOutlineGetResponse:
        r"""Story: Get Story Outline
        Returns Story's outline
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDOutlineGetRequest, base_url, '/{id}/outline', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDOutlineGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.story_id_outline_get_200_application_json_string = http_res.content
        elif http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
        elif http_res.status_code == 410:
            pass

        return res

    def story_id_outline_post(self, request: operations.StoryIDOutlinePostRequest) -> operations.StoryIDOutlinePostResponse:
        r"""Story: Post Story Outline
        Update a story outline.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDOutlinePostRequest, base_url, '/{id}/outline', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDOutlinePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_public(self, request: operations.StoryIDPublicRequest) -> operations.StoryIDPublicResponse:
        r"""Story: Public Link to Story Reveal.js Document
        returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public = True
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDPublicRequest, base_url, '/{id}/public/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDPublicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.reveal_js_presenation = http_res.content
        elif http_res.status_code == 302:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_put(self, request: operations.StoryIDPutRequest) -> operations.StoryIDPutResponse:
        r"""Story: Modify
        Update story metadata, including story outline
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDPutRequest, base_url, '/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "story", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.StoryIDPutRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_reveal(self, request: operations.StoryIDRevealRequest) -> operations.StoryIDRevealResponse:
        r"""Story: Get Story at Reveal.js Document
        returns an html document containing a reveal.js epresentation of the story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDRevealRequest, base_url, '/{id}/reveal', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDRevealResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.reveal_js_presenation = http_res.content
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'text/html'):
                res.login_button = http_res.content

        return res

    def story_id_status_get(self, request: operations.StoryIDStatusGetRequest) -> operations.StoryIDStatusGetResponse:
        r"""Story: Get Story Status
        Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDStatusGetRequest, base_url, '/{id}/status', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDStatusGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_post(self, request: operations.StoryPostRequest) -> operations.StoryPostResponse:
        r"""Story: Upload
        Upload new story to presalytics api
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "outline", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.StoryPostRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [415, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_post_file(self, request: operations.StoryPostFileRequest) -> operations.StoryPostFileResponse:
        r"""Story: Upload a File
        Upload new story to presalytics api via an Open Office Xml file
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.StoryPostFileRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryPostFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [415, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_post_file_json(self, request: operations.StoryPostFileJSONRequest) -> operations.StoryPostFileJSONResponse:
        r"""Story: Upload a File (base64)
        Upload new story to presalytics api via an Open Office Xml file
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file/json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_upload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StoryPostFileJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryPostFileJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [415, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    