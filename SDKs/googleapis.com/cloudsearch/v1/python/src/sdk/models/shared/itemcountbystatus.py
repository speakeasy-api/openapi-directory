"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ItemCountByStatusStatusCodeEnum(str, Enum):
    r"""Status of the items."""
    CODE_UNSPECIFIED = 'CODE_UNSPECIFIED'
    ERROR = 'ERROR'
    MODIFIED = 'MODIFIED'
    NEW_ITEM = 'NEW_ITEM'
    ACCEPTED = 'ACCEPTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemCountByStatus:
    
    count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Number of items matching the status code."""  
    indexed_items_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexedItemsCount'), 'exclude': lambda f: f is None }})
    r"""Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code."""  
    status_code: Optional[ItemCountByStatusStatusCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCode'), 'exclude': lambda f: f is None }})
    r"""Status of the items."""  
    