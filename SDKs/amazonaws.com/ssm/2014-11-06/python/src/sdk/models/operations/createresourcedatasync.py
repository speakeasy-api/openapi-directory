"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createresourcedatasyncrequest as shared_createresourcedatasyncrequest
from enum import Enum
from typing import Any, Optional

class CreateResourceDataSyncXAmzTargetEnum(str, Enum):
    AMAZON_SSM_CREATE_RESOURCE_DATA_SYNC = 'AmazonSSM.CreateResourceDataSync'


@dataclasses.dataclass
class CreateResourceDataSyncRequest:
    
    create_resource_data_sync_request: shared_createresourcedatasyncrequest.CreateResourceDataSyncRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateResourceDataSyncXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateResourceDataSyncResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_resource_data_sync_result: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_data_sync_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceDataSyncAlreadyExistsException"""  
    resource_data_sync_count_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceDataSyncCountExceededException"""  
    resource_data_sync_invalid_configuration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceDataSyncInvalidConfigurationException"""  
    