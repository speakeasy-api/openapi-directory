<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class HolidayScheme 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an holiday scheme
     * 
     * Delete the specified holiday scheme
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeResponse
     */
	public function deleteHolidayScheme(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an holiday scheme revision matching the specified revision date.
     * 
     * Deletes the specified holiday scheme revision for the matching revision date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionResponse
     */
	public function deleteHolidaySchemeRevision(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an HolidayScheme revision matching the specified revision number.
     * 
     * Deletes the specified holiday scheme revision for the matching revision number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionByNumberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionByNumberResponse
     */
	public function deleteHolidaySchemeRevisionByNumber(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionByNumberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionByNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}', \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionByNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeRevisionByNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete holiday scheme tag
     * 
     * Deletes a tag from the holiday scheme
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeTagResponse
     */
	public function deleteHolidaySchemeTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHolidaySchemeTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all holiday scheme tags
     * 
     * Gets all the holiday scheme tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllHolidaySchemeTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllHolidaySchemeTagsResponse
     */
	public function getAllHolidaySchemeTags(
        \OpenAPI\OpenAPI\Models\Operations\GetAllHolidaySchemeTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllHolidaySchemeTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidaySchemes/Tags', \OpenAPI\OpenAPI\Models\Operations\GetAllHolidaySchemeTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllHolidaySchemeTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday scheme by effective date.
     * 
     * Returns the holiday scheme's state at the specified effective date.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeByEffectiveDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeByEffectiveDateResponse
     */
	public function getHolidaySchemeByEffectiveDate(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeByEffectiveDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeByEffectiveDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeByEffectiveDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeByEffectiveDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->holidayScheme = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HolidayScheme', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday scheme from employer
     * 
     * Gets the specified holiday scheme from employer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeFromEmployerResponse
     */
	public function getHolidaySchemeFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->holidayScheme = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HolidayScheme', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the holiday scheme revision by revision number
     * 
     * Get the holiday scheme revision matching the specified revision number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionByNumberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionByNumberResponse
     */
	public function getHolidaySchemeRevisionByNumber(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionByNumberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionByNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionByNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionByNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->holidayScheme = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HolidayScheme', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all holiday scheme revisions
     * 
     * Gets links to all the holiday scheme revisions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionsResponse
     */
	public function getHolidaySchemeRevisions(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revisions', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemeRevisionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday schemes from employer at a given effective date.
     * 
     * Get links to all holiday schemes for the employer on specified effective date.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesByEffectiveDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesByEffectiveDateResponse
     */
	public function getHolidaySchemesByEffectiveDate(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesByEffectiveDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesByEffectiveDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidaySchemes/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesByEffectiveDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesByEffectiveDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday schemes from employer.
     * 
     * Get links to all holiday schemes for the specified employer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesFromEmployerResponse
     */
	public function getHolidaySchemesFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidaySchemes', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday schemes with tag
     * 
     * Gets the holiday scheme with the tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesWithTagResponse
     */
	public function getHolidaySchemesWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHolidaySchemesWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday scheme tag
     * 
     * Gets the tag from the holiday scheme
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeResponse
     */
	public function getTagFromHolidayScheme(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get holiday scheme revision tag
     * 
     * Gets the tag from the holiday scheme revision
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRevisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRevisionResponse
     */
	public function getTagFromHolidaySchemeRevision(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRevisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromHolidaySchemeRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all tags from the holiday scheme
     * 
     * Gets all the tags from the holiday scheme
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeResponse
     */
	public function getTagsFromHolidayScheme(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all holiday scheme revision tags
     * 
     * Gets all the tags from the holiday scheme revision
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRevisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRevisionResponse
     */
	public function getTagsFromHolidaySchemeRevision(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRevisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromHolidaySchemeRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the holiday scheme
     * 
     * Patches the specified holiday scheme with the supplied values
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchHolidaySchemeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchHolidaySchemeResponse
     */
	public function patchHolidayScheme(
        \OpenAPI\OpenAPI\Models\Operations\PatchHolidaySchemeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchHolidaySchemeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', \OpenAPI\OpenAPI\Models\Operations\PatchHolidaySchemeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "holidayScheme", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchHolidaySchemeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->holidayScheme = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HolidayScheme', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new holiday scheme
     * 
     * Create a new holiday scheme object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostHolidaySchemeIntoEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostHolidaySchemeIntoEmployerResponse
     */
	public function postHolidaySchemeIntoEmployer(
        \OpenAPI\OpenAPI\Models\Operations\PostHolidaySchemeIntoEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostHolidaySchemeIntoEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidaySchemes', \OpenAPI\OpenAPI\Models\Operations\PostHolidaySchemeIntoEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "holidayScheme", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostHolidaySchemeIntoEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the holiday scheme
     * 
     * Updates the existing specified holiday scheme object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeIntoEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeIntoEmployerResponse
     */
	public function putHolidaySchemeIntoEmployer(
        \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeIntoEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeIntoEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}', \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeIntoEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "holidayScheme", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeIntoEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->holidayScheme = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HolidayScheme', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert holiday scheme tag
     * 
     * Inserts a new tag on the holiday scheme
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeTagResponse
     */
	public function putHolidaySchemeTag(
        \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutHolidaySchemeTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
}