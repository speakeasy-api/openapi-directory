"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createprovisioningtemplateresponse as shared_createprovisioningtemplateresponse
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateProvisioningTemplateRequestBodyPreProvisioningHook:
    r"""Structure that contains <code>payloadVersion</code> and <code>targetArn</code>."""
    
    payload_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payloadVersion'), 'exclude': lambda f: f is None }})  
    target_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetArn'), 'exclude': lambda f: f is None }})  
    
class CreateProvisioningTemplateRequestBodyTypeEnum(str, Enum):
    r"""The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href=\\"https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html\\">Provisioning template</a>."""
    FLEET_PROVISIONING = 'FLEET_PROVISIONING'
    JITP = 'JITP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateProvisioningTemplateRequestBody:
    
    provisioning_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioningRoleArn') }})
    r"""The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device."""  
    template_body: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateBody') }})
    r"""The JSON formatted contents of the provisioning template."""  
    template_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateName') }})
    r"""The name of the provisioning template."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the provisioning template."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""True to enable the provisioning template, otherwise false."""  
    pre_provisioning_hook: Optional[CreateProvisioningTemplateRequestBodyPreProvisioningHook] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preProvisioningHook'), 'exclude': lambda f: f is None }})
    r"""Structure that contains <code>payloadVersion</code> and <code>targetArn</code>."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""<p>Metadata which can be used to manage the provisioning template.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags \\"key1=value1&amp;key2=value2...\\"</p> <p>For the cli-input-json file use format: \\"tags\\": \\"key1=value1&amp;key2=value2...\\"</p> </note>"""  
    type: Optional[CreateProvisioningTemplateRequestBodyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href=\\"https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html\\">Provisioning template</a>."""  
    

@dataclasses.dataclass
class CreateProvisioningTemplateRequest:
    
    request_body: CreateProvisioningTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateProvisioningTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_provisioning_template_response: Optional[shared_createprovisioningtemplateresponse.CreateProvisioningTemplateResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    