/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * GlobalSummary - Successful operation
 */
public class GlobalSummary {
    /**
     * The CO&lt;sub&gt;2&lt;/sub&gt; emissions for all devices. This value can be updated by users with sufficient permissions.
     */
    
    public Double co2Emission;

    public GlobalSummary withCo2Emission(Double co2Emission) {
        this.co2Emission = co2Emission;
        return this;
    }
    
    /**
     * The unit in which the CO&lt;sub&gt;2&lt;/sub&gt; emission is being expressed.
     */
    
    public String co2EmissionUnit;

    public GlobalSummary withCo2EmissionUnit(String co2EmissionUnit) {
        this.co2EmissionUnit = co2EmissionUnit;
        return this;
    }
    
    /**
     * If &lt;em&gt;true&lt;/em&gt;, indicates that you do not have sufficient rights to update the global settings. However, you may still have sufficient rights to update a specific group's setting.
     */
    
    public Boolean editable;

    public GlobalSummary withEditable(Boolean editable) {
        this.editable = editable;
        return this;
    }
    
    /**
     * The electricity rate for all devices. This value can be updated by users with sufficient permissions.
     */
    
    public Double energyCost;

    public GlobalSummary withEnergyCost(Double energyCost) {
        this.energyCost = energyCost;
        return this;
    }
    
    /**
     * The unit in which the electricity rate is being expressed.
     */
    
    public String energyCostUnit;

    public GlobalSummary withEnergyCostUnit(String energyCostUnit) {
        this.energyCostUnit = energyCostUnit;
        return this;
    }
    
    /**
     * Regular expression used to filter the groups for which the power consumption will be reported.
     */
    
    public String groupNameFilter;

    public GlobalSummary withGroupNameFilter(String groupNameFilter) {
        this.groupNameFilter = groupNameFilter;
        return this;
    }
    
    /**
     * The lowest heating margin among the heating margins of all the devices.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMargin;

    public GlobalSummary withHeatingMargin(Double heatingMargin) {
        this.heatingMargin = heatingMargin;
        return this;
    }
    
    /**
     * The percentage of devices whose heating margin could be found.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMarginCoverage;

    public GlobalSummary withHeatingMarginCoverage(Double heatingMarginCoverage) {
        this.heatingMarginCoverage = heatingMarginCoverage;
        return this;
    }
    
    /**
     * The name of the device having the lowest heating margin.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginDeviceName;

    public GlobalSummary withHeatingMarginDeviceName(String heatingMarginDeviceName) {
        this.heatingMarginDeviceName = heatingMarginDeviceName;
        return this;
    }
    
    /**
     * The link to the details of the device having the lowest heating margin.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginDeviceUrl;

    public GlobalSummary withHeatingMarginDeviceUrl(String heatingMarginDeviceUrl) {
        this.heatingMarginDeviceUrl = heatingMarginDeviceUrl;
        return this;
    }
    
    /**
     * The unit in which the heating margin is being expressed.
     */
    
    public String heatingMarginUnit;

    public GlobalSummary withHeatingMarginUnit(String heatingMarginUnit) {
        this.heatingMarginUnit = heatingMarginUnit;
        return this;
    }
    
    /**
     * The ID of the global summary (this ID will always be "global").
     */
    
    public String id;

    public GlobalSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The total power consumption of all the devices.
     */
    
    public Double totalPowerConsumption;

    public GlobalSummary withTotalPowerConsumption(Double totalPowerConsumption) {
        this.totalPowerConsumption = totalPowerConsumption;
        return this;
    }
    
    /**
     * The unit in which the total power consumption is being expressed.
     */
    
    public String totalPowerConsumptionUnit;

    public GlobalSummary withTotalPowerConsumptionUnit(String totalPowerConsumptionUnit) {
        this.totalPowerConsumptionUnit = totalPowerConsumptionUnit;
        return this;
    }
    
    /**
     * The data collection time (as an Epoch time, in seconds).
     */
    
    public Long updateTimestamp;

    public GlobalSummary withUpdateTimestamp(Long updateTimestamp) {
        this.updateTimestamp = updateTimestamp;
        return this;
    }
    
    public GlobalSummary(){}
}
