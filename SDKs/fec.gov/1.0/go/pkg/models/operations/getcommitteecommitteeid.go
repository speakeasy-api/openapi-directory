// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetCommitteeCommitteeIDCommitteeTypeEnum string

const (
	GetCommitteeCommitteeIDCommitteeTypeEnumUnknown GetCommitteeCommitteeIDCommitteeTypeEnum = ""
	GetCommitteeCommitteeIDCommitteeTypeEnumC       GetCommitteeCommitteeIDCommitteeTypeEnum = "C"
	GetCommitteeCommitteeIDCommitteeTypeEnumD       GetCommitteeCommitteeIDCommitteeTypeEnum = "D"
	GetCommitteeCommitteeIDCommitteeTypeEnumE       GetCommitteeCommitteeIDCommitteeTypeEnum = "E"
	GetCommitteeCommitteeIDCommitteeTypeEnumH       GetCommitteeCommitteeIDCommitteeTypeEnum = "H"
	GetCommitteeCommitteeIDCommitteeTypeEnumI       GetCommitteeCommitteeIDCommitteeTypeEnum = "I"
	GetCommitteeCommitteeIDCommitteeTypeEnumN       GetCommitteeCommitteeIDCommitteeTypeEnum = "N"
	GetCommitteeCommitteeIDCommitteeTypeEnumO       GetCommitteeCommitteeIDCommitteeTypeEnum = "O"
	GetCommitteeCommitteeIDCommitteeTypeEnumP       GetCommitteeCommitteeIDCommitteeTypeEnum = "P"
	GetCommitteeCommitteeIDCommitteeTypeEnumQ       GetCommitteeCommitteeIDCommitteeTypeEnum = "Q"
	GetCommitteeCommitteeIDCommitteeTypeEnumS       GetCommitteeCommitteeIDCommitteeTypeEnum = "S"
	GetCommitteeCommitteeIDCommitteeTypeEnumU       GetCommitteeCommitteeIDCommitteeTypeEnum = "U"
	GetCommitteeCommitteeIDCommitteeTypeEnumV       GetCommitteeCommitteeIDCommitteeTypeEnum = "V"
	GetCommitteeCommitteeIDCommitteeTypeEnumW       GetCommitteeCommitteeIDCommitteeTypeEnum = "W"
	GetCommitteeCommitteeIDCommitteeTypeEnumX       GetCommitteeCommitteeIDCommitteeTypeEnum = "X"
	GetCommitteeCommitteeIDCommitteeTypeEnumY       GetCommitteeCommitteeIDCommitteeTypeEnum = "Y"
	GetCommitteeCommitteeIDCommitteeTypeEnumZ       GetCommitteeCommitteeIDCommitteeTypeEnum = "Z"
)

func (e *GetCommitteeCommitteeIDCommitteeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "D":
		fallthrough
	case "E":
		fallthrough
	case "H":
		fallthrough
	case "I":
		fallthrough
	case "N":
		fallthrough
	case "O":
		fallthrough
	case "P":
		fallthrough
	case "Q":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "V":
		fallthrough
	case "W":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "Z":
		*e = GetCommitteeCommitteeIDCommitteeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDCommitteeTypeEnum: %s", s)
	}
}

type GetCommitteeCommitteeIDDesignationEnum string

const (
	GetCommitteeCommitteeIDDesignationEnumUnknown GetCommitteeCommitteeIDDesignationEnum = ""
	GetCommitteeCommitteeIDDesignationEnumA       GetCommitteeCommitteeIDDesignationEnum = "A"
	GetCommitteeCommitteeIDDesignationEnumJ       GetCommitteeCommitteeIDDesignationEnum = "J"
	GetCommitteeCommitteeIDDesignationEnumP       GetCommitteeCommitteeIDDesignationEnum = "P"
	GetCommitteeCommitteeIDDesignationEnumU       GetCommitteeCommitteeIDDesignationEnum = "U"
	GetCommitteeCommitteeIDDesignationEnumB       GetCommitteeCommitteeIDDesignationEnum = "B"
	GetCommitteeCommitteeIDDesignationEnumD       GetCommitteeCommitteeIDDesignationEnum = "D"
)

func (e *GetCommitteeCommitteeIDDesignationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "J":
		fallthrough
	case "P":
		fallthrough
	case "U":
		fallthrough
	case "B":
		fallthrough
	case "D":
		*e = GetCommitteeCommitteeIDDesignationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDDesignationEnum: %s", s)
	}
}

type GetCommitteeCommitteeIDFilingFrequencyEnum string

const (
	GetCommitteeCommitteeIDFilingFrequencyEnumUnknown GetCommitteeCommitteeIDFilingFrequencyEnum = ""
	GetCommitteeCommitteeIDFilingFrequencyEnumA       GetCommitteeCommitteeIDFilingFrequencyEnum = "A"
	GetCommitteeCommitteeIDFilingFrequencyEnumM       GetCommitteeCommitteeIDFilingFrequencyEnum = "M"
	GetCommitteeCommitteeIDFilingFrequencyEnumN       GetCommitteeCommitteeIDFilingFrequencyEnum = "N"
	GetCommitteeCommitteeIDFilingFrequencyEnumQ       GetCommitteeCommitteeIDFilingFrequencyEnum = "Q"
	GetCommitteeCommitteeIDFilingFrequencyEnumT       GetCommitteeCommitteeIDFilingFrequencyEnum = "T"
	GetCommitteeCommitteeIDFilingFrequencyEnumW       GetCommitteeCommitteeIDFilingFrequencyEnum = "W"
	GetCommitteeCommitteeIDFilingFrequencyEnumMinusA  GetCommitteeCommitteeIDFilingFrequencyEnum = "-A"
	GetCommitteeCommitteeIDFilingFrequencyEnumMinusT  GetCommitteeCommitteeIDFilingFrequencyEnum = "-T"
)

func (e *GetCommitteeCommitteeIDFilingFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "M":
		fallthrough
	case "N":
		fallthrough
	case "Q":
		fallthrough
	case "T":
		fallthrough
	case "W":
		fallthrough
	case "-A":
		fallthrough
	case "-T":
		*e = GetCommitteeCommitteeIDFilingFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDFilingFrequencyEnum: %s", s)
	}
}

type GetCommitteeCommitteeIDOrganizationTypeEnum string

const (
	GetCommitteeCommitteeIDOrganizationTypeEnumUnknown GetCommitteeCommitteeIDOrganizationTypeEnum = ""
	GetCommitteeCommitteeIDOrganizationTypeEnumC       GetCommitteeCommitteeIDOrganizationTypeEnum = "C"
	GetCommitteeCommitteeIDOrganizationTypeEnumL       GetCommitteeCommitteeIDOrganizationTypeEnum = "L"
	GetCommitteeCommitteeIDOrganizationTypeEnumM       GetCommitteeCommitteeIDOrganizationTypeEnum = "M"
	GetCommitteeCommitteeIDOrganizationTypeEnumT       GetCommitteeCommitteeIDOrganizationTypeEnum = "T"
	GetCommitteeCommitteeIDOrganizationTypeEnumV       GetCommitteeCommitteeIDOrganizationTypeEnum = "V"
	GetCommitteeCommitteeIDOrganizationTypeEnumW       GetCommitteeCommitteeIDOrganizationTypeEnum = "W"
)

func (e *GetCommitteeCommitteeIDOrganizationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "T":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = GetCommitteeCommitteeIDOrganizationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommitteeCommitteeIDOrganizationTypeEnum: %s", s)
	}
}

type GetCommitteeCommitteeIDRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID string `pathParam:"style=simple,explode=false,name=committee_id"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType []GetCommitteeCommitteeIDCommitteeTypeEnum `queryParam:"style=form,explode=true,name=committee_type"`
	// A two year election cycle that the committee was active- (after original registration
	// date but before expiration date in Form 1s) The cycle begins with
	// an odd year and is named for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	Designation []GetCommitteeCommitteeIDDesignationEnum `queryParam:"style=form,explode=true,name=designation"`
	// The one-letter
	//     code of the filing frequency:
	//          - A Administratively terminated
	//          - D Debt
	//          - M Monthly filer
	//          - Q Quarterly filer
	//          - T Terminated
	//          - W Waived
	//
	FilingFrequency []GetCommitteeCommitteeIDFilingFrequencyEnum `queryParam:"style=form,explode=true,name=filing_frequency"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	OrganizationType []GetCommitteeCommitteeIDOrganizationTypeEnum `queryParam:"style=form,explode=true,name=organization_type"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// A year that the committee was active— (after original registration date     or filing but before expiration date)
	Year []int `queryParam:"style=form,explode=true,name=year"`
}

type GetCommitteeCommitteeIDResponse struct {
	CommitteeDetailPage *shared.CommitteeDetailPage
	ContentType         string
	StatusCode          int
	RawResponse         *http.Response
}
