// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AmqpRulePostRuleTypeEnum string

const (
	AmqpRulePostRuleTypeEnumAmqp AmqpRulePostRuleTypeEnum = "amqp"
)

func (e AmqpRulePostRuleTypeEnum) ToPointer() *AmqpRulePostRuleTypeEnum {
	return &e
}

func (e *AmqpRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amqp":
		*e = AmqpRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmqpRulePostRuleTypeEnum: %v", v)
	}
}

type AmqpRulePostTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AmqpRulePostTarget struct {
	Enveloped *bool                       `json:"enveloped,omitempty"`
	Format    *string                     `json:"format,omitempty"`
	Headers   []AmqpRulePostTargetHeaders `json:"headers,omitempty"`
	QueueID   string                      `json:"queueId"`
}

type AmqpRulePost struct {
	RequestMode string                   `json:"requestMode"`
	RuleType    AmqpRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource               `json:"source"`
	Status      *string                  `json:"status,omitempty"`
	Target      AmqpRulePostTarget       `json:"target"`
}
