"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import account as shared_account
from ..shared import accountscustombatchrequestentrylinkrequest as shared_accountscustombatchrequestentrylinkrequest
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountsCustomBatchRequestEntry:
    r"""A batch entry encoding a single non-batch accounts request."""
    
    account: Optional[shared_account.Account] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role."""  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the targeted account. Only defined if the method is not `insert`."""  
    batch_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchId'), 'exclude': lambda f: f is None }})
    r"""An entry ID, unique within the batch request."""  
    force: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('force'), 'exclude': lambda f: f is None }})
    r"""Whether the account should be deleted if the account has offers. Only applicable if the method is `delete`."""  
    label_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labelIds'), 'exclude': lambda f: f is None }})
    r"""Label IDs for the 'updatelabels' request."""  
    link_request: Optional[shared_accountscustombatchrequestentrylinkrequest.AccountsCustomBatchRequestEntryLinkRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkRequest'), 'exclude': lambda f: f is None }})  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantId'), 'exclude': lambda f: f is None }})
    r"""The ID of the managing account."""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""The method of the batch entry. Acceptable values are: - \\"`claimWebsite`\\" - \\"`delete`\\" - \\"`get`\\" - \\"`insert`\\" - \\"`link`\\" - \\"`update`\\" """  
    overwrite: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overwrite'), 'exclude': lambda f: f is None }})
    r"""Only applicable if the method is `claimwebsite`. Indicates whether or not to take the claim from another account in case there is a conflict."""  
    