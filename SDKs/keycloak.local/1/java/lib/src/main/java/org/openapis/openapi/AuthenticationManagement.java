/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class AuthenticationManagement {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public AuthenticationManagement(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete authenticator configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmAuthenticationConfigIdResponse deleteRealmAuthenticationConfigId(org.openapis.openapi.models.operations.DeleteRealmAuthenticationConfigIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmAuthenticationConfigIdRequest.class, baseUrl, "/{realm}/authentication/config/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmAuthenticationConfigIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmAuthenticationConfigIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Delete execution
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmAuthenticationExecutionsExecutionIdResponse deleteRealmAuthenticationExecutionsExecutionId(org.openapis.openapi.models.operations.DeleteRealmAuthenticationExecutionsExecutionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmAuthenticationExecutionsExecutionIdRequest.class, baseUrl, "/{realm}/authentication/executions/{executionId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmAuthenticationExecutionsExecutionIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmAuthenticationExecutionsExecutionIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Delete an authentication flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmAuthenticationFlowsIdResponse deleteRealmAuthenticationFlowsId(org.openapis.openapi.models.operations.DeleteRealmAuthenticationFlowsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmAuthenticationFlowsIdRequest.class, baseUrl, "/{realm}/authentication/flows/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmAuthenticationFlowsIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmAuthenticationFlowsIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Delete required action
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmAuthenticationRequiredActionsAliasResponse deleteRealmAuthenticationRequiredActionsAlias(org.openapis.openapi.models.operations.DeleteRealmAuthenticationRequiredActionsAliasRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmAuthenticationRequiredActionsAliasRequest.class, baseUrl, "/{realm}/authentication/required-actions/{alias}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmAuthenticationRequiredActionsAliasResponse res = new org.openapis.openapi.models.operations.DeleteRealmAuthenticationRequiredActionsAliasResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get authenticator providers   Returns a list of authenticator providers.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationAuthenticatorProvidersResponse getRealmAuthenticationAuthenticatorProviders(org.openapis.openapi.models.operations.GetRealmAuthenticationAuthenticatorProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationAuthenticatorProvidersRequest.class, baseUrl, "/{realm}/authentication/authenticator-providers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationAuthenticatorProvidersResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationAuthenticatorProvidersResponse(contentType, httpRes.statusCode()) {{
            getRealmAuthenticationAuthenticatorProviders2XXApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getRealmAuthenticationAuthenticatorProviders2XXApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get client authenticator providers   Returns a list of client authenticator providers.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationClientAuthenticatorProvidersResponse getRealmAuthenticationClientAuthenticatorProviders(org.openapis.openapi.models.operations.GetRealmAuthenticationClientAuthenticatorProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationClientAuthenticatorProvidersRequest.class, baseUrl, "/{realm}/authentication/client-authenticator-providers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationClientAuthenticatorProvidersResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationClientAuthenticatorProvidersResponse(contentType, httpRes.statusCode()) {{
            getRealmAuthenticationClientAuthenticatorProviders2XXApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getRealmAuthenticationClientAuthenticatorProviders2XXApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get authenticator provider\u2019s configuration description
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationConfigDescriptionProviderIdResponse getRealmAuthenticationConfigDescriptionProviderId(org.openapis.openapi.models.operations.GetRealmAuthenticationConfigDescriptionProviderIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationConfigDescriptionProviderIdRequest.class, baseUrl, "/{realm}/authentication/config-description/{providerId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationConfigDescriptionProviderIdResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationConfigDescriptionProviderIdResponse(contentType, httpRes.statusCode()) {{
            authenticatorConfigInfoRepresentation = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticatorConfigInfoRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticatorConfigInfoRepresentation.class);
                res.authenticatorConfigInfoRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get authenticator configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationConfigIdResponse getRealmAuthenticationConfigId(org.openapis.openapi.models.operations.GetRealmAuthenticationConfigIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationConfigIdRequest.class, baseUrl, "/{realm}/authentication/config/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationConfigIdResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationConfigIdResponse(contentType, httpRes.statusCode()) {{
            authenticatorConfigRepresentation = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticatorConfigRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticatorConfigRepresentation.class);
                res.authenticatorConfigRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get Single Execution
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationExecutionsExecutionIdResponse getRealmAuthenticationExecutionsExecutionId(org.openapis.openapi.models.operations.GetRealmAuthenticationExecutionsExecutionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationExecutionsExecutionIdRequest.class, baseUrl, "/{realm}/authentication/executions/{executionId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationExecutionsExecutionIdResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationExecutionsExecutionIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get authentication flows   Returns a list of authentication flows.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsResponse getRealmAuthenticationFlows(org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsRequest.class, baseUrl, "/{realm}/authentication/flows", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsResponse(contentType, httpRes.statusCode()) {{
            authenticationFlowRepresentations = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticationFlowRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticationFlowRepresentation[].class);
                res.authenticationFlowRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get authentication executions for a flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsFlowAliasExecutionsResponse getRealmAuthenticationFlowsFlowAliasExecutions(org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsFlowAliasExecutionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsFlowAliasExecutionsRequest.class, baseUrl, "/{realm}/authentication/flows/{flowAlias}/executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsFlowAliasExecutionsResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsFlowAliasExecutionsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get authentication flow for id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsIdResponse getRealmAuthenticationFlowsId(org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsIdRequest.class, baseUrl, "/{realm}/authentication/flows/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsIdResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationFlowsIdResponse(contentType, httpRes.statusCode()) {{
            authenticationFlowRepresentation = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthenticationFlowRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthenticationFlowRepresentation.class);
                res.authenticationFlowRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get form action providers   Returns a list of form action providers.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationFormActionProvidersResponse getRealmAuthenticationFormActionProviders(org.openapis.openapi.models.operations.GetRealmAuthenticationFormActionProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationFormActionProvidersRequest.class, baseUrl, "/{realm}/authentication/form-action-providers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationFormActionProvidersResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationFormActionProvidersResponse(contentType, httpRes.statusCode()) {{
            getRealmAuthenticationFormActionProviders2XXApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getRealmAuthenticationFormActionProviders2XXApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get form providers   Returns a list of form providers.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationFormProvidersResponse getRealmAuthenticationFormProviders(org.openapis.openapi.models.operations.GetRealmAuthenticationFormProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationFormProvidersRequest.class, baseUrl, "/{realm}/authentication/form-providers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationFormProvidersResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationFormProvidersResponse(contentType, httpRes.statusCode()) {{
            getRealmAuthenticationFormProviders2XXApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getRealmAuthenticationFormProviders2XXApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get configuration descriptions for all clients
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationPerClientConfigDescriptionResponse getRealmAuthenticationPerClientConfigDescription(org.openapis.openapi.models.operations.GetRealmAuthenticationPerClientConfigDescriptionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationPerClientConfigDescriptionRequest.class, baseUrl, "/{realm}/authentication/per-client-config-description", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationPerClientConfigDescriptionResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationPerClientConfigDescriptionResponse(contentType, httpRes.statusCode()) {{
            getRealmAuthenticationPerClientConfigDescription2XXApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getRealmAuthenticationPerClientConfigDescription2XXApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get required actions   Returns a list of required actions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsResponse getRealmAuthenticationRequiredActions(org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsRequest.class, baseUrl, "/{realm}/authentication/required-actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsResponse(contentType, httpRes.statusCode()) {{
            requiredActionProviderRepresentations = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RequiredActionProviderRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RequiredActionProviderRepresentation[].class);
                res.requiredActionProviderRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get required action for alias
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsAliasResponse getRealmAuthenticationRequiredActionsAlias(org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsAliasRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsAliasRequest.class, baseUrl, "/{realm}/authentication/required-actions/{alias}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsAliasResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationRequiredActionsAliasResponse(contentType, httpRes.statusCode()) {{
            requiredActionProviderRepresentation = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RequiredActionProviderRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RequiredActionProviderRepresentation.class);
                res.requiredActionProviderRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get unregistered required actions   Returns a list of unregistered required actions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAuthenticationUnregisteredRequiredActionsResponse getRealmAuthenticationUnregisteredRequiredActions(org.openapis.openapi.models.operations.GetRealmAuthenticationUnregisteredRequiredActionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAuthenticationUnregisteredRequiredActionsRequest.class, baseUrl, "/{realm}/authentication/unregistered-required-actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAuthenticationUnregisteredRequiredActionsResponse res = new org.openapis.openapi.models.operations.GetRealmAuthenticationUnregisteredRequiredActionsResponse(contentType, httpRes.statusCode()) {{
            getRealmAuthenticationUnregisteredRequiredActions2XXApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getRealmAuthenticationUnregisteredRequiredActions2XXApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Add new authentication execution
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsResponse postRealmAuthenticationExecutions(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsRequest.class, baseUrl, "/{realm}/authentication/executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authenticationExecutionRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update execution with new configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdConfigResponse postRealmAuthenticationExecutionsExecutionIdConfig(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdConfigRequest.class, baseUrl, "/{realm}/authentication/executions/{executionId}/config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authenticatorConfigRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdConfigResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdConfigResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Lower execution\u2019s priority
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse postRealmAuthenticationExecutionsExecutionIdLowerPriority(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest.class, baseUrl, "/{realm}/authentication/executions/{executionId}/lower-priority", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Raise execution\u2019s priority
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse postRealmAuthenticationExecutionsExecutionIdRaisePriority(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest.class, baseUrl, "/{realm}/authentication/executions/{executionId}/raise-priority", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Create a new authentication flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsResponse postRealmAuthenticationFlows(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsRequest.class, baseUrl, "/{realm}/authentication/flows", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authenticationFlowRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasCopyResponse postRealmAuthenticationFlowsFlowAliasCopy(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasCopyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasCopyRequest.class, baseUrl, "/{realm}/authentication/flows/{flowAlias}/copy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasCopyResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasCopyResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add new authentication execution to a flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse postRealmAuthenticationFlowsFlowAliasExecutionsExecution(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest.class, baseUrl, "/{realm}/authentication/flows/{flowAlias}/executions/execution", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add new flow with new execution to existing flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse postRealmAuthenticationFlowsFlowAliasExecutionsFlow(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest.class, baseUrl, "/{realm}/authentication/flows/{flowAlias}/executions/flow", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Register a new required actions
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationRegisterRequiredActionResponse postRealmAuthenticationRegisterRequiredAction(org.openapis.openapi.models.operations.PostRealmAuthenticationRegisterRequiredActionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationRegisterRequiredActionRequest.class, baseUrl, "/{realm}/authentication/register-required-action", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationRegisterRequiredActionResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationRegisterRequiredActionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Lower required action\u2019s priority
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse postRealmAuthenticationRequiredActionsAliasLowerPriority(org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest.class, baseUrl, "/{realm}/authentication/required-actions/{alias}/lower-priority", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Raise required action\u2019s priority
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse postRealmAuthenticationRequiredActionsAliasRaisePriority(org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest.class, baseUrl, "/{realm}/authentication/required-actions/{alias}/raise-priority", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse res = new org.openapis.openapi.models.operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update authenticator configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmAuthenticationConfigIdResponse putRealmAuthenticationConfigId(org.openapis.openapi.models.operations.PutRealmAuthenticationConfigIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmAuthenticationConfigIdRequest.class, baseUrl, "/{realm}/authentication/config/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authenticatorConfigRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmAuthenticationConfigIdResponse res = new org.openapis.openapi.models.operations.PutRealmAuthenticationConfigIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update authentication executions of a flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsFlowAliasExecutionsResponse putRealmAuthenticationFlowsFlowAliasExecutions(org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsFlowAliasExecutionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsFlowAliasExecutionsRequest.class, baseUrl, "/{realm}/authentication/flows/{flowAlias}/executions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authenticationExecutionInfoRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsFlowAliasExecutionsResponse res = new org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsFlowAliasExecutionsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update an authentication flow
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsIdResponse putRealmAuthenticationFlowsId(org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsIdRequest.class, baseUrl, "/{realm}/authentication/flows/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authenticationFlowRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsIdResponse res = new org.openapis.openapi.models.operations.PutRealmAuthenticationFlowsIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update required action
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmAuthenticationRequiredActionsAliasResponse putRealmAuthenticationRequiredActionsAlias(org.openapis.openapi.models.operations.PutRealmAuthenticationRequiredActionsAliasRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmAuthenticationRequiredActionsAliasRequest.class, baseUrl, "/{realm}/authentication/required-actions/{alias}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requiredActionProviderRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmAuthenticationRequiredActionsAliasResponse res = new org.openapis.openapi.models.operations.PutRealmAuthenticationRequiredActionsAliasResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }
}