"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import environmentsetting as shared_environmentsetting
from ..shared import resourcefile as shared_resourcefile
from ..shared import taskconstraints as shared_taskconstraints
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobManagerTask:
    r"""Specifies details of a Job Manager task."""
    
    command_line: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commandLine'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the command line of the Job Manager task."""  
    constraints: Optional[shared_taskconstraints.TaskConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})
    r"""Constraints to apply to the Job Manager task."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the display name of the Job Manager task."""  
    environment_settings: Optional[list[shared_environmentsetting.EnvironmentSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentSettings'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of environment variable settings for the Job Manager task."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a string that uniquely identifies the Job Manager task. A GUID is recommended."""  
    kill_job_on_completion: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('killJobOnCompletion'), 'exclude': lambda f: f is None }})
    r"""Gets or sets whether completion of the Job Manager task signifies completion of the entire job."""  
    resource_files: Optional[list[shared_resourcefile.ResourceFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceFiles'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of files that Batch will download to the compute node before running the command line."""  
    run_elevated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runElevated'), 'exclude': lambda f: f is None }})
    r"""Gets or sets whether to run the Job Manager task in elevated mode. The default value is false."""  
    run_exclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runExclusive'), 'exclude': lambda f: f is None }})
    r"""Gets or sets whether the Job Manager task requires exclusive use of the compute node where it runs."""  
    