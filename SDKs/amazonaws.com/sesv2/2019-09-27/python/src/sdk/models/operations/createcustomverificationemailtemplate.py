"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCustomVerificationEmailTemplateRequestBody:
    
    failure_redirection_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureRedirectionURL') }})
    r"""The URL that the recipient of the verification email is sent to if his or her address is not successfully verified."""  
    from_email_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FromEmailAddress') }})
    r"""The email address that the custom verification email is sent from."""  
    success_redirection_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuccessRedirectionURL') }})
    r"""The URL that the recipient of the verification email is sent to if his or her address is successfully verified."""  
    template_content: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateContent') }})
    r"""The content of the custom verification email template."""  
    template_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateName') }})
    r"""The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations."""  
    template_subject: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateSubject') }})
    r"""The subject line of the email."""  
    

@dataclasses.dataclass
class CreateCustomVerificationEmailTemplateRequest:
    
    request_body: CreateCustomVerificationEmailTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateCustomVerificationEmailTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AlreadyExistsException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_custom_verification_email_template_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    