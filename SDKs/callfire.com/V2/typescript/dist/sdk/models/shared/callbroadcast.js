"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallBroadcast = exports.CallBroadcastStatusEnum = exports.CallBroadcastInput = exports.CallBroadcastAnsweringMachineConfigEnum = void 0;
var utils_1 = require("../../../internal/utils");
var callbroadcastsounds_1 = require("./callbroadcastsounds");
var localtimerestriction_1 = require("./localtimerestriction");
var recipient_1 = require("./recipient");
var retryconfig_1 = require("./retryconfig");
var schedule_1 = require("./schedule");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies which action should be taken if answering machine was detected, default value: AM_AND_LIVE. Available values: AM_ONLY - run AMD (Answering Machine Detection), hang up if LA (Live Answer); AM_AND_LIVE - run AMD, play separate live vs. machine sound; LIVE_WITH_AMD, run AMD, hang up if machine answers; LIVE_IMMEDIATE - no AMD, play live sound immediately
 */
var CallBroadcastAnsweringMachineConfigEnum;
(function (CallBroadcastAnsweringMachineConfigEnum) {
    CallBroadcastAnsweringMachineConfigEnum["AmOnly"] = "AM_ONLY";
    CallBroadcastAnsweringMachineConfigEnum["AmAndLive"] = "AM_AND_LIVE";
    CallBroadcastAnsweringMachineConfigEnum["LiveWithAmd"] = "LIVE_WITH_AMD";
    CallBroadcastAnsweringMachineConfigEnum["LiveImmediate"] = "LIVE_IMMEDIATE";
})(CallBroadcastAnsweringMachineConfigEnum = exports.CallBroadcastAnsweringMachineConfigEnum || (exports.CallBroadcastAnsweringMachineConfigEnum = {}));
/**
 * Call broadcast can be used to send out a voice message to a group of numbers. It supports IVR scripting, scheduling, retry logic, playing pre-recorded sounds, answering machine detection
 */
var CallBroadcastInput = /** @class */ (function (_super) {
    __extends(CallBroadcastInput, _super);
    function CallBroadcastInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "answeringMachineConfig" }),
        __metadata("design:type", String)
    ], CallBroadcastInput.prototype, "answeringMachineConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dialplanXml" }),
        __metadata("design:type", String)
    ], CallBroadcastInput.prototype, "dialplanXml", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromNumber" }),
        __metadata("design:type", String)
    ], CallBroadcastInput.prototype, "fromNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], CallBroadcastInput.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Array)
    ], CallBroadcastInput.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localTimeRestriction" }),
        (0, class_transformer_1.Type)(function () { return localtimerestriction_1.LocalTimeRestriction; }),
        __metadata("design:type", localtimerestriction_1.LocalTimeRestriction)
    ], CallBroadcastInput.prototype, "localTimeRestriction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxActive" }),
        __metadata("design:type", Number)
    ], CallBroadcastInput.prototype, "maxActive", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxActiveTransfers" }),
        __metadata("design:type", Number)
    ], CallBroadcastInput.prototype, "maxActiveTransfers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CallBroadcastInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: recipient_1.Recipient }),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return recipient_1.Recipient; }),
        __metadata("design:type", Array)
    ], CallBroadcastInput.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "resumeNextDay" }),
        __metadata("design:type", Boolean)
    ], CallBroadcastInput.prototype, "resumeNextDay", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retryConfig" }),
        (0, class_transformer_1.Type)(function () { return retryconfig_1.RetryConfig; }),
        __metadata("design:type", retryconfig_1.RetryConfig)
    ], CallBroadcastInput.prototype, "retryConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: schedule_1.Schedule }),
        (0, class_transformer_1.Expose)({ name: "schedules" }),
        (0, class_transformer_1.Type)(function () { return schedule_1.Schedule; }),
        __metadata("design:type", Array)
    ], CallBroadcastInput.prototype, "schedules", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sounds" }),
        (0, class_transformer_1.Type)(function () { return callbroadcastsounds_1.CallBroadcastSounds; }),
        __metadata("design:type", callbroadcastsounds_1.CallBroadcastSounds)
    ], CallBroadcastInput.prototype, "sounds", void 0);
    return CallBroadcastInput;
}(utils_1.SpeakeasyBase));
exports.CallBroadcastInput = CallBroadcastInput;
/**
 * A status of a broadcast (read only). SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
 */
var CallBroadcastStatusEnum;
(function (CallBroadcastStatusEnum) {
    CallBroadcastStatusEnum["Test"] = "TEST";
    CallBroadcastStatusEnum["Setup"] = "SETUP";
    CallBroadcastStatusEnum["StartPending"] = "START_PENDING";
    CallBroadcastStatusEnum["Running"] = "RUNNING";
    CallBroadcastStatusEnum["Scheduled"] = "SCHEDULED";
    CallBroadcastStatusEnum["Stopped"] = "STOPPED";
    CallBroadcastStatusEnum["Suspended"] = "SUSPENDED";
    CallBroadcastStatusEnum["Finished"] = "FINISHED";
    CallBroadcastStatusEnum["Archived"] = "ARCHIVED";
    CallBroadcastStatusEnum["ValidatingStart"] = "VALIDATING_START";
    CallBroadcastStatusEnum["ValidatingEmail"] = "VALIDATING_EMAIL";
    CallBroadcastStatusEnum["BlockedSuspicious"] = "BLOCKED_SUSPICIOUS";
    CallBroadcastStatusEnum["Declined"] = "DECLINED";
    CallBroadcastStatusEnum["Approved"] = "APPROVED";
})(CallBroadcastStatusEnum = exports.CallBroadcastStatusEnum || (exports.CallBroadcastStatusEnum = {}));
/**
 * Call broadcast can be used to send out a voice message to a group of numbers. It supports IVR scripting, scheduling, retry logic, playing pre-recorded sounds, answering machine detection
 */
var CallBroadcast = /** @class */ (function (_super) {
    __extends(CallBroadcast, _super);
    function CallBroadcast() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "answeringMachineConfig" }),
        __metadata("design:type", String)
    ], CallBroadcast.prototype, "answeringMachineConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dialplanXml" }),
        __metadata("design:type", String)
    ], CallBroadcast.prototype, "dialplanXml", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromNumber" }),
        __metadata("design:type", String)
    ], CallBroadcast.prototype, "fromNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], CallBroadcast.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Array)
    ], CallBroadcast.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastModified" }),
        __metadata("design:type", Number)
    ], CallBroadcast.prototype, "lastModified", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localTimeRestriction" }),
        (0, class_transformer_1.Type)(function () { return localtimerestriction_1.LocalTimeRestriction; }),
        __metadata("design:type", localtimerestriction_1.LocalTimeRestriction)
    ], CallBroadcast.prototype, "localTimeRestriction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxActive" }),
        __metadata("design:type", Number)
    ], CallBroadcast.prototype, "maxActive", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxActiveTransfers" }),
        __metadata("design:type", Number)
    ], CallBroadcast.prototype, "maxActiveTransfers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CallBroadcast.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: recipient_1.Recipient }),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return recipient_1.Recipient; }),
        __metadata("design:type", Array)
    ], CallBroadcast.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "resumeNextDay" }),
        __metadata("design:type", Boolean)
    ], CallBroadcast.prototype, "resumeNextDay", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retryConfig" }),
        (0, class_transformer_1.Type)(function () { return retryconfig_1.RetryConfig; }),
        __metadata("design:type", retryconfig_1.RetryConfig)
    ], CallBroadcast.prototype, "retryConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: schedule_1.Schedule }),
        (0, class_transformer_1.Expose)({ name: "schedules" }),
        (0, class_transformer_1.Type)(function () { return schedule_1.Schedule; }),
        __metadata("design:type", Array)
    ], CallBroadcast.prototype, "schedules", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sounds" }),
        (0, class_transformer_1.Type)(function () { return callbroadcastsounds_1.CallBroadcastSounds; }),
        __metadata("design:type", callbroadcastsounds_1.CallBroadcastSounds)
    ], CallBroadcast.prototype, "sounds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], CallBroadcast.prototype, "status", void 0);
    return CallBroadcast;
}(utils_1.SpeakeasyBase));
exports.CallBroadcast = CallBroadcast;
