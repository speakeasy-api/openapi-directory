"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FinalReportLinksMessagesChannelEnum(str, Enum):
    MESSENGER = 'messenger'
    VIBER_SEVICE_MSG = 'viber_sevice_msg'
    SMS = 'sms'
    WHATSAPP = 'whatsapp'
    MMS = 'mms'

class FinalReportLinksMessagesStatusEnum(str, Enum):
    SUBMITTED = 'submitted'
    DELIVERED = 'delivered'
    READ = 'read'
    REJECTED = 'rejected'
    UNDELIVERABLE = 'undeliverable'

class FinalReportLinksMessagesUsageCurrencyEnum(str, Enum):
    r"""The charge currency in ISO 4217 format."""
    EUR = 'EUR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FinalReportLinksMessagesUsage:
    
    currency: Optional[FinalReportLinksMessagesUsageCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The charge currency in ISO 4217 format."""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The charge amount as a stringified number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FinalReportLinksMessages:
    
    channel: Optional[FinalReportLinksMessagesChannelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})  
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""Please note GET is not currently supported"""  
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})  
    status: Optional[FinalReportLinksMessagesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    usage: Optional[FinalReportLinksMessagesUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FinalReportLinks:
    
    messages: Optional[list[FinalReportLinksMessages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})  
    
class FinalReportStatusEnum(str, Enum):
    COMPLETED = 'completed'
    ERROR = 'error'

class FinalReportTemplateEnum(str, Enum):
    FAILOVER = 'failover'

class FinalReportUsageCurrencyEnum(str, Enum):
    r"""The charge currency in ISO 4217 format."""
    EUR = 'EUR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FinalReportUsage:
    r"""This is the total cost of your Workflow request. Please note if a preceding message in the workflow request is delivered after the final message in the workflow is delivered it may not reflect the true total cost of the workflow."""
    
    currency: Optional[FinalReportUsageCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The charge currency in ISO 4217 format."""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The charge amount as a stringified number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FinalReport:
    
    links: Optional[FinalReportLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    dispatch_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispatch_uuid'), 'exclude': lambda f: f is None }})  
    status: Optional[FinalReportStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    template: Optional[FinalReportTemplateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The datetime of when the event occurred."""  
    usage: Optional[FinalReportUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""This is the total cost of your Workflow request. Please note if a preceding message in the workflow request is delivered after the final message in the workflow is delivered it may not reflect the true total cost of the workflow."""  
    