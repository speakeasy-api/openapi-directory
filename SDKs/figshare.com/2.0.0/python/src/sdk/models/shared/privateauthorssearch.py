"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PrivateAuthorsSearchOrderEnum(str, Enum):
    r"""The field by which to order. Default varies by endpoint/resource."""
    PUBLISHED_DATE = 'published_date'
    MODIFIED_DATE = 'modified_date'
    VIEWS = 'views'
    SHARES = 'shares'
    DOWNLOADS = 'downloads'
    CITES = 'cites'

class PrivateAuthorsSearchOrderDirectionEnum(str, Enum):
    r"""Direction of ordering"""
    ASC = 'asc'
    DESC = 'desc'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PrivateAuthorsSearch:
    r"""Search Parameters"""
    
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    r"""Return only authors in this group or subgroups of the group"""  
    institution_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('institution_id'), 'exclude': lambda f: f is None }})
    r"""Return only authors associated to this institution"""  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_active'), 'exclude': lambda f: f is None }})
    r"""Return only active authors if True"""  
    is_public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_public'), 'exclude': lambda f: f is None }})
    r"""Return only authors that have published items if True"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Number of results included on a page. Used for pagination with query"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Where to start the listing(the offset of the first result). Used for pagination with limit"""  
    orcid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orcid'), 'exclude': lambda f: f is None }})
    r"""Orcid of author"""  
    order: Optional[PrivateAuthorsSearchOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""The field by which to order. Default varies by endpoint/resource."""  
    order_direction: Optional[PrivateAuthorsSearchOrderDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_direction'), 'exclude': lambda f: f is None }})
    r"""Direction of ordering"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})
    r"""Page number. Used for pagination with page_size"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of results included on a page. Used for pagination with page"""  
    search_for: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_for'), 'exclude': lambda f: f is None }})
    r"""Search term"""  
    