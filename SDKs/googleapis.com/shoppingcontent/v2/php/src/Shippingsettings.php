<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Shippingsettings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves and updates the shipping settings of multiple accounts in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchResponse
     */
	public function contentShippingsettingsCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/shippingsettings/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shippingsettingsCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingsettingsCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingsettingsCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the shipping settings of the account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetResponse
     */
	public function contentShippingsettingsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/shippingsettings/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves supported carriers and carrier services for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersResponse
     */
	public function contentShippingsettingsGetsupportedcarriers(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/supportedCarriers', \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedcarriersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingsettingsGetSupportedCarriersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingsettingsGetSupportedCarriersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves supported holidays for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysResponse
     */
	public function contentShippingsettingsGetsupportedholidays(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/supportedHolidays', \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedholidaysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingsettingsGetSupportedHolidaysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingsettingsGetSupportedHolidaysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves supported pickup services for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesResponse
     */
	public function contentShippingsettingsGetsupportedpickupservices(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/supportedPickupServices', \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsGetsupportedpickupservicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingsettingsGetSupportedPickupServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingsettingsGetSupportedPickupServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the shipping settings of the sub-accounts in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListResponse
     */
	public function contentShippingsettingsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/shippingsettings', \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingsettingsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingsettingsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateResponse
     */
	public function contentShippingsettingsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/shippingsettings/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shippingSettings", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentShippingsettingsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shippingSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShippingSettings', 'json');
            }
        }

        return $response;
    }
}