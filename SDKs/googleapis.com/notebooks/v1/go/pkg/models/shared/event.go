// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EventTypeEnum - Event type.
type EventTypeEnum string

const (
	EventTypeEnumEventTypeUnspecified EventTypeEnum = "EVENT_TYPE_UNSPECIFIED"
	EventTypeEnumIdle                 EventTypeEnum = "IDLE"
	EventTypeEnumHeartbeat            EventTypeEnum = "HEARTBEAT"
	EventTypeEnumHealth               EventTypeEnum = "HEALTH"
	EventTypeEnumMaintenance          EventTypeEnum = "MAINTENANCE"
)

func (e EventTypeEnum) ToPointer() *EventTypeEnum {
	return &e
}

func (e *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "IDLE":
		fallthrough
	case "HEARTBEAT":
		fallthrough
	case "HEALTH":
		fallthrough
	case "MAINTENANCE":
		*e = EventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTypeEnum: %v", v)
	}
}

// Event - The definition of an Event for a managed / semi-managed notebook instance.
type Event struct {
	// Optional. Event details. This field is used to pass event information.
	Details map[string]string `json:"details,omitempty"`
	// Event report time.
	ReportTime *string `json:"reportTime,omitempty"`
	// Event type.
	Type *EventTypeEnum `json:"type,omitempty"`
}
