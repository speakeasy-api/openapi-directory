// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum - The state of the association.
type DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum string

const (
	DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnumAssociating    DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum = "associating"
	DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnumAssociated     DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum = "associated"
	DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnumDisassociating DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum = "disassociating"
	DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnumDisassociated  DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum = "disassociated"
	DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnumFailed         DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum = "failed"
)

func (e *DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failed":
		*e = DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum: %s", s)
	}
}

// DescribeRouteTablesResultRouteTablesAssociationsAssociationState - The state of the association.
type DescribeRouteTablesResultRouteTablesAssociationsAssociationState struct {
	State         *DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum
	StatusMessage *string
}

// DescribeRouteTablesResultRouteTablesAssociations - Describes an association between a route table and a subnet or gateway.
type DescribeRouteTablesResultRouteTablesAssociations struct {
	AssociationState        *DescribeRouteTablesResultRouteTablesAssociationsAssociationState
	GatewayID               *string
	Main                    *bool
	RouteTableAssociationID *string
	RouteTableID            *string
	SubnetID                *string
}

// DescribeRouteTablesResultRouteTablesPropagatingVgws - Describes a virtual private gateway propagating route.
type DescribeRouteTablesResultRouteTablesPropagatingVgws struct {
	GatewayID *string
}

// DescribeRouteTablesResultRouteTablesRoutesOriginEnum - <p>Describes how the route was created.</p> <ul> <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li> <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li> <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li> </ul>
type DescribeRouteTablesResultRouteTablesRoutesOriginEnum string

const (
	DescribeRouteTablesResultRouteTablesRoutesOriginEnumCreateRouteTable          DescribeRouteTablesResultRouteTablesRoutesOriginEnum = "CreateRouteTable"
	DescribeRouteTablesResultRouteTablesRoutesOriginEnumCreateRoute               DescribeRouteTablesResultRouteTablesRoutesOriginEnum = "CreateRoute"
	DescribeRouteTablesResultRouteTablesRoutesOriginEnumEnableVgwRoutePropagation DescribeRouteTablesResultRouteTablesRoutesOriginEnum = "EnableVgwRoutePropagation"
)

func (e *DescribeRouteTablesResultRouteTablesRoutesOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateRouteTable":
		fallthrough
	case "CreateRoute":
		fallthrough
	case "EnableVgwRoutePropagation":
		*e = DescribeRouteTablesResultRouteTablesRoutesOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeRouteTablesResultRouteTablesRoutesOriginEnum: %s", s)
	}
}

// DescribeRouteTablesResultRouteTablesRoutesStateEnum - The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
type DescribeRouteTablesResultRouteTablesRoutesStateEnum string

const (
	DescribeRouteTablesResultRouteTablesRoutesStateEnumActive    DescribeRouteTablesResultRouteTablesRoutesStateEnum = "active"
	DescribeRouteTablesResultRouteTablesRoutesStateEnumBlackhole DescribeRouteTablesResultRouteTablesRoutesStateEnum = "blackhole"
)

func (e *DescribeRouteTablesResultRouteTablesRoutesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "blackhole":
		*e = DescribeRouteTablesResultRouteTablesRoutesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeRouteTablesResultRouteTablesRoutesStateEnum: %s", s)
	}
}

// DescribeRouteTablesResultRouteTablesRoutes - Describes a route in a route table.
type DescribeRouteTablesResultRouteTablesRoutes struct {
	CarrierGatewayID            *string
	CoreNetworkArn              *string
	DestinationCidrBlock        *string
	DestinationIpv6CidrBlock    *string
	DestinationPrefixListID     *string
	EgressOnlyInternetGatewayID *string
	GatewayID                   *string
	InstanceID                  *string
	InstanceOwnerID             *string
	LocalGatewayID              *string
	NatGatewayID                *string
	NetworkInterfaceID          *string
	Origin                      *DescribeRouteTablesResultRouteTablesRoutesOriginEnum
	State                       *DescribeRouteTablesResultRouteTablesRoutesStateEnum
	TransitGatewayID            *string
	VpcPeeringConnectionID      *string
}

// DescribeRouteTablesResultRouteTablesTags - Describes a tag.
type DescribeRouteTablesResultRouteTablesTags struct {
	Key   *string
	Value *string
}

// DescribeRouteTablesResultRouteTables - Describes a route table.
type DescribeRouteTablesResultRouteTables struct {
	Associations    []DescribeRouteTablesResultRouteTablesAssociations
	OwnerID         *string
	PropagatingVgws []DescribeRouteTablesResultRouteTablesPropagatingVgws
	RouteTableID    *string
	Routes          []DescribeRouteTablesResultRouteTablesRoutes
	Tags            []DescribeRouteTablesResultRouteTablesTags
	VpcID           *string
}

// DescribeRouteTablesResult - Contains the output of DescribeRouteTables.
type DescribeRouteTablesResult struct {
	NextToken   *string
	RouteTables []DescribeRouteTablesResultRouteTables
}
