/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class OrderLineItem {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAllocations")
    public OrderDiscountAllocation[] discountAllocations;

    public OrderLineItem withDiscountAllocations(OrderDiscountAllocation[] discountAllocations) {
        this.discountAllocations = discountAllocations;
        return this;
    }
    
    /**
     * A unique, persistent identifier for this record
     */
    @JsonProperty("id")
    public String id;

    public OrderLineItem withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Reference that links the line item to the correct product details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productRef")
    public ProductRef productRef;

    public OrderLineItem withProductRef(ProductRef productRef) {
        this.productRef = productRef;
        return this;
    }
    
    /**
     * Reference that links the line item to the specific version of product that has been ordered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productVariantRef")
    public ProductVariantRef productVariantRef;

    public OrderLineItem withProductVariantRef(ProductVariantRef productVariantRef) {
        this.productVariantRef = productVariantRef;
        return this;
    }
    
    /**
     * Number of units of the product sold.
     * For refunds, quantity is a negative value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Double quantity;

    public OrderLineItem withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Percentage rate (from 0 to 100) of any sale tax applied to the unit amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxPercentage")
    public Double taxPercentage;

    public OrderLineItem withTaxPercentage(Double taxPercentage) {
        this.taxPercentage = taxPercentage;
        return this;
    }
    
    /**
     * Taxes breakdown as applied to order lines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    public TaxComponentAllocation[] taxes;

    public OrderLineItem withTaxes(TaxComponentAllocation[] taxes) {
        this.taxes = taxes;
        return this;
    }
    
    /**
     * Total price of the line item, including discounts, tax and minus any refunds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    public Double totalAmount;

    public OrderLineItem withTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Total amount of tax applied to the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxAmount")
    public Double totalTaxAmount;

    public OrderLineItem withTotalTaxAmount(Double totalTaxAmount) {
        this.totalTaxAmount = totalTaxAmount;
        return this;
    }
    
    /**
     * Price per unit of goods or service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    public Double unitPrice;

    public OrderLineItem withUnitPrice(Double unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }
    
    public OrderLineItem(@JsonProperty("id") String id) {
        this.id = id;
  }
}
