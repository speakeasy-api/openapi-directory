"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import availabilitydayviewmodel as shared_availabilitydayviewmodel
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetConsumerV1AvailabilityServiceIDStartDateEndDateDaysRequest:
    
    end_date: datetime = dataclasses.field(metadata={'path_param': { 'field_name': 'endDate', 'style': 'simple', 'explode': False }})
    r"""Format YYYY-MM-DD: End Date for availability search"""  
    service_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serviceId', 'style': 'simple', 'explode': False }})
    r"""Service Id for day availability search"""  
    start_date: datetime = dataclasses.field(metadata={'path_param': { 'field_name': 'startDate', 'style': 'simple', 'explode': False }})
    r"""Format YYYY-MM-DD: Start Date for availability search"""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locationId', 'style': 'form', 'explode': True }})
    r"""Id of business location, defaults to primary business location"""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceId', 'style': 'form', 'explode': True }})
    r"""Resource Id to filter on"""  
    tz_offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tzOffset', 'style': 'form', 'explode': True }})
    r"""Timezone offset to view availability for"""  
    

@dataclasses.dataclass
class GetConsumerV1AvailabilityServiceIDStartDateEndDateDaysResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    availability_day_view_model: Optional[shared_availabilitydayviewmodel.AvailabilityDayViewModel] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    