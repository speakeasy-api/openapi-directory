<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Orders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve all Orders.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersJsonResponse
     */
	public function getOrdersJson(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orders = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Order>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve orders filtered by Order Id.
     * 
     * For example the GET /orders/after/5000 will return Order 5001, 5002, 5003, etc.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonResponse
     */
	public function getOrdersAfterIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/after/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersAfterIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->order = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Order', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count all Orders.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersCountJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersCountJsonResponse
     */
	public function getOrdersCountJson(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersCountJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersCountJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/count.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersCountJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersCountJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->count = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Count', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve orders filtered by status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonResponse
     */
	public function getOrdersStatusStatusJson(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/status/{status}.json', \OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersStatusStatusJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orders = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Order>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statusInvalid = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StatusInvalid', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single Order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonResponse
     */
	public function getOrdersIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->order = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Order', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all Order History.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonResponse
     */
	public function getOrdersIdHistoryJson(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/{id}/history.json', \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersIdHistoryJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderHistories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OrderHistory>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Order.
     * 
     * Orders created externally keep the given order product's values (bypassing internal promotion or product amounts).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOrdersJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOrdersJsonResponse
     */
	public function postOrdersJson(
        \OpenAPI\OpenAPI\Models\Operations\PostOrdersJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOrdersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOrdersJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOrdersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->order = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Order', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Order History Entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonResponse
     */
	public function postOrdersIdHistoryJson(
        \OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/{id}/history.json', \OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderHistoryEdit", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOrdersIdHistoryJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderHistory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrderHistory', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify an existing Order.
     * 
     * Only `status`, `shipment_status`, `tracking_number`, `tracking_company`, `tracking_url`, `additional_information` and `additional_fields` are available for update. An email is send if `shipment_status` changes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonResponse
     */
	public function putOrdersIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/{id}.json', \OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderEdit", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutOrdersIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->order = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Order', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
}