/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Conversions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Conversions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Retrieve a count of conversions
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsCountResponse conversionsCount(org.openapis.openapi.models.operations.ConversionsCountRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/conversions/count");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsCountQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsCountResponse res = new org.openapis.openapi.models.operations.ConversionsCountResponse() {{
            apiCoreResponsesCountResponce = null;
            apiCoreResponsesCountResponce = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce.class);
                res.apiCoreResponsesCountResponce = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce.class);
                res.apiCoreResponsesCountResponce = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Delete conversion specified by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsDeleteResponse conversionsDelete(org.openapis.openapi.models.operations.ConversionsDeleteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsDeletePathParams.class, baseUrl, "/conversions/{conversionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsDeleteResponse res = new org.openapis.openapi.models.operations.ConversionsDeleteResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve a list of conversions
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetResponse conversionsGet(org.openapis.openapi.models.operations.ConversionsGetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/conversions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetResponse res = new org.openapis.openapi.models.operations.ConversionsGetResponse() {{
            apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve a list of datapoints connected to this conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetDatapointsResponse conversionsGetDatapoints(org.openapis.openapi.models.operations.ConversionsGetDatapointsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsGetDatapointsPathParams.class, baseUrl, "/conversions/{conversionId}/datapoints", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetDatapointsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetDatapointsResponse res = new org.openapis.openapi.models.operations.ConversionsGetDatapointsResponse() {{
            apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve a count of datapoints connected to this conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetDatapointsCountResponse conversionsGetDatapointsCount(org.openapis.openapi.models.operations.ConversionsGetDatapointsCountRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsGetDatapointsCountPathParams.class, baseUrl, "/conversions/{conversionId}/datapoints/count", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetDatapointsCountQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetDatapointsCountResponse res = new org.openapis.openapi.models.operations.ConversionsGetDatapointsCountResponse() {{
            apiCoreResponsesCountResponce = null;
            apiCoreResponsesCountResponce = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce.class);
                res.apiCoreResponsesCountResponce = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesCountResponce.class);
                res.apiCoreResponsesCountResponce = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve the list of events related to this conversion.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetHitsResponse conversionsGetHits(org.openapis.openapi.models.operations.ConversionsGetHitsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsGetHitsPathParams.class, baseUrl, "/conversions/{conversionId}/hits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetHitsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetHitsResponse res = new org.openapis.openapi.models.operations.ConversionsGetHitsResponse() {{
            apiCoreDtoClickStreamHitListPage = null;
            apiCoreDtoClickStreamHitListPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreDtoClickStreamHitListPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreDtoClickStreamHitListPage.class);
                res.apiCoreDtoClickStreamHitListPage = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreDtoClickStreamHitListPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreDtoClickStreamHitListPage.class);
                res.apiCoreDtoClickStreamHitListPage = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetStatisticsAllListResponse conversionsGetStatisticsAllList(org.openapis.openapi.models.operations.ConversionsGetStatisticsAllListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/conversions/aggregated/list");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetStatisticsAllListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetStatisticsAllListResponse res = new org.openapis.openapi.models.operations.ConversionsGetStatisticsAllListResponse() {{
            apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = null;
            apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult.class);
                res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult.class);
                res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetStatisticsListResponse conversionsGetStatisticsList(org.openapis.openapi.models.operations.ConversionsGetStatisticsListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsGetStatisticsListPathParams.class, baseUrl, "/conversions/{conversionId}/aggregated/list", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetStatisticsListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetStatisticsListResponse res = new org.openapis.openapi.models.operations.ConversionsGetStatisticsListResponse() {{
            apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = null;
            apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult.class);
                res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult.class);
                res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve statistics about this conversion for a timeframe
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsGetStatisticsSingleResponse conversionsGetStatisticsSingle(org.openapis.openapi.models.operations.ConversionsGetStatisticsSingleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsGetStatisticsSinglePathParams.class, baseUrl, "/conversions/{conversionId}/aggregated", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ConversionsGetStatisticsSingleQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsGetStatisticsSingleResponse res = new org.openapis.openapi.models.operations.ConversionsGetStatisticsSingleResponse() {{
            apiCoreDtoAggregatedAggregatedResult = null;
            apiCoreDtoAggregatedAggregatedResult = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreDtoAggregatedAggregatedResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreDtoAggregatedAggregatedResult.class);
                res.apiCoreDtoAggregatedAggregatedResult = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreDtoAggregatedAggregatedResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreDtoAggregatedAggregatedResult.class);
                res.apiCoreDtoAggregatedAggregatedResult = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Fast patch the "notes" field of a conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPatchNotesFormResponse conversionsPatchNotesForm(org.openapis.openapi.models.operations.ConversionsPatchNotesFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPatchNotesFormPathParams.class, baseUrl, "/conversions/{conversionId}/notes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPatchNotesFormResponse res = new org.openapis.openapi.models.operations.ConversionsPatchNotesFormResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Fast patch the "notes" field of a conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPatchNotesJsonResponse conversionsPatchNotesJson(org.openapis.openapi.models.operations.ConversionsPatchNotesJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPatchNotesJsonPathParams.class, baseUrl, "/conversions/{conversionId}/notes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPatchNotesJsonResponse res = new org.openapis.openapi.models.operations.ConversionsPatchNotesJsonResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Fast patch the "notes" field of a conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPatchNotesRawResponse conversionsPatchNotesRaw(org.openapis.openapi.models.operations.ConversionsPatchNotesRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPatchNotesRawPathParams.class, baseUrl, "/conversions/{conversionId}/notes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPatchNotesRawResponse res = new org.openapis.openapi.models.operations.ConversionsPatchNotesRawResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Modify the association between a conversion and a datapoint
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPatchFormResponse conversionsPatchForm(org.openapis.openapi.models.operations.ConversionsPatchFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPatchFormPathParams.class, baseUrl, "/conversions/{conversionId}/datapoints/patch", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPatchFormResponse res = new org.openapis.openapi.models.operations.ConversionsPatchFormResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Modify the association between a conversion and a datapoint
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPatchJsonResponse conversionsPatchJson(org.openapis.openapi.models.operations.ConversionsPatchJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPatchJsonPathParams.class, baseUrl, "/conversions/{conversionId}/datapoints/patch", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPatchJsonResponse res = new org.openapis.openapi.models.operations.ConversionsPatchJsonResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Modify the association between a conversion and a datapoint
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPatchRawResponse conversionsPatchRaw(org.openapis.openapi.models.operations.ConversionsPatchRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPatchRawPathParams.class, baseUrl, "/conversions/{conversionId}/datapoints/patch", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPatchRawResponse res = new org.openapis.openapi.models.operations.ConversionsPatchRawResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Update conversion specified by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPostFormResponse conversionsPostForm(org.openapis.openapi.models.operations.ConversionsPostFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPostFormPathParams.class, baseUrl, "/conversions/{conversionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPostFormResponse res = new org.openapis.openapi.models.operations.ConversionsPostFormResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Update conversion specified by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPostJsonResponse conversionsPostJson(org.openapis.openapi.models.operations.ConversionsPostJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPostJsonPathParams.class, baseUrl, "/conversions/{conversionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPostJsonResponse res = new org.openapis.openapi.models.operations.ConversionsPostJsonResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Update conversion specified by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPostRawResponse conversionsPostRaw(org.openapis.openapi.models.operations.ConversionsPostRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ConversionsPostRawPathParams.class, baseUrl, "/conversions/{conversionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPostRawResponse res = new org.openapis.openapi.models.operations.ConversionsPostRawResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Create a conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPutFormResponse conversionsPutForm(org.openapis.openapi.models.operations.ConversionsPutFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/conversions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPutFormResponse res = new org.openapis.openapi.models.operations.ConversionsPutFormResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Create a conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPutJsonResponse conversionsPutJson(org.openapis.openapi.models.operations.ConversionsPutJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/conversions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPutJsonResponse res = new org.openapis.openapi.models.operations.ConversionsPutJsonResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Create a conversion
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ConversionsPutRawResponse conversionsPutRaw(org.openapis.openapi.models.operations.ConversionsPutRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/conversions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ConversionsPutRawResponse res = new org.openapis.openapi.models.operations.ConversionsPutRawResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Retrieve conversion specified by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetConversionsConversionIdResponse getConversionsConversionId(org.openapis.openapi.models.operations.GetConversionsConversionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetConversionsConversionIdPathParams.class, baseUrl, "/conversions/{conversionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetConversionsConversionIdResponse res = new org.openapis.openapi.models.operations.GetConversionsConversionIdResponse() {{
            apiCoreDtoConversionsConversion = null;
            apiCoreDtoConversionsConversion = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreDtoConversionsConversion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreDtoConversionsConversion.class);
                res.apiCoreDtoConversionsConversion = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreDtoConversionsConversion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreDtoConversionsConversion.class);
                res.apiCoreDtoConversionsConversion = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Modify the association between a conversion and multiple datapoints
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutConversionsConversionIdDatapointsBatchPatchResponse putConversionsConversionIdDatapointsBatchPatch(org.openapis.openapi.models.operations.PutConversionsConversionIdDatapointsBatchPatchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutConversionsConversionIdDatapointsBatchPatchPathParams.class, baseUrl, "/conversions/{conversionId}/datapoints/batch/patch", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutConversionsConversionIdDatapointsBatchPatchResponse res = new org.openapis.openapi.models.operations.PutConversionsConversionIdDatapointsBatchPatchResponse() {{
            apiCoreResponsesEntityUriSystemInt64 = null;
            apiCoreResponsesEntityUriSystemInt64 = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiCoreResponsesEntityUriSystemInt64.class);
                res.apiCoreResponsesEntityUriSystemInt64 = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
        }

        return res;
    }
}