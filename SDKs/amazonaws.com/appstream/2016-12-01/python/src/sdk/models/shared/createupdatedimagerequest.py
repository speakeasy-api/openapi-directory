"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatedImageRequest:
    
    existing_image_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existingImageName') }})  
    new_image_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newImageName') }})  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dryRun'), 'exclude': lambda f: f is None }})  
    new_image_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newImageDescription'), 'exclude': lambda f: f is None }})  
    new_image_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newImageDisplayName'), 'exclude': lambda f: f is None }})  
    new_image_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newImageTags'), 'exclude': lambda f: f is None }})  
    