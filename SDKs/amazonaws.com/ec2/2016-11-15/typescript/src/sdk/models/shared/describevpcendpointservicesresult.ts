/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The payer responsibility.
 */
export enum DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum {
  ServiceOwner = "ServiceOwner",
}

/**
 * <p>The verification state of the VPC endpoint service.</p> <p>Consumers of the endpoint service cannot use the private name when the state is not <code>verified</code>.</p>
 */
export enum DescribeVpcEndpointServicesResultServiceDetailsPrivateDnsNameVerificationStateEnum {
  PendingVerification = "pendingVerification",
  Verified = "verified",
  Failed = "failed",
}

/**
 * Information about the Private DNS name for interface endpoints.
 */
export class DescribeVpcEndpointServicesResultServiceDetailsPrivateDnsNames extends SpeakeasyBase {
  @SpeakeasyMetadata()
  privateDnsName?: string;
}

/**
 * The type of service.
 */
export enum DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum {
  Interface = "Interface",
  Gateway = "Gateway",
  GatewayLoadBalancer = "GatewayLoadBalancer",
}

/**
 * Describes the type of service for a VPC endpoint.
 */
export class DescribeVpcEndpointServicesResultServiceDetailsServiceType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  serviceType?: DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum;
}

export enum DescribeVpcEndpointServicesResultServiceDetailsSupportedIpAddressTypesEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * Describes a tag.
 */
export class DescribeVpcEndpointServicesResultServiceDetailsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a VPC endpoint service.
 */
export class DescribeVpcEndpointServicesResultServiceDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  acceptanceRequired?: boolean;

  @SpeakeasyMetadata()
  availabilityZones?: string[];

  @SpeakeasyMetadata()
  baseEndpointDnsNames?: string[];

  @SpeakeasyMetadata()
  managesVpcEndpoints?: boolean;

  @SpeakeasyMetadata()
  owner?: string;

  @SpeakeasyMetadata()
  payerResponsibility?: DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum;

  @SpeakeasyMetadata()
  privateDnsName?: string;

  @SpeakeasyMetadata()
  privateDnsNameVerificationState?: DescribeVpcEndpointServicesResultServiceDetailsPrivateDnsNameVerificationStateEnum;

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointServicesResultServiceDetailsPrivateDnsNames,
  })
  privateDnsNames?: DescribeVpcEndpointServicesResultServiceDetailsPrivateDnsNames[];

  @SpeakeasyMetadata()
  serviceId?: string;

  @SpeakeasyMetadata()
  serviceName?: string;

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointServicesResultServiceDetailsServiceType,
  })
  serviceType?: DescribeVpcEndpointServicesResultServiceDetailsServiceType[];

  @SpeakeasyMetadata()
  supportedIpAddressTypes?: DescribeVpcEndpointServicesResultServiceDetailsSupportedIpAddressTypesEnum[];

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointServicesResultServiceDetailsTags,
  })
  tags?: DescribeVpcEndpointServicesResultServiceDetailsTags[];

  @SpeakeasyMetadata()
  vpcEndpointPolicySupported?: boolean;
}

/**
 * Success
 */
export class DescribeVpcEndpointServicesResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointServicesResultServiceDetails,
  })
  serviceDetails?: DescribeVpcEndpointServicesResultServiceDetails[];

  @SpeakeasyMetadata()
  serviceNames?: string[];
}
