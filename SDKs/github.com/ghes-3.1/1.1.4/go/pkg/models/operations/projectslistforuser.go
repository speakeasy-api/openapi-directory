// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ProjectsListForUserStateEnum - Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
type ProjectsListForUserStateEnum string

const (
	ProjectsListForUserStateEnumOpen   ProjectsListForUserStateEnum = "open"
	ProjectsListForUserStateEnumClosed ProjectsListForUserStateEnum = "closed"
	ProjectsListForUserStateEnumAll    ProjectsListForUserStateEnum = "all"
)

func (e ProjectsListForUserStateEnum) ToPointer() *ProjectsListForUserStateEnum {
	return &e
}

func (e *ProjectsListForUserStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "all":
		*e = ProjectsListForUserStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectsListForUserStateEnum: %v", v)
	}
}

type ProjectsListForUserRequest struct {
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State *ProjectsListForUserStateEnum `queryParam:"style=form,explode=true,name=state"`
	// The handle for the GitHub user account.
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type ProjectsListForUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Projects []shared.Project
	// Validation failed
	ValidationError *shared.ValidationError
}
