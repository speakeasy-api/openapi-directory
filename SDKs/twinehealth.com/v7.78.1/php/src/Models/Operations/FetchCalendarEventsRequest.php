<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class FetchCalendarEventsRequest
{
    /**
     * Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
     * 
     * 
     * 
     * @var ?string $filterAttendees
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[attendees]')]
    public ?string $filterAttendees = null;
    
    /**
     * If not specified, return all calendar events. If set to `true` return only events marked as completed, if set to `false`, return only events not marked as completed yet.
     * 
     * @var ?bool $filterCompleted
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[completed]')]
    public ?bool $filterCompleted = null;
    
    /**
     * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events completed in November 2017 (America/New_York): `filter[completed_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
     * 
     * 
     * 
     * @var ?string $filterCompletedAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[completed_at]')]
    public ?string $filterCompletedAt = null;
    
    /**
     * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
     * 
     * 
     * 
     * @var ?string $filterCreatedAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[created_at]')]
    public ?string $filterCreatedAt = null;
    
    /**
     * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events ending in November 2017 (America/New_York): `filter[end_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
     * 
     * 
     * 
     * @var ?string $filterEndAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[end_at]')]
    public ?string $filterEndAt = null;
    
    /**
     * Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
     * 
     * 
     * 
     * @var ?string $filterGroups
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[groups]')]
    public ?string $filterGroups = null;
    
    /**
     * Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
     * 
     * 
     * 
     * @var ?string $filterOrganization
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[organization]')]
    public ?string $filterOrganization = null;
    
    /**
     * Patient id to fetch calendar event. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
     * 
     * 
     * 
     * @var ?string $filterPatient
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[patient]')]
    public ?string $filterPatient = null;
    
    /**
     * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events starting in November 2017 (America/New_York): `filter[start_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
     * 
     * 
     * 
     * @var ?string $filterStartAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[start_at]')]
    public ?string $filterStartAt = null;
    
    /**
     * Calendar event type
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\FetchCalendarEventsFilterTypeEnum $filterType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[type]')]
    public ?FetchCalendarEventsFilterTypeEnum $filterType = null;
    
    /**
     * The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
     * 
     * 
     * 
     * @var ?string $filterUpdatedAt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filter[updated_at]')]
    public ?string $filterUpdatedAt = null;
    
    /**
     * List of related resources to include in the response
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\FetchCalendarEventsIncludeEnum $include
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include')]
    public ?FetchCalendarEventsIncludeEnum $include = null;
    
    /**
     * Page cursor
     * 
     * @var ?string $pageCursor
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page[cursor]')]
    public ?string $pageCursor = null;
    
    /**
     * Page limit
     * 
     * @var ?int $pageLimit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page[limit]')]
    public ?int $pageLimit = null;
    
    /**
     * Page number
     * 
     * @var ?int $pageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page[number]')]
    public ?int $pageNumber = null;
    
    /**
     * Page size
     * 
     * @var ?int $pageSize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page[size]')]
    public ?int $pageSize = null;
    
	public function __construct()
	{
		$this->filterAttendees = null;
		$this->filterCompleted = null;
		$this->filterCompletedAt = null;
		$this->filterCreatedAt = null;
		$this->filterEndAt = null;
		$this->filterGroups = null;
		$this->filterOrganization = null;
		$this->filterPatient = null;
		$this->filterStartAt = null;
		$this->filterType = null;
		$this->filterUpdatedAt = null;
		$this->include = null;
		$this->pageCursor = null;
		$this->pageLimit = null;
		$this->pageNumber = null;
		$this->pageSize = null;
	}
}
