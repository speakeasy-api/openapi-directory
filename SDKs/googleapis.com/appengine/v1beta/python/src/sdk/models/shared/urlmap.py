"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apiendpointhandler as shared_apiendpointhandler
from ..shared import scripthandler as shared_scripthandler
from ..shared import staticfileshandler as shared_staticfileshandler
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class URLMapAuthFailActionEnum(str, Enum):
    r"""Action to take when users access resources that require authentication. Defaults to redirect."""
    AUTH_FAIL_ACTION_UNSPECIFIED = 'AUTH_FAIL_ACTION_UNSPECIFIED'
    AUTH_FAIL_ACTION_REDIRECT = 'AUTH_FAIL_ACTION_REDIRECT'
    AUTH_FAIL_ACTION_UNAUTHORIZED = 'AUTH_FAIL_ACTION_UNAUTHORIZED'

class URLMapLoginEnum(str, Enum):
    r"""Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment."""
    LOGIN_UNSPECIFIED = 'LOGIN_UNSPECIFIED'
    LOGIN_OPTIONAL = 'LOGIN_OPTIONAL'
    LOGIN_ADMIN = 'LOGIN_ADMIN'
    LOGIN_REQUIRED = 'LOGIN_REQUIRED'

class URLMapRedirectHTTPResponseCodeEnum(str, Enum):
    r"""30x code to use when performing redirects for the secure field. Defaults to 302."""
    REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED = 'REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED'
    REDIRECT_HTTP_RESPONSE_CODE_301 = 'REDIRECT_HTTP_RESPONSE_CODE_301'
    REDIRECT_HTTP_RESPONSE_CODE_302 = 'REDIRECT_HTTP_RESPONSE_CODE_302'
    REDIRECT_HTTP_RESPONSE_CODE_303 = 'REDIRECT_HTTP_RESPONSE_CODE_303'
    REDIRECT_HTTP_RESPONSE_CODE_307 = 'REDIRECT_HTTP_RESPONSE_CODE_307'

class URLMapSecurityLevelEnum(str, Enum):
    r"""Security (HTTPS) enforcement for this URL."""
    SECURE_UNSPECIFIED = 'SECURE_UNSPECIFIED'
    SECURE_DEFAULT = 'SECURE_DEFAULT'
    SECURE_NEVER = 'SECURE_NEVER'
    SECURE_OPTIONAL = 'SECURE_OPTIONAL'
    SECURE_ALWAYS = 'SECURE_ALWAYS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class URLMap:
    r"""URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript."""
    
    api_endpoint: Optional[shared_apiendpointhandler.APIEndpointHandler] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiEndpoint'), 'exclude': lambda f: f is None }})
    r"""Uses Google Cloud Endpoints to handle requests."""  
    auth_fail_action: Optional[URLMapAuthFailActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authFailAction'), 'exclude': lambda f: f is None }})
    r"""Action to take when users access resources that require authentication. Defaults to redirect."""  
    login: Optional[URLMapLoginEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login'), 'exclude': lambda f: f is None }})
    r"""Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment."""  
    redirect_http_response_code: Optional[URLMapRedirectHTTPResponseCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectHttpResponseCode'), 'exclude': lambda f: f is None }})
    r"""30x code to use when performing redirects for the secure field. Defaults to 302."""  
    script: Optional[shared_scripthandler.ScriptHandler] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})
    r"""Executes a script to handle the request that matches the URL pattern."""  
    security_level: Optional[URLMapSecurityLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityLevel'), 'exclude': lambda f: f is None }})
    r"""Security (HTTPS) enforcement for this URL."""  
    static_files: Optional[shared_staticfileshandler.StaticFilesHandler] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticFiles'), 'exclude': lambda f: f is None }})
    r"""Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them."""  
    url_regex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlRegex'), 'exclude': lambda f: f is None }})
    r"""URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path."""  
    