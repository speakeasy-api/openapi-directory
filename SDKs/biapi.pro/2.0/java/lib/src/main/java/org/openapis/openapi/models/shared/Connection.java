/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Connection - Successful DELETE on Connection resource
 */
public class Connection {
    /**
     * This connection is active and will be automatically synced
     */
    @JsonProperty("active")
    public Boolean active;
    public Connection withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Creation date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;
    public Connection withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * ID of connection
     */
    @JsonProperty("id")
    public Long id;
    public Connection withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the related connector
     */
    @JsonProperty("id_connector")
    public Long idConnector;
    public Connection withIdConnector(Long idConnector) {
        this.idConnector = idConnector;
        return this;
    }
    
    /**
     * ID of the related user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_user")
    public Long idUser;
    public Connection withIdUser(Long idUser) {
        this.idUser = idUser;
        return this;
    }
    
    /**
     * Last successful push
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_push")
    public OffsetDateTime lastPush;
    public Connection withLastPush(OffsetDateTime lastPush) {
        this.lastPush = lastPush;
        return this;
    }
    
    /**
     * Last successful update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_update")
    public OffsetDateTime lastUpdate;
    public Connection withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    /**
     * Date of next synchronization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("next_try")
    public OffsetDateTime nextTry;
    public Connection withNextTry(OffsetDateTime nextTry) {
        this.nextTry = nextTry;
        return this;
    }
    
}
