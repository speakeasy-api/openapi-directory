"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndividualsRoles = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * A role defines the characteristics of a relationship between parties.
 *
 * @remarks
 * An Individual can participate in a relationship with other individuals and organisations.
 *
 * For example:
 *
 * | Party         | Role           | Relationship     | Role          | Party                           |
 * | ------------- | -------------- | ---------------- | ------------- | ------------------------------- |
 * | Homer Simpson | Husband        | Marriage         | Wife          | Marge Simpson                   |
 * | Homer Simpson | Employee       | Employment       | Employer      | Springfield Nuclear Power Plant |
 * | Homer Simpson | Safety Officer | Colleague        | Supervisor    | Carl Carlson                    |
 * | Homer Simpson | Director       | Directorship     | Company       | Compu Global Hyper Mega Net     |
 * | Homer Simpson | Employee       | Employment       | Employer      | Compu Global Hyper Mega Net     |
 * | Homer Simpson | Member         | Membership       | Organisation  | The Stonecutters                |
 * | Homer Simpson | Partner        | Partnership      | Partnership   | The Be Sharps                   |
 * | Homer Simpson | Trustee        | Trusteeship      | Trust         | The Simpson Family Trust        |
 * | Homer Simpson | Member         | Membership       | Association   | Mensa International             |
 *
 * You can use the API's **metadata services** to retrieve information about the classifcation schemes and
 * values used by the Registry.
 *
 */
var IndividualsRoles = /** @class */ (function () {
    function IndividualsRoles(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Delete a role
     *
     * @remarks
     * Delete a role
     *
     */
    IndividualsRoles.prototype.deleteIndividualsPartyIdRolesRoleId = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteIndividualsPartyIdRolesRoleIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/individuals/{partyId}/roles/{roleId}", req);
        var client = this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteIndividualsPartyIdRolesRoleIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthenticated = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Unauthenticated);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFound = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFound);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of roles
     */
    IndividualsRoles.prototype.getIndividualsPartyIdRoles = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetIndividualsPartyIdRolesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/individuals/{partyId}/roles", req);
        var client = this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetIndividualsPartyIdRolesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.partyRoles = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.partyRoles = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PartyRole, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthenticated = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Unauthenticated);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFound = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFound);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a role
     *
     * @remarks
     * Retrieve a role
     *
     */
    IndividualsRoles.prototype.getIndividualsPartyIdRolesRoleId = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetIndividualsPartyIdRolesRoleIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/individuals/{partyId}/roles/{roleId}", req);
        var client = this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetIndividualsPartyIdRolesRoleIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.partyRole = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PartyRole);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthenticated = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Unauthenticated);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFound = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFound);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a role
     *
     * @remarks
     * Create a role
     *
     */
    IndividualsRoles.prototype.postIndividualsPartyIdRoles = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PostIndividualsPartyIdRolesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/individuals/{partyId}/roles", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "partyRoleInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PostIndividualsPartyIdRolesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.partyRole = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PartyRole);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArgument = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArgument);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthenticated = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Unauthenticated);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a role
     *
     * @remarks
     * Update a role
     *
     */
    IndividualsRoles.prototype.putIndividualsPartyIdRolesRoleId = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutIndividualsPartyIdRolesRoleIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/individuals/{partyId}/roles/{roleId}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "partyRoleInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PutIndividualsPartyIdRolesRoleIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.partyRole = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PartyRole);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArgument = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArgument);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unauthenticated = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Unauthenticated);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notFound = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotFound);
                    }
                    break;
            }
            return res;
        });
    };
    return IndividualsRoles;
}());
exports.IndividualsRoles = IndividualsRoles;
