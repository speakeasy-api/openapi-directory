"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNetworkApplianceVlanResponse = exports.GetNetworkApplianceVlan200ApplicationJSON = exports.GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges = exports.GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp = exports.GetNetworkApplianceVlan200ApplicationJSONIpv6 = exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments = exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin = exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpOptions = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = exports.GetNetworkApplianceVlanRequest = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var GetNetworkApplianceVlanRequest = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlanRequest, _super);
    function GetNetworkApplianceVlanRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlanRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=vlanId",
        }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlanRequest.prototype, "vlanId", void 0);
    return GetNetworkApplianceVlanRequest;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlanRequest = GetNetworkApplianceVlanRequest;
/**
 * The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
 */
var GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum;
(function (GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum) {
    GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum["DoNotRespondToDHCPRequests"] = "Do not respond to DHCP requests";
    GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum["RelayDHCPToAnotherServer"] = "Relay DHCP to another server";
    GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum["RunADHCPServer"] = "Run a DHCP server";
})(GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum || (exports.GetNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = {}));
/**
 * The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
 */
var GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum;
(function (GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum) {
    GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["OneDay"] = "1 day";
    GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["OneHour"] = "1 hour";
    GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["OneWeek"] = "1 week";
    GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["TwelveHours"] = "12 hours";
    GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["ThirtyMinutes"] = "30 minutes";
    GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum["FourHours"] = "4 hours";
})(GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum || (exports.GetNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = {}));
/**
 * The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
 */
var GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum;
(function (GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum) {
    GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Hex"] = "hex";
    GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Integer"] = "integer";
    GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Ip"] = "ip";
    GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum["Text"] = "text";
})(GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum || (exports.GetNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = {}));
var GetNetworkApplianceVlan200ApplicationJSONDhcpOptions = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSONDhcpOptions, _super);
    function GetNetworkApplianceVlan200ApplicationJSONDhcpOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONDhcpOptions.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONDhcpOptions.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONDhcpOptions.prototype, "value", void 0);
    return GetNetworkApplianceVlan200ApplicationJSONDhcpOptions;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSONDhcpOptions = GetNetworkApplianceVlan200ApplicationJSONDhcpOptions;
/**
 * Type of the origin
 */
var GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum;
(function (GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) {
    GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum["Independent"] = "independent";
    GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum["Internet"] = "internet";
})(GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum || (exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = {}));
/**
 * The origin of the prefix
 */
var GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin, _super);
    function GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interfaces" }),
        __metadata("design:type", Array)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin.prototype, "interfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin.prototype, "type", void 0);
    return GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin = GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin;
var GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments, _super);
    function GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autonomous" }),
        __metadata("design:type", Boolean)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "autonomous", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "origin" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin; }),
        __metadata("design:type", GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "origin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "staticApplianceIp6" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "staticApplianceIp6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "staticPrefix" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments.prototype, "staticPrefix", void 0);
    return GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments = GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments;
/**
 * IPv6 configuration on the VLAN
 */
var GetNetworkApplianceVlan200ApplicationJSONIpv6 = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSONIpv6, _super);
    function GetNetworkApplianceVlan200ApplicationJSONIpv6() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments,
        }),
        (0, class_transformer_1.Expose)({ name: "prefixAssignments" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments; }),
        __metadata("design:type", Array)
    ], GetNetworkApplianceVlan200ApplicationJSONIpv6.prototype, "prefixAssignments", void 0);
    return GetNetworkApplianceVlan200ApplicationJSONIpv6;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSONIpv6 = GetNetworkApplianceVlan200ApplicationJSONIpv6;
/**
 * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
 */
var GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp, _super);
    function GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp.prototype, "enabled", void 0);
    return GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp = GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp;
var GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges, _super);
    function GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges.prototype, "start", void 0);
    return GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges = GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges;
/**
 * Type of subnetting of the VLAN. Applicable only for template network.
 */
var GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum;
(function (GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum) {
    GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum["Same"] = "same";
    GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum["Unique"] = "unique";
})(GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = exports.GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum || (exports.GetNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = {}));
/**
 * Successful operation
 */
var GetNetworkApplianceVlan200ApplicationJSON = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlan200ApplicationJSON, _super);
    function GetNetworkApplianceVlan200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "applianceIp" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "applianceIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cidr" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootFilename" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpBootFilename", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootNextServer" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpBootNextServer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootOptionsEnabled" }),
        __metadata("design:type", Boolean)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpBootOptionsEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpHandling" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpHandling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpLeaseTime" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpLeaseTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetNetworkApplianceVlan200ApplicationJSONDhcpOptions,
        }),
        (0, class_transformer_1.Expose)({ name: "dhcpOptions" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceVlan200ApplicationJSONDhcpOptions; }),
        __metadata("design:type", Array)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpRelayServerIps" }),
        __metadata("design:type", Array)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dhcpRelayServerIps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsNameservers" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "dnsNameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fixedIpAssignments" }),
        __metadata("design:type", Object)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "fixedIpAssignments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "groupPolicyId" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "groupPolicyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interfaceId" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "interfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceVlan200ApplicationJSONIpv6; }),
        __metadata("design:type", GetNetworkApplianceVlan200ApplicationJSONIpv6)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "ipv6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandatoryDhcp" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp; }),
        __metadata("design:type", GetNetworkApplianceVlan200ApplicationJSONMandatoryDhcp)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "mandatoryDhcp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mask" }),
        __metadata("design:type", Number)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "mask", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges,
        }),
        (0, class_transformer_1.Expose)({ name: "reservedIpRanges" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceVlan200ApplicationJSONReservedIpRanges; }),
        __metadata("design:type", Array)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "reservedIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnet" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "subnet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "templateVlanType" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "templateVlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpnNatSubnet" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlan200ApplicationJSON.prototype, "vpnNatSubnet", void 0);
    return GetNetworkApplianceVlan200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlan200ApplicationJSON = GetNetworkApplianceVlan200ApplicationJSON;
var GetNetworkApplianceVlanResponse = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceVlanResponse, _super);
    function GetNetworkApplianceVlanResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetNetworkApplianceVlanResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetNetworkApplianceVlanResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetNetworkApplianceVlanResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", GetNetworkApplianceVlan200ApplicationJSON)
    ], GetNetworkApplianceVlanResponse.prototype, "getNetworkApplianceVlan200ApplicationJSONObject", void 0);
    return GetNetworkApplianceVlanResponse;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceVlanResponse = GetNetworkApplianceVlanResponse;
