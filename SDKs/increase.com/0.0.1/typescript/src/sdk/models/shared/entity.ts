/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The corporation's address.
 */
export class EntityCorporationAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * The person's address.
 */
export class EntityCorporationBeneficialOwnersElementIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * A means of verifying the person's identity.
 */
export class EntityCorporationBeneficialOwnersElementIndividualIdentification extends SpeakeasyBase {
  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum;

  /**
   * The last 4 digits of the identification number that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_last4" })
  numberLast4: string;
}

/**
 * Personal details for the beneficial owner.
 */
export class EntityCorporationBeneficialOwnersElementIndividual extends SpeakeasyBase {
  /**
   * The person's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityCorporationBeneficialOwnersElementIndividualAddress)
  address: EntityCorporationBeneficialOwnersElementIndividualAddress;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => EntityCorporationBeneficialOwnersElementIndividualIdentification)
  identification: EntityCorporationBeneficialOwnersElementIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Why this person is considered a beneficial owner of the entity.
 */
export enum EntityCorporationBeneficialOwnersElementProngEnum {
  Ownership = "ownership",
  Control = "control",
}

export class EntityCorporationBeneficialOwnersElement extends SpeakeasyBase {
  /**
   * This person's role or title within the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_title" })
  companyTitle: string;

  /**
   * Personal details for the beneficial owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individual" })
  @Type(() => EntityCorporationBeneficialOwnersElementIndividual)
  individual: EntityCorporationBeneficialOwnersElementIndividual;

  /**
   * Why this person is considered a beneficial owner of the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prong" })
  prong: EntityCorporationBeneficialOwnersElementProngEnum;
}

/**
 * Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
 */
export class EntityCorporation extends SpeakeasyBase {
  /**
   * The corporation's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityCorporationAddress)
  address: EntityCorporationAddress;

  /**
   * The identifying details of anyone controlling or owning 25% or more of the corporation.
   */
  @SpeakeasyMetadata({ elemType: EntityCorporationBeneficialOwnersElement })
  @Expose({ name: "beneficial_owners" })
  @Type(() => EntityCorporationBeneficialOwnersElement)
  beneficialOwners: EntityCorporationBeneficialOwnersElement[];

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incorporation_state" })
  incorporationState: string;

  /**
   * The legal name of the corporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Employer Identification Number (EIN) for the corporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_identifier" })
  taxIdentifier: string;

  /**
   * The website of the corporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "website" })
  website: string;
}

/**
 * The person's address.
 */
export class EntityJointIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum EntityJointIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * A means of verifying the person's identity.
 */
export class EntityJointIndividualIdentification extends SpeakeasyBase {
  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: EntityJointIndividualIdentificationMethodEnum;

  /**
   * The last 4 digits of the identification number that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_last4" })
  numberLast4: string;
}

export class EntityJointIndividual extends SpeakeasyBase {
  /**
   * The person's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityJointIndividualAddress)
  address: EntityJointIndividualAddress;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => EntityJointIndividualIdentification)
  identification: EntityJointIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Details of the joint entity. Will be present if `structure` is equal to `joint`.
 */
export class EntityJoint extends SpeakeasyBase {
  /**
   * The two individuals that share control of the entity.
   */
  @SpeakeasyMetadata({ elemType: EntityJointIndividual })
  @Expose({ name: "individuals" })
  @Type(() => EntityJointIndividual)
  individuals: EntityJointIndividual[];

  /**
   * The entity's name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The person's address.
 */
export class EntityIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum EntityIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * A means of verifying the person's identity.
 */
export class EntityIndividualIdentification extends SpeakeasyBase {
  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: EntityIndividualIdentificationMethodEnum;

  /**
   * The last 4 digits of the identification number that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_last4" })
  numberLast4: string;
}

/**
 * Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
 */
export class EntityIndividual extends SpeakeasyBase {
  /**
   * The person's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityIndividualAddress)
  address: EntityIndividualAddress;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => EntityIndividualIdentification)
  identification: EntityIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The relationship between your group and the entity.
 */
export enum EntityRelationshipEnum {
  Affiliated = "affiliated",
  Informational = "informational",
  Unaffiliated = "unaffiliated",
}

/**
 * The entity's legal structure.
 */
export enum EntityStructureEnum {
  Corporation = "corporation",
  NaturalPerson = "natural_person",
  Joint = "joint",
  Trust = "trust",
}

export class EntitySupplementalDocumentsElement extends SpeakeasyBase {
  /**
   * The File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * The trust's address.
 */
export class EntityTrustAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Whether the trust is `revocable` or `irrevocable`.
 */
export enum EntityTrustCategoryEnum {
  Revocable = "revocable",
  Irrevocable = "irrevocable",
}

/**
 * The person's address.
 */
export class EntityTrustIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum EntityTrustIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * A means of verifying the person's identity.
 */
export class EntityTrustIndividualIdentification extends SpeakeasyBase {
  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: EntityTrustIndividualIdentificationMethodEnum;

  /**
   * The last 4 digits of the identification number that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_last4" })
  numberLast4: string;
}

/**
 * The grantor of the trust. Will be present if the `category` is `revocable`.
 */
export class EntityTrustIndividual extends SpeakeasyBase {
  /**
   * The person's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityTrustIndividualAddress)
  address: EntityTrustIndividualAddress;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => EntityTrustIndividualIdentification)
  identification: EntityTrustIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The person's address.
 */
export class EntityTrustTrusteesElementIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum EntityTrustTrusteesElementIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * A means of verifying the person's identity.
 */
export class EntityTrustTrusteesElementIndividualIdentification extends SpeakeasyBase {
  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: EntityTrustTrusteesElementIndividualIdentificationMethodEnum;

  /**
   * The last 4 digits of the identification number that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_last4" })
  numberLast4: string;
}

/**
 * The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.
 */
export class EntityTrustTrusteesElementIndividual extends SpeakeasyBase {
  /**
   * The person's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityTrustTrusteesElementIndividualAddress)
  address: EntityTrustTrusteesElementIndividualAddress;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => EntityTrustTrusteesElementIndividualIdentification)
  identification: EntityTrustTrusteesElementIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The structure of the trustee. Will always be equal to `individual`.
 */
export enum EntityTrustTrusteesElementStructureEnum {
  Individual = "individual",
}

export class EntityTrustTrusteesElement extends SpeakeasyBase {
  /**
   * The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individual" })
  @Type(() => EntityTrustTrusteesElementIndividual)
  individual: EntityTrustTrusteesElementIndividual;

  /**
   * The structure of the trustee. Will always be equal to `individual`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "structure" })
  structure: EntityTrustTrusteesElementStructureEnum;
}

/**
 * Details of the trust entity. Will be present if `structure` is equal to `trust`.
 */
export class EntityTrust extends SpeakeasyBase {
  /**
   * The trust's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => EntityTrustAddress)
  address: EntityTrustAddress;

  /**
   * Whether the trust is `revocable` or `irrevocable`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: EntityTrustCategoryEnum;

  /**
   * The ID for the File containing the formation document of the trust.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formation_document_file_id" })
  formationDocumentFileId: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formation_state" })
  formationState: string;

  /**
   * The grantor of the trust. Will be present if the `category` is `revocable`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "grantor" })
  @Type(() => EntityTrustIndividual)
  grantor: EntityTrustIndividual;

  /**
   * The trust's name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Employer Identification Number (EIN) of the trust itself.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_identifier" })
  taxIdentifier: string;

  /**
   * The trustees of the trust.
   */
  @SpeakeasyMetadata({ elemType: EntityTrustTrusteesElement })
  @Expose({ name: "trustees" })
  @Type(() => EntityTrustTrusteesElement)
  trustees: EntityTrustTrusteesElement[];
}

/**
 * A constant representing the object's type. For this resource it will always be `entity`.
 */
export enum EntityTypeEnum {
  Entity = "entity",
}

/**
 * Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts.
 */
export class Entity extends SpeakeasyBase {
  /**
   * Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "corporation" })
  @Type(() => EntityCorporation)
  corporation: EntityCorporation;

  /**
   * The entity's description for display purposes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The entity's identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Details of the joint entity. Will be present if `structure` is equal to `joint`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "joint" })
  @Type(() => EntityJoint)
  joint: EntityJoint;

  /**
   * Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "natural_person" })
  @Type(() => EntityIndividual)
  naturalPerson: EntityIndividual;

  /**
   * The relationship between your group and the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationship" })
  relationship: EntityRelationshipEnum;

  /**
   * The entity's legal structure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "structure" })
  structure: EntityStructureEnum;

  /**
   * Additional documentation associated with the entity.
   */
  @SpeakeasyMetadata({ elemType: EntitySupplementalDocumentsElement })
  @Expose({ name: "supplemental_documents" })
  @Type(() => EntitySupplementalDocumentsElement)
  supplementalDocuments: EntitySupplementalDocumentsElement[];

  /**
   * Details of the trust entity. Will be present if `structure` is equal to `trust`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trust" })
  @Type(() => EntityTrust)
  trust: EntityTrust;

  /**
   * A constant representing the object's type. For this resource it will always be `entity`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: EntityTypeEnum;
}
