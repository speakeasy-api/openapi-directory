/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Folders resource represents the folders within a drive in the cloud storage service. It provides methods for managing and accessing the folders, such as creating, deleting, and listing files & folders in a given folder.
 */
export class Folders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Folder
   *
   * @remarks
   * Create Folder
   */
  foldersAdd(
    req: operations.FoldersAddRequest,
    security: operations.FoldersAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FoldersAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FoldersAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file-storage/folders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createFolderRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FoldersAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FoldersAddResponse =
        new operations.FoldersAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFolderResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateFolderResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Copy Folder
   *
   * @remarks
   * Copy Folder
   */
  foldersCopy(
    req: operations.FoldersCopyRequest,
    security: operations.FoldersCopySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FoldersCopyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FoldersCopyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-storage/folders/{id}/copy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "copyFolderRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FoldersCopySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FoldersCopyResponse =
        new operations.FoldersCopyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateFolderResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateFolderResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Folder
   *
   * @remarks
   * Delete Folder
   */
  foldersDelete(
    req: operations.FoldersDeleteRequest,
    security: operations.FoldersDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FoldersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FoldersDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-storage/folders/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FoldersDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FoldersDeleteResponse =
        new operations.FoldersDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteFolderResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteFolderResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Folder
   *
   * @remarks
   * Get Folder
   */
  foldersOne(
    req: operations.FoldersOneRequest,
    security: operations.FoldersOneSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FoldersOneResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FoldersOneRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-storage/folders/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FoldersOneSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FoldersOneResponse =
        new operations.FoldersOneResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFolderResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetFolderResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rename or move Folder
   *
   * @remarks
   * Rename or move Folder
   */
  foldersUpdate(
    req: operations.FoldersUpdateRequest,
    security: operations.FoldersUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FoldersUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FoldersUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-storage/folders/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateFolderRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FoldersUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FoldersUpdateResponse =
        new operations.FoldersUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateFolderResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateFolderResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
