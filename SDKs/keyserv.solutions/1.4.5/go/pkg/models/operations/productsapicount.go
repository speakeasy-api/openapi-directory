// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ProductsAPICountRequestBodyType string

const (
	ProductsAPICountRequestBodyTypeAPIKey ProductsAPICountRequestBodyType = "ApiKey"
)

type ProductsAPICountRequestBody struct {
	APIKey *shared.APIKey

	Type ProductsAPICountRequestBodyType
}

func CreateProductsAPICountRequestBodyAPIKey(apiKey shared.APIKey) ProductsAPICountRequestBody {
	typ := ProductsAPICountRequestBodyTypeAPIKey

	return ProductsAPICountRequestBody{
		APIKey: &apiKey,
		Type:   typ,
	}
}

func (u *ProductsAPICountRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	apiKey := new(shared.APIKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&apiKey); err == nil {
		u.APIKey = apiKey
		u.Type = ProductsAPICountRequestBodyTypeAPIKey
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPICountRequestBody) MarshalJSON() ([]byte, error) {
	if u.APIKey != nil {
		return json.Marshal(u.APIKey)
	}

	return nil, nil
}

type ProductsAPICount200ApplicationJSONType string

const (
	ProductsAPICount200ApplicationJSONTypeCountOf ProductsAPICount200ApplicationJSONType = "CountOf"
)

type ProductsAPICount200ApplicationJSON struct {
	CountOf *shared.CountOf

	Type ProductsAPICount200ApplicationJSONType
}

func CreateProductsAPICount200ApplicationJSONCountOf(countOf shared.CountOf) ProductsAPICount200ApplicationJSON {
	typ := ProductsAPICount200ApplicationJSONTypeCountOf

	return ProductsAPICount200ApplicationJSON{
		CountOf: &countOf,
		Type:    typ,
	}
}

func (u *ProductsAPICount200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	countOf := new(shared.CountOf)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&countOf); err == nil {
		u.CountOf = countOf
		u.Type = ProductsAPICount200ApplicationJSONTypeCountOf
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPICount200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.CountOf != nil {
		return json.Marshal(u.CountOf)
	}

	return nil, nil
}

type ProductsAPICountResponse struct {
	ContentType                             string
	ProductsAPICount200ApplicationJSONOneOf *ProductsAPICount200ApplicationJSON
	StatusCode                              int
	RawResponse                             *http.Response
}
