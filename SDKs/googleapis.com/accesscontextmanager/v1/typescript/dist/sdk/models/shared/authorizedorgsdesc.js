"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizedOrgsDesc = exports.AuthorizedOrgsDescAuthorizationTypeEnum = exports.AuthorizedOrgsDescAuthorizationDirectionEnum = exports.AuthorizedOrgsDescAssetTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The asset type of this authorized orgs desc. Valid values are `ASSET_TYPE_DEVICE`, and `ASSET_TYPE_CREDENTIAL_STRENGTH`.
 */
var AuthorizedOrgsDescAssetTypeEnum;
(function (AuthorizedOrgsDescAssetTypeEnum) {
    AuthorizedOrgsDescAssetTypeEnum["AssetTypeUnspecified"] = "ASSET_TYPE_UNSPECIFIED";
    AuthorizedOrgsDescAssetTypeEnum["AssetTypeDevice"] = "ASSET_TYPE_DEVICE";
    AuthorizedOrgsDescAssetTypeEnum["AssetTypeCredentialStrength"] = "ASSET_TYPE_CREDENTIAL_STRENGTH";
})(AuthorizedOrgsDescAssetTypeEnum = exports.AuthorizedOrgsDescAssetTypeEnum || (exports.AuthorizedOrgsDescAssetTypeEnum = {}));
/**
 * The direction of the authorization relationship between this organization and the organizations listed in the `orgs` field. The valid values for this field include the following: `AUTHORIZATION_DIRECTION_FROM`: Allows this organization to evaluate traffic in the organizations listed in the `orgs` field. `AUTHORIZATION_DIRECTION_TO`: Allows the organizations listed in the `orgs` field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying `AUTHORIZATION_DIRECTION_TO` as the authorization direction, organizations B and C must specify `AUTHORIZATION_DIRECTION_FROM` as the authorization direction in their `AuthorizedOrgsDesc` resource.
 */
var AuthorizedOrgsDescAuthorizationDirectionEnum;
(function (AuthorizedOrgsDescAuthorizationDirectionEnum) {
    AuthorizedOrgsDescAuthorizationDirectionEnum["AuthorizationDirectionUnspecified"] = "AUTHORIZATION_DIRECTION_UNSPECIFIED";
    AuthorizedOrgsDescAuthorizationDirectionEnum["AuthorizationDirectionTo"] = "AUTHORIZATION_DIRECTION_TO";
    AuthorizedOrgsDescAuthorizationDirectionEnum["AuthorizationDirectionFrom"] = "AUTHORIZATION_DIRECTION_FROM";
})(AuthorizedOrgsDescAuthorizationDirectionEnum = exports.AuthorizedOrgsDescAuthorizationDirectionEnum || (exports.AuthorizedOrgsDescAuthorizationDirectionEnum = {}));
/**
 * A granular control type for authorization levels. Valid value is `AUTHORIZATION_TYPE_TRUST`.
 */
var AuthorizedOrgsDescAuthorizationTypeEnum;
(function (AuthorizedOrgsDescAuthorizationTypeEnum) {
    AuthorizedOrgsDescAuthorizationTypeEnum["AuthorizationTypeUnspecified"] = "AUTHORIZATION_TYPE_UNSPECIFIED";
    AuthorizedOrgsDescAuthorizationTypeEnum["AuthorizationTypeTrust"] = "AUTHORIZATION_TYPE_TRUST";
})(AuthorizedOrgsDescAuthorizationTypeEnum = exports.AuthorizedOrgsDescAuthorizationTypeEnum || (exports.AuthorizedOrgsDescAuthorizationTypeEnum = {}));
/**
 * `AuthorizedOrgsDesc` contains data for an organization's authorization policy.
 */
var AuthorizedOrgsDesc = /** @class */ (function (_super) {
    __extends(AuthorizedOrgsDesc, _super);
    function AuthorizedOrgsDesc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "assetType" }),
        __metadata("design:type", String)
    ], AuthorizedOrgsDesc.prototype, "assetType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authorizationDirection" }),
        __metadata("design:type", String)
    ], AuthorizedOrgsDesc.prototype, "authorizationDirection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authorizationType" }),
        __metadata("design:type", String)
    ], AuthorizedOrgsDesc.prototype, "authorizationType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], AuthorizedOrgsDesc.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "orgs" }),
        __metadata("design:type", Array)
    ], AuthorizedOrgsDesc.prototype, "orgs", void 0);
    return AuthorizedOrgsDesc;
}(utils_1.SpeakeasyBase));
exports.AuthorizedOrgsDesc = AuthorizedOrgsDesc;
