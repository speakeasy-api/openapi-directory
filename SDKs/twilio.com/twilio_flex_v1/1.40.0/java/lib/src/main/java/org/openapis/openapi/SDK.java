/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://flex-api.twilio.com",
	};
    /**
	 * CREATE_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_FLEX_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FLEX_FLOW_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INSIGHTS_ASSESSMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INSIGHTS_ASSESSMENTS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INSIGHTS_QUESTIONNAIRES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INSIGHTS_QUESTIONNAIRES_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INSIGHTS_SESSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INSIGHTS_SESSION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INTERACTION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INTERACTION_CHANNEL_INVITE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INTERACTION_CHANNEL_INVITE_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * CREATE_WEB_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WEB_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * DELETE_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * DELETE_FLEX_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FLEX_FLOW_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * DELETE_INSIGHTS_QUESTIONNAIRES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INSIGHTS_QUESTIONNAIRES_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * DELETE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * DELETE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * DELETE_WEB_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WEB_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_FLEX_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FLEX_FLOW_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INSIGHTS_QUESTIONNAIRES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INSIGHTS_QUESTIONNAIRES_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INSIGHTS_SEGMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INSIGHTS_SEGMENTS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INSIGHTS_SETTINGS_ANSWERSETS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INSIGHTS_SETTINGS_ANSWERSETS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INSIGHTS_SETTINGS_COMMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INSIGHTS_SETTINGS_COMMENT_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INSIGHTS_USER_ROLES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INSIGHTS_USER_ROLES_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INTERACTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INTERACTION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_INTERACTION_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INTERACTION_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * FETCH_WEB_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WEB_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_FLEX_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FLEX_FLOW_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_ASSESSMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_ASSESSMENTS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_CONVERSATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_CONVERSATIONS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_QUESTIONNAIRES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_QUESTIONNAIRES_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INSIGHTS_SEGMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INSIGHTS_SEGMENTS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INTERACTION_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INTERACTION_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INTERACTION_CHANNEL_INVITE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INTERACTION_CHANNEL_INVITE_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_INTERACTION_CHANNEL_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INTERACTION_CHANNEL_PARTICIPANT_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * LIST_WEB_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WEB_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_FLEX_FLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FLEX_FLOW_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_INSIGHTS_ASSESSMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INSIGHTS_ASSESSMENTS_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_INSIGHTS_QUESTIONNAIRES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INSIGHTS_QUESTIONNAIRES_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_INTERACTION_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INTERACTION_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
    /**
	 * UPDATE_WEB_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WEB_CHANNEL_SERVERS = {
        "https://flex-api.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateChannelResponse createChannel(org.openapis.openapi.models.operations.CreateChannelRequest request) throws Exception {
        String baseUrl = CREATE_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Channels");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateChannelResponse res = new org.openapis.openapi.models.operations.CreateChannelResponse() {{
            flexV1Channel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1Channel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1Channel.class);
                res.flexV1Channel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateFlexFlowResponse createFlexFlow(org.openapis.openapi.models.operations.CreateFlexFlowRequest request) throws Exception {
        String baseUrl = CREATE_FLEX_FLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/FlexFlows");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFlexFlowResponse res = new org.openapis.openapi.models.operations.CreateFlexFlowResponse() {{
            flexV1FlexFlow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1FlexFlow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1FlexFlow.class);
                res.flexV1FlexFlow = out;
            }
        }

        return res;
    }

    /**
     * Add assessments against conversation to dynamo db. Used in assessments screen by user. Users can select the questionnaire and pick up answers for each and every question.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInsightsAssessmentsResponse createInsightsAssessments(org.openapis.openapi.models.operations.CreateInsightsAssessmentsRequest request) throws Exception {
        String baseUrl = CREATE_INSIGHTS_ASSESSMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Assessments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInsightsAssessmentsResponse res = new org.openapis.openapi.models.operations.CreateInsightsAssessmentsResponse() {{
            flexV1InsightsAssessments = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsAssessments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsAssessments.class);
                res.flexV1InsightsAssessments = out;
            }
        }

        return res;
    }

    /**
     * To create a comment assessment for a conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInsightsAssessmentsCommentResponse createInsightsAssessmentsComment(org.openapis.openapi.models.operations.CreateInsightsAssessmentsCommentRequest request) throws Exception {
        String baseUrl = CREATE_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Assessments/Comments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInsightsAssessmentsCommentResponse res = new org.openapis.openapi.models.operations.CreateInsightsAssessmentsCommentResponse() {{
            flexV1InsightsAssessmentsComment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsAssessmentsComment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsAssessmentsComment.class);
                res.flexV1InsightsAssessmentsComment = out;
            }
        }

        return res;
    }

    /**
     * To create a Questionnaire
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInsightsQuestionnairesResponse createInsightsQuestionnaires(org.openapis.openapi.models.operations.CreateInsightsQuestionnairesRequest request) throws Exception {
        String baseUrl = CREATE_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Questionnaires");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInsightsQuestionnairesResponse res = new org.openapis.openapi.models.operations.CreateInsightsQuestionnairesResponse() {{
            flexV1InsightsQuestionnaires = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnaires out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnaires.class);
                res.flexV1InsightsQuestionnaires = out;
            }
        }

        return res;
    }

    /**
     * To create a category for Questions
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInsightsQuestionnairesCategoryResponse createInsightsQuestionnairesCategory(org.openapis.openapi.models.operations.CreateInsightsQuestionnairesCategoryRequest request) throws Exception {
        String baseUrl = CREATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Categories");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInsightsQuestionnairesCategoryResponse res = new org.openapis.openapi.models.operations.CreateInsightsQuestionnairesCategoryResponse() {{
            flexV1InsightsQuestionnairesCategory = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesCategory out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesCategory.class);
                res.flexV1InsightsQuestionnairesCategory = out;
            }
        }

        return res;
    }

    /**
     * To create a question for a Category
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInsightsQuestionnairesQuestionResponse createInsightsQuestionnairesQuestion(org.openapis.openapi.models.operations.CreateInsightsQuestionnairesQuestionRequest request) throws Exception {
        String baseUrl = CREATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Questions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInsightsQuestionnairesQuestionResponse res = new org.openapis.openapi.models.operations.CreateInsightsQuestionnairesQuestionResponse() {{
            flexV1InsightsQuestionnairesQuestion = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesQuestion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesQuestion.class);
                res.flexV1InsightsQuestionnairesQuestion = out;
            }
        }

        return res;
    }

    /**
     * To obtain session details for fetching reports and dashboards
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInsightsSessionResponse createInsightsSession(org.openapis.openapi.models.operations.CreateInsightsSessionRequest request) throws Exception {
        String baseUrl = CREATE_INSIGHTS_SESSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/Session");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInsightsSessionResponse res = new org.openapis.openapi.models.operations.CreateInsightsSessionResponse() {{
            flexV1InsightsSession = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsSession out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsSession.class);
                res.flexV1InsightsSession = out;
            }
        }

        return res;
    }

    /**
     * Create a new Interaction.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInteractionResponse createInteraction(org.openapis.openapi.models.operations.CreateInteractionRequest request) throws Exception {
        String baseUrl = CREATE_INTERACTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Interactions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInteractionResponse res = new org.openapis.openapi.models.operations.CreateInteractionResponse() {{
            flexV1Interaction = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1Interaction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1Interaction.class);
                res.flexV1Interaction = out;
            }
        }

        return res;
    }

    /**
     * Invite an Agent or a TaskQueue to a Channel.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInteractionChannelInviteResponse createInteractionChannelInvite(org.openapis.openapi.models.operations.CreateInteractionChannelInviteRequest request) throws Exception {
        String baseUrl = CREATE_INTERACTION_CHANNEL_INVITE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateInteractionChannelInvitePathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInteractionChannelInviteResponse res = new org.openapis.openapi.models.operations.CreateInteractionChannelInviteResponse() {{
            flexV1InteractionInteractionChannelInteractionChannelInvite = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannelInteractionChannelInvite out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannelInteractionChannelInvite.class);
                res.flexV1InteractionInteractionChannelInteractionChannelInvite = out;
            }
        }

        return res;
    }

    /**
     * Add a Participant to a Channel.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateInteractionChannelParticipantResponse createInteractionChannelParticipant(org.openapis.openapi.models.operations.CreateInteractionChannelParticipantRequest request) throws Exception {
        String baseUrl = CREATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateInteractionChannelParticipantPathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInteractionChannelParticipantResponse res = new org.openapis.openapi.models.operations.CreateInteractionChannelParticipantResponse() {{
            flexV1InteractionInteractionChannelInteractionChannelParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannelInteractionChannelParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannelInteractionChannelParticipant.class);
                res.flexV1InteractionInteractionChannelInteractionChannelParticipant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWebChannelResponse createWebChannel(org.openapis.openapi.models.operations.CreateWebChannelRequest request) throws Exception {
        String baseUrl = CREATE_WEB_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/WebChannels");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWebChannelResponse res = new org.openapis.openapi.models.operations.CreateWebChannelResponse() {{
            flexV1WebChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1WebChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1WebChannel.class);
                res.flexV1WebChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteChannelResponse deleteChannel(org.openapis.openapi.models.operations.DeleteChannelRequest request) throws Exception {
        String baseUrl = DELETE_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteChannelPathParams.class, baseUrl, "/v1/Channels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteChannelResponse res = new org.openapis.openapi.models.operations.DeleteChannelResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteFlexFlowResponse deleteFlexFlow(org.openapis.openapi.models.operations.DeleteFlexFlowRequest request) throws Exception {
        String baseUrl = DELETE_FLEX_FLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFlexFlowPathParams.class, baseUrl, "/v1/FlexFlows/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFlexFlowResponse res = new org.openapis.openapi.models.operations.DeleteFlexFlowResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * To delete the questionnaire
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesResponse deleteInsightsQuestionnaires(org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesRequest request) throws Exception {
        String baseUrl = DELETE_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesPathParams.class, baseUrl, "/v1/Insights/QM/Questionnaires/{Id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesResponse res = new org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesCategoryResponse deleteInsightsQuestionnairesCategory(org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesCategoryRequest request) throws Exception {
        String baseUrl = DELETE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesCategoryPathParams.class, baseUrl, "/v1/Insights/QM/Categories/{CategoryId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesCategoryResponse res = new org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesCategoryResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesQuestionResponse deleteInsightsQuestionnairesQuestion(org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesQuestionRequest request) throws Exception {
        String baseUrl = DELETE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesQuestionPathParams.class, baseUrl, "/v1/Insights/QM/Questions/{QuestionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesQuestionResponse res = new org.openapis.openapi.models.operations.DeleteInsightsQuestionnairesQuestionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWebChannelResponse deleteWebChannel(org.openapis.openapi.models.operations.DeleteWebChannelRequest request) throws Exception {
        String baseUrl = DELETE_WEB_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWebChannelPathParams.class, baseUrl, "/v1/WebChannels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWebChannelResponse res = new org.openapis.openapi.models.operations.DeleteWebChannelResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchChannelResponse fetchChannel(org.openapis.openapi.models.operations.FetchChannelRequest request) throws Exception {
        String baseUrl = FETCH_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchChannelPathParams.class, baseUrl, "/v1/Channels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchChannelResponse res = new org.openapis.openapi.models.operations.FetchChannelResponse() {{
            flexV1Channel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1Channel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1Channel.class);
                res.flexV1Channel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchConfigurationResponse fetchConfiguration(org.openapis.openapi.models.operations.FetchConfigurationRequest request) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchConfigurationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationResponse res = new org.openapis.openapi.models.operations.FetchConfigurationResponse() {{
            flexV1Configuration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1Configuration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1Configuration.class);
                res.flexV1Configuration = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchFlexFlowResponse fetchFlexFlow(org.openapis.openapi.models.operations.FetchFlexFlowRequest request) throws Exception {
        String baseUrl = FETCH_FLEX_FLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFlexFlowPathParams.class, baseUrl, "/v1/FlexFlows/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFlexFlowResponse res = new org.openapis.openapi.models.operations.FetchFlexFlowResponse() {{
            flexV1FlexFlow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1FlexFlow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1FlexFlow.class);
                res.flexV1FlexFlow = out;
            }
        }

        return res;
    }

    /**
     * To get the Questionnaire Detail
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInsightsQuestionnairesResponse fetchInsightsQuestionnaires(org.openapis.openapi.models.operations.FetchInsightsQuestionnairesRequest request) throws Exception {
        String baseUrl = FETCH_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchInsightsQuestionnairesPathParams.class, baseUrl, "/v1/Insights/QM/Questionnaires/{Id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInsightsQuestionnairesResponse res = new org.openapis.openapi.models.operations.FetchInsightsQuestionnairesResponse() {{
            flexV1InsightsQuestionnaires = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnaires out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnaires.class);
                res.flexV1InsightsQuestionnaires = out;
            }
        }

        return res;
    }

    /**
     * To get the Segments of an Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInsightsSegmentsResponse fetchInsightsSegments(org.openapis.openapi.models.operations.FetchInsightsSegmentsRequest request) throws Exception {
        String baseUrl = FETCH_INSIGHTS_SEGMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchInsightsSegmentsPathParams.class, baseUrl, "/v1/Insights/Segments/{SegmentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInsightsSegmentsResponse res = new org.openapis.openapi.models.operations.FetchInsightsSegmentsResponse() {{
            flexV1InsightsSegments = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsSegments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsSegments.class);
                res.flexV1InsightsSegments = out;
            }
        }

        return res;
    }

    /**
     * To get the Answer Set Settings for an Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInsightsSettingsAnswersetsResponse fetchInsightsSettingsAnswersets(org.openapis.openapi.models.operations.FetchInsightsSettingsAnswersetsRequest request) throws Exception {
        String baseUrl = FETCH_INSIGHTS_SETTINGS_ANSWERSETS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Settings/AnswerSets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInsightsSettingsAnswersetsResponse res = new org.openapis.openapi.models.operations.FetchInsightsSettingsAnswersetsResponse() {{
            flexV1InsightsSettingsAnswersets = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsSettingsAnswersets out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsSettingsAnswersets.class);
                res.flexV1InsightsSettingsAnswersets = out;
            }
        }

        return res;
    }

    /**
     * To get the Comment Settings for an Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInsightsSettingsCommentResponse fetchInsightsSettingsComment(org.openapis.openapi.models.operations.FetchInsightsSettingsCommentRequest request) throws Exception {
        String baseUrl = FETCH_INSIGHTS_SETTINGS_COMMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Settings/CommentTags");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInsightsSettingsCommentResponse res = new org.openapis.openapi.models.operations.FetchInsightsSettingsCommentResponse() {{
            flexV1InsightsSettingsComment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsSettingsComment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsSettingsComment.class);
                res.flexV1InsightsSettingsComment = out;
            }
        }

        return res;
    }

    /**
     * This is used by Flex UI and Quality Management to fetch the Flex Insights roles for the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInsightsUserRolesResponse fetchInsightsUserRoles(org.openapis.openapi.models.operations.FetchInsightsUserRolesRequest request) throws Exception {
        String baseUrl = FETCH_INSIGHTS_USER_ROLES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/UserRoles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInsightsUserRolesResponse res = new org.openapis.openapi.models.operations.FetchInsightsUserRolesResponse() {{
            flexV1InsightsUserRoles = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsUserRoles out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsUserRoles.class);
                res.flexV1InsightsUserRoles = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchInteractionResponse fetchInteraction(org.openapis.openapi.models.operations.FetchInteractionRequest request) throws Exception {
        String baseUrl = FETCH_INTERACTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchInteractionPathParams.class, baseUrl, "/v1/Interactions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInteractionResponse res = new org.openapis.openapi.models.operations.FetchInteractionResponse() {{
            flexV1Interaction = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1Interaction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1Interaction.class);
                res.flexV1Interaction = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Channel for an Interaction.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchInteractionChannelResponse fetchInteractionChannel(org.openapis.openapi.models.operations.FetchInteractionChannelRequest request) throws Exception {
        String baseUrl = FETCH_INTERACTION_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchInteractionChannelPathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInteractionChannelResponse res = new org.openapis.openapi.models.operations.FetchInteractionChannelResponse() {{
            flexV1InteractionInteractionChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannel.class);
                res.flexV1InteractionInteractionChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWebChannelResponse fetchWebChannel(org.openapis.openapi.models.operations.FetchWebChannelRequest request) throws Exception {
        String baseUrl = FETCH_WEB_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWebChannelPathParams.class, baseUrl, "/v1/WebChannels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWebChannelResponse res = new org.openapis.openapi.models.operations.FetchWebChannelResponse() {{
            flexV1WebChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1WebChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1WebChannel.class);
                res.flexV1WebChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListChannelResponse listChannel(org.openapis.openapi.models.operations.ListChannelRequest request) throws Exception {
        String baseUrl = LIST_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Channels");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListChannelQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListChannelResponse res = new org.openapis.openapi.models.operations.ListChannelResponse() {{
            listChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListChannelListChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListChannelListChannelResponse.class);
                res.listChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListFlexFlowResponse listFlexFlow(org.openapis.openapi.models.operations.ListFlexFlowRequest request) throws Exception {
        String baseUrl = LIST_FLEX_FLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/FlexFlows");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFlexFlowQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFlexFlowResponse res = new org.openapis.openapi.models.operations.ListFlexFlowResponse() {{
            listFlexFlowResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFlexFlowListFlexFlowResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFlexFlowListFlexFlowResponse.class);
                res.listFlexFlowResponse = out;
            }
        }

        return res;
    }

    /**
     * Get assessments done for a conversation by logged in user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsAssessmentsResponse listInsightsAssessments(org.openapis.openapi.models.operations.ListInsightsAssessmentsRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_ASSESSMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Assessments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsAssessmentsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsAssessmentsResponse res = new org.openapis.openapi.models.operations.ListInsightsAssessmentsResponse() {{
            listInsightsAssessmentsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsAssessmentsListInsightsAssessmentsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsAssessmentsListInsightsAssessmentsResponse.class);
                res.listInsightsAssessmentsResponse = out;
            }
        }

        return res;
    }

    /**
     * To create a comment assessment for a conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentResponse listInsightsAssessmentsComment(org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Assessments/Comments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentResponse res = new org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentResponse() {{
            listInsightsAssessmentsCommentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentListInsightsAssessmentsCommentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsAssessmentsCommentListInsightsAssessmentsCommentResponse.class);
                res.listInsightsAssessmentsCommentResponse = out;
            }
        }

        return res;
    }

    /**
     * To get conversation with segment id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsConversationsResponse listInsightsConversations(org.openapis.openapi.models.operations.ListInsightsConversationsRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_CONVERSATIONS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/Conversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsConversationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsConversationsResponse res = new org.openapis.openapi.models.operations.ListInsightsConversationsResponse() {{
            listInsightsConversationsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsConversationsListInsightsConversationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsConversationsListInsightsConversationsResponse.class);
                res.listInsightsConversationsResponse = out;
            }
        }

        return res;
    }

    /**
     * To get all questionnaires with questions
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsQuestionnairesResponse listInsightsQuestionnaires(org.openapis.openapi.models.operations.ListInsightsQuestionnairesRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Questionnaires");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsQuestionnairesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsQuestionnairesResponse res = new org.openapis.openapi.models.operations.ListInsightsQuestionnairesResponse() {{
            listInsightsQuestionnairesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsQuestionnairesListInsightsQuestionnairesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsQuestionnairesListInsightsQuestionnairesResponse.class);
                res.listInsightsQuestionnairesResponse = out;
            }
        }

        return res;
    }

    /**
     * To get all the categories
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryResponse listInsightsQuestionnairesCategory(org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Categories");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryResponse res = new org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryResponse() {{
            listInsightsQuestionnairesCategoryResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryListInsightsQuestionnairesCategoryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsQuestionnairesCategoryListInsightsQuestionnairesCategoryResponse.class);
                res.listInsightsQuestionnairesCategoryResponse = out;
            }
        }

        return res;
    }

    /**
     * To get all the question for the given categories
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionResponse listInsightsQuestionnairesQuestion(org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/QM/Questions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionResponse res = new org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionResponse() {{
            listInsightsQuestionnairesQuestionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionListInsightsQuestionnairesQuestionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsQuestionnairesQuestionListInsightsQuestionnairesQuestionResponse.class);
                res.listInsightsQuestionnairesQuestionResponse = out;
            }
        }

        return res;
    }

    /**
     * To get segments for given reservation Ids
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInsightsSegmentsResponse listInsightsSegments(org.openapis.openapi.models.operations.ListInsightsSegmentsRequest request) throws Exception {
        String baseUrl = LIST_INSIGHTS_SEGMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Insights/Segments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInsightsSegmentsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInsightsSegmentsResponse res = new org.openapis.openapi.models.operations.ListInsightsSegmentsResponse() {{
            listInsightsSegmentsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInsightsSegmentsListInsightsSegmentsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInsightsSegmentsListInsightsSegmentsResponse.class);
                res.listInsightsSegmentsResponse = out;
            }
        }

        return res;
    }

    /**
     * List all Channels for an Interaction.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInteractionChannelResponse listInteractionChannel(org.openapis.openapi.models.operations.ListInteractionChannelRequest request) throws Exception {
        String baseUrl = LIST_INTERACTION_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListInteractionChannelPathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInteractionChannelQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInteractionChannelResponse res = new org.openapis.openapi.models.operations.ListInteractionChannelResponse() {{
            listInteractionChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInteractionChannelListInteractionChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInteractionChannelListInteractionChannelResponse.class);
                res.listInteractionChannelResponse = out;
            }
        }

        return res;
    }

    /**
     * List all Invites for a Channel.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInteractionChannelInviteResponse listInteractionChannelInvite(org.openapis.openapi.models.operations.ListInteractionChannelInviteRequest request) throws Exception {
        String baseUrl = LIST_INTERACTION_CHANNEL_INVITE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListInteractionChannelInvitePathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInteractionChannelInviteQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInteractionChannelInviteResponse res = new org.openapis.openapi.models.operations.ListInteractionChannelInviteResponse() {{
            listInteractionChannelInviteResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInteractionChannelInviteListInteractionChannelInviteResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInteractionChannelInviteListInteractionChannelInviteResponse.class);
                res.listInteractionChannelInviteResponse = out;
            }
        }

        return res;
    }

    /**
     * List all Participants for a Channel.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListInteractionChannelParticipantResponse listInteractionChannelParticipant(org.openapis.openapi.models.operations.ListInteractionChannelParticipantRequest request) throws Exception {
        String baseUrl = LIST_INTERACTION_CHANNEL_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListInteractionChannelParticipantPathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInteractionChannelParticipantQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInteractionChannelParticipantResponse res = new org.openapis.openapi.models.operations.ListInteractionChannelParticipantResponse() {{
            listInteractionChannelParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInteractionChannelParticipantListInteractionChannelParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInteractionChannelParticipantListInteractionChannelParticipantResponse.class);
                res.listInteractionChannelParticipantResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWebChannelResponse listWebChannel(org.openapis.openapi.models.operations.ListWebChannelRequest request) throws Exception {
        String baseUrl = LIST_WEB_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/WebChannels");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWebChannelQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWebChannelResponse res = new org.openapis.openapi.models.operations.ListWebChannelResponse() {{
            listWebChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWebChannelListWebChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWebChannelListWebChannelResponse.class);
                res.listWebChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateFlexFlowResponse updateFlexFlow(org.openapis.openapi.models.operations.UpdateFlexFlowRequest request) throws Exception {
        String baseUrl = UPDATE_FLEX_FLOW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFlexFlowPathParams.class, baseUrl, "/v1/FlexFlows/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFlexFlowResponse res = new org.openapis.openapi.models.operations.UpdateFlexFlowResponse() {{
            flexV1FlexFlow = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1FlexFlow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1FlexFlow.class);
                res.flexV1FlexFlow = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Assessment assessed earlier
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateInsightsAssessmentsResponse updateInsightsAssessments(org.openapis.openapi.models.operations.UpdateInsightsAssessmentsRequest request) throws Exception {
        String baseUrl = UPDATE_INSIGHTS_ASSESSMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateInsightsAssessmentsPathParams.class, baseUrl, "/v1/Insights/QM/Assessments/{AssessmentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateInsightsAssessmentsResponse res = new org.openapis.openapi.models.operations.UpdateInsightsAssessmentsResponse() {{
            flexV1InsightsAssessments = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsAssessments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsAssessments.class);
                res.flexV1InsightsAssessments = out;
            }
        }

        return res;
    }

    /**
     * To update the questionnaire
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesResponse updateInsightsQuestionnaires(org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesRequest request) throws Exception {
        String baseUrl = UPDATE_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesPathParams.class, baseUrl, "/v1/Insights/QM/Questionnaires/{Id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesResponse res = new org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesResponse() {{
            flexV1InsightsQuestionnaires = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnaires out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnaires.class);
                res.flexV1InsightsQuestionnaires = out;
            }
        }

        return res;
    }

    /**
     * To update the category for Questions
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesCategoryResponse updateInsightsQuestionnairesCategory(org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesCategoryRequest request) throws Exception {
        String baseUrl = UPDATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesCategoryPathParams.class, baseUrl, "/v1/Insights/QM/Categories/{CategoryId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesCategoryResponse res = new org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesCategoryResponse() {{
            flexV1InsightsQuestionnairesCategory = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesCategory out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesCategory.class);
                res.flexV1InsightsQuestionnairesCategory = out;
            }
        }

        return res;
    }

    /**
     * To update the question
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesQuestionResponse updateInsightsQuestionnairesQuestion(org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesQuestionRequest request) throws Exception {
        String baseUrl = UPDATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesQuestionPathParams.class, baseUrl, "/v1/Insights/QM/Questions/{QuestionId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesQuestionResponse res = new org.openapis.openapi.models.operations.UpdateInsightsQuestionnairesQuestionResponse() {{
            flexV1InsightsQuestionnairesQuestion = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesQuestion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InsightsQuestionnairesQuestion.class);
                res.flexV1InsightsQuestionnairesQuestion = out;
            }
        }

        return res;
    }

    /**
     * Update an existing Interaction Channel.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateInteractionChannelResponse updateInteractionChannel(org.openapis.openapi.models.operations.UpdateInteractionChannelRequest request) throws Exception {
        String baseUrl = UPDATE_INTERACTION_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateInteractionChannelPathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateInteractionChannelResponse res = new org.openapis.openapi.models.operations.UpdateInteractionChannelResponse() {{
            flexV1InteractionInteractionChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannel.class);
                res.flexV1InteractionInteractionChannel = out;
            }
        }

        return res;
    }

    /**
     * Update an existing Channel Participant.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateInteractionChannelParticipantResponse updateInteractionChannelParticipant(org.openapis.openapi.models.operations.UpdateInteractionChannelParticipantRequest request) throws Exception {
        String baseUrl = UPDATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateInteractionChannelParticipantPathParams.class, baseUrl, "/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateInteractionChannelParticipantResponse res = new org.openapis.openapi.models.operations.UpdateInteractionChannelParticipantResponse() {{
            flexV1InteractionInteractionChannelInteractionChannelParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannelInteractionChannelParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1InteractionInteractionChannelInteractionChannelParticipant.class);
                res.flexV1InteractionInteractionChannelInteractionChannelParticipant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWebChannelResponse updateWebChannel(org.openapis.openapi.models.operations.UpdateWebChannelRequest request) throws Exception {
        String baseUrl = UPDATE_WEB_CHANNEL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWebChannelPathParams.class, baseUrl, "/v1/WebChannels/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWebChannelResponse res = new org.openapis.openapi.models.operations.UpdateWebChannelResponse() {{
            flexV1WebChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FlexV1WebChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FlexV1WebChannel.class);
                res.flexV1WebChannel = out;
            }
        }

        return res;
    }
}