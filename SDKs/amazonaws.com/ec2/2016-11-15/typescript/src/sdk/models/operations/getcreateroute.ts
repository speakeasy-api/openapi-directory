/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETCreateRouteActionEnum {
  CreateRoute = "CreateRoute",
}

export enum GETCreateRouteVersionEnum {
  TwoThousandAndSixteen1115 = "2016-11-15",
}

export class GETCreateRouteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETCreateRouteActionEnum;

  /**
   * <p>The ID of the carrier gateway.</p> <p>You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=CarrierGatewayId",
  })
  carrierGatewayId?: string;

  /**
   * The Amazon Resource Name (ARN) of the core network.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=CoreNetworkArn",
  })
  coreNetworkArn?: string;

  /**
   * The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DestinationCidrBlock",
  })
  destinationCidrBlock?: string;

  /**
   * The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DestinationIpv6CidrBlock",
  })
  destinationIpv6CidrBlock?: string;

  /**
   * The ID of a prefix list used for the destination match.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DestinationPrefixListId",
  })
  destinationPrefixListId?: string;

  /**
   * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DryRun",
  })
  dryRun?: boolean;

  /**
   * [IPv6 traffic only] The ID of an egress-only internet gateway.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EgressOnlyInternetGatewayId",
  })
  egressOnlyInternetGatewayId?: string;

  /**
   * The ID of an internet gateway or virtual private gateway attached to your VPC.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=GatewayId",
  })
  gatewayId?: string;

  /**
   * The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=InstanceId",
  })
  instanceId?: string;

  /**
   * The ID of the local gateway.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=LocalGatewayId",
  })
  localGatewayId?: string;

  /**
   * [IPv4 traffic only] The ID of a NAT gateway.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NatGatewayId",
  })
  natGatewayId?: string;

  /**
   * The ID of a network interface.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NetworkInterfaceId",
  })
  networkInterfaceId?: string;

  /**
   * The ID of the route table for the route.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=RouteTableId",
  })
  routeTableId: string;

  /**
   * The ID of a transit gateway.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TransitGatewayId",
  })
  transitGatewayId?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETCreateRouteVersionEnum;

  /**
   * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=VpcEndpointId",
  })
  vpcEndpointId?: string;

  /**
   * The ID of a VPC peering connection.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=VpcPeeringConnectionId",
  })
  vpcPeeringConnectionId?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETCreateRouteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
