"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import aliases as shared_aliases
from ..shared import priceclass_enum as shared_priceclass_enum
from ..shared import s3origin as shared_s3origin
from ..shared import streamingloggingconfig as shared_streamingloggingconfig
from ..shared import trustedsigners as shared_trustedsigners
from typing import Optional


@dataclasses.dataclass
class CreateStreamingDistribution20200531RequestBodyStreamingDistributionConfig:
    r"""The RTMP distribution's configuration information."""
    
    aliases: Optional[shared_aliases.Aliases] = dataclasses.field(default=None)  
    caller_reference: Optional[str] = dataclasses.field(default=None)  
    comment: Optional[str] = dataclasses.field(default=None)  
    enabled: Optional[bool] = dataclasses.field(default=None)  
    logging: Optional[shared_streamingloggingconfig.StreamingLoggingConfig] = dataclasses.field(default=None)  
    price_class: Optional[shared_priceclass_enum.PriceClassEnum] = dataclasses.field(default=None)  
    s3_origin: Optional[shared_s3origin.S3Origin] = dataclasses.field(default=None)  
    trusted_signers: Optional[shared_trustedsigners.TrustedSigners] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateStreamingDistribution20200531RequestBody:
    
    streaming_distribution_config: CreateStreamingDistribution20200531RequestBodyStreamingDistributionConfig = dataclasses.field()
    r"""The RTMP distribution's configuration information."""  
    

@dataclasses.dataclass
class CreateStreamingDistribution20200531Request:
    
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'text/xml' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateStreamingDistribution20200531Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    