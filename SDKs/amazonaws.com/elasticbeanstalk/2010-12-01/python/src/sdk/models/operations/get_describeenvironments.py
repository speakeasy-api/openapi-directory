"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from enum import Enum
from typing import Optional

class GETDescribeEnvironmentsActionEnum(str, Enum):
    DESCRIBE_ENVIRONMENTS = 'DescribeEnvironments'

class GETDescribeEnvironmentsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_12_01 = '2010-12-01'


@dataclasses.dataclass
class GETDescribeEnvironmentsRequest:
    
    action: GETDescribeEnvironmentsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETDescribeEnvironmentsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    application_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ApplicationName', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application."""  
    environment_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnvironmentIds', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs."""  
    environment_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnvironmentNames', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names."""  
    included_deleted_back_to: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IncludedDeletedBackTo', 'style': 'form', 'explode': True }})
    r"""If specified when <code>IncludeDeleted</code> is set to <code>true</code>, then environments deleted after this date are displayed."""  
    include_deleted: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IncludeDeleted', 'style': 'form', 'explode': True }})
    r"""<p>Indicates whether to include deleted environments:</p> <p> <code>true</code>: Environments that have been deleted after <code>IncludedDeletedBackTo</code> are displayed.</p> <p> <code>false</code>: Do not include deleted environments.</p>"""  
    max_records: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxRecords', 'style': 'form', 'explode': True }})
    r"""<p>For a paginated request. Specify a maximum number of environments to include in each response.</p> <p>If no <code>MaxRecords</code> is specified, all available environments are retrieved in a single response.</p>"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""<p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p> <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>"""  
    version_label: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VersionLabel', 'style': 'form', 'explode': True }})
    r"""If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDescribeEnvironmentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    