// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreateTokenRequestDataAttributesGrantTypeEnum string

const (
	CreateTokenRequestDataAttributesGrantTypeEnumRefreshToken      CreateTokenRequestDataAttributesGrantTypeEnum = "refresh_token"
	CreateTokenRequestDataAttributesGrantTypeEnumClientCredentials CreateTokenRequestDataAttributesGrantTypeEnum = "client_credentials"
)

func (e CreateTokenRequestDataAttributesGrantTypeEnum) ToPointer() *CreateTokenRequestDataAttributesGrantTypeEnum {
	return &e
}

func (e *CreateTokenRequestDataAttributesGrantTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refresh_token":
		fallthrough
	case "client_credentials":
		*e = CreateTokenRequestDataAttributesGrantTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestDataAttributesGrantTypeEnum: %v", v)
	}
}

type CreateTokenRequestDataAttributes struct {
	// Contact Fitbit Plus API Support to get a client id and secret.
	ClientID string `json:"client_id"`
	// Contact Fitbit Plus API Support to get a client id and secret. Secret is required if grant_type is "client_credentials"
	ClientSecret *string                                       `json:"client_secret,omitempty"`
	GrantType    CreateTokenRequestDataAttributesGrantTypeEnum `json:"grant_type"`
	// Required if grant_type is "refresh_token"
	RefreshToken *string `json:"refresh_token,omitempty"`
}

type CreateTokenRequestDataTypeEnum string

const (
	CreateTokenRequestDataTypeEnumToken CreateTokenRequestDataTypeEnum = "token"
)

func (e CreateTokenRequestDataTypeEnum) ToPointer() *CreateTokenRequestDataTypeEnum {
	return &e
}

func (e *CreateTokenRequestDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = CreateTokenRequestDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestDataTypeEnum: %v", v)
	}
}

type CreateTokenRequestData struct {
	Attributes CreateTokenRequestDataAttributes `json:"attributes"`
	Type       *CreateTokenRequestDataTypeEnum  `json:"type,omitempty"`
}

type CreateTokenRequest struct {
	Data CreateTokenRequestData `json:"data"`
}
