// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CrossProfilePoliciesCrossProfileCopyPasteEnum - Whether text copied from one profile (personal or work) can be pasted in the other profile.
type CrossProfilePoliciesCrossProfileCopyPasteEnum string

const (
	CrossProfilePoliciesCrossProfileCopyPasteEnumCrossProfileCopyPasteUnspecified CrossProfilePoliciesCrossProfileCopyPasteEnum = "CROSS_PROFILE_COPY_PASTE_UNSPECIFIED"
	CrossProfilePoliciesCrossProfileCopyPasteEnumCopyFromWorkToPersonalDisallowed CrossProfilePoliciesCrossProfileCopyPasteEnum = "COPY_FROM_WORK_TO_PERSONAL_DISALLOWED"
	CrossProfilePoliciesCrossProfileCopyPasteEnumCrossProfileCopyPasteAllowed     CrossProfilePoliciesCrossProfileCopyPasteEnum = "CROSS_PROFILE_COPY_PASTE_ALLOWED"
)

func (e CrossProfilePoliciesCrossProfileCopyPasteEnum) ToPointer() *CrossProfilePoliciesCrossProfileCopyPasteEnum {
	return &e
}

func (e *CrossProfilePoliciesCrossProfileCopyPasteEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CROSS_PROFILE_COPY_PASTE_UNSPECIFIED":
		fallthrough
	case "COPY_FROM_WORK_TO_PERSONAL_DISALLOWED":
		fallthrough
	case "CROSS_PROFILE_COPY_PASTE_ALLOWED":
		*e = CrossProfilePoliciesCrossProfileCopyPasteEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrossProfilePoliciesCrossProfileCopyPasteEnum: %v", v)
	}
}

// CrossProfilePoliciesCrossProfileDataSharingEnum - Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.
type CrossProfilePoliciesCrossProfileDataSharingEnum string

const (
	CrossProfilePoliciesCrossProfileDataSharingEnumCrossProfileDataSharingUnspecified      CrossProfilePoliciesCrossProfileDataSharingEnum = "CROSS_PROFILE_DATA_SHARING_UNSPECIFIED"
	CrossProfilePoliciesCrossProfileDataSharingEnumCrossProfileDataSharingDisallowed       CrossProfilePoliciesCrossProfileDataSharingEnum = "CROSS_PROFILE_DATA_SHARING_DISALLOWED"
	CrossProfilePoliciesCrossProfileDataSharingEnumDataSharingFromWorkToPersonalDisallowed CrossProfilePoliciesCrossProfileDataSharingEnum = "DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED"
	CrossProfilePoliciesCrossProfileDataSharingEnumCrossProfileDataSharingAllowed          CrossProfilePoliciesCrossProfileDataSharingEnum = "CROSS_PROFILE_DATA_SHARING_ALLOWED"
)

func (e CrossProfilePoliciesCrossProfileDataSharingEnum) ToPointer() *CrossProfilePoliciesCrossProfileDataSharingEnum {
	return &e
}

func (e *CrossProfilePoliciesCrossProfileDataSharingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CROSS_PROFILE_DATA_SHARING_UNSPECIFIED":
		fallthrough
	case "CROSS_PROFILE_DATA_SHARING_DISALLOWED":
		fallthrough
	case "DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED":
		fallthrough
	case "CROSS_PROFILE_DATA_SHARING_ALLOWED":
		*e = CrossProfilePoliciesCrossProfileDataSharingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrossProfilePoliciesCrossProfileDataSharingEnum: %v", v)
	}
}

// CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum - Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls.
type CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum string

const (
	CrossProfilePoliciesShowWorkContactsInPersonalProfileEnumShowWorkContactsInPersonalProfileUnspecified CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum = "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED"
	CrossProfilePoliciesShowWorkContactsInPersonalProfileEnumShowWorkContactsInPersonalProfileDisallowed  CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum = "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED"
	CrossProfilePoliciesShowWorkContactsInPersonalProfileEnumShowWorkContactsInPersonalProfileAllowed     CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum = "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED"
)

func (e CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum) ToPointer() *CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum {
	return &e
}

func (e *CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED":
		fallthrough
	case "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED":
		fallthrough
	case "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED":
		*e = CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum: %v", v)
	}
}

// CrossProfilePoliciesWorkProfileWidgetsDefaultEnum - Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here.
type CrossProfilePoliciesWorkProfileWidgetsDefaultEnum string

const (
	CrossProfilePoliciesWorkProfileWidgetsDefaultEnumWorkProfileWidgetsDefaultUnspecified CrossProfilePoliciesWorkProfileWidgetsDefaultEnum = "WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED"
	CrossProfilePoliciesWorkProfileWidgetsDefaultEnumWorkProfileWidgetsDefaultAllowed     CrossProfilePoliciesWorkProfileWidgetsDefaultEnum = "WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED"
	CrossProfilePoliciesWorkProfileWidgetsDefaultEnumWorkProfileWidgetsDefaultDisallowed  CrossProfilePoliciesWorkProfileWidgetsDefaultEnum = "WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED"
)

func (e CrossProfilePoliciesWorkProfileWidgetsDefaultEnum) ToPointer() *CrossProfilePoliciesWorkProfileWidgetsDefaultEnum {
	return &e
}

func (e *CrossProfilePoliciesWorkProfileWidgetsDefaultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED":
		fallthrough
	case "WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED":
		fallthrough
	case "WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED":
		*e = CrossProfilePoliciesWorkProfileWidgetsDefaultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrossProfilePoliciesWorkProfileWidgetsDefaultEnum: %v", v)
	}
}

// CrossProfilePolicies - Cross-profile policies applied on the device.
type CrossProfilePolicies struct {
	// Whether text copied from one profile (personal or work) can be pasted in the other profile.
	CrossProfileCopyPaste *CrossProfilePoliciesCrossProfileCopyPasteEnum `json:"crossProfileCopyPaste,omitempty"`
	// Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.
	CrossProfileDataSharing *CrossProfilePoliciesCrossProfileDataSharingEnum `json:"crossProfileDataSharing,omitempty"`
	// Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls.
	ShowWorkContactsInPersonalProfile *CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum `json:"showWorkContactsInPersonalProfile,omitempty"`
	// Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here.
	WorkProfileWidgetsDefault *CrossProfilePoliciesWorkProfileWidgetsDefaultEnum `json:"workProfileWidgetsDefault,omitempty"`
}
