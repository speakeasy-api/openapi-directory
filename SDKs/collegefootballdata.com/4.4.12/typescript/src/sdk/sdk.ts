/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Betting } from "./betting";
import { Coaches } from "./coaches";
import { Conferences } from "./conferences";
import { Draft } from "./draft";
import { Drives } from "./drives";
import { Games } from "./games";
import { Metrics } from "./metrics";
import * as shared from "./models/shared";
import { Players } from "./players";
import { Plays } from "./plays";
import { Rankings } from "./rankings";
import { Ratings } from "./ratings";
import { Recruiting } from "./recruiting";
import { Stats } from "./stats";
import { Teams } from "./teams";
import { Venues } from "./venues";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.collegefootballdata.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with "Bearer " prepended (e.g. "Bearer your_key"). API keys can be acquired from the CollegeFootballData.com website.
 */
export class SDK {
  /**
   * Betting lines and data
   */
  public betting: Betting;
  /**
   * Information about coaches
   */
  public coaches: Coaches;
  /**
   * Conference information
   */
  public conferences: Conferences;
  /**
   * NFL Draft data
   */
  public draft: Draft;
  /**
   * Drive data
   */
  public drives: Drives;
  /**
   * Games scores and statistics
   */
  public games: Games;
  /**
   * Data relating to Predicted Points and other metrics
   */
  public metrics: Metrics;
  /**
   * Player information and data
   */
  public players: Players;
  /**
   * Play by play data
   */
  public plays: Plays;
  /**
   * Historical poll rankings
   */
  public rankings: Rankings;
  /**
   * Team rating data
   */
  public ratings: Ratings;
  /**
   * Recruiting rankings and data
   */
  public recruiting: Recruiting;
  /**
   * Statistical data
   */
  public stats: Stats;
  /**
   * Team information
   */
  public teams: Teams;
  /**
   * Information about venues
   */
  public venues: Venues;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.betting = new Betting(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.coaches = new Coaches(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.conferences = new Conferences(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.draft = new Draft(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.drives = new Drives(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.games = new Games(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.metrics = new Metrics(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.players = new Players(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.plays = new Plays(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rankings = new Rankings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ratings = new Ratings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.recruiting = new Recruiting(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.stats = new Stats(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.teams = new Teams(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.venues = new Venues(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
