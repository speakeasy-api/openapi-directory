// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaskAssociatedTaskItemTypeEnum - Can be one of `"Appointment"`, `"Patient"`, `"Message"`, `"Document"`, `"Lab order"`
type TaskAssociatedTaskItemTypeEnum string

const (
	TaskAssociatedTaskItemTypeEnumPatient       TaskAssociatedTaskItemTypeEnum = "Patient"
	TaskAssociatedTaskItemTypeEnumAppointment   TaskAssociatedTaskItemTypeEnum = "Appointment"
	TaskAssociatedTaskItemTypeEnumLabOrder      TaskAssociatedTaskItemTypeEnum = "Lab order"
	TaskAssociatedTaskItemTypeEnumDocument      TaskAssociatedTaskItemTypeEnum = "Document"
	TaskAssociatedTaskItemTypeEnumMessage       TaskAssociatedTaskItemTypeEnum = "Message"
	TaskAssociatedTaskItemTypeEnumLabDocument   TaskAssociatedTaskItemTypeEnum = "Lab document"
	TaskAssociatedTaskItemTypeEnumLabResult     TaskAssociatedTaskItemTypeEnum = "Lab result"
	TaskAssociatedTaskItemTypeEnumCommunication TaskAssociatedTaskItemTypeEnum = "Communication"
)

func (e *TaskAssociatedTaskItemTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Patient":
		fallthrough
	case "Appointment":
		fallthrough
	case "Lab order":
		fallthrough
	case "Document":
		fallthrough
	case "Message":
		fallthrough
	case "Lab document":
		fallthrough
	case "Lab result":
		fallthrough
	case "Communication":
		*e = TaskAssociatedTaskItemTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskAssociatedTaskItemTypeEnum: %s", s)
	}
}

type TaskAssociatedTaskItem struct {
	Task *int64 `json:"task,omitempty"`
	// Can be one of `"Appointment"`, `"Patient"`, `"Message"`, `"Document"`, `"Lab order"`
	Type *TaskAssociatedTaskItemTypeEnum `json:"type,omitempty"`
	// ID of the specified type object
	Value *int64 `json:"value,omitempty"`
}

// TaskTaskReminder - When the task is due
type TaskTaskReminder struct {
	// Due date time
	Time *string `json:"time,omitempty"`
}

// TaskTaskNote - Task note object
type TaskTaskNote struct {
	Archived  *bool   `json:"archived,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	ID        *int64  `json:"id,omitempty"`
	// ID of `/api/tasks`
	Task      *int64  `json:"task,omitempty"`
	Text      *string `json:"text,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// TaskPriorityEnum - Can be one of the following 10(Low), 20(Medium), 30(High), 40(Urgent)
type TaskPriorityEnum string

const (
	TaskPriorityEnumTen    TaskPriorityEnum = "10"
	TaskPriorityEnumTwenty TaskPriorityEnum = "20"
	TaskPriorityEnumThirty TaskPriorityEnum = "30"
	TaskPriorityEnumForty  TaskPriorityEnum = "40"
)

func (e *TaskPriorityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "10":
		fallthrough
	case "20":
		fallthrough
	case "30":
		fallthrough
	case "40":
		*e = TaskPriorityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskPriorityEnum: %s", s)
	}
}

// Task - Created
type Task struct {
	Archived *bool `json:"archived,omitempty"`
	// ID of `/api/users/` who assigned the task
	AssignedBy *string `json:"assigned_by,omitempty"`
	// Either `assignee_user` or `assignee_group` should be set
	AssigneeGroup *int64 `json:"assignee_group,omitempty"`
	// Either `assignee_user` or `assignee_group` should be set
	AssigneeUser *string `json:"assignee_user,omitempty"`
	// Associated task items
	AssociatedItems []TaskAssociatedTaskItem `json:"associated_items,omitempty"`
	Category        *int64                   `json:"category,omitempty"`
	CreatedAt       *string                  `json:"created_at,omitempty"`
	// ID of `/api/users` who created the task
	CreatedBy *string `json:"created_by,omitempty"`
	// When the task is due
	DueDate *TaskTaskReminder `json:"due_date,omitempty"`
	ID      *int64            `json:"id,omitempty"`
	// Additional notes of the task
	Notes []TaskTaskNote `json:"notes,omitempty"`
	// Can be one of the following 10(Low), 20(Medium), 30(High), 40(Urgent)
	Priority  *TaskPriorityEnum `json:"priority,omitempty"`
	Status    int64             `json:"status"`
	Title     string            `json:"title"`
	UpdatedAt *string           `json:"updated_at,omitempty"`
}
