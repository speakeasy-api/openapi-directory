// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// PendingTransactionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
type PendingTransactionCurrencyEnum string

const (
	PendingTransactionCurrencyEnumCad PendingTransactionCurrencyEnum = "CAD"
	PendingTransactionCurrencyEnumChf PendingTransactionCurrencyEnum = "CHF"
	PendingTransactionCurrencyEnumEur PendingTransactionCurrencyEnum = "EUR"
	PendingTransactionCurrencyEnumGbp PendingTransactionCurrencyEnum = "GBP"
	PendingTransactionCurrencyEnumJpy PendingTransactionCurrencyEnum = "JPY"
	PendingTransactionCurrencyEnumUsd PendingTransactionCurrencyEnum = "USD"
)

func (e *PendingTransactionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum string

const (
	PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumCad PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "CAD"
	PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumChf PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "CHF"
	PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumEur PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "EUR"
	PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumGbp PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "GBP"
	PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumJpy PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "JPY"
	PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumUsd PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "USD"
)

func (e *PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceAccountTransferInstruction - A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
type PendingTransactionPendingTransactionSourceAccountTransferInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency PendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum `json:"currency"`
	// The identifier of the Account Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// PendingTransactionPendingTransactionSourceACHTransferInstruction - A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
type PendingTransactionPendingTransactionSourceACHTransferInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the ACH Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum string

const (
	PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumCad PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "CAD"
	PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumChf PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "CHF"
	PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumEur PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "EUR"
	PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumGbp PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "GBP"
	PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumJpy PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "JPY"
	PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumUsd PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "USD"
)

func (e *PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum - The payment network used to process this card authorization
type PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum string

const (
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnumVisa PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum = "visa"
)

func (e *PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "visa":
		*e = PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum - For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
type PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum string

const (
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumMailPhoneOrder                                          PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "mail_phone_order"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumRecurring                                               PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "recurring"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumInstallment                                             PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "installment"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumUnknownMailPhoneOrder                                   PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "unknown_mail_phone_order"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumSecureElectronicCommerce                                PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "secure_electronic_commerce"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransactionAt3dsCapableMerchant PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction_at_3ds_capable_merchant"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransaction                     PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonSecureTransaction                                    PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_secure_transaction"
)

func (e *PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mail_phone_order":
		fallthrough
	case "recurring":
		fallthrough
	case "installment":
		fallthrough
	case "unknown_mail_phone_order":
		fallthrough
	case "secure_electronic_commerce":
		fallthrough
	case "non_authenticated_security_transaction_at_3ds_capable_merchant":
		fallthrough
	case "non_authenticated_security_transaction":
		fallthrough
	case "non_secure_transaction":
		*e = PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum - The method used to enter the cardholder's primary account number and card expiration date
type PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum string

const (
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumManual                     PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "manual"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripeNoCvv        PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe_no_cvv"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumOpticalCode                PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "optical_code"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCard      PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumContactless                PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumCredentialOnFile           PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "credential_on_file"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripe             PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumContactlessMagneticStripe  PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless_magnetic_stripe"
	PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCardNoCvv PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card_no_cvv"
)

func (e *PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manual":
		fallthrough
	case "magnetic_stripe_no_cvv":
		fallthrough
	case "optical_code":
		fallthrough
	case "integrated_circuit_card":
		fallthrough
	case "contactless":
		fallthrough
	case "credential_on_file":
		fallthrough
	case "magnetic_stripe":
		fallthrough
	case "contactless_magnetic_stripe":
		fallthrough
	case "integrated_circuit_card_no_cvv":
		*e = PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa - Fields specific to the `visa` network
type PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa struct {
	// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
	ElectronicCommerceIndicator PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum `json:"electronic_commerce_indicator"`
	// The method used to enter the cardholder's primary account number and card expiration date
	PointOfServiceEntryMode PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum `json:"point_of_service_entry_mode"`
}

// PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails - Fields specific to the `network`
type PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails struct {
	// Fields specific to the `visa` network
	Visa PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa `json:"visa"`
}

// PendingTransactionPendingTransactionSourceCardAuthorization - A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
type PendingTransactionPendingTransactionSourceCardAuthorization struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency PendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum `json:"currency"`
	// If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
	DigitalWalletTokenID string `json:"digital_wallet_token_id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The merchant descriptor of the merchant the card is transacting with.
	MerchantDescriptor string `json:"merchant_descriptor"`
	// The payment network used to process this card authorization
	Network PendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum `json:"network"`
	// Fields specific to the `network`
	NetworkDetails PendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails `json:"network_details"`
	// The identifier of the Real-Time Decision sent to approve or decline this transaction.
	RealTimeDecisionID string `json:"real_time_decision_id"`
}

// PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum string

const (
	PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumCad PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "CAD"
	PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumChf PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "CHF"
	PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumEur PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "EUR"
	PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumGbp PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "GBP"
	PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumJpy PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "JPY"
	PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumUsd PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "USD"
)

func (e *PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization - A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
type PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency             PendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                            `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                            `json:"merchant_category_code"`
	MerchantCity         string                                                                            `json:"merchant_city"`
	MerchantCountry      string                                                                            `json:"merchant_country"`
	MerchantDescriptor   string                                                                            `json:"merchant_descriptor"`
	MerchantState        string                                                                            `json:"merchant_state"`
}

// PendingTransactionPendingTransactionSourceCategoryEnum - The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type PendingTransactionPendingTransactionSourceCategoryEnum string

const (
	PendingTransactionPendingTransactionSourceCategoryEnumAccountTransferInstruction          PendingTransactionPendingTransactionSourceCategoryEnum = "account_transfer_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumAchTransferInstruction              PendingTransactionPendingTransactionSourceCategoryEnum = "ach_transfer_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumCardAuthorization                   PendingTransactionPendingTransactionSourceCategoryEnum = "card_authorization"
	PendingTransactionPendingTransactionSourceCategoryEnumCheckDepositInstruction             PendingTransactionPendingTransactionSourceCategoryEnum = "check_deposit_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumCheckTransferInstruction            PendingTransactionPendingTransactionSourceCategoryEnum = "check_transfer_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumInboundFundsHold                    PendingTransactionPendingTransactionSourceCategoryEnum = "inbound_funds_hold"
	PendingTransactionPendingTransactionSourceCategoryEnumCardRouteAuthorization              PendingTransactionPendingTransactionSourceCategoryEnum = "card_route_authorization"
	PendingTransactionPendingTransactionSourceCategoryEnumRealTimePaymentsTransferInstruction PendingTransactionPendingTransactionSourceCategoryEnum = "real_time_payments_transfer_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumWireDrawdownPaymentInstruction      PendingTransactionPendingTransactionSourceCategoryEnum = "wire_drawdown_payment_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumWireTransferInstruction             PendingTransactionPendingTransactionSourceCategoryEnum = "wire_transfer_instruction"
	PendingTransactionPendingTransactionSourceCategoryEnumOther                               PendingTransactionPendingTransactionSourceCategoryEnum = "other"
)

func (e *PendingTransactionPendingTransactionSourceCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account_transfer_instruction":
		fallthrough
	case "ach_transfer_instruction":
		fallthrough
	case "card_authorization":
		fallthrough
	case "check_deposit_instruction":
		fallthrough
	case "check_transfer_instruction":
		fallthrough
	case "inbound_funds_hold":
		fallthrough
	case "card_route_authorization":
		fallthrough
	case "real_time_payments_transfer_instruction":
		fallthrough
	case "wire_drawdown_payment_instruction":
		fallthrough
	case "wire_transfer_instruction":
		fallthrough
	case "other":
		*e = PendingTransactionPendingTransactionSourceCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCategoryEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum string

const (
	PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumCad PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "CAD"
	PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumChf PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "CHF"
	PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumEur PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "EUR"
	PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumGbp PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "GBP"
	PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumJpy PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "JPY"
	PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumUsd PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "USD"
)

func (e *PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCheckDepositInstruction - A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
type PendingTransactionPendingTransactionSourceCheckDepositInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the File containing the image of the back of the check that was deposited.
	BackImageFileID string `json:"back_image_file_id"`
	// The identifier of the Check Deposit.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency PendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum `json:"currency"`
	// The identifier of the File containing the image of the front of the check that was deposited.
	FrontImageFileID string `json:"front_image_file_id"`
}

// PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum string

const (
	PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumCad PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "CAD"
	PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumChf PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "CHF"
	PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumEur PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "EUR"
	PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumGbp PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "GBP"
	PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumJpy PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "JPY"
	PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumUsd PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "USD"
)

func (e *PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceCheckTransferInstruction - A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
type PendingTransactionPendingTransactionSourceCheckTransferInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency PendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum `json:"currency"`
	// The identifier of the Check Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
type PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum string

const (
	PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumCad PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "CAD"
	PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumChf PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "CHF"
	PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumEur PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "EUR"
	PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumGbp PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "GBP"
	PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumJpy PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "JPY"
	PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumUsd PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "USD"
)

func (e *PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum - The status of the hold.
type PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum string

const (
	PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnumHeld     PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = "held"
	PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnumComplete PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = "complete"
)

func (e *PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "held":
		fallthrough
	case "complete":
		*e = PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum: %s", s)
	}
}

// PendingTransactionPendingTransactionSourceInboundFundsHold - A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
type PendingTransactionPendingTransactionSourceInboundFundsHold struct {
	// The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// When the hold will be released automatically. Certain conditions may cause it to be released before this time.
	AutomaticallyReleasesAt time.Time `json:"automatically_releases_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
	Currency PendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum `json:"currency"`
	// The ID of the Transaction for which funds were held.
	HeldTransactionID string `json:"held_transaction_id"`
	// When the hold was released (if it has been released).
	ReleasedAt time.Time `json:"released_at"`
	// The status of the hold.
	Status PendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum `json:"status"`
}

// PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction - A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
type PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction struct {
	AccountNumber string `json:"account_number"`
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
}

// PendingTransactionPendingTransactionSourceWireTransferInstruction - A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
type PendingTransactionPendingTransactionSourceWireTransferInstruction struct {
	AccountNumber string `json:"account_number"`
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
	TransferID         string `json:"transfer_id"`
}

// PendingTransactionPendingTransactionSource - This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
type PendingTransactionPendingTransactionSource struct {
	// A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
	AccountTransferInstruction PendingTransactionPendingTransactionSourceAccountTransferInstruction `json:"account_transfer_instruction"`
	// A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
	AchTransferInstruction PendingTransactionPendingTransactionSourceACHTransferInstruction `json:"ach_transfer_instruction"`
	// A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
	CardAuthorization PendingTransactionPendingTransactionSourceCardAuthorization `json:"card_authorization"`
	// A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
	CardRouteAuthorization PendingTransactionPendingTransactionSourceDeprecatedCardAuthorization `json:"card_route_authorization"`
	// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Category PendingTransactionPendingTransactionSourceCategoryEnum `json:"category"`
	// A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
	CheckDepositInstruction PendingTransactionPendingTransactionSourceCheckDepositInstruction `json:"check_deposit_instruction"`
	// A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
	CheckTransferInstruction PendingTransactionPendingTransactionSourceCheckTransferInstruction `json:"check_transfer_instruction"`
	// A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
	InboundFundsHold PendingTransactionPendingTransactionSourceInboundFundsHold `json:"inbound_funds_hold"`
	// A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
	WireDrawdownPaymentInstruction PendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction `json:"wire_drawdown_payment_instruction"`
	// A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
	WireTransferInstruction PendingTransactionPendingTransactionSourceWireTransferInstruction `json:"wire_transfer_instruction"`
}

// PendingTransactionStatusEnum - Whether the Pending Transaction has been confirmed and has an associated Transaction.
type PendingTransactionStatusEnum string

const (
	PendingTransactionStatusEnumPending  PendingTransactionStatusEnum = "pending"
	PendingTransactionStatusEnumComplete PendingTransactionStatusEnum = "complete"
)

func (e *PendingTransactionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "complete":
		*e = PendingTransactionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionStatusEnum: %s", s)
	}
}

// PendingTransactionTypeEnum - A constant representing the object's type. For this resource it will always be `pending_transaction`.
type PendingTransactionTypeEnum string

const (
	PendingTransactionTypeEnumPendingTransaction PendingTransactionTypeEnum = "pending_transaction"
)

func (e *PendingTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending_transaction":
		*e = PendingTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTransactionTypeEnum: %s", s)
	}
}

// PendingTransaction - Pending Transactions are potential future additions and removals of money from your bank account.
type PendingTransaction struct {
	// The identifier for the account this Pending Transaction belongs to.
	AccountID string `json:"account_id"`
	// The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
	Currency PendingTransactionCurrencyEnum `json:"currency"`
	// For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
	Description string `json:"description"`
	// The Pending Transaction identifier.
	ID string `json:"id"`
	// The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
	RouteID string `json:"route_id"`
	// The type of the route this Pending Transaction came through.
	RouteType string `json:"route_type"`
	// This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
	Source PendingTransactionPendingTransactionSource `json:"source"`
	// Whether the Pending Transaction has been confirmed and has an associated Transaction.
	Status PendingTransactionStatusEnum `json:"status"`
	// A constant representing the object's type. For this resource it will always be `pending_transaction`.
	Type PendingTransactionTypeEnum `json:"type"`
}
