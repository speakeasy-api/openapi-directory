// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NtmksSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NtmksRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// NtmksRequestBodyFormatEnum - The format of the certificate in response.
type NtmksRequestBodyFormatEnum string

const (
	NtmksRequestBodyFormatEnumPdf NtmksRequestBodyFormatEnum = "pdf"
)

func (e NtmksRequestBodyFormatEnum) ToPointer() *NtmksRequestBodyFormatEnum {
	return &e
}

func (e *NtmksRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = NtmksRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NtmksRequestBodyFormatEnum: %v", v)
	}
}

// NtmksRequestBody - Request format
type NtmksRequestBody struct {
	CertificateParameters *NtmksRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NtmksRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ntmks504ApplicationJSONErrorEnum string

const (
	Ntmks504ApplicationJSONErrorEnumGatewayTimeout Ntmks504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ntmks504ApplicationJSONErrorEnum) ToPointer() *Ntmks504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ntmks504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks504ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ntmks504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ntmks504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ntmks504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks504ApplicationJSON - Gateway timeout
type Ntmks504ApplicationJSON struct {
	Error            *Ntmks504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntmks503ApplicationJSONErrorEnum string

const (
	Ntmks503ApplicationJSONErrorEnumServiceUnavailable Ntmks503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ntmks503ApplicationJSONErrorEnum) ToPointer() *Ntmks503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ntmks503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks503ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ntmks503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ntmks503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ntmks503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks503ApplicationJSON - Service unavailable
type Ntmks503ApplicationJSON struct {
	Error            *Ntmks503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntmks502ApplicationJSONErrorEnum string

const (
	Ntmks502ApplicationJSONErrorEnumBadGatewy Ntmks502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ntmks502ApplicationJSONErrorEnum) ToPointer() *Ntmks502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ntmks502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks502ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ntmks502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ntmks502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ntmks502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks502ApplicationJSON - Bad gateway
type Ntmks502ApplicationJSON struct {
	Error            *Ntmks502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntmks500ApplicationJSONErrorEnum string

const (
	Ntmks500ApplicationJSONErrorEnumInternalServerError Ntmks500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ntmks500ApplicationJSONErrorEnum) ToPointer() *Ntmks500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ntmks500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks500ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks500ApplicationJSONErrorDescriptionEnumInternalServerError Ntmks500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ntmks500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ntmks500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks500ApplicationJSON - Internal server error
type Ntmks500ApplicationJSON struct {
	Error            *Ntmks500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntmks404ApplicationJSONErrorEnum string

const (
	Ntmks404ApplicationJSONErrorEnumRecordNotFound Ntmks404ApplicationJSONErrorEnum = "record_not_found"
	Ntmks404ApplicationJSONErrorEnumURLNotFound    Ntmks404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ntmks404ApplicationJSONErrorEnum) ToPointer() *Ntmks404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ntmks404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks404ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ntmks404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ntmks404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ntmks404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ntmks404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ntmks404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks404ApplicationJSON - No record found
type Ntmks404ApplicationJSON struct {
	Error            *Ntmks404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntmks401ApplicationJSONErrorEnum string

const (
	Ntmks401ApplicationJSONErrorEnumInvalidAuthentication Ntmks401ApplicationJSONErrorEnum = "invalid_authentication"
	Ntmks401ApplicationJSONErrorEnumInvalidAuthorization  Ntmks401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ntmks401ApplicationJSONErrorEnum) ToPointer() *Ntmks401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ntmks401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks401ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ntmks401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ntmks401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ntmks401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ntmks401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ntmks401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks401ApplicationJSON - Unauthorized access
type Ntmks401ApplicationJSON struct {
	Error            *Ntmks401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntmks400ApplicationJSONErrorEnum string

const (
	Ntmks400ApplicationJSONErrorEnumMissingParameter Ntmks400ApplicationJSONErrorEnum = "missing_parameter"
	Ntmks400ApplicationJSONErrorEnumInvalidParameter Ntmks400ApplicationJSONErrorEnum = "invalid_parameter"
	Ntmks400ApplicationJSONErrorEnumInvalidFormat    Ntmks400ApplicationJSONErrorEnum = "invalid_format"
	Ntmks400ApplicationJSONErrorEnumInvalidTxnid     Ntmks400ApplicationJSONErrorEnum = "invalid_txnid"
	Ntmks400ApplicationJSONErrorEnumInvalidConsentid Ntmks400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ntmks400ApplicationJSONErrorEnum) ToPointer() *Ntmks400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ntmks400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ntmks400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ntmks400ApplicationJSONErrorDescriptionEnum string

const (
	Ntmks400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ntmks400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ntmks400ApplicationJSONErrorDescriptionEnumBadRequest                              Ntmks400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ntmks400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ntmks400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ntmks400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ntmks400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ntmks400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ntmks400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ntmks400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ntmks400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ntmks400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ntmks400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntmks400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ntmks400ApplicationJSON - Bad request
type Ntmks400ApplicationJSON struct {
	Error            *Ntmks400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntmks400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NtmksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ntmks400ApplicationJSONObject *Ntmks400ApplicationJSON
	// Unauthorized access
	Ntmks401ApplicationJSONObject *Ntmks401ApplicationJSON
	// No record found
	Ntmks404ApplicationJSONObject *Ntmks404ApplicationJSON
	// Internal server error
	Ntmks500ApplicationJSONObject *Ntmks500ApplicationJSON
	// Bad gateway
	Ntmks502ApplicationJSONObject *Ntmks502ApplicationJSON
	// Service unavailable
	Ntmks503ApplicationJSONObject *Ntmks503ApplicationJSON
	// Gateway timeout
	Ntmks504ApplicationJSONObject *Ntmks504ApplicationJSON
}
