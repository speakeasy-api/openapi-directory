"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgramInformationBatch = exports.ProgramInformationBatchStatusEnum = exports.ProgramInformationBatchProgram = exports.ProgramInformationBatchFormatEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The format of the metadata file defining the create or update actions to be performed on one or more EPG programs.
 */
var ProgramInformationBatchFormatEnum;
(function (ProgramInformationBatchFormatEnum) {
    ProgramInformationBatchFormatEnum["Radiodns"] = "radiodns";
})(ProgramInformationBatchFormatEnum = exports.ProgramInformationBatchFormatEnum || (exports.ProgramInformationBatchFormatEnum = {}));
/**
 * The program information to associate the ingested metadata with. This is only required if the metadata format doesn't provide the program title and air date information directly. If this is specified, it will overrite the value specfified in the metadata file. If this is specified, the metadata file should only contain one program.
 */
var ProgramInformationBatchProgram = /** @class */ (function (_super) {
    __extends(ProgramInformationBatchProgram, _super);
    function ProgramInformationBatchProgram() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "airDate" }),
        __metadata("design:type", String)
    ], ProgramInformationBatchProgram.prototype, "airDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "title" }),
        __metadata("design:type", String)
    ], ProgramInformationBatchProgram.prototype, "title", void 0);
    return ProgramInformationBatchProgram;
}(utils_1.SpeakeasyBase));
exports.ProgramInformationBatchProgram = ProgramInformationBatchProgram;
/**
 * The current processing status.
 */
var ProgramInformationBatchStatusEnum;
(function (ProgramInformationBatchStatusEnum) {
    ProgramInformationBatchStatusEnum["Queued"] = "queued";
    ProgramInformationBatchStatusEnum["Processing"] = "processing";
    ProgramInformationBatchStatusEnum["Failed"] = "failed";
    ProgramInformationBatchStatusEnum["Successful"] = "successful";
})(ProgramInformationBatchStatusEnum = exports.ProgramInformationBatchStatusEnum || (exports.ProgramInformationBatchStatusEnum = {}));
/**
 * An electronic program guide (EPG) batch operation to create or update metadata on one or more guide programs.
 */
var ProgramInformationBatch = /** @class */ (function (_super) {
    __extends(ProgramInformationBatch, _super);
    function ProgramInformationBatch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdDate" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "createdDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "finishedDate" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "finishedDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "format" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "format", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], ProgramInformationBatch.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "message", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "program" }),
        (0, class_transformer_1.Type)(function () { return ProgramInformationBatchProgram; }),
        __metadata("design:type", ProgramInformationBatchProgram)
    ], ProgramInformationBatch.prototype, "program", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uri" }),
        __metadata("design:type", String)
    ], ProgramInformationBatch.prototype, "uri", void 0);
    return ProgramInformationBatch;
}(utils_1.SpeakeasyBase));
exports.ProgramInformationBatch = ProgramInformationBatch;
