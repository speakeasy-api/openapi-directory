"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class GetNetworkWirelessRfProfilesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    include_template_profiles: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTemplateProfiles', 'style': 'form', 'explode': True }})
    r"""If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false."""  
    

@dataclasses.dataclass
class GetNetworkWirelessRfProfilesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_wireless_rf_profiles_200_application_json_objects: Optional[list[dict[str, Any]]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    