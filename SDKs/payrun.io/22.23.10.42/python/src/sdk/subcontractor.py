"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SubContractor:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_sub_contractor(self, request: operations.DeleteSubContractorRequest) -> operations.DeleteSubContractorResponse:
        r"""Delete an sub contractor
        Delete the specified sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_sub_contractor_revision(self, request: operations.DeleteSubContractorRevisionRequest) -> operations.DeleteSubContractorRevisionResponse:
        r"""Delete an sub contractor revision matching the specified revision date.
        Deletes the specified sub contractor revision for the matching revision date
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubContractorRevisionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubContractorRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_sub_contractor_revision_by_number(self, request: operations.DeleteSubContractorRevisionByNumberRequest) -> operations.DeleteSubContractorRevisionByNumberResponse:
        r"""Delete an SubContractor revision matching the specified revision number.
        Deletes the specified sub contractor revision for the matching revision number
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubContractorRevisionByNumberRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Revision/{RevisionNumber}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubContractorRevisionByNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractor_by_effective_date(self, request: operations.GetSubContractorByEffectiveDateRequest) -> operations.GetSubContractorByEffectiveDateResponse:
        r"""Get sub contractor by effective date.
        Returns the sub contractor's state at the specified effective date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorByEffectiveDateRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorByEffectiveDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubContractor])
                res.sub_contractor = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractor_from_employer(self, request: operations.GetSubContractorFromEmployerRequest) -> operations.GetSubContractorFromEmployerResponse:
        r"""Get sub contractor from employer
        Gets the specified sub contractor from employer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorFromEmployerRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubContractor])
                res.sub_contractor = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractor_revision_by_number(self, request: operations.GetSubContractorRevisionByNumberRequest) -> operations.GetSubContractorRevisionByNumberResponse:
        r"""Gets the sub contractor by revision number
        Get the sub contractor revision matching the specified revision number
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorRevisionByNumberRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Revision/{RevisionNumber}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorRevisionByNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubContractor])
                res.sub_contractor = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractor_revisions(self, request: operations.GetSubContractorRevisionsRequest) -> operations.GetSubContractorRevisionsResponse:
        r"""Get all sub contractor revisions
        Gets links to all the sub contractor revisions
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorRevisionsRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Revisions', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorRevisionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractors_by_effective_date(self, request: operations.GetSubContractorsByEffectiveDateRequest) -> operations.GetSubContractorsByEffectiveDateResponse:
        r"""Get sub contractors from employer at a given effective date.
        Get links to all sub contractors for the employer on specified effective date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorsByEffectiveDateRequest, base_url, '/Employer/{EmployerId}/SubContractors/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorsByEffectiveDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractors_from_employer(self, request: operations.GetSubContractorsFromEmployerRequest) -> operations.GetSubContractorsFromEmployerResponse:
        r"""Get sub contractors from employer.
        Get links to all sub contractors for the specified employer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorsFromEmployerRequest, base_url, '/Employer/{EmployerId}/SubContractors', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorsFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def patch_sub_contractor(self, request: operations.PatchSubContractorRequest) -> operations.PatchSubContractorResponse:
        r"""Patches the sub contractor
        Patches the specified sub contractor with the supplied values
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "sub_contractor", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubContractor])
                res.sub_contractor = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_sub_contractor_into_employer(self, request: operations.PostSubContractorIntoEmployerRequest) -> operations.PostSubContractorIntoEmployerResponse:
        r"""Create a new sub contractor
        Create a new sub contractor object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSubContractorIntoEmployerRequest, base_url, '/Employer/{EmployerId}/SubContractors', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "sub_contractor", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSubContractorIntoEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_sub_contractor_into_employer(self, request: operations.PutSubContractorIntoEmployerRequest) -> operations.PutSubContractorIntoEmployerResponse:
        r"""Updates the sub contractor
        Updates the existing specified sub contractor object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSubContractorIntoEmployerRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "sub_contractor", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSubContractorIntoEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubContractor])
                res.sub_contractor = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    