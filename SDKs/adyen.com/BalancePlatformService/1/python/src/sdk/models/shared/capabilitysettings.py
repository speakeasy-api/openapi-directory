"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amount as shared_amount
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CapabilitySettingsFundingSourceEnum(str, Enum):
    CREDIT = 'credit'
    DEBIT = 'debit'
    PREPAID = 'prepaid'

class CapabilitySettingsIntervalEnum(str, Enum):
    r"""The period when the rule conditions apply."""
    DAILY = 'daily'
    MONTHLY = 'monthly'
    WEEKLY = 'weekly'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CapabilitySettings:
    
    amount_per_industry: Optional[dict[str, shared_amount.Amount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountPerIndustry'), 'exclude': lambda f: f is None }})
    r"""The maximum amount a card holder can spend per industry."""  
    authorized_card_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedCardUsers'), 'exclude': lambda f: f is None }})
    r"""The number of card holders who can use the card."""  
    funding_source: Optional[list[CapabilitySettingsFundingSourceEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundingSource'), 'exclude': lambda f: f is None }})
    r"""The funding source of the card, for example **debit**."""  
    interval: Optional[CapabilitySettingsIntervalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval'), 'exclude': lambda f: f is None }})
    r"""The period when the rule conditions apply."""  
    max_amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxAmount'), 'exclude': lambda f: f is None }})  
    