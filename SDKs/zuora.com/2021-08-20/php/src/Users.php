<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Multi-entity: List all entities that a user can access
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
     * 
     * Retrieves detailed information about all the entities that a user has permission to access.
     * 
     * ## User Access Permission
     * You can make the call as any entity user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEntitiesUserAccessibleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEntitiesUserAccessibleResponse
     */
	public function getEntitiesUserAccessible(
        \OpenAPI\OpenAPI\Models\Operations\GETEntitiesUserAccessibleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEntitiesUserAccessibleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{username}/accessible-entities', \OpenAPI\OpenAPI\Models\Operations\GETEntitiesUserAccessibleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEntitiesUserAccessibleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEntitiesUserAccessibleResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETEntitiesUserAccessibleResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Accept user access
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
     * 
     * Accepts user access to an entity.
     * 
     * ## User Access Permission
     * You must make the calls as an administrator of the entity that you want to accept the user access to. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTAcceptUserAccessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTAcceptUserAccessResponse
     */
	public function putAcceptUserAccess(
        \OpenAPI\OpenAPI\Models\Operations\PUTAcceptUserAccessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTAcceptUserAccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{username}/accept-access', \OpenAPI\OpenAPI\Models\Operations\PUTAcceptUserAccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTAcceptUserAccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putAcceptUserAccessResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PUTAcceptUserAccessResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Deny user access
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
     * 
     * Denies a user access to an entity. 
     * 
     * ## User Access Permission
     * You must make the calls as an administrator of the entity that you want to deny the user access to.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTDenyUserAccessRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTDenyUserAccessResponse
     */
	public function putDenyUserAccess(
        \OpenAPI\OpenAPI\Models\Operations\PUTDenyUserAccessRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTDenyUserAccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{username}/deny-access', \OpenAPI\OpenAPI\Models\Operations\PUTDenyUserAccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTDenyUserAccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putDenyUserAccessResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PUTDenyUserAccessResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Send user access requests
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
     * 
     * Sends access requests to the entities that a user wants to access.
     * 
     * ## User Access Permission
     * You must make the call as an administrator of the entity, in which the request user is created. Also, this administrator must have the permission to access the entities that the request user wants to access.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTSendUserAccessRequestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTSendUserAccessRequestsResponse
     */
	public function putSendUserAccessRequests(
        \OpenAPI\OpenAPI\Models\Operations\PUTSendUserAccessRequestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTSendUserAccessRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{username}/request-access', \OpenAPI\OpenAPI\Models\Operations\PUTSendUserAccessRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putSendUserAccessRequestType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTSendUserAccessRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putSendUserAccessRequestResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PUTSendUserAccessRequestResponseType', 'json');
            }
        }

        return $response;
    }
}