/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Location {
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public Address address;

    public Location withAddress(Address address) {
        this.address = address;
        return this;
    }
    
    /**
     * The email of the location.
     * This email is visible to the customers of the location.
     * For example, the email appears on customer receipts. 
     * For example, `help&amp;#64;squareup.com`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("business_email")
    public String businessEmail;

    public Location withBusinessEmail(String businessEmail) {
        this.businessEmail = businessEmail;
        return this;
    }
    
    /**
     * Represents the hours of operation for a business location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("business_hours")
    public BusinessHours businessHours;

    public Location withBusinessHours(BusinessHours businessHours) {
        this.businessHours = businessHours;
        return this;
    }
    
    /**
     * The business name of the location
     * This is the name visible to the customers of the location.
     * For example, this name appears on customer receipts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("business_name")
    public String businessName;

    public Location withBusinessName(String businessName) {
        this.businessName = businessName;
        return this;
    }
    
    /**
     * The Square features that are enabled for the location.
     * See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    public String[] capabilities;

    public Location withCapabilities(String[] capabilities) {
        this.capabilities = capabilities;
        return this;
    }
    
    /**
     * Latitude and longitude coordinates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinates")
    public Coordinates coordinates;

    public Location withCoordinates(Coordinates coordinates) {
        this.coordinates = coordinates;
        return this;
    }
    
    /**
     * The country of the location, in ISO 3166-1-alpha-2 format.
     * 
     * See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public Location withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The time when the location was created, in RFC 3339 format.
     * For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public Location withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The currency used for all transactions at this location,
     * in ISO 4217 format.
     * See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public Location withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The description of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Location withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facebook_url")
    public String facebookUrl;

    public Location withFacebookUrl(String facebookUrl) {
        this.facebookUrl = facebookUrl;
        return this;
    }
    
    /**
     * The URL of a full-format logo image for the location. The Seller must choose this logo in the
     * Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
     * that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
     * and is recommended to be at least 1280x648 pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_format_logo_url")
    public String fullFormatLogoUrl;

    public Location withFullFormatLogoUrl(String fullFormatLogoUrl) {
        this.fullFormatLogoUrl = fullFormatLogoUrl;
        return this;
    }
    
    /**
     * The Square-issued ID of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Location withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The Instagram username of the location without the '&amp;#64;' symbol. For example, `square`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instagram_username")
    public String instagramUsername;

    public Location withInstagramUsername(String instagramUsername) {
        this.instagramUsername = instagramUsername;
        return this;
    }
    
    /**
     * The language associated with the location, in
     * [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A). 
     * For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language_code")
    public String languageCode;

    public Location withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The URL of the logo image for the location. The Seller must choose this logo in the Seller
     * dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
     * that Square generates on behalf of the Seller. This image should have an aspect ratio
     * close to 1:1 and is recommended to be at least 200x200 pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_url")
    public String logoUrl;

    public Location withLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
        return this;
    }
    
    /**
     * The merchant category code (MCC) of the location, as standardized by ISO 18245.
     * The MCC describes the kind of goods or services sold at the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mcc")
    public String mcc;

    public Location withMcc(String mcc) {
        this.mcc = mcc;
        return this;
    }
    
    /**
     * The ID of the merchant that owns the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_id")
    public String merchantId;

    public Location withMerchantId(String merchantId) {
        this.merchantId = merchantId;
        return this;
    }
    
    /**
     * The name of the location.
     * This information appears in the dashboard as the nickname.
     * A location name must be unique within a seller account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Location withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The phone number of the location in human readable format. For example, `+353 80 0 098 8099`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;

    public Location withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * The URL of the Point of Sale background image for the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pos_background_url")
    public String posBackgroundUrl;

    public Location withPosBackgroundUrl(String posBackgroundUrl) {
        this.posBackgroundUrl = posBackgroundUrl;
        return this;
    }
    
    /**
     * The status of the location, either active or inactive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Location withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The tax IDs that a Location is operating under.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_ids")
    public TaxIds taxIds;

    public Location withTaxIds(TaxIds taxIds) {
        this.taxIds = taxIds;
        return this;
    }
    
    /**
     * The [IANA Timezone](https://www.iana.org/time-zones) identifier for
     * the timezone of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public Location withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * The Twitter username of the location without the '&amp;#64;' symbol. For example, `Square`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_username")
    public String twitterUsername;

    public Location withTwitterUsername(String twitterUsername) {
        this.twitterUsername = twitterUsername;
        return this;
    }
    
    /**
     * The type of the location, either physical or mobile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public Location withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The website URL of the location.  For example, `https://squareup.com`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website_url")
    public String websiteUrl;

    public Location withWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
    }
    
    public Location(){}
}
