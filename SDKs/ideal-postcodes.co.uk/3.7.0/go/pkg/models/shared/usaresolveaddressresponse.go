// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type UsaResolveAddressResponseCodeEnum string

const (
	UsaResolveAddressResponseCodeEnumTwoThousand UsaResolveAddressResponseCodeEnum = "2000"
)

func (e *UsaResolveAddressResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = UsaResolveAddressResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaResolveAddressResponseCodeEnum: %s", s)
	}
}

type UsaResolveAddressResponseMessageEnum string

const (
	UsaResolveAddressResponseMessageEnumSuccess UsaResolveAddressResponseMessageEnum = "Success"
)

func (e *UsaResolveAddressResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = UsaResolveAddressResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaResolveAddressResponseMessageEnum: %s", s)
	}
}

type UsaResolveAddressResponseResultType string

const (
	UsaResolveAddressResponseResultTypeUspsAddress      UsaResolveAddressResponseResultType = "UspsAddress"
	UsaResolveAddressResponseResultTypeUsaGlobalAddress UsaResolveAddressResponseResultType = "UsaGlobalAddress"
)

type UsaResolveAddressResponseResult struct {
	UspsAddress      *UspsAddress
	UsaGlobalAddress *UsaGlobalAddress

	Type UsaResolveAddressResponseResultType
}

func CreateUsaResolveAddressResponseResultUspsAddress(uspsAddress UspsAddress) UsaResolveAddressResponseResult {
	typ := UsaResolveAddressResponseResultTypeUspsAddress

	return UsaResolveAddressResponseResult{
		UspsAddress: &uspsAddress,
		Type:        typ,
	}
}

func CreateUsaResolveAddressResponseResultUsaGlobalAddress(usaGlobalAddress UsaGlobalAddress) UsaResolveAddressResponseResult {
	typ := UsaResolveAddressResponseResultTypeUsaGlobalAddress

	return UsaResolveAddressResponseResult{
		UsaGlobalAddress: &usaGlobalAddress,
		Type:             typ,
	}
}

func (u *UsaResolveAddressResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	uspsAddress := new(UspsAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&uspsAddress); err == nil {
		u.UspsAddress = uspsAddress
		u.Type = UsaResolveAddressResponseResultTypeUspsAddress
		return nil
	}

	usaGlobalAddress := new(UsaGlobalAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&usaGlobalAddress); err == nil {
		u.UsaGlobalAddress = usaGlobalAddress
		u.Type = UsaResolveAddressResponseResultTypeUsaGlobalAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UsaResolveAddressResponseResult) MarshalJSON() ([]byte, error) {
	if u.UspsAddress != nil {
		return json.Marshal(u.UspsAddress)
	}

	if u.UsaGlobalAddress != nil {
		return json.Marshal(u.UsaGlobalAddress)
	}

	return nil, nil
}

// UsaResolveAddressResponse - Success
type UsaResolveAddressResponse struct {
	Code    UsaResolveAddressResponseCodeEnum    `json:"code"`
	Message UsaResolveAddressResponseMessageEnum `json:"message"`
	Result  UsaResolveAddressResponseResult      `json:"result"`
}
