/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SourceGetMetadataRequest } from "./sourcegetmetadatarequest";
import { SourceSplitRequest } from "./sourcesplitrequest";
import { Expose, Type } from "class-transformer";

/**
 * A work item that represents the different operations that can be performed on a user-defined Source specification.
 */
export class SourceOperationRequest extends SpeakeasyBase {
  /**
   * A request to compute the SourceMetadata of a Source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "getMetadata" })
  @Type(() => SourceGetMetadataRequest)
  getMetadata?: SourceGetMetadataRequest;

  /**
   * User-provided name of the Read instruction for this source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * System-defined name for the Read instruction for this source in the original workflow graph.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originalName" })
  originalName?: string;

  /**
   * Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "split" })
  @Type(() => SourceSplitRequest)
  split?: SourceSplitRequest;

  /**
   * System-defined name of the stage containing the source operation. Unique across the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stageName" })
  stageName?: string;

  /**
   * System-defined name of the Read instruction for this source. Unique across the workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "systemName" })
  systemName?: string;
}
