/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CardConfiguration {
    /**
     * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activation")
    public String activation;
    public CardConfiguration withActivation(String activation) {
        this.activation = activation;
        return this;
    }
    
    /**
     * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process. 
     * 
     * Maximum length: 255 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activationUrl")
    public String activationUrl;
    public CardConfiguration withActivationUrl(String activationUrl) {
        this.activationUrl = activationUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bulkAddress")
    public BulkAddress bulkAddress;
    public CardConfiguration withBulkAddress(BulkAddress bulkAddress) {
        this.bulkAddress = bulkAddress;
        return this;
    }
    
    /**
     * The ID of the card image. This is the image that will be printed on the full front of the card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardImageId")
    public String cardImageId;
    public CardConfiguration withCardImageId(String cardImageId) {
        this.cardImageId = cardImageId;
        return this;
    }
    
    /**
     * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    public String carrier;
    public CardConfiguration withCarrier(String carrier) {
        this.carrier = carrier;
        return this;
    }
    
    /**
     * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrierImageId")
    public String carrierImageId;
    public CardConfiguration withCarrierImageId(String carrierImageId) {
        this.carrierImageId = carrierImageId;
        return this;
    }
    
    /**
     * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
     * 
     * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configurationProfileId")
    public String configurationProfileId;
    public CardConfiguration withConfigurationProfileId(String configurationProfileId) {
        this.configurationProfileId = configurationProfileId;
        return this;
    }
    
    /**
     * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public CardConfiguration withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Overrides the envelope design ID defined in the `configurationProfileId`. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope")
    public String envelope;
    public CardConfiguration withEnvelope(String envelope) {
        this.envelope = envelope;
        return this;
    }
    
    /**
     * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insert")
    public String insert;
    public CardConfiguration withInsert(String insert) {
        this.insert = insert;
        return this;
    }
    
    /**
     * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;
    public CardConfiguration withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoImageId")
    public String logoImageId;
    public CardConfiguration withLogoImageId(String logoImageId) {
        this.logoImageId = logoImageId;
        return this;
    }
    
    /**
     * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinMailer")
    public String pinMailer;
    public CardConfiguration withPinMailer(String pinMailer) {
        this.pinMailer = pinMailer;
        return this;
    }
    
    /**
     * Overrides the logistics company defined in the `configurationProfileId`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipmentMethod")
    public String shipmentMethod;
    public CardConfiguration withShipmentMethod(String shipmentMethod) {
        this.shipmentMethod = shipmentMethod;
        return this;
    }
    
}
