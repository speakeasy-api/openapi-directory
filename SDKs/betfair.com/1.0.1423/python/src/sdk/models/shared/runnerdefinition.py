"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class RunnerDefinitionStatusEnum(str, Enum):
    ACTIVE = 'ACTIVE'
    WINNER = 'WINNER'
    LOSER = 'LOSER'
    REMOVED = 'REMOVED'
    REMOVED_VACANT = 'REMOVED_VACANT'
    HIDDEN = 'HIDDEN'
    PLACED = 'PLACED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunnerDefinition:
    
    adjustment_factor: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjustmentFactor'), 'exclude': lambda f: f is None }})  
    bsp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bsp'), 'exclude': lambda f: f is None }})  
    hc: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hc'), 'exclude': lambda f: f is None }})
    r"""Handicap - the handicap of the runner (selection) (null if not applicable)"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Selection Id - the id of the runner (selection)"""  
    removal_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removalDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    sort_priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortPriority'), 'exclude': lambda f: f is None }})  
    status: Optional[RunnerDefinitionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    