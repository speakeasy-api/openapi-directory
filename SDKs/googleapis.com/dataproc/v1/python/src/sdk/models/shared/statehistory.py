"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StateHistoryStateEnum(str, Enum):
    r"""Output only. The state of the batch at this point in history."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StateHistory:
    r"""Historical state information."""
    
    state: Optional[StateHistoryStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the batch at this point in history."""  
    state_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateMessage'), 'exclude': lambda f: f is None }})
    r"""Output only. Details about the state at this point in history."""  
    state_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateStartTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the batch entered the historical state."""  
    