/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Patient Management Controller
 */
export class PatientManagementController {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * getPatientManagement
   *
   * @remarks
   * getPatientManagement
   */
  getPatientManagement(
    req: operations.GetPatientManagementRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPatientManagementResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPatientManagementRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPatientManagementResponse =
        new operations.GetPatientManagementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patientManagement = utils.objectToClass(
              httpRes?.data,
              shared.PatientManagement
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getPatientManagementDiagnoses
   *
   * @remarks
   * getPatientManagementDiagnoses
   */
  getPatientManagementDiagnoses(
    config?: AxiosRequestConfig
  ): Promise<operations.GetPatientManagementDiagnosesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/patientmanagement/diagnoses";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPatientManagementDiagnosesResponse =
        new operations.GetPatientManagementDiagnosesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.codes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.codes = utils.objectToClass(
              httpRes?.data,
              shared.Code,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getPatientManagementLookupTypes
   *
   * @remarks
   * getPatientManagementLookupTypes
   */
  getPatientManagementLookupTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.GetPatientManagementLookupTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/patientmanagement/lookuptypes";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPatientManagementLookupTypesResponse =
        new operations.GetPatientManagementLookupTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lookupTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.lookupTypes = utils.objectToClass(
              httpRes?.data,
              shared.LookupType,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * savePatientManagement
   *
   * @remarks
   * savePatientManagement
   */
  savePatientManagement(
    req: operations.SavePatientManagementRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SavePatientManagementResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SavePatientManagementRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "patientManagement",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SavePatientManagementResponse =
        new operations.SavePatientManagementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * savePatientManagementSurgeries
   *
   * @remarks
   * savePatientManagementSurgeries
   */
  savePatientManagementSurgeries(
    req: operations.SavePatientManagementSurgeriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SavePatientManagementSurgeriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SavePatientManagementSurgeriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}/surgeries",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "patientManagement",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SavePatientManagementSurgeriesResponse =
        new operations.SavePatientManagementSurgeriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * validatePatientManagement
   *
   * @remarks
   * validatePatientManagement
   */
  validatePatientManagement(
    req: shared.PatientManagement,
    config?: AxiosRequestConfig
  ): Promise<operations.ValidatePatientManagementResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.PatientManagement(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/patientmanagement/validate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ValidatePatientManagementResponse =
        new operations.ValidatePatientManagementResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
