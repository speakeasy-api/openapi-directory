/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ClientManagement {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List clients
   *
   * @remarks
   * Retrieve a list of clients.
   *
   */
  client(config?: AxiosRequestConfig): Promise<operations.ClientResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/client";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClientResponse = new operations.ClientResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clients = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.clients = utils.objectToClass(
              httpRes?.data,
              shared.Client,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a client
   *
   * @remarks
   * Delete a previously registered client.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint} - OIDC Client Configuration Endpoint
   */
  clientClientId(
    req: operations.ClientClientIdRequest,
    security: operations.ClientClientIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClientClientIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClientClientIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/client/{client_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ClientClientIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClientClientIdResponse =
        new operations.ClientClientIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Register a client
   *
   * @remarks
   * Register a new client with this Authentiq Connect provider.
   *
   * This endpoint is compatible with [OIDC's Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration} - OIDC Client Registration Endpoint
   */
  createClient(
    req: shared.Client,
    security: operations.CreateClientSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Client(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/client";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateClientSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateClientResponse =
        new operations.CreateClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * View a client
   *
   * @remarks
   * Retrieve the configuration of a previously registered client.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint} - OIDC Client Configuration Endpoint
   */
  getClient(
    req: operations.GetClientRequest,
    security: operations.GetClientSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetClientRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/client/{client_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetClientSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetClientResponse =
        new operations.GetClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.client = utils.objectToClass(httpRes?.data, shared.Client);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a client
   *
   * @remarks
   * Update the configuration of a previously registered client.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint} - OIDC Client Configuration Endpoint
   */
  updateClient(
    req: operations.UpdateClientRequest,
    security: operations.UpdateClientSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateClientRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/client/{client_id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "client",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateClientSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateClientResponse =
        new operations.UpdateClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.client = utils.objectToClass(httpRes?.data, shared.Client);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
