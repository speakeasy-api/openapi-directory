"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attribute as shared_attribute
from ..shared import severity_enum as shared_severity_enum
from ..shared import timestamprange as shared_timestamprange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindingFilter:
    r"""This data type is used as a request parameter in the <a>ListFindings</a> action."""
    
    agent_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agentIds'), 'exclude': lambda f: f is None }})  
    attributes: Optional[list[shared_attribute.Attribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    auto_scaling_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoScalingGroups'), 'exclude': lambda f: f is None }})  
    creation_time_range: Optional[shared_timestamprange.TimestampRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTimeRange'), 'exclude': lambda f: f is None }})  
    rule_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleNames'), 'exclude': lambda f: f is None }})  
    rules_package_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesPackageArns'), 'exclude': lambda f: f is None }})  
    severities: Optional[list[shared_severity_enum.SeverityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severities'), 'exclude': lambda f: f is None }})  
    user_attributes: Optional[list[shared_attribute.Attribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAttributes'), 'exclude': lambda f: f is None }})  
    