"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import hubcontentdependency as shared_hubcontentdependency
from ..shared import hubcontentstatus_enum as shared_hubcontentstatus_enum
from ..shared import hubcontenttype_enum as shared_hubcontenttype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeHubContentResponse:
    r"""Success"""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    document_schema_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentSchemaVersion') }})  
    hub_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubArn') }})  
    hub_content_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentArn') }})  
    hub_content_document: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDocument') }})  
    hub_content_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentName') }})  
    hub_content_status: shared_hubcontentstatus_enum.HubContentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentStatus') }})  
    hub_content_type: shared_hubcontenttype_enum.HubContentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentType') }})  
    hub_content_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentVersion') }})  
    hub_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubName') }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    hub_content_dependencies: Optional[list[shared_hubcontentdependency.HubContentDependency]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDependencies'), 'exclude': lambda f: f is None }})  
    hub_content_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDescription'), 'exclude': lambda f: f is None }})  
    hub_content_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDisplayName'), 'exclude': lambda f: f is None }})  
    hub_content_markdown: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentMarkdown'), 'exclude': lambda f: f is None }})  
    hub_content_search_keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentSearchKeywords'), 'exclude': lambda f: f is None }})  
    