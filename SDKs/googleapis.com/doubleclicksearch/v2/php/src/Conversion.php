<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Conversion 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves a list of conversions from a DoubleClick Search engine account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetResponse
     */
	public function doubleclicksearchConversionGet(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion', \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of conversions from a DoubleClick Search engine account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdResponse
     */
	public function doubleclicksearchConversionGetByCustomerId(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/customer/{customerId}/conversion', \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionGetByCustomerIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a batch of new conversions into DoubleClick Search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertResponse
     */
	public function doubleclicksearchConversionInsert(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/conversion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "conversionList", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a batch of conversions in DoubleClick Search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateResponse
     */
	public function doubleclicksearchConversionUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/conversion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "conversionList", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConversionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the availabilities of a batch of floodlight activities in DoubleClick Search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilityResponse
     */
	public function doubleclicksearchConversionUpdateAvailability(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/doubleclicksearch/v2/conversion/updateAvailability');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAvailabilityRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclicksearchConversionUpdateAvailabilityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateAvailabilityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateAvailabilityResponse', 'json');
            }
        }

        return $response;
    }
}