/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Question - Represents a single question and some of its answers.
 */
public class Question {
    /**
     * Represents the author of a question or answer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public Author author;
    public Question withAuthor(Author author) {
        this.author = author;
        return this;
    }
    
    /**
     * Output only. The timestamp for when the question was written.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Question withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The unique name for the question. accounts/* /locations/* /questions/*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Question withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public Question withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topAnswers")
    public Answer[] topAnswers;
    public Question withTopAnswers(Answer[] topAnswers) {
        this.topAnswers = topAnswers;
        return this;
    }
    
    /**
     * Output only. The total number of answers posted for this question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAnswerCount")
    public Integer totalAnswerCount;
    public Question withTotalAnswerCount(Integer totalAnswerCount) {
        this.totalAnswerCount = totalAnswerCount;
        return this;
    }
    
    /**
     * Output only. The timestamp for when the question was last modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Question withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Output only. The number of upvotes for the question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upvoteCount")
    public Integer upvoteCount;
    public Question withUpvoteCount(Integer upvoteCount) {
        this.upvoteCount = upvoteCount;
        return this;
    }
    
}
