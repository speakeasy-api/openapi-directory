/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDocumentaiV1beta2DocumentPage - A page in a Document.
 */
public class GoogleCloudDocumentaiV1beta2DocumentPage {
    /**
     * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    public GoogleCloudDocumentaiV1beta2DocumentPageBlock[] blocks;
    public GoogleCloudDocumentaiV1beta2DocumentPage withBlocks(GoogleCloudDocumentaiV1beta2DocumentPageBlock[] blocks) {
        this.blocks = blocks;
        return this;
    }
    
    /**
     * A list of detected barcodes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectedBarcodes")
    public GoogleCloudDocumentaiV1beta2DocumentPageDetectedBarcode[] detectedBarcodes;
    public GoogleCloudDocumentaiV1beta2DocumentPage withDetectedBarcodes(GoogleCloudDocumentaiV1beta2DocumentPageDetectedBarcode[] detectedBarcodes) {
        this.detectedBarcodes = detectedBarcodes;
        return this;
    }
    
    /**
     * A list of detected languages together with confidence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectedLanguages")
    public GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[] detectedLanguages;
    public GoogleCloudDocumentaiV1beta2DocumentPage withDetectedLanguages(GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[] detectedLanguages) {
        this.detectedLanguages = detectedLanguages;
        return this;
    }
    
    /**
     * Dimension for the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimension")
    public GoogleCloudDocumentaiV1beta2DocumentPageDimension dimension;
    public GoogleCloudDocumentaiV1beta2DocumentPage withDimension(GoogleCloudDocumentaiV1beta2DocumentPageDimension dimension) {
        this.dimension = dimension;
        return this;
    }
    
    /**
     * A list of visually detected form fields on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formFields")
    public GoogleCloudDocumentaiV1beta2DocumentPageFormField[] formFields;
    public GoogleCloudDocumentaiV1beta2DocumentPage withFormFields(GoogleCloudDocumentaiV1beta2DocumentPageFormField[] formFields) {
        this.formFields = formFields;
        return this;
    }
    
    /**
     * Rendered image contents for this page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public GoogleCloudDocumentaiV1beta2DocumentPageImage image;
    public GoogleCloudDocumentaiV1beta2DocumentPage withImage(GoogleCloudDocumentaiV1beta2DocumentPageImage image) {
        this.image = image;
        return this;
    }
    
    /**
     * Image Quality Scores for the page image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageQualityScores")
    public GoogleCloudDocumentaiV1beta2DocumentPageImageQualityScores imageQualityScores;
    public GoogleCloudDocumentaiV1beta2DocumentPage withImageQualityScores(GoogleCloudDocumentaiV1beta2DocumentPageImageQualityScores imageQualityScores) {
        this.imageQualityScores = imageQualityScores;
        return this;
    }
    
    /**
     * Visual element describing a layout unit on a page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("layout")
    public GoogleCloudDocumentaiV1beta2DocumentPageLayout layout;
    public GoogleCloudDocumentaiV1beta2DocumentPage withLayout(GoogleCloudDocumentaiV1beta2DocumentPageLayout layout) {
        this.layout = layout;
        return this;
    }
    
    /**
     * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    public GoogleCloudDocumentaiV1beta2DocumentPageLine[] lines;
    public GoogleCloudDocumentaiV1beta2DocumentPage withLines(GoogleCloudDocumentaiV1beta2DocumentPageLine[] lines) {
        this.lines = lines;
        return this;
    }
    
    /**
     * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageNumber")
    public Integer pageNumber;
    public GoogleCloudDocumentaiV1beta2DocumentPage withPageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }
    
    /**
     * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paragraphs")
    public GoogleCloudDocumentaiV1beta2DocumentPageParagraph[] paragraphs;
    public GoogleCloudDocumentaiV1beta2DocumentPage withParagraphs(GoogleCloudDocumentaiV1beta2DocumentPageParagraph[] paragraphs) {
        this.paragraphs = paragraphs;
        return this;
    }
    
    /**
     * Structure to identify provenance relationships between annotations in different revisions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provenance")
    public GoogleCloudDocumentaiV1beta2DocumentProvenance provenance;
    public GoogleCloudDocumentaiV1beta2DocumentPage withProvenance(GoogleCloudDocumentaiV1beta2DocumentProvenance provenance) {
        this.provenance = provenance;
        return this;
    }
    
    /**
     * A list of visually detected symbols on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symbols")
    public GoogleCloudDocumentaiV1beta2DocumentPageSymbol[] symbols;
    public GoogleCloudDocumentaiV1beta2DocumentPage withSymbols(GoogleCloudDocumentaiV1beta2DocumentPageSymbol[] symbols) {
        this.symbols = symbols;
        return this;
    }
    
    /**
     * A list of visually detected tables on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tables")
    public GoogleCloudDocumentaiV1beta2DocumentPageTable[] tables;
    public GoogleCloudDocumentaiV1beta2DocumentPage withTables(GoogleCloudDocumentaiV1beta2DocumentPageTable[] tables) {
        this.tables = tables;
        return this;
    }
    
    /**
     * A list of visually detected tokens on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokens")
    public GoogleCloudDocumentaiV1beta2DocumentPageToken[] tokens;
    public GoogleCloudDocumentaiV1beta2DocumentPage withTokens(GoogleCloudDocumentaiV1beta2DocumentPageToken[] tokens) {
        this.tokens = tokens;
        return this;
    }
    
    /**
     * Transformation matrices that were applied to the original document image to produce Page.image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transforms")
    public GoogleCloudDocumentaiV1beta2DocumentPageMatrix[] transforms;
    public GoogleCloudDocumentaiV1beta2DocumentPage withTransforms(GoogleCloudDocumentaiV1beta2DocumentPageMatrix[] transforms) {
        this.transforms = transforms;
        return this;
    }
    
    /**
     * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visualElements")
    public GoogleCloudDocumentaiV1beta2DocumentPageVisualElement[] visualElements;
    public GoogleCloudDocumentaiV1beta2DocumentPage withVisualElements(GoogleCloudDocumentaiV1beta2DocumentPageVisualElement[] visualElements) {
        this.visualElements = visualElements;
        return this;
    }
    
}
