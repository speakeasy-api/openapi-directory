"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configvariable as shared_configvariable
from ..shared import secret as shared_secret
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SslConfigClientCertTypeEnum(str, Enum):
    r"""Type of Client Cert (PEM/JKS/.. etc.)"""
    CERT_TYPE_UNSPECIFIED = 'CERT_TYPE_UNSPECIFIED'
    PEM = 'PEM'

class SslConfigServerCertTypeEnum(str, Enum):
    r"""Type of Server Cert (PEM/JKS/.. etc.)"""
    CERT_TYPE_UNSPECIFIED = 'CERT_TYPE_UNSPECIFIED'
    PEM = 'PEM'

class SslConfigTrustModelEnum(str, Enum):
    r"""Trust Model of the SSL connection"""
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'
    INSECURE = 'INSECURE'

class SslConfigTypeEnum(str, Enum):
    r"""Controls the ssl type for the given connector version."""
    SSL_TYPE_UNSPECIFIED = 'SSL_TYPE_UNSPECIFIED'
    TLS = 'TLS'
    MTLS = 'MTLS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SslConfig:
    r"""SSL Configuration of a connection"""
    
    additional_variables: Optional[list[shared_configvariable.ConfigVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalVariables'), 'exclude': lambda f: f is None }})
    r"""Additional SSL related field values"""  
    client_certificate: Optional[shared_secret.Secret] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificate'), 'exclude': lambda f: f is None }})
    r"""Secret provides a reference to entries in Secret Manager."""  
    client_cert_type: Optional[SslConfigClientCertTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertType'), 'exclude': lambda f: f is None }})
    r"""Type of Client Cert (PEM/JKS/.. etc.)"""  
    client_private_key: Optional[shared_secret.Secret] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientPrivateKey'), 'exclude': lambda f: f is None }})
    r"""Secret provides a reference to entries in Secret Manager."""  
    client_private_key_pass: Optional[shared_secret.Secret] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientPrivateKeyPass'), 'exclude': lambda f: f is None }})
    r"""Secret provides a reference to entries in Secret Manager."""  
    private_server_certificate: Optional[shared_secret.Secret] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateServerCertificate'), 'exclude': lambda f: f is None }})
    r"""Secret provides a reference to entries in Secret Manager."""  
    server_cert_type: Optional[SslConfigServerCertTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverCertType'), 'exclude': lambda f: f is None }})
    r"""Type of Server Cert (PEM/JKS/.. etc.)"""  
    trust_model: Optional[SslConfigTrustModelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustModel'), 'exclude': lambda f: f is None }})
    r"""Trust Model of the SSL connection"""  
    type: Optional[SslConfigTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Controls the ssl type for the given connector version."""  
    use_ssl: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useSsl'), 'exclude': lambda f: f is None }})
    r"""Bool for enabling SSL"""  
    