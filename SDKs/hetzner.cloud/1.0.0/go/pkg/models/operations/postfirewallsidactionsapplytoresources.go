// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesLabelSelector - Configuration for type label_selector, required if type is `label_selector`
type PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesServer - Configuration for type server, required if type is `server`
type PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

// PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum - Type of the resource
type PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum string

const (
	PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnumServer        PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum = "server"
	PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnumLabelSelector PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum = "label_selector"
)

func (e PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum) ToPointer() *PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum {
	return &e
}

func (e *PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		fallthrough
	case "label_selector":
		*e = PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum: %v", v)
	}
}

type PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResources struct {
	// Configuration for type label_selector, required if type is `label_selector`
	LabelSelector *PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesLabelSelector `json:"label_selector,omitempty"`
	// Configuration for type server, required if type is `server`
	Server *PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesServer `json:"server,omitempty"`
	// Type of the resource
	Type *PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResourcesTypeEnum `json:"type,omitempty"`
}

type PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequest struct {
	// Resources the Firewall should be applied to
	ApplyTo []PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequestFirewallApplyToResources `json:"apply_to"`
}

type PostFirewallsIDActionsApplyToResourcesRequest struct {
	RequestBody *PostFirewallsIDActionsApplyToResourcesApplyToResourcesRequest `request:"mediaType=application/json"`
	// ID of the Firewall
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostFirewallsIDActionsApplyToResourcesActionsResponseActionError - Error message for the Action if error occurred, otherwise null
type PostFirewallsIDActionsApplyToResourcesActionsResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostFirewallsIDActionsApplyToResourcesActionsResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum - Status of the Action
type PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum string

const (
	PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnumSuccess PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum = "success"
	PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnumRunning PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum = "running"
	PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnumError   PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum = "error"
)

func (e PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum) ToPointer() *PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum {
	return &e
}

func (e *PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum: %v", v)
	}
}

type PostFirewallsIDActionsApplyToResourcesActionsResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostFirewallsIDActionsApplyToResourcesActionsResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostFirewallsIDActionsApplyToResourcesActionsResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostFirewallsIDActionsApplyToResourcesActionsResponseActionStatusEnum `json:"status"`
}

type PostFirewallsIDActionsApplyToResourcesActionsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type PostFirewallsIDActionsApplyToResourcesActionsResponseMeta struct {
	Pagination PostFirewallsIDActionsApplyToResourcesActionsResponseMetaPagination `json:"pagination"`
}

// PostFirewallsIDActionsApplyToResourcesActionsResponse - The `actions` key contains multiple `apply_firewall` Actions
type PostFirewallsIDActionsApplyToResourcesActionsResponse struct {
	Actions []PostFirewallsIDActionsApplyToResourcesActionsResponseAction `json:"actions"`
	Meta    *PostFirewallsIDActionsApplyToResourcesActionsResponseMeta    `json:"meta,omitempty"`
}

type PostFirewallsIDActionsApplyToResourcesResponse struct {
	// The `actions` key contains multiple `apply_firewall` Actions
	ActionsResponse *PostFirewallsIDActionsApplyToResourcesActionsResponse
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}
