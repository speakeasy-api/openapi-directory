"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRunV2ConditionExecutionReasonEnum(str, Enum):
    r"""A reason for the execution condition."""
    EXECUTION_REASON_UNDEFINED = 'EXECUTION_REASON_UNDEFINED'
    JOB_STATUS_SERVICE_POLLING_ERROR = 'JOB_STATUS_SERVICE_POLLING_ERROR'
    NON_ZERO_EXIT_CODE = 'NON_ZERO_EXIT_CODE'
    CANCELLED = 'CANCELLED'
    CANCELLING = 'CANCELLING'

class GoogleCloudRunV2ConditionReasonEnum(str, Enum):
    r"""A common (service-level) reason for this condition."""
    COMMON_REASON_UNDEFINED = 'COMMON_REASON_UNDEFINED'
    UNKNOWN = 'UNKNOWN'
    REVISION_FAILED = 'REVISION_FAILED'
    PROGRESS_DEADLINE_EXCEEDED = 'PROGRESS_DEADLINE_EXCEEDED'
    CONTAINER_MISSING = 'CONTAINER_MISSING'
    CONTAINER_PERMISSION_DENIED = 'CONTAINER_PERMISSION_DENIED'
    CONTAINER_IMAGE_UNAUTHORIZED = 'CONTAINER_IMAGE_UNAUTHORIZED'
    CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED = 'CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED'
    ENCRYPTION_KEY_PERMISSION_DENIED = 'ENCRYPTION_KEY_PERMISSION_DENIED'
    ENCRYPTION_KEY_CHECK_FAILED = 'ENCRYPTION_KEY_CHECK_FAILED'
    SECRETS_ACCESS_CHECK_FAILED = 'SECRETS_ACCESS_CHECK_FAILED'
    WAITING_FOR_OPERATION = 'WAITING_FOR_OPERATION'
    IMMEDIATE_RETRY = 'IMMEDIATE_RETRY'
    POSTPONED_RETRY = 'POSTPONED_RETRY'
    INTERNAL = 'INTERNAL'

class GoogleCloudRunV2ConditionRevisionReasonEnum(str, Enum):
    r"""A reason for the revision condition."""
    REVISION_REASON_UNDEFINED = 'REVISION_REASON_UNDEFINED'
    PENDING = 'PENDING'
    RESERVE = 'RESERVE'
    RETIRED = 'RETIRED'
    RETIRING = 'RETIRING'
    RECREATING = 'RECREATING'
    HEALTH_CHECK_CONTAINER_ERROR = 'HEALTH_CHECK_CONTAINER_ERROR'
    CUSTOMIZED_PATH_RESPONSE_PENDING = 'CUSTOMIZED_PATH_RESPONSE_PENDING'
    MIN_INSTANCES_NOT_PROVISIONED = 'MIN_INSTANCES_NOT_PROVISIONED'
    ACTIVE_REVISION_LIMIT_REACHED = 'ACTIVE_REVISION_LIMIT_REACHED'
    NO_DEPLOYMENT = 'NO_DEPLOYMENT'
    HEALTH_CHECK_SKIPPED = 'HEALTH_CHECK_SKIPPED'
    MIN_INSTANCES_WARMING = 'MIN_INSTANCES_WARMING'

class GoogleCloudRunV2ConditionSeverityEnum(str, Enum):
    r"""How to interpret failures of this condition, one of Error, Warning, Info"""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'

class GoogleCloudRunV2ConditionStateEnum(str, Enum):
    r"""State of the condition."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CONDITION_PENDING = 'CONDITION_PENDING'
    CONDITION_RECONCILING = 'CONDITION_RECONCILING'
    CONDITION_FAILED = 'CONDITION_FAILED'
    CONDITION_SUCCEEDED = 'CONDITION_SUCCEEDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRunV2Condition:
    r"""Defines a status condition for a resource."""
    
    execution_reason: Optional[GoogleCloudRunV2ConditionExecutionReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionReason'), 'exclude': lambda f: f is None }})
    r"""A reason for the execution condition."""  
    last_transition_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastTransitionTime'), 'exclude': lambda f: f is None }})
    r"""Last time the condition transitioned from one status to another."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Human readable message indicating details about the current status."""  
    reason: Optional[GoogleCloudRunV2ConditionReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""A common (service-level) reason for this condition."""  
    revision_reason: Optional[GoogleCloudRunV2ConditionRevisionReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revisionReason'), 'exclude': lambda f: f is None }})
    r"""A reason for the revision condition."""  
    severity: Optional[GoogleCloudRunV2ConditionSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""How to interpret failures of this condition, one of Error, Warning, Info"""  
    state: Optional[GoogleCloudRunV2ConditionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the condition."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \\"Ready\\": True when the Resource is ready."""  
    