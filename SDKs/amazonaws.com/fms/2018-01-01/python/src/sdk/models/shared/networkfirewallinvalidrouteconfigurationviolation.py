"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import expectedroute as shared_expectedroute
from ..shared import route as shared_route
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NetworkFirewallInvalidRouteConfigurationViolation:
    r"""Violation detail for the improperly configured subnet route. It's possible there is a missing route table route, or a configuration that causes traffic to cross an Availability Zone boundary."""
    
    actual_firewall_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActualFirewallEndpoint'), 'exclude': lambda f: f is None }})  
    actual_firewall_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActualFirewallSubnetId'), 'exclude': lambda f: f is None }})  
    actual_firewall_subnet_routes: Optional[list[shared_route.Route]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActualFirewallSubnetRoutes'), 'exclude': lambda f: f is None }})  
    actual_internet_gateway_routes: Optional[list[shared_route.Route]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActualInternetGatewayRoutes'), 'exclude': lambda f: f is None }})  
    affected_subnets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AffectedSubnets'), 'exclude': lambda f: f is None }})  
    current_firewall_subnet_route_table: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentFirewallSubnetRouteTable'), 'exclude': lambda f: f is None }})  
    current_internet_gateway_route_table: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentInternetGatewayRouteTable'), 'exclude': lambda f: f is None }})  
    expected_firewall_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedFirewallEndpoint'), 'exclude': lambda f: f is None }})  
    expected_firewall_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedFirewallSubnetId'), 'exclude': lambda f: f is None }})  
    expected_firewall_subnet_routes: Optional[list[shared_expectedroute.ExpectedRoute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedFirewallSubnetRoutes'), 'exclude': lambda f: f is None }})  
    expected_internet_gateway_routes: Optional[list[shared_expectedroute.ExpectedRoute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedInternetGatewayRoutes'), 'exclude': lambda f: f is None }})  
    internet_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InternetGatewayId'), 'exclude': lambda f: f is None }})  
    is_route_table_used_in_different_az: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsRouteTableUsedInDifferentAZ'), 'exclude': lambda f: f is None }})  
    route_table_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RouteTableId'), 'exclude': lambda f: f is None }})  
    violating_route: Optional[shared_route.Route] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ViolatingRoute'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    