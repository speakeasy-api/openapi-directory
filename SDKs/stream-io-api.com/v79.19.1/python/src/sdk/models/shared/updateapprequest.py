"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import apnconfigrequest as shared_apnconfigrequest
from ..shared import asyncmoderationconfigurationrequest as shared_asyncmoderationconfigurationrequest
from ..shared import configrequest as shared_configrequest
from ..shared import fileuploadconfigrequest as shared_fileuploadconfigrequest
from ..shared import firebaseconfigrequest as shared_firebaseconfigrequest
from ..shared import huaweiconfigrequest as shared_huaweiconfigrequest
from ..shared import pushconfigrequest as shared_pushconfigrequest
from ..shared import xiaomiconfigrequest as shared_xiaomiconfigrequest
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UpdateAppRequestEnforceUniqueUsernamesEnum(str, Enum):
    NO = 'no'
    APP = 'app'
    TEAM = 'team'

class UpdateAppRequestPermissionVersionEnum(str, Enum):
    V1 = 'v1'
    V2 = 'v2'

class UpdateAppRequestVideoProviderEnum(str, Enum):
    AGORA = 'agora'
    HMS = 'hms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAppRequest:
    
    agora_options: Optional[shared_configrequest.ConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agora_options'), 'exclude': lambda f: f is None }})  
    apn_config: Optional[shared_apnconfigrequest.APNConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apn_config'), 'exclude': lambda f: f is None }})  
    async_moderation_config: Optional[shared_asyncmoderationconfigurationrequest.AsyncModerationConfigurationRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('async_moderation_config'), 'exclude': lambda f: f is None }})  
    async_url_enrich_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('async_url_enrich_enabled'), 'exclude': lambda f: f is None }})  
    auto_translation_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_translation_enabled'), 'exclude': lambda f: f is None }})  
    before_message_send_hook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('before_message_send_hook_url'), 'exclude': lambda f: f is None }})  
    cdn_expiration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cdn_expiration_seconds'), 'exclude': lambda f: f is None }})  
    channel_hide_members_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel_hide_members_only'), 'exclude': lambda f: f is None }})  
    custom_action_handler_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_action_handler_url'), 'exclude': lambda f: f is None }})  
    disable_auth_checks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_auth_checks'), 'exclude': lambda f: f is None }})  
    disable_permissions_checks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_permissions_checks'), 'exclude': lambda f: f is None }})  
    enforce_unique_usernames: Optional[UpdateAppRequestEnforceUniqueUsernamesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_unique_usernames'), 'exclude': lambda f: f is None }})  
    file_upload_config: Optional[shared_fileuploadconfigrequest.FileUploadConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_upload_config'), 'exclude': lambda f: f is None }})  
    firebase_config: Optional[shared_firebaseconfigrequest.FirebaseConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firebase_config'), 'exclude': lambda f: f is None }})  
    grants: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grants'), 'exclude': lambda f: f is None }})  
    hms_options: Optional[shared_configrequest.ConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hms_options'), 'exclude': lambda f: f is None }})  
    huawei_config: Optional[shared_huaweiconfigrequest.HuaweiConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('huawei_config'), 'exclude': lambda f: f is None }})  
    image_moderation_block_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_moderation_block_labels'), 'exclude': lambda f: f is None }})  
    image_moderation_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_moderation_enabled'), 'exclude': lambda f: f is None }})  
    image_moderation_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_moderation_labels'), 'exclude': lambda f: f is None }})  
    image_upload_config: Optional[shared_fileuploadconfigrequest.FileUploadConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_upload_config'), 'exclude': lambda f: f is None }})  
    migrate_permissions_to_v2: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migrate_permissions_to_v2'), 'exclude': lambda f: f is None }})  
    multi_tenant_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multi_tenant_enabled'), 'exclude': lambda f: f is None }})  
    permission_version: Optional[UpdateAppRequestPermissionVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission_version'), 'exclude': lambda f: f is None }})  
    push_config: Optional[shared_pushconfigrequest.PushConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_config'), 'exclude': lambda f: f is None }})  
    reminders_interval: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminders_interval'), 'exclude': lambda f: f is None }})  
    revoke_tokens_issued_before: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revoke_tokens_issued_before'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    sqs_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs_key'), 'exclude': lambda f: f is None }})  
    sqs_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs_secret'), 'exclude': lambda f: f is None }})  
    sqs_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs_url'), 'exclude': lambda f: f is None }})  
    user_search_disallowed_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_search_disallowed_roles'), 'exclude': lambda f: f is None }})  
    video_provider: Optional[UpdateAppRequestVideoProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video_provider'), 'exclude': lambda f: f is None }})  
    webhook_events: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook_events'), 'exclude': lambda f: f is None }})  
    webhook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook_url'), 'exclude': lambda f: f is None }})  
    xiaomi_config: Optional[shared_xiaomiconfigrequest.XiaomiConfigRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xiaomi_config'), 'exclude': lambda f: f is None }})  
    