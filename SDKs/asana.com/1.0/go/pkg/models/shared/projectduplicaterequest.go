// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectDuplicateRequestIncludeEnum - The elements that will be duplicated to the new project. Tasks are always included.
type ProjectDuplicateRequestIncludeEnum string

const (
	ProjectDuplicateRequestIncludeEnumMembers          ProjectDuplicateRequestIncludeEnum = "members"
	ProjectDuplicateRequestIncludeEnumNotes            ProjectDuplicateRequestIncludeEnum = "notes"
	ProjectDuplicateRequestIncludeEnumForms            ProjectDuplicateRequestIncludeEnum = "forms"
	ProjectDuplicateRequestIncludeEnumTaskNotes        ProjectDuplicateRequestIncludeEnum = "task_notes"
	ProjectDuplicateRequestIncludeEnumTaskAssignee     ProjectDuplicateRequestIncludeEnum = "task_assignee"
	ProjectDuplicateRequestIncludeEnumTaskSubtasks     ProjectDuplicateRequestIncludeEnum = "task_subtasks"
	ProjectDuplicateRequestIncludeEnumTaskAttachments  ProjectDuplicateRequestIncludeEnum = "task_attachments"
	ProjectDuplicateRequestIncludeEnumTaskDates        ProjectDuplicateRequestIncludeEnum = "task_dates"
	ProjectDuplicateRequestIncludeEnumTaskDependencies ProjectDuplicateRequestIncludeEnum = "task_dependencies"
	ProjectDuplicateRequestIncludeEnumTaskFollowers    ProjectDuplicateRequestIncludeEnum = "task_followers"
	ProjectDuplicateRequestIncludeEnumTaskTags         ProjectDuplicateRequestIncludeEnum = "task_tags"
	ProjectDuplicateRequestIncludeEnumTaskProjects     ProjectDuplicateRequestIncludeEnum = "task_projects"
)

func (e *ProjectDuplicateRequestIncludeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "members":
		fallthrough
	case "notes":
		fallthrough
	case "forms":
		fallthrough
	case "task_notes":
		fallthrough
	case "task_assignee":
		fallthrough
	case "task_subtasks":
		fallthrough
	case "task_attachments":
		fallthrough
	case "task_dates":
		fallthrough
	case "task_dependencies":
		fallthrough
	case "task_followers":
		fallthrough
	case "task_tags":
		fallthrough
	case "task_projects":
		*e = ProjectDuplicateRequestIncludeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectDuplicateRequestIncludeEnum: %s", s)
	}
}

// ProjectDuplicateRequestScheduleDates - A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.
type ProjectDuplicateRequestScheduleDates struct {
	// Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
	DueOn *string `json:"due_on,omitempty"`
	// Determines if the auto-shifted dates should skip weekends.
	ShouldSkipWeekends bool `json:"should_skip_weekends"`
	// Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
	StartOn *string `json:"start_on,omitempty"`
}

type ProjectDuplicateRequest struct {
	// The elements that will be duplicated to the new project. Tasks are always included.
	Include *ProjectDuplicateRequestIncludeEnum `json:"include,omitempty"`
	// The name of the new project.
	Name string `json:"name"`
	// A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.
	ScheduleDates *ProjectDuplicateRequestScheduleDates `json:"schedule_dates,omitempty"`
	// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
	Team *string `json:"team,omitempty"`
}
