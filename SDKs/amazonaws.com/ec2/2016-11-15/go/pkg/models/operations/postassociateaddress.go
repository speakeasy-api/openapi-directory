// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTAssociateAddressActionEnum
type POSTAssociateAddressActionEnum string

const (
	POSTAssociateAddressActionEnumAssociateAddress POSTAssociateAddressActionEnum = "AssociateAddress"
)

func (e *POSTAssociateAddressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AssociateAddress":
		*e = POSTAssociateAddressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTAssociateAddressActionEnum: %s", s)
	}
}

// POSTAssociateAddressVersionEnum
type POSTAssociateAddressVersionEnum string

const (
	POSTAssociateAddressVersionEnumTwoThousandAndSixteen1115 POSTAssociateAddressVersionEnum = "2016-11-15"
)

func (e *POSTAssociateAddressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTAssociateAddressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTAssociateAddressVersionEnum: %s", s)
	}
}

type POSTAssociateAddressQueryParams struct {
	Action  POSTAssociateAddressActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTAssociateAddressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTAssociateAddressHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTAssociateAddressRequest struct {
	QueryParams POSTAssociateAddressQueryParams
	Headers     POSTAssociateAddressHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTAssociateAddressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
