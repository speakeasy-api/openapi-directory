// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StoredValueBalanceMergeRequestShopperInteractionEnum - Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
//
// This field has the following possible values:
// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
type StoredValueBalanceMergeRequestShopperInteractionEnum string

const (
	StoredValueBalanceMergeRequestShopperInteractionEnumEcommerce StoredValueBalanceMergeRequestShopperInteractionEnum = "Ecommerce"
	StoredValueBalanceMergeRequestShopperInteractionEnumContAuth  StoredValueBalanceMergeRequestShopperInteractionEnum = "ContAuth"
	StoredValueBalanceMergeRequestShopperInteractionEnumMoto      StoredValueBalanceMergeRequestShopperInteractionEnum = "Moto"
	StoredValueBalanceMergeRequestShopperInteractionEnumPos       StoredValueBalanceMergeRequestShopperInteractionEnum = "POS"
)

func (e *StoredValueBalanceMergeRequestShopperInteractionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Ecommerce":
		fallthrough
	case "ContAuth":
		fallthrough
	case "Moto":
		fallthrough
	case "POS":
		*e = StoredValueBalanceMergeRequestShopperInteractionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoredValueBalanceMergeRequestShopperInteractionEnum: %s", s)
	}
}

type StoredValueBalanceMergeRequest struct {
	Amount *Amount `json:"amount,omitempty"`
	// The merchant account identifier, with which you want to process the transaction.
	MerchantAccount string `json:"merchantAccount"`
	// The collection that contains the type of the payment method and its specific information if available
	PaymentMethod            map[string]string `json:"paymentMethod"`
	RecurringDetailReference *string           `json:"recurringDetailReference,omitempty"`
	// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
	// If you need to provide multiple references for a transaction, separate them with hyphens ("-").
	// Maximum length: 80 characters.
	Reference string `json:"reference"`
	// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
	// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
	//
	// This field has the following possible values:
	// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
	// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
	// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
	// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
	ShopperInteraction *StoredValueBalanceMergeRequestShopperInteractionEnum `json:"shopperInteraction,omitempty"`
	ShopperReference   *string                                               `json:"shopperReference,omitempty"`
	// The collection that contains the source payment method and its specific information if available. Note that type should not be included since it is inferred from the (target) payment method
	SourcePaymentMethod map[string]string `json:"sourcePaymentMethod"`
	// The physical store, for which this payment is processed.
	Store *string `json:"store,omitempty"`
}
