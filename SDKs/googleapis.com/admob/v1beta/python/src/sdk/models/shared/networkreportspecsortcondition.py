"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NetworkReportSpecSortConditionDimensionEnum(str, Enum):
    r"""Sort by the specified dimension."""
    DIMENSION_UNSPECIFIED = 'DIMENSION_UNSPECIFIED'
    DATE = 'DATE'
    MONTH = 'MONTH'
    WEEK = 'WEEK'
    AD_UNIT = 'AD_UNIT'
    APP = 'APP'
    AD_TYPE = 'AD_TYPE'
    COUNTRY = 'COUNTRY'
    FORMAT = 'FORMAT'
    PLATFORM = 'PLATFORM'
    MOBILE_OS_VERSION = 'MOBILE_OS_VERSION'
    GMA_SDK_VERSION = 'GMA_SDK_VERSION'
    APP_VERSION_NAME = 'APP_VERSION_NAME'
    SERVING_RESTRICTION = 'SERVING_RESTRICTION'

class NetworkReportSpecSortConditionMetricEnum(str, Enum):
    r"""Sort by the specified metric."""
    METRIC_UNSPECIFIED = 'METRIC_UNSPECIFIED'
    AD_REQUESTS = 'AD_REQUESTS'
    CLICKS = 'CLICKS'
    ESTIMATED_EARNINGS = 'ESTIMATED_EARNINGS'
    IMPRESSIONS = 'IMPRESSIONS'
    IMPRESSION_CTR = 'IMPRESSION_CTR'
    IMPRESSION_RPM = 'IMPRESSION_RPM'
    MATCHED_REQUESTS = 'MATCHED_REQUESTS'
    MATCH_RATE = 'MATCH_RATE'
    SHOW_RATE = 'SHOW_RATE'

class NetworkReportSpecSortConditionOrderEnum(str, Enum):
    r"""Sorting order of the dimension or metric."""
    SORT_ORDER_UNSPECIFIED = 'SORT_ORDER_UNSPECIFIED'
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NetworkReportSpecSortCondition:
    r"""Sorting direction to be applied on a dimension or a metric."""
    
    dimension: Optional[NetworkReportSpecSortConditionDimensionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})
    r"""Sort by the specified dimension."""  
    metric: Optional[NetworkReportSpecSortConditionMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric'), 'exclude': lambda f: f is None }})
    r"""Sort by the specified metric."""  
    order: Optional[NetworkReportSpecSortConditionOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""Sorting order of the dimension or metric."""  
    