// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// QuotaErrorCodeEnum - Error code.
type QuotaErrorCodeEnum string

const (
	QuotaErrorCodeEnumUnspecified              QuotaErrorCodeEnum = "UNSPECIFIED"
	QuotaErrorCodeEnumResourceExhausted        QuotaErrorCodeEnum = "RESOURCE_EXHAUSTED"
	QuotaErrorCodeEnumOutOfRange               QuotaErrorCodeEnum = "OUT_OF_RANGE"
	QuotaErrorCodeEnumBillingNotActive         QuotaErrorCodeEnum = "BILLING_NOT_ACTIVE"
	QuotaErrorCodeEnumProjectDeleted           QuotaErrorCodeEnum = "PROJECT_DELETED"
	QuotaErrorCodeEnumAPIKeyInvalid            QuotaErrorCodeEnum = "API_KEY_INVALID"
	QuotaErrorCodeEnumAPIKeyExpired            QuotaErrorCodeEnum = "API_KEY_EXPIRED"
	QuotaErrorCodeEnumSpatulaHeaderInvalid     QuotaErrorCodeEnum = "SPATULA_HEADER_INVALID"
	QuotaErrorCodeEnumLoasRoleInvalid          QuotaErrorCodeEnum = "LOAS_ROLE_INVALID"
	QuotaErrorCodeEnumNoLoasProject            QuotaErrorCodeEnum = "NO_LOAS_PROJECT"
	QuotaErrorCodeEnumProjectStatusUnavailable QuotaErrorCodeEnum = "PROJECT_STATUS_UNAVAILABLE"
	QuotaErrorCodeEnumServiceStatusUnavailable QuotaErrorCodeEnum = "SERVICE_STATUS_UNAVAILABLE"
	QuotaErrorCodeEnumBillingStatusUnavailable QuotaErrorCodeEnum = "BILLING_STATUS_UNAVAILABLE"
	QuotaErrorCodeEnumQuotaSystemUnavailable   QuotaErrorCodeEnum = "QUOTA_SYSTEM_UNAVAILABLE"
)

func (e *QuotaErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED":
		fallthrough
	case "RESOURCE_EXHAUSTED":
		fallthrough
	case "OUT_OF_RANGE":
		fallthrough
	case "BILLING_NOT_ACTIVE":
		fallthrough
	case "PROJECT_DELETED":
		fallthrough
	case "API_KEY_INVALID":
		fallthrough
	case "API_KEY_EXPIRED":
		fallthrough
	case "SPATULA_HEADER_INVALID":
		fallthrough
	case "LOAS_ROLE_INVALID":
		fallthrough
	case "NO_LOAS_PROJECT":
		fallthrough
	case "PROJECT_STATUS_UNAVAILABLE":
		fallthrough
	case "SERVICE_STATUS_UNAVAILABLE":
		fallthrough
	case "BILLING_STATUS_UNAVAILABLE":
		fallthrough
	case "QUOTA_SYSTEM_UNAVAILABLE":
		*e = QuotaErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QuotaErrorCodeEnum: %s", s)
	}
}

// QuotaError - Represents error information for QuotaOperation.
type QuotaError struct {
	// Error code.
	Code *QuotaErrorCodeEnum `json:"code,omitempty"`
	// Free-form text that provides details on the cause of the error.
	Description *string `json:"description,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Status *Status `json:"status,omitempty"`
	// Subject to whom this error applies. See the specific enum for more details on this field. For example, "clientip:" or "project:".
	Subject *string `json:"subject,omitempty"`
}
