// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TextTransformationEnum string

const (
	TextTransformationEnumNone               TextTransformationEnum = "NONE"
	TextTransformationEnumCompressWhiteSpace TextTransformationEnum = "COMPRESS_WHITE_SPACE"
	TextTransformationEnumHTMLEntityDecode   TextTransformationEnum = "HTML_ENTITY_DECODE"
	TextTransformationEnumLowercase          TextTransformationEnum = "LOWERCASE"
	TextTransformationEnumCmdLine            TextTransformationEnum = "CMD_LINE"
	TextTransformationEnumURLDecode          TextTransformationEnum = "URL_DECODE"
)

func (e TextTransformationEnum) ToPointer() *TextTransformationEnum {
	return &e
}

func (e *TextTransformationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "COMPRESS_WHITE_SPACE":
		fallthrough
	case "HTML_ENTITY_DECODE":
		fallthrough
	case "LOWERCASE":
		fallthrough
	case "CMD_LINE":
		fallthrough
	case "URL_DECODE":
		*e = TextTransformationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextTransformationEnum: %v", v)
	}
}
