// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MicerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MicerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// MicerRequestBodyFormatEnum - The format of the certificate in response.
type MicerRequestBodyFormatEnum string

const (
	MicerRequestBodyFormatEnumPdf MicerRequestBodyFormatEnum = "pdf"
)

func (e *MicerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = MicerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MicerRequestBodyFormatEnum: %s", s)
	}
}

// MicerRequestBody - Request format
type MicerRequestBody struct {
	CertificateParameters *MicerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MicerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Micer504ApplicationJSONErrorEnum string

const (
	Micer504ApplicationJSONErrorEnumGatewayTimeout Micer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Micer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Micer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer504ApplicationJSONErrorDescriptionEnum string

const (
	Micer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Micer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Micer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Micer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer504ApplicationJSON - Gateway timeout
type Micer504ApplicationJSON struct {
	Error            *Micer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Micer503ApplicationJSONErrorEnum string

const (
	Micer503ApplicationJSONErrorEnumServiceUnavailable Micer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Micer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Micer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer503ApplicationJSONErrorDescriptionEnum string

const (
	Micer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Micer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Micer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Micer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer503ApplicationJSON - Service unavailable
type Micer503ApplicationJSON struct {
	Error            *Micer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Micer502ApplicationJSONErrorEnum string

const (
	Micer502ApplicationJSONErrorEnumBadGatewy Micer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Micer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Micer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer502ApplicationJSONErrorDescriptionEnum string

const (
	Micer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Micer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Micer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Micer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer502ApplicationJSON - Bad gateway
type Micer502ApplicationJSON struct {
	Error            *Micer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Micer500ApplicationJSONErrorEnum string

const (
	Micer500ApplicationJSONErrorEnumInternalServerError Micer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Micer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Micer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer500ApplicationJSONErrorDescriptionEnum string

const (
	Micer500ApplicationJSONErrorDescriptionEnumInternalServerError Micer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Micer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Micer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer500ApplicationJSON - Internal server error
type Micer500ApplicationJSON struct {
	Error            *Micer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Micer404ApplicationJSONErrorEnum string

const (
	Micer404ApplicationJSONErrorEnumRecordNotFound Micer404ApplicationJSONErrorEnum = "record_not_found"
	Micer404ApplicationJSONErrorEnumURLNotFound    Micer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Micer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Micer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer404ApplicationJSONErrorDescriptionEnum string

const (
	Micer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Micer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Micer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Micer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Micer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Micer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer404ApplicationJSON - No record found
type Micer404ApplicationJSON struct {
	Error            *Micer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Micer401ApplicationJSONErrorEnum string

const (
	Micer401ApplicationJSONErrorEnumInvalidAuthentication Micer401ApplicationJSONErrorEnum = "invalid_authentication"
	Micer401ApplicationJSONErrorEnumInvalidAuthorization  Micer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Micer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Micer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer401ApplicationJSONErrorDescriptionEnum string

const (
	Micer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Micer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Micer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Micer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Micer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Micer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer401ApplicationJSON - Unauthorized access
type Micer401ApplicationJSON struct {
	Error            *Micer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Micer400ApplicationJSONErrorEnum string

const (
	Micer400ApplicationJSONErrorEnumMissingParameter Micer400ApplicationJSONErrorEnum = "missing_parameter"
	Micer400ApplicationJSONErrorEnumInvalidParameter Micer400ApplicationJSONErrorEnum = "invalid_parameter"
	Micer400ApplicationJSONErrorEnumInvalidFormat    Micer400ApplicationJSONErrorEnum = "invalid_format"
	Micer400ApplicationJSONErrorEnumInvalidTxnid     Micer400ApplicationJSONErrorEnum = "invalid_txnid"
	Micer400ApplicationJSONErrorEnumInvalidConsentid Micer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Micer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Micer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Micer400ApplicationJSONErrorDescriptionEnum string

const (
	Micer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Micer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Micer400ApplicationJSONErrorDescriptionEnumBadRequest                              Micer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Micer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Micer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Micer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Micer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Micer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Micer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Micer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Micer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Micer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Micer400ApplicationJSON - Bad request
type Micer400ApplicationJSON struct {
	Error            *Micer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Micer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MicerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Micer400ApplicationJSONObject *Micer400ApplicationJSON
	// Unauthorized access
	Micer401ApplicationJSONObject *Micer401ApplicationJSON
	// No record found
	Micer404ApplicationJSONObject *Micer404ApplicationJSON
	// Internal server error
	Micer500ApplicationJSONObject *Micer500ApplicationJSON
	// Bad gateway
	Micer502ApplicationJSONObject *Micer502ApplicationJSON
	// Service unavailable
	Micer503ApplicationJSONObject *Micer503ApplicationJSON
	// Gateway timeout
	Micer504ApplicationJSONObject *Micer504ApplicationJSON
}
