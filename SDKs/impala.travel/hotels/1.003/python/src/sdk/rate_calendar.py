"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RateCalendar:
    r"""Getting rates for future dates."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def list_rate_plan_for_hotel_for_rate_plan_id(self, request: operations.ListRatePlanForHotelForRatePlanIDRequest) -> operations.ListRatePlanForHotelForRatePlanIDResponse:
        r"""List a rate plan (rate calendar) for a hotel (Beta endpoint).
        Returns a single rate plan available for you for a hotel.
        
        Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they're bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).
        
        Examples of rate plans:
        
        * Non-refundable room rate that includes breakfast
        * Room-only rate with free cancellation up to 14 days before arrival
        
        This endpoint returns a singular available rate plan.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListRatePlanForHotelForRatePlanIDRequest, base_url, '/hotels/{hotelId}/rate-plans/{ratePlanId}', request)
        
        query_params = utils.get_query_params(operations.ListRatePlanForHotelForRatePlanIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListRatePlanForHotelForRatePlanIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RatePlan])
                res.rate_plan = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericError])
                res.generic_error = out

        return res

    def list_rate_plans_for_hotel(self, request: operations.ListRatePlansForHotelRequest) -> operations.ListRatePlansForHotelResponse:
        r"""List all rate plans (rate calendar) for a hotel (Beta endpoint)
        Returns a list of all rate plans available for you for a hotel.
        
        Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they're bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).
        
        Examples of rate plans:
        
        * Non-refundable room rate that includes breakfast
        * Room-only rate with free cancellation up to 14 days before arrival
        
        For each such rate plan this endpoint returns the room types it's available for, alongside prices for each date and occupancy that can be sold â€“ or the information that the room isn't available (closed) for a certain date.
        
        For the vast majority of our customers, availability searches using the [List all hotels](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels/get) endpoint are the best choice. It accepts the dates your guest is looking for and provides the rates to display.
        
        This endpoint can help augment this for two additional use cases:
        
        This endpoint allows you to query rate prices for all future dates in one go, making it a great choice to feed availability information and prices into your own system or displaying a rate calender to guide your guests to gain an overview of future availability and prices.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListRatePlansForHotelRequest, base_url, '/hotels/{hotelId}/rate-plans', request)
        
        query_params = utils.get_query_params(operations.ListRatePlansForHotelRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListRatePlansForHotelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListRatePlansForHotel200ApplicationJSON])
                res.list_rate_plans_for_hotel_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericError])
                res.generic_error = out

        return res

    