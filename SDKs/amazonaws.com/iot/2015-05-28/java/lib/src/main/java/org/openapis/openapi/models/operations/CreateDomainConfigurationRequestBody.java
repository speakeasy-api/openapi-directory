/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateDomainConfigurationRequestBody {
    /**
     * An object that specifies the authorization service for a domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizerConfig")
    public CreateDomainConfigurationRequestBodyAuthorizerConfig authorizerConfig;

    public CreateDomainConfigurationRequestBody withAuthorizerConfig(CreateDomainConfigurationRequestBodyAuthorizerConfig authorizerConfig) {
        this.authorizerConfig = authorizerConfig;
        return this;
    }
    
    /**
     * The name of the domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    public String domainName;

    public CreateDomainConfigurationRequestBody withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }
    
    /**
     * The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverCertificateArns")
    public String[] serverCertificateArns;

    public CreateDomainConfigurationRequestBody withServerCertificateArns(String[] serverCertificateArns) {
        this.serverCertificateArns = serverCertificateArns;
        return this;
    }
    
    /**
     * &lt;p&gt;The type of service delivered by the endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Web Services IoT Core currently supports only the &lt;code&gt;DATA&lt;/code&gt; service type.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceType")
    public CreateDomainConfigurationRequestBodyServiceTypeEnum serviceType;

    public CreateDomainConfigurationRequestBody withServiceType(CreateDomainConfigurationRequestBodyServiceTypeEnum serviceType) {
        this.serviceType = serviceType;
        return this;
    }
    
    /**
     * &lt;p&gt;Metadata which can be used to manage the domain configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For URI Request parameters use format: ...key1=value1&amp;amp;key2=value2...&lt;/p&gt; &lt;p&gt;For the CLI command-line parameter use format: &amp;amp;&amp;amp;tags "key1=value1&amp;amp;key2=value2..."&lt;/p&gt; &lt;p&gt;For the cli-input-json file use format: "tags": "key1=value1&amp;amp;key2=value2..."&lt;/p&gt; &lt;/note&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public org.openapis.openapi.models.shared.Tag[] tags;

    public CreateDomainConfigurationRequestBody withTags(org.openapis.openapi.models.shared.Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationCertificateArn")
    public String validationCertificateArn;

    public CreateDomainConfigurationRequestBody withValidationCertificateArn(String validationCertificateArn) {
        this.validationCertificateArn = validationCertificateArn;
        return this;
    }
    
    public CreateDomainConfigurationRequestBody(){}
}
