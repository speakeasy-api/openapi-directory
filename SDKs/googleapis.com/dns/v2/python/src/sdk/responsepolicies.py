"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ResponsePolicies:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dns_response_policies_create(self, request: operations.DNSResponsePoliciesCreateRequest, security: operations.DNSResponsePoliciesCreateSecurity) -> operations.DNSResponsePoliciesCreateResponse:
        r"""Creates a new Response Policy"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePoliciesCreateRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/responsePolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "response_policy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResponsePoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicy])
                res.response_policy = out

        return res

    def dns_response_policies_delete(self, request: operations.DNSResponsePoliciesDeleteRequest, security: operations.DNSResponsePoliciesDeleteSecurity) -> operations.DNSResponsePoliciesDeleteResponse:
        r"""Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePoliciesDeleteRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}', request)
        
        query_params = utils.get_query_params(operations.DNSResponsePoliciesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePoliciesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dns_response_policies_get(self, request: operations.DNSResponsePoliciesGetRequest, security: operations.DNSResponsePoliciesGetSecurity) -> operations.DNSResponsePoliciesGetResponse:
        r"""Fetches the representation of an existing Response Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePoliciesGetRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}', request)
        
        query_params = utils.get_query_params(operations.DNSResponsePoliciesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePoliciesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicy])
                res.response_policy = out

        return res

    def dns_response_policies_list(self, request: operations.DNSResponsePoliciesListRequest, security: operations.DNSResponsePoliciesListSecurity) -> operations.DNSResponsePoliciesListResponse:
        r"""Enumerates all Response Policies associated with a project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePoliciesListRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/responsePolicies', request)
        
        query_params = utils.get_query_params(operations.DNSResponsePoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePoliciesListResponse])
                res.response_policies_list_response = out

        return res

    def dns_response_policies_patch(self, request: operations.DNSResponsePoliciesPatchRequest, security: operations.DNSResponsePoliciesPatchSecurity) -> operations.DNSResponsePoliciesPatchResponse:
        r"""Applies a partial update to an existing Response Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePoliciesPatchRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "response_policy1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResponsePoliciesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePoliciesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePoliciesPatchResponse])
                res.response_policies_patch_response = out

        return res

    def dns_response_policies_update(self, request: operations.DNSResponsePoliciesUpdateRequest, security: operations.DNSResponsePoliciesUpdateSecurity) -> operations.DNSResponsePoliciesUpdateResponse:
        r"""Updates an existing Response Policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePoliciesUpdateRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "response_policy1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResponsePoliciesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePoliciesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePoliciesUpdateResponse])
                res.response_policies_update_response = out

        return res

    