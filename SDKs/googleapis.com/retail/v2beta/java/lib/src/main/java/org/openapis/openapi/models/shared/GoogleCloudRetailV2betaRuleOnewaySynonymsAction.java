/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRetailV2betaRuleOnewaySynonymsAction - Maps a set of terms to a set of synonyms. Set of synonyms will be treated as synonyms of each query term only. `query_terms` will not be treated as synonyms of each other. Example: "sneakers" will use a synonym of "shoes". "shoes" will not use a synonym of "sneakers".
 */
public class GoogleCloudRetailV2betaRuleOnewaySynonymsAction {
    /**
     * Will be [deprecated = true] post migration;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onewayTerms")
    public String[] onewayTerms;
    public GoogleCloudRetailV2betaRuleOnewaySynonymsAction withOnewayTerms(String[] onewayTerms) {
        this.onewayTerms = onewayTerms;
        return this;
    }
    
    /**
     * Terms from the search query. Will treat synonyms as their synonyms. Not themselves synonyms of the synonyms. Can specify up to 100 terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryTerms")
    public String[] queryTerms;
    public GoogleCloudRetailV2betaRuleOnewaySynonymsAction withQueryTerms(String[] queryTerms) {
        this.queryTerms = queryTerms;
        return this;
    }
    
    /**
     * Defines a set of synonyms. Cannot contain duplicates. Can specify up to 100 synonyms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("synonyms")
    public String[] synonyms;
    public GoogleCloudRetailV2betaRuleOnewaySynonymsAction withSynonyms(String[] synonyms) {
        this.synonyms = synonyms;
        return this;
    }
    
}
