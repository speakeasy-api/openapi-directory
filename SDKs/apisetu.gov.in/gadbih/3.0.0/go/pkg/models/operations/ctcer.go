// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CtcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CtcerRequestBodyCertificateParameters struct {
	// Application Reference No
	RefNo string `json:"RefNo"`
	// Token No
	TokenNo string `json:"TokenNo"`
}

// CtcerRequestBodyFormatEnum - The format of the certificate in response.
type CtcerRequestBodyFormatEnum string

const (
	CtcerRequestBodyFormatEnumPdf CtcerRequestBodyFormatEnum = "pdf"
)

func (e CtcerRequestBodyFormatEnum) ToPointer() *CtcerRequestBodyFormatEnum {
	return &e
}

func (e *CtcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = CtcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CtcerRequestBodyFormatEnum: %v", v)
	}
}

// CtcerRequestBody - Request format
type CtcerRequestBody struct {
	CertificateParameters *CtcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CtcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ctcer504ApplicationJSONErrorEnum string

const (
	Ctcer504ApplicationJSONErrorEnumGatewayTimeout Ctcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ctcer504ApplicationJSONErrorEnum) ToPointer() *Ctcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ctcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer504ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ctcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ctcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ctcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer504ApplicationJSON - Gateway timeout
type Ctcer504ApplicationJSON struct {
	Error            *Ctcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ctcer503ApplicationJSONErrorEnum string

const (
	Ctcer503ApplicationJSONErrorEnumServiceUnavailable Ctcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ctcer503ApplicationJSONErrorEnum) ToPointer() *Ctcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ctcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer503ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ctcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ctcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ctcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer503ApplicationJSON - Service unavailable
type Ctcer503ApplicationJSON struct {
	Error            *Ctcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ctcer502ApplicationJSONErrorEnum string

const (
	Ctcer502ApplicationJSONErrorEnumBadGatewy Ctcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ctcer502ApplicationJSONErrorEnum) ToPointer() *Ctcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ctcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer502ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ctcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ctcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ctcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer502ApplicationJSON - Bad gateway
type Ctcer502ApplicationJSON struct {
	Error            *Ctcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ctcer500ApplicationJSONErrorEnum string

const (
	Ctcer500ApplicationJSONErrorEnumInternalServerError Ctcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ctcer500ApplicationJSONErrorEnum) ToPointer() *Ctcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ctcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer500ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer500ApplicationJSONErrorDescriptionEnumInternalServerError Ctcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ctcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ctcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer500ApplicationJSON - Internal server error
type Ctcer500ApplicationJSON struct {
	Error            *Ctcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ctcer404ApplicationJSONErrorEnum string

const (
	Ctcer404ApplicationJSONErrorEnumRecordNotFound Ctcer404ApplicationJSONErrorEnum = "record_not_found"
	Ctcer404ApplicationJSONErrorEnumURLNotFound    Ctcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ctcer404ApplicationJSONErrorEnum) ToPointer() *Ctcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ctcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer404ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ctcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ctcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ctcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ctcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ctcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer404ApplicationJSON - No record found
type Ctcer404ApplicationJSON struct {
	Error            *Ctcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ctcer401ApplicationJSONErrorEnum string

const (
	Ctcer401ApplicationJSONErrorEnumInvalidAuthentication Ctcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Ctcer401ApplicationJSONErrorEnumInvalidAuthorization  Ctcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ctcer401ApplicationJSONErrorEnum) ToPointer() *Ctcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ctcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer401ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ctcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ctcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ctcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ctcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ctcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer401ApplicationJSON - Unauthorized access
type Ctcer401ApplicationJSON struct {
	Error            *Ctcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ctcer400ApplicationJSONErrorEnum string

const (
	Ctcer400ApplicationJSONErrorEnumMissingParameter Ctcer400ApplicationJSONErrorEnum = "missing_parameter"
	Ctcer400ApplicationJSONErrorEnumInvalidParameter Ctcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Ctcer400ApplicationJSONErrorEnumInvalidFormat    Ctcer400ApplicationJSONErrorEnum = "invalid_format"
	Ctcer400ApplicationJSONErrorEnumInvalidTxnid     Ctcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Ctcer400ApplicationJSONErrorEnumInvalidConsentid Ctcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ctcer400ApplicationJSONErrorEnum) ToPointer() *Ctcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ctcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ctcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ctcer400ApplicationJSONErrorDescriptionEnum string

const (
	Ctcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ctcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ctcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Ctcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ctcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ctcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ctcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ctcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ctcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ctcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ctcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ctcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ctcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ctcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ctcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ctcer400ApplicationJSON - Bad request
type Ctcer400ApplicationJSON struct {
	Error            *Ctcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ctcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CtcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ctcer400ApplicationJSONObject *Ctcer400ApplicationJSON
	// Unauthorized access
	Ctcer401ApplicationJSONObject *Ctcer401ApplicationJSON
	// No record found
	Ctcer404ApplicationJSONObject *Ctcer404ApplicationJSON
	// Internal server error
	Ctcer500ApplicationJSONObject *Ctcer500ApplicationJSON
	// Bad gateway
	Ctcer502ApplicationJSONObject *Ctcer502ApplicationJSON
	// Service unavailable
	Ctcer503ApplicationJSONObject *Ctcer503ApplicationJSON
	// Gateway timeout
	Ctcer504ApplicationJSONObject *Ctcer504ApplicationJSON
}
