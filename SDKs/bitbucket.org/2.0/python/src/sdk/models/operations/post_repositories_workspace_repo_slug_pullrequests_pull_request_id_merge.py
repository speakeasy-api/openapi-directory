"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import security as shared_security
from typing import Any, Optional


@dataclasses.dataclass
class PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeRequest:
    
    pull_request_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'pull_request_id', 'style': 'simple', 'explode': False }})
    r"""The id of the pull request."""  
    repo_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo_slug', 'style': 'simple', 'explode': False }})
    r"""This can either be the repository slug or the UUID of the repository,
    surrounded by curly-braces, for example: `{repository UUID}`.
    """  
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID
    surrounded by curly-braces, for example: `{workspace UUID}`.
    """  
    async_: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'async', 'style': 'form', 'explode': True }})
    r"""Default value is false.
    
    
    When set to true, runs merge asynchronously and
    immediately returns a 202 with polling link to
    the task-status API in the Location header.
    
    
    When set to false, runs merge and waits for it to
    complete, returning 200 when it succeeds. If the
    duration of the merge exceeds a timeout threshold,
    the API returns a 202 with polling link to the
    task-status API in the Location header.
    """  
    request_body: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the merge took too long and timed out.
    In this case the caller should retry the request later
    """  
    pullrequest: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""The pull request object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    