// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UsersGetForOrgSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type UsersGetForOrgPathParams struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
	// The slug name of the user
	UserName string `pathParam:"style=simple,explode=false,name=user_name"`
}

type UsersGetForOrgRequest struct {
	PathParams UsersGetForOrgPathParams
	Security   UsersGetForOrgSecurity
}

type UsersGetForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumConflict            UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumNotFound            UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	UsersGetForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     UsersGetForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *UsersGetForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UsersGetForOrgDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersGetForOrgDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UsersGetForOrgDefaultApplicationJSONError struct {
	Code    UsersGetForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

// UsersGetForOrgDefaultApplicationJSON - Error
type UsersGetForOrgDefaultApplicationJSON struct {
	Error UsersGetForOrgDefaultApplicationJSONError `json:"error"`
}

// UsersGetForOrg200ApplicationJSON - Success
type UsersGetForOrg200ApplicationJSON struct {
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The date when the user joined the organization
	JoinedAt string `json:"joined_at"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The role the user has within the organization
	Role string `json:"role"`
}

type UsersGetForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UsersGetForOrg200ApplicationJSONObject *UsersGetForOrg200ApplicationJSON
	// Error
	UsersGetForOrgDefaultApplicationJSONObject *UsersGetForOrgDefaultApplicationJSON
}
