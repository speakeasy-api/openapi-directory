"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetIpamResourceCidrsResult = exports.GetIpamResourceCidrsResultIpamResourceCidrs = exports.GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsResourceTags = exports.GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum;
(function (GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum) {
    GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum["Compliant"] = "compliant";
    GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum["Noncompliant"] = "noncompliant";
    GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum["Unmanaged"] = "unmanaged";
    GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum["Ignored"] = "ignored";
})(GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum || (exports.GetIpamResourceCidrsResultIpamResourceCidrsComplianceStatusEnum = {}));
/**
 * The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum;
(function (GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum) {
    GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum["Managed"] = "managed";
    GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum["Unmanaged"] = "unmanaged";
    GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum["Ignored"] = "ignored";
})(GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum || (exports.GetIpamResourceCidrsResultIpamResourceCidrsManagementStateEnum = {}));
/**
 * The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum;
(function (GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum) {
    GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum["Overlapping"] = "overlapping";
    GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum["Nonoverlapping"] = "nonoverlapping";
    GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum["Ignored"] = "ignored";
})(GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum || (exports.GetIpamResourceCidrsResultIpamResourceCidrsOverlapStatusEnum = {}));
/**
 * The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
 */
var GetIpamResourceCidrsResultIpamResourceCidrsResourceTags = /** @class */ (function (_super) {
    __extends(GetIpamResourceCidrsResultIpamResourceCidrsResourceTags, _super);
    function GetIpamResourceCidrsResultIpamResourceCidrsResourceTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrsResourceTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrsResourceTags.prototype, "value", void 0);
    return GetIpamResourceCidrsResultIpamResourceCidrsResourceTags;
}(utils_1.SpeakeasyBase));
exports.GetIpamResourceCidrsResultIpamResourceCidrsResourceTags = GetIpamResourceCidrsResultIpamResourceCidrsResourceTags;
/**
 * The type of IPAM resource.
 */
var GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum;
(function (GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum) {
    GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum["Vpc"] = "vpc";
    GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum["Subnet"] = "subnet";
    GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum["Eip"] = "eip";
    GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum["PublicIpv4Pool"] = "public-ipv4-pool";
    GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum["Ipv6Pool"] = "ipv6-pool";
})(GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = exports.GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum || (exports.GetIpamResourceCidrsResultIpamResourceCidrsResourceTypeEnum = {}));
/**
 * The CIDR for an IPAM resource.
 */
var GetIpamResourceCidrsResultIpamResourceCidrs = /** @class */ (function (_super) {
    __extends(GetIpamResourceCidrsResultIpamResourceCidrs, _super);
    function GetIpamResourceCidrsResultIpamResourceCidrs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "complianceStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "ipUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "ipamId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "ipamPoolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "ipamScopeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "managementState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "overlapStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceOwnerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetIpamResourceCidrsResultIpamResourceCidrsResourceTags,
        }),
        __metadata("design:type", Array)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResultIpamResourceCidrs.prototype, "vpcId", void 0);
    return GetIpamResourceCidrsResultIpamResourceCidrs;
}(utils_1.SpeakeasyBase));
exports.GetIpamResourceCidrsResultIpamResourceCidrs = GetIpamResourceCidrsResultIpamResourceCidrs;
/**
 * Success
 */
var GetIpamResourceCidrsResult = /** @class */ (function (_super) {
    __extends(GetIpamResourceCidrsResult, _super);
    function GetIpamResourceCidrsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: GetIpamResourceCidrsResultIpamResourceCidrs }),
        __metadata("design:type", Array)
    ], GetIpamResourceCidrsResult.prototype, "ipamResourceCidrs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamResourceCidrsResult.prototype, "nextToken", void 0);
    return GetIpamResourceCidrsResult;
}(utils_1.SpeakeasyBase));
exports.GetIpamResourceCidrsResult = GetIpamResourceCidrsResult;
