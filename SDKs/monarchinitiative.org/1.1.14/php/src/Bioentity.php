<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Bioentity 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns genes associated with a given anatomy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsResponse
     */
	public function getAnatomyGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/anatomy/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns gene IDs for all genes associated with a given anatomy, filtered by taxon
     * 
     * For example, + NCBITaxon:10090 (mouse)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsResponse
     */
	public function getAnatomyGeneByTaxonAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/anatomy/{id}/genes/{taxid}', \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnatomyGeneByTaxonAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a case
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsResponse
     */
	public function getCaseDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/case/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCaseDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a case
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsResponse
     */
	public function getCaseGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/case/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCaseGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns models associated with a case
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsResponse
     */
	public function getCaseModelAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/case/{id}/models', \OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCaseModelAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with a case
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsResponse
     */
	public function getCasePhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/case/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCasePhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns variants associated with a case
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsResponse
     */
	public function getCaseVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/case/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCaseVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns cases associated with a disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsResponse
     */
	public function getDiseaseCaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/cases', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseCaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsResponse
     */
	public function getDiseaseGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsResponse
     */
	public function getDiseaseGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations to models of the disease
     * 
     * In the association object returned, the subject will be the disease, and the object will be the model.
     * The model may be a gene or genetic element.
     * 
     * If the query disease is a general class, the association subject may be to a specific disease.
     * 
     * In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.
     * 
     * In other cases, the association will be *indirect*, for
     * example, chaining over orthology. In these cases the chain
     * will be reflected in the *evidence graph*
     * 
     * * TODO: provide hook into owlsim for dynamic computation of models by similarity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsResponse
     */
	public function getDiseaseModelAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/models', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations to models of the disease constrained by taxon
     * 
     * See /disease/<id>/models route for full details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsResponse
     */
	public function getDiseaseModelTaxonAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/models/{taxon}', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseModelTaxonAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns pathways associated with a disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsResponse
     */
	public function getDiseasePathwayAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/pathways', \OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseasePathwayAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsResponse
     */
	public function getDiseasePhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseasePhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->d2PAssociationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\D2PAssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated with a disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsResponse
     */
	public function getDiseasePublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseasePublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns substances associated with a disease
     * 
     * e.g. drugs or small molecules used to treat
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsResponse
     */
	public function getDiseaseSubstanceAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/treatment', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseSubstanceAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns variants associated with a disease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsResponse
     */
	public function getDiseaseVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/disease/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiseaseVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns annotations associated to a function term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsResponse
     */
	public function getFunctionAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/function/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFunctionAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns genes associated to a GO term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsResponse
     */
	public function getFunctionGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/function/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFunctionGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated to a GO term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsResponse
     */
	public function getFunctionPublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/function/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFunctionPublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns taxons associated to a GO term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsResponse
     */
	public function getFunctionTaxonAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/function/{id}/taxons', \OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFunctionTaxonAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns anatomical entities associated with a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsResponse
     */
	public function getGeneAnatomyAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/anatomy', \OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneAnatomyAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns cases associated with a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsResponse
     */
	public function getGeneCaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/cases', \OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneCaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsResponse
     */
	public function getGeneDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns expression events for a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsResponse
     */
	public function getGeneExpressionAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/expression/anatomy', \OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneExpressionAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns function associations for a gene
     * 
     * IMPLEMENTATION DETAILS
     * ----------------------
     * 
     * Note: currently this is implemented as a query to the GO/AmiGO solr instance.
     * This directly supports IDs such as:
     * 
     *  - ZFIN e.g. ZFIN:ZDB-GENE-050417-357
     * 
     * Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However,
     * the standard for biolink is MGI:nnnn, so you should use this (will be transparently
     * mapped to legacy ID)
     * 
     * Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID.
     * Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be
     * mapped behind the scenes for querying.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsResponse
     */
	public function getGeneFunctionAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/function', \OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneFunctionAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsResponse
     */
	public function getGeneGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns homologs for a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsResponse
     */
	public function getGeneHomologAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/homologs', \OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneHomologAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns interactions for a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsResponse
     */
	public function getGeneInteractions(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/interactions', \OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneInteractionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns models associated with a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsResponse
     */
	public function getGeneModelAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/models', \OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneModelAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return diseases associated with orthologs of a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsResponse
     */
	public function getGeneOrthologDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/ortholog/diseases', \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return phenotypes associated with orthologs for a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsResponse
     */
	public function getGeneOrthologPhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/ortholog/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneOrthologPhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns pathways associated with gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsResponse
     */
	public function getGenePathwayAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/pathways', \OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenePathwayAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsResponse
     */
	public function getGenePhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenePhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated with a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsResponse
     */
	public function getGenePublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenePublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns variants associated with a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsResponse
     */
	public function getGeneVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/gene/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGeneVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations for an entity regardless of the type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsResponse
     */
	public function getGenericAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/{id}/associations', \OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenericAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns basic info on object of any type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectResponse
     */
	public function getGenericObject(
        \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/{id}', \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenericObjectRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bioObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BioObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return basic info on an object for a given type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeResponse
     */
	public function getGenericObjectByType(
        \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/{type}/{id}', \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenericObjectByTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns cases associated with a genotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsResponse
     */
	public function getGenotypeCaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/cases', \OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypeCaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a genotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsResponse
     */
	public function getGenotypeDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypeDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a genotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsResponse
     */
	public function getGenotypeGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes-genotype associations
     * 
     * Genotypes may be related to one another according to the GENO model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsResponse
     */
	public function getGenotypeGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypeGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns models associated with a genotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsResponse
     */
	public function getGenotypeModelAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/models', \OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypeModelAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with a genotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsResponse
     */
	public function getGenotypePhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypePhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated with a genotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsResponse
     */
	public function getGenotypePublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypePublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes-variant associations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsResponse
     */
	public function getGenotypeVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/genotype/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenotypeVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations to GO terms for a gene
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsResponse
     */
	public function getGotermGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/goterm/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGotermGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns cases associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsResponse
     */
	public function getModelCaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/cases', \OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelCaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsResponse
     */
	public function getModelDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsResponse
     */
	public function getModelGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsResponse
     */
	public function getModelGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsResponse
     */
	public function getModelPhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelPhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsResponse
     */
	public function getModelPublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelPublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns variants associated with a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsResponse
     */
	public function getModelVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/model/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetModelVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a pathway
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsResponse
     */
	public function getPathwayDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/pathway/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPathwayDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a pathway
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsResponse
     */
	public function getPathwayGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/pathway/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPathwayGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with a pathway
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsResponse
     */
	public function getPathwayPhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/pathway/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPathwayPhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns anatomical entities associated with a phenotype
     * 
     * Example IDs:
     * 
     *  * MP:0008521 abnormal Bowman membrane
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsResponse
     */
	public function getPhenotypeAnatomyAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/anatomy', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeAnatomyAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->namedObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\NamedObject>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns cases associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsResponse
     */
	public function getPhenotypeCaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/cases', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeCaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsResponse
     */
	public function getPhenotypeDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->d2PAssociationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\D2PAssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsResponse
     */
	public function getPhenotypeGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns gene IDs for all genes associated with a given phenotype, filtered by taxon
     * 
     * For example, MP:0001569 + NCBITaxon:10090 (mouse)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsResponse
     */
	public function getPhenotypeGeneByTaxonAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/gene/{taxid}/ids', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGeneByTaxonAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsResponse
     */
	public function getPhenotypeGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns pathways associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsResponse
     */
	public function getPhenotypePathwayAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/pathways', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePathwayAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsResponse
     */
	public function getPhenotypePublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypePublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns variants associated with a phenotype
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsResponse
     */
	public function getPhenotypeVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/phenotype/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhenotypeVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a publication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsResponse
     */
	public function getPublicationDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/publication/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicationDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a publication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsResponse
     */
	public function getPublicationGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/publication/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicationGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a publication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsResponse
     */
	public function getPublicationGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/publication/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicationGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns models associated with a publication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsResponse
     */
	public function getPublicationModelAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/publication/{id}/models', \OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicationModelAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with a publication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsResponse
     */
	public function getPublicationPhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/publication/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicationPhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns variants associated with a publication
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsResponse
     */
	public function getPublicationVariantAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/publication/{id}/variants', \OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicationVariantAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations between an activity and process and the specified substance
     * 
     * Examples relationships:
     * 
     *  * substance is a metabolite of a process
     *  * substance is synthesized by a process
     *  * substance is modified by an activity
     *  * substance elicits a response program/pathway
     *  * substance is transported by activity or pathway
     * 
     * For example, CHEBI:40036 (amitrole)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsResponse
     */
	public function getSubstanceParticipantInAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/substance/{id}/participant_in', \OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubstanceParticipantInAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Association>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations between given drug and roles
     * 
     * Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsResponse
     */
	public function getSubstanceRoleAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/substance/{id}/roles', \OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubstanceRoleAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Association>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns substances associated with a disease
     * 
     * e.g. drugs or small molecules used to treat
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsResponse
     */
	public function getSubstanceTreatsAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/substance/{id}/treats', \OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubstanceTreatsAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns cases associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsResponse
     */
	public function getVariantCaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/cases', \OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantCaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns diseases associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsResponse
     */
	public function getVariantDiseaseAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/diseases', \OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantDiseaseAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genes associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsResponse
     */
	public function getVariantGeneAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/genes', \OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantGeneAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns genotypes associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsResponse
     */
	public function getVariantGenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/genotypes', \OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantGenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns models associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsResponse
     */
	public function getVariantModelAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/models', \OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantModelAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns phenotypes associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsResponse
     */
	public function getVariantPhenotypeAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/phenotypes', \OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantPhenotypeAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns publications associated with a variant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsResponse
     */
	public function getVariantPublicationAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bioentity/variant/{id}/publications', \OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantPublicationAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssociationResults', 'json');
            }
        }

        return $response;
    }
}