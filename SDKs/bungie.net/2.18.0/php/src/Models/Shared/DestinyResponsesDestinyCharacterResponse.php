<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DestinyResponsesDestinyCharacterResponse - The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DestinyResponsesDestinyCharacterResponse
{
    /**
     * Activity data - info about current activities available to the player.
     * 
     * COMPONENT TYPE: CharacterActivities
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseActivities $activities
     */
	
    public ?DestinyResponsesDestinyCharacterResponseActivities $activities = null;
    
    /**
     * Base information about the character in question.
     * 
     * COMPONENT TYPE: Characters
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseCharacter $character
     */
	
    public ?DestinyResponsesDestinyCharacterResponseCharacter $character = null;
    
    /**
     * COMPONENT TYPE: Collectibles
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseCollectibles $collectibles
     */
	
    public ?DestinyResponsesDestinyCharacterResponseCollectibles $collectibles = null;
    
    /**
     * A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
     * 
     * COMPONENT TYPE: CurrencyLookups
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseCurrencyLookups $currencyLookups
     */
	
    public ?DestinyResponsesDestinyCharacterResponseCurrencyLookups $currencyLookups = null;
    
    /**
     * Equipped items on the character.
     * 
     * COMPONENT TYPE: CharacterEquipment
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseEquipment $equipment
     */
	
    public ?DestinyResponsesDestinyCharacterResponseEquipment $equipment = null;
    
    /**
     * The character-level non-equipped inventory items.
     * 
     * COMPONENT TYPE: CharacterInventories
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseInventory $inventory
     */
	
    public ?DestinyResponsesDestinyCharacterResponseInventory $inventory = null;
    
    /**
     * The set of components belonging to the player's instanced items.
     * 
     * COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseItemComponents $itemComponents
     */
	
    public ?DestinyResponsesDestinyCharacterResponseItemComponents $itemComponents = null;
    
    /**
     * Items available from Kiosks that are available to this specific character. 
     * 
     * COMPONENT TYPE: Kiosks
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseKiosks $kiosks
     */
	
    public ?DestinyResponsesDestinyCharacterResponseKiosks $kiosks = null;
    
    /**
     * The loadouts available to the character.
     * 
     * COMPONENT TYPE: CharacterLoadouts
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseLoadouts $loadouts
     */
	
    public ?DestinyResponsesDestinyCharacterResponseLoadouts $loadouts = null;
    
    /**
     * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
     * 
     * This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
     * COMPONENT TYPE: ItemSockets
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponsePlugSets $plugSets
     */
	
    public ?DestinyResponsesDestinyCharacterResponsePlugSets $plugSets = null;
    
    /**
     * COMPONENT TYPE: PresentationNodes
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponsePresentationNodes $presentationNodes
     */
	
    public ?DestinyResponsesDestinyCharacterResponsePresentationNodes $presentationNodes = null;
    
    /**
     * Character progression data, including Milestones.
     * 
     * COMPONENT TYPE: CharacterProgressions
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseProgressions $progressions
     */
	
    public ?DestinyResponsesDestinyCharacterResponseProgressions $progressions = null;
    
    /**
     * COMPONENT TYPE: Records
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseRecords $records
     */
	
    public ?DestinyResponsesDestinyCharacterResponseRecords $records = null;
    
    /**
     * Character rendering data - a minimal set of information about equipment and dyes used for rendering.
     * 
     * COMPONENT TYPE: CharacterRenderData
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseRenderData $renderData
     */
	
    public ?DestinyResponsesDestinyCharacterResponseRenderData $renderData = null;
    
    /**
     * The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
     * 
     * COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyResponsesDestinyCharacterResponseUninstancedItemComponents $uninstancedItemComponents
     */
	
    public ?DestinyResponsesDestinyCharacterResponseUninstancedItemComponents $uninstancedItemComponents = null;
    
	public function __construct()
	{
		$this->activities = null;
		$this->character = null;
		$this->collectibles = null;
		$this->currencyLookups = null;
		$this->equipment = null;
		$this->inventory = null;
		$this->itemComponents = null;
		$this->kiosks = null;
		$this->loadouts = null;
		$this->plugSets = null;
		$this->presentationNodes = null;
		$this->progressions = null;
		$this->records = null;
		$this->renderData = null;
		$this->uninstancedItemComponents = null;
	}
}
