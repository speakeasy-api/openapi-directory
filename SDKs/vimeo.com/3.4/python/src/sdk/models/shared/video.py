"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import category as shared_category
from ..shared import embed_settings as shared_embed_settings
from ..shared import picture as shared_picture
from ..shared import tag as shared_tag
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class VideoContextActionEnum(str, Enum):
    r"""The contextual action:
    
    Option descriptions:
     * `Added to` - An Added To action.
     * `Appearance by` - An Appearance By action.
     * `Liked by` - A Liked By action.
     * `Uploaded by` - An Unloaded By action.
    """
    ADDED_TO = 'Added to'
    APPEARANCE_BY = 'Appearance by'
    LIKED_BY = 'Liked by'
    UPLOADED_BY = 'Uploaded by'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoContext:
    r"""The context of the video's subscription, if this video is part of a subscription."""
    
    action: VideoContextActionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""The contextual action:
    
    Option descriptions:
     * `Added to` - An Added To action.
     * `Appearance by` - An Appearance By action.
     * `Liked by` - A Liked By action.
     * `Uploaded by` - An Unloaded By action.
    """  
    resource: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource') }})
    r"""The contextual resource: a user, group, or channel representation, or an object of a tag."""  
    resource_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_type') }})
    r"""The contextual resource type."""  
    
class VideoLicenseEnum(str, Enum):
    r"""The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
    
    Option descriptions:
     * `by` - Attribution
     * `by-nc` - Attribution Non-Commercial
     * `by-nc-nd` - Attribution Non-Commercial No Derivatives
     * `by-nc-sa` - Attribution Non-Commercial Share Alike
     * `by-nd` - Attribution No Derivatives
     * `by-sa` - Attribution Share Alike
     * `cc0` - Public Domain Dedication
    """
    BY = 'by'
    BY_NC = 'by-nc'
    BY_NC_ND = 'by-nc-nd'
    BY_NC_SA = 'by-nc-sa'
    BY_ND = 'by-nd'
    BY_SA = 'by-sa'
    CC0 = 'cc0'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsComments:
    r"""Information about the comments on this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of comments on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsCredits:
    r"""Information about the users credited in this video."""
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""The total number of users on this connection."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsLikes:
    r"""Information about the users who have liked this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsOndemand:
    r"""Information about this video's ondemand data."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The On Demand connection resource key."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsPictures:
    r"""Information about this video's thumbnails."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods allowed on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total number of thumbnails on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsPlayback:
    r"""The DRM playback status connection for this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsRecommendations:
    r"""The recommendations for this video."""
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of HTTP methods allowed on this URI."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsRelated:
    r"""Related content for this video."""
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of HTTP methods allowed on this URI."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsSeason:
    r"""Information about the video's season."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of this season."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsTexttracks:
    r"""Information about this video's text tracks."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of text tracks on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsTrailer:
    r"""Information about this video's VOD trailer."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The trailer connection resource key."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsUsersWithAccess:
    r"""Information about the user privacy of this video, if the video privacy is `users`."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnectionsVersions:
    r"""Information about the versions of this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of versions on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    current_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_uri'), 'exclude': lambda f: f is None }})
    r"""The URI of the current version of the video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataConnections:
    r"""A list of resource URIs related to the video."""
    
    comments: VideoMetadataConnectionsComments = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Information about the comments on this video."""  
    credits: VideoMetadataConnectionsCredits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credits') }})
    r"""Information about the users credited in this video."""  
    likes: VideoMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the users who have liked this video."""  
    ondemand: VideoMetadataConnectionsOndemand = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ondemand') }})
    r"""Information about this video's ondemand data."""  
    pictures: VideoMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this video's thumbnails."""  
    playback: VideoMetadataConnectionsPlayback = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playback') }})
    r"""The DRM playback status connection for this video."""  
    recommendations: VideoMetadataConnectionsRecommendations = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendations') }})
    r"""The recommendations for this video."""  
    related: VideoMetadataConnectionsRelated = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""Related content for this video."""  
    season: VideoMetadataConnectionsSeason = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('season') }})
    r"""Information about the video's season."""  
    texttracks: VideoMetadataConnectionsTexttracks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('texttracks') }})
    r"""Information about this video's text tracks."""  
    trailer: VideoMetadataConnectionsTrailer = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trailer') }})
    r"""Information about this video's VOD trailer."""  
    users_with_access: VideoMetadataConnectionsUsersWithAccess = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users_with_access') }})
    r"""Information about the user privacy of this video, if the video privacy is `users`."""  
    versions: VideoMetadataConnectionsVersions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versions') }})
    r"""Information about the versions of this video."""  
    
class VideoMetadataInteractionsBuyDownloadEnum(str, Enum):
    r"""The user's download access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for download.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to download the video.
     * `unavailable` - The video isn't available for download.
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'

class VideoMetadataInteractionsBuyStreamEnum(str, Enum):
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsBuy:
    r"""The Buy interaction for a On Demand video."""
    
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The currency code for the current user's region."""  
    display_price: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_price') }})
    r"""Formatted price to display to buy an On Demand video."""  
    download: VideoMetadataInteractionsBuyDownloadEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download') }})
    r"""The user's download access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for download.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to download the video.
     * `unavailable` - The video isn't available for download.
    """  
    drm: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm') }})
    r"""Whether the video has DRM."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL to buy the On Demand video on Vimeo."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The numeric value of the price for buying the On Demand video."""  
    purchase_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time') }})
    r"""The time in ISO 8601 format when the On Demand video was purchased."""  
    stream: VideoMetadataInteractionsBuyStreamEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream') }})
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The product URI to purchase the On Demand video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsChannel:
    r"""When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsLike:
    r"""Information about whether the authenticated user has liked this video."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether the user has liked the video."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the user liked the video."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    
class VideoMetadataInteractionsRentStreamEnum(str, Enum):
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming.
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsRent:
    r"""The Rent interaction for an On Demand video."""
    
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The currency code for the current user's region."""  
    display_price: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_price') }})
    r"""Formatted price to display to rent an On Demand video."""  
    drm: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm') }})
    r"""Whether the video has DRM."""  
    expires_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_time') }})
    r"""The time in ISO 8601 format when the rental period for the video expires."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL to rent the On Demand video on Vimeo."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The numeric value of the price for buying the On Demand video."""  
    purchase_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time') }})
    r"""The time in ISO 8601 format when the On Demand video was rented."""  
    stream: VideoMetadataInteractionsRentStreamEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream') }})
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The product URI to rent the On Demand video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsReport:
    r"""Information about where and how to report a video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""A list of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsSubscribe:
    r"""Subscription information for an On Demand video."""
    
    drm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm'), 'exclude': lambda f: f is None }})
    r"""Whether the video has DRM."""  
    expires_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_time'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the subscription expires."""  
    purchase_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time'), 'exclude': lambda f: f is None }})
    r"""The tine in ISO 8601 format when the subscription was purchased."""  
    stream: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream'), 'exclude': lambda f: f is None }})
    r"""The stream type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsWatched:
    r"""Information about removing this video from the user's list of watched videos."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether the user has watched the video."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the user watched the video."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractionsWatchlater:
    r"""Information about whether this video appears on the authenticated user's Watch Later list."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether the user has added the video to their Watch later list."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the user added the video to their Watch Later list."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadataInteractions:
    r"""A list of resource URIs related to the video."""
    
    buy: VideoMetadataInteractionsBuy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy') }})
    r"""The Buy interaction for a On Demand video."""  
    channel: VideoMetadataInteractionsChannel = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel."""  
    like: VideoMetadataInteractionsLike = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like') }})
    r"""Information about whether the authenticated user has liked this video."""  
    rent: VideoMetadataInteractionsRent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent') }})
    r"""The Rent interaction for an On Demand video."""  
    report: VideoMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information about where and how to report a video."""  
    watched: VideoMetadataInteractionsWatched = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched') }})
    r"""Information about removing this video from the user's list of watched videos."""  
    watchlater: VideoMetadataInteractionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about whether this video appears on the authenticated user's Watch Later list."""  
    subscribe: Optional[VideoMetadataInteractionsSubscribe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribe'), 'exclude': lambda f: f is None }})
    r"""Subscription information for an On Demand video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoMetadata:
    r"""The video's metadata."""
    
    connections: VideoMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the video."""  
    interactions: VideoMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})
    r"""A list of resource URIs related to the video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoProjectMetadataConnectionsVideos:
    r"""A standard connection object indicating how to get all the videos in this project."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoProjectMetadataConnections:
    r"""A list of resource URIs related to the project."""
    
    videos: VideoProjectMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""A standard connection object indicating how to get all the videos in this project."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoProjectMetadata:
    r"""The project's metadata."""
    
    connections: VideoProjectMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the project."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoProject:
    r"""Information about the folder that contains this video."""
    
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the project was created."""  
    metadata: VideoProjectMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The project's metadata."""  
    modified_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_time') }})
    r"""The time in ISO 8601 format when the project was last modified."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the folder."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The resource key string of the project."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI of the project."""  
    user: shared_user.User = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The owner of the project."""  
    
class VideoPrivacyCommentsEnum(str, Enum):
    r"""Who can comment on the video:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the video.
     * `contacts` - Only contacts can comment on the video.
     * `nobody` - No one can comment on the video.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class VideoPrivacyEmbedEnum(str, Enum):
    r"""The video's embed permission setting:
    
    Option descriptions:
     * `private` - The video is private.
     * `public` - Anyone can embed the video.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'

class VideoPrivacyViewEnum(str, Enum):
    r"""The general privacy setting for the video:
    
    Option descriptions:
     * `anybody` - Anyone can view the video.
     * `contacts` - Only contacts can view the video.
     * `disable` - Hide from vimeo
     * `nobody` - No one besides the owner can view the video.
     * `password` - Anyone with the video's password can view the video.
     * `unlisted` - Not searchable from vimeo.com
     * `users` - Only people with a Vimeo account can view the video.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoPrivacy:
    r"""The video's privacy setting."""
    
    add: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add') }})
    r"""Whether the video can be added to collections."""  
    comments: VideoPrivacyCommentsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Who can comment on the video:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the video.
     * `contacts` - Only contacts can comment on the video.
     * `nobody` - No one can comment on the video.
    """  
    download: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download') }})
    r"""The video's download permission setting."""  
    embed: VideoPrivacyEmbedEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""The video's embed permission setting:
    
    Option descriptions:
     * `private` - The video is private.
     * `public` - Anyone can embed the video.
    """  
    view: VideoPrivacyViewEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view') }})
    r"""The general privacy setting for the video:
    
    Option descriptions:
     * `anybody` - Anyone can view the video.
     * `contacts` - Only contacts can view the video.
     * `disable` - Hide from vimeo
     * `nobody` - No one besides the owner can view the video.
     * `password` - Anyone with the video's password can view the video.
     * `unlisted` - Not searchable from vimeo.com
     * `users` - Only people with a Vimeo account can view the video.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoSpatialDirectorTimeline:
    
    pitch: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pitch'), 'exclude': lambda f: f is None }})
    r"""The director timeline pitch, from -90 (minimum) to 90 (maximum)."""  
    roll: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roll'), 'exclude': lambda f: f is None }})
    r"""The director timeline roll."""  
    time_code: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_code'), 'exclude': lambda f: f is None }})
    r"""The director timeline time code."""  
    yaw: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yaw'), 'exclude': lambda f: f is None }})
    r"""The director timeline yaw, from 0 (minimum) to 360 (maximum)."""  
    
class VideoSpatialProjectionEnum(str, Enum):
    r"""The 360 spatial projection:
    
    Option descriptions:
     * `cubical` - The spatial projection is cubical.
     * `cylindrical` - The spatial projection is cylindrical.
     * `dome` - The spatial projection is dome-shaped.
     * `equirectangular` - The spatial projection is equirectangular.
     * `pyramid` - The spatial projection is pyramid-shaped.
    """
    CUBICAL = 'cubical'
    CYLINDRICAL = 'cylindrical'
    DOME = 'dome'
    EQUIRECTANGULAR = 'equirectangular'
    PYRAMID = 'pyramid'

class VideoSpatialStereoFormatEnum(str, Enum):
    r"""The 360 stereo format:
    
    Option descriptions:
     * `left-right` - The stereo format is left-right.
     * `mono` - The audio is monaural.
     * `top-bottom` - The stereo format is top-bottom.
    """
    LEFT_RIGHT = 'left-right'
    MONO = 'mono'
    TOP_BOTTOM = 'top-bottom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoSpatial:
    r"""360 spatial data."""
    
    director_timeline: list[VideoSpatialDirectorTimeline] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('director_timeline') }})
    r"""360 director timeline."""  
    field_of_view: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_of_view') }})
    r"""The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50."""  
    projection: VideoSpatialProjectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projection') }})
    r"""The 360 spatial projection:
    
    Option descriptions:
     * `cubical` - The spatial projection is cubical.
     * `cylindrical` - The spatial projection is cylindrical.
     * `dome` - The spatial projection is dome-shaped.
     * `equirectangular` - The spatial projection is equirectangular.
     * `pyramid` - The spatial projection is pyramid-shaped.
    """  
    stereo_format: VideoSpatialStereoFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stereo_format') }})
    r"""The 360 stereo format:
    
    Option descriptions:
     * `left-right` - The stereo format is left-right.
     * `mono` - The audio is monaural.
     * `top-bottom` - The stereo format is top-bottom.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoStats:
    r"""A collection of stats associated with this video."""
    
    plays: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plays') }})
    r"""The current total number of times that the video has been played."""  
    
class VideoStatusEnum(str, Enum):
    r"""The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
    
    Option descriptions:
     * `available` - The video is available.
     * `quota_exceeded` - The user's quota is exceeded with this video.
     * `total_cap_exceeded` - The user has exceeded their total cap with this video.
     * `transcode_starting` - Transcoding is beginning for the video.
     * `transcoding` - Transcoding is underway for the video.
     * `transcoding_error` - There was an error in transcoding the video.
     * `unavailable` - The video is unavailable.
     * `uploading` - The video is being uploaded.
     * `uploading_error` - There was an error in uploading the video.
    """
    AVAILABLE = 'available'
    QUOTA_EXCEEDED = 'quota_exceeded'
    TOTAL_CAP_EXCEEDED = 'total_cap_exceeded'
    TRANSCODE_STARTING = 'transcode_starting'
    TRANSCODING = 'transcoding'
    TRANSCODING_ERROR = 'transcoding_error'
    UNAVAILABLE = 'unavailable'
    UPLOADING = 'uploading'
    UPLOADING_ERROR = 'uploading_error'

class VideoTranscodeStatusEnum(str, Enum):
    r"""Status code for this video's availability."""
    COMPLETE = 'complete'
    ERROR = 'error'
    IN_PROGRESS = 'in_progress'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoTranscode:
    r"""The transcode information for a video upload."""
    
    status: Optional[VideoTranscodeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status code for this video's availability."""  
    
class VideoUploadApproachEnum(str, Enum):
    r"""The approach for uploading the video."""
    POST = 'post'
    PULL = 'pull'
    STREAMING = 'streaming'
    TUS = 'tus'

class VideoUploadStatusEnum(str, Enum):
    r"""The status code for the availability of the uploaded video:
    
    Option descriptions:
     * `complete` - The upload is complete.
     * `error` - The upload ended with an error.
     * `in_progress` - The upload is underway.
    """
    COMPLETE = 'complete'
    ERROR = 'error'
    IN_PROGRESS = 'in_progress'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUpload:
    r"""The upload information for this video."""
    
    status: VideoUploadStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status code for the availability of the uploaded video:
    
    Option descriptions:
     * `complete` - The upload is complete.
     * `error` - The upload ended with an error.
     * `in_progress` - The upload is underway.
    """  
    approach: Optional[VideoUploadApproachEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approach'), 'exclude': lambda f: f is None }})
    r"""The approach for uploading the video."""  
    complete_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complete_uri'), 'exclude': lambda f: f is None }})
    r"""The URI for completing the upload."""  
    form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form'), 'exclude': lambda f: f is None }})
    r"""The HTML form for uploading a video through the post approach."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The link of the video to capture through the pull approach."""  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_url'), 'exclude': lambda f: f is None }})
    r"""The redirect URL for the upload app."""  
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The file size in bytes of the uploaded video."""  
    upload_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_link'), 'exclude': lambda f: f is None }})
    r"""The link for sending video file data."""  
    
class VideoUserAccountEnum(str, Enum):
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """
    BASIC = 'basic'
    BUSINESS = 'business'
    LIVE_BUSINESS = 'live_business'
    LIVE_PREMIUM = 'live_premium'
    LIVE_PRO = 'live_pro'
    PLUS = 'plus'
    PRO = 'pro'
    PRO_UNLIMITED = 'pro_unlimited'
    PRODUCER = 'producer'

class VideoUserContentFilterEnum(str, Enum):
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """
    DRUGS = 'drugs'
    LANGUAGE = 'language'
    NUDITY = 'nudity'
    SAFE = 'safe'
    UNRATED = 'unrated'
    VIOLENCE = 'violence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsAlbums:
    r"""Information about the albums created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of albums on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsAppearances:
    r"""Information about the appearances of this user in other videos."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of appearances on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsBlock:
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of blocked users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsCategories:
    r"""Information about this user's followed categories."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of categories on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsChannels:
    r"""Information about this user's subscribed channels."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsFeed:
    r"""Information about this user's feed."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsFolders:
    r"""Information about this user's folders."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of folders on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsFollowers:
    r"""Information about the user's followers."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of followers on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsFollowing:
    r"""Information about the users that the current user is following."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsGroups:
    r"""Information about the groups created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of groups on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsLikes:
    r"""Information about the videos that this user has liked."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsModeratedChannels:
    r"""Information about the channels that this user moderates."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsPictures:
    r"""Information about this user's portraits."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of pictures on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsPortfolios:
    r"""Information about this user's portfolios."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of portfolios on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsRecommendedChannels:
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsRecommendedUsers:
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsShared:
    r"""Information about the videos that have been shared with this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsVideos:
    r"""Information about the videos uploaded by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsWatchedVideos:
    r"""Information about the videos that this user has watched."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnectionsWatchlater:
    r"""Information about the videos that this user wants to watch later."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataConnections:
    r"""The list of resource URIs related to the user."""
    
    albums: VideoUserMetadataConnectionsAlbums = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('albums') }})
    r"""Information about the albums created by this user."""  
    appearances: VideoUserMetadataConnectionsAppearances = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appearances') }})
    r"""Information about the appearances of this user in other videos."""  
    block: VideoUserMetadataConnectionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""  
    categories: VideoUserMetadataConnectionsCategories = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""Information about this user's followed categories."""  
    channels: VideoUserMetadataConnectionsChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels') }})
    r"""Information about this user's subscribed channels."""  
    feed: VideoUserMetadataConnectionsFeed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feed') }})
    r"""Information about this user's feed."""  
    folders: VideoUserMetadataConnectionsFolders = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folders') }})
    r"""Information about this user's folders."""  
    followers: VideoUserMetadataConnectionsFollowers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers') }})
    r"""Information about the user's followers."""  
    following: VideoUserMetadataConnectionsFollowing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following') }})
    r"""Information about the users that the current user is following."""  
    groups: VideoUserMetadataConnectionsGroups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""Information about the groups created by this user."""  
    likes: VideoUserMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the videos that this user has liked."""  
    moderated_channels: VideoUserMetadataConnectionsModeratedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderated_channels') }})
    r"""Information about the channels that this user moderates."""  
    pictures: VideoUserMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this user's portraits."""  
    portfolios: VideoUserMetadataConnectionsPortfolios = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})
    r"""Information about this user's portfolios."""  
    recommended_channels: VideoUserMetadataConnectionsRecommendedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_channels') }})
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""  
    recommended_users: VideoUserMetadataConnectionsRecommendedUsers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_users') }})
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""  
    shared: VideoUserMetadataConnectionsShared = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared') }})
    r"""Information about the videos that have been shared with this user."""  
    videos: VideoUserMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos uploaded by this user."""  
    watched_videos: VideoUserMetadataConnectionsWatchedVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_videos') }})
    r"""Information about the videos that this user has watched."""  
    watchlater: VideoUserMetadataConnectionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about the videos that this user wants to watch later."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataInteractionsAddPrivacyUser:
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataInteractionsBlock:
    r"""Information related to the block status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is blocking the current user."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the block occurred, or the null value if no block exists."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to block or unblock the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataInteractionsFollow:
    r"""Information related to the followed status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is following the current user."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to follow the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataInteractionsReport:
    r"""Information regarding where and how to report a user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""List of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadataInteractions:
    
    block: VideoUserMetadataInteractionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information related to the block status of this user."""  
    follow: VideoUserMetadataInteractionsFollow = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow') }})
    r"""Information related to the followed status of this user."""  
    report: VideoUserMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information regarding where and how to report a user."""  
    add_privacy_user: Optional[VideoUserMetadataInteractionsAddPrivacyUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_privacy_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserMetadata:
    r"""The user's metadata."""
    
    connections: VideoUserMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""The list of resource URIs related to the user."""  
    interactions: VideoUserMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})  
    
class VideoUserPreferencesVideosPrivacyCommentsEnum(str, Enum):
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class VideoUserPreferencesVideosPrivacyEmbedEnum(str, Enum):
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class VideoUserPreferencesVideosPrivacyViewEnum(str, Enum):
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserPreferencesVideosPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether other users can add the user's videos."""  
    comments: Optional[VideoUserPreferencesVideosPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether other users can download the user's videos."""  
    embed: Optional[VideoUserPreferencesVideosPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """  
    view: Optional[VideoUserPreferencesVideosPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserPreferencesVideos:
    
    privacy: Optional[VideoUserPreferencesVideosPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserPreferences:
    
    videos: Optional[VideoUserPreferencesVideos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserUploadQuotaLifetime:
    r"""Information about the user's lifetime upload usage."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your lifetime maximum."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload across the lifetime of your account."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your lifetime limit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserUploadQuotaPeriodic:
    r"""Information about the user's usage for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota for the current period."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload per period."""  
    reset_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reset_date') }})
    r"""The time in ISO 8601 format when your upload quota resets."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota in the current period."""  
    
class VideoUserUploadQuotaSpaceShowingEnum(str, Enum):
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""
    LIFETIME = 'lifetime'
    PERIODIC = 'periodic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserUploadQuotaSpace:
    r"""Information about the user's upload space remaining for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The maximum number of bytes allotted to your upload quota."""  
    showing: VideoUserUploadQuotaSpaceShowingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showing') }})
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserUploadQuota:
    r"""Appears only when the user has upload access and is looking at their own user record."""
    
    lifetime: VideoUserUploadQuotaLifetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime') }})
    r"""Information about the user's lifetime upload usage."""  
    periodic: VideoUserUploadQuotaPeriodic = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodic') }})
    r"""Information about the user's usage for the current period."""  
    space: VideoUserUploadQuotaSpace = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space') }})
    r"""Information about the user's upload space remaining for the current period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUserWebsites:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The website's description."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL of the website."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the website."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoUser:
    r"""The video owner."""
    
    account: VideoUserAccountEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """  
    bio: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio') }})
    r"""The user's bio."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the user account was created."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The absolute URL of this user's profile page."""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The user's location."""  
    metadata: VideoUserMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The user's metadata."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The user's display name."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active portrait of this user."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The user's resource key string."""  
    upload_quota: VideoUserUploadQuota = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_quota') }})
    r"""Appears only when the user has upload access and is looking at their own user record."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The user's canonical relative URI."""  
    websites: list[VideoUserWebsites] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websites') }})
    r"""The user's websites."""  
    content_filter: Optional[VideoUserContentFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_filter'), 'exclude': lambda f: f is None }})
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The user's email address. This data requires a bearer token with the `email` scope."""  
    preferences: Optional[VideoUserPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferences'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Video:
    r"""The video belongs to the category."""
    
    categories: list[shared_category.Category] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""The categories to which this video belongs."""  
    content_rating: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_rating') }})
    r"""The content ratings of this video."""  
    context: VideoContext = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context') }})
    r"""The context of the video's subscription, if this video is part of a subscription."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the video was created."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A brief explanation of the video's content."""  
    duration: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The video's duration in seconds."""  
    embed: shared_embed_settings.EmbedSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""Information about embedding this video."""  
    height: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""The video's height in pixels."""  
    language: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})
    r"""The video's primary language."""  
    license: VideoLicenseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})
    r"""The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
    
    Option descriptions:
     * `by` - Attribution
     * `by-nc` - Attribution Non-Commercial
     * `by-nc-nd` - Attribution Non-Commercial No Derivatives
     * `by-nc-sa` - Attribution Non-Commercial Share Alike
     * `by-nd` - Attribution No Derivatives
     * `by-sa` - Attribution Share Alike
     * `cc0` - Public Domain Dedication
    """  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The link to the video."""  
    metadata: VideoMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The video's metadata."""  
    modified_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_time') }})
    r"""The time in ISO 8601 format when the video metadata was last modified."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The video's title."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active picture for this video."""  
    privacy: VideoPrivacy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy') }})
    r"""The video's privacy setting."""  
    release_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_time') }})
    r"""The time in ISO 8601 format when the video was released."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The resource key string of the video."""  
    spatial: VideoSpatial = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spatial') }})
    r"""360 spatial data."""  
    stats: VideoStats = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats') }})
    r"""A collection of stats associated with this video."""  
    status: VideoStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
    
    Option descriptions:
     * `available` - The video is available.
     * `quota_exceeded` - The user's quota is exceeded with this video.
     * `total_cap_exceeded` - The user has exceeded their total cap with this video.
     * `transcode_starting` - Transcoding is beginning for the video.
     * `transcoding` - Transcoding is underway for the video.
     * `transcoding_error` - There was an error in transcoding the video.
     * `unavailable` - The video is unavailable.
     * `uploading` - The video is being uploaded.
     * `uploading_error` - There was an error in uploading the video.
    """  
    tags: list[shared_tag.Tag] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""An array of all tags assigned to this video."""  
    transcode: VideoTranscode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transcode') }})
    r"""The transcode information for a video upload."""  
    upload: VideoUpload = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload') }})
    r"""The upload information for this video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The video's canonical relative URI."""  
    user: VideoUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The video owner."""  
    width: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""The video's width in pixels."""  
    last_user_action_event_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_user_action_event_date'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the user last modified the video."""  
    parent_folder: Optional[VideoProject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_folder'), 'exclude': lambda f: f is None }})
    r"""Information about the folder that contains this video."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope."""  
    