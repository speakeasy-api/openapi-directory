<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SwitchSettings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a quality of service rule
     * 
     * Add a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchSettingsQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchSettingsQosRuleResponse
     */
	public function createNetworkSwitchSettingsQosRule(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchSettingsQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchSettingsQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchSettingsQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchSettingsQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchSettingsQosRule201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a quality of service rule
     * 
     * Delete a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchSettingsQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchSettingsQosRuleResponse
     */
	public function deleteNetworkSwitchSettingsQosRule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchSettingsQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchSettingsQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchSettingsQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchSettingsQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns the switch network settings
     * 
     * Returns the switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
     */
	public function getNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the MTU configuration
     * 
     * Return the MTU configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMtuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMtuResponse
     */
	public function getNetworkSwitchSettingsMtu(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMtuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMtuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/mtu', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMtuRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMtuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettingsMtu200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return multicast settings for a network
     * 
     * Return multicast settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMulticastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMulticastResponse
     */
	public function getNetworkSwitchSettingsMulticast(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMulticastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMulticastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/multicast', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMulticastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsMulticastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettingsMulticast200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a quality of service rule
     * 
     * Return a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRuleResponse
     */
	public function getNetworkSwitchSettingsQosRule(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettingsQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List quality of service rules
     * 
     * List quality of service rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesResponse
     */
	public function getNetworkSwitchSettingsQosRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettingsQosRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesOrderResponse
     */
	public function getNetworkSwitchSettingsQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettingsQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the storm control configuration for a switch network
     * 
     * Return the storm control configuration for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsStormControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsStormControlResponse
     */
	public function getNetworkSwitchSettingsStormControl(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsStormControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsStormControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/stormControl', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsStormControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsStormControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettingsStormControl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update switch network settings
     * 
     * Update switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
     */
	public function updateNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the MTU configuration
     * 
     * Update the MTU configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMtuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMtuResponse
     */
	public function updateNetworkSwitchSettingsMtu(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMtuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMtuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/mtu', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMtuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMtuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettingsMtu200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update multicast settings for a network
     * 
     * Update multicast settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMulticastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMulticastResponse
     */
	public function updateNetworkSwitchSettingsMulticast(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMulticastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMulticastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/multicast', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMulticastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsMulticastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettingsMulticast200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a quality of service rule
     * 
     * Update a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleResponse
     */
	public function updateNetworkSwitchSettingsQosRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettingsQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the order in which the rules should be processed by the switch
     * 
     * Update the order in which the rules should be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRulesOrderResponse
     */
	public function updateNetworkSwitchSettingsQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettingsQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the storm control configuration for a switch network
     * 
     * Update the storm control configuration for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsStormControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsStormControlResponse
     */
	public function updateNetworkSwitchSettingsStormControl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsStormControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsStormControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings/stormControl', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsStormControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsStormControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettingsStormControl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}