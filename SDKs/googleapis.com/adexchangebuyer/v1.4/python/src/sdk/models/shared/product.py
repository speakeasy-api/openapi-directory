"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import buyer as shared_buyer
from ..shared import contactinformation as shared_contactinformation
from ..shared import dealterms as shared_dealterms
from ..shared import deliverycontrol as shared_deliverycontrol
from ..shared import marketplacelabel as shared_marketplacelabel
from ..shared import publisherprovidedforecast as shared_publisherprovidedforecast
from ..shared import seller as shared_seller
from ..shared import sharedtargeting as shared_sharedtargeting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Product:
    r"""A product is segment of inventory that a seller wishes to sell. It is associated with certain terms and targeting information which helps buyer know more about the inventory. Each field in a product can have one of the following setting:
    
    (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
    """
    
    billed_buyer: Optional[shared_buyer.Buyer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billedBuyer'), 'exclude': lambda f: f is None }})  
    buyer: Optional[shared_buyer.Buyer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer'), 'exclude': lambda f: f is None }})  
    creation_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTimeMs'), 'exclude': lambda f: f is None }})
    r"""Creation time in ms. since epoch (readonly)"""  
    creator_contacts: Optional[list[shared_contactinformation.ContactInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorContacts'), 'exclude': lambda f: f is None }})
    r"""Optional contact information for the creator of this product. (buyer-readonly)"""  
    creator_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorRole'), 'exclude': lambda f: f is None }})
    r"""The role that created the offer. Set to BUYER for buyer initiated offers."""  
    delivery_control: Optional[shared_deliverycontrol.DeliveryControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryControl'), 'exclude': lambda f: f is None }})  
    flight_end_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightEndTimeMs'), 'exclude': lambda f: f is None }})
    r"""The proposed end time for the deal (ms since epoch) (buyer-readonly)"""  
    flight_start_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightStartTimeMs'), 'exclude': lambda f: f is None }})
    r"""Inventory availability dates. (times are in ms since epoch) The granularity is generally in the order of seconds. (buyer-readonly)"""  
    has_creator_signed_off: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasCreatorSignedOff'), 'exclude': lambda f: f is None }})
    r"""If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false."""  
    inventory_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySource'), 'exclude': lambda f: f is None }})
    r"""What exchange will provide this inventory (readonly, except on create)."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"adexchangebuyer#product\\"."""  
    labels: Optional[list[shared_marketplacelabel.MarketplaceLabel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional List of labels for the product (optional, buyer-readonly)."""  
    last_update_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdateTimeMs'), 'exclude': lambda f: f is None }})
    r"""Time of last update in ms. since epoch (readonly)"""  
    legacy_offer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legacyOfferId'), 'exclude': lambda f: f is None }})
    r"""Optional legacy offer id if this offer is a preferred deal offer."""  
    marketplace_publisher_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplacePublisherProfileId'), 'exclude': lambda f: f is None }})
    r"""Marketplace publisher profile Id. This Id differs from the regular publisher_profile_id in that 1. This is a new id, the old Id will be deprecated in 2017. 2. This id uniquely identifies a publisher profile by itself."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name for this product as set by the seller. (buyer-readonly)"""  
    private_auction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAuctionId'), 'exclude': lambda f: f is None }})
    r"""Optional private auction id if this offer is a private auction offer."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""The unique id for the product (readonly)"""  
    publisher_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProfileId'), 'exclude': lambda f: f is None }})
    r"""Id of the publisher profile for a given seller. A (seller.account_id, publisher_profile_id) pair uniquely identifies a publisher profile. Buyers can call the PublisherProfiles::List endpoint to get a list of publisher profiles for a given seller."""  
    publisher_provided_forecast: Optional[shared_publisherprovidedforecast.PublisherProvidedForecast] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProvidedForecast'), 'exclude': lambda f: f is None }})
    r"""This message carries publisher provided forecasting information."""  
    revision_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revisionNumber'), 'exclude': lambda f: f is None }})
    r"""The revision number of the product. (readonly)"""  
    seller: Optional[shared_seller.Seller] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})  
    shared_targetings: Optional[list[shared_sharedtargeting.SharedTargeting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedTargetings'), 'exclude': lambda f: f is None }})
    r"""Targeting that is shared between the buyer and the seller. Each targeting criteria has a specified key and for each key there is a list of inclusion value or exclusion values. (buyer-readonly)"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the product. (buyer-readonly)"""  
    syndication_product: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syndicationProduct'), 'exclude': lambda f: f is None }})
    r"""The syndication product associated with the deal. (readonly, except on create)"""  
    terms: Optional[shared_dealterms.DealTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terms'), 'exclude': lambda f: f is None }})  
    web_property_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyCode'), 'exclude': lambda f: f is None }})
    r"""The web property code for the seller. This field is meant to be copied over as is when creating deals."""  
    