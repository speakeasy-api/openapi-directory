/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Retrieve and submit stories.
 */
export class Stories {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List stories
   */
  getStories(
    req: operations.GetStoriesRequest,
    security: operations.GetStoriesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStoriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStoriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stories";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetStoriesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStoriesResponse =
        new operations.GetStoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStories200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetStories200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a story
   */
  getStory(
    req: operations.GetStoryRequest,
    security: operations.GetStorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/stories/{story_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetStorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStoryResponse = new operations.GetStoryResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Like a story
   */
  likeStory(
    req: operations.LikeStoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LikeStoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LikeStoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stories/{story_id}/like",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LikeStoryResponse =
        new operations.LikeStoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Submit a story
   */
  submitStory(
    req: operations.SubmitStoryRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.SubmitStoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubmitStoryRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stories";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubmitStoryResponse =
        new operations.SubmitStoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Unlike a story
   */
  unlikeStory(
    req: operations.UnlikeStoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UnlikeStoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnlikeStoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stories/{story_id}/unlike",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnlikeStoryResponse =
        new operations.UnlikeStoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Record story viewed
   *
   * @remarks
   * Records every time a user views the full story (and not just a preview or snippet),
   */
  viewedStory(
    req: operations.ViewedStoryRequest,
    security: operations.ViewedStorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ViewedStoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ViewedStoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stories/{story_id}/viewed",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ViewedStorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ViewedStoryResponse =
        new operations.ViewedStoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
