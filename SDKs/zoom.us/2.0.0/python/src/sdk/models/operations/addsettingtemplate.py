"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AddSettingTemplateApplicationJSONTypeEnum(str, Enum):
    r"""The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`."""
    USER = 'user'
    GROUP = 'group'
    AUTO_RECEPTIONIST = 'autoReceptionist'
    COMMONAREA = 'commonarea'
    INTEROP = 'interop'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddSettingTemplateApplicationJSON:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the template."""  
    type: AddSettingTemplateApplicationJSONTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the template."""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the site. Required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details."""  
    

@dataclasses.dataclass
class AddSettingTemplate201ApplicationXML:
    r"""**HTTP Status Code:** `201`<br>
    Created Successfully.
    """
    
    description: Optional[str] = dataclasses.field(default=None)
    r"""Template description."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Template ID."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Template name."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddSettingTemplate201ApplicationJSON:
    r"""**HTTP Status Code:** `201`<br>
    Created Successfully.
    """
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Template description."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Template ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Template name."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`."""  
    

@dataclasses.dataclass
class AddSettingTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    add_setting_template_201_application_json_object: Optional[AddSettingTemplate201ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `201`<br>
    Created Successfully.
    """  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    