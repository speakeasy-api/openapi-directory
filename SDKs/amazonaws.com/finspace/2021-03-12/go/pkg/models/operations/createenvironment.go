// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateEnvironmentRequestBodyFederationModeEnum - <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
type CreateEnvironmentRequestBodyFederationModeEnum string

const (
	CreateEnvironmentRequestBodyFederationModeEnumFederated CreateEnvironmentRequestBodyFederationModeEnum = "FEDERATED"
	CreateEnvironmentRequestBodyFederationModeEnumLocal     CreateEnvironmentRequestBodyFederationModeEnum = "LOCAL"
)

func (e *CreateEnvironmentRequestBodyFederationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FEDERATED":
		fallthrough
	case "LOCAL":
		*e = CreateEnvironmentRequestBodyFederationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEnvironmentRequestBodyFederationModeEnum: %s", s)
	}
}

// CreateEnvironmentRequestBodyFederationParameters - Configuration information when authentication mode is FEDERATED.
type CreateEnvironmentRequestBodyFederationParameters struct {
	ApplicationCallBackURL *string           `json:"applicationCallBackURL,omitempty"`
	AttributeMap           map[string]string `json:"attributeMap,omitempty"`
	FederationProviderName *string           `json:"federationProviderName,omitempty"`
	FederationURN          *string           `json:"federationURN,omitempty"`
	SamlMetadataDocument   *string           `json:"samlMetadataDocument,omitempty"`
	SamlMetadataURL        *string           `json:"samlMetadataURL,omitempty"`
}

// CreateEnvironmentRequestBodySuperuserParameters - Configuration information for the superuser.
type CreateEnvironmentRequestBodySuperuserParameters struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
	FirstName    *string `json:"firstName,omitempty"`
	LastName     *string `json:"lastName,omitempty"`
}

type CreateEnvironmentRequestBody struct {
	// <p>The list of Amazon Resource Names (ARN) of the data bundles to install. Currently supported data bundle ARNs:</p> <ul> <li> <p> <code>arn:aws:finspace:${Region}::data-bundle/capital-markets-sample</code> - Contains sample Capital Markets datasets, categories and controlled vocabularies.</p> </li> <li> <p> <code>arn:aws:finspace:${Region}::data-bundle/taq</code> (default) - Contains trades and quotes data in addition to sample Capital Markets data.</p> </li> </ul>
	DataBundles []string `json:"dataBundles,omitempty"`
	// The description of the FinSpace environment to be created.
	Description *string `json:"description,omitempty"`
	// <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
	FederationMode *CreateEnvironmentRequestBodyFederationModeEnum `json:"federationMode,omitempty"`
	// Configuration information when authentication mode is FEDERATED.
	FederationParameters *CreateEnvironmentRequestBodyFederationParameters `json:"federationParameters,omitempty"`
	// The KMS key id to encrypt your data in the FinSpace environment.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
	// The name of the FinSpace environment to be created.
	Name string `json:"name"`
	// Configuration information for the superuser.
	SuperuserParameters *CreateEnvironmentRequestBodySuperuserParameters `json:"superuserParameters,omitempty"`
	// Add tags to your FinSpace environment.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateEnvironmentRequest struct {
	RequestBody       CreateEnvironmentRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateEnvironmentResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	CreateEnvironmentResponse *shared.CreateEnvironmentResponse
	// InternalServerException
	InternalServerException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
