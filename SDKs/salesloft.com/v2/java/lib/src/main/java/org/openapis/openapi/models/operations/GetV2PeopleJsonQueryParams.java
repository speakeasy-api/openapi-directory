/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetV2PeopleJsonQueryParams {
    /**
     * For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=_query")
    public String query;
    public GetV2PeopleJsonQueryParams withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Filters people by the account they are linked to. Multiple account ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=account_id")
    public Long[] accountId;
    public GetV2PeopleJsonQueryParams withAccountId(Long[] accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Filters people by whether an email that was sent to them bounced or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bounced")
    public Boolean bounced;
    public GetV2PeopleJsonQueryParams withBounced(Boolean bounced) {
        this.bounced = bounced;
        return this;
    }
    
    /**
     * Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of "_is_null" can be passed to filter people that are not on a cadence.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=cadence_id")
    public Long[] cadenceId;
    public GetV2PeopleJsonQueryParams withCadenceId(Long[] cadenceId) {
        this.cadenceId = cadenceId;
        return this;
    }
    
    /**
     * Includes people that can be called given do_not_contact and contact_restrictions property
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=can_call")
    public Boolean canCall;
    public GetV2PeopleJsonQueryParams withCanCall(Boolean canCall) {
        this.canCall = canCall;
        return this;
    }
    
    /**
     * Includes people that can be emailed given do_not_contact and contact_restrictions property
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=can_email")
    public Boolean canEmail;
    public GetV2PeopleJsonQueryParams withCanEmail(Boolean canEmail) {
        this.canEmail = canEmail;
        return this;
    }
    
    /**
     * Includes people that can be sent a text message given do_not_contact and contact_restrictions property
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=can_text")
    public Boolean canText;
    public GetV2PeopleJsonQueryParams withCanText(Boolean canText) {
        this.canText = canText;
        return this;
    }
    
    /**
     * Filters people by their city by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=city")
    public String[] city;
    public GetV2PeopleJsonQueryParams withCity(String[] city) {
        this.city = city;
        return this;
    }
    
    /**
     * Filters people by their country by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=country")
    public String[] country;
    public GetV2PeopleJsonQueryParams withCountry(String[] country) {
        this.country = country;
        return this;
    }
    
    /**
     * Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created_at")
    public java.util.Map<String, Object> createdAt;
    public GetV2PeopleJsonQueryParams withCreatedAt(java.util.Map<String, Object> createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Filters people by crm_id. Multiple crm ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=crm_id")
    public String[] crmId;
    public GetV2PeopleJsonQueryParams withCrmId(String[] crmId) {
        this.crmId = crmId;
        return this;
    }
    
    /**
     * Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]=custom_field_value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=custom_fields")
    public java.util.Map<String, Object> customFields;
    public GetV2PeopleJsonQueryParams withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Includes people that have a given do_not_contact property
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=do_not_contact")
    public Boolean doNotContact;
    public GetV2PeopleJsonQueryParams withDoNotContact(Boolean doNotContact) {
        this.doNotContact = doNotContact;
        return this;
    }
    
    /**
     * Filters people by email address. Multiple emails can be applied. An additional value of "_is_null" can be passed to filter people that do not have an email address.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=email_addresses")
    public String[] emailAddresses;
    public GetV2PeopleJsonQueryParams withEmailAddresses(String[] emailAddresses) {
        this.emailAddresses = emailAddresses;
        return this;
    }
    
    /**
     * Filters people by whether or not they are marked as an European Union Resident or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=eu_resident")
    public Boolean euResident;
    public GetV2PeopleJsonQueryParams withEuResident(Boolean euResident) {
        this.euResident = euResident;
        return this;
    }
    
    /**
     * IDs of people to fetch. If a record can't be found, that record won't be returned and your request will be successful
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=ids")
    public Long[] ids;
    public GetV2PeopleJsonQueryParams withIds(Long[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of "_is_null" can be passed to filter people that were not imported.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=import_id")
    public Long[] importId;
    public GetV2PeopleJsonQueryParams withImportId(Long[] importId) {
        this.importId = importId;
        return this;
    }
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_paging_counts")
    public Boolean includePagingCounts;
    public GetV2PeopleJsonQueryParams withIncludePagingCounts(Boolean includePagingCounts) {
        this.includePagingCounts = includePagingCounts;
        return this;
    }
    
    /**
     * Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of "_is_null" can be passed to filter people do not have a job_seniority.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=job_seniority")
    public String[] jobSeniority;
    public GetV2PeopleJsonQueryParams withJobSeniority(String[] jobSeniority) {
        this.jobSeniority = jobSeniority;
        return this;
    }
    
    /**
     * Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
     * Additional values of "_is_null" or "_is_not_null" can be passed to filter records that either have no timestamp value or any timestamp value.
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_contacted")
    public java.util.Map<String, Object> lastContacted;
    public GetV2PeopleJsonQueryParams withLastContacted(java.util.Map<String, Object> lastContacted) {
        this.lastContacted = lastContacted;
        return this;
    }
    
    /**
     * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit_paging_counts")
    public Boolean limitPagingCounts;
    public GetV2PeopleJsonQueryParams withLimitPagingCounts(Boolean limitPagingCounts) {
        this.limitPagingCounts = limitPagingCounts;
        return this;
    }
    
    /**
     * Filters people by locales. Multiple locales can be applied. An additional value of "Null" can be passed to filter people that do not have a locale.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=locales")
    public String[] locales;
    public GetV2PeopleJsonQueryParams withLocales(String[] locales) {
        this.locales = locales;
        return this;
    }
    
    /**
     * Filters people by whether or not that person is on a cadence or if they have been contacted in any way.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=new")
    public Boolean new_;
    public GetV2PeopleJsonQueryParams withNew(Boolean new_) {
        this.new_ = new_;
        return this;
    }
    
    /**
     * Filters people by the owner's guid. Multiple owner guids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=owned_by_guid")
    public String[] ownedByGuid;
    public GetV2PeopleJsonQueryParams withOwnedByGuid(String[] ownedByGuid) {
        this.ownedByGuid = ownedByGuid;
        return this;
    }
    
    /**
     * Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of "_is_null" can be passed to filter people that are unowned. A "_not_in" modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]=id
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=owner_crm_id")
    public String[] ownerCrmId;
    public GetV2PeopleJsonQueryParams withOwnerCrmId(String[] ownerCrmId) {
        this.ownerCrmId = ownerCrmId;
        return this;
    }
    
    /**
     * Filters people by owner_id. Multiple owner_ids can be applied.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=owner_id")
    public Long[] ownerId;
    public GetV2PeopleJsonQueryParams withOwnerId(Long[] ownerId) {
        this.ownerId = ownerId;
        return this;
    }
    
    /**
     * Filters people by whether the owner is active or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=owner_is_active")
    public Boolean ownerIsActive;
    public GetV2PeopleJsonQueryParams withOwnerIsActive(Boolean ownerIsActive) {
        this.ownerIsActive = ownerIsActive;
        return this;
    }
    
    /**
     * The current page to fetch results from. Defaults to 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public GetV2PeopleJsonQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public GetV2PeopleJsonQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of "_is_null" can be passed to filter people that do not have a stage set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=person_stage_id")
    public Long[] personStageId;
    public GetV2PeopleJsonQueryParams withPersonStageId(Long[] personStageId) {
        this.personStageId = personStageId;
        return this;
    }
    
    /**
     * Filter people by whether or not they have a phone number or not
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")
    public Boolean phoneNumber;
    public GetV2PeopleJsonQueryParams withPhoneNumber(Boolean phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * Filters people by whether or not they have replied to an email or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=replied")
    public Boolean replied;
    public GetV2PeopleJsonQueryParams withReplied(Boolean replied) {
        this.replied = replied;
        return this;
    }
    
    /**
     * Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public String sortBy;
    public GetV2PeopleJsonQueryParams withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_direction")
    public String sortDirection;
    public GetV2PeopleJsonQueryParams withSortDirection(String sortDirection) {
        this.sortDirection = sortDirection;
        return this;
    }
    
    /**
     * Filters people who have been starred by the user guids given.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=starred_by_guid")
    public String[] starredByGuid;
    public GetV2PeopleJsonQueryParams withStarredByGuid(String[] starredByGuid) {
        this.starredByGuid = starredByGuid;
        return this;
    }
    
    /**
     * Filters people by their state by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=state")
    public String[] state;
    public GetV2PeopleJsonQueryParams withState(String[] state) {
        this.state = state;
        return this;
    }
    
    /**
     * Filters people by whether or not they have been marked as a success or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=success")
    public Boolean success;
    public GetV2PeopleJsonQueryParams withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * Filters people by the tag ids applied to the person. Multiple tag ids can be applied.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=tag_id")
    public Long[] tagId;
    public GetV2PeopleJsonQueryParams withTagId(Long[] tagId) {
        this.tagId = tagId;
        return this;
    }
    
    /**
     * Filters people by their title by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=title")
    public String[] title;
    public GetV2PeopleJsonQueryParams withTitle(String[] title) {
        this.title = title;
        return this;
    }
    
    /**
     * Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=updated_at")
    public String[] updatedAt;
    public GetV2PeopleJsonQueryParams withUpdatedAt(String[] updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
