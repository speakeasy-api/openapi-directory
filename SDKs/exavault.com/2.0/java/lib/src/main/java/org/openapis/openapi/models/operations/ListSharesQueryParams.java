/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListSharesQueryParams {
    /**
     * Comma separated list of relationships to include in response. Possible values are **owner**, **resources**, **notifications**, **activity**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    public String include;
    public ListSharesQueryParams withInclude(String include) {
        this.include = include;
        return this;
    }
    
    /**
     * Limit of records to be returned (for pagination)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public ListSharesQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * When provided, only shares with a message that contains the text will be included in the list of matches. Both the subject and the body of all messages will be checked for matches. This will always be a wildcard match, so that searching for **taxes** will return any shares with a message that contains the word "taxes".
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=message")
    public String message;
    public ListSharesQueryParams withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * When provided, only shares whose names include this value will be in the list. Supports wildcards, such as **send\*** to return everything starting with "send".
     * 
     * Use this parameter if you are searching for shares or receives for a specific folder name. For example ** /Clients/ACME/To Be Processed**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;
    public ListSharesQueryParams withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Current offset of records (for pagination)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Long offset;
    public ListSharesQueryParams withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Filter the results to include only shares that invited a certain email address. Supports wildcard matching so that **\*@example.com** will give back entries shared with addresses ending in "@example.com". 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=recipient")
    public String recipient;
    public ListSharesQueryParams withRecipient(String recipient) {
        this.recipient = recipient;
        return this;
    }
    
    /**
     * Set of shares to return. (**all**=all of them, **active**=shares that are currently active, **curentUser**=shares created by you)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scope")
    public ListSharesScopeEnum scope;
    public ListSharesQueryParams withScope(ListSharesScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Searches the share name, username, recipients, share messages fields for the provided value. Supports wildcard searches.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search")
    public String search;
    public ListSharesQueryParams withSearch(String search) {
        this.search = search;
        return this;
    }
    
    /**
     * What order the list of matches should be in.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public ListSharesSortEnum sort;
    public ListSharesQueryParams withSort(ListSharesSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Limit the list of matches to only certain types of shares.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public ListSharesTypeEnum type;
    public ListSharesQueryParams withType(ListSharesTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * When provided, only shares created by the user with that `username` will be included in the list. Does not support wildcard searching.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")
    public String username;
    public ListSharesQueryParams withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
