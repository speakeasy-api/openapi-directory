"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import account as shared_account
from ..shared import accountholderdetails as shared_accountholderdetails
from ..shared import accountholderstatus as shared_accountholderstatus
from ..shared import errorfieldtype as shared_errorfieldtype
from ..shared import kycverificationresult as shared_kycverificationresult
from ..shared import migrationdata as shared_migrationdata
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GetAccountHolderResponseLegalEntityEnum(str, Enum):
    r"""The legal entity of the account holder."""
    BUSINESS = 'Business'
    INDIVIDUAL = 'Individual'
    NON_PROFIT = 'NonProfit'
    PARTNERSHIP = 'Partnership'
    PUBLIC_COMPANY = 'PublicCompany'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountHolderResponse:
    r"""OK - the request has succeeded."""
    
    account_holder_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderCode'), 'exclude': lambda f: f is None }})
    r"""The code of the account holder."""  
    account_holder_details: Optional[shared_accountholderdetails.AccountHolderDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderDetails'), 'exclude': lambda f: f is None }})  
    account_holder_status: Optional[shared_accountholderstatus.AccountHolderStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderStatus'), 'exclude': lambda f: f is None }})  
    accounts: Optional[list[shared_account.Account]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})
    r"""A list of the accounts under the account holder."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the account holder."""  
    invalid_fields: Optional[list[shared_errorfieldtype.ErrorFieldType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidFields'), 'exclude': lambda f: f is None }})
    r"""Contains field validation errors that would prevent requests from being processed."""  
    legal_entity: Optional[GetAccountHolderResponseLegalEntityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalEntity'), 'exclude': lambda f: f is None }})
    r"""The legal entity of the account holder."""  
    migration_data: Optional[shared_migrationdata.MigrationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migrationData'), 'exclude': lambda f: f is None }})  
    primary_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryCurrency'), 'exclude': lambda f: f is None }})
    r"""The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals."""  
    psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pspReference'), 'exclude': lambda f: f is None }})
    r"""The reference of a request. Can be used to uniquely identify the request."""  
    result_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCode'), 'exclude': lambda f: f is None }})
    r"""The result code."""  
    system_up_to_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemUpToDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that shows how up to date is the information in the response."""  
    verification: Optional[shared_kycverificationresult.KYCVerificationResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification'), 'exclude': lambda f: f is None }})  
    verification_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verificationProfile'), 'exclude': lambda f: f is None }})
    r"""The identifier of the profile that applies to this entity."""  
    