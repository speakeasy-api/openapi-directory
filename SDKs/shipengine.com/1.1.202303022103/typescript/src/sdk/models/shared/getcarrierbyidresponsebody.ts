/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Dimensions } from "./dimensions";
import { Expose, Type } from "class-transformer";

/**
 * Advanced options that are specific to the carrier
 */
export class GetCarrierByIdResponseBodyCarrierAdvancedOption extends SpeakeasyBase {
  /**
   * Default value of option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_value" })
  defaultValue?: string;

  /**
   * Description of option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Name of advanced option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * A package type that a carrier supports for shipment.
 */
export class GetCarrierByIdResponseBodyPackageType extends SpeakeasyBase {
  /**
   * Provides a helpful description for the custom package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The custom dimensions for the package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensions" })
  @Type(() => Dimensions)
  dimensions?: Dimensions;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "package_code" })
  packageCode: string;

  /**
   * A string that uniquely identifies the package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_id" })
  packageId?: string;
}

/**
 * A service offered by the carrier
 */
export class GetCarrierByIdResponseBodyService extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_code" })
  carrierCode?: string;

  /**
   * A string that uniquely identifies the carrier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_id" })
  carrierId?: string;

  /**
   * Supports domestic shipping
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domestic" })
  domestic?: boolean;

  /**
   * Supports international shipping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "international" })
  international?: boolean;

  /**
   * Carrier supports multiple packages per shipment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_multi_package_supported" })
  isMultiPackageSupported?: boolean;

  /**
   * User friendly service name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * service code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_code" })
  serviceCode?: string;
}

/**
 * A carrier object that represents a provider such as UPS, USPS, DHL, etc
 *
 * @remarks
 * that has been tied to the current account.
 *
 */
export class GetCarrierByIdResponseBody extends SpeakeasyBase {
  /**
   * The account number that the carrier is connected to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_number" })
  accountNumber?: string;

  /**
   * Current available balance
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance?: number;

  /**
   * A string that uniquely identifies the carrier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_code" })
  carrierCode?: string;

  /**
   * A string that uniquely identifies the carrier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_id" })
  carrierId?: string;

  /**
   * Screen readable name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "friendly_name" })
  friendlyName?: string;

  /**
   * Carrier supports multiple packages per shipment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_multi_package_supporting_services" })
  hasMultiPackageSupportingServices?: boolean;

  /**
   * Nickname given to the account when initially setting up the carrier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nickname" })
  nickname?: string;

  /**
   * A list of options that are available to that carrier
   */
  @SpeakeasyMetadata({
    elemType: GetCarrierByIdResponseBodyCarrierAdvancedOption,
  })
  @Expose({ name: "options" })
  @Type(() => GetCarrierByIdResponseBodyCarrierAdvancedOption)
  options?: GetCarrierByIdResponseBodyCarrierAdvancedOption[];

  /**
   * A list of package types that are supported by the carrier
   */
  @SpeakeasyMetadata({ elemType: GetCarrierByIdResponseBodyPackageType })
  @Expose({ name: "packages" })
  @Type(() => GetCarrierByIdResponseBodyPackageType)
  packages?: GetCarrierByIdResponseBodyPackageType[];

  /**
   * Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary" })
  primary?: boolean;

  /**
   * Indicates whether the carrier requires funding to use its services
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requires_funded_amount" })
  requiresFundedAmount?: boolean;

  /**
   * A list of services that are offered by the carrier
   */
  @SpeakeasyMetadata({ elemType: GetCarrierByIdResponseBodyService })
  @Expose({ name: "services" })
  @Type(() => GetCarrierByIdResponseBodyService)
  services?: GetCarrierByIdResponseBodyService[];

  /**
   * The carrier supports adding custom label messages to an order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supports_label_messages" })
  supportsLabelMessages?: boolean;
}
