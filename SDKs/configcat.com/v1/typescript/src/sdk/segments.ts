/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * With these endpoints you can manage your Segments.
 *
 * @remarks
 * Segments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags.
 */
export class Segments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Segment
   *
   * @remarks
   * This endpoint creates a new Segment in a specified Product
   * identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
   */
  createSegment(
    req: operations.CreateSegmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSegmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSegmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/segments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createSegmentModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSegmentResponse =
        new operations.CreateSegmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.segmentModelHaljson = utils.objectToClass(
              httpRes?.data,
              shared.SegmentModelHaljson
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.segmentModel = utils.objectToClass(
              httpRes?.data,
              shared.SegmentModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete Segment
   *
   * @remarks
   * This endpoint removes a Segment identified by the `segmentId` parameter.
   */
  deleteSegment(
    req: operations.DeleteSegmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSegmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSegmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/segments/{segmentId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSegmentResponse =
        new operations.DeleteSegmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Segment
   *
   * @remarks
   * This endpoint returns the metadata of a Segment
   * identified by the `segmentId`.
   */
  getSegment(
    req: operations.GetSegmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSegmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSegmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/segments/{segmentId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSegmentResponse =
        new operations.GetSegmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.segmentModelHaljson = utils.objectToClass(
              httpRes?.data,
              shared.SegmentModelHaljson
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.segmentModel = utils.objectToClass(
              httpRes?.data,
              shared.SegmentModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List Segments
   *
   * @remarks
   * This endpoint returns the list of the Segments that belongs to the given Product identified by the
   * `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
   */
  getSegments(
    req: operations.GetSegmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSegmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSegmentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/segments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSegmentsResponse =
        new operations.GetSegmentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.segmentListModelHaljsons = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.segmentListModelHaljsons = utils.objectToClass(
              httpRes?.data,
              shared.SegmentListModelHaljson,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.segmentListModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.segmentListModels = utils.objectToClass(
              httpRes?.data,
              shared.SegmentListModel,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update Segment
   *
   * @remarks
   * This endpoint updates a Segment identified by the `segmentId` parameter.
   */
  updateSegment(
    req: operations.UpdateSegmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateSegmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateSegmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/segments/{segmentId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateSegmentModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateSegmentResponse =
        new operations.UpdateSegmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.segmentModelHaljson = utils.objectToClass(
              httpRes?.data,
              shared.SegmentModelHaljson
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.segmentModel = utils.objectToClass(
              httpRes?.data,
              shared.SegmentModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
