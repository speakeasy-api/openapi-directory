// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"openapi/pkg/types"
)

type MappingJobIDTypeEnum string

const (
	MappingJobIDTypeEnumIDIsin                    MappingJobIDTypeEnum = "ID_ISIN"
	MappingJobIDTypeEnumIDBbUnique                MappingJobIDTypeEnum = "ID_BB_UNIQUE"
	MappingJobIDTypeEnumIDSedol                   MappingJobIDTypeEnum = "ID_SEDOL"
	MappingJobIDTypeEnumIDCommon                  MappingJobIDTypeEnum = "ID_COMMON"
	MappingJobIDTypeEnumIDWertpapier              MappingJobIDTypeEnum = "ID_WERTPAPIER"
	MappingJobIDTypeEnumIDCusip                   MappingJobIDTypeEnum = "ID_CUSIP"
	MappingJobIDTypeEnumIDBb                      MappingJobIDTypeEnum = "ID_BB"
	MappingJobIDTypeEnumIDItaly                   MappingJobIDTypeEnum = "ID_ITALY"
	MappingJobIDTypeEnumIDExchSymbol              MappingJobIDTypeEnum = "ID_EXCH_SYMBOL"
	MappingJobIDTypeEnumIDFullExchangeSymbol      MappingJobIDTypeEnum = "ID_FULL_EXCHANGE_SYMBOL"
	MappingJobIDTypeEnumCompositeIDBbGlobal       MappingJobIDTypeEnum = "COMPOSITE_ID_BB_GLOBAL"
	MappingJobIDTypeEnumIDBbGlobalShareClassLevel MappingJobIDTypeEnum = "ID_BB_GLOBAL_SHARE_CLASS_LEVEL"
	MappingJobIDTypeEnumIDBbSecNumDes             MappingJobIDTypeEnum = "ID_BB_SEC_NUM_DES"
	MappingJobIDTypeEnumIDBbGlobal                MappingJobIDTypeEnum = "ID_BB_GLOBAL"
	MappingJobIDTypeEnumTicker                    MappingJobIDTypeEnum = "TICKER"
	MappingJobIDTypeEnumIDCusip8Chr               MappingJobIDTypeEnum = "ID_CUSIP_8_CHR"
	MappingJobIDTypeEnumOccSymbol                 MappingJobIDTypeEnum = "OCC_SYMBOL"
	MappingJobIDTypeEnumUniqueIDFutOpt            MappingJobIDTypeEnum = "UNIQUE_ID_FUT_OPT"
	MappingJobIDTypeEnumOpraSymbol                MappingJobIDTypeEnum = "OPRA_SYMBOL"
	MappingJobIDTypeEnumTradingSystemIdentifier   MappingJobIDTypeEnum = "TRADING_SYSTEM_IDENTIFIER"
	MappingJobIDTypeEnumIDCins                    MappingJobIDTypeEnum = "ID_CINS"
	MappingJobIDTypeEnumIDShortCode               MappingJobIDTypeEnum = "ID_SHORT_CODE"
	MappingJobIDTypeEnumBaseTicker                MappingJobIDTypeEnum = "BASE_TICKER"
	MappingJobIDTypeEnumVendorIndexCode           MappingJobIDTypeEnum = "VENDOR_INDEX_CODE"
)

func (e *MappingJobIDTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ID_ISIN":
		fallthrough
	case "ID_BB_UNIQUE":
		fallthrough
	case "ID_SEDOL":
		fallthrough
	case "ID_COMMON":
		fallthrough
	case "ID_WERTPAPIER":
		fallthrough
	case "ID_CUSIP":
		fallthrough
	case "ID_BB":
		fallthrough
	case "ID_ITALY":
		fallthrough
	case "ID_EXCH_SYMBOL":
		fallthrough
	case "ID_FULL_EXCHANGE_SYMBOL":
		fallthrough
	case "COMPOSITE_ID_BB_GLOBAL":
		fallthrough
	case "ID_BB_GLOBAL_SHARE_CLASS_LEVEL":
		fallthrough
	case "ID_BB_SEC_NUM_DES":
		fallthrough
	case "ID_BB_GLOBAL":
		fallthrough
	case "TICKER":
		fallthrough
	case "ID_CUSIP_8_CHR":
		fallthrough
	case "OCC_SYMBOL":
		fallthrough
	case "UNIQUE_ID_FUT_OPT":
		fallthrough
	case "OPRA_SYMBOL":
		fallthrough
	case "TRADING_SYSTEM_IDENTIFIER":
		fallthrough
	case "ID_CINS":
		fallthrough
	case "ID_SHORT_CODE":
		fallthrough
	case "BASE_TICKER":
		fallthrough
	case "VENDOR_INDEX_CODE":
		*e = MappingJobIDTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MappingJobIDTypeEnum: %s", s)
	}
}

type MappingJobIDValueType string

const (
	MappingJobIDValueTypeStr     MappingJobIDValueType = "str"
	MappingJobIDValueTypeInteger MappingJobIDValueType = "integer"
)

type MappingJobIDValue struct {
	Str     *string
	Integer *int64

	Type MappingJobIDValueType
}

func CreateMappingJobIDValueStr(str string) MappingJobIDValue {
	typ := MappingJobIDValueTypeStr

	return MappingJobIDValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateMappingJobIDValueInteger(integer int64) MappingJobIDValue {
	typ := MappingJobIDValueTypeInteger

	return MappingJobIDValue{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *MappingJobIDValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = MappingJobIDValueTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = MappingJobIDValueTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MappingJobIDValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type MappingJobOptionTypeEnum string

const (
	MappingJobOptionTypeEnumPut  MappingJobOptionTypeEnum = "Put"
	MappingJobOptionTypeEnumCall MappingJobOptionTypeEnum = "Call"
)

func (e *MappingJobOptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Put":
		fallthrough
	case "Call":
		*e = MappingJobOptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MappingJobOptionTypeEnum: %s", s)
	}
}

type MappingJobStateCodeEnum string

const (
	MappingJobStateCodeEnumAb MappingJobStateCodeEnum = "AB"
	MappingJobStateCodeEnumAc MappingJobStateCodeEnum = "AC"
	MappingJobStateCodeEnumAh MappingJobStateCodeEnum = "AH"
	MappingJobStateCodeEnumAk MappingJobStateCodeEnum = "AK"
	MappingJobStateCodeEnumAl MappingJobStateCodeEnum = "AL"
	MappingJobStateCodeEnumAm MappingJobStateCodeEnum = "AM"
	MappingJobStateCodeEnumAr MappingJobStateCodeEnum = "AR"
	MappingJobStateCodeEnumAs MappingJobStateCodeEnum = "AS"
	MappingJobStateCodeEnumAt MappingJobStateCodeEnum = "AT"
	MappingJobStateCodeEnumAz MappingJobStateCodeEnum = "AZ"
	MappingJobStateCodeEnumBc MappingJobStateCodeEnum = "BC"
	MappingJobStateCodeEnumBj MappingJobStateCodeEnum = "BJ"
	MappingJobStateCodeEnumCa MappingJobStateCodeEnum = "CA"
	MappingJobStateCodeEnumCb MappingJobStateCodeEnum = "CB"
	MappingJobStateCodeEnumCo MappingJobStateCodeEnum = "CO"
	MappingJobStateCodeEnumCq MappingJobStateCodeEnum = "CQ"
	MappingJobStateCodeEnumCt MappingJobStateCodeEnum = "CT"
	MappingJobStateCodeEnumCz MappingJobStateCodeEnum = "CZ"
	MappingJobStateCodeEnumDc MappingJobStateCodeEnum = "DC"
	MappingJobStateCodeEnumDe MappingJobStateCodeEnum = "DE"
	MappingJobStateCodeEnumEh MappingJobStateCodeEnum = "EH"
	MappingJobStateCodeEnumFh MappingJobStateCodeEnum = "FH"
	MappingJobStateCodeEnumFi MappingJobStateCodeEnum = "FI"
	MappingJobStateCodeEnumFj MappingJobStateCodeEnum = "FJ"
	MappingJobStateCodeEnumFl MappingJobStateCodeEnum = "FL"
	MappingJobStateCodeEnumFo MappingJobStateCodeEnum = "FO"
	MappingJobStateCodeEnumFs MappingJobStateCodeEnum = "FS"
	MappingJobStateCodeEnumGa MappingJobStateCodeEnum = "GA"
	MappingJobStateCodeEnumGd MappingJobStateCodeEnum = "GD"
	MappingJobStateCodeEnumGf MappingJobStateCodeEnum = "GF"
	MappingJobStateCodeEnumGm MappingJobStateCodeEnum = "GM"
	MappingJobStateCodeEnumGs MappingJobStateCodeEnum = "GS"
	MappingJobStateCodeEnumGu MappingJobStateCodeEnum = "GU"
	MappingJobStateCodeEnumGx MappingJobStateCodeEnum = "GX"
	MappingJobStateCodeEnumGz MappingJobStateCodeEnum = "GZ"
	MappingJobStateCodeEnumHa MappingJobStateCodeEnum = "HA"
	MappingJobStateCodeEnumHb MappingJobStateCodeEnum = "HB"
	MappingJobStateCodeEnumHe MappingJobStateCodeEnum = "HE"
	MappingJobStateCodeEnumHg MappingJobStateCodeEnum = "HG"
	MappingJobStateCodeEnumHi MappingJobStateCodeEnum = "HI"
	MappingJobStateCodeEnumHl MappingJobStateCodeEnum = "HL"
	MappingJobStateCodeEnumHn MappingJobStateCodeEnum = "HN"
	MappingJobStateCodeEnumHo MappingJobStateCodeEnum = "HO"
	MappingJobStateCodeEnumHs MappingJobStateCodeEnum = "HS"
	MappingJobStateCodeEnumIa MappingJobStateCodeEnum = "IA"
	MappingJobStateCodeEnumID MappingJobStateCodeEnum = "ID"
	MappingJobStateCodeEnumIg MappingJobStateCodeEnum = "IG"
	MappingJobStateCodeEnumIk MappingJobStateCodeEnum = "IK"
	MappingJobStateCodeEnumIl MappingJobStateCodeEnum = "IL"
	MappingJobStateCodeEnumIn MappingJobStateCodeEnum = "IN"
	MappingJobStateCodeEnumIt MappingJobStateCodeEnum = "IT"
	MappingJobStateCodeEnumJl MappingJobStateCodeEnum = "JL"
	MappingJobStateCodeEnumJs MappingJobStateCodeEnum = "JS"
	MappingJobStateCodeEnumJx MappingJobStateCodeEnum = "JX"
	MappingJobStateCodeEnumKa MappingJobStateCodeEnum = "KA"
	MappingJobStateCodeEnumKc MappingJobStateCodeEnum = "KC"
	MappingJobStateCodeEnumKn MappingJobStateCodeEnum = "KN"
	MappingJobStateCodeEnumKo MappingJobStateCodeEnum = "KO"
	MappingJobStateCodeEnumKs MappingJobStateCodeEnum = "KS"
	MappingJobStateCodeEnumKt MappingJobStateCodeEnum = "KT"
	MappingJobStateCodeEnumKu MappingJobStateCodeEnum = "KU"
	MappingJobStateCodeEnumKy MappingJobStateCodeEnum = "KY"
	MappingJobStateCodeEnumLa MappingJobStateCodeEnum = "LA"
	MappingJobStateCodeEnumLn MappingJobStateCodeEnum = "LN"
	MappingJobStateCodeEnumMa MappingJobStateCodeEnum = "MA"
	MappingJobStateCodeEnumMb MappingJobStateCodeEnum = "MB"
	MappingJobStateCodeEnumMd MappingJobStateCodeEnum = "MD"
	MappingJobStateCodeEnumMe MappingJobStateCodeEnum = "ME"
	MappingJobStateCodeEnumMg MappingJobStateCodeEnum = "MG"
	MappingJobStateCodeEnumMi MappingJobStateCodeEnum = "MI"
	MappingJobStateCodeEnumMn MappingJobStateCodeEnum = "MN"
	MappingJobStateCodeEnumMo MappingJobStateCodeEnum = "MO"
	MappingJobStateCodeEnumMs MappingJobStateCodeEnum = "MS"
	MappingJobStateCodeEnumMt MappingJobStateCodeEnum = "MT"
	MappingJobStateCodeEnumMz MappingJobStateCodeEnum = "MZ"
	MappingJobStateCodeEnumNb MappingJobStateCodeEnum = "NB"
	MappingJobStateCodeEnumNc MappingJobStateCodeEnum = "NC"
	MappingJobStateCodeEnumNd MappingJobStateCodeEnum = "ND"
	MappingJobStateCodeEnumNe MappingJobStateCodeEnum = "NE"
	MappingJobStateCodeEnumNg MappingJobStateCodeEnum = "NG"
	MappingJobStateCodeEnumNh MappingJobStateCodeEnum = "NH"
	MappingJobStateCodeEnumNj MappingJobStateCodeEnum = "NJ"
	MappingJobStateCodeEnumNl MappingJobStateCodeEnum = "NL"
	MappingJobStateCodeEnumNm MappingJobStateCodeEnum = "NM"
	MappingJobStateCodeEnumNn MappingJobStateCodeEnum = "NN"
	MappingJobStateCodeEnumNr MappingJobStateCodeEnum = "NR"
	MappingJobStateCodeEnumNs MappingJobStateCodeEnum = "NS"
	MappingJobStateCodeEnumNt MappingJobStateCodeEnum = "NT"
	MappingJobStateCodeEnumNu MappingJobStateCodeEnum = "NU"
	MappingJobStateCodeEnumNv MappingJobStateCodeEnum = "NV"
	MappingJobStateCodeEnumNw MappingJobStateCodeEnum = "NW"
	MappingJobStateCodeEnumNx MappingJobStateCodeEnum = "NX"
	MappingJobStateCodeEnumNy MappingJobStateCodeEnum = "NY"
	MappingJobStateCodeEnumOh MappingJobStateCodeEnum = "OH"
	MappingJobStateCodeEnumOk MappingJobStateCodeEnum = "OK"
	MappingJobStateCodeEnumOn MappingJobStateCodeEnum = "ON"
	MappingJobStateCodeEnumOr MappingJobStateCodeEnum = "OR"
	MappingJobStateCodeEnumOs MappingJobStateCodeEnum = "OS"
	MappingJobStateCodeEnumOt MappingJobStateCodeEnum = "OT"
	MappingJobStateCodeEnumOy MappingJobStateCodeEnum = "OY"
	MappingJobStateCodeEnumPa MappingJobStateCodeEnum = "PA"
	MappingJobStateCodeEnumPe MappingJobStateCodeEnum = "PE"
	MappingJobStateCodeEnumPr MappingJobStateCodeEnum = "PR"
	MappingJobStateCodeEnumQc MappingJobStateCodeEnum = "QC"
	MappingJobStateCodeEnumQh MappingJobStateCodeEnum = "QH"
	MappingJobStateCodeEnumQl MappingJobStateCodeEnum = "QL"
	MappingJobStateCodeEnumRi MappingJobStateCodeEnum = "RI"
	MappingJobStateCodeEnumSa MappingJobStateCodeEnum = "SA"
	MappingJobStateCodeEnumSc MappingJobStateCodeEnum = "SC"
	MappingJobStateCodeEnumSd MappingJobStateCodeEnum = "SD"
	MappingJobStateCodeEnumSh MappingJobStateCodeEnum = "SH"
	MappingJobStateCodeEnumSi MappingJobStateCodeEnum = "SI"
	MappingJobStateCodeEnumSk MappingJobStateCodeEnum = "SK"
	MappingJobStateCodeEnumSn MappingJobStateCodeEnum = "SN"
	MappingJobStateCodeEnumSt MappingJobStateCodeEnum = "ST"
	MappingJobStateCodeEnumSx MappingJobStateCodeEnum = "SX"
	MappingJobStateCodeEnumSz MappingJobStateCodeEnum = "SZ"
	MappingJobStateCodeEnumTa MappingJobStateCodeEnum = "TA"
	MappingJobStateCodeEnumTg MappingJobStateCodeEnum = "TG"
	MappingJobStateCodeEnumTj MappingJobStateCodeEnum = "TJ"
	MappingJobStateCodeEnumTk MappingJobStateCodeEnum = "TK"
	MappingJobStateCodeEnumTn MappingJobStateCodeEnum = "TN"
	MappingJobStateCodeEnumTs MappingJobStateCodeEnum = "TS"
	MappingJobStateCodeEnumTt MappingJobStateCodeEnum = "TT"
	MappingJobStateCodeEnumTx MappingJobStateCodeEnum = "TX"
	MappingJobStateCodeEnumTy MappingJobStateCodeEnum = "TY"
	MappingJobStateCodeEnumUt MappingJobStateCodeEnum = "UT"
	MappingJobStateCodeEnumVa MappingJobStateCodeEnum = "VA"
	MappingJobStateCodeEnumVi MappingJobStateCodeEnum = "VI"
	MappingJobStateCodeEnumVt MappingJobStateCodeEnum = "VT"
	MappingJobStateCodeEnumWa MappingJobStateCodeEnum = "WA"
	MappingJobStateCodeEnumWi MappingJobStateCodeEnum = "WI"
	MappingJobStateCodeEnumWk MappingJobStateCodeEnum = "WK"
	MappingJobStateCodeEnumWv MappingJobStateCodeEnum = "WV"
	MappingJobStateCodeEnumWy MappingJobStateCodeEnum = "WY"
	MappingJobStateCodeEnumXj MappingJobStateCodeEnum = "XJ"
	MappingJobStateCodeEnumXz MappingJobStateCodeEnum = "XZ"
	MappingJobStateCodeEnumYa MappingJobStateCodeEnum = "YA"
	MappingJobStateCodeEnumYn MappingJobStateCodeEnum = "YN"
	MappingJobStateCodeEnumYt MappingJobStateCodeEnum = "YT"
	MappingJobStateCodeEnumYu MappingJobStateCodeEnum = "YU"
	MappingJobStateCodeEnumZj MappingJobStateCodeEnum = "ZJ"
)

func (e *MappingJobStateCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AB":
		fallthrough
	case "AC":
		fallthrough
	case "AH":
		fallthrough
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AM":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AT":
		fallthrough
	case "AZ":
		fallthrough
	case "BC":
		fallthrough
	case "BJ":
		fallthrough
	case "CA":
		fallthrough
	case "CB":
		fallthrough
	case "CO":
		fallthrough
	case "CQ":
		fallthrough
	case "CT":
		fallthrough
	case "CZ":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "EH":
		fallthrough
	case "FH":
		fallthrough
	case "FI":
		fallthrough
	case "FJ":
		fallthrough
	case "FL":
		fallthrough
	case "FO":
		fallthrough
	case "FS":
		fallthrough
	case "GA":
		fallthrough
	case "GD":
		fallthrough
	case "GF":
		fallthrough
	case "GM":
		fallthrough
	case "GS":
		fallthrough
	case "GU":
		fallthrough
	case "GX":
		fallthrough
	case "GZ":
		fallthrough
	case "HA":
		fallthrough
	case "HB":
		fallthrough
	case "HE":
		fallthrough
	case "HG":
		fallthrough
	case "HI":
		fallthrough
	case "HL":
		fallthrough
	case "HN":
		fallthrough
	case "HO":
		fallthrough
	case "HS":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IG":
		fallthrough
	case "IK":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "IT":
		fallthrough
	case "JL":
		fallthrough
	case "JS":
		fallthrough
	case "JX":
		fallthrough
	case "KA":
		fallthrough
	case "KC":
		fallthrough
	case "KN":
		fallthrough
	case "KO":
		fallthrough
	case "KS":
		fallthrough
	case "KT":
		fallthrough
	case "KU":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "LN":
		fallthrough
	case "MA":
		fallthrough
	case "MB":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MG":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "MZ":
		fallthrough
	case "NB":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NG":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NL":
		fallthrough
	case "NM":
		fallthrough
	case "NN":
		fallthrough
	case "NR":
		fallthrough
	case "NS":
		fallthrough
	case "NT":
		fallthrough
	case "NU":
		fallthrough
	case "NV":
		fallthrough
	case "NW":
		fallthrough
	case "NX":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "ON":
		fallthrough
	case "OR":
		fallthrough
	case "OS":
		fallthrough
	case "OT":
		fallthrough
	case "OY":
		fallthrough
	case "PA":
		fallthrough
	case "PE":
		fallthrough
	case "PR":
		fallthrough
	case "QC":
		fallthrough
	case "QH":
		fallthrough
	case "QL":
		fallthrough
	case "RI":
		fallthrough
	case "SA":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "SH":
		fallthrough
	case "SI":
		fallthrough
	case "SK":
		fallthrough
	case "SN":
		fallthrough
	case "ST":
		fallthrough
	case "SX":
		fallthrough
	case "SZ":
		fallthrough
	case "TA":
		fallthrough
	case "TG":
		fallthrough
	case "TJ":
		fallthrough
	case "TK":
		fallthrough
	case "TN":
		fallthrough
	case "TS":
		fallthrough
	case "TT":
		fallthrough
	case "TX":
		fallthrough
	case "TY":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WK":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		fallthrough
	case "XJ":
		fallthrough
	case "XZ":
		fallthrough
	case "YA":
		fallthrough
	case "YN":
		fallthrough
	case "YT":
		fallthrough
	case "YU":
		fallthrough
	case "ZJ":
		*e = MappingJobStateCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MappingJobStateCodeEnum: %s", s)
	}
}

// MappingJob - For V3: securityType2 is required when idType is BASE_TICKER or ID_EXCH_SYMBOL.  expiration is required when securityType2 is Option or Warrant.  maturity is required when securityType2 is Pool.
type MappingJob struct {
	// At least one entry should be non-null.
	ContractSize []float64 `json:"contractSize,omitempty"`
	// At least one entry should be non-null.
	Coupon   []float64 `json:"coupon,omitempty"`
	Currency *string   `json:"currency,omitempty"`
	ExchCode *string   `json:"exchCode,omitempty"`
	// At least one entry should be non-null.
	Expiration              []types.Date         `json:"expiration,omitempty"`
	IDType                  MappingJobIDTypeEnum `json:"idType"`
	IDValue                 MappingJobIDValue    `json:"idValue"`
	IncludeUnlistedEquities *bool                `json:"includeUnlistedEquities,omitempty"`
	MarketSecDes            *string              `json:"marketSecDes,omitempty"`
	// At least one entry should be non-null.
	Maturity      []types.Date              `json:"maturity,omitempty"`
	MicCode       *string                   `json:"micCode,omitempty"`
	OptionType    *MappingJobOptionTypeEnum `json:"optionType,omitempty"`
	SecurityType  *string                   `json:"securityType,omitempty"`
	SecurityType2 *string                   `json:"securityType2,omitempty"`
	StateCode     *MappingJobStateCodeEnum  `json:"stateCode,omitempty"`
	// At least one entry should be non-null.
	Strike []float64 `json:"strike,omitempty"`
}
