// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GooglePrivacyDlpV2FindingLikelihoodEnum - Confidence of how likely it is that the `info_type` is correct.
type GooglePrivacyDlpV2FindingLikelihoodEnum string

const (
	GooglePrivacyDlpV2FindingLikelihoodEnumLikelihoodUnspecified GooglePrivacyDlpV2FindingLikelihoodEnum = "LIKELIHOOD_UNSPECIFIED"
	GooglePrivacyDlpV2FindingLikelihoodEnumVeryUnlikely          GooglePrivacyDlpV2FindingLikelihoodEnum = "VERY_UNLIKELY"
	GooglePrivacyDlpV2FindingLikelihoodEnumUnlikely              GooglePrivacyDlpV2FindingLikelihoodEnum = "UNLIKELY"
	GooglePrivacyDlpV2FindingLikelihoodEnumPossible              GooglePrivacyDlpV2FindingLikelihoodEnum = "POSSIBLE"
	GooglePrivacyDlpV2FindingLikelihoodEnumLikely                GooglePrivacyDlpV2FindingLikelihoodEnum = "LIKELY"
	GooglePrivacyDlpV2FindingLikelihoodEnumVeryLikely            GooglePrivacyDlpV2FindingLikelihoodEnum = "VERY_LIKELY"
)

func (e *GooglePrivacyDlpV2FindingLikelihoodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIKELIHOOD_UNSPECIFIED":
		fallthrough
	case "VERY_UNLIKELY":
		fallthrough
	case "UNLIKELY":
		fallthrough
	case "POSSIBLE":
		fallthrough
	case "LIKELY":
		fallthrough
	case "VERY_LIKELY":
		*e = GooglePrivacyDlpV2FindingLikelihoodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2FindingLikelihoodEnum: %s", s)
	}
}

// GooglePrivacyDlpV2Finding - Represents a piece of potentially sensitive content.
type GooglePrivacyDlpV2Finding struct {
	// Timestamp when finding was detected.
	CreateTime *string `json:"createTime,omitempty"`
	// The unique finding id.
	FindingID *string `json:"findingId,omitempty"`
	// Type of information detected by the API.
	InfoType *GooglePrivacyDlpV2InfoType `json:"infoType,omitempty"`
	// Time the job started that produced this finding.
	JobCreateTime *string `json:"jobCreateTime,omitempty"`
	// The job that stored the finding.
	JobName *string `json:"jobName,omitempty"`
	// The labels associated with this `Finding`. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
	Labels map[string]string `json:"labels,omitempty"`
	// Confidence of how likely it is that the `info_type` is correct.
	Likelihood *GooglePrivacyDlpV2FindingLikelihoodEnum `json:"likelihood,omitempty"`
	// Specifies the location of the finding.
	Location *GooglePrivacyDlpV2Location `json:"location,omitempty"`
	// Resource name in format projects/{project}/locations/{location}/findings/{finding} Populated only when viewing persisted findings.
	Name *string `json:"name,omitempty"`
	// The content that was found. Even if the content is not textual, it may be converted to a textual representation here. Provided if `include_quote` is true and the finding is less than or equal to 4096 bytes long. If the finding exceeds 4096 bytes in length, the quote may be omitted.
	Quote *string `json:"quote,omitempty"`
	// Message for infoType-dependent details parsed from quote.
	QuoteInfo *GooglePrivacyDlpV2QuoteInfo `json:"quoteInfo,omitempty"`
	// The job that stored the finding.
	ResourceName *string `json:"resourceName,omitempty"`
	// Job trigger name, if applicable, for this finding.
	TriggerName *string `json:"triggerName,omitempty"`
}
