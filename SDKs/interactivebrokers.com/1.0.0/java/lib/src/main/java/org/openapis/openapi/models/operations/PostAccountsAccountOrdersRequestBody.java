/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostAccountsAccountOrdersRequestBody - Order Parameters
 */
public class PostAccountsAccountOrdersRequestBody {
    /**
     * Required Price to support Stop and Stop Limit orders
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Aux Price")
    public Double auxPrice;
    public PostAccountsAccountOrdersRequestBody withAuxPrice(Double auxPrice) {
        this.auxPrice = auxPrice;
        return this;
    }
    
    /**
     * The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContractId")
    public Double contractId;
    public PostAccountsAccountOrdersRequestBody withContractId(Double contractId) {
        this.contractId = contractId;
        return this;
    }
    
    /**
     * The currency in which the FX pair trades (only for InstrumentType=CASH)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Currency")
    public String currency;
    public PostAccountsAccountOrdersRequestBody withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The order ID assigned by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CustomerOrderId")
    public String customerOrderId;
    public PostAccountsAccountOrdersRequestBody withCustomerOrderId(String customerOrderId) {
        this.customerOrderId = customerOrderId;
        return this;
    }
    
    /**
     * By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GermanHftAlgo")
    public Boolean germanHftAlgo;
    public PostAccountsAccountOrdersRequestBody withGermanHftAlgo(Boolean germanHftAlgo) {
        this.germanHftAlgo = germanHftAlgo;
        return this;
    }
    
    /**
     * The instrument type of the contract
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstrumentType")
    public String instrumentType;
    public PostAccountsAccountOrdersRequestBody withInstrumentType(String instrumentType) {
        this.instrumentType = instrumentType;
        return this;
    }
    
    /**
     * The exchange on which the trading product is listed (only for InstrumentType=STK)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ListingExchange")
    public String listingExchange;
    public PostAccountsAccountOrdersRequestBody withListingExchange(String listingExchange) {
        this.listingExchange = listingExchange;
        return this;
    }
    
    /**
     * This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Mifid2Algo")
    public String mifid2Algo;
    public PostAccountsAccountOrdersRequestBody withMifid2Algo(String mifid2Algo) {
        this.mifid2Algo = mifid2Algo;
        return this;
    }
    
    /**
     * This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Mifid2DecisionMaker")
    public String mifid2DecisionMaker;
    public PostAccountsAccountOrdersRequestBody withMifid2DecisionMaker(String mifid2DecisionMaker) {
        this.mifid2DecisionMaker = mifid2DecisionMaker;
        return this;
    }
    
    /**
     * This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Mifid2ExecutionAlgo")
    public String mifid2ExecutionAlgo;
    public PostAccountsAccountOrdersRequestBody withMifid2ExecutionAlgo(String mifid2ExecutionAlgo) {
        this.mifid2ExecutionAlgo = mifid2ExecutionAlgo;
        return this;
    }
    
    /**
     * This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Mifid2ExecutionTrader")
    public String mifid2ExecutionTrader;
    public PostAccountsAccountOrdersRequestBody withMifid2ExecutionTrader(String mifid2ExecutionTrader) {
        this.mifid2ExecutionTrader = mifid2ExecutionTrader;
        return this;
    }
    
    /**
     * Market = '1'
     * Limit = '2'
     * Stop = '3'
     * StopLimit = '4'
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Order Type")
    public org.openapis.openapi.models.shared.OrderTypeEnum orderType;
    public PostAccountsAccountOrdersRequestBody withOrderType(org.openapis.openapi.models.shared.OrderTypeEnum orderType) {
        this.orderType = orderType;
        return this;
    }
    
    /**
     * MultiValueString representing the restrictions associated with
     * an order. If more than one restriction is applicable to an
     * order, this field can contain multiple instructions separated
     * by space. 
     * '1' Program Trade
     * '2' Index Arbitrage 
     * '3' Non-Index Arbitrage
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OrderRestrictions")
    public Double orderRestrictions;
    public PostAccountsAccountOrdersRequestBody withOrderRestrictions(Double orderRestrictions) {
        this.orderRestrictions = orderRestrictions;
        return this;
    }
    
    /**
     * Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Outside RTH")
    public Double outsideRTH;
    public PostAccountsAccountOrdersRequestBody withOutsideRTH(Double outsideRTH) {
        this.outsideRTH = outsideRTH;
        return this;
    }
    
    /**
     * The order price
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Price")
    public Double price;
    public PostAccountsAccountOrdersRequestBody withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * The number of units in the order; contracts or shares
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Quantity")
    public Double quantity;
    public PostAccountsAccountOrdersRequestBody withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Buy = '1', Sell = '2'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Side")
    public PostAccountsAccountOrdersRequestBodySideEnum side;
    public PostAccountsAccountOrdersRequestBody withSide(PostAccountsAccountOrdersRequestBodySideEnum side) {
        this.side = side;
        return this;
    }
    
    /**
     * The symbol that identifies the trading product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ticker")
    public String ticker;
    public PostAccountsAccountOrdersRequestBody withTicker(String ticker) {
        this.ticker = ticker;
        return this;
    }
    
    /**
     * Defines order's active lifetime.
     * Day = '0'
     * GTC (Good till Cancel) = '1'
     * IOC (Immediate or Cancel) = '3'
     * Open = '2'
     * Close = '7'
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Time in Force")
    public org.openapis.openapi.models.shared.TimeInForceEnum timeInForce;
    public PostAccountsAccountOrdersRequestBody withTimeInForce(org.openapis.openapi.models.shared.TimeInForceEnum timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }
    
}
