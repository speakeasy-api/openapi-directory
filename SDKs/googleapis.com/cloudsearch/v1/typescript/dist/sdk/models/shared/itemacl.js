"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemAcl = exports.ItemAclAclInheritanceTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var principal_1 = require("./principal");
var class_transformer_1 = require("class-transformer");
/**
 * Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.
 */
var ItemAclAclInheritanceTypeEnum;
(function (ItemAclAclInheritanceTypeEnum) {
    ItemAclAclInheritanceTypeEnum["NotApplicable"] = "NOT_APPLICABLE";
    ItemAclAclInheritanceTypeEnum["ChildOverride"] = "CHILD_OVERRIDE";
    ItemAclAclInheritanceTypeEnum["ParentOverride"] = "PARENT_OVERRIDE";
    ItemAclAclInheritanceTypeEnum["BothPermit"] = "BOTH_PERMIT";
})(ItemAclAclInheritanceTypeEnum = exports.ItemAclAclInheritanceTypeEnum || (exports.ItemAclAclInheritanceTypeEnum = {}));
/**
 * Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).
 */
var ItemAcl = /** @class */ (function (_super) {
    __extends(ItemAcl, _super);
    function ItemAcl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "aclInheritanceType" }),
        __metadata("design:type", String)
    ], ItemAcl.prototype, "aclInheritanceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: principal_1.Principal }),
        (0, class_transformer_1.Expose)({ name: "deniedReaders" }),
        (0, class_transformer_1.Type)(function () { return principal_1.Principal; }),
        __metadata("design:type", Array)
    ], ItemAcl.prototype, "deniedReaders", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "inheritAclFrom" }),
        __metadata("design:type", String)
    ], ItemAcl.prototype, "inheritAclFrom", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: principal_1.Principal }),
        (0, class_transformer_1.Expose)({ name: "owners" }),
        (0, class_transformer_1.Type)(function () { return principal_1.Principal; }),
        __metadata("design:type", Array)
    ], ItemAcl.prototype, "owners", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: principal_1.Principal }),
        (0, class_transformer_1.Expose)({ name: "readers" }),
        (0, class_transformer_1.Type)(function () { return principal_1.Principal; }),
        __metadata("design:type", Array)
    ], ItemAcl.prototype, "readers", void 0);
    return ItemAcl;
}(utils_1.SpeakeasyBase));
exports.ItemAcl = ItemAcl;
