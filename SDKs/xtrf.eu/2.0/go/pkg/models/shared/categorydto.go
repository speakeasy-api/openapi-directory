// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CategoryDTOSupportedClassesEnum - set of types for which this category can be selected
type CategoryDTOSupportedClassesEnum string

const (
	CategoryDTOSupportedClassesEnumProject         CategoryDTOSupportedClassesEnum = "PROJECT"
	CategoryDTOSupportedClassesEnumQuote           CategoryDTOSupportedClassesEnum = "QUOTE"
	CategoryDTOSupportedClassesEnumQuoteTask       CategoryDTOSupportedClassesEnum = "QUOTE_TASK"
	CategoryDTOSupportedClassesEnumTask            CategoryDTOSupportedClassesEnum = "TASK"
	CategoryDTOSupportedClassesEnumProvider        CategoryDTOSupportedClassesEnum = "PROVIDER"
	CategoryDTOSupportedClassesEnumCustomer        CategoryDTOSupportedClassesEnum = "CUSTOMER"
	CategoryDTOSupportedClassesEnumCustomerPerson  CategoryDTOSupportedClassesEnum = "CUSTOMER_PERSON"
	CategoryDTOSupportedClassesEnumProviderPerson  CategoryDTOSupportedClassesEnum = "PROVIDER_PERSON"
	CategoryDTOSupportedClassesEnumFinancialReport CategoryDTOSupportedClassesEnum = "FINANCIAL_REPORT"
	CategoryDTOSupportedClassesEnumReminder        CategoryDTOSupportedClassesEnum = "REMINDER"
	CategoryDTOSupportedClassesEnumProviderInvoice CategoryDTOSupportedClassesEnum = "PROVIDER_INVOICE"
	CategoryDTOSupportedClassesEnumCustomerInvoice CategoryDTOSupportedClassesEnum = "CUSTOMER_INVOICE"
	CategoryDTOSupportedClassesEnumProjectGroup    CategoryDTOSupportedClassesEnum = "PROJECT_GROUP"
)

func (e *CategoryDTOSupportedClassesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROJECT":
		fallthrough
	case "QUOTE":
		fallthrough
	case "QUOTE_TASK":
		fallthrough
	case "TASK":
		fallthrough
	case "PROVIDER":
		fallthrough
	case "CUSTOMER":
		fallthrough
	case "CUSTOMER_PERSON":
		fallthrough
	case "PROVIDER_PERSON":
		fallthrough
	case "FINANCIAL_REPORT":
		fallthrough
	case "REMINDER":
		fallthrough
	case "PROVIDER_INVOICE":
		fallthrough
	case "CUSTOMER_INVOICE":
		fallthrough
	case "PROJECT_GROUP":
		*e = CategoryDTOSupportedClassesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CategoryDTOSupportedClassesEnum: %s", s)
	}
}

// CategoryDTO - group of things (ie. customers or projects) similar in some way (ie. VIP customers)
type CategoryDTO struct {
	// should this value be available on the XTRF selection lists
	Active *bool `json:"active,omitempty"`
	// should this value be set by default in XTRF selection lists
	Default *bool `json:"default,omitempty"`
	// internal identifier
	ID *int64 `json:"id,omitempty"`
	// localised name (formatted in the current user's locale)
	Name *string `json:"name,omitempty"`
	// should this value be available on the top of XTRF selection lists, in the Preferred section
	Preferred *bool `json:"preferred,omitempty"`
	// set of types for which this category can be selected
	SupportedClasses []CategoryDTOSupportedClassesEnum `json:"supportedClasses,omitempty"`
}
