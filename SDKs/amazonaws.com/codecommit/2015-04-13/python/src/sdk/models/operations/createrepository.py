"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createrepositoryinput as shared_createrepositoryinput
from ..shared import createrepositoryoutput as shared_createrepositoryoutput
from enum import Enum
from typing import Any, Optional

class CreateRepositoryXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_CREATE_REPOSITORY = 'CodeCommit_20150413.CreateRepository'


@dataclasses.dataclass
class CreateRepositoryRequest:
    
    create_repository_input: shared_createrepositoryinput.CreateRepositoryInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateRepositoryXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateRepositoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_repository_output: Optional[shared_createrepositoryoutput.CreateRepositoryOutput] = dataclasses.field(default=None)
    r"""Success"""  
    encryption_integrity_checks_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionIntegrityChecksFailedException"""  
    encryption_key_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyAccessDeniedException"""  
    encryption_key_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyDisabledException"""  
    encryption_key_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyNotFoundException"""  
    encryption_key_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyUnavailableException"""  
    invalid_repository_description_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRepositoryDescriptionException"""  
    invalid_repository_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRepositoryNameException"""  
    invalid_system_tag_usage_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidSystemTagUsageException"""  
    invalid_tags_map_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTagsMapException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryLimitExceededException"""  
    repository_name_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNameExistsException"""  
    repository_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNameRequiredException"""  
    tag_policy_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagPolicyException"""  
    too_many_tags_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyTagsException"""  
    