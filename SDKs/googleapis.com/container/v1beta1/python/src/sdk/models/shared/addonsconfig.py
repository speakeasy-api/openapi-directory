"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudrunconfig as shared_cloudrunconfig
from ..shared import configconnectorconfig as shared_configconnectorconfig
from ..shared import dnscacheconfig as shared_dnscacheconfig
from ..shared import gcepersistentdiskcsidriverconfig as shared_gcepersistentdiskcsidriverconfig
from ..shared import gcpfilestorecsidriverconfig as shared_gcpfilestorecsidriverconfig
from ..shared import gkebackupagentconfig as shared_gkebackupagentconfig
from ..shared import horizontalpodautoscaling as shared_horizontalpodautoscaling
from ..shared import httploadbalancing as shared_httploadbalancing
from ..shared import istioconfig as shared_istioconfig
from ..shared import kalmconfig as shared_kalmconfig
from ..shared import kubernetesdashboard as shared_kubernetesdashboard
from ..shared import networkpolicyconfig as shared_networkpolicyconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddonsConfig:
    r"""Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality."""
    
    cloud_run_config: Optional[shared_cloudrunconfig.CloudRunConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudRunConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration options for the Cloud Run feature."""  
    config_connector_config: Optional[shared_configconnectorconfig.ConfigConnectorConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configConnectorConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration options for the Config Connector add-on."""  
    dns_cache_config: Optional[shared_dnscacheconfig.DNSCacheConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsCacheConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for NodeLocal DNSCache"""  
    gce_persistent_disk_csi_driver_config: Optional[shared_gcepersistentdiskcsidriverconfig.GcePersistentDiskCsiDriverConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcePersistentDiskCsiDriverConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the Compute Engine PD CSI driver."""  
    gcp_filestore_csi_driver_config: Optional[shared_gcpfilestorecsidriverconfig.GcpFilestoreCsiDriverConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcpFilestoreCsiDriverConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the GCP Filestore CSI driver."""  
    gke_backup_agent_config: Optional[shared_gkebackupagentconfig.GkeBackupAgentConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeBackupAgentConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for the Backup for GKE Agent."""  
    horizontal_pod_autoscaling: Optional[shared_horizontalpodautoscaling.HorizontalPodAutoscaling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('horizontalPodAutoscaling'), 'exclude': lambda f: f is None }})
    r"""Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods."""  
    http_load_balancing: Optional[shared_httploadbalancing.HTTPLoadBalancing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpLoadBalancing'), 'exclude': lambda f: f is None }})
    r"""Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster."""  
    istio_config: Optional[shared_istioconfig.IstioConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('istioConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration options for Istio addon."""  
    kalm_config: Optional[shared_kalmconfig.KalmConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kalmConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration options for the KALM addon."""  
    kubernetes_dashboard: Optional[shared_kubernetesdashboard.KubernetesDashboard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesDashboard'), 'exclude': lambda f: f is None }})
    r"""Configuration for the Kubernetes Dashboard."""  
    network_policy_config: Optional[shared_networkpolicyconfig.NetworkPolicyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkPolicyConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes."""  
    