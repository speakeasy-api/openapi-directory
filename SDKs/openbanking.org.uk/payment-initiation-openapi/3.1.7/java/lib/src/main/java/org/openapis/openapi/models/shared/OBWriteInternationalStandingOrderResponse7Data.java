/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class OBWriteInternationalStandingOrderResponse7Data {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Charges")
    public OBWriteInternationalStandingOrderResponse7DataCharges[] charges;

    public OBWriteInternationalStandingOrderResponse7Data withCharges(OBWriteInternationalStandingOrderResponse7DataCharges[] charges) {
        this.charges = charges;
        return this;
    }
    
    /**
     * OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
     */
    @JsonProperty("ConsentId")
    public String consentId;

    public OBWriteInternationalStandingOrderResponse7Data withConsentId(String consentId) {
        this.consentId = consentId;
        return this;
    }
    
    /**
     * Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreationDateTime")
    public OffsetDateTime creationDateTime;

    public OBWriteInternationalStandingOrderResponse7Data withCreationDateTime(OffsetDateTime creationDateTime) {
        this.creationDateTime = creationDateTime;
        return this;
    }
    
    /**
     * ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Debtor")
    public OBCashAccountDebtor4 debtor;

    public OBWriteInternationalStandingOrderResponse7Data withDebtor(OBCashAccountDebtor4 debtor) {
        this.debtor = debtor;
        return this;
    }
    
    /**
     * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
     */
    @JsonProperty("Initiation")
    public OBWriteInternationalStandingOrderResponse7DataInitiation initiation;

    public OBWriteInternationalStandingOrderResponse7Data withInitiation(OBWriteInternationalStandingOrderResponse7DataInitiation initiation) {
        this.initiation = initiation;
        return this;
    }
    
    /**
     * OB: Unique identification as assigned by the ASPSP to uniquely identify the international standing order resource.
     */
    @JsonProperty("InternationalStandingOrderId")
    public String internationalStandingOrderId;

    public OBWriteInternationalStandingOrderResponse7Data withInternationalStandingOrderId(String internationalStandingOrderId) {
        this.internationalStandingOrderId = internationalStandingOrderId;
        return this;
    }
    
    /**
     * The multiple authorisation flow response from the ASPSP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MultiAuthorisation")
    public OBWriteInternationalStandingOrderResponse7DataMultiAuthorisation multiAuthorisation;

    public OBWriteInternationalStandingOrderResponse7Data withMultiAuthorisation(OBWriteInternationalStandingOrderResponse7DataMultiAuthorisation multiAuthorisation) {
        this.multiAuthorisation = multiAuthorisation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Refund")
    public OBWriteInternationalStandingOrderResponse7DataRefund refund;

    public OBWriteInternationalStandingOrderResponse7Data withRefund(OBWriteInternationalStandingOrderResponse7DataRefund refund) {
        this.refund = refund;
        return this;
    }
    
    /**
     * Specifies the status of resource in code form.
     */
    @JsonProperty("Status")
    public OBWriteInternationalStandingOrderResponse7DataStatusEnum status;

    public OBWriteInternationalStandingOrderResponse7Data withStatus(OBWriteInternationalStandingOrderResponse7DataStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
     * All date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StatusUpdateDateTime")
    public OffsetDateTime statusUpdateDateTime;

    public OBWriteInternationalStandingOrderResponse7Data withStatusUpdateDateTime(OffsetDateTime statusUpdateDateTime) {
        this.statusUpdateDateTime = statusUpdateDateTime;
        return this;
    }
    
    public OBWriteInternationalStandingOrderResponse7Data(@JsonProperty("ConsentId") String consentId, @JsonProperty("CreationDateTime") OffsetDateTime creationDateTime, @JsonProperty("Initiation") OBWriteInternationalStandingOrderResponse7DataInitiation initiation, @JsonProperty("InternationalStandingOrderId") String internationalStandingOrderId, @JsonProperty("Status") OBWriteInternationalStandingOrderResponse7DataStatusEnum status, @JsonProperty("StatusUpdateDateTime") OffsetDateTime statusUpdateDateTime) {
        this.consentId = consentId;
        this.creationDateTime = creationDateTime;
        this.initiation = initiation;
        this.internationalStandingOrderId = internationalStandingOrderId;
        this.status = status;
        this.statusUpdateDateTime = statusUpdateDateTime;
  }
}
