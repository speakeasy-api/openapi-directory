// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type BookingBookHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

// BookingBookRequestBodyBooker - **object** containing details about the primary contact (**note**: this contact needn't be a traveller)
type BookingBookRequestBodyBooker struct {
	// **telephone number** of the lead traveler
	//
	// **Note**:
	//
	//   * Must be included to enable CLC communications
	//   * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
	//
	CellPhone *string `json:"cellPhone,omitempty"`
	// **country code** for the telephone number of the lead traveler
	//
	// **Note**:
	//
	//   * Must be included to enable CLC communications.
	//   * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
	//
	CellPhoneCountryCode *string `json:"cellPhoneCountryCode,omitempty"`
	// **email address** of the primary contact
	Email *string `json:"email,omitempty"`
	// **first name** of the primary contact
	//
	Firstname string `json:"firstname"`
	// **phone number** (home) of the primary contact
	HomePhone *string `json:"homePhone,omitempty"`
	// **surname** of the primary contact
	Surname string `json:"surname"`
	// **title** of the primary contact
	Title *string `json:"title,omitempty"`
}

type BookingBookRequestBodyItemsBookingQuestionAnswers struct {
	// **answer** to the question for the `questionId` listed (recommended length for the answer is 500 characters)
	//
	// **Note**: To specify answers for each traveler, separate the values with a comma as in the per_person_booking_questions request example
	//
	Answer *string `json:"answer,omitempty"`
	// **numeric identifier** for the question (**note**: `questionId` can be retrieved from the [/product](#operation/product) service)
	QuestionID *int64 `json:"questionId,omitempty"`
}

// BookingBookRequestBodyItemsPartnerItemDetail - **object** containing partner details at a per-item level
type BookingBookRequestBodyItemsPartnerItemDetail struct {
	// **unique alphanumeric code** for the order ('itinerary') (merchant API partners must pass a `distributorItemRef` into the `partnerItemDetails` object for each item in *this* object
	// - this code can be any alphanumeric string and is defined by the distributor
	//
	DistributorItemRef *string `json:"distributorItemRef,omitempty"`
}

type BookingBookRequestBodyItemsTravellers struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	BandID *int64 `json:"bandId,omitempty"`
	// **first name** of *this* traveller
	Firstname *string `json:"firstname,omitempty"`
	// **indicator**: `true` if this traveler is the lead traveler
	LeadTraveller *bool `json:"leadTraveller,omitempty"`
	// **surname** of *this* traveler
	Surname *string `json:"surname,omitempty"`
	// **title** of the traveler (e.g `'Mr'`, `'Mrs'`, `'Ms'`, `'Miss'`, `'Mstr'`, `'Dr'`)
	Title *string `json:"title,omitempty"`
}

type BookingBookRequestBodyItems struct {
	// **array** of objects containing booking questions and the answers provided for them for *this* product
	// - If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service.
	// - If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request.
	// - Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised)
	// - You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array.
	//
	BookingQuestionAnswers []BookingBookRequestBodyItemsBookingQuestionAnswers `json:"bookingQuestionAnswers,omitempty"`
	// **specifer** of the hotel
	// If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:
	//
	//  - `"notBooked"`: the customer has not yet booked their hotel
	//  - `"notListed"`: the customer's hotel is not listed
	//
	//  If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications).
	//
	HotelID *string `json:"hotelId,omitempty"`
	// **specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)
	LanguageOptionCode *string `json:"languageOptionCode,omitempty"`
	// **object** containing partner details at a per-item level
	PartnerItemDetail *BookingBookRequestBodyItemsPartnerItemDetail `json:"partnerItemDetail,omitempty"`
	// **details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`.
	PickupPoint *string `json:"pickupPoint,omitempty"`
	// **unique alphanumeric identifier** of the product to be booked
	ProductCode *string `json:"productCode,omitempty"`
	// **text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required
	SpecialRequirements *string `json:"specialRequirements,omitempty"`
	// **specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)
	TourGradeCode *string `json:"tourGradeCode,omitempty"`
	// **date** of travel for the item in format yyyy-mm-dd
	TravelDate *string `json:"travelDate,omitempty"`
	// **array** of traveler names, details and whether they are the lead traveller
	Travellers []BookingBookRequestBodyItemsTravellers `json:"travellers,omitempty"`
}

// BookingBookRequestBodyPartnerDetail - Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information
type BookingBookRequestBodyPartnerDetail struct {
	// **unique alphanumeric reference code** for the distributor
	// - Merchant API partners must pass a `distributorRef` at the order (A.K.A. 'itinerary') level in the `partnerDetail` object. The `distributorRef` passed must be alphanumeric and unique to bookings made by the merchant.
	// - Passing an existing `distributorRef`: If an existing `distributorRef` is passed, the booking with the matching `distributorRef` will be returned in the response and a new booking will not be made. The fields in the response are identical to the response for a new booking.
	//
	DistributorRef *string `json:"distributorRef,omitempty"`
}

type BookingBookRequestBody struct {
	// **object** containing details about the primary contact (**note**: this contact needn't be a traveller)
	Booker *BookingBookRequestBodyBooker `json:"booker,omitempty"`
	// **currency code** for the currency the booking will be submitted in (you will be billed in this currency)
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **specifier**: `true` if this is a *demo* booking only (demos do not send any notifications, are automatically confirmed and OnRequest products become freesale products. Default value is true. Production must have `demo` set to `false`.
	Demo *bool `json:"demo,omitempty"`
	// **array** of items to be booked
	Items []BookingBookRequestBodyItems `json:"items,omitempty"`
	// Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information
	//
	PartnerDetail *BookingBookRequestBodyPartnerDetail `json:"partnerDetail,omitempty"`
}

type BookingBookRequest struct {
	Headers BookingBookHeaders
	Request *BookingBookRequestBody `request:"mediaType=application/json"`
}

type BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate struct {
	// **number** of days prior to the tour start date that *this* policy window begins. `null` signifies open-endedness
	DayRangeMax *int64 `json:"dayRangeMax,omitempty"`
	// **number** of days prior to the tour start date that *this* policy window ends
	DayRangeMin *int64 `json:"dayRangeMin,omitempty"`
	// **percentage** of total price refundable if cancelled within *this* time window
	PercentageRefundable *int64 `json:"percentageRefundable,omitempty"`
	// **Unix timestamp** giving the exact time the policy ends
	PolicyEndTimestamp *int64 `json:"policyEndTimestamp,omitempty"`
	// **Unix timestamp** giving the exact time the policy commences
	PolicyStartTimestamp *int64 `json:"policyStartTimestamp,omitempty"`
}

type BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions struct {
	// **currency-formatted** amount that will be refunded if the cancellation is processed now.
	AmountRefundable *string `json:"amountRefundable,omitempty"`
	// **array** of cancellation policy objects
	CancellationFromTourDate []BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate `json:"cancellationFromTourDate,omitempty"`
	// **natural-language description** of the terms and conditions for *this* product
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
}

type BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	AgeBandID *int64 `json:"ageBandId,omitempty"`
	// **numeric** number of travelers in *this* age band
	Count *int64 `json:"count,omitempty"`
	// **natural-language description** (singular) of *this* age band
	Description *string `json:"description,omitempty"`
	// **natural-language description** (plural) of *this* age band
	PluralDescription *string `json:"pluralDescription,omitempty"`
	// **sort order** for *this* age band
	SortOrder *int64 `json:"sortOrder,omitempty"`
}

type BookingBook200ApplicationJSONDataItemSummaries struct {
	ApplePassSupported *bool `json:"applePassSupported,omitempty"`
	// Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking.
	BarcodeOption *string `json:"barcodeOption,omitempty"`
	// **alphanumeric code** specifying the type of barcode
	BarcodeType *string `json:"barcodeType,omitempty"`
	// [booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
	//
	// *one of* the following:
	// - `"UF"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
	// - `"OR"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
	// - `"FO"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
	//
	BookingEngineID *shared.BookingEngineIDResponseEnum `json:"bookingEngineId,omitempty"`
	// **object** containing item booking status information
	BookingStatus *shared.BookingStatusItem `json:"bookingStatus,omitempty"`
	// **currency code** for the currency in which pricing is displayed for *this* item
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **natural-language description** of *this* item's departure location
	DepartsFrom *string `json:"departsFrom,omitempty"`
	// **natural-language description** of *this* item's departure point
	DeparturePoint *string `json:"departurePoint,omitempty"`
	// **HTML-formatted address** of *this* item's departure point
	DeparturePointAddress *string `json:"departurePointAddress,omitempty"`
	// **natural-language description** of directions regarding *this* item's departure point
	DeparturePointDirections *string `json:"departurePointDirections,omitempty"`
	// **unique numeric identifer** of the destination of *this* item
	DestID *int64 `json:"destId,omitempty"`
	// ignore (Viator only)
	DistributorItemRef *string `json:"distributorItemRef,omitempty"`
	// The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**.
	//
	HoursConfirmed *string `json:"hoursConfirmed,omitempty"`
	// **numeric identifer** of *this* item
	ItemID *int64 `json:"itemId,omitempty"`
	// Ignore (Viator only)
	ItineraryID *int64 `json:"itineraryId,omitempty"`
	// **code** for the language that this product operates in
	LanguageServicesCode *string `json:"languageServicesCode,omitempty"`
	// **numeric merchant net rate** of *this* item
	LastRetailPrice *float64 `json:"lastRetailPrice,omitempty"`
	// **currency-formatted merchant net rate** of *this* item
	LastRetailPriceFormatted *string `json:"lastRetailPriceFormatted,omitempty"`
	// **first name** of the lead traveler
	LeadTravellerFirstname *string `json:"leadTravellerFirstname,omitempty"`
	// **surname** of the lead traveler
	LeadTravellerSurname *string `json:"leadTravellerSurname,omitempty"`
	// **title** of the lead traveler's name
	LeadTravellerTitle *string `json:"leadTravellerTitle,omitempty"`
	// ignore (Viator only)
	//
	// For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
	//
	MerchantCancellable *bool `json:"merchantCancellable,omitempty"`
	// **numeric merchant net rate** for *this* item"
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPrice *float64 `json:"merchantNetPrice,omitempty"`
	// **currency-formatted merchant net rate** for *this* item
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPriceFormatted  *string                                                                   `json:"merchantNetPriceFormatted,omitempty"`
	MerchantTermsAndConditions *BookingBook200ApplicationJSONDataItemSummariesMerchantTermsAndConditions `json:"merchantTermsAndConditions,omitempty"`
	// ignore (Viator only)
	ObfsID *int64 `json:"obfsId,omitempty"`
	// ignore (Viator only)
	Passbooks *string `json:"passbooks,omitempty"`
	// **identifer** for the pick-up hotel
	PickupHotelID *string `json:"pickupHotelId,omitempty"`
	// **natural-language name** of the pick-up hotel
	PickupHotelName *string `json:"pickupHotelName,omitempty"`
	// **numeric merchant total price** for *this* item
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	Price *float64 `json:"price,omitempty"`
	// **currency-formatted merchant total price** for *this* item
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	PriceFormatted *string `json:"priceFormatted,omitempty"`
	// **numeric merchant total price** in USD
	PriceUSD *float64 `json:"priceUSD,omitempty"`
	// **unique alphanumeric identifier** of *this* product
	ProductCode *string `json:"productCode,omitempty"`
	// ignore (Viator only)
	ProductPulledDown *bool `json:"productPulledDown,omitempty"`
	// **natural-language title** of *this* product
	ProductTitle *string `json:"productTitle,omitempty"`
	// ignore (Viator only)
	ProductWidgetList *string `json:"productWidgetList,omitempty"`
	// ignore (Viator only)
	RulesApplied *string `json:"rulesApplied,omitempty"`
	// Ignore (Viator only)
	//
	SavingAmount *string `json:"savingAmount,omitempty"`
	// Ignore (Viator only)
	//
	SavingAmountFormated *string `json:"savingAmountFormated,omitempty"`
	// **sort order** of *this* item summary
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **starting time** of this product
	StartingTime *string `json:"startingTime,omitempty"`
	// **natural-language name** of *this* product's supplier
	SupplierName *string `json:"supplierName,omitempty"`
	// **telephone number** of *this* product's supplier
	SupplierPhoneNumber *string `json:"supplierPhoneNumber,omitempty"`
	// ignore (Viator only)
	TermsAndConditions map[string]interface{} `json:"termsAndConditions,omitempty"`
	// **identifer** of *this* tour grade
	TourGradeCode *string `json:"tourGradeCode,omitempty"`
	// **natural-language description** of *this* tour grade
	TourGradeDescription *string `json:"tourGradeDescription,omitempty"`
	// **date** of travel
	TravelDate *string `json:"travelDate,omitempty"`
	// **array** of objects detailing the traveler age bands
	TravellerAgeBands []BookingBook200ApplicationJSONDataItemSummariesTravellerAgeBands `json:"travellerAgeBands,omitempty"`
	// Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
	VoucherKey *string `json:"voucherKey,omitempty"`
	// ignore (Viator only)
	VoucherOption *string `json:"voucherOption,omitempty"`
	// **natural-language description** of the requirements pertaining to this voucher
	VoucherRequirements *string `json:"voucherRequirements,omitempty"`
	// **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
	VoucherURL *string `json:"voucherURL,omitempty"`
	// ignore (Viator only)
	Vouchers *string `json:"vouchers,omitempty"`
}

type BookingBook200ApplicationJSONData struct {
	// **email address** of the entity that made *this* booking
	BookerEmail *string `json:"bookerEmail,omitempty"`
	// **date** of *this* booking
	BookingDate *string `json:"bookingDate,omitempty"`
	// **object** containing itinerary booking status information
	BookingStatus *shared.BookingStatusItinerary `json:"bookingStatus,omitempty"`
	// **currency code** of the currency in which *this* booking was made
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// ignore (Viator only)
	DistributorRef *string `json:"distributorRef,omitempty"`
	// ignore (Viator only)
	ExchangeRate *int64 `json:"exchangeRate,omitempty"`
	// ignore (Viator only)
	HasVoucher *bool `json:"hasVoucher,omitempty"`
	// **array** of item summaries
	ItemSummaries []BookingBook200ApplicationJSONDataItemSummaries `json:"itemSummaries,omitempty"`
	// ignore (Viator only)
	ItineraryID *int64 `json:"itineraryId,omitempty"`
	// ignore (Viator only)
	OmniPreRuleList *string `json:"omniPreRuleList,omitempty"`
	// ignore (Viator only)
	PaypalRedirectURL *string `json:"paypalRedirectURL,omitempty"`
	// ignore (Viator only)
	RulesApplied *string `json:"rulesApplied,omitempty"`
	// ignore (Viator only)
	SecurityToken *string `json:"securityToken,omitempty"`
	// **sort order** for *this* object
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **numeric merchant total price** for *this* booking
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	TotalPrice *float64 `json:"totalPrice,omitempty"`
	// **currency-formatted merchant total price** for *this* booking
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	TotalPriceFormatted *string `json:"totalPriceFormatted,omitempty"`
	// **numeric merchant total price** of *this* booking in USD
	TotalPriceUSD *float64 `json:"totalPriceUSD,omitempty"`
	// ignore (Viator only)
	UserID *string `json:"userId,omitempty"`
	// Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
	VoucherKey *string `json:"voucherKey,omitempty"`
	// **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
	VoucherURL *string `json:"voucherURL,omitempty"`
}

// BookingBook200ApplicationJSON - Success
type BookingBook200ApplicationJSON struct {
	Data *BookingBook200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingBookResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingBook200ApplicationJSONObject *BookingBook200ApplicationJSON
}
