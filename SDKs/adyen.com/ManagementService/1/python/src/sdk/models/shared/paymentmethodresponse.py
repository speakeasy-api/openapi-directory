"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import paginationlinks as shared_paginationlinks
from ..shared import paymentmethod as shared_paymentmethod
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PaymentMethodResponseTypesWithErrorsEnum(str, Enum):
    AFTERPAYTOUCH = 'afterpaytouch'
    ALIPAY = 'alipay'
    ALIPAY_HK = 'alipay_hk'
    AMEX = 'amex'
    APPLEPAY = 'applepay'
    BCMC = 'bcmc'
    BLIK = 'blik'
    CARTEBANCAIRE = 'cartebancaire'
    CLEARPAY = 'clearpay'
    CUP = 'cup'
    DINERS = 'diners'
    DIRECT_EBANKING = 'directEbanking'
    DIRECTDEBIT_GB = 'directdebit_GB'
    DISCOVER = 'discover'
    EBANKING_FI = 'ebanking_FI'
    EFTPOS_AUSTRALIA = 'eftpos_australia'
    ELO = 'elo'
    ELOCREDIT = 'elocredit'
    ELODEBIT = 'elodebit'
    GIROCARD = 'girocard'
    GIROPAY = 'giropay'
    GOOGLEPAY = 'googlepay'
    HIPER = 'hiper'
    HIPERCARD = 'hipercard'
    IDEAL = 'ideal'
    INTERAC_CARD = 'interac_card'
    JCB = 'jcb'
    KLARNA = 'klarna'
    KLARNA_ACCOUNT = 'klarna_account'
    KLARNA_PAYNOW = 'klarna_paynow'
    MAESTRO = 'maestro'
    MBWAY = 'mbway'
    MC = 'mc'
    MCDEBIT = 'mcdebit'
    MEAL_VOUCHER_FR = 'mealVoucher_FR'
    MOBILEPAY = 'mobilepay'
    MULTIBANCO = 'multibanco'
    ONLINE_BANKING_PL = 'onlineBanking_PL'
    PAYPAL = 'paypal'
    PAYSHOP = 'payshop'
    SWISH = 'swish'
    TRUSTLY = 'trustly'
    VIPPS = 'vipps'
    VISA = 'visa'
    VISADEBIT = 'visadebit'
    VPAY = 'vpay'
    WECHATPAY = 'wechatpay'
    WECHATPAY_POS = 'wechatpay_pos'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentMethodResponse:
    r"""OK - the request has succeeded."""
    
    items_total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsTotal') }})
    r"""Total number of items."""  
    pages_total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagesTotal') }})
    r"""Total number of pages."""  
    links: Optional[shared_paginationlinks.PaginationLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    data: Optional[list[shared_paymentmethod.PaymentMethod]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Payment methods details."""  
    types_with_errors: Optional[list[PaymentMethodResponseTypesWithErrorsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typesWithErrors'), 'exclude': lambda f: f is None }})
    r"""Payment method types with errors."""  
    