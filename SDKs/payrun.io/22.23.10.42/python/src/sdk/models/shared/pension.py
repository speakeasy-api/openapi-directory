"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class PensionPensionCertificationEnum(str, Enum):
    r"""The pensions' certification"""
    NOT_SET = 'NotSet'
    SET1 = 'Set1'
    SET2 = 'Set2'
    SET3 = 'Set3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PensionPensionPensionablePayCodes:
    r"""The pensions' pensionable pay codes"""
    
    pay_code: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayCode'), 'exclude': lambda f: f is None }})  
    
class PensionPensionProRataMethodEnum(str, Enum):
    r"""The pensions' pro rata method"""
    NOT_SET = 'NotSet'
    ANNUAL260_DAYS = 'Annual260Days'
    ANNUAL365_DAYS = 'Annual365Days'
    ANNUAL_QUALIFYING_DAYS = 'AnnualQualifyingDays'
    DAYS_PER_CALENDAR_MONTH = 'DaysPerCalendarMonth'
    DAYS_PER_TAX_PERIOD = 'DaysPerTaxPeriod'
    WORKING_DAYS_PER_CALENDAR_MONTH = 'WorkingDaysPerCalendarMonth'
    WEEK_DAYS_PER_CALENDAR_MONTH = 'WeekDaysPerCalendarMonth'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PensionPensionQualifyingPayCodes:
    r"""The pensions' qualifying pay codes"""
    
    pay_code: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayCode'), 'exclude': lambda f: f is None }})  
    
class PensionPensionRasRoundingOverrideEnum(str, Enum):
    r"""The pensions' ras rounding override"""
    NOT_SET = 'NotSet'
    PENNY_UP = 'PennyUp'
    PENNY_DOWN = 'PennyDown'
    BANKERS = 'Bankers'
    FIVE_UP = 'FiveUp'
    FIVE_DOWN = 'FiveDown'
    FLOOR = 'Floor'
    CEILING = 'Ceiling'

class PensionPensionRoundingOptionEnum(str, Enum):
    r"""The pensions' rounding option"""
    NOT_SET = 'NotSet'
    PENNY_UP = 'PennyUp'
    PENNY_DOWN = 'PennyDown'
    BANKERS = 'Bankers'
    FIVE_UP = 'FiveUp'
    FIVE_DOWN = 'FiveDown'
    FLOOR = 'Floor'
    CEILING = 'Ceiling'

class PensionPensionTaxationMethodEnum(str, Enum):
    r"""The pensions' taxation method"""
    NOT_SET = 'NotSet'
    NET_BASED = 'NetBased'
    RELIEF_AT_SOURCE = 'ReliefAtSource'
    TAX_RELIEF_EXCLUDED = 'TaxReliefExcluded'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PensionPension:
    
    ae_compatible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AECompatible'), 'exclude': lambda f: f is None }})
    r"""The pensions' a e compatible"""  
    certification: Optional[PensionPensionCertificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Certification'), 'exclude': lambda f: f is None }})
    r"""The pensions' certification"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})
    r"""The pensions' code"""  
    contribution_deduction_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContributionDeductionDay'), 'exclude': lambda f: f is None }})
    r"""The pensions' contribution deduction day"""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The pensions' effective date"""  
    employee_contribution_cash: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeContributionCash'), 'exclude': lambda f: f is None }})
    r"""The pensions' employee contribution cash"""  
    employee_contribution_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeContributionPercent'), 'exclude': lambda f: f is None }})
    r"""The pensions' employee contribution percent"""  
    employer_contribution_cash: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerContributionCash'), 'exclude': lambda f: f is None }})
    r"""The pensions' employer contribution cash"""  
    employer_contribution_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerContributionPercent'), 'exclude': lambda f: f is None }})
    r"""The pensions' employer contribution percent"""  
    employer_ni_saving: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerNiSaving'), 'exclude': lambda f: f is None }})
    r"""The pensions' employer ni saving"""  
    employer_ni_saving_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerNiSavingPercentage'), 'exclude': lambda f: f is None }})
    r"""The pensions' employer ni saving percentage"""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Group'), 'exclude': lambda f: f is None }})
    r"""The pensions' group"""  
    lower_threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LowerThreshold'), 'exclude': lambda f: f is None }})
    r"""The pensions' lower threshold"""  
    meta_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetaData'), 'exclude': lambda f: f is None }})
    r"""The pensions' meta data"""  
    next_revision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRevisionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The pensions' next revision date"""  
    pensionable_pay_codes: Optional[PensionPensionPensionablePayCodes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PensionablePayCodes'), 'exclude': lambda f: f is None }})
    r"""The pensions' pensionable pay codes"""  
    pro_rata_method: Optional[PensionPensionProRataMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProRataMethod'), 'exclude': lambda f: f is None }})
    r"""The pensions' pro rata method"""  
    provider_employer_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProviderEmployerRef'), 'exclude': lambda f: f is None }})
    r"""The pensions' provider employer ref"""  
    provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProviderName'), 'exclude': lambda f: f is None }})
    r"""The pensions' provider name"""  
    qualifying_pay_codes: Optional[PensionPensionQualifyingPayCodes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QualifyingPayCodes'), 'exclude': lambda f: f is None }})
    r"""The pensions' qualifying pay codes"""  
    ras_rounding_override: Optional[PensionPensionRasRoundingOverrideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RasRoundingOverride'), 'exclude': lambda f: f is None }})
    r"""The pensions' ras rounding override"""  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})
    r"""The pensions' revision"""  
    rounding_option: Optional[PensionPensionRoundingOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoundingOption'), 'exclude': lambda f: f is None }})
    r"""The pensions' rounding option"""  
    salary_sacrifice: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SalarySacrifice'), 'exclude': lambda f: f is None }})
    r"""The pensions' salary sacrifice"""  
    scheme_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName'), 'exclude': lambda f: f is None }})
    r"""The pensions' scheme name"""  
    sub_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubGroup'), 'exclude': lambda f: f is None }})
    r"""The pensions' sub group"""  
    taxation_method: Optional[PensionPensionTaxationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxationMethod'), 'exclude': lambda f: f is None }})
    r"""The pensions' taxation method"""  
    upper_threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpperThreshold'), 'exclude': lambda f: f is None }})
    r"""The pensions' upper threshold"""  
    use_ae_thresholds: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseAEThresholds'), 'exclude': lambda f: f is None }})
    r"""The pensions' use a e thresholds"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Pension:
    r"""The pension object."""
    
    pension: Optional[PensionPension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pension'), 'exclude': lambda f: f is None }})  
    