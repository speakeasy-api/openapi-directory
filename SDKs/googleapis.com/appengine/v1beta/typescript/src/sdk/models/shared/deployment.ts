/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { BuildInfo } from "./buildinfo";
import { CloudBuildOptions } from "./cloudbuildoptions";
import { ContainerInfo } from "./containerinfo";
import { FileInfo } from "./fileinfo";
import { ZipInfo } from "./zipinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Code and application artifacts used to deploy a version to App Engine.
 */
export class Deployment extends SpeakeasyBase {
  /**
   * Google Cloud Build information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build" })
  @Type(() => BuildInfo)
  build?: BuildInfo;

  /**
   * Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudBuildOptions" })
  @Type(() => CloudBuildOptions)
  cloudBuildOptions?: CloudBuildOptions;

  /**
   * Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "container" })
  @Type(() => ContainerInfo)
  container?: ContainerInfo;

  /**
   * Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
   */
  @SpeakeasyMetadata({ elemType: FileInfo })
  @Expose({ name: "files" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FileInfo> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FileInfo);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  files?: Record<string, FileInfo>;

  /**
   * The zip file information for a zip deployment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  @Type(() => ZipInfo)
  zip?: ZipInfo;
}
