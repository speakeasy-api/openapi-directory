<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GETSignalResourceRequest
{
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Action')]
    public GETSignalResourceActionEnum $action;
    
    /**
     * The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template.
     * 
     * @var string $logicalResourceId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=LogicalResourceId')]
    public string $logicalResourceId;
    
    /**
     * The stack name or unique stack ID that includes the resource that you want to signal.
     * 
     * @var string $stackName
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=StackName')]
    public string $stackName;
    
    /**
     * The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\GETSignalResourceStatusEnum $status
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Status')]
    public GETSignalResourceStatusEnum $status;
    
    /**
     * A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID.
     * 
     * @var string $uniqueId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=UniqueId')]
    public string $uniqueId;
    
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Version')]
    public GETSignalResourceVersionEnum $version;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\GETSignalResourceActionEnum::SIGNAL_RESOURCE;
		$this->logicalResourceId = "";
		$this->stackName = "";
		$this->status = \OpenAPI\OpenAPI\Models\Operations\GETSignalResourceStatusEnum::SUCCESS;
		$this->uniqueId = "";
		$this->version = \OpenAPI\OpenAPI\Models\Operations\GETSignalResourceVersionEnum::TWO_THOUSAND_AND_TEN0515;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
