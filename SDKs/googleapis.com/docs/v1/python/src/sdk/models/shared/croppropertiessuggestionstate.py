"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CropPropertiesSuggestionState:
    r"""A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there's a new suggested value."""
    
    angle_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('angleSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to angle."""  
    offset_bottom_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetBottomSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to offset_bottom."""  
    offset_left_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetLeftSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to offset_left."""  
    offset_right_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetRightSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to offset_right."""  
    offset_top_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetTopSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to offset_top."""  
    