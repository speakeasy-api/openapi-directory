"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import api_core_dto_tags_tag as shared_api_core_dto_tags_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class APICoreDtoClickStreamHitDatapointInfoStatusEnum(str, Enum):
    ACTIVE = 'Active'
    PAUSED = 'Paused'
    ABUSE = 'Abuse'
    DELETED = 'Deleted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICoreDtoClickStreamHitDatapointInfo:
    
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    datapoint_favourite: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datapointFavourite'), 'exclude': lambda f: f is None }})  
    datapoint_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datapointId'), 'exclude': lambda f: f is None }})  
    datapoint_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datapointName'), 'exclude': lambda f: f is None }})  
    datapoint_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datapointTitle'), 'exclude': lambda f: f is None }})  
    datapoint_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datapointType'), 'exclude': lambda f: f is None }})  
    destination_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationUrl'), 'exclude': lambda f: f is None }})  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupId'), 'exclude': lambda f: f is None }})  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }})  
    is_ab_test: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isABTest'), 'exclude': lambda f: f is None }})  
    is_private_shared: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPrivateShared'), 'exclude': lambda f: f is None }})  
    is_public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPublic'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})  
    status: Optional[APICoreDtoClickStreamHitDatapointInfoStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_api_core_dto_tags_tag.APICoreDtoTagsTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tracking_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingCode'), 'exclude': lambda f: f is None }})  
    