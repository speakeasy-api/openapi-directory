/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class StoreReleasesGetSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class StoreReleasesGetRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The name of the store
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=release_id",
  })
  releaseId: string;

  /**
   * The name of the store
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=store_name",
  })
  storeName: string;
}

export enum StoreReleasesGetDefaultApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Error
 */
export class StoreReleasesGetDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: StoreReleasesGetDefaultApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * type of the distribution store currently stores type can be intune or googleplay.
 */
export enum StoreReleasesGet200ApplicationJSONDistributionStoresTypeEnum {
  Intune = "intune",
  Googleplay = "googleplay",
}

export class StoreReleasesGet200ApplicationJSONDistributionStores extends SpeakeasyBase {
  /**
   * ID identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A name identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * publishing status of the release in the store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishing_status" })
  publishingStatus?: string;

  /**
   * type of the distribution store currently stores type can be intune or googleplay.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: StoreReleasesGet200ApplicationJSONDistributionStoresTypeEnum;
}

/**
 * The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
 */
export enum StoreReleasesGet200ApplicationJSONInstallUrlEnum {
  Group = "group",
  Store = "store",
}

/**
 * OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
 *
 * @remarks
 * The release state.<br>
 * <b>available</b>: The uploaded release has been distributed.<br>
 * <b>unavailable</b>: The uploaded release is not visible to the user. <br>
 *
 */
export enum StoreReleasesGet200ApplicationJSONStatusEnum {
  Available = "available",
  Unavailable = "unavailable",
}

/**
 * Details of an uploaded release
 */
export class StoreReleasesGet200ApplicationJSON extends SpeakeasyBase {
  /**
   * The release's minimum required Android API level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "android_min_api_level" })
  androidMinApiLevel?: string;

  /**
   * The app's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_display_name" })
  appDisplayName?: string;

  /**
   * The app's name (extracted from the uploaded release).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_name" })
  appName?: string;

  /**
   * The identifier of the apps bundle.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_identifier" })
  bundleIdentifier?: string;

  /**
   * a list of distribution stores that are associated with this release.
   */
  @SpeakeasyMetadata({
    elemType: StoreReleasesGet200ApplicationJSONDistributionStores,
  })
  @Expose({ name: "distribution_stores" })
  @Type(() => StoreReleasesGet200ApplicationJSONDistributionStores)
  distributionStores?: StoreReleasesGet200ApplicationJSONDistributionStores[];

  /**
   * The URL that hosts the binary for this release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download_url" })
  downloadUrl?: string;

  /**
   * MD5 checksum of the release binary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * ID identifying this unique release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "install_url" })
  installUrl?: StoreReleasesGet200ApplicationJSONInstallUrlEnum;

  /**
   * The release's minimum required operating system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "min_os" })
  minOs?: string;

  /**
   * The release's release notes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;

  /**
   * The release's short version.<br>
   *
   * @remarks
   * For iOS: CFBundleShortVersionString from info.plist.
   * For Android: android:versionName from AppManifest.xml.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "short_version" })
  shortVersion?: string;

  /**
   * The release's size in bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
   *
   * @remarks
   * The release state.<br>
   * <b>available</b>: The uploaded release has been distributed.<br>
   * <b>unavailable</b>: The uploaded release is not visible to the user. <br>
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: StoreReleasesGet200ApplicationJSONStatusEnum;

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploaded_at" })
  uploadedAt?: string;

  /**
   * The release's version.<br>
   *
   * @remarks
   * For iOS: CFBundleVersion from info.plist.
   * For Android: android:versionCode from AppManifest.xml.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

export class StoreReleasesGetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata({ elemType: StoreReleasesGet200ApplicationJSON })
  storeReleasesGet200ApplicationJSONObjects?: StoreReleasesGet200ApplicationJSON[];

  /**
   * Error
   */
  @SpeakeasyMetadata()
  storeReleasesGetDefaultApplicationJSONObject?: StoreReleasesGetDefaultApplicationJSON;
}
