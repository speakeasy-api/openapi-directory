// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ErrorsErrorStackTraceSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsErrorStackTraceRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsErrorStackTraceDefaultApplicationJSONError struct {
	Code    ErrorsErrorStackTraceDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                   `json:"message"`
}

// ErrorsErrorStackTraceDefaultApplicationJSON - Error code with reason
type ErrorsErrorStackTraceDefaultApplicationJSON struct {
	Error ErrorsErrorStackTraceDefaultApplicationJSONError `json:"error"`
}

type ErrorsErrorStackTraceResponse struct {
	ContentType string
	// Error stacktrace details.
	DiagnosticsStackTrace *shared.DiagnosticsStackTrace
	// Error code with reason
	ErrorsErrorStackTraceDefaultApplicationJSONObject *ErrorsErrorStackTraceDefaultApplicationJSON
	StatusCode                                        int
	RawResponse                                       *http.Response
}
