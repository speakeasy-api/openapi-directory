"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Users:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def change_password(self, request: operations.ChangePasswordRequest) -> operations.ChangePasswordResponse:
        r"""Sets user's password to a new value.
        Sets user's password to a new value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangePasswordRequest, base_url, '/users/{userId}/password', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangePasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_all_names_with_ids_1(self) -> operations.GetAllNamesWithIds1Response:
        r"""Returns list of simple users representations
        Returns list of simple users representations
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllNamesWithIds1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EntityWithNameDTO]])
                res.entity_with_name_dtos = out

        return res

    def get_by_id_6(self, request: operations.GetByID6Request) -> operations.GetByID6Response:
        r"""Returns user details.
        Returns user details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID6Request, base_url, '/users/{userId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID6Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserDTO])
                res.user_dto = out

        return res

    def get_custom_field_1(self, request: operations.GetCustomField1Request) -> operations.GetCustomField1Response:
        r"""Returns custom field of a given user.
        Returns custom field of a given user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomField1Request, base_url, '/users/{userId}/customFields/{customFieldKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomField1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldDTO])
                res.custom_field_dto = out

        return res

    def get_custom_fields_4(self, request: operations.GetCustomFields4Request) -> operations.GetCustomFields4Response:
        r"""Returns custom fields of a given user.
        Returns custom fields of a given user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields4Request, base_url, '/users/{userId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_me(self) -> operations.GetMeResponse:
        r"""Returns currently signed in user details.
        Returns currently signed in user details.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserDTO])
                res.user_dto = out

        return res

    def get_time_zone(self) -> operations.GetTimeZoneResponse:
        r"""Returns time zone preferred by user currently signed in.
        Returns time zone preferred by user currently signed in.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/me/timeZone'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimeZoneResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TimeZoneDTO])
                res.time_zone_dto = out

        return res

    def update_custom_field_1(self, request: operations.UpdateCustomField1Request) -> operations.UpdateCustomField1Response:
        r"""Updates given custom field of a given user.
        Updates given custom field of a given user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomField1Request, base_url, '/users/{userId}/customFields/{customFieldKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_field_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomField1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldDTO])
                res.custom_field_dto = out

        return res

    def update_custom_fields_2(self, request: operations.UpdateCustomFields2Request) -> operations.UpdateCustomFields2Response:
        r"""Updates custom fields of a given user.
        Updates custom fields of a given user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFields2Request, base_url, '/users/{userId}/customFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFields2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def update_3(self, request: operations.Update3Request) -> operations.Update3Response:
        r"""Updates an existing user.
        Updates an existing user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Update3Request, base_url, '/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Update3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserDTO])
                res.user_dto = out

        return res

    