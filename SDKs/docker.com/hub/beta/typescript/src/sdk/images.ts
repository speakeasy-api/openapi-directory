/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Advanced Image Management API endpoints allow you to manage Docker
 *
 * @remarks
 * images across all repositories.
 *
 * For more information, see [Advanced Image Management dashboard](https://docs.docker.com/docker-hub/image-management/).
 *
 */
export class Images {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get details of repository's images
   *
   * @remarks
   * Gets details on the images in a repository.
   */
  getNamespacesRepositoriesImages(
    req: operations.GetNamespacesRepositoriesImagesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNamespacesRepositoriesImagesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNamespacesRepositoriesImagesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/images",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNamespacesRepositoriesImagesResponse =
        new operations.GetNamespacesRepositoriesImagesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNamespaceRepositoryImagesResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetNamespaceRepositoryImagesResponse
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get summary of repository's images
   *
   * @remarks
   * Gets the number of images in a repository and the number of images
   * counted as active and inactive.
   *
   */
  getNamespacesRepositoriesImagesSummary(
    req: operations.GetNamespacesRepositoriesImagesSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNamespacesRepositoriesImagesSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNamespacesRepositoriesImagesSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/images-summary",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNamespacesRepositoriesImagesSummaryResponse =
        new operations.GetNamespacesRepositoriesImagesSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNamespaceRepositoryImagesSummaryResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GetNamespaceRepositoryImagesSummaryResponse
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get image's tags
   *
   * @remarks
   * Gets current and historical tags for an image.
   */
  getNamespacesRepositoriesImagesTags(
    req: operations.GetNamespacesRepositoriesImagesTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNamespacesRepositoriesImagesTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNamespacesRepositoriesImagesTagsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNamespacesRepositoriesImagesTagsResponse =
        new operations.GetNamespacesRepositoriesImagesTagsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNamespaceRepositoryImagesTagsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetNamespaceRepositoryImagesTagsResponse
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete images
   *
   * @remarks
   * Deletes one or more images within a namespace. This is currently limited to a single
   * repository.
   *
   * If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings.
   * To continue with the deletion, you must ignore these warnings by putting them in the `ignore_warnings` property.
   *
   * Deleting a currently tagged image deletes the tag from the repository.
   *
   * You cannot ignore errors. It is not possible to directly delete children of multi-arch images.
   *
   */
  postNamespacesDeleteImages(
    req: operations.PostNamespacesDeleteImagesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostNamespacesDeleteImagesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostNamespacesDeleteImagesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/delete-images",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postNamespacesDeleteImagesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostNamespacesDeleteImagesResponse =
        new operations.PostNamespacesDeleteImagesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postNamespacesDeleteImagesResponseSuccess = utils.objectToClass(
              httpRes?.data,
              shared.PostNamespacesDeleteImagesResponseSuccess
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postNamespacesDeleteImagesResponseError = utils.objectToClass(
              httpRes?.data,
              shared.PostNamespacesDeleteImagesResponseError
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
