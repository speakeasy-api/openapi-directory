// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetAnomaliesXAmzTargetEnum
type GetAnomaliesXAmzTargetEnum string

const (
	GetAnomaliesXAmzTargetEnumAwsInsightsIndexServiceGetAnomalies GetAnomaliesXAmzTargetEnum = "AWSInsightsIndexService.GetAnomalies"
)

func (e GetAnomaliesXAmzTargetEnum) ToPointer() *GetAnomaliesXAmzTargetEnum {
	return &e
}

func (e *GetAnomaliesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSInsightsIndexService.GetAnomalies":
		*e = GetAnomaliesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAnomaliesXAmzTargetEnum: %v", v)
	}
}

type GetAnomaliesRequest struct {
	GetAnomaliesRequest shared.GetAnomaliesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          GetAnomaliesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetAnomaliesResponse struct {
	ContentType string
	// Success
	GetAnomaliesResponse *shared.GetAnomaliesResponse
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
