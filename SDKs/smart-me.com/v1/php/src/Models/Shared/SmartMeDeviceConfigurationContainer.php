<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
/**
 * SmartMeDeviceConfigurationContainer - API Container class for the meter configuration
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SmartMeDeviceConfigurationContainer
{
    /**
     * The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
     * 
     * @var ?string $deviceEncryptionKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('DeviceEncryptionKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=DeviceEncryptionKey')]
    public ?string $deviceEncryptionKey = null;
    
    /**
     * PIN code to enter on a external meter (e.g. for the FNN meters)
     * 
     * @var ?string $devicePinCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('DevicePinCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=DevicePinCode')]
    public ?string $devicePinCode = null;
    
    /**
     * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SmartMeDeviceConfigurationContainerDnsUpdateStateEnum $dnsUpdateState
     */
	#[\JMS\Serializer\Annotation\SerializedName('DnsUpdateState')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SmartMeDeviceConfigurationContainerDnsUpdateStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=DnsUpdateState')]
    public ?SmartMeDeviceConfigurationContainerDnsUpdateStateEnum $dnsUpdateState = null;
    
    /**
     * Enables or disables Modbus TCP (if the meter supports it).
     * 
     * @var ?bool $enableModbusTcp
     */
	#[\JMS\Serializer\Annotation\SerializedName('EnableModbusTcp')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=EnableModbusTcp')]
    public ?bool $enableModbusTcp = null;
    
    /**
     * The ID of the device
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('Id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=Id')]
    public ?string $id = null;
    
    /**
     * The configuration for the intput outputs
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\InputConfigurationContainer> $inputConfiguration
     */
	#[\JMS\Serializer\Annotation\SerializedName('InputConfiguration')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\InputConfigurationContainer>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=InputConfiguration,json=true')]
    public ?array $inputConfiguration = null;
    
    /**
     * The configuration for the external outputs
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OutputConfigurationContainer> $outputConfiguration
     */
	#[\JMS\Serializer\Annotation\SerializedName('OutputConfiguration')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OutputConfigurationContainer>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=OutputConfiguration,json=true')]
    public ?array $outputConfiguration = null;
    
    /**
     * Shows the reactive energy values (if the meter supports it).
     * 
     * @var ?bool $showReactiveEnergy
     */
	#[\JMS\Serializer\Annotation\SerializedName('ShowReactiveEnergy')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=ShowReactiveEnergy')]
    public ?bool $showReactiveEnergy = null;
    
    /**
     * The configuration for the phase switches
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SwitchConfigurationContainer> $switchConfiguration
     */
	#[\JMS\Serializer\Annotation\SerializedName('SwitchConfiguration')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SwitchConfigurationContainer>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=SwitchConfiguration,json=true')]
    public ?array $switchConfiguration = null;
    
    /**
     * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SmartMeDeviceConfigurationContainerUploadIntervalEnum $uploadInterval
     */
	#[\JMS\Serializer\Annotation\SerializedName('UploadInterval')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SmartMeDeviceConfigurationContainerUploadIntervalEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    #[SpeakeasyMetadata('form:name=UploadInterval')]
    public ?SmartMeDeviceConfigurationContainerUploadIntervalEnum $uploadInterval = null;
    
	public function __construct()
	{
		$this->deviceEncryptionKey = null;
		$this->devicePinCode = null;
		$this->dnsUpdateState = null;
		$this->enableModbusTcp = null;
		$this->id = null;
		$this->inputConfiguration = null;
		$this->outputConfiguration = null;
		$this->showReactiveEnergy = null;
		$this->switchConfiguration = null;
		$this->uploadInterval = null;
	}
}
