"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Console:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_aem_product_info(self) -> operations.GetAemProductInfoResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/system/console/status-productinfo.json'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAemProductInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_aem_product_info_default_application_json_strings = out

        return res

    def get_bundle_info(self, request: operations.GetBundleInfoRequest) -> operations.GetBundleInfoResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBundleInfoRequest, base_url, '/system/console/bundles/{name}.json', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBundleInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleInfo])
                res.bundle_info = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                res.get_bundle_info_default_application_json_string = http_res.content

        return res

    def get_config_mgr(self) -> operations.GetConfigMgrResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/system/console/configMgr'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigMgrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.get_config_mgr_200_text_xml_string = http_res.content
        elif http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    def post_bundle(self, request: operations.PostBundleRequest) -> operations.PostBundleResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostBundleRequest, base_url, '/system/console/bundles/{name}', request)
        
        query_params = utils.get_query_params(operations.PostBundleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBundleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_jmx_repository(self, request: operations.PostJmxRepositoryRequest) -> operations.PostJmxRepositoryResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostJmxRepositoryRequest, base_url, '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostJmxRepositoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_saml_configuration(self, request: operations.PostSamlConfigurationRequest) -> operations.PostSamlConfigurationResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler'
        
        query_params = utils.get_query_params(operations.PostSamlConfigurationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSamlConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.saml_configuration_info = http_res.content
        elif http_res.status_code == 302:
            if utils.match_content_type(content_type, 'text/plain'):
                res.post_saml_configuration_302_text_plain_string = http_res.content
        else:
            if utils.match_content_type(content_type, 'text/plain'):
                res.post_saml_configuration_default_text_plain_string = http_res.content

        return res

    