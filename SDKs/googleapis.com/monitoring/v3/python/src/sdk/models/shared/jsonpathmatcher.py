"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class JSONPathMatcherJSONMatcherEnum(str, Enum):
    r"""The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)"""
    JSON_PATH_MATCHER_OPTION_UNSPECIFIED = 'JSON_PATH_MATCHER_OPTION_UNSPECIFIED'
    EXACT_MATCH = 'EXACT_MATCH'
    REGEX_MATCH = 'REGEX_MATCH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JSONPathMatcher:
    r"""Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH."""
    
    json_matcher: Optional[JSONPathMatcherJSONMatcherEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonMatcher'), 'exclude': lambda f: f is None }})
    r"""The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)"""  
    json_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonPath'), 'exclude': lambda f: f is None }})
    r"""JSONPath within the response output pointing to the expected ContentMatcher::content to match against."""  
    