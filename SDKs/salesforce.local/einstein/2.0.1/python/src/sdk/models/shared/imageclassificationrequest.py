"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageClassificationRequest:
    
    model_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modelId') }, 'multipart_form': { 'field_name': 'modelId' }})
    r"""ID of the model that makes the prediction."""  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numResults'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'numResults' }})
    r"""Number of probabilities to return."""  
    sample_base64_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleBase64Content'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'sampleBase64Content' }})
    r"""The image contained in a base64 string."""  
    sample_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleId'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'sampleId' }})
    r"""String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response."""  
    sample_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleLocation'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'sampleLocation' }})
    r"""URL of the image file."""  
    