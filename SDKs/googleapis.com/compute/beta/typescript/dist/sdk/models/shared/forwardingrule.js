"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardingRule = exports.ForwardingRulePscConnectionStatusEnum = exports.ForwardingRuleNetworkTierEnum = exports.ForwardingRuleLoadBalancingSchemeEnum = exports.ForwardingRuleIpVersionEnum = exports.ForwardingRuleIPProtocolEnum = void 0;
var utils_1 = require("../../../internal/utils");
var forwardingruleservicedirectoryregistration_1 = require("./forwardingruleservicedirectoryregistration");
var metadatafilter_1 = require("./metadatafilter");
var class_transformer_1 = require("class-transformer");
/**
 * The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
 */
var ForwardingRuleIPProtocolEnum;
(function (ForwardingRuleIPProtocolEnum) {
    ForwardingRuleIPProtocolEnum["Ah"] = "AH";
    ForwardingRuleIPProtocolEnum["Esp"] = "ESP";
    ForwardingRuleIPProtocolEnum["Icmp"] = "ICMP";
    ForwardingRuleIPProtocolEnum["L3Default"] = "L3_DEFAULT";
    ForwardingRuleIPProtocolEnum["Sctp"] = "SCTP";
    ForwardingRuleIPProtocolEnum["Tcp"] = "TCP";
    ForwardingRuleIPProtocolEnum["Udp"] = "UDP";
})(ForwardingRuleIPProtocolEnum = exports.ForwardingRuleIPProtocolEnum || (exports.ForwardingRuleIPProtocolEnum = {}));
/**
 * The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6.
 */
var ForwardingRuleIpVersionEnum;
(function (ForwardingRuleIpVersionEnum) {
    ForwardingRuleIpVersionEnum["Ipv4"] = "IPV4";
    ForwardingRuleIpVersionEnum["Ipv6"] = "IPV6";
    ForwardingRuleIpVersionEnum["UnspecifiedVersion"] = "UNSPECIFIED_VERSION";
})(ForwardingRuleIpVersionEnum = exports.ForwardingRuleIpVersionEnum || (exports.ForwardingRuleIpVersionEnum = {}));
/**
 * Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts.
 */
var ForwardingRuleLoadBalancingSchemeEnum;
(function (ForwardingRuleLoadBalancingSchemeEnum) {
    ForwardingRuleLoadBalancingSchemeEnum["External"] = "EXTERNAL";
    ForwardingRuleLoadBalancingSchemeEnum["ExternalManaged"] = "EXTERNAL_MANAGED";
    ForwardingRuleLoadBalancingSchemeEnum["Internal"] = "INTERNAL";
    ForwardingRuleLoadBalancingSchemeEnum["InternalManaged"] = "INTERNAL_MANAGED";
    ForwardingRuleLoadBalancingSchemeEnum["InternalSelfManaged"] = "INTERNAL_SELF_MANAGED";
    ForwardingRuleLoadBalancingSchemeEnum["Invalid"] = "INVALID";
})(ForwardingRuleLoadBalancingSchemeEnum = exports.ForwardingRuleLoadBalancingSchemeEnum || (exports.ForwardingRuleLoadBalancingSchemeEnum = {}));
/**
 * This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
 */
var ForwardingRuleNetworkTierEnum;
(function (ForwardingRuleNetworkTierEnum) {
    ForwardingRuleNetworkTierEnum["FixedStandard"] = "FIXED_STANDARD";
    ForwardingRuleNetworkTierEnum["Premium"] = "PREMIUM";
    ForwardingRuleNetworkTierEnum["Standard"] = "STANDARD";
    ForwardingRuleNetworkTierEnum["StandardOverridesFixedStandard"] = "STANDARD_OVERRIDES_FIXED_STANDARD";
})(ForwardingRuleNetworkTierEnum = exports.ForwardingRuleNetworkTierEnum || (exports.ForwardingRuleNetworkTierEnum = {}));
var ForwardingRulePscConnectionStatusEnum;
(function (ForwardingRulePscConnectionStatusEnum) {
    ForwardingRulePscConnectionStatusEnum["Accepted"] = "ACCEPTED";
    ForwardingRulePscConnectionStatusEnum["Closed"] = "CLOSED";
    ForwardingRulePscConnectionStatusEnum["NeedsAttention"] = "NEEDS_ATTENTION";
    ForwardingRulePscConnectionStatusEnum["Pending"] = "PENDING";
    ForwardingRulePscConnectionStatusEnum["Rejected"] = "REJECTED";
    ForwardingRulePscConnectionStatusEnum["StatusUnspecified"] = "STATUS_UNSPECIFIED";
})(ForwardingRulePscConnectionStatusEnum = exports.ForwardingRulePscConnectionStatusEnum || (exports.ForwardingRulePscConnectionStatusEnum = {}));
/**
 * Represents a Forwarding Rule resource. Forwarding rule resources in Google Cloud can be either regional or global in scope: * [Global](https://cloud.google.com/compute/docs/reference/rest/beta/globalForwardingRules) * [Regional](https://cloud.google.com/compute/docs/reference/rest/beta/forwardingRules) A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud Platform load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway). For more information, read Forwarding rule concepts and Using protocol forwarding.
 */
var ForwardingRule = /** @class */ (function (_super) {
    __extends(ForwardingRule, _super);
    function ForwardingRule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "IPAddress" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "ipAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "IPProtocol" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "ipProtocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allPorts" }),
        __metadata("design:type", Boolean)
    ], ForwardingRule.prototype, "allPorts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allowGlobalAccess" }),
        __metadata("design:type", Boolean)
    ], ForwardingRule.prototype, "allowGlobalAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allowPscGlobalAccess" }),
        __metadata("design:type", Boolean)
    ], ForwardingRule.prototype, "allowPscGlobalAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "backendService" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "backendService", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "baseForwardingRule" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "baseForwardingRule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipVersion" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "ipVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isMirroringCollector" }),
        __metadata("design:type", Boolean)
    ], ForwardingRule.prototype, "isMirroringCollector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], ForwardingRule.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "loadBalancingScheme" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "loadBalancingScheme", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: metadatafilter_1.MetadataFilter }),
        (0, class_transformer_1.Expose)({ name: "metadataFilters" }),
        (0, class_transformer_1.Type)(function () { return metadatafilter_1.MetadataFilter; }),
        __metadata("design:type", Array)
    ], ForwardingRule.prototype, "metadataFilters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkTier" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "networkTier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noAutomateDnsZone" }),
        __metadata("design:type", Boolean)
    ], ForwardingRule.prototype, "noAutomateDnsZone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portRange" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "portRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ports" }),
        __metadata("design:type", Array)
    ], ForwardingRule.prototype, "ports", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pscConnectionId" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "pscConnectionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pscConnectionStatus" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "pscConnectionStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: forwardingruleservicedirectoryregistration_1.ForwardingRuleServiceDirectoryRegistration }),
        (0, class_transformer_1.Expose)({ name: "serviceDirectoryRegistrations" }),
        (0, class_transformer_1.Type)(function () { return forwardingruleservicedirectoryregistration_1.ForwardingRuleServiceDirectoryRegistration; }),
        __metadata("design:type", Array)
    ], ForwardingRule.prototype, "serviceDirectoryRegistrations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceLabel" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "serviceLabel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceName" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "serviceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceIpRanges" }),
        __metadata("design:type", Array)
    ], ForwardingRule.prototype, "sourceIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "subnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "target" }),
        __metadata("design:type", String)
    ], ForwardingRule.prototype, "target", void 0);
    return ForwardingRule;
}(utils_1.SpeakeasyBase));
exports.ForwardingRule = ForwardingRule;
