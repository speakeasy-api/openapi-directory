// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MatchOptionEnum string

const (
	MatchOptionEnumEquals             MatchOptionEnum = "EQUALS"
	MatchOptionEnumAbsent             MatchOptionEnum = "ABSENT"
	MatchOptionEnumStartsWith         MatchOptionEnum = "STARTS_WITH"
	MatchOptionEnumEndsWith           MatchOptionEnum = "ENDS_WITH"
	MatchOptionEnumContains           MatchOptionEnum = "CONTAINS"
	MatchOptionEnumCaseSensitive      MatchOptionEnum = "CASE_SENSITIVE"
	MatchOptionEnumCaseInsensitive    MatchOptionEnum = "CASE_INSENSITIVE"
	MatchOptionEnumGreaterThanOrEqual MatchOptionEnum = "GREATER_THAN_OR_EQUAL"
)

func (e MatchOptionEnum) ToPointer() *MatchOptionEnum {
	return &e
}

func (e *MatchOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EQUALS":
		fallthrough
	case "ABSENT":
		fallthrough
	case "STARTS_WITH":
		fallthrough
	case "ENDS_WITH":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "CASE_SENSITIVE":
		fallthrough
	case "CASE_INSENSITIVE":
		fallthrough
	case "GREATER_THAN_OR_EQUAL":
		*e = MatchOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MatchOptionEnum: %v", v)
	}
}
