/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class TicketInput {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    public AssigneeInput[] assignees;
    public TicketInput withAssignees(AssigneeInput[] assignees) {
        this.assignees = assignees;
        return this;
    }
    
    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public TicketInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Due date of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("due_date")
    public OffsetDateTime dueDate;
    public TicketInput withDueDate(OffsetDateTime dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * The ticket's parent ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    public String parentId;
    public TicketInput withParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * Priority of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public TicketPriorityEnum priority;
    public TicketInput withPriority(TicketPriorityEnum priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public TicketInput withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Subject of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    public String subject;
    public TicketInput withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public CollectionTagInput[] tags;
    public TicketInput withTags(CollectionTagInput[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The ticket's type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public TicketInput withType(String type) {
        this.type = type;
        return this;
    }
    
}
