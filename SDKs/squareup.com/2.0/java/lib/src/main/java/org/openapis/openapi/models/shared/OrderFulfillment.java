/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderFulfillment - Contains details about how to fulfill this order.
 */
public class OrderFulfillment {
    /**
     * Application-defined data attached to this fulfillment. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public OrderFulfillment withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Contains details necessary to fulfill a pickup order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickup_details")
    public OrderFulfillmentPickupDetails pickupDetails;

    public OrderFulfillment withPickupDetails(OrderFulfillmentPickupDetails pickupDetails) {
        this.pickupDetails = pickupDetails;
        return this;
    }
    
    /**
     * Contains the details necessary to fulfill a shipment order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipment_details")
    public OrderFulfillmentShipmentDetails shipmentDetails;

    public OrderFulfillment withShipmentDetails(OrderFulfillmentShipmentDetails shipmentDetails) {
        this.shipmentDetails = shipmentDetails;
        return this;
    }
    
    /**
     * The state of the fulfillment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public OrderFulfillment withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The type of the fulfillment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public OrderFulfillment withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * A unique ID that identifies the fulfillment only within this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public OrderFulfillment withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    public OrderFulfillment(){}
}
