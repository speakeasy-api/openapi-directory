// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateDataSourcePathParams struct {
	// Id of the data source
	DatasourceID string `pathParam:"style=simple,explode=false,name=datasourceId"`
}

type UpdateDataSourceRequest struct {
	PathParams UpdateDataSourcePathParams
	Request    *shared.Datasource `request:"mediaType=application/json"`
}

// UpdateDataSource200ApplicationJSONActionEnum - The id of the action
type UpdateDataSource200ApplicationJSONActionEnum string

const (
	UpdateDataSource200ApplicationJSONActionEnumUpdateDataSource UpdateDataSource200ApplicationJSONActionEnum = "updateDataSource"
)

func (e *UpdateDataSource200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateDataSource":
		*e = UpdateDataSource200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDataSource200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateDataSource200ApplicationJSONData struct {
	Datasources []shared.Datasource `json:"datasources"`
}

// UpdateDataSource200ApplicationJSONResultEnum - Result of the request
type UpdateDataSource200ApplicationJSONResultEnum string

const (
	UpdateDataSource200ApplicationJSONResultEnumSuccess UpdateDataSource200ApplicationJSONResultEnum = "success"
	UpdateDataSource200ApplicationJSONResultEnumError   UpdateDataSource200ApplicationJSONResultEnum = "error"
)

func (e *UpdateDataSource200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateDataSource200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDataSource200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateDataSource200ApplicationJSON - Data source information
type UpdateDataSource200ApplicationJSON struct {
	// The id of the action
	Action UpdateDataSource200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateDataSource200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateDataSource200ApplicationJSONResultEnum `json:"result"`
}

type UpdateDataSourceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Data source information
	UpdateDataSource200ApplicationJSONObject *UpdateDataSource200ApplicationJSON
}
