"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetTransactionsByIdv3Request:
    
    ican: int = dataclasses.field(metadata={'path_param': { 'field_name': 'ican', 'style': 'simple', 'explode': False }})  
    date_range_from: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateRangeFrom', 'style': 'form', 'explode': True }})  
    date_range_to: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateRangeTo', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})  
    start_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startAfter', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionBatchItemDetails:
    r"""Details of the batch run if this transaction was part of a batch."""
    
    batch_item_public_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchItemPublicUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID for this item in the batch."""  
    batch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchName'), 'exclude': lambda f: f is None }})
    r"""The optional name given to the batch at creation time."""  
    batch_public_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchPublicUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID for this batch."""  
    job_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobNumber'), 'exclude': lambda f: f is None }})
    r"""The optional job number given to the batch to link it to your own system."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedCard:
    r"""Details of the card used (if applicable)"""
    
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})  
    card_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardId'), 'exclude': lambda f: f is None }})  
    emboss_business_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embossBusinessName'), 'exclude': lambda f: f is None }})  
    emboss_card_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embossCardName'), 'exclude': lambda f: f is None }})  
    expiry_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    masked_pan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maskedPan'), 'exclude': lambda f: f is None }})  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})  
    
class GetTransactionsByIdv3CardTransactionsv3TransactionCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionCurrency:
    r"""The currency."""
    
    code: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionDirectDebitDetails:
    r"""Details of the direct debit (if applicable)"""
    
    direct_debit_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDebitReference'), 'exclude': lambda f: f is None }})
    r"""The direct debit reference."""  
    direct_debit_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDebitUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID for the direct debit payment"""  
    mandate_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateReference'), 'exclude': lambda f: f is None }})
    r"""the reference of the mandate"""  
    mandate_u_uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateUUid'), 'exclude': lambda f: f is None }})
    r"""The UUID for the mandate"""  
    mandate_uuid1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID for the mandate"""  
    originator_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorAlias'), 'exclude': lambda f: f is None }})
    r"""The Alias of the party who sets up the direct debit."""  
    originator_logo_url_large: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorLogoUrlLarge'), 'exclude': lambda f: f is None }})
    r"""URL pointing to a large version of the Originator Logo (if available)"""  
    originator_logo_url_small: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorLogoUrlSmall'), 'exclude': lambda f: f is None }})
    r"""URL pointing to a small version of the Originator Logo (if available)"""  
    originator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorName'), 'exclude': lambda f: f is None }})
    r"""The creator of the party who sets up the direct debit."""  
    originator_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorReference'), 'exclude': lambda f: f is None }})
    r"""Set by party who sets up the direct debit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionFxTrade:
    r"""Details of the FX trade (if applicable)"""
    
    buy_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyAmount'), 'exclude': lambda f: f is None }})
    r"""amount of buyCurrency being bought"""  
    buy_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyCurrency'), 'exclude': lambda f: f is None }})
    r"""currency which is being bought"""  
    fixed_side: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedSide'), 'exclude': lambda f: f is None }})
    r"""type of trade - BUY or SELL"""  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""The FX provider used to make the trade."""  
    rate4d: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate4d'), 'exclude': lambda f: f is None }})
    r"""exchange rate"""  
    sell_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellAmount'), 'exclude': lambda f: f is None }})
    r"""amount of sellCurrency being sold"""  
    sell_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellCurrency'), 'exclude': lambda f: f is None }})
    r"""currency which is being sold"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionProprietarySchemeDetails:
    
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""the scheme proprietary data - key pairs separated by | and key/values separated by ^"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""the type of proprietary scheme - SCT for SEPA, FPS for Faster Payments etc."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentCardMerchant:
    
    acquirer_id_de32: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acquirerIdDe32'), 'exclude': lambda f: f is None }})  
    additional_amt_de54: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalAmtDe54'), 'exclude': lambda f: f is None }})  
    additional_data_de124: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalDataDe124'), 'exclude': lambda f: f is None }})  
    additional_data_de48: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalDataDe48'), 'exclude': lambda f: f is None }})  
    auth_code_de38: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authCodeDe38'), 'exclude': lambda f: f is None }})  
    authorised_by_gps: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorisedByGps'), 'exclude': lambda f: f is None }})  
    avs_result: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avsResult'), 'exclude': lambda f: f is None }})  
    bill_amt: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billAmt'), 'exclude': lambda f: f is None }})  
    bill_ccy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billCcy'), 'exclude': lambda f: f is None }})  
    expiry_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryDate'), 'exclude': lambda f: f is None }})  
    mcc_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mccCode'), 'exclude': lambda f: f is None }})  
    merch_id_de42: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchIdDe42'), 'exclude': lambda f: f is None }})  
    merch_name_de43: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchNameDe43'), 'exclude': lambda f: f is None }})  
    mt_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mtId'), 'exclude': lambda f: f is None }})  
    pos_data_de22: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posDataDe22'), 'exclude': lambda f: f is None }})  
    pos_data_de61: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posDataDe61'), 'exclude': lambda f: f is None }})  
    pos_termnl_de41: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posTermnlDe41'), 'exclude': lambda f: f is None }})  
    proc_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('procCode'), 'exclude': lambda f: f is None }})  
    record_data_de120: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordDataDe120'), 'exclude': lambda f: f is None }})  
    resp_code_de39: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respCodeDe39'), 'exclude': lambda f: f is None }})  
    ret_ref_no_de37: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retRefNoDe37'), 'exclude': lambda f: f is None }})  
    status_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCode'), 'exclude': lambda f: f is None }})  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})  
    txn_amt4d: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnAmt4d'), 'exclude': lambda f: f is None }})  
    txn_ccy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnCcy'), 'exclude': lambda f: f is None }})  
    txn_ctry: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnCtry'), 'exclude': lambda f: f is None }})  
    txn_desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnDesc'), 'exclude': lambda f: f is None }})  
    txn_stat_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnStatCode'), 'exclude': lambda f: f is None }})  
    txn_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnType'), 'exclude': lambda f: f is None }})  
    
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentTypeEnum(str, Enum):
    CARD_MERCHANT = 'CARD_MERCHANT'
    CARD_ATM = 'CARD_ATM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPayment:
    r"""Details of the related third party involved in the transaction."""
    
    card_merchant: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentCardMerchant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardMerchant'), 'exclude': lambda f: f is None }})  
    type: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeAccount:
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""The account number of the Withdrawl account in reference"""  
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""The Alias name of the Withdrawl account in reference"""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bic'), 'exclude': lambda f: f is None }})
    r"""The BIC of the Withdrawl account in reference"""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iban'), 'exclude': lambda f: f is None }})
    r"""The BIC of the Withdrawl account in reference"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID number of the Withdrawl account in reference"""  
    nsc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nsc'), 'exclude': lambda f: f is None }})
    r"""(Conditional) Provide this field if using Mode 2 and the payee account is in GBP."""  
    
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeTypeEnum(str, Enum):
    WITHDRAWAL_ACCOUNT = 'WITHDRAWAL_ACCOUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayee:
    r"""Details of the related third party involved in the transaction."""
    
    account: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})  
    type: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountAccount:
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""the Account Number of the account."""  
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""the name the user gives to the account to help them identify it."""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bic'), 'exclude': lambda f: f is None }})
    r"""the BIC of the account (provided if currency is EUR)."""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iban'), 'exclude': lambda f: f is None }})
    r"""the IBAN of the account (provided if currency is EUR)."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    nsc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nsc'), 'exclude': lambda f: f is None }})
    r"""the Sort Code of the account."""  
    
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountTypeEnum(str, Enum):
    EXTERNAL_ACCOUNT = 'EXTERNAL_ACCOUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccount:
    r"""Details of the related third party involved in the transaction."""
    
    account: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})  
    type: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountAccount:
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""the Account Number of the account."""  
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""the name the user gives to the account to help them identify it."""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bic'), 'exclude': lambda f: f is None }})
    r"""the BIC of the account (provided if currency is EUR)."""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iban'), 'exclude': lambda f: f is None }})
    r"""the IBAN of the account (provided if currency is EUR)."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""identifier for the fire.com account (assigned by fire.com)"""  
    nsc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nsc'), 'exclude': lambda f: f is None }})
    r"""the Sort Code of the account."""  
    
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountTypeEnum(str, Enum):
    FIRE_ACCOUNT = 'FIRE_ACCOUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccount:
    r"""Details of the related third party involved in the transaction."""
    
    account: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})  
    type: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3Transaction:
    
    amount_after_charges: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountAfterCharges'), 'exclude': lambda f: f is None }})
    r"""Net amount lodged or taken from the account after fees and charges were applied."""  
    amount_before_charges: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountBeforeCharges'), 'exclude': lambda f: f is None }})
    r"""Amount of the transaction before the fees and taxes were applied."""  
    balance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account)."""  
    batch_item_details: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionBatchItemDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchItemDetails'), 'exclude': lambda f: f is None }})
    r"""Details of the batch run if this transaction was part of a batch."""  
    card: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionRelatedCard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})
    r"""Details of the card used (if applicable)"""  
    currency: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of the transaction"""  
    date_acknowledged: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateAcknowledged'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    direct_debit_details: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionDirectDebitDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDebitDetails'), 'exclude': lambda f: f is None }})
    r"""Details of the direct debit (if applicable)"""  
    event_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventUuid'), 'exclude': lambda f: f is None }})
    r"""An internal Fire reference for the transaction (UUID)"""  
    fee_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feeAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the fee, if any."""  
    fx_trade_details: Optional[GetTransactionsByIdv3CardTransactionsv3TransactionFxTrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fxTradeDetails'), 'exclude': lambda f: f is None }})
    r"""Details of the FX trade (if applicable)"""  
    ican: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ican'), 'exclude': lambda f: f is None }})
    r"""identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version."""  
    my_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('myRef'), 'exclude': lambda f: f is None }})
    r"""The comment/reference on the transaction"""  
    payment_request_public_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentRequestPublicCode'), 'exclude': lambda f: f is None }})
    r"""(FOP payments only) The FOP Payment Code that was used to make this payment."""  
    proprietary_scheme_details: Optional[list[GetTransactionsByIdv3CardTransactionsv3TransactionProprietarySchemeDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proprietarySchemeDetails'), 'exclude': lambda f: f is None }})
    r"""Extra details about the transaction based on the scheme used to make the payment."""  
    ref_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refId'), 'exclude': lambda f: f is None }})
    r"""The id of the transaction."""  
    related_party: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedParty'), 'exclude': lambda f: f is None }})
    r"""Details of the related third party involved in the transaction."""  
    tax_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the tax, if any (e.g. Stamp duty for ATM transactions)"""  
    txn_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnId'), 'exclude': lambda f: f is None }})
    r"""The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the transaction:
    * `LODGEMENT` - Bank Transfer received
    * `PIS_LODGEMENT` - Fire Open Payments Lodgement received
    * `MANUAL_TRANSFER` - Manual Transfer to
    * `WITHDRAWAL` - Bank Transfer sent
    * `REVERSAL` - Credit Reversal
    * `DIRECT_DEBIT` - A direct debit.
    * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
    * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
    * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
    * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
    * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
    * `LODGEMENT_REVERSED` - Bank Transfer received returned
    * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
    * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
    * `CREATE_CARD` - The fee taken when a debit card is issued.
    * `ADD_ACCOUNT` - The fee taken when an account is created.
    * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
    * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
    * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
    * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
    * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
    * `CARD_ECOMMERCE_DEBIT` - Card used on the internet
    * `CARD_ECOMMERCE_CREDIT` - Card used on the internet
    * `CARD_ATM_DEBIT` - Card used in an ATM
    * `CARD_ATM_CREDIT` - Card used in an ATM
    * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
    * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
    * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
    * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
    * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
    * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
    * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
    * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
    * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
    * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
    * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
    * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
    * `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
    * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
    * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
    * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
    * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
    * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
    * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
    * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
    * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
    * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
    * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
    * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
    """  
    your_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yourRef'), 'exclude': lambda f: f is None }})
    r"""The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3Links:
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""https://api.fire.com/business/v3/accounts/1/transactions?startAfter=eyJpY2F"""  
    rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rel'), 'exclude': lambda f: f is None }})
    r"""The relationship of this link to the current object - self, next, prev page."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionsByIdv3CardTransactionsv3:
    r"""An array of transaction objects for the account with a count (`total`)."""
    
    content: Optional[list[GetTransactionsByIdv3CardTransactionsv3Transaction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})  
    links: Optional[list[GetTransactionsByIdv3CardTransactionsv3Links]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetTransactionsByIdv3Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    card_transactionsv3: Optional[GetTransactionsByIdv3CardTransactionsv3] = dataclasses.field(default=None)
    r"""An array of transaction objects for the account with a count (`total`)."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    