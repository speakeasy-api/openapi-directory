"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tags:
    r"""Tags are custom labels that can be associated with transactions
    on Up. Within the Up application, tags provide additional insight
    into spending. For example, you could have a \"Take Away\" tag that
    you apply to purchases from food delivery services. The Up API
    allows you to manage the tags associated with transactions. Each
    transaction may have up to 6 tags.
    
    Tags are identified by their labels, which are unique strings,
    so the tag \"Holiday\" has also the `id` `\"Holiday\"`.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_transactions_transaction_id_relationships_tags(self, request: operations.DeleteTransactionsTransactionIDRelationshipsTagsRequest) -> operations.DeleteTransactionsTransactionIDRelationshipsTagsResponse:
        r"""Remove tags from transaction
        Disassociates one or more tags from a specific transaction. Tags that are
        not associated are silently ignored. An HTTP `204` is returned on
        success. The associated tags, along with this request URL, are also
        exposed via the `tags` relationship on the transaction resource returned
        from `/transactions/{id}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTransactionsTransactionIDRelationshipsTagsRequest, base_url, '/transactions/{transactionId}/relationships/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_transaction_tags_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTransactionsTransactionIDRelationshipsTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_tags(self, request: operations.GetTagsRequest) -> operations.GetTagsResponse:
        r"""List tags
        Retrieve a list of all tags currently in use. The returned list is
        [paginated](#pagination) and can be scrolled by following the `next`
        and `prev` links where present. Results are ordered lexicographically.
        The `transactions` relationship for each tag exposes a link
        to get the transactions with the given tag.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tags'
        
        query_params = utils.get_query_params(operations.GetTagsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagsResponse])
                res.list_tags_response = out

        return res

    def post_transactions_transaction_id_relationships_tags(self, request: operations.PostTransactionsTransactionIDRelationshipsTagsRequest) -> operations.PostTransactionsTransactionIDRelationshipsTagsResponse:
        r"""Add tags to transaction
        Associates one or more tags with a specific transaction. No more than 6
        tags may be present on any single transaction. Duplicate tags are
        silently ignored. An HTTP `204` is returned on success. The associated
        tags, along with this request URL, are also exposed via the `tags`
        relationship on the transaction resource returned from
        `/transactions/{id}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTransactionsTransactionIDRelationshipsTagsRequest, base_url, '/transactions/{transactionId}/relationships/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_transaction_tags_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTransactionsTransactionIDRelationshipsTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    