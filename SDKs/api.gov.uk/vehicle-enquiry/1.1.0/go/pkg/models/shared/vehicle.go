// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// VehicleMotStatusEnum - MOT Status of the vehicle
type VehicleMotStatusEnum string

const (
	VehicleMotStatusEnumNoDetailsHeldByDvla VehicleMotStatusEnum = "No details held by DVLA"
	VehicleMotStatusEnumNoResultsReturned   VehicleMotStatusEnum = "No results returned"
	VehicleMotStatusEnumNotValid            VehicleMotStatusEnum = "Not valid"
	VehicleMotStatusEnumValid               VehicleMotStatusEnum = "Valid"
)

func (e *VehicleMotStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No details held by DVLA":
		fallthrough
	case "No results returned":
		fallthrough
	case "Not valid":
		fallthrough
	case "Valid":
		*e = VehicleMotStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VehicleMotStatusEnum: %s", s)
	}
}

// VehicleTaxStatusEnum - Tax status of the vehicle
type VehicleTaxStatusEnum string

const (
	VehicleTaxStatusEnumNotTaxedForOnRoadUse VehicleTaxStatusEnum = "Not Taxed for on Road Use"
	VehicleTaxStatusEnumSorn                 VehicleTaxStatusEnum = "SORN"
	VehicleTaxStatusEnumTaxed                VehicleTaxStatusEnum = "Taxed"
	VehicleTaxStatusEnumUntaxed              VehicleTaxStatusEnum = "Untaxed"
)

func (e *VehicleTaxStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Not Taxed for on Road Use":
		fallthrough
	case "SORN":
		fallthrough
	case "Taxed":
		fallthrough
	case "Untaxed":
		*e = VehicleTaxStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VehicleTaxStatusEnum: %s", s)
	}
}

// Vehicle - Successful response
type Vehicle struct {
	// Additional Rate of Tax End Date, format: YYYY-MM-DD
	ArtEndDate *types.Date `json:"artEndDate,omitempty"`
	// Carbon Dioxide emissions in grams per kilometre
	Co2Emissions *int `json:"co2Emissions,omitempty"`
	// Vehicle colour
	Colour *string `json:"colour,omitempty"`
	// Date of last V5C issued
	DateOfLastV5CIssued *types.Date `json:"dateOfLastV5CIssued,omitempty"`
	// Engine capacity in cubic centimetres
	EngineCapacity *int `json:"engineCapacity,omitempty"`
	// Euro Status (Dealer / Customer Provided (new vehicles))
	EuroStatus *string `json:"euroStatus,omitempty"`
	// Fuel type (Method of Propulsion)
	FuelType *string `json:"fuelType,omitempty"`
	// Vehicle make
	Make *string `json:"make,omitempty"`
	// True only if vehicle has been export marked
	MarkedForExport *bool `json:"markedForExport,omitempty"`
	// Month of First DVLA Registration
	MonthOfFirstDvlaRegistration *types.Date `json:"monthOfFirstDvlaRegistration,omitempty"`
	// Month of First Registration
	MonthOfFirstRegistration *types.Date `json:"monthOfFirstRegistration,omitempty"`
	// Mot Expiry Date
	MotExpiryDate *types.Date `json:"motExpiryDate,omitempty"`
	// MOT Status of the vehicle
	MotStatus *VehicleMotStatusEnum `json:"motStatus,omitempty"`
	// Real Driving Emissions value
	RealDrivingEmissions *string `json:"realDrivingEmissions,omitempty"`
	// Registration number of the vehicle
	RegistrationNumber string `json:"registrationNumber"`
	// Revenue weight in kilograms
	RevenueWeight *int `json:"revenueWeight,omitempty"`
	// Date of tax liablity, Used in calculating licence information presented to user
	TaxDueDate *types.Date `json:"taxDueDate,omitempty"`
	// Tax status of the vehicle
	TaxStatus *VehicleTaxStatusEnum `json:"taxStatus,omitempty"`
	// Vehicle Type Approval Category
	TypeApproval *string `json:"typeApproval,omitempty"`
	// Vehicle wheel plan
	Wheelplan *string `json:"wheelplan,omitempty"`
	// Year of Manufacture
	YearOfManufacture *int `json:"yearOfManufacture,omitempty"`
}
