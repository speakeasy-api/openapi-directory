"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PlatformPlatformTypeEnum(str, Enum):
    r"""Type of platform."""
    PLATFORM_TYPE_UNSPECIFIED = 'PLATFORM_TYPE_UNSPECIFIED'
    WIN = 'WIN'
    WIN64 = 'WIN64'
    MAC = 'MAC'
    LINUX = 'LINUX'
    ANDROID = 'ANDROID'
    WEBVIEW = 'WEBVIEW'
    IOS = 'IOS'
    ALL = 'ALL'
    MAC_ARM64 = 'MAC_ARM64'
    LACROS = 'LACROS'
    LACROS_ARM32 = 'LACROS_ARM32'
    CHROMEOS = 'CHROMEOS'
    LACROS_ARM64 = 'LACROS_ARM64'
    FUCHSIA = 'FUCHSIA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Platform:
    r"""Each Platform is owned by a Product and owns a collection of channels. Available platforms are listed in Platform enum below. Not all Channels are available for every Platform (e.g. CANARY does not exist for LINUX)."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Platform name. Format is \\"{product}/platforms/{platform}\\" """  
    platform_type: Optional[PlatformPlatformTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformType'), 'exclude': lambda f: f is None }})
    r"""Type of platform."""  
    