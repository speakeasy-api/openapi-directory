"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionNotificationExportEntity:
    r"""Show Action Notification Export"""
    
    end_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date/time of export range."""  
    export_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('export_version'), 'exclude': lambda f: f is None }})
    r"""Version of the underlying records for the export."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""History Export ID"""  
    query_folder: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_folder'), 'exclude': lambda f: f is None }})
    r"""Return notifications that were triggered by actions in this folder."""  
    query_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_message'), 'exclude': lambda f: f is None }})
    r"""Error message associated with the request, if any."""  
    query_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_path'), 'exclude': lambda f: f is None }})
    r"""Return notifications that were triggered by actions on this specific path."""  
    query_request_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_request_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP request method used by the webhook."""  
    query_request_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_request_url'), 'exclude': lambda f: f is None }})
    r"""The target webhook URL."""  
    query_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_status'), 'exclude': lambda f: f is None }})
    r"""The HTTP status returned from the server in response to the webhook request."""  
    query_success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_success'), 'exclude': lambda f: f is None }})
    r"""true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise."""  
    results_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results_url'), 'exclude': lambda f: f is None }})
    r"""If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV."""  
    start_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date/time of export range."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of export.  Valid values: `building`, `ready`, or `failed`"""  
    