// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ListTransactionsCategoryInEnum string

const (
	ListTransactionsCategoryInEnumAccountTransferIntention                    ListTransactionsCategoryInEnum = "account_transfer_intention"
	ListTransactionsCategoryInEnumAchCheckConversionReturn                    ListTransactionsCategoryInEnum = "ach_check_conversion_return"
	ListTransactionsCategoryInEnumAchCheckConversion                          ListTransactionsCategoryInEnum = "ach_check_conversion"
	ListTransactionsCategoryInEnumAchTransferIntention                        ListTransactionsCategoryInEnum = "ach_transfer_intention"
	ListTransactionsCategoryInEnumAchTransferRejection                        ListTransactionsCategoryInEnum = "ach_transfer_rejection"
	ListTransactionsCategoryInEnumAchTransferReturn                           ListTransactionsCategoryInEnum = "ach_transfer_return"
	ListTransactionsCategoryInEnumCardDisputeAcceptance                       ListTransactionsCategoryInEnum = "card_dispute_acceptance"
	ListTransactionsCategoryInEnumCardRefund                                  ListTransactionsCategoryInEnum = "card_refund"
	ListTransactionsCategoryInEnumCardSettlement                              ListTransactionsCategoryInEnum = "card_settlement"
	ListTransactionsCategoryInEnumCardRevenuePayment                          ListTransactionsCategoryInEnum = "card_revenue_payment"
	ListTransactionsCategoryInEnumCheckDepositAcceptance                      ListTransactionsCategoryInEnum = "check_deposit_acceptance"
	ListTransactionsCategoryInEnumCheckDepositReturn                          ListTransactionsCategoryInEnum = "check_deposit_return"
	ListTransactionsCategoryInEnumCheckTransferIntention                      ListTransactionsCategoryInEnum = "check_transfer_intention"
	ListTransactionsCategoryInEnumCheckTransferReturn                         ListTransactionsCategoryInEnum = "check_transfer_return"
	ListTransactionsCategoryInEnumCheckTransferRejection                      ListTransactionsCategoryInEnum = "check_transfer_rejection"
	ListTransactionsCategoryInEnumCheckTransferStopPaymentRequest             ListTransactionsCategoryInEnum = "check_transfer_stop_payment_request"
	ListTransactionsCategoryInEnumDisputeResolution                           ListTransactionsCategoryInEnum = "dispute_resolution"
	ListTransactionsCategoryInEnumEmpyrealCashDeposit                         ListTransactionsCategoryInEnum = "empyreal_cash_deposit"
	ListTransactionsCategoryInEnumFeePayment                                  ListTransactionsCategoryInEnum = "fee_payment"
	ListTransactionsCategoryInEnumInboundAchTransfer                          ListTransactionsCategoryInEnum = "inbound_ach_transfer"
	ListTransactionsCategoryInEnumInboundAchTransferReturnIntention           ListTransactionsCategoryInEnum = "inbound_ach_transfer_return_intention"
	ListTransactionsCategoryInEnumInboundCheck                                ListTransactionsCategoryInEnum = "inbound_check"
	ListTransactionsCategoryInEnumInboundInternationalAchTransfer             ListTransactionsCategoryInEnum = "inbound_international_ach_transfer"
	ListTransactionsCategoryInEnumInboundRealTimePaymentsTransferConfirmation ListTransactionsCategoryInEnum = "inbound_real_time_payments_transfer_confirmation"
	ListTransactionsCategoryInEnumInboundWireDrawdownPaymentReversal          ListTransactionsCategoryInEnum = "inbound_wire_drawdown_payment_reversal"
	ListTransactionsCategoryInEnumInboundWireDrawdownPayment                  ListTransactionsCategoryInEnum = "inbound_wire_drawdown_payment"
	ListTransactionsCategoryInEnumInboundWireReversal                         ListTransactionsCategoryInEnum = "inbound_wire_reversal"
	ListTransactionsCategoryInEnumInboundWireTransfer                         ListTransactionsCategoryInEnum = "inbound_wire_transfer"
	ListTransactionsCategoryInEnumInterestPayment                             ListTransactionsCategoryInEnum = "interest_payment"
	ListTransactionsCategoryInEnumInternalGeneralLedgerTransaction            ListTransactionsCategoryInEnum = "internal_general_ledger_transaction"
	ListTransactionsCategoryInEnumInternalSource                              ListTransactionsCategoryInEnum = "internal_source"
	ListTransactionsCategoryInEnumCardRouteRefund                             ListTransactionsCategoryInEnum = "card_route_refund"
	ListTransactionsCategoryInEnumCardRouteSettlement                         ListTransactionsCategoryInEnum = "card_route_settlement"
	ListTransactionsCategoryInEnumRealTimePaymentsTransferAcknowledgement     ListTransactionsCategoryInEnum = "real_time_payments_transfer_acknowledgement"
	ListTransactionsCategoryInEnumSampleFunds                                 ListTransactionsCategoryInEnum = "sample_funds"
	ListTransactionsCategoryInEnumWireDrawdownPaymentIntention                ListTransactionsCategoryInEnum = "wire_drawdown_payment_intention"
	ListTransactionsCategoryInEnumWireDrawdownPaymentRejection                ListTransactionsCategoryInEnum = "wire_drawdown_payment_rejection"
	ListTransactionsCategoryInEnumWireTransferIntention                       ListTransactionsCategoryInEnum = "wire_transfer_intention"
	ListTransactionsCategoryInEnumWireTransferRejection                       ListTransactionsCategoryInEnum = "wire_transfer_rejection"
	ListTransactionsCategoryInEnumOther                                       ListTransactionsCategoryInEnum = "other"
)

func (e ListTransactionsCategoryInEnum) ToPointer() *ListTransactionsCategoryInEnum {
	return &e
}

func (e *ListTransactionsCategoryInEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_transfer_intention":
		fallthrough
	case "ach_check_conversion_return":
		fallthrough
	case "ach_check_conversion":
		fallthrough
	case "ach_transfer_intention":
		fallthrough
	case "ach_transfer_rejection":
		fallthrough
	case "ach_transfer_return":
		fallthrough
	case "card_dispute_acceptance":
		fallthrough
	case "card_refund":
		fallthrough
	case "card_settlement":
		fallthrough
	case "card_revenue_payment":
		fallthrough
	case "check_deposit_acceptance":
		fallthrough
	case "check_deposit_return":
		fallthrough
	case "check_transfer_intention":
		fallthrough
	case "check_transfer_return":
		fallthrough
	case "check_transfer_rejection":
		fallthrough
	case "check_transfer_stop_payment_request":
		fallthrough
	case "dispute_resolution":
		fallthrough
	case "empyreal_cash_deposit":
		fallthrough
	case "fee_payment":
		fallthrough
	case "inbound_ach_transfer":
		fallthrough
	case "inbound_ach_transfer_return_intention":
		fallthrough
	case "inbound_check":
		fallthrough
	case "inbound_international_ach_transfer":
		fallthrough
	case "inbound_real_time_payments_transfer_confirmation":
		fallthrough
	case "inbound_wire_drawdown_payment_reversal":
		fallthrough
	case "inbound_wire_drawdown_payment":
		fallthrough
	case "inbound_wire_reversal":
		fallthrough
	case "inbound_wire_transfer":
		fallthrough
	case "interest_payment":
		fallthrough
	case "internal_general_ledger_transaction":
		fallthrough
	case "internal_source":
		fallthrough
	case "card_route_refund":
		fallthrough
	case "card_route_settlement":
		fallthrough
	case "real_time_payments_transfer_acknowledgement":
		fallthrough
	case "sample_funds":
		fallthrough
	case "wire_drawdown_payment_intention":
		fallthrough
	case "wire_drawdown_payment_rejection":
		fallthrough
	case "wire_transfer_intention":
		fallthrough
	case "wire_transfer_rejection":
		fallthrough
	case "other":
		*e = ListTransactionsCategoryInEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsCategoryInEnum: %v", v)
	}
}

type ListTransactionsRequest struct {
	AccountID           *string                          `queryParam:"style=form,explode=true,name=account_id"`
	CategoryIn          []ListTransactionsCategoryInEnum `queryParam:"style=form,explode=true,name=category.in"`
	CreatedAtAfter      *time.Time                       `queryParam:"style=form,explode=true,name=created_at.after"`
	CreatedAtBefore     *time.Time                       `queryParam:"style=form,explode=true,name=created_at.before"`
	CreatedAtOnOrAfter  *time.Time                       `queryParam:"style=form,explode=true,name=created_at.on_or_after"`
	CreatedAtOnOrBefore *time.Time                       `queryParam:"style=form,explode=true,name=created_at.on_or_before"`
	Cursor              *string                          `queryParam:"style=form,explode=true,name=cursor"`
	Limit               *int64                           `queryParam:"style=form,explode=true,name=limit"`
	RouteID             *string                          `queryParam:"style=form,explode=true,name=route_id"`
}

type ListTransactionsDefaultApplicationJSON13StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListTransactionsDefaultApplicationJSON13StatusEnum = 429
)

func (e ListTransactionsDefaultApplicationJSON13StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON13StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		*e = ListTransactionsDefaultApplicationJSON13StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON13StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON13TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON13TypeEnumRateLimitedError ListTransactionsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e ListTransactionsDefaultApplicationJSON13TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON13TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate_limited_error":
		*e = ListTransactionsDefaultApplicationJSON13TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON13TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON13 struct {
	Detail     string                                             `json:"detail"`
	RetryAfter *int64                                             `json:"retry_after,omitempty"`
	Status     ListTransactionsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                             `json:"title"`
	Type       ListTransactionsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON12StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListTransactionsDefaultApplicationJSON12StatusEnum = 403
)

func (e ListTransactionsDefaultApplicationJSON12StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON12StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListTransactionsDefaultApplicationJSON12StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON12StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON12TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListTransactionsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e ListTransactionsDefaultApplicationJSON12TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON12TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_feature_error":
		*e = ListTransactionsDefaultApplicationJSON12TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON12TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON12 struct {
	Detail string                                             `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                             `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON11StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListTransactionsDefaultApplicationJSON11StatusEnum = 404
)

func (e ListTransactionsDefaultApplicationJSON11StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON11StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ListTransactionsDefaultApplicationJSON11StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON11StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON11TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListTransactionsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e ListTransactionsDefaultApplicationJSON11TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON11TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object_not_found_error":
		*e = ListTransactionsDefaultApplicationJSON11TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON11TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON11 struct {
	Detail string                                             `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                             `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON10StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON10StatusEnumFourHundred ListTransactionsDefaultApplicationJSON10StatusEnum = 400
)

func (e ListTransactionsDefaultApplicationJSON10StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON10StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ListTransactionsDefaultApplicationJSON10StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON10StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON10TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON10TypeEnumMalformedRequestError ListTransactionsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e ListTransactionsDefaultApplicationJSON10TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON10TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "malformed_request_error":
		*e = ListTransactionsDefaultApplicationJSON10TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON10TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON10 struct {
	Detail string                                             `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                             `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON9StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON9StatusEnumFourHundred ListTransactionsDefaultApplicationJSON9StatusEnum = 400
)

func (e ListTransactionsDefaultApplicationJSON9StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON9StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ListTransactionsDefaultApplicationJSON9StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON9StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON9TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON9TypeEnumInvalidParametersError ListTransactionsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e ListTransactionsDefaultApplicationJSON9TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON9TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_parameters_error":
		*e = ListTransactionsDefaultApplicationJSON9TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON9TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                          `json:"errors"`
	Status ListTransactionsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON8StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListTransactionsDefaultApplicationJSON8StatusEnum = 409
)

func (e ListTransactionsDefaultApplicationJSON8StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON8StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ListTransactionsDefaultApplicationJSON8StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON8StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON8TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON8TypeEnumInvalidOperationError ListTransactionsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e ListTransactionsDefaultApplicationJSON8TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON8TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_operation_error":
		*e = ListTransactionsDefaultApplicationJSON8TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON8TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON8 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON7StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListTransactionsDefaultApplicationJSON7StatusEnum = 401
)

func (e ListTransactionsDefaultApplicationJSON7StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON7StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 401:
		*e = ListTransactionsDefaultApplicationJSON7StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON7StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON7TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListTransactionsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e ListTransactionsDefaultApplicationJSON7TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON7TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_api_key_error":
		*e = ListTransactionsDefaultApplicationJSON7TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON7TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON7 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON6StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON6StatusEnumFiveHundred ListTransactionsDefaultApplicationJSON6StatusEnum = 500
)

func (e ListTransactionsDefaultApplicationJSON6StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON6StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 500:
		*e = ListTransactionsDefaultApplicationJSON6StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON6StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON6TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON6TypeEnumInternalServerError ListTransactionsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e ListTransactionsDefaultApplicationJSON6TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON6TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = ListTransactionsDefaultApplicationJSON6TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON6TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON6 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON5StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListTransactionsDefaultApplicationJSON5StatusEnum = 403
)

func (e ListTransactionsDefaultApplicationJSON5StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON5StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListTransactionsDefaultApplicationJSON5StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON5StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON5TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListTransactionsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e ListTransactionsDefaultApplicationJSON5TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON5TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_permissions_error":
		*e = ListTransactionsDefaultApplicationJSON5TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON5TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON5 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON4StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListTransactionsDefaultApplicationJSON4StatusEnum = 422
)

func (e ListTransactionsDefaultApplicationJSON4StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON4StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 422:
		*e = ListTransactionsDefaultApplicationJSON4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON4StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON4TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListTransactionsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e ListTransactionsDefaultApplicationJSON4TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON4TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_unprocessable_error":
		*e = ListTransactionsDefaultApplicationJSON4TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON4TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON4 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON3StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListTransactionsDefaultApplicationJSON3StatusEnum = 409
)

func (e ListTransactionsDefaultApplicationJSON3StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON3StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ListTransactionsDefaultApplicationJSON3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON3StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON3TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListTransactionsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e ListTransactionsDefaultApplicationJSON3TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON3TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_conflict_error":
		*e = ListTransactionsDefaultApplicationJSON3TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON3TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON3 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON2StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListTransactionsDefaultApplicationJSON2StatusEnum = 403
)

func (e ListTransactionsDefaultApplicationJSON2StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON2StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListTransactionsDefaultApplicationJSON2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON2StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON2TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListTransactionsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e ListTransactionsDefaultApplicationJSON2TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON2TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment_mismatch_error":
		*e = ListTransactionsDefaultApplicationJSON2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON2TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON2 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListTransactionsDefaultApplicationJSON1StatusEnum int64

const (
	ListTransactionsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListTransactionsDefaultApplicationJSON1StatusEnum = 404
)

func (e ListTransactionsDefaultApplicationJSON1StatusEnum) ToPointer() *ListTransactionsDefaultApplicationJSON1StatusEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ListTransactionsDefaultApplicationJSON1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON1StatusEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON1TypeEnum string

const (
	ListTransactionsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListTransactionsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e ListTransactionsDefaultApplicationJSON1TypeEnum) ToPointer() *ListTransactionsDefaultApplicationJSON1TypeEnum {
	return &e
}

func (e *ListTransactionsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_method_not_found_error":
		*e = ListTransactionsDefaultApplicationJSON1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTransactionsDefaultApplicationJSON1TypeEnum: %v", v)
	}
}

type ListTransactionsDefaultApplicationJSON1 struct {
	Detail string                                            `json:"detail"`
	Status ListTransactionsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                            `json:"title"`
	Type   ListTransactionsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListTransactionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	Error interface{}
	// Transaction List
	TransactionList *shared.TransactionList
}
