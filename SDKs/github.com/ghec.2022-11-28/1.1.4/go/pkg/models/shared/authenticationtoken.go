// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AuthenticationTokenRepositorySelectionEnum - Describe whether all repositories have been selected or there's a selection involved
type AuthenticationTokenRepositorySelectionEnum string

const (
	AuthenticationTokenRepositorySelectionEnumAll      AuthenticationTokenRepositorySelectionEnum = "all"
	AuthenticationTokenRepositorySelectionEnumSelected AuthenticationTokenRepositorySelectionEnum = "selected"
)

func (e *AuthenticationTokenRepositorySelectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "selected":
		*e = AuthenticationTokenRepositorySelectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationTokenRepositorySelectionEnum: %s", s)
	}
}

// AuthenticationToken - Authentication Token
type AuthenticationToken struct {
	// The time this token expires
	ExpiresAt   time.Time              `json:"expires_at"`
	Permissions map[string]interface{} `json:"permissions,omitempty"`
	// The repositories this token has access to
	Repositories []Repository `json:"repositories,omitempty"`
	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *AuthenticationTokenRepositorySelectionEnum `json:"repository_selection,omitempty"`
	SingleFile          *string                                     `json:"single_file,omitempty"`
	// The token used for authentication
	Token string `json:"token"`
}
