// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RegisterCACertificateQueryParams struct {
	// Allows this CA certificate to be used for auto registration of device certificates.
	AllowAutoRegistration *bool `queryParam:"style=form,explode=true,name=allowAutoRegistration"`
	// <p>A boolean value that specifies if the CA certificate is set to active.</p> <p>Valid values: <code>ACTIVE | INACTIVE</code> </p>
	SetAsActive *bool `queryParam:"style=form,explode=true,name=setAsActive"`
}

type RegisterCACertificateHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// RegisterCACertificateRequestBodyCertificateModeEnum - Describes the certificate mode in which the Certificate Authority (CA) will be registered. If the <code>verificationCertificate</code> field is not provided, set <code>certificateMode</code> to be <code>SNI_ONLY</code>. If the <code>verificationCertificate</code> field is provided, set <code>certificateMode</code> to be <code>DEFAULT</code>. When <code>certificateMode</code> is not provided, it defaults to <code>DEFAULT</code>. All the device certificates that are registered using this CA will be registered in the same certificate mode as the CA. For more information about certificate mode for device certificates, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode"> certificate mode</a>.
type RegisterCACertificateRequestBodyCertificateModeEnum string

const (
	RegisterCACertificateRequestBodyCertificateModeEnumDefault RegisterCACertificateRequestBodyCertificateModeEnum = "DEFAULT"
	RegisterCACertificateRequestBodyCertificateModeEnumSniOnly RegisterCACertificateRequestBodyCertificateModeEnum = "SNI_ONLY"
)

func (e *RegisterCACertificateRequestBodyCertificateModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEFAULT":
		fallthrough
	case "SNI_ONLY":
		*e = RegisterCACertificateRequestBodyCertificateModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterCACertificateRequestBodyCertificateModeEnum: %s", s)
	}
}

// RegisterCACertificateRequestBodyRegistrationConfig - The registration configuration.
type RegisterCACertificateRequestBodyRegistrationConfig struct {
	RoleArn      *string `json:"roleArn,omitempty"`
	TemplateBody *string `json:"templateBody,omitempty"`
	TemplateName *string `json:"templateName,omitempty"`
}

type RegisterCACertificateRequestBody struct {
	// The PEM of a certificate.
	CaCertificate string `json:"caCertificate"`
	// Describes the certificate mode in which the Certificate Authority (CA) will be registered. If the <code>verificationCertificate</code> field is not provided, set <code>certificateMode</code> to be <code>SNI_ONLY</code>. If the <code>verificationCertificate</code> field is provided, set <code>certificateMode</code> to be <code>DEFAULT</code>. When <code>certificateMode</code> is not provided, it defaults to <code>DEFAULT</code>. All the device certificates that are registered using this CA will be registered in the same certificate mode as the CA. For more information about certificate mode for device certificates, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode"> certificate mode</a>.
	CertificateMode *RegisterCACertificateRequestBodyCertificateModeEnum `json:"certificateMode,omitempty"`
	// The registration configuration.
	RegistrationConfig *RegisterCACertificateRequestBodyRegistrationConfig `json:"registrationConfig,omitempty"`
	// <p>Metadata which can be used to manage the CA certificate.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
	Tags []shared.Tag `json:"tags,omitempty"`
	// The PEM of a certificate.
	VerificationCertificate *string `json:"verificationCertificate,omitempty"`
}

type RegisterCACertificateRequest struct {
	QueryParams RegisterCACertificateQueryParams
	Headers     RegisterCACertificateHeaders
	Request     RegisterCACertificateRequestBody `request:"mediaType=application/json"`
}

type RegisterCACertificateResponse struct {
	// CertificateValidationException
	CertificateValidationException interface{}
	ContentType                    string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	RegisterCACertificateResponse *shared.RegisterCACertificateResponse
	// RegistrationCodeValidationException
	RegistrationCodeValidationException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
