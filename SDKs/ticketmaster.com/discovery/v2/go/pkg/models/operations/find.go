// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// FindIncludeLicensedContentEnum - Yes if you want to display licensed content
type FindIncludeLicensedContentEnum string

const (
	FindIncludeLicensedContentEnumYes FindIncludeLicensedContentEnum = "yes"
	FindIncludeLicensedContentEnumNo  FindIncludeLicensedContentEnum = " no"
)

func (e FindIncludeLicensedContentEnum) ToPointer() *FindIncludeLicensedContentEnum {
	return &e
}

func (e *FindIncludeLicensedContentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case " no":
		*e = FindIncludeLicensedContentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindIncludeLicensedContentEnum: %v", v)
	}
}

// FindIncludeSpellcheckEnum - yes, to include spell check suggestions in the response.
type FindIncludeSpellcheckEnum string

const (
	FindIncludeSpellcheckEnumYes FindIncludeSpellcheckEnum = "yes"
	FindIncludeSpellcheckEnumNo  FindIncludeSpellcheckEnum = " no"
)

func (e FindIncludeSpellcheckEnum) ToPointer() *FindIncludeSpellcheckEnum {
	return &e
}

func (e *FindIncludeSpellcheckEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case " no":
		*e = FindIncludeSpellcheckEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindIncludeSpellcheckEnum: %v", v)
	}
}

// FindIncludeTestEnum - True if you want to have entities flag as test in the response. Only, if you only wanted test entities
type FindIncludeTestEnum string

const (
	FindIncludeTestEnumYes  FindIncludeTestEnum = "yes"
	FindIncludeTestEnumNo   FindIncludeTestEnum = " no"
	FindIncludeTestEnumOnly FindIncludeTestEnum = " only"
)

func (e FindIncludeTestEnum) ToPointer() *FindIncludeTestEnum {
	return &e
}

func (e *FindIncludeTestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = FindIncludeTestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindIncludeTestEnum: %v", v)
	}
}

// FindSourceEnum - Filter entities by its source name
type FindSourceEnum string

const (
	FindSourceEnumTicketmaster FindSourceEnum = "ticketmaster"
	FindSourceEnumUniverse     FindSourceEnum = " universe"
	FindSourceEnumFrontgate    FindSourceEnum = " frontgate"
	FindSourceEnumTmr          FindSourceEnum = " tmr"
)

func (e FindSourceEnum) ToPointer() *FindSourceEnum {
	return &e
}

func (e *FindSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ticketmaster":
		fallthrough
	case " universe":
		fallthrough
	case " frontgate":
		fallthrough
	case " tmr":
		*e = FindSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindSourceEnum: %v", v)
	}
}

type FindRequest struct {
	// Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
	ClassificationID []interface{} `queryParam:"style=form,explode=true,name=classificationId"`
	// Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
	ClassificationName []interface{} `queryParam:"style=form,explode=true,name=classificationName"`
	// Filter entities by its id
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Yes if you want to display licensed content
	IncludeLicensedContent *FindIncludeLicensedContentEnum `queryParam:"style=form,explode=true,name=includeLicensedContent"`
	// yes, to include spell check suggestions in the response.
	IncludeSpellcheck *FindIncludeSpellcheckEnum `queryParam:"style=form,explode=true,name=includeSpellcheck"`
	// True if you want to have entities flag as test in the response. Only, if you only wanted test entities
	IncludeTest *FindIncludeTestEnum `queryParam:"style=form,explode=true,name=includeTest"`
	// Keyword to search on
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// Page number
	Page *string `queryParam:"style=form,explode=true,name=page"`
	// Page size of the response
	Size *string `queryParam:"style=form,explode=true,name=size"`
	// Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Filter entities by its source name
	Source *FindSourceEnum `queryParam:"style=form,explode=true,name=source"`
}

type FindResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
