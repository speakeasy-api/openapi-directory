"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Policy:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def policy_create_or_update(self, request: operations.PolicyCreateOrUpdateRequest) -> operations.PolicyCreateOrUpdateResponse:
        r"""Create Policy
        Creates a new policy from scratch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PolicyCreateOrUpdateRequest, base_url, '/api/policy-engine/policies/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "policy_save_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicyCreateOrUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content

        return res

    def policy_delete(self, request: operations.PolicyDeleteRequest) -> operations.PolicyDeleteResponse:
        r"""Delete Policy by ID
        Deletes a specific policy of the account by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PolicyDeleteRequest, base_url, '/api/policy-engine/policies/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicyDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def policy_evaluate(self, request: operations.PolicyEvaluateRequest) -> operations.PolicyEvaluateResponse:
        r"""Evaluate Policies
        This endpoint consults all policies and checks the ones that satisfy the request bodyâ€™s conditions.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/policy-engine/evaluate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "evaluate_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicyEvaluateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PolicyActionGetResponse]])
                res.policy_action_get_responses = out

        return res

    def policy_get(self, request: operations.PolicyGetRequest) -> operations.PolicyGetResponse:
        r"""Get Policy by ID
        Retrieves general information of a policy by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PolicyGetRequest, base_url, '/api/policy-engine/policies/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicyGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PolicyGetResponse]])
                res.policy_get_responses = out

        return res

    def policy_list(self, request: operations.PolicyListRequest) -> operations.PolicyListResponse:
        r"""Get Policy List
        Retrieves a list of all policies in the account and general information of each policy.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/policy-engine/policies'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicyListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PolicyGetResponse]])
                res.policy_get_responses = out

        return res

    def put_api_policy_engine_policies_id_(self, request: operations.PutAPIPolicyEnginePoliciesIDRequest) -> operations.PutAPIPolicyEnginePoliciesIDResponse:
        r"""Update Policy
        Updates an existing policy at your account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIPolicyEnginePoliciesIDRequest, base_url, '/api/policy-engine/policies/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "policy_save_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIPolicyEnginePoliciesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content

        return res

    