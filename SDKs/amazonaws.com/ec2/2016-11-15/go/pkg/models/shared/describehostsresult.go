// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum - Indicates whether the Dedicated Host supports multiple instance types of the same instance family. If the value is <code>on</code>, the Dedicated Host supports multiple instance types in the instance family. If the value is <code>off</code>, the Dedicated Host supports a single instance type only.
type DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum string

const (
	DescribeHostsResultHostsAllowsMultipleInstanceTypesEnumOn  DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum = "on"
	DescribeHostsResultHostsAllowsMultipleInstanceTypesEnumOff DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum = "off"
)

func (e DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum) ToPointer() *DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum {
	return &e
}

func (e *DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "on":
		fallthrough
	case "off":
		*e = DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum: %v", v)
	}
}

// DescribeHostsResultHostsAutoPlacementEnum - Whether auto-placement is on or off.
type DescribeHostsResultHostsAutoPlacementEnum string

const (
	DescribeHostsResultHostsAutoPlacementEnumOn  DescribeHostsResultHostsAutoPlacementEnum = "on"
	DescribeHostsResultHostsAutoPlacementEnumOff DescribeHostsResultHostsAutoPlacementEnum = "off"
)

func (e DescribeHostsResultHostsAutoPlacementEnum) ToPointer() *DescribeHostsResultHostsAutoPlacementEnum {
	return &e
}

func (e *DescribeHostsResultHostsAutoPlacementEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "on":
		fallthrough
	case "off":
		*e = DescribeHostsResultHostsAutoPlacementEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeHostsResultHostsAutoPlacementEnum: %v", v)
	}
}

// DescribeHostsResultHostsAvailableCapacityAvailableInstanceCapacity - Information about the number of instances that can be launched onto the Dedicated Host.
type DescribeHostsResultHostsAvailableCapacityAvailableInstanceCapacity struct {
	AvailableCapacity *int64
	InstanceType      *string
	TotalCapacity     *int64
}

// DescribeHostsResultHostsAvailableCapacity - Information about the instances running on the Dedicated Host.
type DescribeHostsResultHostsAvailableCapacity struct {
	AvailableInstanceCapacity []DescribeHostsResultHostsAvailableCapacityAvailableInstanceCapacity
	AvailableVCpus            *int64
}

// DescribeHostsResultHostsHostMaintenanceEnum - Indicates whether host maintenance is enabled or disabled for the Dedicated Host.
type DescribeHostsResultHostsHostMaintenanceEnum string

const (
	DescribeHostsResultHostsHostMaintenanceEnumOn  DescribeHostsResultHostsHostMaintenanceEnum = "on"
	DescribeHostsResultHostsHostMaintenanceEnumOff DescribeHostsResultHostsHostMaintenanceEnum = "off"
)

func (e DescribeHostsResultHostsHostMaintenanceEnum) ToPointer() *DescribeHostsResultHostsHostMaintenanceEnum {
	return &e
}

func (e *DescribeHostsResultHostsHostMaintenanceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "on":
		fallthrough
	case "off":
		*e = DescribeHostsResultHostsHostMaintenanceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeHostsResultHostsHostMaintenanceEnum: %v", v)
	}
}

// DescribeHostsResultHostsHostProperties - The hardware specifications of the Dedicated Host.
type DescribeHostsResultHostsHostProperties struct {
	Cores          *int64
	InstanceFamily *string
	InstanceType   *string
	Sockets        *int64
	TotalVCpus     *int64
}

// DescribeHostsResultHostsHostRecoveryEnum - Indicates whether host recovery is enabled or disabled for the Dedicated Host.
type DescribeHostsResultHostsHostRecoveryEnum string

const (
	DescribeHostsResultHostsHostRecoveryEnumOn  DescribeHostsResultHostsHostRecoveryEnum = "on"
	DescribeHostsResultHostsHostRecoveryEnumOff DescribeHostsResultHostsHostRecoveryEnum = "off"
)

func (e DescribeHostsResultHostsHostRecoveryEnum) ToPointer() *DescribeHostsResultHostsHostRecoveryEnum {
	return &e
}

func (e *DescribeHostsResultHostsHostRecoveryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "on":
		fallthrough
	case "off":
		*e = DescribeHostsResultHostsHostRecoveryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeHostsResultHostsHostRecoveryEnum: %v", v)
	}
}

// DescribeHostsResultHostsInstances - Describes an instance running on a Dedicated Host.
type DescribeHostsResultHostsInstances struct {
	InstanceID   *string
	InstanceType *string
	OwnerID      *string
}

// DescribeHostsResultHostsStateEnum - The Dedicated Host's state.
type DescribeHostsResultHostsStateEnum string

const (
	DescribeHostsResultHostsStateEnumAvailable                DescribeHostsResultHostsStateEnum = "available"
	DescribeHostsResultHostsStateEnumUnderAssessment          DescribeHostsResultHostsStateEnum = "under-assessment"
	DescribeHostsResultHostsStateEnumPermanentFailure         DescribeHostsResultHostsStateEnum = "permanent-failure"
	DescribeHostsResultHostsStateEnumReleased                 DescribeHostsResultHostsStateEnum = "released"
	DescribeHostsResultHostsStateEnumReleasedPermanentFailure DescribeHostsResultHostsStateEnum = "released-permanent-failure"
	DescribeHostsResultHostsStateEnumPending                  DescribeHostsResultHostsStateEnum = "pending"
)

func (e DescribeHostsResultHostsStateEnum) ToPointer() *DescribeHostsResultHostsStateEnum {
	return &e
}

func (e *DescribeHostsResultHostsStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "under-assessment":
		fallthrough
	case "permanent-failure":
		fallthrough
	case "released":
		fallthrough
	case "released-permanent-failure":
		fallthrough
	case "pending":
		*e = DescribeHostsResultHostsStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeHostsResultHostsStateEnum: %v", v)
	}
}

// DescribeHostsResultHostsTags - Describes a tag.
type DescribeHostsResultHostsTags struct {
	Key   *string
	Value *string
}

// DescribeHostsResultHosts - Describes the properties of the Dedicated Host.
type DescribeHostsResultHosts struct {
	AllocationTime                     *time.Time
	AllowsMultipleInstanceTypes        *DescribeHostsResultHostsAllowsMultipleInstanceTypesEnum
	AutoPlacement                      *DescribeHostsResultHostsAutoPlacementEnum
	AvailabilityZone                   *string
	AvailabilityZoneID                 *string
	AvailableCapacity                  *DescribeHostsResultHostsAvailableCapacity
	ClientToken                        *string
	HostID                             *string
	HostMaintenance                    *DescribeHostsResultHostsHostMaintenanceEnum
	HostProperties                     *DescribeHostsResultHostsHostProperties
	HostRecovery                       *DescribeHostsResultHostsHostRecoveryEnum
	HostReservationID                  *string
	Instances                          []DescribeHostsResultHostsInstances
	MemberOfServiceLinkedResourceGroup *bool
	OutpostArn                         *string
	OwnerID                            *string
	ReleaseTime                        *time.Time
	State                              *DescribeHostsResultHostsStateEnum
	Tags                               []DescribeHostsResultHostsTags
}

// DescribeHostsResult - Success
type DescribeHostsResult struct {
	Hosts     []DescribeHostsResultHosts
	NextToken *string
}
