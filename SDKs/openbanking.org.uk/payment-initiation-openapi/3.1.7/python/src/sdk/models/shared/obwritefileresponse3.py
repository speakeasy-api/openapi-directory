"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import links as shared_links
from ..shared import meta as shared_meta
from ..shared import obactiveorhistoriccurrencyandamount as shared_obactiveorhistoriccurrencyandamount
from ..shared import obcashaccountdebtor4 as shared_obcashaccountdebtor4
from ..shared import obchargebearertype1code_enum as shared_obchargebearertype1code_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3DataCharges:
    r"""Set of elements used to provide details of a charge for the payment initiation."""
    
    amount: shared_obactiveorhistoriccurrencyandamount.OBActiveOrHistoricCurrencyAndAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""Amount of money associated with the charge type."""  
    charge_bearer: shared_obchargebearertype1code_enum.OBChargeBearerType1CodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeBearer') }})
    r"""Specifies which party/parties will bear the charges associated with the processing of the payment transaction."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})
    r"""Charge type, in a coded form."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3DataInitiationDebtorAccount:
    r"""Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
    Note, the account name is not the product name or the nickname of the account.
    """  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3DataInitiationRemittanceInformation:
    r"""Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system."""
    
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
    Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
    If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
    OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
    """  
    unstructured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unstructured'), 'exclude': lambda f: f is None }})
    r"""Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3DataInitiation:
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file."""
    
    file_hash: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileHash') }})
    r"""A base64 encoding of a SHA256 hash of the file to be uploaded."""  
    file_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileType') }})
    r"""Specifies the payment file type."""  
    control_sum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ControlSum'), 'exclude': lambda f: f is None }})
    r"""Total of all individual amounts included in the group, irrespective of currencies."""  
    debtor_account: Optional[OBWriteFileResponse3DataInitiationDebtorAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebtorAccount'), 'exclude': lambda f: f is None }})
    r"""Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."""  
    file_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileReference'), 'exclude': lambda f: f is None }})
    r"""Reference for the file."""  
    local_instrument: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalInstrument'), 'exclude': lambda f: f is None }})
    r"""User community specific instrument.
    Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
    """  
    number_of_transactions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfTransactions'), 'exclude': lambda f: f is None }})
    r"""Number of individual transactions contained in the payment information group."""  
    remittance_information: Optional[OBWriteFileResponse3DataInitiationRemittanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemittanceInformation'), 'exclude': lambda f: f is None }})
    r"""Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system."""  
    requested_execution_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedExecutionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date at which the initiating party requests the clearing agent to process the payment.
    Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    supplementary_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupplementaryData'), 'exclude': lambda f: f is None }})
    r"""Additional information that can not be captured in the structured fields and/or any other specific block."""  
    
class OBWriteFileResponse3DataMultiAuthorisationStatusEnum(str, Enum):
    r"""Specifies the status of the authorisation flow in code form."""
    AUTHORISED = 'Authorised'
    AWAITING_FURTHER_AUTHORISATION = 'AwaitingFurtherAuthorisation'
    REJECTED = 'Rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3DataMultiAuthorisation:
    r"""The multiple authorisation flow response from the ASPSP."""
    
    status: OBWriteFileResponse3DataMultiAuthorisationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})
    r"""Specifies the status of the authorisation flow in code form."""  
    expiration_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    last_update_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    number_received: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberReceived'), 'exclude': lambda f: f is None }})
    r"""Number of authorisations received."""  
    number_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberRequired'), 'exclude': lambda f: f is None }})
    r"""Number of authorisations required for payment order (total required at the start of the multi authorisation journey)."""  
    
class OBWriteFileResponse3DataStatusEnum(str, Enum):
    r"""Specifies the status of the payment order resource."""
    INITIATION_COMPLETED = 'InitiationCompleted'
    INITIATION_FAILED = 'InitiationFailed'
    INITIATION_PENDING = 'InitiationPending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3Data:
    
    consent_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsentId') }})
    r"""OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource."""  
    creation_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    file_payment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilePaymentId') }})
    r"""OB: Unique identification as assigned by the ASPSP to uniquely identify the file payment resource."""  
    initiation: OBWriteFileResponse3DataInitiation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initiation') }})
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file."""  
    status: OBWriteFileResponse3DataStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})
    r"""Specifies the status of the payment order resource."""  
    status_update_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusUpdateDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    charges: Optional[list[OBWriteFileResponse3DataCharges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Charges'), 'exclude': lambda f: f is None }})  
    debtor: Optional[shared_obcashaccountdebtor4.OBCashAccountDebtor4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Debtor'), 'exclude': lambda f: f is None }})
    r"""^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent."""  
    multi_authorisation: Optional[OBWriteFileResponse3DataMultiAuthorisation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiAuthorisation'), 'exclude': lambda f: f is None }})
    r"""The multiple authorisation flow response from the ASPSP."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteFileResponse3:
    r"""File Payments Created"""
    
    data: OBWriteFileResponse3Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Data') }})  
    links: Optional[shared_links.Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Links'), 'exclude': lambda f: f is None }})
    r"""Links relevant to the payload"""  
    meta: Optional[shared_meta.Meta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Meta'), 'exclude': lambda f: f is None }})
    r"""Meta Data relevant to the payload"""  
    