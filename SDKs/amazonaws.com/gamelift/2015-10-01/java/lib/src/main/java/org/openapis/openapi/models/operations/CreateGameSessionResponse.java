/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.net.http.HttpResponse;

public class CreateGameSessionResponse {
    /**
     * ConflictException
     */
    
    public Object conflictException;
    public CreateGameSessionResponse withConflictException(Object conflictException) {
        this.conflictException = conflictException;
        return this;
    }
    
    
    public String contentType;
    public CreateGameSessionResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.CreateGameSessionOutput createGameSessionOutput;
    public CreateGameSessionResponse withCreateGameSessionOutput(org.openapis.openapi.models.shared.CreateGameSessionOutput createGameSessionOutput) {
        this.createGameSessionOutput = createGameSessionOutput;
        return this;
    }
    
    /**
     * FleetCapacityExceededException
     */
    
    public Object fleetCapacityExceededException;
    public CreateGameSessionResponse withFleetCapacityExceededException(Object fleetCapacityExceededException) {
        this.fleetCapacityExceededException = fleetCapacityExceededException;
        return this;
    }
    
    /**
     * IdempotentParameterMismatchException
     */
    
    public Object idempotentParameterMismatchException;
    public CreateGameSessionResponse withIdempotentParameterMismatchException(Object idempotentParameterMismatchException) {
        this.idempotentParameterMismatchException = idempotentParameterMismatchException;
        return this;
    }
    
    /**
     * InternalServiceException
     */
    
    public Object internalServiceException;
    public CreateGameSessionResponse withInternalServiceException(Object internalServiceException) {
        this.internalServiceException = internalServiceException;
        return this;
    }
    
    /**
     * InvalidFleetStatusException
     */
    
    public Object invalidFleetStatusException;
    public CreateGameSessionResponse withInvalidFleetStatusException(Object invalidFleetStatusException) {
        this.invalidFleetStatusException = invalidFleetStatusException;
        return this;
    }
    
    /**
     * InvalidRequestException
     */
    
    public Object invalidRequestException;
    public CreateGameSessionResponse withInvalidRequestException(Object invalidRequestException) {
        this.invalidRequestException = invalidRequestException;
        return this;
    }
    
    /**
     * LimitExceededException
     */
    
    public Object limitExceededException;
    public CreateGameSessionResponse withLimitExceededException(Object limitExceededException) {
        this.limitExceededException = limitExceededException;
        return this;
    }
    
    /**
     * NotFoundException
     */
    
    public Object notFoundException;
    public CreateGameSessionResponse withNotFoundException(Object notFoundException) {
        this.notFoundException = notFoundException;
        return this;
    }
    
    
    public Integer statusCode;
    public CreateGameSessionResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;
    public CreateGameSessionResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * TerminalRoutingStrategyException
     */
    
    public Object terminalRoutingStrategyException;
    public CreateGameSessionResponse withTerminalRoutingStrategyException(Object terminalRoutingStrategyException) {
        this.terminalRoutingStrategyException = terminalRoutingStrategyException;
        return this;
    }
    
    /**
     * UnauthorizedException
     */
    
    public Object unauthorizedException;
    public CreateGameSessionResponse withUnauthorizedException(Object unauthorizedException) {
        this.unauthorizedException = unauthorizedException;
        return this;
    }
    
    /**
     * UnsupportedRegionException
     */
    
    public Object unsupportedRegionException;
    public CreateGameSessionResponse withUnsupportedRegionException(Object unsupportedRegionException) {
        this.unsupportedRegionException = unsupportedRegionException;
        return this;
    }
    
}
