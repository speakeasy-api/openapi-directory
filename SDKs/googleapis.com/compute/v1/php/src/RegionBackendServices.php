<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionBackendServices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified regional BackendService resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteResponse
     */
	public function computeRegionBackendServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified regional BackendService resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetResponse
     */
	public function computeRegionBackendServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the most recent health check results for this regional BackendService.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthResponse
     */
	public function computeRegionBackendServicesGetHealth(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourceGroupReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetHealthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendServiceGroupHealth = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendServiceGroupHealth', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyResponse
     */
	public function computeRegionBackendServicesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertResponse
     */
	public function computeRegionBackendServicesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendService", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of regional BackendService resources available to the specified project in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListResponse
     */
	public function computeRegionBackendServicesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->backendServiceList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BackendServiceList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified regional BackendService resource with the data included in the request. For more information, see Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchResponse
     */
	public function computeRegionBackendServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendService1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyResponse
     */
	public function computeRegionBackendServicesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified regional BackendService resource with the data included in the request. For more information, see Backend services overview .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateResponse
     */
	public function computeRegionBackendServicesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/backendServices/{backendService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backendService1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionBackendServicesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}