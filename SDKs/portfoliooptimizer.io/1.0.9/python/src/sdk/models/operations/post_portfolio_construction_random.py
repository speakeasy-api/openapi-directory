"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioConstructionRandomRequestBodyConstraints:
    
    maximum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage"""  
    maximum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure"""  
    minimum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage"""  
    minimum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioConstructionRandomRequestBody:
    
    assets: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})
    r"""The number of assets"""  
    constraints: Optional[PostPortfolioConstructionRandomRequestBodyConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})  
    portfolios: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios'), 'exclude': lambda f: f is None }})
    r"""The number of portfolios to construct"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioConstructionRandom200ApplicationJSONPortfolios:
    
    assets_weights: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights') }})
    r"""assetsWeights[i] is the weight of the asset i in the portfolio, in percentage"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioConstructionRandom200ApplicationJSON:
    r"""OK"""
    
    portfolios: list[PostPortfolioConstructionRandom200ApplicationJSONPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    

@dataclasses.dataclass
class PostPortfolioConstructionRandomResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_construction_random_200_application_json_object: Optional[PostPortfolioConstructionRandom200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    