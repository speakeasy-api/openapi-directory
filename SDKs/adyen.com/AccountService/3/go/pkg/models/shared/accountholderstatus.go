// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccountHolderStatusStatusEnum - The status of the account holder.
// >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
type AccountHolderStatusStatusEnum string

const (
	AccountHolderStatusStatusEnumActive    AccountHolderStatusStatusEnum = "Active"
	AccountHolderStatusStatusEnumClosed    AccountHolderStatusStatusEnum = "Closed"
	AccountHolderStatusStatusEnumInactive  AccountHolderStatusStatusEnum = "Inactive"
	AccountHolderStatusStatusEnumSuspended AccountHolderStatusStatusEnum = "Suspended"
)

func (e *AccountHolderStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Closed":
		fallthrough
	case "Inactive":
		fallthrough
	case "Suspended":
		*e = AccountHolderStatusStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountHolderStatusStatusEnum: %s", s)
	}
}

type AccountHolderStatus struct {
	// A list of events scheduled for the account holder.
	Events          []AccountEvent          `json:"events,omitempty"`
	PayoutState     *AccountPayoutState     `json:"payoutState,omitempty"`
	ProcessingState *AccountProcessingState `json:"processingState,omitempty"`
	// The status of the account holder.
	// >Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
	Status AccountHolderStatusStatusEnum `json:"status"`
	// The reason why the status was assigned to the account holder.
	StatusReason *string `json:"statusReason,omitempty"`
}
