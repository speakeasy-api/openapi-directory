// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSignalResourceActionEnum
type GETSignalResourceActionEnum string

const (
	GETSignalResourceActionEnumSignalResource GETSignalResourceActionEnum = "SignalResource"
)

func (e *GETSignalResourceActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SignalResource":
		*e = GETSignalResourceActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSignalResourceActionEnum: %s", s)
	}
}

// GETSignalResourceStatusEnum - The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update.
type GETSignalResourceStatusEnum string

const (
	GETSignalResourceStatusEnumSuccess GETSignalResourceStatusEnum = "SUCCESS"
	GETSignalResourceStatusEnumFailure GETSignalResourceStatusEnum = "FAILURE"
)

func (e *GETSignalResourceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUCCESS":
		fallthrough
	case "FAILURE":
		*e = GETSignalResourceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSignalResourceStatusEnum: %s", s)
	}
}

// GETSignalResourceVersionEnum
type GETSignalResourceVersionEnum string

const (
	GETSignalResourceVersionEnumTwoThousandAndTen0515 GETSignalResourceVersionEnum = "2010-05-15"
)

func (e *GETSignalResourceVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETSignalResourceVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSignalResourceVersionEnum: %s", s)
	}
}

type GETSignalResourceQueryParams struct {
	Action GETSignalResourceActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template.
	LogicalResourceID string `queryParam:"style=form,explode=true,name=LogicalResourceId"`
	// The stack name or unique stack ID that includes the resource that you want to signal.
	StackName string `queryParam:"style=form,explode=true,name=StackName"`
	// The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update.
	Status GETSignalResourceStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	// A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID.
	UniqueID string                       `queryParam:"style=form,explode=true,name=UniqueId"`
	Version  GETSignalResourceVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETSignalResourceHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSignalResourceRequest struct {
	QueryParams GETSignalResourceQueryParams
	Headers     GETSignalResourceHeaders
}

type GETSignalResourceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
