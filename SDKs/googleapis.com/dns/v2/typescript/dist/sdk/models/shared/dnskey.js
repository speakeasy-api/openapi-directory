"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsKey = exports.DnsKeyTypeEnum = exports.DnsKeyAlgorithmEnum = void 0;
var utils_1 = require("../../../internal/utils");
var dnskeydigest_1 = require("./dnskeydigest");
var class_transformer_1 = require("class-transformer");
/**
 * String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
 */
var DnsKeyAlgorithmEnum;
(function (DnsKeyAlgorithmEnum) {
    DnsKeyAlgorithmEnum["Rsasha1"] = "RSASHA1";
    DnsKeyAlgorithmEnum["Rsasha256"] = "RSASHA256";
    DnsKeyAlgorithmEnum["Rsasha512"] = "RSASHA512";
    DnsKeyAlgorithmEnum["Ecdsap256Sha256"] = "ECDSAP256SHA256";
    DnsKeyAlgorithmEnum["Ecdsap384Sha384"] = "ECDSAP384SHA384";
})(DnsKeyAlgorithmEnum = exports.DnsKeyAlgorithmEnum || (exports.DnsKeyAlgorithmEnum = {}));
/**
 * One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.
 */
var DnsKeyTypeEnum;
(function (DnsKeyTypeEnum) {
    DnsKeyTypeEnum["KeySigning"] = "KEY_SIGNING";
    DnsKeyTypeEnum["ZoneSigning"] = "ZONE_SIGNING";
})(DnsKeyTypeEnum = exports.DnsKeyTypeEnum || (exports.DnsKeyTypeEnum = {}));
/**
 * A DNSSEC key pair.
 */
var DnsKey = /** @class */ (function (_super) {
    __extends(DnsKey, _super);
    function DnsKey() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "algorithm" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "algorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTime" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "creationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: dnskeydigest_1.DnsKeyDigest }),
        (0, class_transformer_1.Expose)({ name: "digests" }),
        (0, class_transformer_1.Type)(function () { return dnskeydigest_1.DnsKeyDigest; }),
        __metadata("design:type", Array)
    ], DnsKey.prototype, "digests", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isActive" }),
        __metadata("design:type", Boolean)
    ], DnsKey.prototype, "isActive", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "keyLength" }),
        __metadata("design:type", Number)
    ], DnsKey.prototype, "keyLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "keyTag" }),
        __metadata("design:type", Number)
    ], DnsKey.prototype, "keyTag", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "publicKey" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "publicKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], DnsKey.prototype, "type", void 0);
    return DnsKey;
}(utils_1.SpeakeasyBase));
exports.DnsKey = DnsKey;
