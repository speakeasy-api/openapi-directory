/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * WmxSitemap - Contains detailed information about a specific URL submitted as a sitemap.
 */
public class WmxSitemap {
    /**
     * The various content types in the sitemap.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contents")
    public WmxSitemapContent[] contents;
    public WmxSitemap withContents(WmxSitemapContent[] contents) {
        this.contents = contents;
        return this;
    }
    
    /**
     * Number of errors in the sitemap. These are issues with the sitemap itself that need to be fixed before it can be processed correctly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public String errors;
    public WmxSitemap withErrors(String errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * If true, the sitemap has not been processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPending")
    public Boolean isPending;
    public WmxSitemap withIsPending(Boolean isPending) {
        this.isPending = isPending;
        return this;
    }
    
    /**
     * If true, the sitemap is a collection of sitemaps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSitemapsIndex")
    public Boolean isSitemapsIndex;
    public WmxSitemap withIsSitemapsIndex(Boolean isSitemapsIndex) {
        this.isSitemapsIndex = isSitemapsIndex;
        return this;
    }
    
    /**
     * Date &amp; time in which this sitemap was last downloaded. Date format is in RFC 3339 format (yyyy-mm-dd).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastDownloaded")
    public OffsetDateTime lastDownloaded;
    public WmxSitemap withLastDownloaded(OffsetDateTime lastDownloaded) {
        this.lastDownloaded = lastDownloaded;
        return this;
    }
    
    /**
     * Date &amp; time in which this sitemap was submitted. Date format is in RFC 3339 format (yyyy-mm-dd).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastSubmitted")
    public OffsetDateTime lastSubmitted;
    public WmxSitemap withLastSubmitted(OffsetDateTime lastSubmitted) {
        this.lastSubmitted = lastSubmitted;
        return this;
    }
    
    /**
     * The url of the sitemap.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;
    public WmxSitemap withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The type of the sitemap. For example: rssFeed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public WmxSitemap withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Number of warnings for the sitemap. These are generally non-critical issues with URLs in the sitemaps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warnings")
    public String warnings;
    public WmxSitemap withWarnings(String warnings) {
        this.warnings = warnings;
        return this;
    }
    
}
