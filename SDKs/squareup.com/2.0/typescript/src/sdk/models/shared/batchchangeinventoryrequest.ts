/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { InventoryChange } from "./inventorychange";
import { Expose, Type } from "class-transformer";

/**
 * An object containing the fields to POST for the request.
 *
 * @remarks
 *
 * See the corresponding object definition for field details.
 */
export class BatchChangeInventoryRequest extends SpeakeasyBase {
  /**
   * The set of physical counts and inventory adjustments to be made.
   *
   * @remarks
   * Changes are applied based on the client-supplied timestamp and may be sent
   * out of order.
   */
  @SpeakeasyMetadata({ elemType: InventoryChange })
  @Expose({ name: "changes" })
  @Type(() => InventoryChange)
  changes?: InventoryChange[];

  /**
   * A client-supplied, universally unique identifier (UUID) for the
   *
   * @remarks
   * request.
   *
   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the
   * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more
   * information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idempotency_key" })
  idempotencyKey: string;

  /**
   * Indicates whether the current physical count should be ignored if
   *
   * @remarks
   * the quantity is unchanged since the last physical count. Default: `true`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignore_unchanged_counts" })
  ignoreUnchangedCounts?: boolean;
}
