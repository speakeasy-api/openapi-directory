// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateStateMachineXAmzTargetEnum
type UpdateStateMachineXAmzTargetEnum string

const (
	UpdateStateMachineXAmzTargetEnumAwsStepFunctionsUpdateStateMachine UpdateStateMachineXAmzTargetEnum = "AWSStepFunctions.UpdateStateMachine"
)

func (e *UpdateStateMachineXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSStepFunctions.UpdateStateMachine":
		*e = UpdateStateMachineXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStateMachineXAmzTargetEnum: %s", s)
	}
}

type UpdateStateMachineRequest struct {
	UpdateStateMachineInput shared.UpdateStateMachineInput   `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              UpdateStateMachineXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateStateMachineResponse struct {
	ContentType string
	// InvalidArn
	InvalidArn interface{}
	// InvalidDefinition
	InvalidDefinition interface{}
	// InvalidLoggingConfiguration
	InvalidLoggingConfiguration interface{}
	// InvalidTracingConfiguration
	InvalidTracingConfiguration interface{}
	// MissingRequiredParameter
	MissingRequiredParameter interface{}
	StatusCode               int
	RawResponse              *http.Response
	// StateMachineDeleting
	StateMachineDeleting interface{}
	// StateMachineDoesNotExist
	StateMachineDoesNotExist interface{}
	// Success
	UpdateStateMachineOutput *shared.UpdateStateMachineOutput
	// ValidationException
	ValidationException interface{}
}
