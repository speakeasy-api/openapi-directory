// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AddBankTransferBatchPaymentPathParams struct {
	BatchUUID string `pathParam:"style=simple,explode=false,name=batchUuid"`
}

// AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum - Use PAYEE_ID if you are paying existing approved payees (Mode 1).
type AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum string

const (
	AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnumPayeeID AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum = "PAYEE_ID"
)

func (e *AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PAYEE_ID":
		*e = AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum: %s", s)
	}
}

type AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 struct {
	// The value of the transaction
	Amount *int64 `json:"amount,omitempty"`
	// The Fire account ID for the fire.com account the funds are taken from.
	IcanFrom *int64 `json:"icanFrom,omitempty"`
	// The reference on the transaction for your records - not shown to the beneficiary.
	MyRef *string `json:"myRef,omitempty"`
	// The ID of the existing or automatically created payee
	PayeeID *int64 `json:"payeeId,omitempty"`
	// Use PAYEE_ID if you are paying existing approved payees (Mode 1).
	PayeeType *AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1PayeeTypeEnum `json:"payeeType,omitempty"`
	// The reference on the transaction - displayed on the beneficiary bank statement.
	YourRef *string `json:"yourRef,omitempty"`
}

// AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum - Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
type AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum string

const (
	AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnumAccountDetails AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum = "ACCOUNT_DETAILS"
)

func (e *AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCOUNT_DETAILS":
		*e = AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum: %s", s)
	}
}

type AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 struct {
	// The value of the transaction
	Amount *int64 `json:"amount,omitempty"`
	// The destination account holder name
	DestAccountHolderName *string `json:"destAccountHolderName,omitempty"`
	// The destination Account Number if a GBP bank transfer
	DestAccountNumber *string `json:"destAccountNumber,omitempty"`
	// The destination IBAN if a Euro Bank transfer
	DestIban *string `json:"destIban,omitempty"`
	// The destination Nsc if a GBP bank transfer
	DestNsc *string `json:"destNsc,omitempty"`
	// The Fire account ID for the fire.com account the funds are taken from.
	IcanFrom *int64 `json:"icanFrom,omitempty"`
	// The reference on the transaction for your records - not shown to the beneficiary.
	MyRef *string `json:"myRef,omitempty"`
	// Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
	PayeeType *AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2PayeeTypeEnum `json:"payeeType,omitempty"`
	// The reference on the transaction - displayed on the beneficiary bank statement.
	YourRef *string `json:"yourRef,omitempty"`
}

type AddBankTransferBatchPaymentRequestBodyType string

const (
	AddBankTransferBatchPaymentRequestBodyTypeAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 AddBankTransferBatchPaymentRequestBodyType = "addBankTransferBatchPayment_requestBody_BatchItemBankTransferMode2"
	AddBankTransferBatchPaymentRequestBodyTypeAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 AddBankTransferBatchPaymentRequestBodyType = "addBankTransferBatchPayment_requestBody_BatchItemBankTransferMode1"
)

type AddBankTransferBatchPaymentRequestBody struct {
	AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 *AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2
	AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 *AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1

	Type AddBankTransferBatchPaymentRequestBodyType
}

func CreateAddBankTransferBatchPaymentRequestBodyAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2(addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2) AddBankTransferBatchPaymentRequestBody {
	typ := AddBankTransferBatchPaymentRequestBodyTypeAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2

	return AddBankTransferBatchPaymentRequestBody{
		AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2: &addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2,
		Type: typ,
	}
}

func CreateAddBankTransferBatchPaymentRequestBodyAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1(addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1) AddBankTransferBatchPaymentRequestBody {
	typ := AddBankTransferBatchPaymentRequestBodyTypeAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1

	return AddBankTransferBatchPaymentRequestBody{
		AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1: &addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1,
		Type: typ,
	}
}

func (u *AddBankTransferBatchPaymentRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 := new(AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2); err == nil {
		u.AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 = addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2
		u.Type = AddBankTransferBatchPaymentRequestBodyTypeAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2
		return nil
	}

	addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 := new(AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1); err == nil {
		u.AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 = addBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1
		u.Type = AddBankTransferBatchPaymentRequestBodyTypeAddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AddBankTransferBatchPaymentRequestBody) MarshalJSON() ([]byte, error) {
	if u.AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2 != nil {
		return json.Marshal(u.AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode2)
	}

	if u.AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1 != nil {
		return json.Marshal(u.AddBankTransferBatchPaymentRequestBodyBatchItemBankTransferMode1)
	}

	return nil, nil
}

type AddBankTransferBatchPaymentRequest struct {
	PathParams AddBankTransferBatchPaymentPathParams
	// Details of **Mode 1** & **Mode 2**.
	Request AddBankTransferBatchPaymentRequestBody `request:"mediaType=application/json"`
}

type AddBankTransferBatchPaymentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid.
	Onebatches1Percent7BbatchUUIDPercent7D1internaltransfersPostResponses200ContentApplication1jsonSchema *shared.Onebatches1Percent7BbatchUUIDPercent7D1internaltransfersPostResponses200ContentApplication1jsonSchema
}
