// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDetachNetworkInterfaceActionEnum
type GETDetachNetworkInterfaceActionEnum string

const (
	GETDetachNetworkInterfaceActionEnumDetachNetworkInterface GETDetachNetworkInterfaceActionEnum = "DetachNetworkInterface"
)

func (e *GETDetachNetworkInterfaceActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DetachNetworkInterface":
		*e = GETDetachNetworkInterfaceActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetachNetworkInterfaceActionEnum: %s", s)
	}
}

// GETDetachNetworkInterfaceVersionEnum
type GETDetachNetworkInterfaceVersionEnum string

const (
	GETDetachNetworkInterfaceVersionEnumTwoThousandAndSixteen1115 GETDetachNetworkInterfaceVersionEnum = "2016-11-15"
)

func (e *GETDetachNetworkInterfaceVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDetachNetworkInterfaceVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetachNetworkInterfaceVersionEnum: %s", s)
	}
}

type GETDetachNetworkInterfaceQueryParams struct {
	Action GETDetachNetworkInterfaceActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the attachment.
	AttachmentID string `queryParam:"style=form,explode=true,name=AttachmentId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>Specifies whether to force a detachment.</p> <note> <ul> <li> <p>Use the <code>Force</code> parameter only as a last resort to detach a network interface from a failed instance. </p> </li> <li> <p>If you use the <code>Force</code> parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.</p> </li> <li> <p>If you force the detachment of a network interface, the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">instance metadata</a> might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.</p> </li> </ul> </note>
	Force   *bool                                `queryParam:"style=form,explode=true,name=Force"`
	Version GETDetachNetworkInterfaceVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDetachNetworkInterfaceHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDetachNetworkInterfaceRequest struct {
	QueryParams GETDetachNetworkInterfaceQueryParams
	Headers     GETDetachNetworkInterfaceHeaders
}

type GETDetachNetworkInterfaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
