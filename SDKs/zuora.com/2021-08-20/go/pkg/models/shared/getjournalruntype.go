// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// GETJournalRunTypeStatusEnum - Status of the journal run.
type GETJournalRunTypeStatusEnum string

const (
	GETJournalRunTypeStatusEnumPending          GETJournalRunTypeStatusEnum = "Pending"
	GETJournalRunTypeStatusEnumProcessing       GETJournalRunTypeStatusEnum = "Processing"
	GETJournalRunTypeStatusEnumCompleted        GETJournalRunTypeStatusEnum = "Completed"
	GETJournalRunTypeStatusEnumError            GETJournalRunTypeStatusEnum = "Error"
	GETJournalRunTypeStatusEnumCancelInprogress GETJournalRunTypeStatusEnum = "CancelInprogress"
	GETJournalRunTypeStatusEnumCancelled        GETJournalRunTypeStatusEnum = "Cancelled"
	GETJournalRunTypeStatusEnumDeleteInprogress GETJournalRunTypeStatusEnum = "DeleteInprogress"
)

func (e *GETJournalRunTypeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Processing":
		fallthrough
	case "Completed":
		fallthrough
	case "Error":
		fallthrough
	case "CancelInprogress":
		fallthrough
	case "Cancelled":
		fallthrough
	case "DeleteInprogress":
		*e = GETJournalRunTypeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETJournalRunTypeStatusEnum: %s", s)
	}
}

type GETJournalRunType struct {
	AggregateCurrency *bool `json:"aggregateCurrency,omitempty"`
	// Date and time the journal run was executed.
	//
	ExecutedOn *time.Time `json:"executedOn,omitempty"`
	// Date of the journal entry.
	//
	JournalEntryDate *types.Date `json:"journalEntryDate,omitempty"`
	// Journal run number.
	//
	Number *string `json:"number,omitempty"`
	// Name of GL segmentation rule used in the journal run.
	//
	SegmentationRuleName *string `json:"segmentationRuleName,omitempty"`
	// Status of the journal run.
	//
	Status *GETJournalRunTypeStatusEnum `json:"status,omitempty"`
	// Returns `true` if the request was processed successfully.
	//
	Success *bool `json:"success,omitempty"`
	// The target end date of the journal run.
	//
	TargetEndDate *types.Date `json:"targetEndDate,omitempty"`
	// The target start date of the journal run.
	//
	TargetStartDate *types.Date `json:"targetStartDate,omitempty"`
	// Total number of journal entries in the journal run.
	//
	TotalJournalEntryCount *int64 `json:"totalJournalEntryCount,omitempty"`
	// Transaction types included in the journal run.
	//
	TransactionTypes []GETJournalRunTransactionType `json:"transactionTypes,omitempty"`
}
