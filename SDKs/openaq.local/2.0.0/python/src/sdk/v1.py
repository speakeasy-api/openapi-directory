"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class V1:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cities_getv1_v1_cities_get(self, request: operations.CitiesGetv1V1CitiesGetRequest) -> operations.CitiesGetv1V1CitiesGetResponse:
        r"""Provides a simple listing of cities within the platform"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/cities'
        
        query_params = utils.get_query_params(operations.CitiesGetv1V1CitiesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CitiesGetv1V1CitiesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQCitiesResult])
                res.open_aq_cities_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def countries_get_v1_countries_country_id_get(self, request: operations.CountriesGetV1CountriesCountryIDGetRequest) -> operations.CountriesGetV1CountriesCountryIDGetResponse:
        r"""Countries Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CountriesGetV1CountriesCountryIDGetRequest, base_url, '/v1/countries/{country_id}', request)
        
        query_params = utils.get_query_params(operations.CountriesGetV1CountriesCountryIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CountriesGetV1CountriesCountryIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQCountriesResult])
                res.open_aq_countries_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def countries_getv1_v1_countries_get(self, request: operations.CountriesGetv1V1CountriesGetRequest) -> operations.CountriesGetv1V1CountriesGetResponse:
        r"""Countries Getv1"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/countries'
        
        query_params = utils.get_query_params(operations.CountriesGetv1V1CountriesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CountriesGetv1V1CountriesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQCountriesResult])
                res.open_aq_countries_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def latest_v1_get_v1_latest_location_id_get(self, request: operations.LatestV1GetV1LatestLocationIDGetRequest) -> operations.LatestV1GetV1LatestLocationIDGetResponse:
        r"""Latest V1 Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LatestV1GetV1LatestLocationIDGetRequest, base_url, '/v1/latest/{location_id}', request)
        
        query_params = utils.get_query_params(operations.LatestV1GetV1LatestLocationIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LatestV1GetV1LatestLocationIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def latest_v1_get_v1_latest_get(self, request: operations.LatestV1GetV1LatestGetRequest) -> operations.LatestV1GetV1LatestGetResponse:
        r"""Latest V1 Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/latest'
        
        query_params = utils.get_query_params(operations.LatestV1GetV1LatestGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LatestV1GetV1LatestGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def locationsv1_get_v1_locations_location_id_get(self, request: operations.Locationsv1GetV1LocationsLocationIDGetRequest) -> operations.Locationsv1GetV1LocationsLocationIDGetResponse:
        r"""Locationsv1 Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Locationsv1GetV1LocationsLocationIDGetRequest, base_url, '/v1/locations/{location_id}', request)
        
        query_params = utils.get_query_params(operations.Locationsv1GetV1LocationsLocationIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Locationsv1GetV1LocationsLocationIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def locationsv1_get_v1_locations_get(self, request: operations.Locationsv1GetV1LocationsGetRequest) -> operations.Locationsv1GetV1LocationsGetResponse:
        r"""Locationsv1 Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/locations'
        
        query_params = utils.get_query_params(operations.Locationsv1GetV1LocationsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Locationsv1GetV1LocationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def measurements_get_v1_v1_measurements_get(self, request: operations.MeasurementsGetV1V1MeasurementsGetRequest) -> operations.MeasurementsGetV1V1MeasurementsGetResponse:
        r"""Measurements Get V1"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/measurements'
        
        query_params = utils.get_query_params(operations.MeasurementsGetV1V1MeasurementsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeasurementsGetV1V1MeasurementsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.measurements_get_v1_v1_measurements_get_200_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def parameters_getv1_v1_parameters_get(self, request: operations.ParametersGetv1V1ParametersGetRequest) -> operations.ParametersGetv1V1ParametersGetResponse:
        r"""Parameters Getv1"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/parameters'
        
        query_params = utils.get_query_params(operations.ParametersGetv1V1ParametersGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ParametersGetv1V1ParametersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQParametersResult])
                res.open_aq_parameters_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def sources_v1_get_v1_sources_get(self, request: operations.SourcesV1GetV1SourcesGetRequest) -> operations.SourcesV1GetV1SourcesGetResponse:
        r"""Sources V1 Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/sources'
        
        query_params = utils.get_query_params(operations.SourcesV1GetV1SourcesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SourcesV1GetV1SourcesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    