// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ThreadFramesLanguageEnum - programming language of the frame
type ThreadFramesLanguageEnum string

const (
	ThreadFramesLanguageEnumJavaScript   ThreadFramesLanguageEnum = "JavaScript"
	ThreadFramesLanguageEnumCSharp       ThreadFramesLanguageEnum = "CSharp"
	ThreadFramesLanguageEnumObjectiveC   ThreadFramesLanguageEnum = "Objective-C"
	ThreadFramesLanguageEnumObjectiveCpp ThreadFramesLanguageEnum = "Objective-Cpp"
	ThreadFramesLanguageEnumCpp          ThreadFramesLanguageEnum = "Cpp"
	ThreadFramesLanguageEnumC            ThreadFramesLanguageEnum = "C"
	ThreadFramesLanguageEnumSwift        ThreadFramesLanguageEnum = "Swift"
	ThreadFramesLanguageEnumJava         ThreadFramesLanguageEnum = "Java"
	ThreadFramesLanguageEnumUnknown      ThreadFramesLanguageEnum = "Unknown"
)

func (e *ThreadFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ThreadFramesLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ThreadFramesLanguageEnum: %s", s)
	}
}

// ThreadFrames - a single frame of a stack trace
type ThreadFrames struct {
	// address of the frame
	Address *string `json:"address,omitempty"`
	// this line isn't from any framework
	AppCode bool `json:"app_code"`
	// is a class method
	ClassMethod *bool `json:"class_method,omitempty"`
	// name of the class
	ClassName *string `json:"class_name,omitempty"`
	// Formatted frame string
	CodeFormatted string `json:"code_formatted"`
	// Raw frame string
	CodeRaw string `json:"code_raw"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"framework_name,omitempty"`
	// programming language of the frame
	Language *ThreadFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"method_params,omitempty"`
	// frame should be shown always
	Relevant *bool `json:"relevant,omitempty"`
}

// ThreadPlatformEnum - SDK/Platform this thread is beeing generated from
type ThreadPlatformEnum string

const (
	ThreadPlatformEnumIos         ThreadPlatformEnum = "ios"
	ThreadPlatformEnumAndroid     ThreadPlatformEnum = "android"
	ThreadPlatformEnumXamarin     ThreadPlatformEnum = "xamarin"
	ThreadPlatformEnumReactNative ThreadPlatformEnum = "react-native"
	ThreadPlatformEnumNdk         ThreadPlatformEnum = "ndk"
	ThreadPlatformEnumUnity       ThreadPlatformEnum = "unity"
	ThreadPlatformEnumOther       ThreadPlatformEnum = "other"
)

func (e *ThreadPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ios":
		fallthrough
	case "android":
		fallthrough
	case "xamarin":
		fallthrough
	case "react-native":
		fallthrough
	case "ndk":
		fallthrough
	case "unity":
		fallthrough
	case "other":
		*e = ThreadPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ThreadPlatformEnum: %s", s)
	}
}

// Thread - a thread representation
type Thread struct {
	// True if this thread crashed
	Crashed *bool `json:"crashed,omitempty"`
	// a exception
	Exception *Exception `json:"exception,omitempty"`
	// frames of that thread
	Frames []ThreadFrames `json:"frames"`
	// SDK/Platform this thread is beeing generated from
	Platform *ThreadPlatformEnum `json:"platform,omitempty"`
	// Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
	Relevant *bool `json:"relevant,omitempty"`
	// name of the thread
	Title string `json:"title"`
}
