/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class BabelFeeNewOfferController {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public BabelFeeNewOfferController(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public org.openapis.openapi.models.operations.DoCreateBabelBoxResponse doCreateBabelBox(org.openapis.openapi.models.operations.DoCreateBabelBoxRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/mosaik/babelfee/newoffer/doit");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DoCreateBabelBoxResponse res = new org.openapis.openapi.models.operations.DoCreateBabelBoxResponse() {{
            body = null;
            doCreateBabelBox400WildcardString = null;
            doCreateBabelBox401WildcardString = null;
            doCreateBabelBox404WildcardString = null;
            doCreateBabelBox409WildcardString = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.doCreateBabelBox400WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.doCreateBabelBox401WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.doCreateBabelBox404WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.doCreateBabelBox409WildcardString = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ErgoPayCreateBabelBoxResponse ergoPayCreateBabelBox(org.openapis.openapi.models.operations.ErgoPayCreateBabelBoxRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErgoPayCreateBabelBoxPathParams.class, baseUrl, "/createbabel/{address}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErgoPayCreateBabelBoxQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErgoPayCreateBabelBoxResponse res = new org.openapis.openapi.models.operations.ErgoPayCreateBabelBoxResponse() {{
            body = null;
            ergoPayCreateBabelBox400WildcardString = null;
            ergoPayCreateBabelBox401WildcardString = null;
            ergoPayCreateBabelBox404WildcardString = null;
            ergoPayCreateBabelBox409WildcardString = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.ergoPayCreateBabelBox400WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.ergoPayCreateBabelBox401WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.ergoPayCreateBabelBox404WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.ergoPayCreateBabelBox409WildcardString = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetBabelFeeNewOfferResponse getBabelFeeNewOffer() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/mosaik/babelfee/newoffer");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBabelFeeNewOfferResponse res = new org.openapis.openapi.models.operations.GetBabelFeeNewOfferResponse() {{
            body = null;
            getBabelFeeNewOffer400WildcardString = null;
            getBabelFeeNewOffer401WildcardString = null;
            getBabelFeeNewOffer404WildcardString = null;
            getBabelFeeNewOffer409WildcardString = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.getBabelFeeNewOffer400WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.getBabelFeeNewOffer401WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.getBabelFeeNewOffer404WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.getBabelFeeNewOffer409WildcardString = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ReplaceTokenAmountInputFieldsResponse replaceTokenAmountInputFields(org.openapis.openapi.models.operations.ReplaceTokenAmountInputFieldsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/mosaik/babelfee/newoffer/new-input");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReplaceTokenAmountInputFieldsResponse res = new org.openapis.openapi.models.operations.ReplaceTokenAmountInputFieldsResponse() {{
            body = null;
            replaceTokenAmountInputFields400WildcardString = null;
            replaceTokenAmountInputFields401WildcardString = null;
            replaceTokenAmountInputFields404WildcardString = null;
            replaceTokenAmountInputFields409WildcardString = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.replaceTokenAmountInputFields400WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.replaceTokenAmountInputFields401WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.replaceTokenAmountInputFields404WildcardString = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.replaceTokenAmountInputFields409WildcardString = out;
            }
        }

        return res;
    }
}