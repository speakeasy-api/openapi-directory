// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ServiceJwtVerifierType string

const (
	ServiceJwtVerifierTypeLocalJwtVerifier ServiceJwtVerifierType = "LocalJwtVerifier"
	ServiceJwtVerifierTypeRefJwtVerifier   ServiceJwtVerifierType = "RefJwtVerifier"
)

type ServiceJwtVerifier struct {
	LocalJwtVerifier *LocalJwtVerifier
	RefJwtVerifier   *RefJwtVerifier

	Type ServiceJwtVerifierType
}

func CreateServiceJwtVerifierLocalJwtVerifier(localJwtVerifier LocalJwtVerifier) ServiceJwtVerifier {
	typ := ServiceJwtVerifierTypeLocalJwtVerifier

	return ServiceJwtVerifier{
		LocalJwtVerifier: &localJwtVerifier,
		Type:             typ,
	}
}

func CreateServiceJwtVerifierRefJwtVerifier(refJwtVerifier RefJwtVerifier) ServiceJwtVerifier {
	typ := ServiceJwtVerifierTypeRefJwtVerifier

	return ServiceJwtVerifier{
		RefJwtVerifier: &refJwtVerifier,
		Type:           typ,
	}
}

func (u *ServiceJwtVerifier) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	localJwtVerifier := new(LocalJwtVerifier)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&localJwtVerifier); err == nil {
		u.LocalJwtVerifier = localJwtVerifier
		u.Type = ServiceJwtVerifierTypeLocalJwtVerifier
		return nil
	}

	refJwtVerifier := new(RefJwtVerifier)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&refJwtVerifier); err == nil {
		u.RefJwtVerifier = refJwtVerifier
		u.Type = ServiceJwtVerifierTypeRefJwtVerifier
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ServiceJwtVerifier) MarshalJSON() ([]byte, error) {
	if u.LocalJwtVerifier != nil {
		return json.Marshal(u.LocalJwtVerifier)
	}

	if u.RefJwtVerifier != nil {
		return json.Marshal(u.RefJwtVerifier)
	}

	return nil, nil
}

type ServiceSecComSettingsType string

const (
	ServiceSecComSettingsTypeHSAlgoSettings   ServiceSecComSettingsType = "HSAlgoSettings"
	ServiceSecComSettingsTypeRSAlgoSettings   ServiceSecComSettingsType = "RSAlgoSettings"
	ServiceSecComSettingsTypeESAlgoSettings   ServiceSecComSettingsType = "ESAlgoSettings"
	ServiceSecComSettingsTypeJWKSAlgoSettings ServiceSecComSettingsType = "JWKSAlgoSettings"
)

type ServiceSecComSettings struct {
	HSAlgoSettings   *HSAlgoSettings
	RSAlgoSettings   *RSAlgoSettings
	ESAlgoSettings   *ESAlgoSettings
	JWKSAlgoSettings *JWKSAlgoSettings

	Type ServiceSecComSettingsType
}

func CreateServiceSecComSettingsHSAlgoSettings(hsAlgoSettings HSAlgoSettings) ServiceSecComSettings {
	typ := ServiceSecComSettingsTypeHSAlgoSettings

	return ServiceSecComSettings{
		HSAlgoSettings: &hsAlgoSettings,
		Type:           typ,
	}
}

func CreateServiceSecComSettingsRSAlgoSettings(rsAlgoSettings RSAlgoSettings) ServiceSecComSettings {
	typ := ServiceSecComSettingsTypeRSAlgoSettings

	return ServiceSecComSettings{
		RSAlgoSettings: &rsAlgoSettings,
		Type:           typ,
	}
}

func CreateServiceSecComSettingsESAlgoSettings(esAlgoSettings ESAlgoSettings) ServiceSecComSettings {
	typ := ServiceSecComSettingsTypeESAlgoSettings

	return ServiceSecComSettings{
		ESAlgoSettings: &esAlgoSettings,
		Type:           typ,
	}
}

func CreateServiceSecComSettingsJWKSAlgoSettings(jwksAlgoSettings JWKSAlgoSettings) ServiceSecComSettings {
	typ := ServiceSecComSettingsTypeJWKSAlgoSettings

	return ServiceSecComSettings{
		JWKSAlgoSettings: &jwksAlgoSettings,
		Type:             typ,
	}
}

func (u *ServiceSecComSettings) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	hsAlgoSettings := new(HSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&hsAlgoSettings); err == nil {
		u.HSAlgoSettings = hsAlgoSettings
		u.Type = ServiceSecComSettingsTypeHSAlgoSettings
		return nil
	}

	rsAlgoSettings := new(RSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&rsAlgoSettings); err == nil {
		u.RSAlgoSettings = rsAlgoSettings
		u.Type = ServiceSecComSettingsTypeRSAlgoSettings
		return nil
	}

	esAlgoSettings := new(ESAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&esAlgoSettings); err == nil {
		u.ESAlgoSettings = esAlgoSettings
		u.Type = ServiceSecComSettingsTypeESAlgoSettings
		return nil
	}

	jwksAlgoSettings := new(JWKSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&jwksAlgoSettings); err == nil {
		u.JWKSAlgoSettings = jwksAlgoSettings
		u.Type = ServiceSecComSettingsTypeJWKSAlgoSettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ServiceSecComSettings) MarshalJSON() ([]byte, error) {
	if u.HSAlgoSettings != nil {
		return json.Marshal(u.HSAlgoSettings)
	}

	if u.RSAlgoSettings != nil {
		return json.Marshal(u.RSAlgoSettings)
	}

	if u.ESAlgoSettings != nil {
		return json.Marshal(u.ESAlgoSettings)
	}

	if u.JWKSAlgoSettings != nil {
		return json.Marshal(u.JWKSAlgoSettings)
	}

	return nil, nil
}

// Service - An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism
type Service struct {
	// The configuration of the canary mode for a service descriptor
	Canary *Canary `json:"Canary,omitempty"`
	// Specify headers that will be added to each client request. Useful to add authentication
	AdditionalHeaders map[string]string `json:"additionalHeaders,omitempty"`
	// The Open API configuration for your service (if one)
	API *ExposedAPI `json:"api,omitempty"`
	// A reference to a global auth module config
	AuthConfigRef *string `json:"authConfigRef,omitempty"`
	// Display a construction page when a user try to use the service
	BuildMode bool `json:"buildMode"`
	// Configuration for the faults that can be injected in requests
	ChaosConfig *ChaosConfig `json:"chaosConfig,omitempty"`
	// The configuration of the circuit breaker for a service descriptor
	ClientConfig *ClientConfig `json:"clientConfig,omitempty"`
	// A reference to validation authority
	ClientValidatorRef *string `json:"clientValidatorRef,omitempty"`
	// The configuration for cors support
	Cors *CorsSettings `json:"cors,omitempty"`
	// The domain on which the service is available.
	Domain string `json:"domain"`
	// Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist
	Enabled bool `json:"enabled"`
	// When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside
	EnforceSecureCommunication bool `json:"enforceSecureCommunication"`
	// The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'
	Env string `json:"env"`
	// Will force redirection to https:// if not present
	ForceHTTPS bool `json:"forceHttps"`
	// Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group
	Groups []string `json:"groups"`
	// Configuration for gzip of service responses
	Gzip *Gzip `json:"gzip,omitempty"`
	// Specify headers that will be verified after routing.
	HeadersVerification map[string]string `json:"headersVerification,omitempty"`
	// The configuration for checking health of a service. Otoroshi will perform GET call on the URL to check if the service is still alive
	HealthCheck *HealthCheck `json:"healthCheck,omitempty"`
	// A unique random string to identify your service
	ID string `json:"id"`
	// The filtering configuration block for a service of globally.
	IPFiltering *IPFiltering        `json:"ipFiltering,omitempty"`
	JwtVerifier *ServiceJwtVerifier `json:"jwtVerifier,omitempty"`
	// The host used localy, mainly localhost:xxxx
	LocalHost *string `json:"localHost,omitempty"`
	// The scheme used localy, mainly http
	LocalScheme *string `json:"localScheme,omitempty"`
	// Display a maintainance page when a user try to use the service
	MaintenanceMode bool `json:"maintenanceMode"`
	// Specify headers that MUST be present on client request to route it. Useful to implement versioning
	MatchingHeaders map[string]string `json:"matchingHeaders,omitempty"`
	// The root path on which the service is available
	MatchingRoot *string `json:"matchingRoot,omitempty"`
	// Just a bunch of random properties
	Metadata map[string]string `json:"metadata,omitempty"`
	// The name of your service. Only for debug and human readability purposes
	Name string `json:"name"`
	// Host header will be overriden with Host of the target
	OverrideHost *bool `json:"overrideHost,omitempty"`
	// When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain
	PrivateApp bool `json:"privateApp"`
	// If you define a public pattern that is a little bit too much, you can make some of public URL private again
	PrivatePatterns []string `json:"privatePatterns,omitempty"`
	// By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'
	PublicPatterns []string `json:"publicPatterns,omitempty"`
	// If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests
	RedirectToLocal *bool `json:"redirectToLocal,omitempty"`
	// The configuration for redirection per service
	Redirection *RedirectionSettings `json:"redirection,omitempty"`
	// Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar
	Root string `json:"root"`
	// URI patterns excluded from secured communications
	SecComExcludedPatterns []string               `json:"secComExcludedPatterns,omitempty"`
	SecComSettings         *ServiceSecComSettings `json:"secComSettings,omitempty"`
	// When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...
	SendOtoroshiHeadersBack *bool `json:"sendOtoroshiHeadersBack,omitempty"`
	// The configuration for statsd metrics push
	StatsdConfig *StatsdConfig `json:"statsdConfig,omitempty"`
	// The subdomain on which the service is available
	Subdomain string `json:"subdomain"`
	// The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures
	Targets []Target `json:"targets"`
	// A reference to a request transformer
	TransformerRef *string `json:"transformerRef,omitempty"`
	// The fact that this service will be seen by users and cannot be impacted by the Snow Monkey
	UserFacing *bool `json:"userFacing,omitempty"`
	// Send X-Forwarded-* headers
	XForwardedHeaders *bool `json:"xForwardedHeaders,omitempty"`
}
