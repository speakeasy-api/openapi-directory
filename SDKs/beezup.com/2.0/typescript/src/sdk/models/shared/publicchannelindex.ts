/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { LinksGetChannelsIndexLink } from "./linksgetchannelsindexlink";
import { LinksGetChannelsLink } from "./linksgetchannelslink";
import { LinksGetPublicListOfValuesLink } from "./linksgetpubliclistofvalueslink";
import { Expose, Transform, Type } from "class-transformer";

export class PublicChannelIndexLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "channelCountryLov" })
  @Type(() => LinksGetPublicListOfValuesLink)
  channelCountryLov?: LinksGetPublicListOfValuesLink;

  @SpeakeasyMetadata()
  @Expose({ name: "channelTypeLov" })
  @Type(() => LinksGetPublicListOfValuesLink)
  channelTypeLov?: LinksGetPublicListOfValuesLink;

  @SpeakeasyMetadata()
  @Expose({ name: "sectorLov" })
  @Type(() => LinksGetPublicListOfValuesLink)
  sectorLov?: LinksGetPublicListOfValuesLink;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => LinksGetChannelsIndexLink)
  self?: LinksGetChannelsIndexLink;
}

/**
 * Channel list regrouped by country and links to list of values
 */
export class PublicChannelIndex extends SpeakeasyBase {
  /**
   * The key is the country iso code
   */
  @SpeakeasyMetadata({ elemType: LinksGetChannelsLink })
  @Expose({ name: "channels" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LinksGetChannelsLink> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LinksGetChannelsLink);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  channels?: Record<string, LinksGetChannelsLink>;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => PublicChannelIndexLinks)
  links?: PublicChannelIndexLinks;
}
