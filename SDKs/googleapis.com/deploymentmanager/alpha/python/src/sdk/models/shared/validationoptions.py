"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ValidationOptionsSchemaValidationEnum(str, Enum):
    r"""Customize how deployment manager will validate the resource against schema errors."""
    UNKNOWN = 'UNKNOWN'
    IGNORE = 'IGNORE'
    IGNORE_WITH_WARNINGS = 'IGNORE_WITH_WARNINGS'
    FAIL = 'FAIL'

class ValidationOptionsUndeclaredPropertiesEnum(str, Enum):
    r"""Specify what to do with extra properties when executing a request."""
    UNKNOWN = 'UNKNOWN'
    INCLUDE = 'INCLUDE'
    IGNORE = 'IGNORE'
    INCLUDE_WITH_WARNINGS = 'INCLUDE_WITH_WARNINGS'
    IGNORE_WITH_WARNINGS = 'IGNORE_WITH_WARNINGS'
    FAIL = 'FAIL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidationOptions:
    r"""Options for how to validate and process properties on a resource."""
    
    schema_validation: Optional[ValidationOptionsSchemaValidationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaValidation'), 'exclude': lambda f: f is None }})
    r"""Customize how deployment manager will validate the resource against schema errors."""  
    undeclared_properties: Optional[ValidationOptionsUndeclaredPropertiesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('undeclaredProperties'), 'exclude': lambda f: f is None }})
    r"""Specify what to do with extra properties when executing a request."""  
    