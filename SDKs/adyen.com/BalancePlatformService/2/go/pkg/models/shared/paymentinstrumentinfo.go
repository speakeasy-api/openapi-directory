// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaymentInstrumentInfoStatusEnum - The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.
//
// Possible values:
//
//   - **active**:  The payment instrument is active and can be used to make payments.
//
//   - **inactive**: The payment instrument is inactive and cannot be used to make payments.
//
//   - **suspended**: The payment instrument is suspended, either because it was stolen or lost.
//
//   - **closed**: The payment instrument is permanently closed. This action cannot be undone.
type PaymentInstrumentInfoStatusEnum string

const (
	PaymentInstrumentInfoStatusEnumActive    PaymentInstrumentInfoStatusEnum = "active"
	PaymentInstrumentInfoStatusEnumClosed    PaymentInstrumentInfoStatusEnum = "closed"
	PaymentInstrumentInfoStatusEnumInactive  PaymentInstrumentInfoStatusEnum = "inactive"
	PaymentInstrumentInfoStatusEnumSuspended PaymentInstrumentInfoStatusEnum = "suspended"
)

func (e *PaymentInstrumentInfoStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "closed":
		fallthrough
	case "inactive":
		fallthrough
	case "suspended":
		*e = PaymentInstrumentInfoStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentInstrumentInfoStatusEnum: %s", s)
	}
}

// PaymentInstrumentInfoStatusReasonEnum - The reason for updating the status of the payment instrument.
//
// Possible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.
// If the reason is **other**, you must also send the `statusComment` parameter describing the status change.
type PaymentInstrumentInfoStatusReasonEnum string

const (
	PaymentInstrumentInfoStatusReasonEnumAccountClosure PaymentInstrumentInfoStatusReasonEnum = "accountClosure"
	PaymentInstrumentInfoStatusReasonEnumDamaged        PaymentInstrumentInfoStatusReasonEnum = "damaged"
	PaymentInstrumentInfoStatusReasonEnumEndOfLife      PaymentInstrumentInfoStatusReasonEnum = "endOfLife"
	PaymentInstrumentInfoStatusReasonEnumExpired        PaymentInstrumentInfoStatusReasonEnum = "expired"
	PaymentInstrumentInfoStatusReasonEnumLost           PaymentInstrumentInfoStatusReasonEnum = "lost"
	PaymentInstrumentInfoStatusReasonEnumOther          PaymentInstrumentInfoStatusReasonEnum = "other"
	PaymentInstrumentInfoStatusReasonEnumStolen         PaymentInstrumentInfoStatusReasonEnum = "stolen"
	PaymentInstrumentInfoStatusReasonEnumSuspectedFraud PaymentInstrumentInfoStatusReasonEnum = "suspectedFraud"
)

func (e *PaymentInstrumentInfoStatusReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accountClosure":
		fallthrough
	case "damaged":
		fallthrough
	case "endOfLife":
		fallthrough
	case "expired":
		fallthrough
	case "lost":
		fallthrough
	case "other":
		fallthrough
	case "stolen":
		fallthrough
	case "suspectedFraud":
		*e = PaymentInstrumentInfoStatusReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentInstrumentInfoStatusReasonEnum: %s", s)
	}
}

// PaymentInstrumentInfoTypeEnum - Type of payment instrument.
//
// Possible value: **card**, **bankAccount**.
type PaymentInstrumentInfoTypeEnum string

const (
	PaymentInstrumentInfoTypeEnumBankAccount PaymentInstrumentInfoTypeEnum = "bankAccount"
	PaymentInstrumentInfoTypeEnumCard        PaymentInstrumentInfoTypeEnum = "card"
)

func (e *PaymentInstrumentInfoTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bankAccount":
		fallthrough
	case "card":
		*e = PaymentInstrumentInfoTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentInstrumentInfoTypeEnum: %s", s)
	}
}

type PaymentInstrumentInfo struct {
	// The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
	BalanceAccountID string    `json:"balanceAccountId"`
	Card             *CardInfo `json:"card,omitempty"`
	// Your description for the payment instrument, maximum 300 characters.
	Description *string `json:"description,omitempty"`
	// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
	IssuingCountryCode string `json:"issuingCountryCode"`
	// The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
	PaymentInstrumentGroupID *string `json:"paymentInstrumentGroupId,omitempty"`
	// Your reference for the payment instrument, maximum 150 characters.
	Reference *string `json:"reference,omitempty"`
	// The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.
	//
	// Possible values:
	//
	//  * **active**:  The payment instrument is active and can be used to make payments.
	//
	//  * **inactive**: The payment instrument is inactive and cannot be used to make payments.
	//
	//  * **suspended**: The payment instrument is suspended, either because it was stolen or lost.
	//
	//  * **closed**: The payment instrument is permanently closed. This action cannot be undone.
	//
	//
	Status *PaymentInstrumentInfoStatusEnum `json:"status,omitempty"`
	// The reason for updating the status of the payment instrument.
	//
	// Possible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.
	// If the reason is **other**, you must also send the `statusComment` parameter describing the status change.
	StatusReason *PaymentInstrumentInfoStatusReasonEnum `json:"statusReason,omitempty"`
	// Type of payment instrument.
	//
	// Possible value: **card**, **bankAccount**.
	Type PaymentInstrumentInfoTypeEnum `json:"type"`
}
