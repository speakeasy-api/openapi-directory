"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import legalarrangemententitydetail as shared_legalarrangemententitydetail
from ..shared import viasaddress as shared_viasaddress
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LegalArrangementDetailLegalFormEnum(str, Enum):
    r"""The form of legal arrangement. Required if `type` is **Trust** or **Partnership**.
    
    The possible values depend on the `type`.
    
    - For `type` **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.
    
    - For `type` **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**
    """
    CASH_MANAGEMENT_TRUST = 'CashManagementTrust'
    CORPORATE_UNIT_TRUST = 'CorporateUnitTrust'
    DECEASED_ESTATE = 'DeceasedEstate'
    DISCRETIONARY_INVESTMENT_TRUST = 'DiscretionaryInvestmentTrust'
    DISCRETIONARY_SERVICES_MANAGEMENT_TRUST = 'DiscretionaryServicesManagementTrust'
    DISCRETIONARY_TRADING_TRUST = 'DiscretionaryTradingTrust'
    FIRST_HOME_SAVER_ACCOUNTS_TRUST = 'FirstHomeSaverAccountsTrust'
    FIXED_TRUST = 'FixedTrust'
    FIXED_UNIT_TRUST = 'FixedUnitTrust'
    HYBRID_TRUST = 'HybridTrust'
    LISTED_PUBLIC_UNIT_TRUST = 'ListedPublicUnitTrust'
    OTHER_TRUST = 'OtherTrust'
    POOLED_SUPERANNUATION_TRUST = 'PooledSuperannuationTrust'
    PUBLIC_TRADING_TRUST = 'PublicTradingTrust'
    UNLISTED_PUBLIC_UNIT_TRUST = 'UnlistedPublicUnitTrust'
    LIMITED_PARTNERSHIP = 'LimitedPartnership'
    FAMILY_PARTNERSHIP = 'FamilyPartnership'
    OTHER_PARTNERSHIP = 'OtherPartnership'

class LegalArrangementDetailTypeEnum(str, Enum):
    r"""The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).
    
    Possible values:
    
    - **Association** 
    
    - **Partnership** 
    
    - **SoleProprietorship** 
    
    - **Trust**
    """
    ASSOCIATION = 'Association'
    PARTNERSHIP = 'Partnership'
    SOLE_PROPRIETORSHIP = 'SoleProprietorship'
    TRUST = 'Trust'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LegalArrangementDetail:
    
    address: shared_viasaddress.ViasAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The legal name of the legal arrangement. Minimum length: 3 characters."""  
    type: LegalArrangementDetailTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).
    
    Possible values:
    
    - **Association** 
    
    - **Partnership** 
    
    - **SoleProprietorship** 
    
    - **Trust**
    """  
    legal_arrangement_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalArrangementCode'), 'exclude': lambda f: f is None }})
    r"""Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement.
    Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
    """  
    legal_arrangement_entities: Optional[list[shared_legalarrangemententitydetail.LegalArrangementEntityDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalArrangementEntities'), 'exclude': lambda f: f is None }})
    r"""An array containing information about other entities that are part of the legal arrangement."""  
    legal_arrangement_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalArrangementReference'), 'exclude': lambda f: f is None }})
    r"""Your reference for the legal arrangement. Must be between 3 to 128 characters."""  
    legal_form: Optional[LegalArrangementDetailLegalFormEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalForm'), 'exclude': lambda f: f is None }})
    r"""The form of legal arrangement. Required if `type` is **Trust** or **Partnership**.
    
    The possible values depend on the `type`.
    
    - For `type` **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.
    
    - For `type` **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**
    """  
    registration_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationNumber'), 'exclude': lambda f: f is None }})
    r"""The registration number of the legal arrangement."""  
    tax_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxNumber'), 'exclude': lambda f: f is None }})
    r"""The tax identification number of the legal arrangement."""  
    