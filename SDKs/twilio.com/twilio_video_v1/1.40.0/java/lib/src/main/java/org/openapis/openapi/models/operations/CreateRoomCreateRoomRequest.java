/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateRoomCreateRoomRequest {
    /**
     * When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.
     */
    @SpeakeasyMetadata("form:name=AudioOnly")
    public Boolean audioOnly;
    public CreateRoomCreateRoomRequest withAudioOnly(Boolean audioOnly) {
        this.audioOnly = audioOnly;
        return this;
    }
    
    /**
     * Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions).
     */
    @SpeakeasyMetadata("form:name=EmptyRoomTimeout")
    public Long emptyRoomTimeout;
    public CreateRoomCreateRoomRequest withEmptyRoomTimeout(Long emptyRoomTimeout) {
        this.emptyRoomTimeout = emptyRoomTimeout;
        return this;
    }
    
    /**
     * Deprecated, now always considered to be true.
     */
    @SpeakeasyMetadata("form:name=EnableTurn")
    public Boolean enableTurn;
    public CreateRoomCreateRoomRequest withEnableTurn(Boolean enableTurn) {
        this.enableTurn = enableTurn;
        return this;
    }
    
    /**
     * When set to true, indicated that this is the large room.
     */
    @SpeakeasyMetadata("form:name=LargeRoom")
    public Boolean largeRoom;
    public CreateRoomCreateRoomRequest withLargeRoom(Boolean largeRoom) {
        this.largeRoom = largeRoom;
        return this;
    }
    
    /**
     * The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).
     */
    @SpeakeasyMetadata("form:name=MaxParticipantDuration")
    public Long maxParticipantDuration;
    public CreateRoomCreateRoomRequest withMaxParticipantDuration(Long maxParticipantDuration) {
        this.maxParticipantDuration = maxParticipantDuration;
        return this;
    }
    
    /**
     * The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants.
     */
    @SpeakeasyMetadata("form:name=MaxParticipants")
    public Long maxParticipants;
    public CreateRoomCreateRoomRequest withMaxParticipants(Long maxParticipants) {
        this.maxParticipants = maxParticipants;
        return this;
    }
    
    /**
     * The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-address-whitelisting#group-rooms-media-servers). ***This feature is not available in `peer-to-peer` rooms.***
     */
    @SpeakeasyMetadata("form:name=MediaRegion")
    public String mediaRegion;
    public CreateRoomCreateRoomRequest withMediaRegion(String mediaRegion) {
        this.mediaRegion = mediaRegion;
        return this;
    }
    
    /**
     * Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***
     */
    @SpeakeasyMetadata("form:name=RecordParticipantsOnConnect")
    public Boolean recordParticipantsOnConnect;
    public CreateRoomCreateRoomRequest withRecordParticipantsOnConnect(Boolean recordParticipantsOnConnect) {
        this.recordParticipantsOnConnect = recordParticipantsOnConnect;
        return this;
    }
    
    /**
     * A collection of Recording Rules that describe how to include or exclude matching tracks for recording
     */
    @SpeakeasyMetadata("form:name=RecordingRules")
    public Object recordingRules;
    public CreateRoomCreateRoomRequest withRecordingRules(Object recordingRules) {
        this.recordingRules = recordingRules;
        return this;
    }
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.
     */
    @SpeakeasyMetadata("form:name=StatusCallback")
    public String statusCallback;
    public CreateRoomCreateRoomRequest withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be `POST` or `GET`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackMethod")
    public CreateRoomCreateRoomRequestStatusCallbackMethodEnum statusCallbackMethod;
    public CreateRoomCreateRoomRequest withStatusCallbackMethod(CreateRoomCreateRoomRequestStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=Type")
    public org.openapis.openapi.models.shared.RoomEnumRoomTypeEnum type;
    public CreateRoomCreateRoomRequest withType(org.openapis.openapi.models.shared.RoomEnumRoomTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.
     */
    @SpeakeasyMetadata("form:name=UniqueName")
    public String uniqueName;
    public CreateRoomCreateRoomRequest withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }
    
    /**
     * Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions).
     */
    @SpeakeasyMetadata("form:name=UnusedRoomTimeout")
    public Long unusedRoomTimeout;
    public CreateRoomCreateRoomRequest withUnusedRoomTimeout(Long unusedRoomTimeout) {
        this.unusedRoomTimeout = unusedRoomTimeout;
        return this;
    }
    
    /**
     * An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***
     */
    @SpeakeasyMetadata("form:name=VideoCodecs")
    public org.openapis.openapi.models.shared.RoomEnumVideoCodecEnum[] videoCodecs;
    public CreateRoomCreateRoomRequest withVideoCodecs(org.openapis.openapi.models.shared.RoomEnumVideoCodecEnum[] videoCodecs) {
        this.videoCodecs = videoCodecs;
        return this;
    }
    
}
