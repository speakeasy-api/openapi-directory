// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsCrashGroupOperatingSystemCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsCrashGroupOperatingSystemCountsRequest struct {
	// The maximum number of results to return. (0 will fetch all results)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the crash group.
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	Version   string `queryParam:"style=form,explode=true,name=version"`
}

// AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSON - Error
type AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSON struct {
	Error *AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSONOperatingSystems struct {
	// Count of OS.
	CrashCount *int64 `json:"crash_count,omitempty"`
	// OS name.
	OperatingSystemName *string `json:"operating_system_name,omitempty"`
}

// AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSON - Top OSes with percentage in descending order.
type AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSON struct {
	CrashCount       *int64                                                                       `json:"crash_count,omitempty"`
	OperatingSystems []AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSONOperatingSystems `json:"operating_systems,omitempty"`
}

type AnalyticsCrashGroupOperatingSystemCountsResponse struct {
	// Top OSes with percentage in descending order.
	AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSONObject *AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONObject *AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSON
	ContentType                                                          string
	StatusCode                                                           int
	RawResponse                                                          *http.Response
}
