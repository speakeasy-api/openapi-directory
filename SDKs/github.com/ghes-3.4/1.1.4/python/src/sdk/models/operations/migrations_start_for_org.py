"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import migration as shared_migration
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MigrationsStartForOrgRequestBodyExcludeEnum(str, Enum):
    REPOSITORIES = 'repositories'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MigrationsStartForOrgRequestBody:
    
    repositories: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories') }})
    r"""A list of arrays indicating which repositories should be migrated."""  
    exclude: Optional[list[MigrationsStartForOrgRequestBodyExcludeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude'), 'exclude': lambda f: f is None }})
    r"""Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\\"repositories\\"`."""  
    exclude_attachments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_attachments'), 'exclude': lambda f: f is None }})
    r"""Indicates whether attachments should be excluded from the migration (to reduce migration archive file size)."""  
    exclude_git_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_git_data'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the repository git data should be excluded from the migration."""  
    exclude_metadata: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_metadata'), 'exclude': lambda f: f is None }})
    r"""Indicates whether metadata should be excluded and only git source should be included for the migration."""  
    exclude_owner_projects: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_owner_projects'), 'exclude': lambda f: f is None }})
    r"""Indicates whether projects owned by the organization or users should be excluded. from the migration."""  
    exclude_releases: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_releases'), 'exclude': lambda f: f is None }})
    r"""Indicates whether releases should be excluded from the migration (to reduce migration archive file size)."""  
    lock_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lock_repositories'), 'exclude': lambda f: f is None }})
    r"""Indicates whether repositories should be locked (to prevent manipulation) while migrating data."""  
    org_metadata_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_metadata_only'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags)."""  
    

@dataclasses.dataclass
class MigrationsStartForOrgRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    request_body: MigrationsStartForOrgRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class MigrationsStartForOrgResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    migration: Optional[shared_migration.Migration] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    