"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PayorHierarchy:
    r"""<p>Payors that are part of the same organization can be linked together in a hierarchical fashion</p>
    <p>Payors higher up in the tree can read and write data on behalf of payors below them</p>
    <p>For example Payor A can make payouts on behalf of Payor B if Payor B is linked below Payor A</p>
    <p>Payors can not access data of payors above them in the hierarchy</p>
    <p>Contact Velo if you need to link payors in your organization</p>
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def payor_links_v1(self, request: operations.PayorLinksV1Request) -> operations.PayorLinksV1Response:
        r"""List Payor Links
        <p>If the payor is set up as part of a hierarchy you can use this API to traverse the hierarchy</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/payorLinks'
        
        query_params = utils.get_query_params(operations.PayorLinksV1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayorLinksV1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayorLinksResponse])
                res.payor_links_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    