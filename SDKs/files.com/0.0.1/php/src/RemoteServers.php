<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RemoteServers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Remote Server
     * 
     * Delete Remote Server
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRemoteServersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRemoteServersIdResponse
     */
	public function deleteRemoteServersId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRemoteServersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRemoteServersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRemoteServersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRemoteServersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Remote Servers
     * 
     * List Remote Servers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersResponse
     */
	public function getRemoteServers(
        \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRemoteServersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remoteServerEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RemoteServerEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Show Remote Server
     * 
     * Show Remote Server
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdResponse
     */
	public function getRemoteServersId(
        \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remoteServerEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoteServerEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
     * 
     * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdConfigurationFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdConfigurationFileResponse
     */
	public function getRemoteServersIdConfigurationFile(
        \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdConfigurationFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdConfigurationFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers/{id}/configuration_file', \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdConfigurationFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRemoteServersIdConfigurationFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remoteServerConfigurationFileEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoteServerConfigurationFileEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update Remote Server
     * 
     * Update Remote Server
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchRemoteServersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchRemoteServersIdResponse
     */
	public function patchRemoteServersId(
        \OpenAPI\OpenAPI\Models\Operations\PatchRemoteServersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchRemoteServersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchRemoteServersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchRemoteServersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remoteServerEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoteServerEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Create Remote Server
     * 
     * Create Remote Server
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersResponse
     */
	public function postRemoteServers(
        \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remoteServerEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoteServerEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
     * 
     * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersIdConfigurationFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersIdConfigurationFileResponse
     */
	public function postRemoteServersIdConfigurationFile(
        \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersIdConfigurationFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersIdConfigurationFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/remote_servers/{id}/configuration_file', \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersIdConfigurationFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRemoteServersIdConfigurationFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remoteServerConfigurationFileEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoteServerConfigurationFileEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}