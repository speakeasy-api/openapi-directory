<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UsageSnapshotEntity - List Usage Snapshots
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UsageSnapshotEntity
{
    /**
     * Transfer Usage for period - Outbound GB from Files Native Storage
     * 
     * @var ?float $bytesSent
     */
	#[\JMS\Serializer\Annotation\SerializedName('bytes_sent')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $bytesSent = null;
    
    /**
     * Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)
     * 
     * @var ?float $currentStorage
     */
	#[\JMS\Serializer\Annotation\SerializedName('current_storage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $currentStorage = null;
    
    /**
     * Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)
     * 
     * @var ?float $deletedFilesCountedInMinimum
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleted_files_counted_in_minimum')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $deletedFilesCountedInMinimum = null;
    
    /**
     * Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)
     * 
     * @var ?float $deletedFilesStorage
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleted_files_storage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $deletedFilesStorage = null;
    
    /**
     * Usage snapshot end date/time
     * 
     * @var ?\DateTime $endAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('end_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $endAt = null;
    
    /**
     * Highest Storage Usage GB recorded in time period (used for billing)
     * 
     * @var ?float $highWaterStorage
     */
	#[\JMS\Serializer\Annotation\SerializedName('high_water_storage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $highWaterStorage = null;
    
    /**
     * Highest user count number in time period
     * 
     * @var ?float $highWaterUserCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('high_water_user_count')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $highWaterUserCount = null;
    
    /**
     * Usage snapshot ID
     * 
     * @var ?int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $id = null;
    
    /**
     * Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)
     * 
     * @var ?float $rootStorage
     */
	#[\JMS\Serializer\Annotation\SerializedName('root_storage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $rootStorage = null;
    
    /**
     * Usage snapshot start date/time
     * 
     * @var ?\DateTime $startAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('start_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $startAt = null;
    
    /**
     * Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)
     * 
     * @var ?float $syncBytesReceived
     */
	#[\JMS\Serializer\Annotation\SerializedName('sync_bytes_received')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $syncBytesReceived = null;
    
    /**
     * Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)
     * 
     * @var ?float $syncBytesSent
     */
	#[\JMS\Serializer\Annotation\SerializedName('sync_bytes_sent')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $syncBytesSent = null;
    
    /**
     * Transfer usage for period - Total Billable amount
     * 
     * @var ?float $totalBillableTransferUsage
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_billable_transfer_usage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $totalBillableTransferUsage = null;
    
    /**
     * Storage + Transfer Usage - Total Billable amount
     * 
     * @var ?float $totalBillableUsage
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_billable_usage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $totalBillableUsage = null;
    
    /**
     * Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)
     * 
     * @var ?array<string, mixed> $usageByTopLevelDir
     */
	#[\JMS\Serializer\Annotation\SerializedName('usage_by_top_level_dir')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $usageByTopLevelDir = null;
    
	public function __construct()
	{
		$this->bytesSent = null;
		$this->currentStorage = null;
		$this->deletedFilesCountedInMinimum = null;
		$this->deletedFilesStorage = null;
		$this->endAt = null;
		$this->highWaterStorage = null;
		$this->highWaterUserCount = null;
		$this->id = null;
		$this->rootStorage = null;
		$this->startAt = null;
		$this->syncBytesReceived = null;
		$this->syncBytesSent = null;
		$this->totalBillableTransferUsage = null;
		$this->totalBillableUsage = null;
		$this->usageByTopLevelDir = null;
	}
}
