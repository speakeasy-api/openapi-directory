/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SearchProductsRequestBody {
    /**
     * **unique numeric identifier** of *this* product category to search within
     * - `categoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * - at present, it is not possible to use `catId` in conjunction with `seoId`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catId")
    public Long catId;

    public SearchProductsRequestBody withCatId(Long catId) {
        this.catId = catId;
        return this;
    }
    
    /**
     * **currency** in which to display product prices
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;

    public SearchProductsRequestBody withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the destination in which to search for products
     * - `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service
     * - use **EITHER** `destId` **OR** `seoId`, but not both
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destId")
    public Long destId;

    public SearchProductsRequestBody withDestId(Long destId) {
        this.destId = destId;
        return this;
    }
    
    /**
     * **end date delimiter** for the search (must be in the future)
     * - e.g., `'2019-10-21'`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    public String endDate;

    public SearchProductsRequestBody withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * **search restriction specifier** for products associated with an attraction uniquely identified by `seoId`
     * - use **EITHER** `destId` **OR** `seoId`, but not both
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seoId")
    public String seoId;

    public SearchProductsRequestBody withSeoId(String seoId) {
        this.seoId = seoId;
        return this;
    }
    
    /**
     * **sort order** in which to return the results that is *one of*:
     * 
     *   - `"TOP_SELLERS"`: the top sellers
     *   - `"REVIEW_AVG_RATING_A"`: ascending by average traveler rating (low -&amp;gt; high)
     *   - `"REVIEW_AVG_RATING_D"`: descending by average traveler rating (high -&amp;gt; low)
     *   - `"PRICE_FROM_A"`: ascending by price (low -&amp;gt; high)
     *   - `"PRICE_FROM_D"`: descending by price (high -&amp;gt; low) 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public SearchProductsRequestBodySortOrderEnum sortOrder;

    public SearchProductsRequestBody withSortOrder(SearchProductsRequestBodySortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * **start date delimiter** for the search (must be in the future)
     * - e.g., `'2018-10-21'`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    public String startDate;

    public SearchProductsRequestBody withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * **unique numeric identifier** of *this* product subcategory to search within
     * - `subcategoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * - at present, it is not possible to use `subCatId` in conjunction with `seoId`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subCatId")
    public Long subCatId;

    public SearchProductsRequestBody withSubCatId(Long subCatId) {
        this.subCatId = subCatId;
        return this;
    }
    
    /**
     * **start and end rows** to return in the format {start}-{end}
     * - e.g. `'1-10'`, `'11-20'`
     * 
     * **Note**: 
     * - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
     * - if `topX` is not specified, the default is `'1-100'`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topX")
    public String topX;

    public SearchProductsRequestBody withTopX(String topX) {
        this.topX = topX;
        return this;
    }
    
    public SearchProductsRequestBody(){}
}
