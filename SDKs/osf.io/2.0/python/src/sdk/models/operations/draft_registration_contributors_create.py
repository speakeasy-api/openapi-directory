"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DraftRegistrationContributorsCreateContributorAttributesPermissionEnum(str, Enum):
    r"""The permission level of the contributor. The default value is 'write'."""
    READ = 'read'
    WRITE = 'write'
    ADMIN = 'admin'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DraftRegistrationContributorsCreateContributorAttributesInput:
    r"""The properties of the contributor entity."""
    
    bibliographic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bibliographic'), 'exclude': lambda f: f is None }})
    r"""Whether or not the contributor will be included in citations for the node. The default value is true."""  
    index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index'), 'exclude': lambda f: f is None }})
    r"""The position of this contributor in the list of project contributors and in project citations."""  
    permission: Optional[DraftRegistrationContributorsCreateContributorAttributesPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""The permission level of the contributor. The default value is 'write'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DraftRegistrationContributorsCreateContributorRelationshipsInput:
    r"""URLs to other entities or entity collections that have a relationship to the contributor entity."""
    
    user: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DraftRegistrationContributorsCreateContributorInput:
    
    relationships: DraftRegistrationContributorsCreateContributorRelationshipsInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships') }})
    r"""URLs to other entities or entity collections that have a relationship to the contributor entity."""  
    attributes: Optional[DraftRegistrationContributorsCreateContributorAttributesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""The properties of the contributor entity."""  
    

@dataclasses.dataclass
class DraftRegistrationContributorsCreateRequest:
    
    draft_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'draft_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the Draft Registration."""  
    request_body: DraftRegistrationContributorsCreateContributorInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class DraftRegistrationContributorsCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    