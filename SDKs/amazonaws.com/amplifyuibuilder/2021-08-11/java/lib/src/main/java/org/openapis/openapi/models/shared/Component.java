/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Component - Contains the configuration settings for a user interface (UI) element for an Amplify app. A component is configured as a primary, stand-alone UI element. Use &lt;code&gt;ComponentChild&lt;/code&gt; to configure an instance of a &lt;code&gt;Component&lt;/code&gt;. A &lt;code&gt;ComponentChild&lt;/code&gt; instance inherits the configuration of the main &lt;code&gt;Component&lt;/code&gt;.
 */
public class Component {
    @JsonProperty("appId")
    public String appId;

    public Component withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    @JsonProperty("bindingProperties")
    public java.util.Map<String, ComponentBindingPropertiesValue> bindingProperties;

    public Component withBindingProperties(java.util.Map<String, ComponentBindingPropertiesValue> bindingProperties) {
        this.bindingProperties = bindingProperties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    public ComponentChild[] children;

    public Component withChildren(ComponentChild[] children) {
        this.children = children;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectionProperties")
    public java.util.Map<String, ComponentDataConfiguration> collectionProperties;

    public Component withCollectionProperties(java.util.Map<String, ComponentDataConfiguration> collectionProperties) {
        this.collectionProperties = collectionProperties;
        return this;
    }
    
    @JsonProperty("componentType")
    public String componentType;

    public Component withComponentType(String componentType) {
        this.componentType = componentType;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public Component withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("environmentName")
    public String environmentName;

    public Component withEnvironmentName(String environmentName) {
        this.environmentName = environmentName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    public java.util.Map<String, ComponentEvent> events;

    public Component withEvents(java.util.Map<String, ComponentEvent> events) {
        this.events = events;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public Component withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedAt")
    public OffsetDateTime modifiedAt;

    public Component withModifiedAt(OffsetDateTime modifiedAt) {
        this.modifiedAt = modifiedAt;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Component withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("overrides")
    public java.util.Map<String, java.util.Map<String, String>> overrides;

    public Component withOverrides(java.util.Map<String, java.util.Map<String, String>> overrides) {
        this.overrides = overrides;
        return this;
    }
    
    /**
     * Describes the component's properties. You can't specify &lt;code&gt;tags&lt;/code&gt; as a valid property for &lt;code&gt;properties&lt;/code&gt;.
     */
    @JsonProperty("properties")
    public Object properties;

    public Component withProperties(Object properties) {
        this.properties = properties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemaVersion")
    public String schemaVersion;

    public Component withSchemaVersion(String schemaVersion) {
        this.schemaVersion = schemaVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceId")
    public String sourceId;

    public Component withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public Component withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonProperty("variants")
    public ComponentVariant[] variants;

    public Component withVariants(ComponentVariant[] variants) {
        this.variants = variants;
        return this;
    }
    
    public Component(@JsonProperty("appId") String appId, @JsonProperty("bindingProperties") java.util.Map<String, ComponentBindingPropertiesValue> bindingProperties, @JsonProperty("componentType") String componentType, @JsonProperty("createdAt") OffsetDateTime createdAt, @JsonProperty("environmentName") String environmentName, @JsonProperty("id") String id, @JsonProperty("name") String name, @JsonProperty("overrides") java.util.Map<String, java.util.Map<String, String>> overrides, @JsonProperty("properties") Object properties, @JsonProperty("variants") ComponentVariant[] variants) {
        this.appId = appId;
        this.bindingProperties = bindingProperties;
        this.componentType = componentType;
        this.createdAt = createdAt;
        this.environmentName = environmentName;
        this.id = id;
        this.name = name;
        this.overrides = overrides;
        this.properties = properties;
        this.variants = variants;
  }
}
