/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class IssuesSetLabelsRequestBody4 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class IssuesSetLabelsRequestBody3Labels extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class IssuesSetLabelsRequestBody3 extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: IssuesSetLabelsRequestBody3Labels })
  @Expose({ name: "labels" })
  @Type(() => IssuesSetLabelsRequestBody3Labels)
  labels?: IssuesSetLabelsRequestBody3Labels[];
}

export class IssuesSetLabelsRequestBody1 extends SpeakeasyBase {
  /**
   * The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: string[];
}

export class IssuesSetLabelsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: any;

  /**
   * issue_number parameter
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=issue_number",
  })
  issueNumber: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class IssuesSetLabelsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Gone
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Label })
  labels?: shared.Label[];

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
