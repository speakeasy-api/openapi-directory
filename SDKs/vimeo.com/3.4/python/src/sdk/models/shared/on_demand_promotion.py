"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils

class OnDemandPromotionAccessTypeEnum(str, Enum):
    r"""The type of access that this promotion grants:
    
    Option descriptions:
     * `default` - Grants discounts on existing product offerings.
     * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings.
    """
    DEFAULT = 'default'
    VIP = 'vip'

class OnDemandPromotionDiscountTypeEnum(str, Enum):
    r"""The type of discount for which this promotion can be used.
    
    Option descriptions:
     * `dollars` - The discount is a certain fixed amount.
     * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.
     * `percent` - The discount is a certain percentage of the full price.
    """
    DOLLARS = 'dollars'
    FREE = 'free'
    PERCENT = 'percent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPromotionMetadataConnectionsCodes:
    r"""Information about the codes associated with this promotion."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of uses on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPromotionMetadataConnections:
    r"""A list of resource URIs related to the On Demand promotion."""
    
    codes: OnDemandPromotionMetadataConnectionsCodes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codes') }})
    r"""Information about the codes associated with this promotion."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPromotionMetadata:
    r"""The video's metadata."""
    
    connections: OnDemandPromotionMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the On Demand promotion."""  
    
class OnDemandPromotionProductTypeEnum(str, Enum):
    r"""The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:
    
    Option descriptions:
     * `any` - The promotion can be applied to any product.
     * `buy` - The promotion can be applied to a buyable single video.
     * `buy_episode` - The promotion can be applied to a buyable single episode.
     * `rent` - The promotion can be applied to a rentable single video.
     * `rent_episode` - The promotion can be applied to a rentable single episode.
     * `subscribe` - The promotion can be applied to a subscription.
    """
    ANY = 'any'
    BUY = 'buy'
    BUY_EPISODE = 'buy_episode'
    RENT = 'rent'
    RENT_EPISODE = 'rent_episode'
    SUBSCRIBE = 'subscribe'

class OnDemandPromotionStreamPeriodEnum(str, Enum):
    r"""The amount of time that the user has access to the VOD content after redeeming a promo code.
    
    Option descriptions:
     * `1_week` - Access lasts for one week.
     * `1_year` - Access lasts for one year.
     * `24_hour` - Access lasts for 24 hours.
     * `30_days` - Access lasts for 30 days.
     * `3_month` - Access lasts for 3 months.
     * `48_hour` - Access lasts for 48 hours.
     * `6_month` - Access lasts for 6 months.
     * `72_hour` - Access lasts for 72 hours.
    """
    ONE_WEEK = '1_week'
    ONE_YEAR = '1_year'
    TWENTY_FOUR_HOUR = '24_hour'
    THIRTY_DAYS = '30_days'
    THREE_MONTH = '3_month'
    FORTY_EIGHT_HOUR = '48_hour'
    SIX_MONTH = '6_month'
    SEVENTY_TWO_HOUR = '72_hour'

class OnDemandPromotionTypeEnum(str, Enum):
    r"""The way in which this promotion can generate promo codes:
    
    Option descriptions:
     * `batch` - Provides many unique promo codes that can only be used once each.
     * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.
     * `single` - Provides a single promo code with many uses.
    """
    BATCH = 'batch'
    BATCH_PREFIX = 'batch_prefix'
    SINGLE = 'single'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPromotion:
    r"""The promotions were returned."""
    
    access_type: OnDemandPromotionAccessTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_type') }})
    r"""The type of access that this promotion grants:
    
    Option descriptions:
     * `default` - Grants discounts on existing product offerings.
     * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings.
    """  
    discount_type: OnDemandPromotionDiscountTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount_type') }})
    r"""The type of discount for which this promotion can be used.
    
    Option descriptions:
     * `dollars` - The discount is a certain fixed amount.
     * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.
     * `percent` - The discount is a certain percentage of the full price.
    """  
    download: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download') }})
    r"""Whether this promotion grants download access to On Demand content."""  
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""The prefix string for batch codes, or the null value for single codes."""  
    metadata: OnDemandPromotionMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The video's metadata."""  
    percent_off: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percent_off') }})
    r"""The percentage amount that is deducted from the product price."""  
    product_type: OnDemandPromotionProductTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_type') }})
    r"""The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:
    
    Option descriptions:
     * `any` - The promotion can be applied to any product.
     * `buy` - The promotion can be applied to a buyable single video.
     * `buy_episode` - The promotion can be applied to a buyable single episode.
     * `rent` - The promotion can be applied to a rentable single video.
     * `rent_episode` - The promotion can be applied to a rentable single episode.
     * `subscribe` - The promotion can be applied to a subscription.
    """  
    stream_period: OnDemandPromotionStreamPeriodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream_period') }})
    r"""The amount of time that the user has access to the VOD content after redeeming a promo code.
    
    Option descriptions:
     * `1_week` - Access lasts for one week.
     * `1_year` - Access lasts for one year.
     * `24_hour` - Access lasts for 24 hours.
     * `30_days` - Access lasts for 30 days.
     * `3_month` - Access lasts for 3 months.
     * `48_hour` - Access lasts for 48 hours.
     * `6_month` - Access lasts for 6 months.
     * `72_hour` - Access lasts for 72 hours.
    """  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total amount of times that this promotion can be used."""  
    type: OnDemandPromotionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The way in which this promotion can generate promo codes:
    
    Option descriptions:
     * `batch` - Provides many unique promo codes that can only be used once each.
     * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.
     * `single` - Provides a single promo code with many uses.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The promotion's canonical relative URI."""  
    