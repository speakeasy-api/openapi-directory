// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// UsaGlobalAddressAddressSecondaryAbbreviationEnum - Not available for non-US addresses
type UsaGlobalAddressAddressSecondaryAbbreviationEnum string

const (
	UsaGlobalAddressAddressSecondaryAbbreviationEnumUnknown UsaGlobalAddressAddressSecondaryAbbreviationEnum = ""
)

func (e *UsaGlobalAddressAddressSecondaryAbbreviationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressAddressSecondaryAbbreviationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressAddressSecondaryAbbreviationEnum: %s", s)
	}
}

// UsaGlobalAddressBaseAlternateCodeEnum - Not available for non-US addresses
type UsaGlobalAddressBaseAlternateCodeEnum string

const (
	UsaGlobalAddressBaseAlternateCodeEnumUnknown UsaGlobalAddressBaseAlternateCodeEnum = ""
)

func (e *UsaGlobalAddressBaseAlternateCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressBaseAlternateCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressBaseAlternateCodeEnum: %s", s)
	}
}

// UsaGlobalAddressBuildingOrFirmNameEnum - Not available for non-US addresses
type UsaGlobalAddressBuildingOrFirmNameEnum string

const (
	UsaGlobalAddressBuildingOrFirmNameEnumUnknown UsaGlobalAddressBuildingOrFirmNameEnum = ""
)

func (e *UsaGlobalAddressBuildingOrFirmNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressBuildingOrFirmNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressBuildingOrFirmNameEnum: %s", s)
	}
}

// UsaGlobalAddressCarrierRouteIDEnum - Not available for non-US addresses
type UsaGlobalAddressCarrierRouteIDEnum string

const (
	UsaGlobalAddressCarrierRouteIDEnumUnknown UsaGlobalAddressCarrierRouteIDEnum = ""
)

func (e *UsaGlobalAddressCarrierRouteIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressCarrierRouteIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressCarrierRouteIDEnum: %s", s)
	}
}

// UsaGlobalAddressCarrierRouteRateSortationEnum - Not available for non-US addresses
type UsaGlobalAddressCarrierRouteRateSortationEnum string

const (
	UsaGlobalAddressCarrierRouteRateSortationEnumUnknown UsaGlobalAddressCarrierRouteRateSortationEnum = ""
)

func (e *UsaGlobalAddressCarrierRouteRateSortationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressCarrierRouteRateSortationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressCarrierRouteRateSortationEnum: %s", s)
	}
}

// UsaGlobalAddressCityStateMailingNameIndicatorEnum - Not available for non-US addresses
type UsaGlobalAddressCityStateMailingNameIndicatorEnum string

const (
	UsaGlobalAddressCityStateMailingNameIndicatorEnumUnknown UsaGlobalAddressCityStateMailingNameIndicatorEnum = ""
)

func (e *UsaGlobalAddressCityStateMailingNameIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressCityStateMailingNameIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressCityStateMailingNameIndicatorEnum: %s", s)
	}
}

// UsaGlobalAddressCityStateNameFacilityCodeEnum - Not available for non-US addresses
type UsaGlobalAddressCityStateNameFacilityCodeEnum string

const (
	UsaGlobalAddressCityStateNameFacilityCodeEnumUnknown UsaGlobalAddressCityStateNameFacilityCodeEnum = ""
)

func (e *UsaGlobalAddressCityStateNameFacilityCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressCityStateNameFacilityCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressCityStateNameFacilityCodeEnum: %s", s)
	}
}

// UsaGlobalAddressCongressionalDistrictNumberEnum - Not available for non-US addresses
type UsaGlobalAddressCongressionalDistrictNumberEnum string

const (
	UsaGlobalAddressCongressionalDistrictNumberEnumUnknown UsaGlobalAddressCongressionalDistrictNumberEnum = ""
)

func (e *UsaGlobalAddressCongressionalDistrictNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressCongressionalDistrictNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressCongressionalDistrictNumberEnum: %s", s)
	}
}

// UsaGlobalAddressCountyNumberEnum - Not available for non-US addresses
type UsaGlobalAddressCountyNumberEnum string

const (
	UsaGlobalAddressCountyNumberEnumUnknown UsaGlobalAddressCountyNumberEnum = ""
)

func (e *UsaGlobalAddressCountyNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressCountyNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressCountyNumberEnum: %s", s)
	}
}

// UsaGlobalAddressFinanceNumberEnum - Not available for non-US addresses
type UsaGlobalAddressFinanceNumberEnum string

const (
	UsaGlobalAddressFinanceNumberEnumUnknown UsaGlobalAddressFinanceNumberEnum = ""
)

func (e *UsaGlobalAddressFinanceNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressFinanceNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressFinanceNumberEnum: %s", s)
	}
}

// UsaGlobalAddressGovernmentBuildingIndicatorEnum - Not available for non-US addresses
type UsaGlobalAddressGovernmentBuildingIndicatorEnum string

const (
	UsaGlobalAddressGovernmentBuildingIndicatorEnumUnknown UsaGlobalAddressGovernmentBuildingIndicatorEnum = ""
)

func (e *UsaGlobalAddressGovernmentBuildingIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressGovernmentBuildingIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressGovernmentBuildingIndicatorEnum: %s", s)
	}
}

// UsaGlobalAddressLacsStatusIndicatorEnum - Not available for non-US addresses
type UsaGlobalAddressLacsStatusIndicatorEnum string

const (
	UsaGlobalAddressLacsStatusIndicatorEnumUnknown UsaGlobalAddressLacsStatusIndicatorEnum = ""
)

func (e *UsaGlobalAddressLacsStatusIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressLacsStatusIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressLacsStatusIndicatorEnum: %s", s)
	}
}

// UsaGlobalAddressLastLineEnum - Not available for non-US addresses
type UsaGlobalAddressLastLineEnum string

const (
	UsaGlobalAddressLastLineEnumUnknown UsaGlobalAddressLastLineEnum = ""
)

func (e *UsaGlobalAddressLastLineEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressLastLineEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressLastLineEnum: %s", s)
	}
}

// UsaGlobalAddressMunicipalityCityStateKeyEnum - Not available for non-US addresses
type UsaGlobalAddressMunicipalityCityStateKeyEnum string

const (
	UsaGlobalAddressMunicipalityCityStateKeyEnumUnknown UsaGlobalAddressMunicipalityCityStateKeyEnum = ""
)

func (e *UsaGlobalAddressMunicipalityCityStateKeyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressMunicipalityCityStateKeyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressMunicipalityCityStateKeyEnum: %s", s)
	}
}

type UsaGlobalAddressNativeType string

const (
	UsaGlobalAddressNativeTypeEcadAddress     UsaGlobalAddressNativeType = "EcadAddress"
	UsaGlobalAddressNativeTypeEcafAddress     UsaGlobalAddressNativeType = "EcafAddress"
	UsaGlobalAddressNativeTypePafAddress      UsaGlobalAddressNativeType = "PafAddress"
	UsaGlobalAddressNativeTypeMrAddress       UsaGlobalAddressNativeType = "MrAddress"
	UsaGlobalAddressNativeTypeNybAddress      UsaGlobalAddressNativeType = "NybAddress"
	UsaGlobalAddressNativeTypePafAliasAddress UsaGlobalAddressNativeType = "PafAliasAddress"
	UsaGlobalAddressNativeTypeWelshPafAddress UsaGlobalAddressNativeType = "WelshPafAddress"
)

type UsaGlobalAddressNative struct {
	EcadAddress     *EcadAddress
	EcafAddress     *EcafAddress
	PafAddress      *PafAddress
	MrAddress       *MrAddress
	NybAddress      *NybAddress
	PafAliasAddress *PafAliasAddress
	WelshPafAddress *WelshPafAddress

	Type UsaGlobalAddressNativeType
}

func CreateUsaGlobalAddressNativeEcadAddress(ecadAddress EcadAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypeEcadAddress

	return UsaGlobalAddressNative{
		EcadAddress: &ecadAddress,
		Type:        typ,
	}
}

func CreateUsaGlobalAddressNativeEcafAddress(ecafAddress EcafAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypeEcafAddress

	return UsaGlobalAddressNative{
		EcafAddress: &ecafAddress,
		Type:        typ,
	}
}

func CreateUsaGlobalAddressNativePafAddress(pafAddress PafAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypePafAddress

	return UsaGlobalAddressNative{
		PafAddress: &pafAddress,
		Type:       typ,
	}
}

func CreateUsaGlobalAddressNativeMrAddress(mrAddress MrAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypeMrAddress

	return UsaGlobalAddressNative{
		MrAddress: &mrAddress,
		Type:      typ,
	}
}

func CreateUsaGlobalAddressNativeNybAddress(nybAddress NybAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypeNybAddress

	return UsaGlobalAddressNative{
		NybAddress: &nybAddress,
		Type:       typ,
	}
}

func CreateUsaGlobalAddressNativePafAliasAddress(pafAliasAddress PafAliasAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypePafAliasAddress

	return UsaGlobalAddressNative{
		PafAliasAddress: &pafAliasAddress,
		Type:            typ,
	}
}

func CreateUsaGlobalAddressNativeWelshPafAddress(welshPafAddress WelshPafAddress) UsaGlobalAddressNative {
	typ := UsaGlobalAddressNativeTypeWelshPafAddress

	return UsaGlobalAddressNative{
		WelshPafAddress: &welshPafAddress,
		Type:            typ,
	}
}

func (u *UsaGlobalAddressNative) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	ecadAddress := new(EcadAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ecadAddress); err == nil {
		u.EcadAddress = ecadAddress
		u.Type = UsaGlobalAddressNativeTypeEcadAddress
		return nil
	}

	ecafAddress := new(EcafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ecafAddress); err == nil {
		u.EcafAddress = ecafAddress
		u.Type = UsaGlobalAddressNativeTypeEcafAddress
		return nil
	}

	pafAddress := new(PafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAddress); err == nil {
		u.PafAddress = pafAddress
		u.Type = UsaGlobalAddressNativeTypePafAddress
		return nil
	}

	mrAddress := new(MrAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mrAddress); err == nil {
		u.MrAddress = mrAddress
		u.Type = UsaGlobalAddressNativeTypeMrAddress
		return nil
	}

	nybAddress := new(NybAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nybAddress); err == nil {
		u.NybAddress = nybAddress
		u.Type = UsaGlobalAddressNativeTypeNybAddress
		return nil
	}

	pafAliasAddress := new(PafAliasAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAliasAddress); err == nil {
		u.PafAliasAddress = pafAliasAddress
		u.Type = UsaGlobalAddressNativeTypePafAliasAddress
		return nil
	}

	welshPafAddress := new(WelshPafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&welshPafAddress); err == nil {
		u.WelshPafAddress = welshPafAddress
		u.Type = UsaGlobalAddressNativeTypeWelshPafAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UsaGlobalAddressNative) MarshalJSON() ([]byte, error) {
	if u.EcadAddress != nil {
		return json.Marshal(u.EcadAddress)
	}

	if u.EcafAddress != nil {
		return json.Marshal(u.EcafAddress)
	}

	if u.PafAddress != nil {
		return json.Marshal(u.PafAddress)
	}

	if u.MrAddress != nil {
		return json.Marshal(u.MrAddress)
	}

	if u.NybAddress != nil {
		return json.Marshal(u.NybAddress)
	}

	if u.PafAliasAddress != nil {
		return json.Marshal(u.PafAliasAddress)
	}

	if u.WelshPafAddress != nil {
		return json.Marshal(u.WelshPafAddress)
	}

	return nil, nil
}

// UsaGlobalAddressPlus4CodeEnum - Not available for non-US addresses
type UsaGlobalAddressPlus4CodeEnum string

const (
	UsaGlobalAddressPlus4CodeEnumUnknown UsaGlobalAddressPlus4CodeEnum = ""
)

func (e *UsaGlobalAddressPlus4CodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressPlus4CodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressPlus4CodeEnum: %s", s)
	}
}

// UsaGlobalAddressPreferredCityEnum - Not available for non-US addresses
type UsaGlobalAddressPreferredCityEnum string

const (
	UsaGlobalAddressPreferredCityEnumUnknown UsaGlobalAddressPreferredCityEnum = ""
)

func (e *UsaGlobalAddressPreferredCityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressPreferredCityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressPreferredCityEnum: %s", s)
	}
}

// UsaGlobalAddressPreferredLastLineCityStateKeyEnum - Not available for non-US addresses
type UsaGlobalAddressPreferredLastLineCityStateKeyEnum string

const (
	UsaGlobalAddressPreferredLastLineCityStateKeyEnumUnknown UsaGlobalAddressPreferredLastLineCityStateKeyEnum = ""
)

func (e *UsaGlobalAddressPreferredLastLineCityStateKeyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressPreferredLastLineCityStateKeyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressPreferredLastLineCityStateKeyEnum: %s", s)
	}
}

// UsaGlobalAddressPrimaryNumberEnum - Not available for non-US addresses
type UsaGlobalAddressPrimaryNumberEnum string

const (
	UsaGlobalAddressPrimaryNumberEnumUnknown UsaGlobalAddressPrimaryNumberEnum = ""
)

func (e *UsaGlobalAddressPrimaryNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressPrimaryNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressPrimaryNumberEnum: %s", s)
	}
}

// UsaGlobalAddressRecordTypeCodeEnum - Not available for non-US addresses
type UsaGlobalAddressRecordTypeCodeEnum string

const (
	UsaGlobalAddressRecordTypeCodeEnumUnknown UsaGlobalAddressRecordTypeCodeEnum = ""
)

func (e *UsaGlobalAddressRecordTypeCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressRecordTypeCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressRecordTypeCodeEnum: %s", s)
	}
}

// UsaGlobalAddressSecondaryNumberEnum - Not available for non-US addresses
type UsaGlobalAddressSecondaryNumberEnum string

const (
	UsaGlobalAddressSecondaryNumberEnumUnknown UsaGlobalAddressSecondaryNumberEnum = ""
)

func (e *UsaGlobalAddressSecondaryNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressSecondaryNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressSecondaryNumberEnum: %s", s)
	}
}

// UsaGlobalAddressStreetNameEnum - Not available for non-US addresses
type UsaGlobalAddressStreetNameEnum string

const (
	UsaGlobalAddressStreetNameEnumUnknown UsaGlobalAddressStreetNameEnum = ""
)

func (e *UsaGlobalAddressStreetNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressStreetNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressStreetNameEnum: %s", s)
	}
}

// UsaGlobalAddressStreetPostDirectionalAbbreviationEnum - Not available for non-US addresses
type UsaGlobalAddressStreetPostDirectionalAbbreviationEnum string

const (
	UsaGlobalAddressStreetPostDirectionalAbbreviationEnumUnknown UsaGlobalAddressStreetPostDirectionalAbbreviationEnum = ""
)

func (e *UsaGlobalAddressStreetPostDirectionalAbbreviationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressStreetPostDirectionalAbbreviationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressStreetPostDirectionalAbbreviationEnum: %s", s)
	}
}

// UsaGlobalAddressStreetPreDirectionalAbbreviationEnum - Not available for non-US addresses
type UsaGlobalAddressStreetPreDirectionalAbbreviationEnum string

const (
	UsaGlobalAddressStreetPreDirectionalAbbreviationEnumUnknown UsaGlobalAddressStreetPreDirectionalAbbreviationEnum = ""
)

func (e *UsaGlobalAddressStreetPreDirectionalAbbreviationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressStreetPreDirectionalAbbreviationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressStreetPreDirectionalAbbreviationEnum: %s", s)
	}
}

// UsaGlobalAddressStreetSuffixAbbreviationEnum - Not available for non-US addresses
type UsaGlobalAddressStreetSuffixAbbreviationEnum string

const (
	UsaGlobalAddressStreetSuffixAbbreviationEnumUnknown UsaGlobalAddressStreetSuffixAbbreviationEnum = ""
)

func (e *UsaGlobalAddressStreetSuffixAbbreviationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressStreetSuffixAbbreviationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressStreetSuffixAbbreviationEnum: %s", s)
	}
}

// UsaGlobalAddressUpdateKeyNumberEnum - Not available for non-US addresses
type UsaGlobalAddressUpdateKeyNumberEnum string

const (
	UsaGlobalAddressUpdateKeyNumberEnumUnknown UsaGlobalAddressUpdateKeyNumberEnum = ""
)

func (e *UsaGlobalAddressUpdateKeyNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressUpdateKeyNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressUpdateKeyNumberEnum: %s", s)
	}
}

// UsaGlobalAddressUrbanizationCityStateKeyEnum - Not available for non-US addresses
type UsaGlobalAddressUrbanizationCityStateKeyEnum string

const (
	UsaGlobalAddressUrbanizationCityStateKeyEnumUnknown UsaGlobalAddressUrbanizationCityStateKeyEnum = ""
)

func (e *UsaGlobalAddressUrbanizationCityStateKeyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressUrbanizationCityStateKeyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressUrbanizationCityStateKeyEnum: %s", s)
	}
}

// UsaGlobalAddressZipClassificationCodeEnum - Not available for non-US addresses
type UsaGlobalAddressZipClassificationCodeEnum string

const (
	UsaGlobalAddressZipClassificationCodeEnumUnknown UsaGlobalAddressZipClassificationCodeEnum = ""
)

func (e *UsaGlobalAddressZipClassificationCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = UsaGlobalAddressZipClassificationCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsaGlobalAddressZipClassificationCodeEnum: %s", s)
	}
}

// UsaGlobalAddress - Global (non-US) Address in the US address format
type UsaGlobalAddress struct {
	// Not available for non-US addresses
	AddressSecondaryAbbreviation UsaGlobalAddressAddressSecondaryAbbreviationEnum `json:"address_secondary_abbreviation"`
	// Not available for non-US addresses
	BaseAlternateCode UsaGlobalAddressBaseAlternateCodeEnum `json:"base_alternate_code"`
	// Not available for non-US addresses
	BuildingOrFirmName UsaGlobalAddressBuildingOrFirmNameEnum `json:"building_or_firm_name"`
	// Not available for non-US addresses
	CarrierRouteID UsaGlobalAddressCarrierRouteIDEnum `json:"carrier_route_id"`
	// Not available for non-US addresses
	CarrierRouteRateSortation UsaGlobalAddressCarrierRouteRateSortationEnum `json:"carrier_route_rate_sortation"`
	// City name
	City string `json:"city"`
	// City name abbreviation (if available)
	CityAbbreviation string `json:"city_abbreviation"`
	// Not available for non-US addresses
	CityStateMailingNameIndicator UsaGlobalAddressCityStateMailingNameIndicatorEnum `json:"city_state_mailing_name_indicator"`
	// Not available for non-US addresses
	CityStateNameFacilityCode UsaGlobalAddressCityStateNameFacilityCodeEnum `json:"city_state_name_facility_code"`
	// Not available for non-US addresses
	CongressionalDistrictNumber UsaGlobalAddressCongressionalDistrictNumberEnum `json:"congressional_district_number"`
	//   Full country names (ISO 3166)
	//
	Country CountryEnum `json:"country"`
	//   3 letter country code (ISO 3166-1)
	//
	CountryIso CountryISOEnum `json:"country_iso"`
	//  2 letter country code (ISO 3166-1)
	//
	CountryIso2 CountryIso2Enum `json:"country_iso_2"`
	// County name
	County string `json:"county"`
	// Not available for non-US addresses
	CountyNumber UsaGlobalAddressCountyNumberEnum `json:"county_number"`
	// Indicates the provenance of an address.
	//
	//   - `paf` (GBR) Postcode Address File
	//   - `mr` (GBR) Multiple Residence File
	//   - `nyb` (GBR) Not Yet Built File
	//   - `pafa` (GBR) Alias File
	//   - `pafw` (GBR) Welsh File
	//   - `ecaf` (IRL) Eircode ECAF
	//   - `ecad` (IRL) Eircode ECAD
	//   - `usps` (USA) USPS Zip+4
	Dataset DatasetEnum `json:"dataset"`
	// Not available for non-US addresses
	FinanceNumber UsaGlobalAddressFinanceNumberEnum `json:"finance_number"`
	// Not available for non-US addresses
	GovernmentBuildingIndicator UsaGlobalAddressGovernmentBuildingIndicatorEnum `json:"government_building_indicator"`
	// Global unique internally generated identifier for an address
	ID string `json:"id"`
	// Not available for non-US addresses
	LacsStatusIndicator UsaGlobalAddressLacsStatusIndicatorEnum `json:"lacs_status_indicator"`
	// Language represented by 2 letter ISO Code (639-1)
	//
	Language LanguageEnum `json:"language"`
	// Not available for non-US addresses
	LastLine UsaGlobalAddressLastLineEnum `json:"last_line"`
	// First line of address
	Line1 string `json:"line_1"`
	// Second line of address
	Line2 string `json:"line_2"`
	// Not available for non-US addresses
	MunicipalityCityStateKey UsaGlobalAddressMunicipalityCityStateKeyEnum `json:"municipality_city_state_key"`
	// The native representation of a non-US address
	Native UsaGlobalAddressNative `json:"native"`
	// Not available for non-US addresses
	Plus4Code UsaGlobalAddressPlus4CodeEnum `json:"plus_4_code"`
	// Not available for non-US addresses
	PreferredCity UsaGlobalAddressPreferredCityEnum `json:"preferred_city"`
	// Not available for non-US addresses
	PreferredLastLineCityStateKey UsaGlobalAddressPreferredLastLineCityStateKeyEnum `json:"preferred_last_line_city_state_key"`
	// Not available for non-US addresses
	PrimaryNumber UsaGlobalAddressPrimaryNumberEnum `json:"primary_number"`
	// Not available for non-US addresses
	RecordTypeCode UsaGlobalAddressRecordTypeCodeEnum `json:"record_type_code"`
	// Not available for non-US addresses
	SecondaryNumber UsaGlobalAddressSecondaryNumberEnum `json:"secondary_number"`
	// State or province
	State string `json:"state"`
	// Code of state or province (if available)
	StateAbbreviation string `json:"state_abbreviation"`
	// Not available for non-US addresses
	StreetName UsaGlobalAddressStreetNameEnum `json:"street_name"`
	// Not available for non-US addresses
	StreetPostDirectionalAbbreviation UsaGlobalAddressStreetPostDirectionalAbbreviationEnum `json:"street_post_directional_abbreviation"`
	// Not available for non-US addresses
	StreetPreDirectionalAbbreviation UsaGlobalAddressStreetPreDirectionalAbbreviationEnum `json:"street_pre_directional_abbreviation"`
	// Not available for non-US addresses
	StreetSuffixAbbreviation UsaGlobalAddressStreetSuffixAbbreviationEnum `json:"street_suffix_abbreviation"`
	// Not available for non-US addresses
	UpdateKeyNumber UsaGlobalAddressUpdateKeyNumberEnum `json:"update_key_number"`
	// Not available for non-US addresses
	UrbanizationCityStateKey UsaGlobalAddressUrbanizationCityStateKeyEnum `json:"urbanization_city_state_key"`
	// Not available for non-US addresses
	ZipClassificationCode UsaGlobalAddressZipClassificationCodeEnum `json:"zip_classification_code"`
	// Partial postcode of address
	ZipCode string `json:"zip_code"`
	// Full postal code of address
	ZipPlus4Code string `json:"zip_plus_4_code"`
}
