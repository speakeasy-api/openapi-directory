/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Tag - Represents a Google Tag Manager Tag.
 */
public class Tag {
    /**
     * GTM Account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public Tag withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockingRuleId")
    public String[] blockingRuleId;

    public Tag withBlockingRuleId(String[] blockingRuleId) {
        this.blockingRuleId = blockingRuleId;
        return this;
    }
    
    /**
     * Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockingTriggerId")
    public String[] blockingTriggerId;

    public Tag withBlockingTriggerId(String[] blockingTriggerId) {
        this.blockingTriggerId = blockingTriggerId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consentSettings")
    public TagConsentSetting consentSettings;

    public Tag withConsentSettings(TagConsentSetting consentSettings) {
        this.consentSettings = consentSettings;
        return this;
    }
    
    /**
     * GTM Container ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerId")
    public String containerId;

    public Tag withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }
    
    /**
     * The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;

    public Tag withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firingRuleId")
    public String[] firingRuleId;

    public Tag withFiringRuleId(String[] firingRuleId) {
        this.firingRuleId = firingRuleId;
        return this;
    }
    
    /**
     * Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firingTriggerId")
    public String[] firingTriggerId;

    public Tag withFiringTriggerId(String[] firingTriggerId) {
        this.firingTriggerId = firingTriggerId;
        return this;
    }
    
    /**
     * If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liveOnly")
    public Boolean liveOnly;

    public Tag withLiveOnly(Boolean liveOnly) {
        this.liveOnly = liveOnly;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitoringMetadata")
    public Parameter monitoringMetadata;

    public Tag withMonitoringMetadata(Parameter monitoringMetadata) {
        this.monitoringMetadata = monitoringMetadata;
        return this;
    }
    
    /**
     * If non-empty, then the tag display name will be included in the monitoring metadata map using the key specified. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitoringMetadataTagNameKey")
    public String monitoringMetadataTagNameKey;

    public Tag withMonitoringMetadataTagNameKey(String monitoringMetadataTagNameKey) {
        this.monitoringMetadataTagNameKey = monitoringMetadataTagNameKey;
        return this;
    }
    
    /**
     * Tag display name. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Tag withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public Tag withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The tag's parameters. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameter")
    public Parameter[] parameter;

    public Tag withParameter(Parameter[] parameter) {
        this.parameter = parameter;
        return this;
    }
    
    /**
     * Parent folder id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentFolderId")
    public String parentFolderId;

    public Tag withParentFolderId(String parentFolderId) {
        this.parentFolderId = parentFolderId;
        return this;
    }
    
    /**
     * GTM Tag's API relative path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public Tag withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Indicates whether the tag is paused, which prevents the tag from firing. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paused")
    public Boolean paused;

    public Tag withPaused(Boolean paused) {
        this.paused = paused;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Parameter priority;

    public Tag withPriority(Parameter priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleEndMs")
    public String scheduleEndMs;

    public Tag withScheduleEndMs(String scheduleEndMs) {
        this.scheduleEndMs = scheduleEndMs;
        return this;
    }
    
    /**
     * The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleStartMs")
    public String scheduleStartMs;

    public Tag withScheduleStartMs(String scheduleStartMs) {
        this.scheduleStartMs = scheduleStartMs;
        return this;
    }
    
    /**
     * The list of setup tags. Currently we only allow one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setupTag")
    public SetupTag[] setupTag;

    public Tag withSetupTag(SetupTag[] setupTag) {
        this.setupTag = setupTag;
        return this;
    }
    
    /**
     * Option to fire this tag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagFiringOption")
    public TagTagFiringOptionEnum tagFiringOption;

    public Tag withTagFiringOption(TagTagFiringOptionEnum tagFiringOption) {
        this.tagFiringOption = tagFiringOption;
        return this;
    }
    
    /**
     * The Tag ID uniquely identifies the GTM Tag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagId")
    public String tagId;

    public Tag withTagId(String tagId) {
        this.tagId = tagId;
        return this;
    }
    
    /**
     * Auto generated link to the tag manager UI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagManagerUrl")
    public String tagManagerUrl;

    public Tag withTagManagerUrl(String tagManagerUrl) {
        this.tagManagerUrl = tagManagerUrl;
        return this;
    }
    
    /**
     * The list of teardown tags. Currently we only allow one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teardownTag")
    public TeardownTag[] teardownTag;

    public Tag withTeardownTag(TeardownTag[] teardownTag) {
        this.teardownTag = teardownTag;
        return this;
    }
    
    /**
     * GTM Tag Type. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public Tag withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * GTM Workspace ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspaceId")
    public String workspaceId;

    public Tag withWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }
    
    public Tag(){}
}
