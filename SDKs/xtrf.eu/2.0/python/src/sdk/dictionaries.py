"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Dictionaries:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_active(self) -> operations.GetActiveResponse:
        r"""Returns active dictionary entities for all types.
        Returns active dictionary entities for all types.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dictionaries/active'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManyValuesPerTypeDTO])
                res.many_values_per_type_dto = out

        return res

    def get_active_by_type(self, request: operations.GetActiveByTypeRequest) -> operations.GetActiveByTypeResponse:
        r"""Returns active values from a given dictionary.
        Returns active values from a given dictionary.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetActiveByTypeRequest, base_url, '/dictionaries/{type}/active', request)
        
        query_params = utils.get_query_params(operations.GetActiveByTypeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActiveByTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DictionaryEntity])
                res.dictionary_entity = out

        return res

    def get_all_active(self, request: operations.GetAllActiveRequest) -> operations.GetAllActiveResponse:
        r"""Returns active services list
        Returns active workflows list
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/services/active'
        
        query_params = utils.get_query_params(operations.GetAllActiveRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceDTO])
                res.service_dto = out

        return res

    def get_all_by_type(self, request: operations.GetAllByTypeRequest) -> operations.GetAllByTypeResponse:
        r"""Returns all values (both active and not active) from a given dictionary.
        Returns all values (both active and not active) from a given dictionary.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllByTypeRequest, base_url, '/dictionaries/{type}/all', request)
        
        query_params = utils.get_query_params(operations.GetAllByTypeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllByTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DictionaryEntity])
                res.dictionary_entity = out

        return res

    def get_all_1(self) -> operations.GetAll1Response:
        r"""Returns dictionary entities for all types. Both active and not active ones.
        <div>
          <p>
            XTRF holds many user-defined dictionaries (ie. countries).
            Each dictionary contains a set of values (ie. Poland or Germany).
            A default value may be defined for a dictionary.
          </p>
          <p>
            Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.
            Please note that name used in dictionary values is presented in the locale of the current identity.
            The same dictionary value can have different names, ie. \"Poland\" for one user, \"Polska\" for another one.
          </p>
          <p>
            Possible dictionary types with short explanation:
            <ul>
              <li>calculationUnit - predefined values of how to calculate the volume of work into the price</li>
              <li>category - labels to organize data on the platform</li>
              <li>country - list of countries used on the platform</li>
              <li>currency - currencies used in financial operations in the system</li>
              <li>industry - industry sectors which clients specialize in</li>
              <li>jobType - services offered by a company used in customized workflows</li>
              <li>language - list of languages and its values used on the platform</li>
              <li>leadSource - lead/recruitment places where new clients and vendors may be found</li>
              <li>personDepartment - departments in which contact person may be assigned to</li>
              <li>personPosition - positions in which user may be associated with</li>
              <li>province - states and provinces used in various documents on the platform</li>
              <li>specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military</li>
            </ul>
          </p>
        </div>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dictionaries/all'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAll1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManyValuesPerTypeDTO])
                res.many_values_per_type_dto = out

        return res

    def get_all_3(self, request: operations.GetAll3Request) -> operations.GetAll3Response:
        r"""Returns services list
        Returns workflows list. Both active and not active ones.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/services/all'
        
        query_params = utils.get_query_params(operations.GetAll3Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAll3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceDTO])
                res.service_dto = out

        return res

    def get_by_type_and_id(self, request: operations.GetByTypeAndIDRequest) -> operations.GetByTypeAndIDResponse:
        r"""Returns specific value from a given dictionary.
        Returns specific value from a given dictionary.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByTypeAndIDRequest, base_url, '/dictionaries/{type}/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByTypeAndIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DictionaryEntity])
                res.dictionary_entity = out

        return res

    