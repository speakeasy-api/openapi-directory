<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AchievementConfigurations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the achievement configuration with the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteResponse
     */
	public function gamesConfigurationAchievementConfigurationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1configuration/achievements/{achievementId}', \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves the metadata of the achievement configuration with the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetResponse
     */
	public function gamesConfigurationAchievementConfigurationsGet(
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1configuration/achievements/{achievementId}', \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert a new achievement configuration in this application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertResponse
     */
	public function gamesConfigurationAchievementConfigurationsInsert(
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1configuration/applications/{applicationId}/achievements', \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "achievementConfiguration", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of the achievement configurations in this application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListResponse
     */
	public function gamesConfigurationAchievementConfigurationsList(
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1configuration/applications/{applicationId}/achievements', \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementConfigurationListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementConfigurationListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the metadata of the achievement configuration with the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateResponse
     */
	public function gamesConfigurationAchievementConfigurationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1configuration/achievements/{achievementId}', \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "achievementConfiguration", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesConfigurationAchievementConfigurationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->achievementConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AchievementConfiguration', 'json');
            }
        }

        return $response;
    }
}