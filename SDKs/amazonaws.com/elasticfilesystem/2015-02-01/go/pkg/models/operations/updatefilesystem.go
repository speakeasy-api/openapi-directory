// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateFileSystemRequestBodyThroughputModeEnum - (Optional) Updates the file system's throughput mode. If you're not updating your throughput mode, you don't need to provide this value in your request. If you are changing the <code>ThroughputMode</code> to <code>provisioned</code>, you must also set a value for <code>ProvisionedThroughputInMibps</code>.
type UpdateFileSystemRequestBodyThroughputModeEnum string

const (
	UpdateFileSystemRequestBodyThroughputModeEnumBursting    UpdateFileSystemRequestBodyThroughputModeEnum = "bursting"
	UpdateFileSystemRequestBodyThroughputModeEnumProvisioned UpdateFileSystemRequestBodyThroughputModeEnum = "provisioned"
	UpdateFileSystemRequestBodyThroughputModeEnumElastic     UpdateFileSystemRequestBodyThroughputModeEnum = "elastic"
)

func (e UpdateFileSystemRequestBodyThroughputModeEnum) ToPointer() *UpdateFileSystemRequestBodyThroughputModeEnum {
	return &e
}

func (e *UpdateFileSystemRequestBodyThroughputModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bursting":
		fallthrough
	case "provisioned":
		fallthrough
	case "elastic":
		*e = UpdateFileSystemRequestBodyThroughputModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFileSystemRequestBodyThroughputModeEnum: %v", v)
	}
}

type UpdateFileSystemRequestBody struct {
	// (Optional) Sets the amount of provisioned throughput, in MiB/s, for the file system. Valid values are 1-1024. If you are changing the throughput mode to provisioned, you must also provide the amount of provisioned throughput. Required if <code>ThroughputMode</code> is changed to <code>provisioned</code> on update.
	ProvisionedThroughputInMibps *float64 `json:"ProvisionedThroughputInMibps,omitempty"`
	// (Optional) Updates the file system's throughput mode. If you're not updating your throughput mode, you don't need to provide this value in your request. If you are changing the <code>ThroughputMode</code> to <code>provisioned</code>, you must also set a value for <code>ProvisionedThroughputInMibps</code>.
	ThroughputMode *UpdateFileSystemRequestBodyThroughputModeEnum `json:"ThroughputMode,omitempty"`
}

type UpdateFileSystemRequest struct {
	// The ID of the file system that you want to update.
	FileSystemID      string                      `pathParam:"style=simple,explode=false,name=FileSystemId"`
	RequestBody       UpdateFileSystemRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateFileSystemResponse struct {
	// BadRequest
	BadRequest  interface{}
	ContentType string
	// Success
	FileSystemDescription *shared.FileSystemDescription
	// FileSystemNotFound
	FileSystemNotFound interface{}
	// IncorrectFileSystemLifeCycleState
	IncorrectFileSystemLifeCycleState interface{}
	// InsufficientThroughputCapacity
	InsufficientThroughputCapacity interface{}
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
	// ThroughputLimitExceeded
	ThroughputLimitExceeded interface{}
	// TooManyRequests
	TooManyRequests interface{}
}
