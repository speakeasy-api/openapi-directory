// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetFindPathwaysByTextFormatEnum
type GetFindPathwaysByTextFormatEnum string

const (
	GetFindPathwaysByTextFormatEnumJSON GetFindPathwaysByTextFormatEnum = "json"
	GetFindPathwaysByTextFormatEnumXML  GetFindPathwaysByTextFormatEnum = "xml"
	GetFindPathwaysByTextFormatEnumHTML GetFindPathwaysByTextFormatEnum = "html"
	GetFindPathwaysByTextFormatEnumDump GetFindPathwaysByTextFormatEnum = "dump"
	GetFindPathwaysByTextFormatEnumJpg  GetFindPathwaysByTextFormatEnum = "jpg"
	GetFindPathwaysByTextFormatEnumPdf  GetFindPathwaysByTextFormatEnum = "pdf"
)

func (e *GetFindPathwaysByTextFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "html":
		fallthrough
	case "dump":
		fallthrough
	case "jpg":
		fallthrough
	case "pdf":
		*e = GetFindPathwaysByTextFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFindPathwaysByTextFormatEnum: %s", s)
	}
}

type GetFindPathwaysByTextQueryParams struct {
	Format *GetFindPathwaysByTextFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// The query, e.g. 'apoptosis'
	Query string `queryParam:"style=form,explode=true,name=query"`
	// Optional, limit the query by species. Leave
	Species *string `queryParam:"style=form,explode=true,name=species"`
}

type GetFindPathwaysByTextRequest struct {
	QueryParams GetFindPathwaysByTextQueryParams
}

type GetFindPathwaysByTextResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
