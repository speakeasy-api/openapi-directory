"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeIpamPoolsResult = exports.DescribeIpamPoolsResultIpamPools = exports.DescribeIpamPoolsResultIpamPoolsTags = exports.DescribeIpamPoolsResultIpamPoolsStateEnum = exports.DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum = exports.DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum = exports.DescribeIpamPoolsResultIpamPoolsAwsServiceEnum = exports.DescribeIpamPoolsResultIpamPoolsAllocationResourceTags = exports.DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The address family of the pool.
 */
var DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum;
(function (DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum) {
    DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum["Ipv4"] = "ipv4";
    DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum["Ipv6"] = "ipv6";
})(DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum = exports.DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum || (exports.DescribeIpamPoolsResultIpamPoolsAddressFamilyEnum = {}));
/**
 * The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
 */
var DescribeIpamPoolsResultIpamPoolsAllocationResourceTags = /** @class */ (function (_super) {
    __extends(DescribeIpamPoolsResultIpamPoolsAllocationResourceTags, _super);
    function DescribeIpamPoolsResultIpamPoolsAllocationResourceTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPoolsAllocationResourceTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPoolsAllocationResourceTags.prototype, "value", void 0);
    return DescribeIpamPoolsResultIpamPoolsAllocationResourceTags;
}(utils_1.SpeakeasyBase));
exports.DescribeIpamPoolsResultIpamPoolsAllocationResourceTags = DescribeIpamPoolsResultIpamPoolsAllocationResourceTags;
/**
 * Limits which service in Amazon Web Services that the pool can be used in. "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.
 */
var DescribeIpamPoolsResultIpamPoolsAwsServiceEnum;
(function (DescribeIpamPoolsResultIpamPoolsAwsServiceEnum) {
    DescribeIpamPoolsResultIpamPoolsAwsServiceEnum["Ec2"] = "ec2";
})(DescribeIpamPoolsResultIpamPoolsAwsServiceEnum = exports.DescribeIpamPoolsResultIpamPoolsAwsServiceEnum || (exports.DescribeIpamPoolsResultIpamPoolsAwsServiceEnum = {}));
/**
 * In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.
 */
var DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum;
(function (DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum) {
    DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum["Public"] = "public";
    DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum["Private"] = "private";
})(DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum = exports.DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum || (exports.DescribeIpamPoolsResultIpamPoolsIpamScopeTypeEnum = {}));
/**
 * The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is <code>BYOIP</code>. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/intro-create-ipv6-pools.html">Create IPv6 pools</a> in the <i>Amazon VPC IPAM User Guide</i>. By default, you can add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool. For information on increasing the default limit, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html"> Quotas for your IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum;
(function (DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum) {
    DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum["Amazon"] = "amazon";
    DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum["Byoip"] = "byoip";
})(DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum = exports.DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum || (exports.DescribeIpamPoolsResultIpamPoolsPublicIpSourceEnum = {}));
/**
 * The state of the IPAM pool.
 */
var DescribeIpamPoolsResultIpamPoolsStateEnum;
(function (DescribeIpamPoolsResultIpamPoolsStateEnum) {
    DescribeIpamPoolsResultIpamPoolsStateEnum["CreateInProgress"] = "create-in-progress";
    DescribeIpamPoolsResultIpamPoolsStateEnum["CreateComplete"] = "create-complete";
    DescribeIpamPoolsResultIpamPoolsStateEnum["CreateFailed"] = "create-failed";
    DescribeIpamPoolsResultIpamPoolsStateEnum["ModifyInProgress"] = "modify-in-progress";
    DescribeIpamPoolsResultIpamPoolsStateEnum["ModifyComplete"] = "modify-complete";
    DescribeIpamPoolsResultIpamPoolsStateEnum["ModifyFailed"] = "modify-failed";
    DescribeIpamPoolsResultIpamPoolsStateEnum["DeleteInProgress"] = "delete-in-progress";
    DescribeIpamPoolsResultIpamPoolsStateEnum["DeleteComplete"] = "delete-complete";
    DescribeIpamPoolsResultIpamPoolsStateEnum["DeleteFailed"] = "delete-failed";
    DescribeIpamPoolsResultIpamPoolsStateEnum["IsolateInProgress"] = "isolate-in-progress";
    DescribeIpamPoolsResultIpamPoolsStateEnum["IsolateComplete"] = "isolate-complete";
    DescribeIpamPoolsResultIpamPoolsStateEnum["RestoreInProgress"] = "restore-in-progress";
})(DescribeIpamPoolsResultIpamPoolsStateEnum = exports.DescribeIpamPoolsResultIpamPoolsStateEnum || (exports.DescribeIpamPoolsResultIpamPoolsStateEnum = {}));
/**
 * Describes a tag.
 */
var DescribeIpamPoolsResultIpamPoolsTags = /** @class */ (function (_super) {
    __extends(DescribeIpamPoolsResultIpamPoolsTags, _super);
    function DescribeIpamPoolsResultIpamPoolsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPoolsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPoolsTags.prototype, "value", void 0);
    return DescribeIpamPoolsResultIpamPoolsTags;
}(utils_1.SpeakeasyBase));
exports.DescribeIpamPoolsResultIpamPoolsTags = DescribeIpamPoolsResultIpamPoolsTags;
/**
 * In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each.
 */
var DescribeIpamPoolsResultIpamPools = /** @class */ (function (_super) {
    __extends(DescribeIpamPoolsResultIpamPools, _super);
    function DescribeIpamPoolsResultIpamPools() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "addressFamily", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeIpamPoolsResultIpamPools.prototype, "allocationDefaultNetmaskLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeIpamPoolsResultIpamPools.prototype, "allocationMaxNetmaskLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeIpamPoolsResultIpamPools.prototype, "allocationMinNetmaskLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeIpamPoolsResultIpamPoolsAllocationResourceTags,
        }),
        __metadata("design:type", Array)
    ], DescribeIpamPoolsResultIpamPools.prototype, "allocationResourceTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeIpamPoolsResultIpamPools.prototype, "autoImport", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "awsService", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ipamArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ipamPoolArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ipamPoolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ipamRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ipamScopeArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ipamScopeType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "locale", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeIpamPoolsResultIpamPools.prototype, "poolDepth", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "publicIpSource", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeIpamPoolsResultIpamPools.prototype, "publiclyAdvertisable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "sourceIpamPoolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResultIpamPools.prototype, "stateMessage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeIpamPoolsResultIpamPoolsTags }),
        __metadata("design:type", Array)
    ], DescribeIpamPoolsResultIpamPools.prototype, "tags", void 0);
    return DescribeIpamPoolsResultIpamPools;
}(utils_1.SpeakeasyBase));
exports.DescribeIpamPoolsResultIpamPools = DescribeIpamPoolsResultIpamPools;
/**
 * Success
 */
var DescribeIpamPoolsResult = /** @class */ (function (_super) {
    __extends(DescribeIpamPoolsResult, _super);
    function DescribeIpamPoolsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeIpamPoolsResultIpamPools }),
        __metadata("design:type", Array)
    ], DescribeIpamPoolsResult.prototype, "ipamPools", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeIpamPoolsResult.prototype, "nextToken", void 0);
    return DescribeIpamPoolsResult;
}(utils_1.SpeakeasyBase));
exports.DescribeIpamPoolsResult = DescribeIpamPoolsResult;
