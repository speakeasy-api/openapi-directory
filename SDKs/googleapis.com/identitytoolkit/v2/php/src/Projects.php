<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Initialize Identity Platform for a Cloud project. Identity Platform is an end-to-end authentication system for third-party users to access your apps and services. These could include mobile/web apps, games, APIs and beyond. This is the publicly available variant of EnableIdentityPlatform that is only available to billing-enabled projects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse
     */
	public function identitytoolkitProjectsIdentityPlatformInitializeAuth(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{project}/identityPlatform:initializeAuth', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a tenant. Requires write permission on the Agent project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateResponse
     */
	public function identitytoolkitProjectsTenantsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/tenants', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitAdminV2TenantInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2Tenant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2Tenant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a default supported Idp configuration for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse
     */
	public function identitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/defaultSupportedIdpConfigs', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all default supported Idp configurations for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse
     */
	public function identitytoolkitProjectsTenantsDefaultSupportedIdpConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/defaultSupportedIdpConfigs', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. An error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Caller must have the right Google IAM permission on the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyResponse
     */
	public function identitytoolkitProjectsTenantsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1GetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an inbound SAML configuration for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse
     */
	public function identitytoolkitProjectsTenantsInboundSamlConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/inboundSamlConfigs', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitAdminV2InboundSamlConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2InboundSamlConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all inbound SAML configurations for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse
     */
	public function identitytoolkitProjectsTenantsInboundSamlConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/inboundSamlConfigs', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List tenants under the given agent project. Requires read permission on the Agent project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListResponse
     */
	public function identitytoolkitProjectsTenantsList(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/tenants', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2ListTenantsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2ListTenantsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an Oidc Idp configuration for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse
     */
	public function identitytoolkitProjectsTenantsOauthIdpConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/oauthIdpConfigs', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitAdminV2OAuthIdpConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2OAuthIdpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an Oidc Idp configuration for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse
     */
	public function identitytoolkitProjectsTenantsOauthIdpConfigsDelete(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an Oidc Idp configuration for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse
     */
	public function identitytoolkitProjectsTenantsOauthIdpConfigsGet(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2OAuthIdpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Oidc Idp configurations for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse
     */
	public function identitytoolkitProjectsTenantsOauthIdpConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/oauthIdpConfigs', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Oidc Idp configuration for an Identity Toolkit project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse
     */
	public function identitytoolkitProjectsTenantsOauthIdpConfigsPatch(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitAdminV2OAuthIdpConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitAdminV2OAuthIdpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy for a resource. If the policy exists, it is replaced. Caller must have the right Google IAM permission on the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyResponse
     */
	public function identitytoolkitProjectsTenantsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the caller's permissions on a resource. An error is returned if the resource does not exist. A caller is not required to have Google IAM permission to make this request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsResponse
     */
	public function identitytoolkitProjectsTenantsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitProjectsTenantsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}