// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CellFormatHorizontalAlignmentEnum - The horizontal alignment of the value in the cell.
type CellFormatHorizontalAlignmentEnum string

const (
	CellFormatHorizontalAlignmentEnumHorizontalAlignUnspecified CellFormatHorizontalAlignmentEnum = "HORIZONTAL_ALIGN_UNSPECIFIED"
	CellFormatHorizontalAlignmentEnumLeft                       CellFormatHorizontalAlignmentEnum = "LEFT"
	CellFormatHorizontalAlignmentEnumCenter                     CellFormatHorizontalAlignmentEnum = "CENTER"
	CellFormatHorizontalAlignmentEnumRight                      CellFormatHorizontalAlignmentEnum = "RIGHT"
)

func (e *CellFormatHorizontalAlignmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HORIZONTAL_ALIGN_UNSPECIFIED":
		fallthrough
	case "LEFT":
		fallthrough
	case "CENTER":
		fallthrough
	case "RIGHT":
		*e = CellFormatHorizontalAlignmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CellFormatHorizontalAlignmentEnum: %s", s)
	}
}

// CellFormatHyperlinkDisplayTypeEnum - If one exists, how a hyperlink should be displayed in the cell.
type CellFormatHyperlinkDisplayTypeEnum string

const (
	CellFormatHyperlinkDisplayTypeEnumHyperlinkDisplayTypeUnspecified CellFormatHyperlinkDisplayTypeEnum = "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED"
	CellFormatHyperlinkDisplayTypeEnumLinked                          CellFormatHyperlinkDisplayTypeEnum = "LINKED"
	CellFormatHyperlinkDisplayTypeEnumPlainText                       CellFormatHyperlinkDisplayTypeEnum = "PLAIN_TEXT"
)

func (e *CellFormatHyperlinkDisplayTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED":
		fallthrough
	case "LINKED":
		fallthrough
	case "PLAIN_TEXT":
		*e = CellFormatHyperlinkDisplayTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CellFormatHyperlinkDisplayTypeEnum: %s", s)
	}
}

// CellFormatTextDirectionEnum - The direction of the text in the cell.
type CellFormatTextDirectionEnum string

const (
	CellFormatTextDirectionEnumTextDirectionUnspecified CellFormatTextDirectionEnum = "TEXT_DIRECTION_UNSPECIFIED"
	CellFormatTextDirectionEnumLeftToRight              CellFormatTextDirectionEnum = "LEFT_TO_RIGHT"
	CellFormatTextDirectionEnumRightToLeft              CellFormatTextDirectionEnum = "RIGHT_TO_LEFT"
)

func (e *CellFormatTextDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TEXT_DIRECTION_UNSPECIFIED":
		fallthrough
	case "LEFT_TO_RIGHT":
		fallthrough
	case "RIGHT_TO_LEFT":
		*e = CellFormatTextDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CellFormatTextDirectionEnum: %s", s)
	}
}

// CellFormatVerticalAlignmentEnum - The vertical alignment of the value in the cell.
type CellFormatVerticalAlignmentEnum string

const (
	CellFormatVerticalAlignmentEnumVerticalAlignUnspecified CellFormatVerticalAlignmentEnum = "VERTICAL_ALIGN_UNSPECIFIED"
	CellFormatVerticalAlignmentEnumTop                      CellFormatVerticalAlignmentEnum = "TOP"
	CellFormatVerticalAlignmentEnumMiddle                   CellFormatVerticalAlignmentEnum = "MIDDLE"
	CellFormatVerticalAlignmentEnumBottom                   CellFormatVerticalAlignmentEnum = "BOTTOM"
)

func (e *CellFormatVerticalAlignmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VERTICAL_ALIGN_UNSPECIFIED":
		fallthrough
	case "TOP":
		fallthrough
	case "MIDDLE":
		fallthrough
	case "BOTTOM":
		*e = CellFormatVerticalAlignmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CellFormatVerticalAlignmentEnum: %s", s)
	}
}

// CellFormatWrapStrategyEnum - The wrap strategy for the value in the cell.
type CellFormatWrapStrategyEnum string

const (
	CellFormatWrapStrategyEnumWrapStrategyUnspecified CellFormatWrapStrategyEnum = "WRAP_STRATEGY_UNSPECIFIED"
	CellFormatWrapStrategyEnumOverflowCell            CellFormatWrapStrategyEnum = "OVERFLOW_CELL"
	CellFormatWrapStrategyEnumLegacyWrap              CellFormatWrapStrategyEnum = "LEGACY_WRAP"
	CellFormatWrapStrategyEnumClip                    CellFormatWrapStrategyEnum = "CLIP"
	CellFormatWrapStrategyEnumWrap                    CellFormatWrapStrategyEnum = "WRAP"
)

func (e *CellFormatWrapStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WRAP_STRATEGY_UNSPECIFIED":
		fallthrough
	case "OVERFLOW_CELL":
		fallthrough
	case "LEGACY_WRAP":
		fallthrough
	case "CLIP":
		fallthrough
	case "WRAP":
		*e = CellFormatWrapStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CellFormatWrapStrategyEnum: %s", s)
	}
}

// CellFormat - The format of a cell.
type CellFormat struct {
	// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
	BackgroundColor *Color `json:"backgroundColor,omitempty"`
	// A color value.
	BackgroundColorStyle *ColorStyle `json:"backgroundColorStyle,omitempty"`
	// The borders of the cell.
	Borders *Borders `json:"borders,omitempty"`
	// The horizontal alignment of the value in the cell.
	HorizontalAlignment *CellFormatHorizontalAlignmentEnum `json:"horizontalAlignment,omitempty"`
	// If one exists, how a hyperlink should be displayed in the cell.
	HyperlinkDisplayType *CellFormatHyperlinkDisplayTypeEnum `json:"hyperlinkDisplayType,omitempty"`
	// The number format of a cell.
	NumberFormat *NumberFormat `json:"numberFormat,omitempty"`
	// The amount of padding around the cell, in pixels. When updating padding, every field must be specified.
	Padding *Padding `json:"padding,omitempty"`
	// The direction of the text in the cell.
	TextDirection *CellFormatTextDirectionEnum `json:"textDirection,omitempty"`
	// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
	TextFormat *TextFormat `json:"textFormat,omitempty"`
	// The rotation applied to text in a cell.
	TextRotation *TextRotation `json:"textRotation,omitempty"`
	// The vertical alignment of the value in the cell.
	VerticalAlignment *CellFormatVerticalAlignmentEnum `json:"verticalAlignment,omitempty"`
	// The wrap strategy for the value in the cell.
	WrapStrategy *CellFormatWrapStrategyEnum `json:"wrapStrategy,omitempty"`
}
