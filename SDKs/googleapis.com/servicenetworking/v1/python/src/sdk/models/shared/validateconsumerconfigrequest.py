"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import consumerproject as shared_consumerproject
from ..shared import rangereservation as shared_rangereservation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidateConsumerConfigRequest:
    
    check_service_networking_use_permission: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkServiceNetworkingUsePermission'), 'exclude': lambda f: f is None }})
    r"""Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not."""  
    consumer_network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerNetwork'), 'exclude': lambda f: f is None }})
    r"""Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name."""  
    consumer_project: Optional[shared_consumerproject.ConsumerProject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerProject'), 'exclude': lambda f: f is None }})
    r"""Represents a consumer project."""  
    range_reservation: Optional[shared_rangereservation.RangeReservation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeReservation'), 'exclude': lambda f: f is None }})
    r"""Represents a range reservation."""  
    validate_network: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validateNetwork'), 'exclude': lambda f: f is None }})
    r"""The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true."""  
    