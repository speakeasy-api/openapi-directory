/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderLineItem - Represents a line item in an order. Each line item describes a different
 * product to purchase, with its own quantity and price details.
 */
public class OrderLineItem {
    /**
     * The list of references to discounts applied to this line item. Each
     * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
     * `OrderLineItemDiscounts` applied to the line item. On reads, the amount
     * applied is populated.
     * 
     * An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
     * `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
     * for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
     * line items.
     * 
     * To change the amount of a discount, modify the referenced top-level discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_discounts")
    public OrderLineItemAppliedDiscount[] appliedDiscounts;
    public OrderLineItem withAppliedDiscounts(OrderLineItemAppliedDiscount[] appliedDiscounts) {
        this.appliedDiscounts = appliedDiscounts;
        return this;
    }
    
    /**
     * The list of references to taxes applied to this line item. Each
     * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
     * top-level `OrderLineItemTax` applied to the line item. On reads, the
     * amount applied is populated.
     * 
     * An `OrderLineItemAppliedTax` is automatically created on every line
     * item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
     * records for `LINE_ITEM` scoped taxes must be added in requests for the tax
     * to apply to any line items.
     * 
     * To change the amount of a tax, modify the referenced top-level tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_taxes")
    public OrderLineItemAppliedTax[] appliedTaxes;
    public OrderLineItem withAppliedTaxes(OrderLineItemAppliedTax[] appliedTaxes) {
        this.appliedTaxes = appliedTaxes;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_price_money")
    public Money basePriceMoney;
    public OrderLineItem withBasePriceMoney(Money basePriceMoney) {
        this.basePriceMoney = basePriceMoney;
        return this;
    }
    
    /**
     * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_object_id")
    public String catalogObjectId;
    public OrderLineItem withCatalogObjectId(String catalogObjectId) {
        this.catalogObjectId = catalogObjectId;
        return this;
    }
    
    /**
     * The version of the catalog object that this line item references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_version")
    public Long catalogVersion;
    public OrderLineItem withCatalogVersion(Long catalogVersion) {
        this.catalogVersion = catalogVersion;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_sales_money")
    public Money grossSalesMoney;
    public OrderLineItem withGrossSalesMoney(Money grossSalesMoney) {
        this.grossSalesMoney = grossSalesMoney;
        return this;
    }
    
    /**
     * The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
     * activation or reloading of a gift card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_type")
    public String itemType;
    public OrderLineItem withItemType(String itemType) {
        this.itemType = itemType;
        return this;
    }
    
    /**
     * Application-defined data attached to this line item. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public OrderLineItem withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiers")
    public OrderLineItemModifier[] modifiers;
    public OrderLineItem withModifiers(OrderLineItemModifier[] modifiers) {
        this.modifiers = modifiers;
        return this;
    }
    
    /**
     * The name of the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrderLineItem withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The note of the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;
    public OrderLineItem withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Describes pricing adjustments that are blocked from manual and 
     * automatic application to a line item. For more information, see 
     * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_blocklists")
    public OrderLineItemPricingBlocklists pricingBlocklists;
    public OrderLineItem withPricingBlocklists(OrderLineItemPricingBlocklists pricingBlocklists) {
        this.pricingBlocklists = pricingBlocklists;
        return this;
    }
    
    /**
     * The quantity purchased, formatted as a decimal number.
     * For example, `"3"`.
     * 
     * Line items with a quantity of `"0"` are automatically removed
     * when paying for or otherwise completing the order.
     * 
     * Line items with a `quantity_unit` can have non-integer quantities.
     * For example, `"1.70000"`.
     */
    @JsonProperty("quantity")
    public String quantity;
    public OrderLineItem withQuantity(String quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Contains the measurement unit for a quantity and a precision that
     * specifies the number of digits after the decimal point for decimal quantities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity_unit")
    public OrderQuantityUnit quantityUnit;
    public OrderLineItem withQuantityUnit(OrderQuantityUnit quantityUnit) {
        this.quantityUnit = quantityUnit;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount_money")
    public Money totalDiscountMoney;
    public OrderLineItem withTotalDiscountMoney(Money totalDiscountMoney) {
        this.totalDiscountMoney = totalDiscountMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public Money totalMoney;
    public OrderLineItem withTotalMoney(Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_money")
    public Money totalTaxMoney;
    public OrderLineItem withTotalTaxMoney(Money totalTaxMoney) {
        this.totalTaxMoney = totalTaxMoney;
        return this;
    }
    
    /**
     * A unique ID that identifies the line item only within this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public OrderLineItem withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * The name of the variation applied to this line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variation_name")
    public String variationName;
    public OrderLineItem withVariationName(String variationName) {
        this.variationName = variationName;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variation_total_price_money")
    public Money variationTotalPriceMoney;
    public OrderLineItem withVariationTotalPriceMoney(Money variationTotalPriceMoney) {
        this.variationTotalPriceMoney = variationTotalPriceMoney;
        return this;
    }
    
}
