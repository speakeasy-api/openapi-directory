<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UpdateGeneralSettings - Request model for updating general settings
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UpdateGeneralSettings
{
    /**
     * Request model for updating auth token settings
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UpdateAuthTokenRestrictions $authTokenRestrictions
     */
	#[\JMS\Serializer\Annotation\SerializedName('authTokenRestrictions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\UpdateAuthTokenRestrictions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateAuthTokenRestrictions $authTokenRestrictions = null;
    
    /**
     * Activation status of client-side encryption.
     * 
     * 
     * Can only be enabled once; disabling is not possible.
     * 
     * @var ?bool $cryptoEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('cryptoEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $cryptoEnabled = null;
    
    /**
     * Enable email notification button
     * 
     * @var ?bool $emailNotificationButtonEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailNotificationButtonEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailNotificationButtonEnabled = null;
    
    /**
     * Each user has to confirm the EULA at first login.
     * 
     * @var ?bool $eulaEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('eulaEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $eulaEnabled = null;
    
    /**
     * &#128679; Deprecated since v4.13.0
     * 
     * 
     * Defines if login fields should be hidden
     * 
     * @var ?bool $hideLoginInputFields
     */
	#[\JMS\Serializer\Annotation\SerializedName('hideLoginInputFields')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hideLoginInputFields = null;
    
    /**
     * &#128679; Deprecated since v4.12.0
     * 
     * 
     * Determines if the media server is enabled
     * 
     * @var ?bool $mediaServerEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('mediaServerEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $mediaServerEnabled = null;
    
    /**
     * &#128640; Since v4.9.0
     * 
     * 
     * Defines if S3 tags are enabled
     * 
     * @var ?bool $s3TagsEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('s3TagsEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $s3TagsEnabled = null;
    
    /**
     * Allow sending of share passwords via SMS
     * 
     * @var ?bool $sharePasswordSmsEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('sharePasswordSmsEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $sharePasswordSmsEnabled = null;
    
    /**
     * &#128679; Deprecated since v4.14.0
     * 
     * 
     * Allow weak password
     * 
     * * A weak password has to fulfill the following criteria:
     * 
     *    * is at least 8 characters long
     * 
     *    * contains letters and numbers
     * 
     * * A strong password has to fulfill the following criteria in addition:
     * 
     *    * contains at least one special character
     * 
     *    * contains upper and lower case characters
     * 
     * Please use `PUT /system/config/policies/passwords` API to change configured password policies.
     * 
     * @var ?bool $weakPasswordEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('weakPasswordEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $weakPasswordEnabled = null;
    
	public function __construct()
	{
		$this->authTokenRestrictions = null;
		$this->cryptoEnabled = null;
		$this->emailNotificationButtonEnabled = null;
		$this->eulaEnabled = null;
		$this->hideLoginInputFields = null;
		$this->mediaServerEnabled = null;
		$this->s3TagsEnabled = null;
		$this->sharePasswordSmsEnabled = null;
		$this->weakPasswordEnabled = null;
	}
}
