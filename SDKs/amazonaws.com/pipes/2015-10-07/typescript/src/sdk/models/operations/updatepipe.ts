/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The state the pipe should be in.
 */
export enum UpdatePipeRequestBodyDesiredStateEnum {
  Running = "RUNNING",
  Stopped = "STOPPED",
}

/**
 * The parameters required to set up enrichment on your pipe.
 */
export class UpdatePipeRequestBodyEnrichmentParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "HttpParameters" })
  @Type(() => shared.PipeEnrichmentHttpParameters)
  httpParameters?: shared.PipeEnrichmentHttpParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "InputTemplate" })
  inputTemplate?: string;
}

/**
 * The parameters required to set up a source for your pipe.
 */
export class UpdatePipeRequestBodySourceParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ActiveMQBrokerParameters" })
  @Type(() => shared.UpdatePipeSourceActiveMQBrokerParameters)
  activeMQBrokerParameters?: shared.UpdatePipeSourceActiveMQBrokerParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "DynamoDBStreamParameters" })
  @Type(() => shared.UpdatePipeSourceDynamoDBStreamParameters)
  dynamoDBStreamParameters?: shared.UpdatePipeSourceDynamoDBStreamParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "FilterCriteria" })
  @Type(() => shared.FilterCriteria)
  filterCriteria?: shared.FilterCriteria;

  @SpeakeasyMetadata()
  @Expose({ name: "KinesisStreamParameters" })
  @Type(() => shared.UpdatePipeSourceKinesisStreamParameters)
  kinesisStreamParameters?: shared.UpdatePipeSourceKinesisStreamParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "ManagedStreamingKafkaParameters" })
  @Type(() => shared.UpdatePipeSourceManagedStreamingKafkaParameters)
  managedStreamingKafkaParameters?: shared.UpdatePipeSourceManagedStreamingKafkaParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "RabbitMQBrokerParameters" })
  @Type(() => shared.UpdatePipeSourceRabbitMQBrokerParameters)
  rabbitMQBrokerParameters?: shared.UpdatePipeSourceRabbitMQBrokerParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "SelfManagedKafkaParameters" })
  @Type(() => shared.UpdatePipeSourceSelfManagedKafkaParameters)
  selfManagedKafkaParameters?: shared.UpdatePipeSourceSelfManagedKafkaParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "SqsQueueParameters" })
  @Type(() => shared.UpdatePipeSourceSqsQueueParameters)
  sqsQueueParameters?: shared.UpdatePipeSourceSqsQueueParameters;
}

/**
 * The parameters required to set up a target for your pipe.
 */
export class UpdatePipeRequestBodyTargetParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BatchJobParameters" })
  @Type(() => shared.PipeTargetBatchJobParameters)
  batchJobParameters?: shared.PipeTargetBatchJobParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchLogsParameters" })
  @Type(() => shared.PipeTargetCloudWatchLogsParameters)
  cloudWatchLogsParameters?: shared.PipeTargetCloudWatchLogsParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "EcsTaskParameters" })
  @Type(() => shared.PipeTargetEcsTaskParameters)
  ecsTaskParameters?: shared.PipeTargetEcsTaskParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "EventBridgeEventBusParameters" })
  @Type(() => shared.PipeTargetEventBridgeEventBusParameters)
  eventBridgeEventBusParameters?: shared.PipeTargetEventBridgeEventBusParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "HttpParameters" })
  @Type(() => shared.PipeTargetHttpParameters)
  httpParameters?: shared.PipeTargetHttpParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "InputTemplate" })
  inputTemplate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KinesisStreamParameters" })
  @Type(() => shared.PipeTargetKinesisStreamParameters)
  kinesisStreamParameters?: shared.PipeTargetKinesisStreamParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "LambdaFunctionParameters" })
  @Type(() => shared.PipeTargetLambdaFunctionParameters)
  lambdaFunctionParameters?: shared.PipeTargetLambdaFunctionParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftDataParameters" })
  @Type(() => shared.PipeTargetRedshiftDataParameters)
  redshiftDataParameters?: shared.PipeTargetRedshiftDataParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "SageMakerPipelineParameters" })
  @Type(() => shared.PipeTargetSageMakerPipelineParameters)
  sageMakerPipelineParameters?: shared.PipeTargetSageMakerPipelineParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "SqsQueueParameters" })
  @Type(() => shared.PipeTargetSqsQueueParameters)
  sqsQueueParameters?: shared.PipeTargetSqsQueueParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "StepFunctionStateMachineParameters" })
  @Type(() => shared.PipeTargetStateMachineParameters)
  stepFunctionStateMachineParameters?: shared.PipeTargetStateMachineParameters;
}

export class UpdatePipeRequestBody extends SpeakeasyBase {
  /**
   * A description of the pipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * The state the pipe should be in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DesiredState" })
  desiredState?: UpdatePipeRequestBodyDesiredStateEnum;

  /**
   * The ARN of the enrichment resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Enrichment" })
  enrichment?: string;

  /**
   * The parameters required to set up enrichment on your pipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EnrichmentParameters" })
  @Type(() => UpdatePipeRequestBodyEnrichmentParameters)
  enrichmentParameters?: UpdatePipeRequestBodyEnrichmentParameters;

  /**
   * The ARN of the role that allows the pipe to send data to the target.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RoleArn" })
  roleArn: string;

  /**
   * The parameters required to set up a source for your pipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SourceParameters" })
  @Type(() => UpdatePipeRequestBodySourceParameters)
  sourceParameters?: UpdatePipeRequestBodySourceParameters;

  /**
   * The ARN of the target resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Target" })
  target?: string;

  /**
   * The parameters required to set up a target for your pipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TargetParameters" })
  @Type(() => UpdatePipeRequestBodyTargetParameters)
  targetParameters?: UpdatePipeRequestBodyTargetParameters;
}

export class UpdatePipeRequest extends SpeakeasyBase {
  /**
   * The name of the pipe.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=Name",
  })
  name: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdatePipeRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdatePipeResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updatePipeResponse?: shared.UpdatePipeResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
