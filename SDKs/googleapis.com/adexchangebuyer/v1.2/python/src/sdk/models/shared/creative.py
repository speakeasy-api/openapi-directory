"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeCorrections:
    
    details: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Additional details about the correction."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The type of correction that was applied to the creative."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeDisapprovalReasons:
    
    details: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Additional details about the reason for disapproval."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The categorized reason for disapproval."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeFilteringReasonsReasons:
    
    filtering_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filteringCount'), 'exclude': lambda f: f is None }})
    r"""The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange."""  
    filtering_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filteringStatus'), 'exclude': lambda f: f is None }})
    r"""The filtering status code. Please refer to the creative-status-codes.txt file for different statuses."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeFilteringReasons:
    r"""The filtering reasons for the creative. Read-only. This field should not be set in requests."""
    
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST."""  
    reasons: Optional[list[CreativeFilteringReasonsReasons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasons'), 'exclude': lambda f: f is None }})
    r"""The filtering reasons."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Creative:
    r"""A creative and its classification data."""
    
    account_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account id."""  
    advertiser_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Detected advertiser id, if any. Read-only. This field should not be set in requests."""  
    advertiser_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserName'), 'exclude': lambda f: f is None }})
    r"""The name of the company being advertised in the creative."""  
    agency_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agencyId'), 'exclude': lambda f: f is None }})
    r"""The agency id for this creative."""  
    api_upload_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiUploadTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp)."""  
    attribute: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute'), 'exclude': lambda f: f is None }})
    r"""All attributes for the ads that may be shown from this snippet."""  
    buyer_creative_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyerCreativeId'), 'exclude': lambda f: f is None }})
    r"""A buyer-specific id identifying the creative in this ad."""  
    click_through_url: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickThroughUrl'), 'exclude': lambda f: f is None }})
    r"""The set of destination urls for the snippet."""  
    corrections: Optional[list[CreativeCorrections]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corrections'), 'exclude': lambda f: f is None }})
    r"""Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests."""  
    disapproval_reasons: Optional[list[CreativeDisapprovalReasons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disapprovalReasons'), 'exclude': lambda f: f is None }})
    r"""The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests."""  
    filtering_reasons: Optional[CreativeFilteringReasons] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filteringReasons'), 'exclude': lambda f: f is None }})
    r"""The filtering reasons for the creative. Read-only. This field should not be set in requests."""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Ad height."""  
    html_snippet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HTMLSnippet'), 'exclude': lambda f: f is None }})
    r"""The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set."""  
    impression_tracking_url: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionTrackingUrl'), 'exclude': lambda f: f is None }})
    r"""The set of urls to be called to record an impression."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type."""  
    product_categories: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCategories'), 'exclude': lambda f: f is None }})
    r"""Detected product categories, if any. Read-only. This field should not be set in requests."""  
    restricted_categories: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictedCategories'), 'exclude': lambda f: f is None }})
    r"""All restricted categories for the ads that may be shown from this snippet."""  
    sensitive_categories: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitiveCategories'), 'exclude': lambda f: f is None }})
    r"""Detected sensitive categories, if any. Read-only. This field should not be set in requests."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Creative serving status. Read-only. This field should not be set in requests."""  
    vendor_type: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorType'), 'exclude': lambda f: f is None }})
    r"""All vendor types for the ads that may be shown from this snippet."""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version for this creative. Read-only. This field should not be set in requests."""  
    video_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoURL'), 'exclude': lambda f: f is None }})
    r"""The url to fetch a video ad. If set, HTMLSnippet should not be set."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Ad width."""  
    