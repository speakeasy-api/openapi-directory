import dataclasses
from typing import Any,Optional
from enum import Enum
from dataclasses_json import dataclass_json
from sdk import utils
from ..shared import security as shared_security

class GetEventsV3EventSource1Enum(str, Enum):
    ATTACH = "attach"
    BATTERY = "battery"
    GEOFENCE = "geofence"
    HUMIDITY = "humidity"
    PRESSURE = "pressure"
    TAMPER = "tamper"
    TEMPERATURE = "temperature"
    ACCELERATION = "acceleration"
    DWELLING = "dwelling"
    STOCK = "stock"
    DETENTION = "detention"
    UTILIZATION = "utilization"

class GetEventsV3EventSource2Enum(str, Enum):
    ATTACH = "attach"
    BATTERY = "battery"
    GEOFENCE = "geofence"
    HUMIDITY = "humidity"
    PRESSURE = "pressure"
    TAMPER = "tamper"
    TEMPERATURE = "temperature"
    ACCELERATION = "acceleration"
    DWELLING = "dwelling"
    STOCK = "stock"
    DETENTION = "detention"
    UTILIZATION = "utilization"

class GetEventsV3EventType1Enum(str, Enum):
    BELOW_RANGE = "BELOW_RANGE"
    IN_RANGE = "IN_RANGE"
    ABOVE_RANGE = "ABOVE_RANGE"
    FALSE_TO_TRUE = "FALSE_TO_TRUE"
    TRUE_TO_FALSE = "TRUE_TO_FALSE"
    EVENT = "EVENT"
    INSIDE_GEOFENCE = "INSIDE_GEOFENCE"
    OUTSIDE_GEOFENCE = "OUTSIDE_GEOFENCE"
    OVERSTOCK = "OVERSTOCK"
    NORMAL_VOLUME = "NORMAL_VOLUME"
    UNDERSTOCK = "UNDERSTOCK"
    DWELLING_STARTED = "DWELLING_STARTED"
    DWELLING_ENDED = "DWELLING_ENDED"
    DETENTION_STARTED = "DETENTION_STARTED"
    DETENTION_ENDED = "DETENTION_ENDED"
    UTILIZED = "UTILIZED"
    UNUTILIZED = "UNUTILIZED"

class GetEventsV3EventType2Enum(str, Enum):
    BELOW_RANGE = "BELOW_RANGE"
    IN_RANGE = "IN_RANGE"
    ABOVE_RANGE = "ABOVE_RANGE"
    FALSE_TO_TRUE = "FALSE_TO_TRUE"
    TRUE_TO_FALSE = "TRUE_TO_FALSE"
    EVENT = "EVENT"
    INSIDE_GEOFENCE = "INSIDE_GEOFENCE"
    OUTSIDE_GEOFENCE = "OUTSIDE_GEOFENCE"
    OVERSTOCK = "OVERSTOCK"
    NORMAL_VOLUME = "NORMAL_VOLUME"
    UNDERSTOCK = "UNDERSTOCK"
    DWELLING_STARTED = "DWELLING_STARTED"
    DWELLING_ENDED = "DWELLING_ENDED"
    DETENTION_STARTED = "DETENTION_STARTED"
    DETENTION_ENDED = "DETENTION_ENDED"
    UTILIZED = "UTILIZED"
    UNUTILIZED = "UNUTILIZED"


@dataclasses.dataclass
class GetEventsV3QueryParams:
    after: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'after', 'style': 'form', 'explode': True }})
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'appId', 'style': 'form', 'explode': True }})
    before: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'before', 'style': 'form', 'explode': True }})
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    event_source: Optional[Any] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'eventSource', 'style': 'form', 'explode': True }})
    event_type: Optional[Any] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'eventType', 'style': 'form', 'explode': True }})
    initial_state: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'initialState', 'style': 'form', 'explode': True }})
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projectId', 'style': 'form', 'explode': True }})
    rule_id: Optional[Any] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ruleId', 'style': 'form', 'explode': True }})
    

@dataclasses.dataclass
class GetEventsV3Headers:
    x_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Request-Id', 'style': 'simple', 'explode': False }})
    

@dataclasses.dataclass
class GetEventsV3Security:
    auth_bearer: shared_security.SchemeAuthBearer = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header' }})
    
class GetEventsV3200ApplicationJSONDataBooleanEventEventSourceEnum(str, Enum):
    ATTACH = "attach"
    TAMPER = "tamper"

class GetEventsV3200ApplicationJSONDataBooleanEventEventTypeEnum(str, Enum):
    FALSE_TO_TRUE = "FALSE_TO_TRUE"
    TRUE_TO_FALSE = "TRUE_TO_FALSE"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataBooleanEvent:
    r"""GetEventsV3200ApplicationJSONDataBooleanEvent
    Events generated by sensors that report boolean data (attach, tamper).
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataBooleanEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataBooleanEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    
class GetEventsV3200ApplicationJSONDataRangeEventEventSourceEnum(str, Enum):
    BATTERY = "battery"
    HUMIDITY = "humidity"
    PRESSURE = "pressure"
    TEMPERATURE = "temperature"

class GetEventsV3200ApplicationJSONDataRangeEventEventTypeEnum(str, Enum):
    BELOW_RANGE = "BELOW_RANGE"
    IN_RANGE = "IN_RANGE"
    ABOVE_RANGE = "ABOVE_RANGE"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataRangeEvent:
    r"""GetEventsV3200ApplicationJSONDataRangeEvent
    Events generated by sensor that report numerical data (battery, humidity,
    pressure and temperature).
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataRangeEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataRangeEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    
class GetEventsV3200ApplicationJSONDataGenericEventEventSourceEnum(str, Enum):
    ACCELERATION = "acceleration"

class GetEventsV3200ApplicationJSONDataGenericEventEventTypeEnum(str, Enum):
    EVENT = "EVENT"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataGenericEvent:
    r"""GetEventsV3200ApplicationJSONDataGenericEvent
    Events generated by sensor that report numerical data but only when a specific
    event occurs (eg. the device was dropped)
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataGenericEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataGenericEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    
class GetEventsV3200ApplicationJSONDataGeofenceEventEventSourceEnum(str, Enum):
    GEOFENCE = "geofence"

class GetEventsV3200ApplicationJSONDataGeofenceEventEventTypeEnum(str, Enum):
    INSIDE_GEOFENCE = "INSIDE_GEOFENCE"
    OUTSIDE_GEOFENCE = "OUTSIDE_GEOFENCE"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataGeofenceEvent:
    r"""GetEventsV3200ApplicationJSONDataGeofenceEvent
    Events generated by device crossing the geofence border.
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataGeofenceEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataGeofenceEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    
class GetEventsV3200ApplicationJSONDataStockEventEventSourceEnum(str, Enum):
    STOCK = "stock"

class GetEventsV3200ApplicationJSONDataStockEventEventTypeEnum(str, Enum):
    OVERSTOCK = "OVERSTOCK"
    NORMAL_VOLUME = "NORMAL_VOLUME"
    UNDERSTOCK = "UNDERSTOCK"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataStockEvent:
    r"""GetEventsV3200ApplicationJSONDataStockEvent
    Events generated by the number of assets inside a geofence over a maximum stock volume,
    or between a minimum stock volume and a maximum stock volume, or under a minimum stock volume.
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataStockEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataStockEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    
class GetEventsV3200ApplicationJSONDataDwellingEventEventSourceEnum(str, Enum):
    DWELLING = "dwelling"

class GetEventsV3200ApplicationJSONDataDwellingEventEventTypeEnum(str, Enum):
    DWELLING_STARTED = "DWELLING_STARTED"
    DWELLING_ENDED = "DWELLING_ENDED"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataDwellingEvent:
    r"""GetEventsV3200ApplicationJSONDataDwellingEvent
    Events generated by a device that has dwelled inside a geofence for longer than specified
    threshold duration
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataDwellingEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataDwellingEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    geofence_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('geofenceId') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    
class GetEventsV3200ApplicationJSONDataDetentionEventEventSourceEnum(str, Enum):
    DETENTION = "detention"

class GetEventsV3200ApplicationJSONDataDetentionEventEventTypeEnum(str, Enum):
    DETENTION_STARTED = "DETENTION_STARTED"
    DETENTION_ENDED = "DETENTION_ENDED"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataDetentionEvent:
    r"""GetEventsV3200ApplicationJSONDataDetentionEvent
    Events generated when a device has been stationary for longer than the specified
    threshold duration.
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataDetentionEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataDetentionEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    
class GetEventsV3200ApplicationJSONDataUtilizationEventEventSourceEnum(str, Enum):
    UTILIZATION = "utilization"

class GetEventsV3200ApplicationJSONDataUtilizationEventEventTypeEnum(str, Enum):
    UTILIZED = "UTILIZED"
    UNUTILIZED = "UNUTILIZED"


@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSONDataUtilizationEvent:
    r"""GetEventsV3200ApplicationJSONDataUtilizationEvent
    The UTILIZED event is generated when a device starts moving,
    and the UNUTILIZED event is generated when the device has been stationary
    for longer than the specified threshold duration.
    
    """
    
    event_source: GetEventsV3200ApplicationJSONDataUtilizationEventEventSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventSource') }})
    event_type: GetEventsV3200ApplicationJSONDataUtilizationEventEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventType') }})
    initial_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('initialState') }})
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('ruleId') }})
    timestamp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('timestamp') }})
    tracking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('trackingId') }})
    

@dataclass_json
@dataclasses.dataclass
class GetEventsV3200ApplicationJSON:
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('count') }})
    data: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('data') }})
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('pageToken') }})
    

@dataclass_json
@dataclasses.dataclass
class GetEventsV3400ApplicationJSON:
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('code') }})
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('error') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('id') }})
    details: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('details') }})
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('message') }})
    

@dataclass_json
@dataclasses.dataclass
class GetEventsV3401ApplicationJSON:
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('code') }})
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('error') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('id') }})
    details: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('details') }})
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('message') }})
    

@dataclass_json
@dataclasses.dataclass
class GetEventsV3403ApplicationJSON:
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('code') }})
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('error') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('id') }})
    details: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('details') }})
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('message') }})
    

@dataclass_json
@dataclasses.dataclass
class GetEventsV3404ApplicationJSON:
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('code') }})
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('error') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.field_name('id') }})
    details: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('details') }})
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('message') }})
    

@dataclasses.dataclass
class GetEventsV3Request:
    headers: GetEventsV3Headers = dataclasses.field()
    query_params: GetEventsV3QueryParams = dataclasses.field()
    security: GetEventsV3Security = dataclasses.field()
    

@dataclasses.dataclass
class GetEventsV3Response:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_events_v3_200_application_json_object: Optional[GetEventsV3200ApplicationJSON] = dataclasses.field(default=None)
    get_events_v3_400_application_json_object: Optional[GetEventsV3400ApplicationJSON] = dataclasses.field(default=None)
    get_events_v3_401_application_json_object: Optional[GetEventsV3401ApplicationJSON] = dataclasses.field(default=None)
    get_events_v3_403_application_json_object: Optional[GetEventsV3403ApplicationJSON] = dataclasses.field(default=None)
    get_events_v3_404_application_json_object: Optional[GetEventsV3404ApplicationJSON] = dataclasses.field(default=None)
    
