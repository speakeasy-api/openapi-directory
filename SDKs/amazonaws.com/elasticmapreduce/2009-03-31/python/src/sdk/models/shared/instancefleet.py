"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instancefleetprovisioningspecifications as shared_instancefleetprovisioningspecifications
from ..shared import instancefleetresizingspecifications as shared_instancefleetresizingspecifications
from ..shared import instancefleetstatus as shared_instancefleetstatus
from ..shared import instancefleettype_enum as shared_instancefleettype_enum
from ..shared import instancetypespecification as shared_instancetypespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceFleet:
    r"""<p>Describes an instance fleet, which is a group of EC2 instances that host a particular node type (master, core, or task) in an Amazon EMR cluster. Instance fleets can consist of a mix of instance types and On-Demand and Spot Instances, which are provisioned to meet a defined target capacity. </p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    instance_fleet_type: Optional[shared_instancefleettype_enum.InstanceFleetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceFleetType'), 'exclude': lambda f: f is None }})  
    instance_type_specifications: Optional[list[shared_instancetypespecification.InstanceTypeSpecification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceTypeSpecifications'), 'exclude': lambda f: f is None }})  
    launch_specifications: Optional[shared_instancefleetprovisioningspecifications.InstanceFleetProvisioningSpecifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LaunchSpecifications'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    provisioned_on_demand_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedOnDemandCapacity'), 'exclude': lambda f: f is None }})  
    provisioned_spot_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedSpotCapacity'), 'exclude': lambda f: f is None }})  
    resize_specifications: Optional[shared_instancefleetresizingspecifications.InstanceFleetResizingSpecifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResizeSpecifications'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_instancefleetstatus.InstanceFleetStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    target_on_demand_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetOnDemandCapacity'), 'exclude': lambda f: f is None }})  
    target_spot_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetSpotCapacity'), 'exclude': lambda f: f is None }})  
    