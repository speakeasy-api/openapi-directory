"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServicePrincipalUpdateParameters:
    r"""Active Directory service principal common properties shared among GET, POST and PATCH"""
    
    account_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountEnabled'), 'exclude': lambda f: f is None }})
    r"""whether or not the service principal account is enabled"""  
    app_role_assignment_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appRoleAssignmentRequired'), 'exclude': lambda f: f is None }})
    r"""Specifies whether an AppRoleAssignment to a user or group is required before Azure AD will issue a user or access token to the application."""  
    key_credentials: Optional[list[dict[str, dict[str, Any]]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyCredentials'), 'exclude': lambda f: f is None }})
    r"""The collection of key credentials associated with the service principal."""  
    password_credentials: Optional[list[dict[str, dict[str, Any]]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordCredentials'), 'exclude': lambda f: f is None }})
    r"""The collection of password credentials associated with the service principal."""  
    service_principal_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicePrincipalType'), 'exclude': lambda f: f is None }})
    r"""the type of the service principal"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Optional list of tags that you can apply to your service principals. Not nullable."""  
    