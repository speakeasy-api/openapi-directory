"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import badresponsesfaultconfig as shared_badresponsesfaultconfig
from ..shared import largerequestfaultconfig as shared_largerequestfaultconfig
from ..shared import largeresponsefaultconfig as shared_largeresponsefaultconfig
from ..shared import latencyinjectionfaultconfig as shared_latencyinjectionfaultconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChaosConfig:
    r"""Configuration for the faults that can be injected in requests"""
    
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""Whether or not this config is enabled"""  
    bad_responses_fault_config: Optional[shared_badresponsesfaultconfig.BadResponsesFaultConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badResponsesFaultConfig'), 'exclude': lambda f: f is None }})
    r"""Config for bad requests injection fault"""  
    large_request_fault_config: Optional[shared_largerequestfaultconfig.LargeRequestFaultConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('largeRequestFaultConfig'), 'exclude': lambda f: f is None }})
    r"""Config for large request injection fault"""  
    large_response_fault_config: Optional[shared_largeresponsefaultconfig.LargeResponseFaultConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('largeResponseFaultConfig'), 'exclude': lambda f: f is None }})
    r"""Config for large response injection fault"""  
    latency_injection_fault_config: Optional[shared_latencyinjectionfaultconfig.LatencyInjectionFaultConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latencyInjectionFaultConfig'), 'exclude': lambda f: f is None }})
    r"""Config for large latency injection fault"""  
    