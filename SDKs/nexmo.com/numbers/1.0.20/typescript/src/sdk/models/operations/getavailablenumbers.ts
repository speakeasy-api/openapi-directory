/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
 */
export enum GetAvailableNumbersFeaturesEnum {
  Sms = "SMS",
  Voice = "VOICE",
  SmsVoice = "SMS,VOICE",
  Mms = "MMS",
  SmsMms = "SMS,MMS",
  VoiceMms = "VOICE,MMS",
  SmsMmsVoice = "SMS,MMS,VOICE",
}

export class GetAvailableNumbersRequest extends SpeakeasyBase {
  /**
   * The two character country code to filter on (in ISO 3166-1 alpha-2 format)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country",
  })
  country: string;

  /**
   * Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=features",
  })
  features?: GetAvailableNumbersFeaturesEnum;

  /**
   * Page index
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=index" })
  index?: number;

  /**
   * The number pattern you want to search for. Use in conjunction with `search_pattern`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pattern",
  })
  pattern?: string;

  /**
   * The strategy you want to use for matching:
   *
   * @remarks
   *
   *
   * * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA)
   * * `1` - Search for numbers that contain `pattern`
   * * `2` - Search for numbers that end with `pattern`
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search_pattern",
  })
  searchPattern?: shared.SearchPatternEnum;

  /**
   * Page size
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: number;

  /**
   * Set this parameter to filter the type of number, such as mobile or landline
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: shared.TypeEnum;
}

export class GetAvailableNumbersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  accountUnauthorized?: shared.AccountUnauthorized;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  availableNumbers?: shared.AvailableNumbers;
}
