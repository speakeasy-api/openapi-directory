"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scheduledsubtransaction as shared_scheduledsubtransaction
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ScheduledTransactionDetailFlagColorEnum(str, Enum):
    r"""The scheduled transaction flag"""
    RED = 'red'
    ORANGE = 'orange'
    YELLOW = 'yellow'
    GREEN = 'green'
    BLUE = 'blue'
    PURPLE = 'purple'
    NULL = 'null'

class ScheduledTransactionDetailFrequencyEnum(str, Enum):
    NEVER = 'never'
    DAILY = 'daily'
    WEEKLY = 'weekly'
    EVERY_OTHER_WEEK = 'everyOtherWeek'
    TWICE_A_MONTH = 'twiceAMonth'
    EVERY4_WEEKS = 'every4Weeks'
    MONTHLY = 'monthly'
    EVERY_OTHER_MONTH = 'everyOtherMonth'
    EVERY3_MONTHS = 'every3Months'
    EVERY4_MONTHS = 'every4Months'
    TWICE_A_YEAR = 'twiceAYear'
    YEARLY = 'yearly'
    EVERY_OTHER_YEAR = 'everyOtherYear'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduledTransactionDetail:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})  
    account_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_name') }})  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The scheduled transaction amount in milliunits format"""  
    date_first: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_first'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The first date for which the Scheduled Transaction was scheduled."""  
    date_next: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_next'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The next date for which the Scheduled Transaction is scheduled."""  
    deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted') }})
    r"""Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests."""  
    frequency: ScheduledTransactionDetailFrequencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    subtransactions: list[shared_scheduledsubtransaction.ScheduledSubTransaction] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtransactions') }})
    r"""If a split scheduled transaction, the subtransactions."""  
    category_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id'), 'exclude': lambda f: f is None }})  
    category_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_name'), 'exclude': lambda f: f is None }})  
    flag_color: Optional[ScheduledTransactionDetailFlagColorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flag_color'), 'exclude': lambda f: f is None }})
    r"""The scheduled transaction flag"""  
    memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo'), 'exclude': lambda f: f is None }})  
    payee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payee_id'), 'exclude': lambda f: f is None }})  
    payee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payee_name'), 'exclude': lambda f: f is None }})  
    transfer_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfer_account_id'), 'exclude': lambda f: f is None }})
    r"""If a transfer, the account_id which the scheduled transaction transfers to"""  
    