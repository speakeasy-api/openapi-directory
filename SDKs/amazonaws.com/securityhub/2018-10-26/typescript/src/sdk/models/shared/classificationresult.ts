/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClassificationStatus } from "./classificationstatus";
import { CustomDataIdentifiersResult } from "./customdataidentifiersresult";
import { SensitiveDataResult } from "./sensitivedataresult";
import { Expose, Type } from "class-transformer";

/**
 * Details about the sensitive data that was detected on the resource.
 */
export class ClassificationResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalOccurrences" })
  additionalOccurrences?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomDataIdentifiers" })
  @Type(() => CustomDataIdentifiersResult)
  customDataIdentifiers?: CustomDataIdentifiersResult;

  @SpeakeasyMetadata()
  @Expose({ name: "MimeType" })
  mimeType?: string;

  @SpeakeasyMetadata({ elemType: SensitiveDataResult })
  @Expose({ name: "SensitiveData" })
  @Type(() => SensitiveDataResult)
  sensitiveData?: SensitiveDataResult[];

  @SpeakeasyMetadata()
  @Expose({ name: "SizeClassified" })
  sizeClassified?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  @Type(() => ClassificationStatus)
  status?: ClassificationStatus;
}
