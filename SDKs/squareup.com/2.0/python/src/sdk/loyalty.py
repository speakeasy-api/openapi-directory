"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Loyalty:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def accumulate_loyalty_points(self, request: operations.AccumulateLoyaltyPointsRequest, security: operations.AccumulateLoyaltyPointsSecurity) -> operations.AccumulateLoyaltyPointsResponse:
        r"""AccumulateLoyaltyPoints
        Adds points to a loyalty account.
        
        - If you are using the Orders API to manage orders, you only provide the `order_id`. 
        The endpoint reads the order to compute points to add to the buyer's account.
        - If you are not using the Orders API to manage orders, 
        you first perform a client-side computation to compute the points.  
        For spend-based and visit-based programs, you can first call 
        [CalculateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/calculate-loyalty-points) to compute the points  
        that you provide to this endpoint. 
        
        __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs. 
        For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccumulateLoyaltyPointsRequest, base_url, '/v2/loyalty/accounts/{account_id}/accumulate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "accumulate_loyalty_points_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccumulateLoyaltyPointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccumulateLoyaltyPointsResponse])
                res.accumulate_loyalty_points_response = out

        return res

    def adjust_loyalty_points(self, request: operations.AdjustLoyaltyPointsRequest, security: operations.AdjustLoyaltyPointsSecurity) -> operations.AdjustLoyaltyPointsResponse:
        r"""AdjustLoyaltyPoints
        Adds points to or subtracts points from a buyer's account. 
        
        Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call 
        [AccumulateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/accumulate-loyalty-points) 
        to add points when a buyer pays for the purchase.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdjustLoyaltyPointsRequest, base_url, '/v2/loyalty/accounts/{account_id}/adjust', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "adjust_loyalty_points_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdjustLoyaltyPointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdjustLoyaltyPointsResponse])
                res.adjust_loyalty_points_response = out

        return res

    def calculate_loyalty_points(self, request: operations.CalculateLoyaltyPointsRequest, security: operations.CalculateLoyaltyPointsSecurity) -> operations.CalculateLoyaltyPointsResponse:
        r"""CalculateLoyaltyPoints
        Calculates the points a purchase earns.
        
        - If you are using the Orders API to manage orders, you provide `order_id` in the request. The 
        endpoint calculates the points by reading the order.
        - If you are not using the Orders API to manage orders, you provide the purchase amount in 
        the request for the endpoint to calculate the points.
        
        An application might call this endpoint to show the points that a buyer can earn with the 
        specific purchase.
        
        __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs. 
        For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalculateLoyaltyPointsRequest, base_url, '/v2/loyalty/programs/{program_id}/calculate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calculate_loyalty_points_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalculateLoyaltyPointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalculateLoyaltyPointsResponse])
                res.calculate_loyalty_points_response = out

        return res

    def create_loyalty_account(self, request: shared.CreateLoyaltyAccountRequest, security: operations.CreateLoyaltyAccountSecurity) -> operations.CreateLoyaltyAccountResponse:
        r"""CreateLoyaltyAccount
        Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/loyalty/accounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLoyaltyAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLoyaltyAccountResponse])
                res.create_loyalty_account_response = out

        return res

    def create_loyalty_reward(self, request: shared.CreateLoyaltyRewardRequest, security: operations.CreateLoyaltyRewardSecurity) -> operations.CreateLoyaltyRewardResponse:
        r"""CreateLoyaltyReward
        Creates a loyalty reward. In the process, the endpoint does following:
        
        - Uses the `reward_tier_id` in the request to determine the number of points 
        to lock for this reward. 
        - If the request includes `order_id`, it adds the reward and related discount to the order. 
        
        After a reward is created, the points are locked and 
        not available for the buyer to redeem another reward.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/loyalty/rewards'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLoyaltyRewardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLoyaltyRewardResponse])
                res.create_loyalty_reward_response = out

        return res

    def delete_loyalty_reward(self, request: operations.DeleteLoyaltyRewardRequest, security: operations.DeleteLoyaltyRewardSecurity) -> operations.DeleteLoyaltyRewardResponse:
        r"""DeleteLoyaltyReward
        Deletes a loyalty reward by doing the following:
        
        - Returns the loyalty points back to the loyalty account.
        - If an order ID was specified when the reward was created 
        (see [CreateLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/create-loyalty-reward)), 
        it updates the order by removing the reward and related 
        discounts.
        
        You cannot delete a reward that has reached the terminal state (REDEEMED).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLoyaltyRewardRequest, base_url, '/v2/loyalty/rewards/{reward_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLoyaltyRewardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteLoyaltyRewardResponse])
                res.delete_loyalty_reward_response = out

        return res

    def list_loyalty_programs(self) -> operations.ListLoyaltyProgramsResponse:
        r"""ListLoyaltyPrograms
        Returns a list of loyalty programs in the seller's account.
        Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
        
        
        Replaced with [RetrieveLoyaltyProgram](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-program) when used with the keyword `main`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/loyalty/programs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLoyaltyProgramsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLoyaltyProgramsResponse])
                res.list_loyalty_programs_response = out

        return res

    def redeem_loyalty_reward(self, request: operations.RedeemLoyaltyRewardRequest, security: operations.RedeemLoyaltyRewardSecurity) -> operations.RedeemLoyaltyRewardResponse:
        r"""RedeemLoyaltyReward
        Redeems a loyalty reward.
        
        The endpoint sets the reward to the `REDEEMED` terminal state. 
        
        If you are using your own order processing system (not using the 
        Orders API), you call this endpoint after the buyer paid for the 
        purchase.
        
        After the reward reaches the terminal state, it cannot be deleted. 
        In other words, points used for the reward cannot be returned 
        to the account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RedeemLoyaltyRewardRequest, base_url, '/v2/loyalty/rewards/{reward_id}/redeem', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "redeem_loyalty_reward_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RedeemLoyaltyRewardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RedeemLoyaltyRewardResponse])
                res.redeem_loyalty_reward_response = out

        return res

    def retrieve_loyalty_account(self, request: operations.RetrieveLoyaltyAccountRequest, security: operations.RetrieveLoyaltyAccountSecurity) -> operations.RetrieveLoyaltyAccountResponse:
        r"""RetrieveLoyaltyAccount
        Retrieves a loyalty account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveLoyaltyAccountRequest, base_url, '/v2/loyalty/accounts/{account_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveLoyaltyAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveLoyaltyAccountResponse])
                res.retrieve_loyalty_account_response = out

        return res

    def retrieve_loyalty_program(self, request: operations.RetrieveLoyaltyProgramRequest, security: operations.RetrieveLoyaltyProgramSecurity) -> operations.RetrieveLoyaltyProgramResponse:
        r"""RetrieveLoyaltyProgram
        Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`. 
        
        Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveLoyaltyProgramRequest, base_url, '/v2/loyalty/programs/{program_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveLoyaltyProgramResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveLoyaltyProgramResponse])
                res.retrieve_loyalty_program_response = out

        return res

    def retrieve_loyalty_reward(self, request: operations.RetrieveLoyaltyRewardRequest, security: operations.RetrieveLoyaltyRewardSecurity) -> operations.RetrieveLoyaltyRewardResponse:
        r"""RetrieveLoyaltyReward
        Retrieves a loyalty reward.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveLoyaltyRewardRequest, base_url, '/v2/loyalty/rewards/{reward_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveLoyaltyRewardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveLoyaltyRewardResponse])
                res.retrieve_loyalty_reward_response = out

        return res

    def search_loyalty_accounts(self, request: shared.SearchLoyaltyAccountsRequest, security: operations.SearchLoyaltyAccountsSecurity) -> operations.SearchLoyaltyAccountsResponse:
        r"""SearchLoyaltyAccounts
        Searches for loyalty accounts in a loyalty program.  
        
        You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.  
        
        Search results are sorted by `created_at` in ascending order.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/loyalty/accounts/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchLoyaltyAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchLoyaltyAccountsResponse])
                res.search_loyalty_accounts_response = out

        return res

    def search_loyalty_events(self, request: shared.SearchLoyaltyEventsRequest, security: operations.SearchLoyaltyEventsSecurity) -> operations.SearchLoyaltyEventsResponse:
        r"""SearchLoyaltyEvents
        Searches for loyalty events.
        
        A Square loyalty program maintains a ledger of events that occur during the lifetime of a 
        buyer's loyalty account. Each change in the point balance 
        (for example, points earned, points redeemed, and points expired) is 
        recorded in the ledger. Using this endpoint, you can search the ledger for events.
        
        Search results are sorted by `created_at` in descending order.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/loyalty/events/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchLoyaltyEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchLoyaltyEventsResponse])
                res.search_loyalty_events_response = out

        return res

    def search_loyalty_rewards(self, request: shared.SearchLoyaltyRewardsRequest, security: operations.SearchLoyaltyRewardsSecurity) -> operations.SearchLoyaltyRewardsResponse:
        r"""SearchLoyaltyRewards
        Searches for loyalty rewards in a loyalty account. 
        
        In the current implementation, the endpoint supports search by the reward `status`.
        
        If you know a reward ID, use the 
        [RetrieveLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-reward) endpoint.
        
        Search results are sorted by `updated_at` in descending order.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/loyalty/rewards/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchLoyaltyRewardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchLoyaltyRewardsResponse])
                res.search_loyalty_rewards_response = out

        return res

    