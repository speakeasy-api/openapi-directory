// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FieldFilterOpEnum - The operator to filter by.
type FieldFilterOpEnum string

const (
	FieldFilterOpEnumOperatorUnspecified FieldFilterOpEnum = "OPERATOR_UNSPECIFIED"
	FieldFilterOpEnumLessThan            FieldFilterOpEnum = "LESS_THAN"
	FieldFilterOpEnumLessThanOrEqual     FieldFilterOpEnum = "LESS_THAN_OR_EQUAL"
	FieldFilterOpEnumGreaterThan         FieldFilterOpEnum = "GREATER_THAN"
	FieldFilterOpEnumGreaterThanOrEqual  FieldFilterOpEnum = "GREATER_THAN_OR_EQUAL"
	FieldFilterOpEnumEqual               FieldFilterOpEnum = "EQUAL"
	FieldFilterOpEnumNotEqual            FieldFilterOpEnum = "NOT_EQUAL"
	FieldFilterOpEnumArrayContains       FieldFilterOpEnum = "ARRAY_CONTAINS"
	FieldFilterOpEnumIn                  FieldFilterOpEnum = "IN"
	FieldFilterOpEnumArrayContainsAny    FieldFilterOpEnum = "ARRAY_CONTAINS_ANY"
	FieldFilterOpEnumNotIn               FieldFilterOpEnum = "NOT_IN"
)

func (e *FieldFilterOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OPERATOR_UNSPECIFIED":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "LESS_THAN_OR_EQUAL":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "GREATER_THAN_OR_EQUAL":
		fallthrough
	case "EQUAL":
		fallthrough
	case "NOT_EQUAL":
		fallthrough
	case "ARRAY_CONTAINS":
		fallthrough
	case "IN":
		fallthrough
	case "ARRAY_CONTAINS_ANY":
		fallthrough
	case "NOT_IN":
		*e = FieldFilterOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldFilterOpEnum: %s", s)
	}
}

// FieldFilter - A filter on a specific field.
type FieldFilter struct {
	// A reference to a field in a document, ex: `stats.operations`.
	Field *FieldReference `json:"field,omitempty"`
	// The operator to filter by.
	Op *FieldFilterOpEnum `json:"op,omitempty"`
	// A message that can hold any of the supported value types.
	Value *Value `json:"value,omitempty"`
}
