/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class YoutubeCommentThreadsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
 */
export enum YoutubeCommentThreadsListModerationStatusEnum {
  Published = "published",
  HeldForReview = "heldForReview",
  LikelySpam = "likelySpam",
  Rejected = "rejected",
}

export enum YoutubeCommentThreadsListOrderEnum {
  OrderUnspecified = "orderUnspecified",
  Time = "time",
  Relevance = "relevance",
}

/**
 * The requested text format for the returned comments.
 */
export enum YoutubeCommentThreadsListTextFormatEnum {
  TextFormatUnspecified = "textFormatUnspecified",
  Html = "html",
  PlainText = "plainText",
}

export class YoutubeCommentThreadsListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Returns the comment threads of all videos of the channel and the channel comments as well.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=allThreadsRelatedToChannelId",
  })
  allThreadsRelatedToChannelId?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Returns the comment threads for all the channel comments (ie does not include comments left on videos).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=channelId",
  })
  channelId?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Returns the comment threads with the given IDs for Stubby or Apiary.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=id" })
  id?: string[];

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=moderationStatus",
  })
  moderationStatus?: YoutubeCommentThreadsListModerationStatusEnum;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: YoutubeCommentThreadsListOrderEnum;

  /**
   * The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=part" })
  part: string[];

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=searchTerms",
  })
  searchTerms?: string;

  /**
   * The requested text format for the returned comments.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=textFormat",
  })
  textFormat?: YoutubeCommentThreadsListTextFormatEnum;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * Returns the comment threads of the specified video.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=videoId",
  })
  videoId?: string;
}

export class YoutubeCommentThreadsListResponse extends SpeakeasyBase {
  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  commentThreadListResponse?: shared.CommentThreadListResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
