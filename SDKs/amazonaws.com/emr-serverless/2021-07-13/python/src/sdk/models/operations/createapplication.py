"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createapplicationresponse as shared_createapplicationresponse
from ..shared import initialcapacityconfig as shared_initialcapacityconfig
from ..shared import workertypespecificationinput as shared_workertypespecificationinput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateApplicationRequestBodyArchitectureEnum(str, Enum):
    r"""The CPU architecture of an application."""
    ARM64 = 'ARM64'
    X86_64 = 'X86_64'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequestBodyAutoStartConfiguration:
    r"""The configuration for an application to automatically start on job submission."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequestBodyAutoStopConfiguration:
    r"""The configuration for an application to automatically stop after a certain amount of time being idle."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    idle_timeout_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleTimeoutMinutes'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequestBodyImageConfiguration:
    r"""The image configuration."""
    
    image_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUri'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequestBodyMaximumCapacity:
    r"""The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit."""
    
    cpu: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu'), 'exclude': lambda f: f is None }})  
    disk: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk'), 'exclude': lambda f: f is None }})  
    memory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequestBodyNetworkConfiguration:
    r"""The network configuration for customer VPC connectivity."""
    
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroupIds'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetIds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequestBody:
    
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""The client idempotency token of the application to create. Its value must be unique for each request."""  
    release_label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseLabel') }})
    r"""The EMR release associated with the application."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of application you want to start, such as Spark or Hive."""  
    architecture: Optional[CreateApplicationRequestBodyArchitectureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('architecture'), 'exclude': lambda f: f is None }})
    r"""The CPU architecture of an application."""  
    auto_start_configuration: Optional[CreateApplicationRequestBodyAutoStartConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoStartConfiguration'), 'exclude': lambda f: f is None }})
    r"""The configuration for an application to automatically start on job submission."""  
    auto_stop_configuration: Optional[CreateApplicationRequestBodyAutoStopConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoStopConfiguration'), 'exclude': lambda f: f is None }})
    r"""The configuration for an application to automatically stop after a certain amount of time being idle."""  
    image_configuration: Optional[CreateApplicationRequestBodyImageConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageConfiguration'), 'exclude': lambda f: f is None }})
    r"""The image configuration."""  
    initial_capacity: Optional[dict[str, shared_initialcapacityconfig.InitialCapacityConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialCapacity'), 'exclude': lambda f: f is None }})
    r"""The capacity to initialize when the application is created."""  
    maximum_capacity: Optional[CreateApplicationRequestBodyMaximumCapacity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumCapacity'), 'exclude': lambda f: f is None }})
    r"""The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the application."""  
    network_configuration: Optional[CreateApplicationRequestBodyNetworkConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfiguration'), 'exclude': lambda f: f is None }})
    r"""The network configuration for customer VPC connectivity."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tags assigned to the application."""  
    worker_type_specifications: Optional[dict[str, shared_workertypespecificationinput.WorkerTypeSpecificationInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerTypeSpecifications'), 'exclude': lambda f: f is None }})
    r"""The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types."""  
    

@dataclasses.dataclass
class CreateApplicationRequest:
    
    request_body: CreateApplicationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateApplicationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_application_response: Optional[shared_createapplicationresponse.CreateApplicationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    