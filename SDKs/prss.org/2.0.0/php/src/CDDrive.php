<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CDDrive 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a file.
     * 
     * Delete a file from the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdResponse
     */
	public function deleteApiV2CddriveFilesFileId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/files/{file-id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFilesFileIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * UNDER DEVELOPMENT - Delete a folder.
     * 
     * Delete a file from the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdResponse
     */
	public function deleteApiV2CddriveFoldersFolderId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/folders/{folder-id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV2CddriveFoldersFolderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get file information.
     * 
     * Get the information about a file in the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdResponse
     */
	public function getApiV2CddriveFilesFileId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/files/{file-id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cdDriveFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CDDriveFile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * UNDER DEVELOPMENT - Download a file.
     * 
     * Download a file from the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentResponse
     */
	public function getApiV2CddriveFilesFileIdContent(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/files/{file-id}/content', \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFilesFileIdContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->getApiV2CddriveFilesFileIdContent200ApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 302) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * UNDER DEVELOPMENT - Get folder information.
     * 
     * Get the information about a folder in the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdResponse
     */
	public function getApiV2CddriveFoldersFolderId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/folders/{folder-id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cdDriveFolder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CDDriveFolder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the items in the folder.
     * 
     * Get the information about a folder in the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsResponse
     */
	public function getApiV2CddriveFoldersFolderIdItems(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/folders/{folder-id}/items', \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getApiV2CddriveFoldersFolderIdItems200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetApiV2CddriveFoldersFolderIdItems200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Upload a file.
     * 
     * Upload a file to the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentResponse
     */
	public function postApiV2CddriveFilesContent(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/files/content');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFilesContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cdDriveFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CDDriveFile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 413) {
        }

        return $response;
    }
	
    /**
     * Create a folder.
     * 
     * Create a new folder in the customer's private CD Drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersResponse
     */
	public function postApiV2CddriveFolders(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/cddrive/folders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV2CddriveFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cdDriveFolder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CDDriveFolder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }

        return $response;
    }
}