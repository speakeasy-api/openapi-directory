// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExecuteResponseStatusEnum - The status of the execution.
type ExecuteResponseStatusEnum string

const (
	ExecuteResponseStatusEnumSuccess ExecuteResponseStatusEnum = "success"
	ExecuteResponseStatusEnumError   ExecuteResponseStatusEnum = "error"
	ExecuteResponseStatusEnumEmpty   ExecuteResponseStatusEnum = "empty"
	ExecuteResponseStatusEnumPreview ExecuteResponseStatusEnum = "preview"
)

func (e *ExecuteResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		fallthrough
	case "empty":
		fallthrough
	case "preview":
		*e = ExecuteResponseStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteResponseStatusEnum: %s", s)
	}
}

// ExecuteResponse - This is a summary of the results given the action that was executed.
type ExecuteResponse struct {
	// The name of the action that was executed.
	ActionUsed string `json:"action_used"`
	// The error message if the execution failed.
	Error *string `json:"error,omitempty"`
	// The id of the execution log.
	ID string `json:"id"`
	// The params we used / will use to execute the action.
	InputParams map[string]interface{} `json:"input_params"`
	// A trimmed down result of the first item of the full results. Ideal for humans and language models!
	Result map[string]interface{} `json:"result,omitempty"`
	// The URL to run the action or review the AI choices the AI made for input_params given instructions.
	ReviewURL string `json:"review_url"`
	// The status of the execution.
	Status *ExecuteResponseStatusEnum `json:"status,omitempty"`
}
