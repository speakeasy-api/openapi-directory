"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import batchgetdeploymentinstancesinput as shared_batchgetdeploymentinstancesinput
from ..shared import batchgetdeploymentinstancesoutput as shared_batchgetdeploymentinstancesoutput
from enum import Enum
from typing import Any, Optional

class BatchGetDeploymentInstancesXAmzTargetEnum(str, Enum):
    CODE_DEPLOY_20141006_BATCH_GET_DEPLOYMENT_INSTANCES = 'CodeDeploy_20141006.BatchGetDeploymentInstances'


@dataclasses.dataclass
class BatchGetDeploymentInstancesRequest:
    
    batch_get_deployment_instances_input: shared_batchgetdeploymentinstancesinput.BatchGetDeploymentInstancesInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: BatchGetDeploymentInstancesXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class BatchGetDeploymentInstancesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_get_deployment_instances_output: Optional[shared_batchgetdeploymentinstancesoutput.BatchGetDeploymentInstancesOutput] = dataclasses.field(default=None)
    r"""Success"""  
    batch_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BatchLimitExceededException"""  
    deployment_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentDoesNotExistException"""  
    deployment_id_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentIdRequiredException"""  
    instance_id_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InstanceIdRequiredException"""  
    invalid_compute_platform_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidComputePlatformException"""  
    invalid_deployment_id_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDeploymentIdException"""  
    invalid_instance_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInstanceNameException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    