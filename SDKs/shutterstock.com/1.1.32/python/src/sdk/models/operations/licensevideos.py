"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import licensevideorequest as shared_licensevideorequest
from ..shared import licensevideoresultdatalist as shared_licensevideoresultdatalist
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class LicenseVideosSecurity:
    
    customer_access_code: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class LicenseVideosSizeEnum(str, Enum):
    r"""The size of the video to license"""
    WEB = 'web'
    SD = 'sd'
    HD = 'hd'
    FOURK = '4k'


@dataclasses.dataclass
class LicenseVideosRequest:
    
    license_video_request: shared_licensevideorequest.LicenseVideoRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters"""  
    search_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_id', 'style': 'form', 'explode': True }})
    r"""The Search ID that led to this licensing event"""  
    size: Optional[LicenseVideosSizeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""The size of the video to license"""  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'subscription_id', 'style': 'form', 'explode': True }})
    r"""The subscription ID to use for licensing"""  
    

@dataclasses.dataclass
class LicenseVideosResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    license_video_result_data_list: Optional[shared_licensevideoresultdatalist.LicenseVideoResultDataList] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    