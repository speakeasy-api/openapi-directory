// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type WebinarSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarPathParams struct {
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

type WebinarQueryParams struct {
	// Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call.
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
	// Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
	ShowPreviousOccurrences *bool `queryParam:"style=form,explode=true,name=show_previous_occurrences"`
}

type WebinarRequest struct {
	PathParams  WebinarPathParams
	QueryParams WebinarQueryParams
	Security    WebinarSecurity
}

// Webinar200ApplicationXMLOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type Webinar200ApplicationXMLOccurrences struct {
	// Duration.
	Duration *int64
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string
	// Start time.
	StartTime *time.Time
	// Occurrence status.
	Status *string
}

// Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum string

const (
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnumMinus1 Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "-1"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnumOne    Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "1"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnumTwo    Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "2"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnumThree  Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "3"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnumFour   Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum = "4"
)

func (e *Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum: %s", s)
	}
}

// Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum string

const (
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumOne   Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "1"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumTwo   Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "2"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumThree Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "3"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumFour  Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "4"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumFive  Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "5"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumSix   Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "6"
	Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnumSeven Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum = "7"
)

func (e *Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum: %s", s)
	}
}

// Webinar200ApplicationXMLRecurrenceWebinarTypeEnum - Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type Webinar200ApplicationXMLRecurrenceWebinarTypeEnum string

const (
	Webinar200ApplicationXMLRecurrenceWebinarTypeEnumOne   Webinar200ApplicationXMLRecurrenceWebinarTypeEnum = "1"
	Webinar200ApplicationXMLRecurrenceWebinarTypeEnumTwo   Webinar200ApplicationXMLRecurrenceWebinarTypeEnum = "2"
	Webinar200ApplicationXMLRecurrenceWebinarTypeEnumThree Webinar200ApplicationXMLRecurrenceWebinarTypeEnum = "3"
)

func (e *Webinar200ApplicationXMLRecurrenceWebinarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Webinar200ApplicationXMLRecurrenceWebinarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLRecurrenceWebinarTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXMLRecurrenceWebinar - Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
type Webinar200ApplicationXMLRecurrenceWebinar struct {
	// Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time
	// Select how many times the webinar will recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month, the webinar should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekEnum
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *Webinar200ApplicationXMLRecurrenceWebinarMonthlyWeekDayEnum
	// Define the interval at which the webinar should recur. For instance, if you would like to schedule a Webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
	RepeatInterval *int64
	// Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type Webinar200ApplicationXMLRecurrenceWebinarTypeEnum
	// Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat. <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `"1"` as the value of this field.  <br><br> **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the Webinar should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	// <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	//
	//
	WeeklyDays *string
}

// Webinar200ApplicationXMLSettingsApprovalTypeEnum - `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type Webinar200ApplicationXMLSettingsApprovalTypeEnum string

const (
	Webinar200ApplicationXMLSettingsApprovalTypeEnumZero Webinar200ApplicationXMLSettingsApprovalTypeEnum = "0"
	Webinar200ApplicationXMLSettingsApprovalTypeEnumOne  Webinar200ApplicationXMLSettingsApprovalTypeEnum = "1"
	Webinar200ApplicationXMLSettingsApprovalTypeEnumTwo  Webinar200ApplicationXMLSettingsApprovalTypeEnum = "2"
)

func (e *Webinar200ApplicationXMLSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = Webinar200ApplicationXMLSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsApprovalTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
type Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum string

const (
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumZero  Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "0"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumOne   Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "1"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumTwo   Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "2"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumThree Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "3"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFour  Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "4"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFive  Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "5"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSix   Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "6"
	Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSeven Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "7"
)

func (e *Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotification - Send reminder email to attendees and panelists.
type Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotification struct {
	// * `true`: Send reminder email to attendees and panelists.
	//
	// * `false`: Do not send reminder email to attendees and panelists.
	Enable *bool
	// `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
	Type *Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum
}

// Webinar200ApplicationXMLSettingsAudioEnum - Determine how participants can join the audio portion of the webinar.
type Webinar200ApplicationXMLSettingsAudioEnum string

const (
	Webinar200ApplicationXMLSettingsAudioEnumBoth      Webinar200ApplicationXMLSettingsAudioEnum = "both"
	Webinar200ApplicationXMLSettingsAudioEnumTelephony Webinar200ApplicationXMLSettingsAudioEnum = "telephony"
	Webinar200ApplicationXMLSettingsAudioEnumVoip      Webinar200ApplicationXMLSettingsAudioEnum = "voip"
)

func (e *Webinar200ApplicationXMLSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = Webinar200ApplicationXMLSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsAudioEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type Webinar200ApplicationXMLSettingsAutoRecordingEnum string

const (
	Webinar200ApplicationXMLSettingsAutoRecordingEnumLocal Webinar200ApplicationXMLSettingsAutoRecordingEnum = "local"
	Webinar200ApplicationXMLSettingsAutoRecordingEnumCloud Webinar200ApplicationXMLSettingsAutoRecordingEnum = "cloud"
	Webinar200ApplicationXMLSettingsAutoRecordingEnumNone  Webinar200ApplicationXMLSettingsAutoRecordingEnum = "none"
)

func (e *Webinar200ApplicationXMLSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = Webinar200ApplicationXMLSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsAutoRecordingEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum string

const (
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumZero  Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "0"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumOne   Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "1"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumTwo   Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "2"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumThree Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "3"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumFour  Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "4"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumFive  Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "5"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumSix   Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "6"
	Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnumSeven Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "7"
)

func (e *Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotification - Send follow-up email to absentees.
type Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotification struct {
	// * `true`: Send follow-up email to absentees.
	//
	// * `false`: Do not send follow-up email to absentees.
	Enable *bool
	// `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotificationTypeEnum
}

// Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum string

const (
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumZero  Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "0"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumOne   Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "1"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumTwo   Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "2"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumThree Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "3"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumFour  Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "4"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumFive  Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "5"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumSix   Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "6"
	Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnumSeven Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum = "7"
)

func (e *Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotification - Send follow-up email to attendees.
type Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotification struct {
	// * `true`: Send follow-up email to attendees.
	//
	// * `false`: Do not send follow-up email to attendees.
	Enable *bool
	// `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotificationTypeEnum
}

// Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum - Indicate whether you want attendees to be able to view answered questions only or view all questions.
//
// * `only`: Attendees are able to view answered questions only.
//
// *  `all`: Attendees are able to view all questions submitted in the Q&A.
type Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum string

const (
	Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnumOnly Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum = "only"
	Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnumAll  Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum = "all"
)

func (e *Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "only":
		fallthrough
	case "all":
		*e = Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettingsQuestionAndAnswer - [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
type Webinar200ApplicationXMLSettingsQuestionAndAnswer struct {
	// * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
	//
	// * `false`: Do not allow anonymous questions.
	AllowAnonymousQuestions *bool
	// Indicate whether you want attendees to be able to view answered questions only or view all questions.
	//
	// * `only`: Attendees are able to view answered questions only.
	//
	// *  `all`: Attendees are able to view all questions submitted in the Q&A.
	AnswerQuestions *Webinar200ApplicationXMLSettingsQuestionAndAnswerAnswerQuestionsEnum
	// * `true`: Attendees can answer questions or leave a comment in the question thread.
	//
	// * `false`: Attendees can not answer questions or leave a comment in the question thread
	AttendeesCanComment *bool
	// * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
	//
	// * `false`: Attendees can not click the thumbs up butoon on questions.
	AttendeesCanUpvote *bool
	// * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	//
	// * `false`: Disable Q&A for webinar.
	Enable *bool
}

// Webinar200ApplicationXMLSettingsRegistrationTypeEnum - Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
type Webinar200ApplicationXMLSettingsRegistrationTypeEnum string

const (
	Webinar200ApplicationXMLSettingsRegistrationTypeEnumOne   Webinar200ApplicationXMLSettingsRegistrationTypeEnum = "1"
	Webinar200ApplicationXMLSettingsRegistrationTypeEnumTwo   Webinar200ApplicationXMLSettingsRegistrationTypeEnum = "2"
	Webinar200ApplicationXMLSettingsRegistrationTypeEnumThree Webinar200ApplicationXMLSettingsRegistrationTypeEnum = "3"
)

func (e *Webinar200ApplicationXMLSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Webinar200ApplicationXMLSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLSettingsRegistrationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXMLSettings - Webinar settings.
type Webinar200ApplicationXMLSettings struct {
	// Allow attendees to join from multiple devices.
	AllowMultipleDevices *bool
	// Alternative host emails or IDs. Multiple values separated by comma.
	AlternativeHosts *string
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *Webinar200ApplicationXMLSettingsApprovalTypeEnum
	// Send reminder email to attendees and panelists.
	AttendeesAndPanelistsReminderEmailNotification *Webinar200ApplicationXMLSettingsAttendeesAndPanelistsReminderEmailNotification
	// Determine how participants can join the audio portion of the webinar.
	Audio *Webinar200ApplicationXMLSettingsAudioEnum
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string
	// Webinar authentication option id.
	AuthenticationOption *string
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *Webinar200ApplicationXMLSettingsAutoRecordingEnum
	// Close registration after event date.
	CloseRegistration *bool
	// Contact email for registration
	ContactEmail *string
	// Contact name for registration
	ContactName *string
	// Set the email language to one of the following:
	// `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
	EmailLanguage *string
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLogin *bool
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLoginDomains *string
	// Send follow-up email to absentees.
	FollowUpAbsenteesEmailNotification *Webinar200ApplicationXMLSettingsFollowUpAbsenteesEmailNotification
	// Send follow-up email to attendees.
	FollowUpAttendeesEmailNotification *Webinar200ApplicationXMLSettingsFollowUpAttendeesEmailNotification
	// List of global dial-in countries
	GlobalDialInCountries []string
	// Default to HD video.
	HdVideo *bool
	// Start video when host joins webinar.
	HostVideo *bool
	// `true`- Only authenticated users can join Webinar.
	MeetingAuthentication *bool
	// Send notification email to registrants when the host updates a webinar.
	NotifyRegistrants *bool
	// Make the webinar on-demand
	OnDemand *bool
	// * `true`: Send invitation email to panelists.
	//
	// * `false`: Do not send invitation email to panelists.
	PanelistsInvitationEmailNotification *bool
	// Start video when panelists join webinar.
	PanelistsVideo *bool
	// Zoom will open a survey page in attendees' browsers after leaving the webinar
	PostWebinarSurvey *bool
	// Enable practice session.
	PracticeSession *bool
	// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	QuestionAndAnswer *Webinar200ApplicationXMLSettingsQuestionAndAnswer
	// Send confirmation email to registrants
	RegistrantsConfirmationEmail *bool
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool
	// Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
	RegistrantsRestrictNumber *int64
	// Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
	RegistrationType *Webinar200ApplicationXMLSettingsRegistrationTypeEnum
	// Show social share buttons on the registration page.
	ShowShareButton *bool
	// Survey url for post webinar survey
	SurveyURL *string
}

type Webinar200ApplicationXMLTrackingFields struct {
	// Tracking fields type
	Field *string
	// Tracking fields value
	Value *string
}

// Webinar200ApplicationXMLTypeEnum - Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type Webinar200ApplicationXMLTypeEnum string

const (
	Webinar200ApplicationXMLTypeEnumFive Webinar200ApplicationXMLTypeEnum = "5"
	Webinar200ApplicationXMLTypeEnumSix  Webinar200ApplicationXMLTypeEnum = "6"
	Webinar200ApplicationXMLTypeEnumNine Webinar200ApplicationXMLTypeEnum = "9"
)

func (e *Webinar200ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = Webinar200ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationXMLTypeEnum: %s", s)
	}
}

// Webinar200ApplicationXML - Webinar object.
type Webinar200ApplicationXML struct {
	// Webinar agenda.
	Agenda *string
	// Create time.
	CreatedAt *time.Time
	// Webinar duration.
	Duration *int64
	// Email address of the meeting host.
	HostEmail *string
	// ID of the user set as host of webinar.
	HostID *string
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64
	// URL to join the Webinar. This URL should only be shared with the users who should be invited to the Webinar.
	JoinURL *string
	// Array of occurrence objects.
	Occurrences []Webinar200ApplicationXMLOccurrences
	// Webinar passcode.
	//
	// If "Require a passcode when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	//
	//
	//
	//
	//
	Password *string
	// Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
	Recurrence *Webinar200ApplicationXMLRecurrenceWebinar
	// Webinar settings.
	Settings *Webinar200ApplicationXMLSettings
	// Webinar start time in GMT/UTC.
	StartTime *time.Time
	// <br><aside>The <code>start_url</code> of a Webinar is a URL using which a host or an alternative host can start the Webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar.
	//
	// The expiration time for the <code>start_url</code> field listed in the response of [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) is two hours for all regular users.
	//
	// For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.
	//
	// For security reasons, to retrieve the latest value for the <code>start_url</code> field programmatically (after expiry), you must call the [Retrieve a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinar) and refer to the value of the <code>start_url</code> field in the response.</aside><br><br><br>
	StartURL *string
	// Time zone to format start_time.
	Timezone *string
	// Webinar topic.
	Topic *string
	// Tracking fields
	TrackingFields []Webinar200ApplicationXMLTrackingFields
	// Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *Webinar200ApplicationXMLTypeEnum
	// Unique Webinar ID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). You can retrieve a list of UUIDs from past Webinar instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/pastwebinars). Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	//
	//
	UUID *string
}

// Webinar200ApplicationJSONOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type Webinar200ApplicationJSONOccurrences struct {
	// Duration.
	Duration *int64 `json:"duration,omitempty"`
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string `json:"occurrence_id,omitempty"`
	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Occurrence status.
	Status *string `json:"status,omitempty"`
}

// Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum string

const (
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnumMinus1 Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "-1"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnumOne    Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "1"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnumTwo    Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "2"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnumThree  Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "3"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnumFour   Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum = "4"
)

func (e *Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum: %s", s)
	}
}

// Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum string

const (
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumOne   Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "1"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumTwo   Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "2"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumThree Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "3"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumFour  Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "4"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumFive  Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "5"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumSix   Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "6"
	Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnumSeven Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum = "7"
)

func (e *Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum: %s", s)
	}
}

// Webinar200ApplicationJSONRecurrenceWebinarTypeEnum - Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type Webinar200ApplicationJSONRecurrenceWebinarTypeEnum string

const (
	Webinar200ApplicationJSONRecurrenceWebinarTypeEnumOne   Webinar200ApplicationJSONRecurrenceWebinarTypeEnum = "1"
	Webinar200ApplicationJSONRecurrenceWebinarTypeEnumTwo   Webinar200ApplicationJSONRecurrenceWebinarTypeEnum = "2"
	Webinar200ApplicationJSONRecurrenceWebinarTypeEnumThree Webinar200ApplicationJSONRecurrenceWebinarTypeEnum = "3"
)

func (e *Webinar200ApplicationJSONRecurrenceWebinarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Webinar200ApplicationJSONRecurrenceWebinarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONRecurrenceWebinarTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSONRecurrenceWebinar - Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
type Webinar200ApplicationJSONRecurrenceWebinar struct {
	// Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the webinar will recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month, the webinar should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field. <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *Webinar200ApplicationJSONRecurrenceWebinarMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the webinar should recur. For instance, if you would like to schedule a Webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type Webinar200ApplicationJSONRecurrenceWebinarTypeEnum `json:"type"`
	// Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat. <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `"1"` as the value of this field.  <br><br> **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the Webinar should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	// <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	//
	//
	WeeklyDays *string `json:"weekly_days,omitempty"`
}

// Webinar200ApplicationJSONSettingsApprovalTypeEnum - `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type Webinar200ApplicationJSONSettingsApprovalTypeEnum string

const (
	Webinar200ApplicationJSONSettingsApprovalTypeEnumZero Webinar200ApplicationJSONSettingsApprovalTypeEnum = "0"
	Webinar200ApplicationJSONSettingsApprovalTypeEnumOne  Webinar200ApplicationJSONSettingsApprovalTypeEnum = "1"
	Webinar200ApplicationJSONSettingsApprovalTypeEnumTwo  Webinar200ApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *Webinar200ApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = Webinar200ApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
type Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum string

const (
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumZero  Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "0"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumOne   Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "1"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumTwo   Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "2"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumThree Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "3"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFour  Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "4"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFive  Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "5"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSix   Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "6"
	Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSeven Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "7"
)

func (e *Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification - Send reminder email to attendees and panelists.
type Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification struct {
	// * `true`: Send reminder email to attendees and panelists.
	//
	// * `false`: Do not send reminder email to attendees and panelists.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
	Type *Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum `json:"type,omitempty"`
}

// Webinar200ApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the webinar.
type Webinar200ApplicationJSONSettingsAudioEnum string

const (
	Webinar200ApplicationJSONSettingsAudioEnumBoth      Webinar200ApplicationJSONSettingsAudioEnum = "both"
	Webinar200ApplicationJSONSettingsAudioEnumTelephony Webinar200ApplicationJSONSettingsAudioEnum = "telephony"
	Webinar200ApplicationJSONSettingsAudioEnumVoip      Webinar200ApplicationJSONSettingsAudioEnum = "voip"
)

func (e *Webinar200ApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = Webinar200ApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsAudioEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type Webinar200ApplicationJSONSettingsAutoRecordingEnum string

const (
	Webinar200ApplicationJSONSettingsAutoRecordingEnumLocal Webinar200ApplicationJSONSettingsAutoRecordingEnum = "local"
	Webinar200ApplicationJSONSettingsAutoRecordingEnumCloud Webinar200ApplicationJSONSettingsAutoRecordingEnum = "cloud"
	Webinar200ApplicationJSONSettingsAutoRecordingEnumNone  Webinar200ApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *Webinar200ApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = Webinar200ApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum string

const (
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumZero  Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "0"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumOne   Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "1"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumTwo   Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "2"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumThree Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "3"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFour  Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "4"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFive  Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "5"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSix   Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "6"
	Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSeven Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "7"
)

func (e *Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotification - Send follow-up email to absentees.
type Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotification struct {
	// * `true`: Send follow-up email to absentees.
	//
	// * `false`: Do not send follow-up email to absentees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum string

const (
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumZero  Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "0"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumOne   Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "1"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumTwo   Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "2"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumThree Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "3"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFour  Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "4"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFive  Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "5"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSix   Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "6"
	Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSeven Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "7"
)

func (e *Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotification - Send follow-up email to attendees.
type Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotification struct {
	// * `true`: Send follow-up email to attendees.
	//
	// * `false`: Do not send follow-up email to attendees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum - Indicate whether you want attendees to be able to view answered questions only or view all questions.
//
// * `only`: Attendees are able to view answered questions only.
//
// *  `all`: Attendees are able to view all questions submitted in the Q&A.
type Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum string

const (
	Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumOnly Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "only"
	Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumAll  Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "all"
)

func (e *Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "only":
		fallthrough
	case "all":
		*e = Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettingsQuestionAndAnswer - [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
type Webinar200ApplicationJSONSettingsQuestionAndAnswer struct {
	// * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
	//
	// * `false`: Do not allow anonymous questions.
	AllowAnonymousQuestions *bool `json:"allow_anonymous_questions,omitempty"`
	// Indicate whether you want attendees to be able to view answered questions only or view all questions.
	//
	// * `only`: Attendees are able to view answered questions only.
	//
	// *  `all`: Attendees are able to view all questions submitted in the Q&A.
	AnswerQuestions *Webinar200ApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum `json:"answer_questions,omitempty"`
	// * `true`: Attendees can answer questions or leave a comment in the question thread.
	//
	// * `false`: Attendees can not answer questions or leave a comment in the question thread
	AttendeesCanComment *bool `json:"attendees_can_comment,omitempty"`
	// * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
	//
	// * `false`: Attendees can not click the thumbs up butoon on questions.
	AttendeesCanUpvote *bool `json:"attendees_can_upvote,omitempty"`
	// * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	//
	// * `false`: Disable Q&A for webinar.
	Enable *bool `json:"enable,omitempty"`
}

// Webinar200ApplicationJSONSettingsRegistrationTypeEnum - Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
type Webinar200ApplicationJSONSettingsRegistrationTypeEnum string

const (
	Webinar200ApplicationJSONSettingsRegistrationTypeEnumOne   Webinar200ApplicationJSONSettingsRegistrationTypeEnum = "1"
	Webinar200ApplicationJSONSettingsRegistrationTypeEnumTwo   Webinar200ApplicationJSONSettingsRegistrationTypeEnum = "2"
	Webinar200ApplicationJSONSettingsRegistrationTypeEnumThree Webinar200ApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *Webinar200ApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Webinar200ApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSONSettings - Webinar settings.
type Webinar200ApplicationJSONSettings struct {
	// Allow attendees to join from multiple devices.
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host emails or IDs. Multiple values separated by comma.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *Webinar200ApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Send reminder email to attendees and panelists.
	AttendeesAndPanelistsReminderEmailNotification *Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification `json:"attendees_and_panelists_reminder_email_notification,omitempty"`
	// Determine how participants can join the audio portion of the webinar.
	Audio *Webinar200ApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string `json:"authentication_name,omitempty"`
	// Webinar authentication option id.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *Webinar200ApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Close registration after event date.
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Set the email language to one of the following:
	// `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
	EmailLanguage *string `json:"email_language,omitempty"`
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// Send follow-up email to absentees.
	FollowUpAbsenteesEmailNotification *Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotification `json:"follow_up_absentees_email_notification,omitempty"`
	// Send follow-up email to attendees.
	FollowUpAttendeesEmailNotification *Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotification `json:"follow_up_attendees_email_notification,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Default to HD video.
	HdVideo *bool `json:"hd_video,omitempty"`
	// Start video when host joins webinar.
	HostVideo *bool `json:"host_video,omitempty"`
	// `true`- Only authenticated users can join Webinar.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Send notification email to registrants when the host updates a webinar.
	NotifyRegistrants *bool `json:"notify_registrants,omitempty"`
	// Make the webinar on-demand
	OnDemand *bool `json:"on_demand,omitempty"`
	// * `true`: Send invitation email to panelists.
	//
	// * `false`: Do not send invitation email to panelists.
	PanelistsInvitationEmailNotification *bool `json:"panelists_invitation_email_notification,omitempty"`
	// Start video when panelists join webinar.
	PanelistsVideo *bool `json:"panelists_video,omitempty"`
	// Zoom will open a survey page in attendees' browsers after leaving the webinar
	PostWebinarSurvey *bool `json:"post_webinar_survey,omitempty"`
	// Enable practice session.
	PracticeSession *bool `json:"practice_session,omitempty"`
	// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	QuestionAndAnswer *Webinar200ApplicationJSONSettingsQuestionAndAnswer `json:"question_and_answer,omitempty"`
	// Send confirmation email to registrants
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
	RegistrantsRestrictNumber *int64 `json:"registrants_restrict_number,omitempty"`
	// Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
	RegistrationType *Webinar200ApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the registration page.
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Survey url for post webinar survey
	SurveyURL *string `json:"survey_url,omitempty"`
}

type Webinar200ApplicationJSONTrackingFields struct {
	// Tracking fields type
	Field *string `json:"field,omitempty"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// Webinar200ApplicationJSONTypeEnum - Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type Webinar200ApplicationJSONTypeEnum string

const (
	Webinar200ApplicationJSONTypeEnumFive Webinar200ApplicationJSONTypeEnum = "5"
	Webinar200ApplicationJSONTypeEnumSix  Webinar200ApplicationJSONTypeEnum = "6"
	Webinar200ApplicationJSONTypeEnumNine Webinar200ApplicationJSONTypeEnum = "9"
)

func (e *Webinar200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = Webinar200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Webinar200ApplicationJSONTypeEnum: %s", s)
	}
}

// Webinar200ApplicationJSON - Webinar object.
type Webinar200ApplicationJSON struct {
	// Webinar agenda.
	Agenda *string `json:"agenda,omitempty"`
	// Create time.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Webinar duration.
	Duration *int64 `json:"duration,omitempty"`
	// Email address of the meeting host.
	HostEmail *string `json:"host_email,omitempty"`
	// ID of the user set as host of webinar.
	HostID *string `json:"host_id,omitempty"`
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64 `json:"id,omitempty"`
	// URL to join the Webinar. This URL should only be shared with the users who should be invited to the Webinar.
	JoinURL *string `json:"join_url,omitempty"`
	// Array of occurrence objects.
	Occurrences []Webinar200ApplicationJSONOccurrences `json:"occurrences,omitempty"`
	// Webinar passcode.
	//
	// If "Require a passcode when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	//
	//
	//
	//
	//
	Password *string `json:"password,omitempty"`
	// Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
	Recurrence *Webinar200ApplicationJSONRecurrenceWebinar `json:"recurrence,omitempty"`
	// Webinar settings.
	Settings *Webinar200ApplicationJSONSettings `json:"settings,omitempty"`
	// Webinar start time in GMT/UTC.
	StartTime *time.Time `json:"start_time,omitempty"`
	// <br><aside>The <code>start_url</code> of a Webinar is a URL using which a host or an alternative host can start the Webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the Webinar.
	//
	// The expiration time for the <code>start_url</code> field listed in the response of [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) is two hours for all regular users.
	//
	// For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.
	//
	// For security reasons, to retrieve the latest value for the <code>start_url</code> field programmatically (after expiry), you must call the [Retrieve a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinar) and refer to the value of the <code>start_url</code> field in the response.</aside><br><br><br>
	StartURL *string `json:"start_url,omitempty"`
	// Time zone to format start_time.
	Timezone *string `json:"timezone,omitempty"`
	// Webinar topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []Webinar200ApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Webinar Types:<br>`5` - Webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *Webinar200ApplicationJSONTypeEnum `json:"type,omitempty"`
	// Unique Webinar ID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). You can retrieve a list of UUIDs from past Webinar instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/pastwebinars). Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	//
	//
	UUID *string `json:"uuid,omitempty"`
}

type WebinarResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Success
	Webinar200ApplicationJSONObject *Webinar200ApplicationJSON
}
