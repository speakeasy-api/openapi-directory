// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// EnableEnhancedMonitoringXAmzTargetEnum
type EnableEnhancedMonitoringXAmzTargetEnum string

const (
	EnableEnhancedMonitoringXAmzTargetEnumKinesis20131202EnableEnhancedMonitoring EnableEnhancedMonitoringXAmzTargetEnum = "Kinesis_20131202.EnableEnhancedMonitoring"
)

func (e *EnableEnhancedMonitoringXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Kinesis_20131202.EnableEnhancedMonitoring":
		*e = EnableEnhancedMonitoringXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnableEnhancedMonitoringXAmzTargetEnum: %s", s)
	}
}

type EnableEnhancedMonitoringHeaders struct {
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        EnableEnhancedMonitoringXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type EnableEnhancedMonitoringRequest struct {
	Headers EnableEnhancedMonitoringHeaders
	Request shared.EnableEnhancedMonitoringInput `request:"mediaType=application/json"`
}

type EnableEnhancedMonitoringResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	EnhancedMonitoringOutput *shared.EnhancedMonitoringOutput
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
