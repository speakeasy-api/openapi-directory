// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TemplateDefinitionNewLayoutFormatEnum - Defines template page size
type TemplateDefinitionNewLayoutFormatEnum string

const (
	TemplateDefinitionNewLayoutFormatEnumA4     TemplateDefinitionNewLayoutFormatEnum = "A4"
	TemplateDefinitionNewLayoutFormatEnumLetter TemplateDefinitionNewLayoutFormatEnum = "letter"
	TemplateDefinitionNewLayoutFormatEnumCustom TemplateDefinitionNewLayoutFormatEnum = "custom"
)

func (e *TemplateDefinitionNewLayoutFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "A4":
		fallthrough
	case "letter":
		fallthrough
	case "custom":
		*e = TemplateDefinitionNewLayoutFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionNewLayoutFormatEnum: %s", s)
	}
}

// TemplateDefinitionNewLayoutMargins - Page margins in units
type TemplateDefinitionNewLayoutMargins struct {
	Bottom *float64 `json:"bottom,omitempty"`
	Left   *float64 `json:"left,omitempty"`
	Right  *float64 `json:"right,omitempty"`
	Top    *float64 `json:"top,omitempty"`
}

// TemplateDefinitionNewLayoutOrientationEnum - Page orientation
type TemplateDefinitionNewLayoutOrientationEnum string

const (
	TemplateDefinitionNewLayoutOrientationEnumPortrait  TemplateDefinitionNewLayoutOrientationEnum = "portrait"
	TemplateDefinitionNewLayoutOrientationEnumLandscape TemplateDefinitionNewLayoutOrientationEnum = "landscape"
)

func (e *TemplateDefinitionNewLayoutOrientationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "portrait":
		fallthrough
	case "landscape":
		*e = TemplateDefinitionNewLayoutOrientationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionNewLayoutOrientationEnum: %s", s)
	}
}

// TemplateDefinitionNewLayoutRepeatLayoutFormatEnum - Defines template page size
type TemplateDefinitionNewLayoutRepeatLayoutFormatEnum string

const (
	TemplateDefinitionNewLayoutRepeatLayoutFormatEnumA4     TemplateDefinitionNewLayoutRepeatLayoutFormatEnum = "A4"
	TemplateDefinitionNewLayoutRepeatLayoutFormatEnumLetter TemplateDefinitionNewLayoutRepeatLayoutFormatEnum = "letter"
	TemplateDefinitionNewLayoutRepeatLayoutFormatEnumCustom TemplateDefinitionNewLayoutRepeatLayoutFormatEnum = "custom"
)

func (e *TemplateDefinitionNewLayoutRepeatLayoutFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "A4":
		fallthrough
	case "letter":
		fallthrough
	case "custom":
		*e = TemplateDefinitionNewLayoutRepeatLayoutFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionNewLayoutRepeatLayoutFormatEnum: %s", s)
	}
}

// TemplateDefinitionNewLayoutRepeatLayout - Defines page size if layout is repeated on the page e.g sheet labels
type TemplateDefinitionNewLayoutRepeatLayout struct {
	// Defines template page size
	Format *TemplateDefinitionNewLayoutRepeatLayoutFormatEnum `json:"format,omitempty"`
	// Page height in units
	Height *float64 `json:"height,omitempty"`
	// Page width in units
	Width *float64 `json:"width,omitempty"`
}

// TemplateDefinitionNewLayoutRotaionEnum - Page rotation in degrees
type TemplateDefinitionNewLayoutRotaionEnum string

const (
	TemplateDefinitionNewLayoutRotaionEnumZero                 TemplateDefinitionNewLayoutRotaionEnum = "0"
	TemplateDefinitionNewLayoutRotaionEnumNinety               TemplateDefinitionNewLayoutRotaionEnum = "90"
	TemplateDefinitionNewLayoutRotaionEnumOneHundredAndEighty  TemplateDefinitionNewLayoutRotaionEnum = "180"
	TemplateDefinitionNewLayoutRotaionEnumTwoHundredAndSeventy TemplateDefinitionNewLayoutRotaionEnum = "270"
)

func (e *TemplateDefinitionNewLayoutRotaionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "90":
		fallthrough
	case "180":
		fallthrough
	case "270":
		*e = TemplateDefinitionNewLayoutRotaionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionNewLayoutRotaionEnum: %s", s)
	}
}

// TemplateDefinitionNewLayoutUnitEnum - Measure unit
type TemplateDefinitionNewLayoutUnitEnum string

const (
	TemplateDefinitionNewLayoutUnitEnumCm TemplateDefinitionNewLayoutUnitEnum = "cm"
	TemplateDefinitionNewLayoutUnitEnumIn TemplateDefinitionNewLayoutUnitEnum = "in"
)

func (e *TemplateDefinitionNewLayoutUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cm":
		fallthrough
	case "in":
		*e = TemplateDefinitionNewLayoutUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionNewLayoutUnitEnum: %s", s)
	}
}

// TemplateDefinitionNewLayout - Defines template layout (e.g page format, margins).
type TemplateDefinitionNewLayout struct {
	// Defines how many pages or labels should be empty
	EmptyLabels *int64 `json:"emptyLabels,omitempty"`
	// Defines template page size
	Format *TemplateDefinitionNewLayoutFormatEnum `json:"format,omitempty"`
	// Page height in units
	Height *float64 `json:"height,omitempty"`
	// Page margins in units
	Margins *TemplateDefinitionNewLayoutMargins `json:"margins,omitempty"`
	// Page orientation
	Orientation *TemplateDefinitionNewLayoutOrientationEnum `json:"orientation,omitempty"`
	// Defines page size if layout is repeated on the page e.g sheet labels
	RepeatLayout *TemplateDefinitionNewLayoutRepeatLayout `json:"repeatLayout,omitempty"`
	// Page rotation in degrees
	Rotaion *TemplateDefinitionNewLayoutRotaionEnum `json:"rotaion,omitempty"`
	// Measure unit
	Unit *TemplateDefinitionNewLayoutUnitEnum `json:"unit,omitempty"`
	// Page width in units
	Width *float64 `json:"width,omitempty"`
}

type TemplateDefinitionNewPagesMargins struct {
	// Page or label margin from bottom
	Bottom *float64 `json:"bottom,omitempty"`
	// Page or label margin from right
	Right *float64 `json:"right,omitempty"`
}

type TemplateDefinitionNewPages struct {
	Components []Component `json:"components,omitempty"`
	// Page height in units
	Height  *float64                           `json:"height,omitempty"`
	Margins *TemplateDefinitionNewPagesMargins `json:"margins,omitempty"`
	// Page width in units
	Width *float64 `json:"width,omitempty"`
}

// TemplateDefinitionNew - Template configuration
type TemplateDefinitionNew struct {
	// Indicates if the template is a draft or published.
	IsDraft *bool `json:"isDraft,omitempty"`
	// Defines template layout (e.g page format, margins).
	Layout *TemplateDefinitionNewLayout `json:"layout,omitempty"`
	// Template name
	Name string `json:"name"`
	// Defines page or label size, margins and components on page or label
	Pages []TemplateDefinitionNewPages `json:"pages,omitempty"`
	// A list of tags assigned to a template
	Tags []string `json:"tags,omitempty"`
}
