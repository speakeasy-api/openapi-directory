// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FilterEventTypeEnum string

const (
	FilterEventTypeEnumEventTypeUnspecified  FilterEventTypeEnum = "EVENT_TYPE_UNSPECIFIED"
	FilterEventTypeEnumUpgradeAvailableEvent FilterEventTypeEnum = "UPGRADE_AVAILABLE_EVENT"
	FilterEventTypeEnumUpgradeEvent          FilterEventTypeEnum = "UPGRADE_EVENT"
	FilterEventTypeEnumSecurityBulletinEvent FilterEventTypeEnum = "SECURITY_BULLETIN_EVENT"
)

func (e FilterEventTypeEnum) ToPointer() *FilterEventTypeEnum {
	return &e
}

func (e *FilterEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "UPGRADE_AVAILABLE_EVENT":
		fallthrough
	case "UPGRADE_EVENT":
		fallthrough
	case "SECURITY_BULLETIN_EVENT":
		*e = FilterEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterEventTypeEnum: %v", v)
	}
}

// Filter - Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
type Filter struct {
	// Event types to allowlist.
	EventType []FilterEventTypeEnum `json:"eventType,omitempty"`
}
