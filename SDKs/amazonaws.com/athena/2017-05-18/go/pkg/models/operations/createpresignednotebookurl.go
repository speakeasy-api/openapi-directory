// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePresignedNotebookURLXAmzTargetEnum
type CreatePresignedNotebookURLXAmzTargetEnum string

const (
	CreatePresignedNotebookURLXAmzTargetEnumAmazonAthenaCreatePresignedNotebookURL CreatePresignedNotebookURLXAmzTargetEnum = "AmazonAthena.CreatePresignedNotebookUrl"
)

func (e CreatePresignedNotebookURLXAmzTargetEnum) ToPointer() *CreatePresignedNotebookURLXAmzTargetEnum {
	return &e
}

func (e *CreatePresignedNotebookURLXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonAthena.CreatePresignedNotebookUrl":
		*e = CreatePresignedNotebookURLXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePresignedNotebookURLXAmzTargetEnum: %v", v)
	}
}

type CreatePresignedNotebookURLRequest struct {
	CreatePresignedNotebookURLRequest shared.CreatePresignedNotebookURLRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                 *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                        CreatePresignedNotebookURLXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePresignedNotebookURLResponse struct {
	ContentType string
	// Success
	CreatePresignedNotebookURLResponse *shared.CreatePresignedNotebookURLResponse
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
