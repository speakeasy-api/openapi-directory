"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Debugger:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def clouddebugger_debugger_debuggees_breakpoints_delete(self, request: operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest, security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteSecurity) -> operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse:
        r"""Deletes the breakpoint from the debuggee."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest, base_url, '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}', request)
        
        query_params = utils.get_query_params(operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def clouddebugger_debugger_debuggees_breakpoints_get(self, request: operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest, security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetSecurity) -> operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse:
        r"""Gets breakpoint information."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest, base_url, '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}', request)
        
        query_params = utils.get_query_params(operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetBreakpointResponse])
                res.get_breakpoint_response = out

        return res

    def clouddebugger_debugger_debuggees_breakpoints_list(self, request: operations.ClouddebuggerDebuggerDebuggeesBreakpointsListRequest, security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity) -> operations.ClouddebuggerDebuggerDebuggeesBreakpointsListResponse:
        r"""Lists all breakpoints for the debuggee."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddebuggerDebuggerDebuggeesBreakpointsListRequest, base_url, '/v2/debugger/debuggees/{debuggeeId}/breakpoints', request)
        
        query_params = utils.get_query_params(operations.ClouddebuggerDebuggerDebuggeesBreakpointsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddebuggerDebuggerDebuggeesBreakpointsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBreakpointsResponse])
                res.list_breakpoints_response = out

        return res

    def clouddebugger_debugger_debuggees_breakpoints_set(self, request: operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest, security: operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetSecurity) -> operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse:
        r"""Sets the breakpoint to the debuggee."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest, base_url, '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "breakpoint", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetBreakpointResponse])
                res.set_breakpoint_response = out

        return res

    def clouddebugger_debugger_debuggees_list(self, request: operations.ClouddebuggerDebuggerDebuggeesListRequest, security: operations.ClouddebuggerDebuggerDebuggeesListSecurity) -> operations.ClouddebuggerDebuggerDebuggeesListResponse:
        r"""Lists all the debuggees that the user has access to."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/debugger/debuggees'
        
        query_params = utils.get_query_params(operations.ClouddebuggerDebuggerDebuggeesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddebuggerDebuggerDebuggeesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDebuggeesResponse])
                res.list_debuggees_response = out

        return res

    