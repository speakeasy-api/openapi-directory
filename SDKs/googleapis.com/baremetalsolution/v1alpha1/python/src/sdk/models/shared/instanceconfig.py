"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import networkaddress as shared_networkaddress
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceConfig:
    r"""Configuration parameters for a new instance."""
    
    client_network: Optional[shared_networkaddress.NetworkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientNetwork'), 'exclude': lambda f: f is None }})
    r"""A network."""  
    hyperthreading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperthreading'), 'exclude': lambda f: f is None }})
    r"""Whether the instance should be provisioned with Hyperthreading enabled."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A transient unique identifier to idenfity an instance within an ProvisioningConfig request."""  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})
    r"""Instance type."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location where to deploy the instance."""  
    os_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osImage'), 'exclude': lambda f: f is None }})
    r"""OS image to initialize the instance."""  
    private_network: Optional[shared_networkaddress.NetworkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateNetwork'), 'exclude': lambda f: f is None }})
    r"""A network."""  
    user_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userNote'), 'exclude': lambda f: f is None }})
    r"""User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617)."""  
    