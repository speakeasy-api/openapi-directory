<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ValueMatcher - Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 7]
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ValueMatcher
{
    /**
     * If specified, a match occurs if and only if the target value is a bool value and is equal to this field.
     * 
     * @var ?bool $boolMatch
     */
	#[\JMS\Serializer\Annotation\SerializedName('boolMatch')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $boolMatch = null;
    
    /**
     * Specifies the way to match a double value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DoubleMatcher $doubleMatch
     */
	#[\JMS\Serializer\Annotation\SerializedName('doubleMatch')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DoubleMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DoubleMatcher $doubleMatch = null;
    
    /**
     * Specifies the way to match a list value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ListMatcher $listMatch
     */
	#[\JMS\Serializer\Annotation\SerializedName('listMatch')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ListMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ListMatcher $listMatch = null;
    
    /**
     * NullMatch is an empty message to specify a null value.
     * 
     * @var ?array<string, mixed> $nullMatch
     */
	#[\JMS\Serializer\Annotation\SerializedName('nullMatch')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $nullMatch = null;
    
    /**
     * If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.
     * 
     * @var ?bool $presentMatch
     */
	#[\JMS\Serializer\Annotation\SerializedName('presentMatch')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $presentMatch = null;
    
    /**
     * Specifies the way to match a string. [#next-free-field: 7]
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StringMatcher $stringMatch
     */
	#[\JMS\Serializer\Annotation\SerializedName('stringMatch')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StringMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StringMatcher $stringMatch = null;
    
	public function __construct()
	{
		$this->boolMatch = null;
		$this->doubleMatch = null;
		$this->listMatch = null;
		$this->nullMatch = null;
		$this->presentMatch = null;
		$this->stringMatch = null;
	}
}
