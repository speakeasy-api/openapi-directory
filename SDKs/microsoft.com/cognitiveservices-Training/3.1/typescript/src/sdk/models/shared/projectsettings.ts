/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ImageProcessingSettings } from "./imageprocessingsettings";
import { Expose, Type } from "class-transformer";

/**
 * Gets or sets the classification type of the project.
 */
export enum ProjectSettingsClassificationTypeEnum {
  Multiclass = "Multiclass",
  Multilabel = "Multilabel",
}

export enum ProjectSettingsTargetExportPlatformsEnum {
  CoreML = "CoreML",
  TensorFlow = "TensorFlow",
  DockerFile = "DockerFile",
  Onnx = "ONNX",
  Vaidk = "VAIDK",
}

/**
 * Represents settings associated with a project.
 */
export class ProjectSettingsInput extends SpeakeasyBase {
  /**
   * Gets or sets the classification type of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classificationType" })
  classificationType?: ProjectSettingsClassificationTypeEnum;

  /**
   * Gets or sets the id of the Domain to use with this project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domainId" })
  domainId?: string;

  /**
   * Represents image preprocessing settings used by image augmentation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageProcessingSettings" })
  @Type(() => ImageProcessingSettings)
  imageProcessingSettings?: ImageProcessingSettings;

  /**
   * A list of ExportPlatform that the trained model should be able to support.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetExportPlatforms" })
  targetExportPlatforms?: ProjectSettingsTargetExportPlatformsEnum[];
}

/**
 * Represents settings associated with a project.
 */
export class ProjectSettings extends SpeakeasyBase {
  /**
   * Gets or sets the classification type of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classificationType" })
  classificationType?: ProjectSettingsClassificationTypeEnum;

  /**
   * Detection parameters in use, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectionParameters" })
  detectionParameters?: string;

  /**
   * Gets or sets the id of the Domain to use with this project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domainId" })
  domainId?: string;

  /**
   * Represents image preprocessing settings used by image augmentation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageProcessingSettings" })
  @Type(() => ImageProcessingSettings)
  imageProcessingSettings?: ImageProcessingSettings;

  /**
   * A list of ExportPlatform that the trained model should be able to support.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetExportPlatforms" })
  targetExportPlatforms?: ProjectSettingsTargetExportPlatformsEnum[];

  /**
   * Indicates if negative set is being used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useNegativeSet" })
  useNegativeSet?: boolean;
}
