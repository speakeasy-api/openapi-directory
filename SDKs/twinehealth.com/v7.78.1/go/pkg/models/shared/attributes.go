// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AttributesAttendeesResponseStatusEnum - Status of responses from attendees
type AttributesAttendeesResponseStatusEnum string

const (
	AttributesAttendeesResponseStatusEnumNeedsAction AttributesAttendeesResponseStatusEnum = "needsAction"
	AttributesAttendeesResponseStatusEnumDeclined    AttributesAttendeesResponseStatusEnum = "declined"
	AttributesAttendeesResponseStatusEnumTentative   AttributesAttendeesResponseStatusEnum = "tentative"
	AttributesAttendeesResponseStatusEnumAccepted    AttributesAttendeesResponseStatusEnum = "accepted"
)

func (e *AttributesAttendeesResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "needsAction":
		fallthrough
	case "declined":
		fallthrough
	case "tentative":
		fallthrough
	case "accepted":
		*e = AttributesAttendeesResponseStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AttributesAttendeesResponseStatusEnum: %s", s)
	}
}

type AttributesAttendees struct {
	// Status of responses from attendees
	ResponseStatus *AttributesAttendeesResponseStatusEnum `json:"response_status,omitempty"`
	User           *string                                `json:"user,omitempty"`
}

// AttributesTypeEnum - The type of calendar event. Immutable after event creation.
type AttributesTypeEnum string

const (
	AttributesTypeEnumPlanCheckIn   AttributesTypeEnum = "plan-check-in"
	AttributesTypeEnumReminder      AttributesTypeEnum = "reminder"
	AttributesTypeEnumTelephoneCall AttributesTypeEnum = "telephone-call"
	AttributesTypeEnumOfficeVisit   AttributesTypeEnum = "office-visit"
	AttributesTypeEnumVideoCall     AttributesTypeEnum = "video-call"
)

func (e *AttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "plan-check-in":
		fallthrough
	case "reminder":
		fallthrough
	case "telephone-call":
		fallthrough
	case "office-visit":
		fallthrough
	case "video-call":
		*e = AttributesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AttributesTypeEnum: %s", s)
	}
}

type Attributes struct {
	// True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.
	AllDay *bool `json:"all_day,omitempty"`
	// List of attendees for the calendar event
	Attendees []AttributesAttendees `json:"attendees,omitempty"`
	// The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.
	CompletedAt *string `json:"completed_at,omitempty"`
	// The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.
	CompletedBy map[string]interface{} `json:"completed_by,omitempty"`
	Description *string                `json:"description,omitempty"`
	// The date and time when the calendar event ends. Not valid for `plan-check-in` event type.
	EndAt    *string `json:"end_at,omitempty"`
	Location *string `json:"location,omitempty"`
	// The date and time when the calendar event starts
	StartAt *string `json:"start_at,omitempty"`
	// The time zone in which the dates for the calendar event are specified
	TimeZone *string `json:"time_zone,omitempty"`
	// The title of the calendar event. Must not be empty or null
	Title *string `json:"title,omitempty"`
	// The type of calendar event. Immutable after event creation.
	Type *AttributesTypeEnum `json:"type,omitempty"`
}
