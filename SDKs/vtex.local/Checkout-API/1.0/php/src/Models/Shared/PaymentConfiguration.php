<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PaymentConfiguration - Payment Configuration object
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PaymentConfiguration
{
    /**
     * By default (when `false`), on a multi-seller purchase is on the run, a simple intersection with installments options configured by every seller will be available. When `true`, this option allows a more complex but flexible installment option, since it considers max installments of every seller configuration, even if those don't match. Installment values ​​may not be equal in this case.
     * 
     * @var ?bool $allowInstallmentsMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowInstallmentsMerge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowInstallmentsMerge = null;
    
    /**
     * Determines whether pre-authorized payments require authentication
     * 
     * @var bool $requiresAuthenticationForPreAuthorizedPaymentOption
     */
	#[\JMS\Serializer\Annotation\SerializedName('requiresAuthenticationForPreAuthorizedPaymentOption')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $requiresAuthenticationForPreAuthorizedPaymentOption;
    
	public function __construct()
	{
		$this->allowInstallmentsMerge = null;
		$this->requiresAuthenticationForPreAuthorizedPaymentOption = false;
	}
}
