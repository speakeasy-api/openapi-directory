/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class EditUserAlt1RequestBodyVideosPrivacy {
    /**
     * Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("add")
    public Boolean add;
    public EditUserAlt1RequestBodyVideosPrivacy withAdd(Boolean add) {
        this.add = add;
        return this;
    }
    
    /**
     * Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    public EditUserAlt1RequestBodyVideosPrivacyCommentsEnum comments;
    public EditUserAlt1RequestBodyVideosPrivacy withComments(EditUserAlt1RequestBodyVideosPrivacyCommentsEnum comments) {
        this.comments = comments;
        return this;
    }
    
    /**
     * Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download")
    public Boolean download;
    public EditUserAlt1RequestBodyVideosPrivacy withDownload(Boolean download) {
        this.download = download;
        return this;
    }
    
    /**
     * The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embed")
    public EditUserAlt1RequestBodyVideosPrivacyEmbedEnum embed;
    public EditUserAlt1RequestBodyVideosPrivacy withEmbed(EditUserAlt1RequestBodyVideosPrivacyEmbedEnum embed) {
        this.embed = embed;
        return this;
    }
    
    /**
     * Who can view the video. This value becomes the default view setting for all future videos that this user uploads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view")
    public EditUserAlt1RequestBodyVideosPrivacyViewEnum view;
    public EditUserAlt1RequestBodyVideosPrivacy withView(EditUserAlt1RequestBodyVideosPrivacyViewEnum view) {
        this.view = view;
        return this;
    }
    
}
