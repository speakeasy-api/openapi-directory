/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new DeliveryPipeline in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesCreate(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/deliveryPipelines",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "deliveryPipelineInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists DeliveryPipelines in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesList(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesListRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/deliveryPipelines",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesListResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDeliveryPipelinesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDeliveryPipelinesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Abandons a Release in the Delivery Pipeline.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesAbandon(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:abandon", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.abandonReleaseResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Release in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesCreate(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/releases",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "releaseInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Releases in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesList(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/releases",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReleasesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReleasesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Advances a Rollout in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvance(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:advance", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "advanceRolloutRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.advanceRolloutResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Approves a Rollout.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApprove(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:approve", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "approveRolloutRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.approveRolloutResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Rollout in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreate(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/rollouts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "rolloutInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Ignores the specified Job in a Rollout.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJob(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{rollout}:ignoreJob",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "ignoreJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ignoreJobResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists JobRuns in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsList(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/jobRuns", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobRunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobRunsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Terminates a Job Run in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminate(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:terminate", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.terminateJobRunResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Rollouts in a given project and location.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsList(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/rollouts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRolloutsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListRolloutsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retries the specified Job in a Rollout.
   */
  clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJob(
    req: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest,
    security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{rollout}:retryJob",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "retryJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse =
        new operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryJobResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  clouddeployProjectsLocationsList(
    req: operations.ClouddeployProjectsLocationsListRequest,
    security: operations.ClouddeployProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ClouddeployProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsListResponse =
        new operations.ClouddeployProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  clouddeployProjectsLocationsOperationsCancel(
    req: operations.ClouddeployProjectsLocationsOperationsCancelRequest,
    security: operations.ClouddeployProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsOperationsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsOperationsCancelResponse =
        new operations.ClouddeployProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  clouddeployProjectsLocationsOperationsList(
    req: operations.ClouddeployProjectsLocationsOperationsListRequest,
    security: operations.ClouddeployProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsOperationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsOperationsListResponse =
        new operations.ClouddeployProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Target in a given project and location.
   */
  clouddeployProjectsLocationsTargetsCreate(
    req: operations.ClouddeployProjectsLocationsTargetsCreateRequest,
    security: operations.ClouddeployProjectsLocationsTargetsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsTargetsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/targets", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsTargetsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsCreateResponse =
        new operations.ClouddeployProjectsLocationsTargetsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a single Target.
   */
  clouddeployProjectsLocationsTargetsDelete(
    req: operations.ClouddeployProjectsLocationsTargetsDeleteRequest,
    security: operations.ClouddeployProjectsLocationsTargetsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsTargetsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsTargetsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsDeleteResponse =
        new operations.ClouddeployProjectsLocationsTargetsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of a single Target.
   */
  clouddeployProjectsLocationsTargetsGet(
    req: operations.ClouddeployProjectsLocationsTargetsGetRequest,
    security: operations.ClouddeployProjectsLocationsTargetsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsTargetsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ClouddeployProjectsLocationsTargetsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsGetResponse =
        new operations.ClouddeployProjectsLocationsTargetsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.target = utils.objectToClass(httpRes?.data, shared.Target);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  clouddeployProjectsLocationsTargetsGetIamPolicy(
    req: operations.ClouddeployProjectsLocationsTargetsGetIamPolicyRequest,
    security: operations.ClouddeployProjectsLocationsTargetsGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsTargetsGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsTargetsGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsGetIamPolicyResponse =
        new operations.ClouddeployProjectsLocationsTargetsGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Targets in a given project and location.
   */
  clouddeployProjectsLocationsTargetsList(
    req: operations.ClouddeployProjectsLocationsTargetsListRequest,
    security: operations.ClouddeployProjectsLocationsTargetsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsTargetsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/targets", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ClouddeployProjectsLocationsTargetsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsListResponse =
        new operations.ClouddeployProjectsLocationsTargetsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTargetsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTargetsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the parameters of a single Target.
   */
  clouddeployProjectsLocationsTargetsPatch(
    req: operations.ClouddeployProjectsLocationsTargetsPatchRequest,
    security: operations.ClouddeployProjectsLocationsTargetsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ClouddeployProjectsLocationsTargetsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsTargetsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsPatchResponse =
        new operations.ClouddeployProjectsLocationsTargetsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  clouddeployProjectsLocationsTargetsSetIamPolicy(
    req: operations.ClouddeployProjectsLocationsTargetsSetIamPolicyRequest,
    security: operations.ClouddeployProjectsLocationsTargetsSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsTargetsSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsTargetsSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsSetIamPolicyResponse =
        new operations.ClouddeployProjectsLocationsTargetsSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  clouddeployProjectsLocationsTargetsTestIamPermissions(
    req: operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest,
    security: operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse =
        new operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
