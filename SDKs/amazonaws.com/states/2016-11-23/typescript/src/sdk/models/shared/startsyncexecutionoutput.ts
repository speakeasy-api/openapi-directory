/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BillingDetails } from "./billingdetails";
import { CloudWatchEventsExecutionDataDetails } from "./cloudwatcheventsexecutiondatadetails";
import { SyncExecutionStatusEnum } from "./syncexecutionstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class StartSyncExecutionOutput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "billingDetails" })
  @Type(() => BillingDetails)
  billingDetails?: BillingDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "cause" })
  cause?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "executionArn" })
  executionArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "input" })
  input?: string;

  /**
   * Provides details about execution input or output.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputDetails" })
  @Type(() => CloudWatchEventsExecutionDataDetails)
  inputDetails?: CloudWatchEventsExecutionDataDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "output" })
  output?: string;

  /**
   * Provides details about execution input or output.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputDetails" })
  @Type(() => CloudWatchEventsExecutionDataDetails)
  outputDetails?: CloudWatchEventsExecutionDataDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "startDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "stateMachineArn" })
  stateMachineArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: SyncExecutionStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "stopDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  stopDate: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "traceHeader" })
  traceHeader?: string;
}
