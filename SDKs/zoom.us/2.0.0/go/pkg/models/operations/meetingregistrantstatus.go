// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MeetingRegistrantStatusSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type MeetingRegistrantStatusPathParams struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

type MeetingRegistrantStatusQueryParams struct {
	// The meeting occurrence ID.
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
}

// MeetingRegistrantStatusApplicationJSONActionEnum - Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant.
type MeetingRegistrantStatusApplicationJSONActionEnum string

const (
	MeetingRegistrantStatusApplicationJSONActionEnumApprove MeetingRegistrantStatusApplicationJSONActionEnum = "approve"
	MeetingRegistrantStatusApplicationJSONActionEnumCancel  MeetingRegistrantStatusApplicationJSONActionEnum = "cancel"
	MeetingRegistrantStatusApplicationJSONActionEnumDeny    MeetingRegistrantStatusApplicationJSONActionEnum = "deny"
)

func (e *MeetingRegistrantStatusApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "cancel":
		fallthrough
	case "deny":
		*e = MeetingRegistrantStatusApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingRegistrantStatusApplicationJSONActionEnum: %s", s)
	}
}

type MeetingRegistrantStatusApplicationJSONRegistrants struct {
	Email *string `json:"email,omitempty"`
	ID    *string `json:"id,omitempty"`
}

type MeetingRegistrantStatusApplicationJSON struct {
	// Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant.
	Action MeetingRegistrantStatusApplicationJSONActionEnum `json:"action"`
	// List of registrants.
	Registrants []MeetingRegistrantStatusApplicationJSONRegistrants `json:"registrants,omitempty"`
}

type MeetingRegistrantStatusRequest struct {
	PathParams  MeetingRegistrantStatusPathParams
	QueryParams MeetingRegistrantStatusQueryParams
	Request     MeetingRegistrantStatusApplicationJSON `request:"mediaType=application/json"`
	Security    MeetingRegistrantStatusSecurity
}

type MeetingRegistrantStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
