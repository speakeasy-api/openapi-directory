/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateServiceNotificationUpdateServiceNotificationRequest {
    /**
     * Whether to send a notification when a participant is added to a conversation. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=AddedToConversation.Enabled")
    public Boolean addedToConversationEnabled;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withAddedToConversationEnabled(Boolean addedToConversationEnabled) {
        this.addedToConversationEnabled = addedToConversationEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=AddedToConversation.Sound")
    public String addedToConversationSound;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withAddedToConversationSound(String addedToConversationSound) {
        this.addedToConversationSound = addedToConversationSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=AddedToConversation.Template")
    public String addedToConversationTemplate;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withAddedToConversationTemplate(String addedToConversationTemplate) {
        this.addedToConversationTemplate = addedToConversationTemplate;
        return this;
    }
    
    /**
     * Weather the notification logging is enabled.
     */
    @SpeakeasyMetadata("form:name=LogEnabled")
    public Boolean logEnabled;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withLogEnabled(Boolean logEnabled) {
        this.logEnabled = logEnabled;
        return this;
    }
    
    /**
     * Whether the new message badge is enabled. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=NewMessage.BadgeCountEnabled")
    public Boolean newMessageBadgeCountEnabled;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withNewMessageBadgeCountEnabled(Boolean newMessageBadgeCountEnabled) {
        this.newMessageBadgeCountEnabled = newMessageBadgeCountEnabled;
        return this;
    }
    
    /**
     * Whether to send a notification when a new message is added to a conversation. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=NewMessage.Enabled")
    public Boolean newMessageEnabled;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withNewMessageEnabled(Boolean newMessageEnabled) {
        this.newMessageEnabled = newMessageEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play when a new message is added to a conversation and `new_message.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=NewMessage.Sound")
    public String newMessageSound;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withNewMessageSound(String newMessageSound) {
        this.newMessageSound = newMessageSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed when a new message is added to a conversation and `new_message.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=NewMessage.Template")
    public String newMessageTemplate;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withNewMessageTemplate(String newMessageTemplate) {
        this.newMessageTemplate = newMessageTemplate;
        return this;
    }
    
    /**
     * Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=NewMessage.WithMedia.Enabled")
    public Boolean newMessageWithMediaEnabled;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withNewMessageWithMediaEnabled(Boolean newMessageWithMediaEnabled) {
        this.newMessageWithMediaEnabled = newMessageWithMediaEnabled;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and `new_message.attachments.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=NewMessage.WithMedia.Template")
    public String newMessageWithMediaTemplate;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withNewMessageWithMediaTemplate(String newMessageWithMediaTemplate) {
        this.newMessageWithMediaTemplate = newMessageWithMediaTemplate;
        return this;
    }
    
    /**
     * Whether to send a notification to a user when they are removed from a conversation. The default is `false`.
     */
    @SpeakeasyMetadata("form:name=RemovedFromConversation.Enabled")
    public Boolean removedFromConversationEnabled;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withRemovedFromConversationEnabled(Boolean removedFromConversationEnabled) {
        this.removedFromConversationEnabled = removedFromConversationEnabled;
        return this;
    }
    
    /**
     * The name of the sound to play to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=RemovedFromConversation.Sound")
    public String removedFromConversationSound;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withRemovedFromConversationSound(String removedFromConversationSound) {
        this.removedFromConversationSound = removedFromConversationSound;
        return this;
    }
    
    /**
     * The template to use to create the notification text displayed to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
     */
    @SpeakeasyMetadata("form:name=RemovedFromConversation.Template")
    public String removedFromConversationTemplate;

    public UpdateServiceNotificationUpdateServiceNotificationRequest withRemovedFromConversationTemplate(String removedFromConversationTemplate) {
        this.removedFromConversationTemplate = removedFromConversationTemplate;
        return this;
    }
    
    public UpdateServiceNotificationUpdateServiceNotificationRequest(){}
}
