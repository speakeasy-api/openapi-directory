// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateSubnetGroupXAmzTargetEnum
type UpdateSubnetGroupXAmzTargetEnum string

const (
	UpdateSubnetGroupXAmzTargetEnumAmazonDaxv3UpdateSubnetGroup UpdateSubnetGroupXAmzTargetEnum = "AmazonDAXV3.UpdateSubnetGroup"
)

func (e *UpdateSubnetGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDAXV3.UpdateSubnetGroup":
		*e = UpdateSubnetGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSubnetGroupXAmzTargetEnum: %s", s)
	}
}

type UpdateSubnetGroupHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        UpdateSubnetGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateSubnetGroupRequest struct {
	Headers UpdateSubnetGroupHeaders
	Request shared.UpdateSubnetGroupRequest `request:"mediaType=application/json"`
}

type UpdateSubnetGroupResponse struct {
	ContentType string
	// InvalidSubnet
	InvalidSubnet interface{}
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// SubnetGroupNotFoundFault
	SubnetGroupNotFoundFault interface{}
	// SubnetInUse
	SubnetInUse interface{}
	// SubnetQuotaExceededFault
	SubnetQuotaExceededFault interface{}
	// Success
	UpdateSubnetGroupResponse *shared.UpdateSubnetGroupResponse
}
