// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableConsoleServerPortConnectionStatusEnum string

const (
	WritableConsoleServerPortConnectionStatusEnumFalse WritableConsoleServerPortConnectionStatusEnum = "false"
	WritableConsoleServerPortConnectionStatusEnumTrue  WritableConsoleServerPortConnectionStatusEnum = "true"
)

func (e *WritableConsoleServerPortConnectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = WritableConsoleServerPortConnectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableConsoleServerPortConnectionStatusEnum: %s", s)
	}
}

// WritableConsoleServerPortTypeEnum - Physical port type
type WritableConsoleServerPortTypeEnum string

const (
	WritableConsoleServerPortTypeEnumDe9       WritableConsoleServerPortTypeEnum = "de-9"
	WritableConsoleServerPortTypeEnumDb25      WritableConsoleServerPortTypeEnum = "db-25"
	WritableConsoleServerPortTypeEnumRj11      WritableConsoleServerPortTypeEnum = "rj-11"
	WritableConsoleServerPortTypeEnumRj12      WritableConsoleServerPortTypeEnum = "rj-12"
	WritableConsoleServerPortTypeEnumRj45      WritableConsoleServerPortTypeEnum = "rj-45"
	WritableConsoleServerPortTypeEnumUsbA      WritableConsoleServerPortTypeEnum = "usb-a"
	WritableConsoleServerPortTypeEnumUsbB      WritableConsoleServerPortTypeEnum = "usb-b"
	WritableConsoleServerPortTypeEnumUsbC      WritableConsoleServerPortTypeEnum = "usb-c"
	WritableConsoleServerPortTypeEnumUsbMiniA  WritableConsoleServerPortTypeEnum = "usb-mini-a"
	WritableConsoleServerPortTypeEnumUsbMiniB  WritableConsoleServerPortTypeEnum = "usb-mini-b"
	WritableConsoleServerPortTypeEnumUsbMicroA WritableConsoleServerPortTypeEnum = "usb-micro-a"
	WritableConsoleServerPortTypeEnumUsbMicroB WritableConsoleServerPortTypeEnum = "usb-micro-b"
	WritableConsoleServerPortTypeEnumOther     WritableConsoleServerPortTypeEnum = "other"
)

func (e *WritableConsoleServerPortTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "de-9":
		fallthrough
	case "db-25":
		fallthrough
	case "rj-11":
		fallthrough
	case "rj-12":
		fallthrough
	case "rj-45":
		fallthrough
	case "usb-a":
		fallthrough
	case "usb-b":
		fallthrough
	case "usb-c":
		fallthrough
	case "usb-mini-a":
		fallthrough
	case "usb-mini-b":
		fallthrough
	case "usb-micro-a":
		fallthrough
	case "usb-micro-b":
		fallthrough
	case "other":
		*e = WritableConsoleServerPortTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableConsoleServerPortTypeEnum: %s", s)
	}
}

type WritableConsoleServerPortInput struct {
	Cable            *NestedCableInput                              `json:"cable,omitempty"`
	ConnectionStatus *WritableConsoleServerPortConnectionStatusEnum `json:"connection_status,omitempty"`
	Description      *string                                        `json:"description,omitempty"`
	Device           int64                                          `json:"device"`
	Name             string                                         `json:"name"`
	Tags             []string                                       `json:"tags,omitempty"`
	// Physical port type
	Type *WritableConsoleServerPortTypeEnum `json:"type,omitempty"`
}
