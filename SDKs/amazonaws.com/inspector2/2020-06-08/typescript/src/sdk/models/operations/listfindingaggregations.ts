/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Contains details about an aggregation request.
 */
export class ListFindingAggregationsRequestBodyAggregationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accountAggregation" })
  @Type(() => shared.AccountAggregation)
  accountAggregation?: shared.AccountAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "amiAggregation" })
  @Type(() => shared.AmiAggregation)
  amiAggregation?: shared.AmiAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "awsEcrContainerAggregation" })
  @Type(() => shared.AwsEcrContainerAggregation)
  awsEcrContainerAggregation?: shared.AwsEcrContainerAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "ec2InstanceAggregation" })
  @Type(() => shared.Ec2InstanceAggregation)
  ec2InstanceAggregation?: shared.Ec2InstanceAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "findingTypeAggregation" })
  @Type(() => shared.FindingTypeAggregation)
  findingTypeAggregation?: shared.FindingTypeAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "imageLayerAggregation" })
  @Type(() => shared.ImageLayerAggregation)
  imageLayerAggregation?: shared.ImageLayerAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "lambdaFunctionAggregation" })
  @Type(() => shared.LambdaFunctionAggregation)
  lambdaFunctionAggregation?: shared.LambdaFunctionAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "lambdaLayerAggregation" })
  @Type(() => shared.LambdaLayerAggregation)
  lambdaLayerAggregation?: shared.LambdaLayerAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "packageAggregation" })
  @Type(() => shared.PackageAggregation)
  packageAggregation?: shared.PackageAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "repositoryAggregation" })
  @Type(() => shared.RepositoryAggregation)
  repositoryAggregation?: shared.RepositoryAggregation;

  @SpeakeasyMetadata()
  @Expose({ name: "titleAggregation" })
  @Type(() => shared.TitleAggregation)
  titleAggregation?: shared.TitleAggregation;
}

/**
 * The type of the aggregation request.
 */
export enum ListFindingAggregationsRequestBodyAggregationTypeEnum {
  FindingType = "FINDING_TYPE",
  Package = "PACKAGE",
  Title = "TITLE",
  Repository = "REPOSITORY",
  Ami = "AMI",
  AwsEc2Instance = "AWS_EC2_INSTANCE",
  AwsEcrContainer = "AWS_ECR_CONTAINER",
  ImageLayer = "IMAGE_LAYER",
  Account = "ACCOUNT",
  AwsLambdaFunction = "AWS_LAMBDA_FUNCTION",
  LambdaLayer = "LAMBDA_LAYER",
}

export class ListFindingAggregationsRequestBody extends SpeakeasyBase {
  /**
   * The Amazon Web Services account IDs to retrieve finding aggregation data for.
   */
  @SpeakeasyMetadata({ elemType: shared.StringFilter })
  @Expose({ name: "accountIds" })
  @Type(() => shared.StringFilter)
  accountIds?: shared.StringFilter[];

  /**
   * Contains details about an aggregation request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aggregationRequest" })
  @Type(() => ListFindingAggregationsRequestBodyAggregationRequest)
  aggregationRequest?: ListFindingAggregationsRequestBodyAggregationRequest;

  /**
   * The type of the aggregation request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aggregationType" })
  aggregationType: ListFindingAggregationsRequestBodyAggregationTypeEnum;

  /**
   * The maximum number of results to return in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}

export class ListFindingAggregationsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListFindingAggregationsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListFindingAggregationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listFindingAggregationsResponse?: shared.ListFindingAggregationsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
