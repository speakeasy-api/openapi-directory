// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type GetZRAccountSettingsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetZRAccountSettingsSettingTypeEnum - The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>
// `meeting`: Meeting settings of the Zoom Rooms Account. <br>
// `signage`: View digital signage settings of the Zoom Rooms Account.
type GetZRAccountSettingsSettingTypeEnum string

const (
	GetZRAccountSettingsSettingTypeEnumMeeting GetZRAccountSettingsSettingTypeEnum = "meeting"
	GetZRAccountSettingsSettingTypeEnumAlert   GetZRAccountSettingsSettingTypeEnum = "alert"
)

func (e *GetZRAccountSettingsSettingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "meeting":
		fallthrough
	case "alert":
		*e = GetZRAccountSettingsSettingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetZRAccountSettingsSettingTypeEnum: %s", s)
	}
}

type GetZRAccountSettingsRequest struct {
	// The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>
	// `meeting`: Meeting settings of the Zoom Rooms Account. <br>
	// `signage`: View digital signage settings of the Zoom Rooms Account.
	SettingType GetZRAccountSettingsSettingTypeEnum `queryParam:"style=form,explode=true,name=setting_type"`
}

// GetZRAccountSettings200ApplicationXML2ClientAlert - The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
type GetZRAccountSettings200ApplicationXML2ClientAlert struct {
	// Display an alert message when an issue is detected with a bluetooth microphone.
	DetectBluetoothMicrophoneErrorAlert *bool
	// Display an alert message when an issue is detected with a bluetooth speaker.
	DetectBluetoothSpeakerErrorAlert *bool
	// Display an alert message when an issue is detected with a camera.
	DetectCameraErrorAlert *bool
	// Display an alert message when an issue is detected with microphone.
	DetectMicrophoneErrorAlert *bool
	// Display an alert message when an issue is detected with a speaker.
	DetectSpeakerErrorAlert *bool
}

// GetZRAccountSettings200ApplicationXML2DigitalSignageBanner - Specifies the elements that you want to display in the top banner.
type GetZRAccountSettings200ApplicationXML2DigitalSignageBanner struct {
	// Display or hide banner room name.
	BannerRoomName *bool
	// Display or hide banner sharing key.
	BannerSharingKey *bool
	// Display or hide time in the banner.
	BannerTime *bool
}

// GetZRAccountSettings200ApplicationXML2DigitalSignageDisplayPeriod - Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
type GetZRAccountSettings200ApplicationXML2DigitalSignageDisplayPeriod struct {
	// Start displaying digital signage content after certain duration after the meeting ends. The value of this field indicates the duration in minutes.
	StartDisplayingContent *int64
	// Stop displaying content {certain_duration} before a meeting is scheduled to begin. The value of this field indicates the duration in minutes.
	StopDisplayingContent *int64
}

// GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum - Specify an action for the content list. The value can be one of the following:<br>
// `add`: Add another content list.<br>
// `update`: Update existing content list.<br>
// `delete`: Delete content list.
type GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum string

const (
	GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnumAdd    GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum = "add"
	GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnumUpdate GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum = "update"
	GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnumDelete GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum = "delete"
)

func (e *GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "update":
		fallthrough
	case "delete":
		*e = GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum: %s", s)
	}
}

// GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListContents - Content list.
type GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListContents struct {
	// Content Id.
	ContentID *string
	// Duration for how long the content will be displayed.
	Duration *int64
	ID       *string
	// Name of the content.
	Name *string
	// Order of the content in the display.
	Order *int64
}

type GetZRAccountSettings200ApplicationXML2DigitalSignagePlayList struct {
	// Specify an action for the content list. The value can be one of the following:<br>
	// `add`: Add another content list.<br>
	// `update`: Update existing content list.<br>
	// `delete`: Delete content list.
	//
	Action   *GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListActionEnum
	Contents []GetZRAccountSettings200ApplicationXML2DigitalSignagePlayListContents
	// Specify the display end time for the content list in GMT.
	EndTime *string
	// Unique identifier of the content list. This field is only required if you would like to remove or update the content list.
	ID *string
	// Name of the content list.
	Name *string
	// Specify the display start time for the content list in GMT.
	StartTime *string
}

type GetZRAccountSettings200ApplicationXML2DigitalSignage struct {
	// Specifies the elements that you want to display in the top banner.
	Banner *GetZRAccountSettings200ApplicationXML2DigitalSignageBanner
	// Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
	DisplayPeriod *GetZRAccountSettings200ApplicationXML2DigitalSignageDisplayPeriod
	// [Indicates whether digital signage is on or off,](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd). <br>
	// `true`: enable<br> `false`: disable
	EnableDigitalSignage *bool
	// Set the [layout](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_4e25ddf3-8f97-4957-8f8b-99725f940fa7). The value of this field can be either `standard` or `video_content`.
	//
	// `standard`: Standard Center<br>
	// `video_content`: Video + Content
	Layout *string
	// Sound of all contents will be muted if the value of this field is set to `true`.
	Mute *bool
	// Content list.
	PlayList []GetZRAccountSettings200ApplicationXML2DigitalSignagePlayList
}

// GetZRAccountSettings200ApplicationXML2Notification - [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
type GetZRAccountSettings200ApplicationXML2Notification struct {
	// Send an alert when the audio echo test result meets usability threshold.
	AudioMeetUsabilityThreshold *bool
	// Send an alert when the audio echo test result does not meet usability threshold.
	AudioNotMeetUsabilityThreshold *bool
	// Send an alert when the battery starts charging.
	BatteryIsCharging *bool
	// Send an alert when the battery of the controller or the scheduling display is low (at 20%) and is not being charged.
	BatteryLowAndNotCharging *bool
	// Specify a percentage so that an alert is sent when the battery is less than the {battery_percentage} that you specified.
	BatteryPercentage *string
	// Send an alert when the connection to the Controller or Scheduling Display cannot be detected.
	ControllerSchedulingDisconnected *bool
	// Send an alert when the Controller or Scheduling Display can be detected again.
	ControllerSchedulingReconnected *bool
	// Send an alert when CPU usage is above 90%.
	CPUUsageHighDetected *bool
	// Send an alert when the mic, speaker or camera is disconnected in the Zoom Room.
	MicSpeakerCameraDisconnected *bool
	// Send an alert when the mic, speaker or camera is reconnected.
	MicSpeakerCameraReconnected *bool
	// Send an alert when low bandwidth network is detected
	NetworkUnstableDetected *bool
	// Send an alert when SIP registration stops working.
	SipRegistrationFailed *bool
	// Send an alert after the SIP registration is re-enabled.
	SipRegistrationReEnabled *bool
	// Send an alert when the Zoom Room is online after previously being offline.
	ZoomRoomComeBackOnline *bool
	// Send an alert when the TV display is disconnected
	ZoomRoomDisplayDisconnected *bool
	// Send an alert when the machine hosting the Zoom Room application has a network issue or cannot connect with the Controller.
	ZoomRoomOffline *bool
}

type GetZRAccountSettings200ApplicationXML2 struct {
	// The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
	ClientAlert    *GetZRAccountSettings200ApplicationXML2ClientAlert
	DigitalSignage *GetZRAccountSettings200ApplicationXML2DigitalSignage
	// [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
	Notification *GetZRAccountSettings200ApplicationXML2Notification
}

type GetZRAccountSettings200ApplicationXML1ZoomRooms struct {
	// Enable multiple participants to [share content simultaneously](https://support.zoom.us/hc/en-us/articles/360017767812-Sharing-Multiple-Screens-in-a-Zoom-Room) by default.
	AllowMultipleContentSharing *bool
	// Enable [automated audio test](https://support.zoom.us/hc/en-us/articles/360000319683-Zoom-Rooms-Daily-Audio-Testing) to ensure high quality audio.
	AudioDeviceDailyAutoTest *bool
	// Enable participants in a Zoom Room to share their laptop screen on the Zoom Room TV without entering a meeting ID or sharing code.
	AutoDirectSharing *bool
	// Automatically start scheduled meetings according to the start time listed on the calendar associated with the room. A meeting alert will appear 10 minutes prior to the scheduled time on the TV.
	AutoStartScheduledMeeting *bool
	// Automatically stop the meeting at the end time as scheduled and listed in the calendar associated with the room.
	AutoStopScheduledMeeting *bool
	// Use facial detection technology to [determine and display the attendees count](https://support.zoom.us/hc/en-us/articles/360031027111-Count-Attendees-in-Zoom-Rooms) after meetings on Dashboard.
	//
	CountAttendeesNumberInRoom *bool
	// Display a [survey](https://support.zoom.us/hc/en-us/articles/214193146-End-of-Meeting-Attendee-Feedback) at the end of each meeting regarding the audio and video quality on the Zoom Rooms Controller.
	DisplayFeedbackSurvey *bool
	//  Show the same information on the TV that is shown on the controller.
	DisplayMeetingList *bool
	// Allow to display room name, time and sharing key on the top portion of TV.
	DisplayTopBanner *bool
	// Allow in-room participants to input email address where they can recieve the recording before starting a recording if the meeting was created on the Scheduling Display or if it was started using the "Meet Now" option.
	EmailAddressPromptBeforeRecording *bool
	// Encrypt screen and content shared in meetings.
	EncryptSharedScreenContent *bool
	// If enabled, the meeting host and meeting ID (in addition to the meeting topic) are hidden from the Zoom Rooms display for private meetings. This affects meetings that were originally scheduled as private, as well as public meetings that were transformed to private.
	HideIDForPrivateMeeting *bool
	// Set [Zoom Rooms as the alternative host](https://support.zoom.us/hc/en-us/articles/203614149-Zoom-Rooms-as-Alternative-Host).
	//
	MakeRoomAlternativeHost *bool
	// Enable secure connection between Zoom Rooms computer and controller.
	SecureConnectionChannel *bool
	// Restrict[ sending Whiteboard sessions](https://support.zoom.us/hc/en-us/articles/115004797286-Using-the-Whiteboard-in-Zoom-Rooms-for-Touch#h_781274b3-5237-4320-8826-be2120b00e21) to contacts or internal users only.
	SendWhiteboardToInternalContactOnly *bool
	// If enabled, the upcoming meeting alert message will be shown on the TV display. The value of the `upcoming_meeting_alert` field should be set to `true` to use this field.
	ShowAlertBeforeMeeting *bool
	// Allow users to see call history of joined meetings and phone calls from the Zoom Rooms controller.
	//
	ShowCallHistoryInRoom *bool
	// If enabled, you can invite participants from the contact list during a meeting or when starting a meeting
	ShowContactListOnController *bool
	// When enabled, meeting participants that are audio only or have their video turned off will also be shown on the Zoom Rooms display by default.
	ShowNonVideoParticipants *bool
	// Require the AirPlay service to be [started by an administrator](https://support.zoom.us/hc/en-us/articles/204726885-Screen-Share-Using-Airplay-Mirroring#h_a342ad38-4e46-47a8-a1d9-cded3b144b39) rather than always being available.
	StartAirplayManually *bool
	// Allow users to share content via Apple Screen Mirroring (called Airplay on iOS 11 or earlier) in Zoom Rooms
	StartAirplayMirroring *bool
	// Integrate with Skype for Business, GoToMeeting, or WebEx and show the meeting dial-in button on the meeting list tab for Zoom Rooms Controllers.
	SupportJoin3rdPartyMeeting *bool
	// If enabled, all meetings in this room will be treated as [private meetings](https://support.zoom.us/hc/en-us/articles/115001051063-Zoom-Rooms-Private-Meetings), and the Zoom Room will display "Your Name's Meeting" instead of the real meeting topic.
	TransformMeetingToPrivate *bool
	// If enabled, a reminder will display 10 minutes prior to the next scheduled meeting on the controller.
	UpcomingMeetingAlert *bool
	// [Restart](https://support.zoom.us/hc/en-us/articles/205418949-Zoom-Rooms-Weekly-System-Restart) the Zoom Rooms computer and controller once a week.
	WeeklySystemRestart *bool
}

type GetZRAccountSettings200ApplicationXML1 struct {
	ZoomRooms *GetZRAccountSettings200ApplicationXML1ZoomRooms
}

type GetZRAccountSettings200ApplicationXMLType string

const (
	GetZRAccountSettings200ApplicationXMLTypeGetZRAccountSettings200ApplicationXML1 GetZRAccountSettings200ApplicationXMLType = "getZRAccountSettings_200ApplicationXML_1"
	GetZRAccountSettings200ApplicationXMLTypeGetZRAccountSettings200ApplicationXML2 GetZRAccountSettings200ApplicationXMLType = "getZRAccountSettings_200ApplicationXML_2"
)

type GetZRAccountSettings200ApplicationXML struct {
	GetZRAccountSettings200ApplicationXML1 *GetZRAccountSettings200ApplicationXML1
	GetZRAccountSettings200ApplicationXML2 *GetZRAccountSettings200ApplicationXML2

	Type GetZRAccountSettings200ApplicationXMLType
}

func CreateGetZRAccountSettings200ApplicationXMLGetZRAccountSettings200ApplicationXML1(getZRAccountSettings200ApplicationXML1 GetZRAccountSettings200ApplicationXML1) GetZRAccountSettings200ApplicationXML {
	typ := GetZRAccountSettings200ApplicationXMLTypeGetZRAccountSettings200ApplicationXML1

	return GetZRAccountSettings200ApplicationXML{
		GetZRAccountSettings200ApplicationXML1: &getZRAccountSettings200ApplicationXML1,
		Type:                                   typ,
	}
}

func CreateGetZRAccountSettings200ApplicationXMLGetZRAccountSettings200ApplicationXML2(getZRAccountSettings200ApplicationXML2 GetZRAccountSettings200ApplicationXML2) GetZRAccountSettings200ApplicationXML {
	typ := GetZRAccountSettings200ApplicationXMLTypeGetZRAccountSettings200ApplicationXML2

	return GetZRAccountSettings200ApplicationXML{
		GetZRAccountSettings200ApplicationXML2: &getZRAccountSettings200ApplicationXML2,
		Type:                                   typ,
	}
}

func (u *GetZRAccountSettings200ApplicationXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getZRAccountSettings200ApplicationXML1 := new(GetZRAccountSettings200ApplicationXML1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getZRAccountSettings200ApplicationXML1); err == nil {
		u.GetZRAccountSettings200ApplicationXML1 = getZRAccountSettings200ApplicationXML1
		u.Type = GetZRAccountSettings200ApplicationXMLTypeGetZRAccountSettings200ApplicationXML1
		return nil
	}

	getZRAccountSettings200ApplicationXML2 := new(GetZRAccountSettings200ApplicationXML2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getZRAccountSettings200ApplicationXML2); err == nil {
		u.GetZRAccountSettings200ApplicationXML2 = getZRAccountSettings200ApplicationXML2
		u.Type = GetZRAccountSettings200ApplicationXMLTypeGetZRAccountSettings200ApplicationXML2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetZRAccountSettings200ApplicationXML) MarshalJSON() ([]byte, error) {
	if u.GetZRAccountSettings200ApplicationXML1 != nil {
		return json.Marshal(u.GetZRAccountSettings200ApplicationXML1)
	}

	if u.GetZRAccountSettings200ApplicationXML2 != nil {
		return json.Marshal(u.GetZRAccountSettings200ApplicationXML2)
	}

	return nil, nil
}

// GetZRAccountSettings200ApplicationJSON2ClientAlert - The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
type GetZRAccountSettings200ApplicationJSON2ClientAlert struct {
	// Display an alert message when an issue is detected with a bluetooth microphone.
	DetectBluetoothMicrophoneErrorAlert *bool `json:"detect_bluetooth_microphone_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a bluetooth speaker.
	DetectBluetoothSpeakerErrorAlert *bool `json:"detect_bluetooth_speaker_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a camera.
	DetectCameraErrorAlert *bool `json:"detect_camera_error_alert,omitempty"`
	// Display an alert message when an issue is detected with microphone.
	DetectMicrophoneErrorAlert *bool `json:"detect_microphone_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a speaker.
	DetectSpeakerErrorAlert *bool `json:"detect_speaker_error_alert,omitempty"`
}

// GetZRAccountSettings200ApplicationJSON2DigitalSignageBanner - Specifies the elements that you want to display in the top banner.
type GetZRAccountSettings200ApplicationJSON2DigitalSignageBanner struct {
	// Display or hide banner room name.
	BannerRoomName *bool `json:"banner_room_name,omitempty"`
	// Display or hide banner sharing key.
	BannerSharingKey *bool `json:"banner_sharing_key,omitempty"`
	// Display or hide time in the banner.
	BannerTime *bool `json:"banner_time,omitempty"`
}

// GetZRAccountSettings200ApplicationJSON2DigitalSignageDisplayPeriod - Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
type GetZRAccountSettings200ApplicationJSON2DigitalSignageDisplayPeriod struct {
	// Start displaying digital signage content after certain duration after the meeting ends. The value of this field indicates the duration in minutes.
	StartDisplayingContent *int64 `json:"start_displaying_content,omitempty"`
	// Stop displaying content {certain_duration} before a meeting is scheduled to begin. The value of this field indicates the duration in minutes.
	StopDisplayingContent *int64 `json:"stop_displaying_content,omitempty"`
}

// GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum - Specify an action for the content list. The value can be one of the following:<br>
// `add`: Add another content list.<br>
// `update`: Update existing content list.<br>
// `delete`: Delete content list.
type GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum string

const (
	GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnumAdd    GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum = "add"
	GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnumUpdate GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum = "update"
	GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnumDelete GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum = "delete"
)

func (e *GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "update":
		fallthrough
	case "delete":
		*e = GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum: %s", s)
	}
}

// GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListContents - Content list.
type GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListContents struct {
	// Content Id.
	ContentID *string `json:"content_id,omitempty"`
	// Duration for how long the content will be displayed.
	Duration *int64  `json:"duration,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Name of the content.
	Name *string `json:"name,omitempty"`
	// Order of the content in the display.
	Order *int64 `json:"order,omitempty"`
}

type GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayList struct {
	// Specify an action for the content list. The value can be one of the following:<br>
	// `add`: Add another content list.<br>
	// `update`: Update existing content list.<br>
	// `delete`: Delete content list.
	//
	Action   *GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListActionEnum `json:"action,omitempty"`
	Contents []GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayListContents  `json:"contents,omitempty"`
	// Specify the display end time for the content list in GMT.
	EndTime *string `json:"end_time,omitempty"`
	// Unique identifier of the content list. This field is only required if you would like to remove or update the content list.
	ID *string `json:"id,omitempty"`
	// Name of the content list.
	Name *string `json:"name,omitempty"`
	// Specify the display start time for the content list in GMT.
	StartTime *string `json:"start_time,omitempty"`
}

type GetZRAccountSettings200ApplicationJSON2DigitalSignage struct {
	// Specifies the elements that you want to display in the top banner.
	Banner *GetZRAccountSettings200ApplicationJSON2DigitalSignageBanner `json:"banner,omitempty"`
	// Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
	DisplayPeriod *GetZRAccountSettings200ApplicationJSON2DigitalSignageDisplayPeriod `json:"display_period,omitempty"`
	// [Indicates whether digital signage is on or off,](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd). <br>
	// `true`: enable<br> `false`: disable
	EnableDigitalSignage *bool `json:"enable_digital_signage,omitempty"`
	// Set the [layout](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_4e25ddf3-8f97-4957-8f8b-99725f940fa7). The value of this field can be either `standard` or `video_content`.
	//
	// `standard`: Standard Center<br>
	// `video_content`: Video + Content
	Layout *string `json:"layout,omitempty"`
	// Sound of all contents will be muted if the value of this field is set to `true`.
	Mute *bool `json:"mute,omitempty"`
	// Content list.
	PlayList []GetZRAccountSettings200ApplicationJSON2DigitalSignagePlayList `json:"play_list,omitempty"`
}

// GetZRAccountSettings200ApplicationJSON2Notification - [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
type GetZRAccountSettings200ApplicationJSON2Notification struct {
	// Send an alert when the audio echo test result meets usability threshold.
	AudioMeetUsabilityThreshold *bool `json:"audio_meet_usability_threshold,omitempty"`
	// Send an alert when the audio echo test result does not meet usability threshold.
	AudioNotMeetUsabilityThreshold *bool `json:"audio_not_meet_usability_threshold,omitempty"`
	// Send an alert when the battery starts charging.
	BatteryIsCharging *bool `json:"battery_is_charging,omitempty"`
	// Send an alert when the battery of the controller or the scheduling display is low (at 20%) and is not being charged.
	BatteryLowAndNotCharging *bool `json:"battery_low_and_not_charging,omitempty"`
	// Specify a percentage so that an alert is sent when the battery is less than the {battery_percentage} that you specified.
	BatteryPercentage *string `json:"battery_percentage,omitempty"`
	// Send an alert when the connection to the Controller or Scheduling Display cannot be detected.
	ControllerSchedulingDisconnected *bool `json:"controller_scheduling_disconnected,omitempty"`
	// Send an alert when the Controller or Scheduling Display can be detected again.
	ControllerSchedulingReconnected *bool `json:"controller_scheduling_reconnected,omitempty"`
	// Send an alert when CPU usage is above 90%.
	CPUUsageHighDetected *bool `json:"cpu_usage_high_detected,omitempty"`
	// Send an alert when the mic, speaker or camera is disconnected in the Zoom Room.
	MicSpeakerCameraDisconnected *bool `json:"mic_speaker_camera_disconnected,omitempty"`
	// Send an alert when the mic, speaker or camera is reconnected.
	MicSpeakerCameraReconnected *bool `json:"mic_speaker_camera_reconnected,omitempty"`
	// Send an alert when low bandwidth network is detected
	NetworkUnstableDetected *bool `json:"network_unstable_detected,omitempty"`
	// Send an alert when SIP registration stops working.
	SipRegistrationFailed *bool `json:"sip_registration_failed,omitempty"`
	// Send an alert after the SIP registration is re-enabled.
	SipRegistrationReEnabled *bool `json:"sip_registration_re_enabled,omitempty"`
	// Send an alert when the Zoom Room is online after previously being offline.
	ZoomRoomComeBackOnline *bool `json:"zoom_room_come_back_online,omitempty"`
	// Send an alert when the TV display is disconnected
	ZoomRoomDisplayDisconnected *bool `json:"zoom_room_display_disconnected,omitempty"`
	// Send an alert when the machine hosting the Zoom Room application has a network issue or cannot connect with the Controller.
	ZoomRoomOffline *bool `json:"zoom_room_offline,omitempty"`
}

type GetZRAccountSettings200ApplicationJSON2 struct {
	// The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
	ClientAlert    *GetZRAccountSettings200ApplicationJSON2ClientAlert    `json:"client_alert,omitempty"`
	DigitalSignage *GetZRAccountSettings200ApplicationJSON2DigitalSignage `json:"digital_signage,omitempty"`
	// [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
	Notification *GetZRAccountSettings200ApplicationJSON2Notification `json:"notification,omitempty"`
}

type GetZRAccountSettings200ApplicationJSON1ZoomRooms struct {
	// Enable multiple participants to [share content simultaneously](https://support.zoom.us/hc/en-us/articles/360017767812-Sharing-Multiple-Screens-in-a-Zoom-Room) by default.
	AllowMultipleContentSharing *bool `json:"allow_multiple_content_sharing,omitempty"`
	// Enable [automated audio test](https://support.zoom.us/hc/en-us/articles/360000319683-Zoom-Rooms-Daily-Audio-Testing) to ensure high quality audio.
	AudioDeviceDailyAutoTest *bool `json:"audio_device_daily_auto_test,omitempty"`
	// Enable participants in a Zoom Room to share their laptop screen on the Zoom Room TV without entering a meeting ID or sharing code.
	AutoDirectSharing *bool `json:"auto_direct_sharing,omitempty"`
	// Automatically start scheduled meetings according to the start time listed on the calendar associated with the room. A meeting alert will appear 10 minutes prior to the scheduled time on the TV.
	AutoStartScheduledMeeting *bool `json:"auto_start_scheduled_meeting,omitempty"`
	// Automatically stop the meeting at the end time as scheduled and listed in the calendar associated with the room.
	AutoStopScheduledMeeting *bool `json:"auto_stop_scheduled_meeting,omitempty"`
	// Use facial detection technology to [determine and display the attendees count](https://support.zoom.us/hc/en-us/articles/360031027111-Count-Attendees-in-Zoom-Rooms) after meetings on Dashboard.
	//
	CountAttendeesNumberInRoom *bool `json:"count_attendees_number_in_room,omitempty"`
	// Display a [survey](https://support.zoom.us/hc/en-us/articles/214193146-End-of-Meeting-Attendee-Feedback) at the end of each meeting regarding the audio and video quality on the Zoom Rooms Controller.
	DisplayFeedbackSurvey *bool `json:"display_feedback_survey,omitempty"`
	//  Show the same information on the TV that is shown on the controller.
	DisplayMeetingList *bool `json:"display_meeting_list,omitempty"`
	// Allow to display room name, time and sharing key on the top portion of TV.
	DisplayTopBanner *bool `json:"display_top_banner,omitempty"`
	// Allow in-room participants to input email address where they can recieve the recording before starting a recording if the meeting was created on the Scheduling Display or if it was started using the "Meet Now" option.
	EmailAddressPromptBeforeRecording *bool `json:"email_address_prompt_before_recording,omitempty"`
	// Encrypt screen and content shared in meetings.
	EncryptSharedScreenContent *bool `json:"encrypt_shared_screen_content,omitempty"`
	// If enabled, the meeting host and meeting ID (in addition to the meeting topic) are hidden from the Zoom Rooms display for private meetings. This affects meetings that were originally scheduled as private, as well as public meetings that were transformed to private.
	HideIDForPrivateMeeting *bool `json:"hide_id_for_private_meeting,omitempty"`
	// Set [Zoom Rooms as the alternative host](https://support.zoom.us/hc/en-us/articles/203614149-Zoom-Rooms-as-Alternative-Host).
	//
	MakeRoomAlternativeHost *bool `json:"make_room_alternative_host,omitempty"`
	// Enable secure connection between Zoom Rooms computer and controller.
	SecureConnectionChannel *bool `json:"secure_connection_channel,omitempty"`
	// Restrict[ sending Whiteboard sessions](https://support.zoom.us/hc/en-us/articles/115004797286-Using-the-Whiteboard-in-Zoom-Rooms-for-Touch#h_781274b3-5237-4320-8826-be2120b00e21) to contacts or internal users only.
	SendWhiteboardToInternalContactOnly *bool `json:"send_whiteboard_to_internal_contact_only,omitempty"`
	// If enabled, the upcoming meeting alert message will be shown on the TV display. The value of the `upcoming_meeting_alert` field should be set to `true` to use this field.
	ShowAlertBeforeMeeting *bool `json:"show_alert_before_meeting,omitempty"`
	// Allow users to see call history of joined meetings and phone calls from the Zoom Rooms controller.
	//
	ShowCallHistoryInRoom *bool `json:"show_call_history_in_room,omitempty"`
	// If enabled, you can invite participants from the contact list during a meeting or when starting a meeting
	ShowContactListOnController *bool `json:"show_contact_list_on_controller,omitempty"`
	// When enabled, meeting participants that are audio only or have their video turned off will also be shown on the Zoom Rooms display by default.
	ShowNonVideoParticipants *bool `json:"show_non_video_participants,omitempty"`
	// Require the AirPlay service to be [started by an administrator](https://support.zoom.us/hc/en-us/articles/204726885-Screen-Share-Using-Airplay-Mirroring#h_a342ad38-4e46-47a8-a1d9-cded3b144b39) rather than always being available.
	StartAirplayManually *bool `json:"start_airplay_manually,omitempty"`
	// Allow users to share content via Apple Screen Mirroring (called Airplay on iOS 11 or earlier) in Zoom Rooms
	StartAirplayMirroring *bool `json:"start_airplay_mirroring,omitempty"`
	// Integrate with Skype for Business, GoToMeeting, or WebEx and show the meeting dial-in button on the meeting list tab for Zoom Rooms Controllers.
	SupportJoin3rdPartyMeeting *bool `json:"support_join_3rd_party_meeting,omitempty"`
	// If enabled, all meetings in this room will be treated as [private meetings](https://support.zoom.us/hc/en-us/articles/115001051063-Zoom-Rooms-Private-Meetings), and the Zoom Room will display "Your Name's Meeting" instead of the real meeting topic.
	TransformMeetingToPrivate *bool `json:"transform_meeting_to_private,omitempty"`
	// If enabled, a reminder will display 10 minutes prior to the next scheduled meeting on the controller.
	UpcomingMeetingAlert *bool `json:"upcoming_meeting_alert,omitempty"`
	// [Restart](https://support.zoom.us/hc/en-us/articles/205418949-Zoom-Rooms-Weekly-System-Restart) the Zoom Rooms computer and controller once a week.
	WeeklySystemRestart *bool `json:"weekly_system_restart,omitempty"`
}

type GetZRAccountSettings200ApplicationJSON1 struct {
	ZoomRooms *GetZRAccountSettings200ApplicationJSON1ZoomRooms `json:"zoom_rooms,omitempty"`
}

type GetZRAccountSettings200ApplicationJSONType string

const (
	GetZRAccountSettings200ApplicationJSONTypeGetZRAccountSettings200ApplicationJSON1 GetZRAccountSettings200ApplicationJSONType = "getZRAccountSettings_200ApplicationJSON_1"
	GetZRAccountSettings200ApplicationJSONTypeGetZRAccountSettings200ApplicationJSON2 GetZRAccountSettings200ApplicationJSONType = "getZRAccountSettings_200ApplicationJSON_2"
)

type GetZRAccountSettings200ApplicationJSON struct {
	GetZRAccountSettings200ApplicationJSON1 *GetZRAccountSettings200ApplicationJSON1
	GetZRAccountSettings200ApplicationJSON2 *GetZRAccountSettings200ApplicationJSON2

	Type GetZRAccountSettings200ApplicationJSONType
}

func CreateGetZRAccountSettings200ApplicationJSONGetZRAccountSettings200ApplicationJSON1(getZRAccountSettings200ApplicationJSON1 GetZRAccountSettings200ApplicationJSON1) GetZRAccountSettings200ApplicationJSON {
	typ := GetZRAccountSettings200ApplicationJSONTypeGetZRAccountSettings200ApplicationJSON1

	return GetZRAccountSettings200ApplicationJSON{
		GetZRAccountSettings200ApplicationJSON1: &getZRAccountSettings200ApplicationJSON1,
		Type:                                    typ,
	}
}

func CreateGetZRAccountSettings200ApplicationJSONGetZRAccountSettings200ApplicationJSON2(getZRAccountSettings200ApplicationJSON2 GetZRAccountSettings200ApplicationJSON2) GetZRAccountSettings200ApplicationJSON {
	typ := GetZRAccountSettings200ApplicationJSONTypeGetZRAccountSettings200ApplicationJSON2

	return GetZRAccountSettings200ApplicationJSON{
		GetZRAccountSettings200ApplicationJSON2: &getZRAccountSettings200ApplicationJSON2,
		Type:                                    typ,
	}
}

func (u *GetZRAccountSettings200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getZRAccountSettings200ApplicationJSON1 := new(GetZRAccountSettings200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getZRAccountSettings200ApplicationJSON1); err == nil {
		u.GetZRAccountSettings200ApplicationJSON1 = getZRAccountSettings200ApplicationJSON1
		u.Type = GetZRAccountSettings200ApplicationJSONTypeGetZRAccountSettings200ApplicationJSON1
		return nil
	}

	getZRAccountSettings200ApplicationJSON2 := new(GetZRAccountSettings200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getZRAccountSettings200ApplicationJSON2); err == nil {
		u.GetZRAccountSettings200ApplicationJSON2 = getZRAccountSettings200ApplicationJSON2
		u.Type = GetZRAccountSettings200ApplicationJSONTypeGetZRAccountSettings200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetZRAccountSettings200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetZRAccountSettings200ApplicationJSON1 != nil {
		return json.Marshal(u.GetZRAccountSettings200ApplicationJSON1)
	}

	if u.GetZRAccountSettings200ApplicationJSON2 != nil {
		return json.Marshal(u.GetZRAccountSettings200ApplicationJSON2)
	}

	return nil, nil
}

type GetZRAccountSettingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// ZR Account Settings returned successfully.
	//
	GetZRAccountSettings200ApplicationJSONObject *GetZRAccountSettings200ApplicationJSON
}
