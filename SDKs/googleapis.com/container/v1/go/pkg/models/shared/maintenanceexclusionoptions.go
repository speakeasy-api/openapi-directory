// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MaintenanceExclusionOptionsScopeEnum - Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
type MaintenanceExclusionOptionsScopeEnum string

const (
	MaintenanceExclusionOptionsScopeEnumNoUpgrades            MaintenanceExclusionOptionsScopeEnum = "NO_UPGRADES"
	MaintenanceExclusionOptionsScopeEnumNoMinorUpgrades       MaintenanceExclusionOptionsScopeEnum = "NO_MINOR_UPGRADES"
	MaintenanceExclusionOptionsScopeEnumNoMinorOrNodeUpgrades MaintenanceExclusionOptionsScopeEnum = "NO_MINOR_OR_NODE_UPGRADES"
)

func (e *MaintenanceExclusionOptionsScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_UPGRADES":
		fallthrough
	case "NO_MINOR_UPGRADES":
		fallthrough
	case "NO_MINOR_OR_NODE_UPGRADES":
		*e = MaintenanceExclusionOptionsScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MaintenanceExclusionOptionsScopeEnum: %s", s)
	}
}

// MaintenanceExclusionOptions - Represents the Maintenance exclusion option.
type MaintenanceExclusionOptions struct {
	// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
	Scope *MaintenanceExclusionOptionsScopeEnum `json:"scope,omitempty"`
}
