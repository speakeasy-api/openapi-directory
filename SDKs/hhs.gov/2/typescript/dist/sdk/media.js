"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Media = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * Information about media
 */
var Media = /** @class */ (function () {
    function Media(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Get MediaItems
     *
     * @remarks
     * Media Items Listings
     */
    Media.prototype.getResourcesMediaJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/resources/media.json";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.mediaItemWrappeds = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.mediaItemWrappeds = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MediaItemWrapped, resFieldDepth);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get the list of featured content in the syndication system
     *
     * @remarks
     * Get the list of featured content in the syndication system
     */
    Media.prototype.getResourcesMediaFeaturedJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaFeaturedJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/resources/media/featured.json";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaFeaturedJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.mediaItems = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.mediaItems = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MediaItem, resFieldDepth);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get MediaItems by popularity
     *
     * @remarks
     * Get the media with the highest ratings.
     */
    Media.prototype.getResourcesMediaMostPopularMediaFormat = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaMostPopularMediaFormatRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/mostPopularMedia.{format}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaMostPopularMediaFormatResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.mediaItemWrappeds = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.mediaItemWrappeds = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MediaItemWrapped, resFieldDepth);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get MediaItems by search query
     *
     * @remarks
     * Full search
     */
    Media.prototype.getResourcesMediaSearchResultsJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaSearchResultsJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/resources/media/searchResults.json";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaSearchResultsJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.mediaItemWrappeds = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.mediaItemWrappeds = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MediaItemWrapped, resFieldDepth);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get MediaItem by ID
     *
     * @remarks
     * Information about a specific media item
     */
    Media.prototype.getResourcesMediaIdJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}.json", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.mediaItemWrappeds = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.mediaItemWrappeds = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MediaItemWrapped, resFieldDepth);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get content for MediaItem
     *
     * @remarks
     * The actual media content (html, image, etc...)
     */
    Media.prototype.getResourcesMediaIdContent = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdContentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/content", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdContentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getResourcesMediaIdContent200ApplicationJSONString =
                            JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get embed code for MediaItem
     *
     * @remarks
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     */
    Media.prototype.getResourcesMediaIdEmbedJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdEmbedJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/embed.json", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdEmbedJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getResourcesMediaIdEmbedJSON200ApplicationJSONString =
                            JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get Tag by ID
     *
     * @remarks
     * Get the jpg preview of the content item where applicable.
     */
    Media.prototype.getResourcesMediaIdPreviewJpg = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdPreviewJpgRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/preview.jpg", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdPreviewJpgResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getResourcesMediaIdPreviewJpg200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get related MediaItems by ID
     *
     * @remarks
     * Get the media related to the current media item.
     */
    Media.prototype.getResourcesMediaIdRelatedMediaFormat = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdRelatedMediaFormatRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/relatedMedia.{format}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdRelatedMediaFormatResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.mediaItemWrappeds = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.mediaItemWrappeds = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MediaItemWrapped, resFieldDepth);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get syndicated content for MediaItem
     *
     * @remarks
     * Get syndicated content.
     */
    Media.prototype.getResourcesMediaIdSyndicateFormat = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdSyndicateFormatRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/syndicate.{format}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdSyndicateFormatResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.syndicateMarshallerWrapped = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SyndicateMarshallerWrapped);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get JPG thumbnail for MediaItem
     *
     * @remarks
     * Get the jpg thumbnail of the content item where applicable.
     */
    Media.prototype.getResourcesMediaIdThumbnailJpg = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdThumbnailJpgRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/thumbnail.jpg", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdThumbnailJpgResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getResourcesMediaIdThumbnailJpg200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * Get Youtube metadata for MediaItem
     *
     * @remarks
     * Youtube meta-data for a video item.
     */
    Media.prototype.getResourcesMediaIdYoutubeMetaDataJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetResourcesMediaIdYoutubeMetaDataJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/resources/media/{id}/youtubeMetaData.json", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetResourcesMediaIdYoutubeMetaDataJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getResourcesMediaIdYoutubeMetaDataJSON200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetResourcesMediaIdYoutubeMetaDataJson200ApplicationJSON);
                    }
                    break;
                case [400, 500].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    return Media;
}());
exports.Media = Media;
