"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsecsservicecapacityproviderstrategydetails as shared_awsecsservicecapacityproviderstrategydetails
from ..shared import awsecsservicedeploymentconfigurationdetails as shared_awsecsservicedeploymentconfigurationdetails
from ..shared import awsecsservicedeploymentcontrollerdetails as shared_awsecsservicedeploymentcontrollerdetails
from ..shared import awsecsserviceloadbalancersdetails as shared_awsecsserviceloadbalancersdetails
from ..shared import awsecsservicenetworkconfigurationdetails as shared_awsecsservicenetworkconfigurationdetails
from ..shared import awsecsserviceplacementconstraintsdetails as shared_awsecsserviceplacementconstraintsdetails
from ..shared import awsecsserviceplacementstrategiesdetails as shared_awsecsserviceplacementstrategiesdetails
from ..shared import awsecsserviceserviceregistriesdetails as shared_awsecsserviceserviceregistriesdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEcsServiceDetails:
    r"""Provides details about a service within an ECS cluster."""
    
    capacity_provider_strategy: Optional[list[shared_awsecsservicecapacityproviderstrategydetails.AwsEcsServiceCapacityProviderStrategyDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CapacityProviderStrategy'), 'exclude': lambda f: f is None }})  
    cluster: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cluster'), 'exclude': lambda f: f is None }})  
    deployment_configuration: Optional[shared_awsecsservicedeploymentconfigurationdetails.AwsEcsServiceDeploymentConfigurationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentConfiguration'), 'exclude': lambda f: f is None }})  
    deployment_controller: Optional[shared_awsecsservicedeploymentcontrollerdetails.AwsEcsServiceDeploymentControllerDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentController'), 'exclude': lambda f: f is None }})  
    desired_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DesiredCount'), 'exclude': lambda f: f is None }})  
    enable_ecs_managed_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableEcsManagedTags'), 'exclude': lambda f: f is None }})  
    enable_execute_command: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableExecuteCommand'), 'exclude': lambda f: f is None }})  
    health_check_grace_period_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HealthCheckGracePeriodSeconds'), 'exclude': lambda f: f is None }})  
    launch_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LaunchType'), 'exclude': lambda f: f is None }})  
    load_balancers: Optional[list[shared_awsecsserviceloadbalancersdetails.AwsEcsServiceLoadBalancersDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoadBalancers'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    network_configuration: Optional[shared_awsecsservicenetworkconfigurationdetails.AwsEcsServiceNetworkConfigurationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfiguration'), 'exclude': lambda f: f is None }})  
    placement_constraints: Optional[list[shared_awsecsserviceplacementconstraintsdetails.AwsEcsServicePlacementConstraintsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementConstraints'), 'exclude': lambda f: f is None }})  
    placement_strategies: Optional[list[shared_awsecsserviceplacementstrategiesdetails.AwsEcsServicePlacementStrategiesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementStrategies'), 'exclude': lambda f: f is None }})  
    platform_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlatformVersion'), 'exclude': lambda f: f is None }})  
    propagate_tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropagateTags'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role'), 'exclude': lambda f: f is None }})  
    scheduling_strategy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchedulingStrategy'), 'exclude': lambda f: f is None }})  
    service_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceArn'), 'exclude': lambda f: f is None }})  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName'), 'exclude': lambda f: f is None }})  
    service_registries: Optional[list[shared_awsecsserviceserviceregistriesdetails.AwsEcsServiceServiceRegistriesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceRegistries'), 'exclude': lambda f: f is None }})  
    task_definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskDefinition'), 'exclude': lambda f: f is None }})  
    