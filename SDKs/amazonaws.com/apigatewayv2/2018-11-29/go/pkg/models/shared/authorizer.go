// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuthorizerAuthorizerTypeEnum - The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
type AuthorizerAuthorizerTypeEnum string

const (
	AuthorizerAuthorizerTypeEnumRequest AuthorizerAuthorizerTypeEnum = "REQUEST"
	AuthorizerAuthorizerTypeEnumJwt     AuthorizerAuthorizerTypeEnum = "JWT"
)

func (e AuthorizerAuthorizerTypeEnum) ToPointer() *AuthorizerAuthorizerTypeEnum {
	return &e
}

func (e *AuthorizerAuthorizerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUEST":
		fallthrough
	case "JWT":
		*e = AuthorizerAuthorizerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizerAuthorizerTypeEnum: %v", v)
	}
}

// AuthorizerJwtConfiguration - Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
type AuthorizerJwtConfiguration struct {
	Audience []string `json:"Audience,omitempty"`
	Issuer   *string  `json:"Issuer,omitempty"`
}

// Authorizer - Represents an authorizer.
type Authorizer struct {
	AuthorizerCredentialsArn       *string                       `json:"AuthorizerCredentialsArn,omitempty"`
	AuthorizerID                   *string                       `json:"AuthorizerId,omitempty"`
	AuthorizerPayloadFormatVersion *string                       `json:"AuthorizerPayloadFormatVersion,omitempty"`
	AuthorizerResultTTLInSeconds   *int64                        `json:"AuthorizerResultTtlInSeconds,omitempty"`
	AuthorizerType                 *AuthorizerAuthorizerTypeEnum `json:"AuthorizerType,omitempty"`
	AuthorizerURI                  *string                       `json:"AuthorizerUri,omitempty"`
	EnableSimpleResponses          *bool                         `json:"EnableSimpleResponses,omitempty"`
	IdentitySource                 []string                      `json:"IdentitySource,omitempty"`
	IdentityValidationExpression   *string                       `json:"IdentityValidationExpression,omitempty"`
	JwtConfiguration               *AuthorizerJwtConfiguration   `json:"JwtConfiguration,omitempty"`
	Name                           string                        `json:"Name"`
}
