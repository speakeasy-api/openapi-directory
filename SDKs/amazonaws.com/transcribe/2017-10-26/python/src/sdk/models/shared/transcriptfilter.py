"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import absolutetimerange as shared_absolutetimerange
from ..shared import participantrole_enum as shared_participantrole_enum
from ..shared import relativetimerange as shared_relativetimerange
from ..shared import transcriptfiltertype_enum as shared_transcriptfiltertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscriptFilter:
    r"""<p>Flag the presence or absence of specific words or phrases detected in your Call Analytics transcription output.</p> <p>Rules using <code>TranscriptFilter</code> are designed to match:</p> <ul> <li> <p>Custom words or phrases spoken by the agent, the customer, or both</p> </li> <li> <p>Custom words or phrases <b>not</b> spoken by the agent, the customer, or either</p> </li> <li> <p>Custom words or phrases that occur at a specific time frame</p> </li> </ul> <p>See <a href=\\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html#tca-rules-batch\\">Rule criteria for post-call categories</a> and <a href=\\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html#tca-rules-stream\\">Rule criteria for streaming categories</a> for usage examples.</p>"""
    
    targets: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Targets') }})  
    transcript_filter_type: shared_transcriptfiltertype_enum.TranscriptFilterTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TranscriptFilterType') }})  
    absolute_time_range: Optional[shared_absolutetimerange.AbsoluteTimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AbsoluteTimeRange'), 'exclude': lambda f: f is None }})  
    negate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Negate'), 'exclude': lambda f: f is None }})  
    participant_role: Optional[shared_participantrole_enum.ParticipantRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParticipantRole'), 'exclude': lambda f: f is None }})  
    relative_time_range: Optional[shared_relativetimerange.RelativeTimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RelativeTimeRange'), 'exclude': lambda f: f is None }})  
    