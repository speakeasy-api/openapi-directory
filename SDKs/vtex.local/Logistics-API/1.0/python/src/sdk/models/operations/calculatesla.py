"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLACalculateSLARequestItem3Dimension:
    
    height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})  
    length: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length') }})  
    weight: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight') }})  
    width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLACalculateSLARequestItem3KitItemDimension:
    
    height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})  
    length: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length') }})  
    weight: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight') }})  
    width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLACalculateSLARequestItem3KitItem:
    
    additional_handling_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalHandlingTime') }})  
    dimension: CalculateSLACalculateSLARequestItem3KitItemDimension = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension') }})  
    group_item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupItemId') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    kit_item: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kitItem') }})  
    price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLACalculateSLARequestItem3:
    
    additional_handling_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalHandlingTime') }})  
    dimension: CalculateSLACalculateSLARequestItem3Dimension = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension') }})  
    group_item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupItemId') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    kit_item: list[CalculateSLACalculateSLARequestItem3KitItem] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kitItem') }})  
    price: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLACalculateSLARequestLocation3:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    point: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('point') }})  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCode') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLACalculateSLARequest:
    
    items: list[CalculateSLACalculateSLARequestItem3] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})  
    location: CalculateSLACalculateSLARequestLocation3 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    sales_channel: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel') }})  
    

@dataclasses.dataclass
class CalculateSLARequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    request_body: list[CalculateSLACalculateSLARequest] = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLA200ApplicationJSONDeliveryWindow:
    
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})  
    list_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})  
    start_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateUtc'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLA200ApplicationJSONLocation1InStore1:
    
    is_checked_in: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCheckedIn') }})  
    store_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoreId') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLA200ApplicationJSONLocation1:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    delivery_point_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryPointId') }})  
    in_store: CalculateSLA200ApplicationJSONLocation1InStore1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inStore') }})  
    point: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('point') }})  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCode') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalculateSLA200ApplicationJSON:
    
    aditional_time_blocked_days: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aditionalTimeBlockedDays') }})  
    availability_quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availabilityQuantity') }})  
    carrier_schedule: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrierSchedule') }})  
    coordinates: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinates') }})  
    delivery_on_weekends: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryOnWeekends') }})  
    delivery_windows: list[CalculateSLA200ApplicationJSONDeliveryWindow] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryWindows') }})  
    dock_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId') }})  
    dock_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockTime') }})  
    freight_table_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightTableId') }})  
    freight_table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightTableName') }})  
    item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId') }})  
    list_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice') }})  
    location: CalculateSLA200ApplicationJSONLocation1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    pickup_store_info: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupStoreInfo') }})  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})  
    restricted_freight: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictedFreight') }})  
    sales_channel: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel') }})  
    sla_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slaType') }})  
    sla_type_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slaTypeName') }})  
    time_to_dock_plus_dock_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeToDockPlusDockTime') }})  
    total_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalTime') }})  
    transit_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitTime') }})  
    ware_house_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wareHouseId') }})  
    

@dataclasses.dataclass
class CalculateSLAResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    calculate_sla_200_application_json_arrays: Optional[list[list[CalculateSLA200ApplicationJSON]]] = dataclasses.field(default=None)  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    