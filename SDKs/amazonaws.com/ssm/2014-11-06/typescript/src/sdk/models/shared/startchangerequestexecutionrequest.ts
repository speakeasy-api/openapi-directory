/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Runbook } from "./runbook";
import { Tag } from "./tag";
import { Expose, Transform, Type } from "class-transformer";

export class StartChangeRequestExecutionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AutoApprove" })
  autoApprove?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ChangeDetails" })
  changeDetails?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ChangeRequestName" })
  changeRequestName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ClientToken" })
  clientToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentName" })
  documentName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentVersion" })
  documentVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  parameters?: Record<string, string[]>;

  @SpeakeasyMetadata({ elemType: Runbook })
  @Expose({ name: "Runbooks" })
  @Type(() => Runbook)
  runbooks: Runbook[];

  @SpeakeasyMetadata()
  @Expose({ name: "ScheduledEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledEndTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ScheduledTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledTime?: Date;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
