// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InstanceStateEnum string

const (
	InstanceStateEnumPending      InstanceStateEnum = "pending"
	InstanceStateEnumRunning      InstanceStateEnum = "running"
	InstanceStateEnumShuttingDown InstanceStateEnum = "shutting-down"
	InstanceStateEnumTerminated   InstanceStateEnum = "terminated"
	InstanceStateEnumStopping     InstanceStateEnum = "stopping"
	InstanceStateEnumStopped      InstanceStateEnum = "stopped"
)

func (e InstanceStateEnum) ToPointer() *InstanceStateEnum {
	return &e
}

func (e *InstanceStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "shutting-down":
		fallthrough
	case "terminated":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		*e = InstanceStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstanceStateEnum: %v", v)
	}
}
