// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeRegistriesXAmzTargetEnum
type DescribeRegistriesXAmzTargetEnum string

const (
	DescribeRegistriesXAmzTargetEnumSpencerFrontendServiceDescribeRegistries DescribeRegistriesXAmzTargetEnum = "SpencerFrontendService.DescribeRegistries"
)

func (e *DescribeRegistriesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SpencerFrontendService.DescribeRegistries":
		*e = DescribeRegistriesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeRegistriesXAmzTargetEnum: %s", s)
	}
}

type DescribeRegistriesRequest struct {
	DescribeRegistriesRequest shared.DescribeRegistriesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                DescribeRegistriesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type DescribeRegistriesResponse struct {
	ContentType string
	// Success
	DescribeRegistriesResponse *shared.DescribeRegistriesResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// UnsupportedCommandException
	UnsupportedCommandException interface{}
}
