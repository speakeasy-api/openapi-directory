"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def travelpartner_accounts_account_links_create(self, request: operations.TravelpartnerAccountsAccountLinksCreateRequest) -> operations.TravelpartnerAccountsAccountLinksCreateResponse:
        r"""Creates a new account link between a Hotel Center account and a Google Ads account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsAccountLinksCreateRequest, base_url, '/v3/{parent}/accountLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_link", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsAccountLinksCreateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsAccountLinksCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountLink])
                res.account_link = out

        return res

    def travelpartner_accounts_account_links_delete(self, request: operations.TravelpartnerAccountsAccountLinksDeleteRequest) -> operations.TravelpartnerAccountsAccountLinksDeleteResponse:
        r"""Deletes an account link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsAccountLinksDeleteRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsAccountLinksDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsAccountLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def travelpartner_accounts_account_links_list(self, request: operations.TravelpartnerAccountsAccountLinksListRequest) -> operations.TravelpartnerAccountsAccountLinksListResponse:
        r"""Returns the account links for a Hotel Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsAccountLinksListRequest, base_url, '/v3/{parent}/accountLinks', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsAccountLinksListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsAccountLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccountLinksResponse])
                res.list_account_links_response = out

        return res

    def travelpartner_accounts_brands_create(self, request: operations.TravelpartnerAccountsBrandsCreateRequest) -> operations.TravelpartnerAccountsBrandsCreateResponse:
        r"""Creates a new brand. Because Google detects brands from your existing properties, you only need this operation when you want to configure a brand before you send its properties to Google. Note that it might take a couple of days after your listing feed first provides a brand for the brand to appear."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsBrandsCreateRequest, base_url, '/v3/{parent}/brands', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "brand_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsBrandsCreateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsBrandsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Brand])
                res.brand = out

        return res

    def travelpartner_accounts_brands_list(self, request: operations.TravelpartnerAccountsBrandsListRequest) -> operations.TravelpartnerAccountsBrandsListResponse:
        r"""Returns the brands for a partner account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsBrandsListRequest, base_url, '/v3/{parent}/brands', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsBrandsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsBrandsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBrandsResponse])
                res.list_brands_response = out

        return res

    def travelpartner_accounts_brands_patch(self, request: operations.TravelpartnerAccountsBrandsPatchRequest) -> operations.TravelpartnerAccountsBrandsPatchResponse:
        r"""Updates a brand."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsBrandsPatchRequest, base_url, '/v3/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "brand_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsBrandsPatchRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsBrandsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Brand])
                res.brand = out

        return res

    def travelpartner_accounts_free_booking_links_report_views_query(self, request: operations.TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest) -> operations.TravelpartnerAccountsFreeBookingLinksReportViewsQueryResponse:
        r"""**DEPRECATED:** Use PropertyPerformanceReportService.QueryPropertyPerformanceReport, which also has impression reporting, instead. Provides the ability to query (get, filter, and segment) a free booking links report for a specific account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest, base_url, '/v3/{name}/freeBookingLinksReportViews:query', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsFreeBookingLinksReportViewsQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QueryFreeBookingLinksReportResponse])
                res.query_free_booking_links_report_response = out

        return res

    def travelpartner_accounts_hotel_views_list(self, request: operations.TravelpartnerAccountsHotelViewsListRequest) -> operations.TravelpartnerAccountsHotelViewsListResponse:
        r"""Returns the list of hotel views."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsHotelViewsListRequest, base_url, '/v3/{parent}/hotelViews', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsHotelViewsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsHotelViewsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListHotelViewsResponse])
                res.list_hotel_views_response = out

        return res

    def travelpartner_accounts_hotel_views_summarize(self, request: operations.TravelpartnerAccountsHotelViewsSummarizeRequest) -> operations.TravelpartnerAccountsHotelViewsSummarizeResponse:
        r"""Returns summarized information about hotels."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsHotelViewsSummarizeRequest, base_url, '/v3/{parent}/hotelViews:summarize', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsHotelViewsSummarizeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsHotelViewsSummarizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SummarizeHotelViewsResponse])
                res.summarize_hotel_views_response = out

        return res

    def travelpartner_accounts_hotels_set_live_on_google(self, request: operations.TravelpartnerAccountsHotelsSetLiveOnGoogleRequest) -> operations.TravelpartnerAccountsHotelsSetLiveOnGoogleResponse:
        r"""Collection-level custom method to update the Live on Google status for multiple properties. Each call can turn on or off multiple hotels. To turn some hotels on and turn some hotels off, you will have to make multiple calls."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsHotelsSetLiveOnGoogleRequest, base_url, '/v3/{account}/hotels:setLiveOnGoogle', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_live_on_google_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsHotelsSetLiveOnGoogleRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsHotelsSetLiveOnGoogleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetLiveOnGoogleResponse])
                res.set_live_on_google_response = out

        return res

    def travelpartner_accounts_icons_create(self, request: operations.TravelpartnerAccountsIconsCreateRequest) -> operations.TravelpartnerAccountsIconsCreateResponse:
        r"""Uploads a new icon and starts its review process. Generates an `icon_id` and includes it in the icon's resource name, which is the format `accounts/{account_id}/icons/{icon_id}` Returns HTTP status 400 and doesn't trigger the review process if the icon has any of these conditions: * Image is not in PNG format, or not convertible to PNG format. * Size less than 72 pixels * Size greater than 1200 pixels * Aspect ratio other than 1:1"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsIconsCreateRequest, base_url, '/v3/{parent}/icons', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "icon_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsIconsCreateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsIconsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Icon])
                res.icon = out

        return res

    def travelpartner_accounts_icons_list(self, request: operations.TravelpartnerAccountsIconsListRequest) -> operations.TravelpartnerAccountsIconsListResponse:
        r"""Returns the `Icon`s for a partner account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsIconsListRequest, base_url, '/v3/{parent}/icons', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsIconsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsIconsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListIconsResponse])
                res.list_icons_response = out

        return res

    def travelpartner_accounts_listings_verify(self, request: operations.TravelpartnerAccountsListingsVerifyRequest) -> operations.TravelpartnerAccountsListingsVerifyResponse:
        r"""returns verified listings with data issues and serving eligibilities"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsListingsVerifyRequest, base_url, '/v3/{parent}/listings:verify', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "verify_listings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsListingsVerifyRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsListingsVerifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VerifyListingsResponse])
                res.verify_listings_response = out

        return res

    def travelpartner_accounts_participation_report_views_query(self, request: operations.TravelpartnerAccountsParticipationReportViewsQueryRequest) -> operations.TravelpartnerAccountsParticipationReportViewsQueryResponse:
        r"""Provides the ability to query (get, filter, and segment) a participation report for a particular account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsParticipationReportViewsQueryRequest, base_url, '/v3/{name}/participationReportViews:query', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsParticipationReportViewsQueryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsParticipationReportViewsQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QueryParticipationReportResponse])
                res.query_participation_report_response = out

        return res

    def travelpartner_accounts_price_accuracy_views_list(self, request: operations.TravelpartnerAccountsPriceAccuracyViewsListRequest) -> operations.TravelpartnerAccountsPriceAccuracyViewsListResponse:
        r"""Lists the available price accuracy views."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsPriceAccuracyViewsListRequest, base_url, '/v3/{parent}/priceAccuracyViews', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsPriceAccuracyViewsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsPriceAccuracyViewsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPriceAccuracyViewsResponse])
                res.list_price_accuracy_views_response = out

        return res

    def travelpartner_accounts_price_accuracy_views_summarize(self, request: operations.TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest) -> operations.TravelpartnerAccountsPriceAccuracyViewsSummarizeResponse:
        r"""Returns the price accuracy summary."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest, base_url, '/v3/{parent}/priceAccuracyViews:summarize', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsPriceAccuracyViewsSummarizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SummarizePriceAccuracyResponse])
                res.summarize_price_accuracy_response = out

        return res

    def travelpartner_accounts_price_coverage_views_get_latest(self, request: operations.TravelpartnerAccountsPriceCoverageViewsGetLatestRequest) -> operations.TravelpartnerAccountsPriceCoverageViewsGetLatestResponse:
        r"""Returns the latest price coverage view in full detail."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsPriceCoverageViewsGetLatestRequest, base_url, '/v3/{parent}/priceCoverageViews:latest', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsPriceCoverageViewsGetLatestRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsPriceCoverageViewsGetLatestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PriceCoverageView])
                res.price_coverage_view = out

        return res

    def travelpartner_accounts_price_coverage_views_list(self, request: operations.TravelpartnerAccountsPriceCoverageViewsListRequest) -> operations.TravelpartnerAccountsPriceCoverageViewsListResponse:
        r"""Returns the entire price coverage history."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsPriceCoverageViewsListRequest, base_url, '/v3/{parent}/priceCoverageViews', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsPriceCoverageViewsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsPriceCoverageViewsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPriceCoverageViewsResponse])
                res.list_price_coverage_views_response = out

        return res

    def travelpartner_accounts_property_performance_report_views_query(self, request: operations.TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest) -> operations.TravelpartnerAccountsPropertyPerformanceReportViewsQueryResponse:
        r"""Provides the ability to query (get, filter, and segment) a property performance links report for a specific account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest, base_url, '/v3/{name}/propertyPerformanceReportViews:query', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsPropertyPerformanceReportViewsQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QueryPropertyPerformanceReportResponse])
                res.query_property_performance_report_response = out

        return res

    def travelpartner_accounts_reconciliation_reports_create(self, request: operations.TravelpartnerAccountsReconciliationReportsCreateRequest) -> operations.TravelpartnerAccountsReconciliationReportsCreateResponse:
        r"""Creates a reconciliation report and uploads it to Google."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsReconciliationReportsCreateRequest, base_url, '/v3/{parent}/reconciliationReports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "reconciliation_report", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsReconciliationReportsCreateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsReconciliationReportsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateReconciliationReportResponse])
                res.create_reconciliation_report_response = out

        return res

    def travelpartner_accounts_reconciliation_reports_get(self, request: operations.TravelpartnerAccountsReconciliationReportsGetRequest) -> operations.TravelpartnerAccountsReconciliationReportsGetResponse:
        r"""Returns a reconciliation report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsReconciliationReportsGetRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsReconciliationReportsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsReconciliationReportsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReconciliationReport])
                res.reconciliation_report = out

        return res

    def travelpartner_accounts_reconciliation_reports_list(self, request: operations.TravelpartnerAccountsReconciliationReportsListRequest) -> operations.TravelpartnerAccountsReconciliationReportsListResponse:
        r"""Returns a list of the names of created reconciliation reports."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsReconciliationReportsListRequest, base_url, '/v3/{parent}/reconciliationReports', request)
        
        query_params = utils.get_query_params(operations.TravelpartnerAccountsReconciliationReportsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsReconciliationReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListReconciliationReportsResponse])
                res.list_reconciliation_reports_response = out

        return res

    def travelpartner_accounts_reconciliation_reports_validate(self, request: operations.TravelpartnerAccountsReconciliationReportsValidateRequest) -> operations.TravelpartnerAccountsReconciliationReportsValidateResponse:
        r"""Validates a reconciliation report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TravelpartnerAccountsReconciliationReportsValidateRequest, base_url, '/v3/{parent}/reconciliationReports:validate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "reconciliation_report", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TravelpartnerAccountsReconciliationReportsValidateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TravelpartnerAccountsReconciliationReportsValidateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidateReconciliationReportResponse])
                res.validate_reconciliation_report_response = out

        return res

    