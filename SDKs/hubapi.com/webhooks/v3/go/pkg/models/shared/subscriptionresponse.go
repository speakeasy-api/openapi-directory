// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SubscriptionResponseEventTypeEnum - Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
type SubscriptionResponseEventTypeEnum string

const (
	SubscriptionResponseEventTypeEnumContactPropertyChange       SubscriptionResponseEventTypeEnum = "contact.propertyChange"
	SubscriptionResponseEventTypeEnumCompanyPropertyChange       SubscriptionResponseEventTypeEnum = "company.propertyChange"
	SubscriptionResponseEventTypeEnumDealPropertyChange          SubscriptionResponseEventTypeEnum = "deal.propertyChange"
	SubscriptionResponseEventTypeEnumTicketPropertyChange        SubscriptionResponseEventTypeEnum = "ticket.propertyChange"
	SubscriptionResponseEventTypeEnumProductPropertyChange       SubscriptionResponseEventTypeEnum = "product.propertyChange"
	SubscriptionResponseEventTypeEnumLineItemPropertyChange      SubscriptionResponseEventTypeEnum = "line_item.propertyChange"
	SubscriptionResponseEventTypeEnumContactCreation             SubscriptionResponseEventTypeEnum = "contact.creation"
	SubscriptionResponseEventTypeEnumContactDeletion             SubscriptionResponseEventTypeEnum = "contact.deletion"
	SubscriptionResponseEventTypeEnumContactPrivacyDeletion      SubscriptionResponseEventTypeEnum = "contact.privacyDeletion"
	SubscriptionResponseEventTypeEnumCompanyCreation             SubscriptionResponseEventTypeEnum = "company.creation"
	SubscriptionResponseEventTypeEnumCompanyDeletion             SubscriptionResponseEventTypeEnum = "company.deletion"
	SubscriptionResponseEventTypeEnumDealCreation                SubscriptionResponseEventTypeEnum = "deal.creation"
	SubscriptionResponseEventTypeEnumDealDeletion                SubscriptionResponseEventTypeEnum = "deal.deletion"
	SubscriptionResponseEventTypeEnumTicketCreation              SubscriptionResponseEventTypeEnum = "ticket.creation"
	SubscriptionResponseEventTypeEnumTicketDeletion              SubscriptionResponseEventTypeEnum = "ticket.deletion"
	SubscriptionResponseEventTypeEnumProductCreation             SubscriptionResponseEventTypeEnum = "product.creation"
	SubscriptionResponseEventTypeEnumProductDeletion             SubscriptionResponseEventTypeEnum = "product.deletion"
	SubscriptionResponseEventTypeEnumLineItemCreation            SubscriptionResponseEventTypeEnum = "line_item.creation"
	SubscriptionResponseEventTypeEnumLineItemDeletion            SubscriptionResponseEventTypeEnum = "line_item.deletion"
	SubscriptionResponseEventTypeEnumConversationCreation        SubscriptionResponseEventTypeEnum = "conversation.creation"
	SubscriptionResponseEventTypeEnumConversationDeletion        SubscriptionResponseEventTypeEnum = "conversation.deletion"
	SubscriptionResponseEventTypeEnumConversationNewMessage      SubscriptionResponseEventTypeEnum = "conversation.newMessage"
	SubscriptionResponseEventTypeEnumConversationPrivacyDeletion SubscriptionResponseEventTypeEnum = "conversation.privacyDeletion"
	SubscriptionResponseEventTypeEnumConversationPropertyChange  SubscriptionResponseEventTypeEnum = "conversation.propertyChange"
	SubscriptionResponseEventTypeEnumContactMerge                SubscriptionResponseEventTypeEnum = "contact.merge"
	SubscriptionResponseEventTypeEnumCompanyMerge                SubscriptionResponseEventTypeEnum = "company.merge"
	SubscriptionResponseEventTypeEnumDealMerge                   SubscriptionResponseEventTypeEnum = "deal.merge"
	SubscriptionResponseEventTypeEnumTicketMerge                 SubscriptionResponseEventTypeEnum = "ticket.merge"
	SubscriptionResponseEventTypeEnumProductMerge                SubscriptionResponseEventTypeEnum = "product.merge"
	SubscriptionResponseEventTypeEnumLineItemMerge               SubscriptionResponseEventTypeEnum = "line_item.merge"
	SubscriptionResponseEventTypeEnumContactRestore              SubscriptionResponseEventTypeEnum = "contact.restore"
	SubscriptionResponseEventTypeEnumCompanyRestore              SubscriptionResponseEventTypeEnum = "company.restore"
	SubscriptionResponseEventTypeEnumDealRestore                 SubscriptionResponseEventTypeEnum = "deal.restore"
	SubscriptionResponseEventTypeEnumTicketRestore               SubscriptionResponseEventTypeEnum = "ticket.restore"
	SubscriptionResponseEventTypeEnumProductRestore              SubscriptionResponseEventTypeEnum = "product.restore"
	SubscriptionResponseEventTypeEnumLineItemRestore             SubscriptionResponseEventTypeEnum = "line_item.restore"
	SubscriptionResponseEventTypeEnumContactAssociationChange    SubscriptionResponseEventTypeEnum = "contact.associationChange"
	SubscriptionResponseEventTypeEnumCompanyAssociationChange    SubscriptionResponseEventTypeEnum = "company.associationChange"
	SubscriptionResponseEventTypeEnumDealAssociationChange       SubscriptionResponseEventTypeEnum = "deal.associationChange"
	SubscriptionResponseEventTypeEnumTicketAssociationChange     SubscriptionResponseEventTypeEnum = "ticket.associationChange"
	SubscriptionResponseEventTypeEnumLineItemAssociationChange   SubscriptionResponseEventTypeEnum = "line_item.associationChange"
)

func (e SubscriptionResponseEventTypeEnum) ToPointer() *SubscriptionResponseEventTypeEnum {
	return &e
}

func (e *SubscriptionResponseEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "contact.propertyChange":
		fallthrough
	case "company.propertyChange":
		fallthrough
	case "deal.propertyChange":
		fallthrough
	case "ticket.propertyChange":
		fallthrough
	case "product.propertyChange":
		fallthrough
	case "line_item.propertyChange":
		fallthrough
	case "contact.creation":
		fallthrough
	case "contact.deletion":
		fallthrough
	case "contact.privacyDeletion":
		fallthrough
	case "company.creation":
		fallthrough
	case "company.deletion":
		fallthrough
	case "deal.creation":
		fallthrough
	case "deal.deletion":
		fallthrough
	case "ticket.creation":
		fallthrough
	case "ticket.deletion":
		fallthrough
	case "product.creation":
		fallthrough
	case "product.deletion":
		fallthrough
	case "line_item.creation":
		fallthrough
	case "line_item.deletion":
		fallthrough
	case "conversation.creation":
		fallthrough
	case "conversation.deletion":
		fallthrough
	case "conversation.newMessage":
		fallthrough
	case "conversation.privacyDeletion":
		fallthrough
	case "conversation.propertyChange":
		fallthrough
	case "contact.merge":
		fallthrough
	case "company.merge":
		fallthrough
	case "deal.merge":
		fallthrough
	case "ticket.merge":
		fallthrough
	case "product.merge":
		fallthrough
	case "line_item.merge":
		fallthrough
	case "contact.restore":
		fallthrough
	case "company.restore":
		fallthrough
	case "deal.restore":
		fallthrough
	case "ticket.restore":
		fallthrough
	case "product.restore":
		fallthrough
	case "line_item.restore":
		fallthrough
	case "contact.associationChange":
		fallthrough
	case "company.associationChange":
		fallthrough
	case "deal.associationChange":
		fallthrough
	case "ticket.associationChange":
		fallthrough
	case "line_item.associationChange":
		*e = SubscriptionResponseEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionResponseEventTypeEnum: %v", v)
	}
}

// SubscriptionResponse - Complete details for an event subscription.
type SubscriptionResponse struct {
	// Determines if the subscription is active or paused.
	Active bool `json:"active"`
	// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
	CreatedAt time.Time `json:"createdAt"`
	// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
	EventType SubscriptionResponseEventTypeEnum `json:"eventType"`
	// The unique ID of the subscription.
	ID string `json:"id"`
	// The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.
	PropertyName *string `json:"propertyName,omitempty"`
	// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}
