<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Subscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CancelSubscription
     * 
     * Sets the `canceled_date` field to the end of the active billing period.
     * After this date, the status changes from ACTIVE to CANCELED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionResponse
     */
	public function cancelSubscription(
        \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions/{subscription_id}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelSubscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelSubscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateSubscription
     * 
     * Creates a subscription for a customer to a subscription plan.
     * 
     * If you provide a card on file in the request, Square charges the card for
     * the subscription. Otherwise, Square bills an invoice to the customer's email
     * address. The subscription starts immediately, unless the request includes
     * the optional `start_date`. Each individual subscription is associated with a particular location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse
     */
	public function createSubscription(
        \OpenAPI\OpenAPI\Models\Shared\CreateSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createSubscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateSubscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListSubscriptionEvents
     * 
     * Lists all events for a specific subscription.
     * In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsResponse
     */
	public function listSubscriptionEvents(
        \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions/{subscription_id}/events', \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSubscriptionEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSubscriptionEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSubscriptionEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ResumeSubscription
     * 
     * Resumes a deactivated subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionResponse
     */
	public function resumeSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions/{subscription_id}/resume', \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResumeSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resumeSubscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResumeSubscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveSubscription
     * 
     * Retrieves a subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionResponse
     */
	public function retrieveSubscription(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions/{subscription_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveSubscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveSubscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchSubscriptions
     * 
     * Searches for subscriptions.
     * Results are ordered chronologically by subscription creation date. If
     * the request specifies more than one location ID,
     * the endpoint orders the result
     * by location ID, and then by creation date within each location. If no locations are given
     * in the query, all locations are searched.
     * 
     * You can also optionally specify `customer_ids` to search by customer.
     * If left unset, all customers
     * associated with the specified locations are returned.
     * If the request specifies customer IDs, the endpoint orders results
     * first by location, within location by customer ID, and within
     * customer by subscription creation date.
     * 
     * For more information, see
     * [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-subscriptions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchSubscriptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchSubscriptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchSubscriptionsResponse
     */
	public function searchSubscriptions(
        \OpenAPI\OpenAPI\Models\Shared\SearchSubscriptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchSubscriptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchSubscriptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchSubscriptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateSubscription
     * 
     * Updates a subscription. You can set, modify, and clear the
     * `subscription` field values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse
     */
	public function updateSubscription(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/subscriptions/{subscription_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSubscriptionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateSubscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateSubscriptionResponse', 'json');
            }
        }

        return $response;
    }
}