"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetSaveOntologyTagFormatEnum(str, Enum):
    JSON = 'json'
    XML = 'xml'
    HTML = 'html'
    DUMP = 'dump'
    JPG = 'jpg'
    PDF = 'pdf'


@dataclasses.dataclass
class GetSaveOntologyTagRequest:
    
    auth: str = dataclasses.field(metadata={'query_param': { 'field_name': 'auth', 'style': 'form', 'explode': True }})
    r"""The authentication key"""  
    pw_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'pwId', 'style': 'form', 'explode': True }})
    r"""The pathway identifier"""  
    term: str = dataclasses.field(metadata={'query_param': { 'field_name': 'term', 'style': 'form', 'explode': True }})
    r"""The ontology term to apply"""  
    term_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'termId', 'style': 'form', 'explode': True }})
    r"""The identifier of the term in the ontology"""  
    user: str = dataclasses.field(metadata={'query_param': { 'field_name': 'user', 'style': 'form', 'explode': True }})
    r"""The username"""  
    format: Optional[GetSaveOntologyTagFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class GetSaveOntologyTagResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    