/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Applications } from "./applications";
import { Auth } from "./auth";
import { Classifications } from "./classifications";
import { CoverageParameters } from "./coverageparameters";
import { Files } from "./files";
import { Institutions } from "./institutions";
import * as shared from "./models/shared";
import { Policies } from "./policies";
import { Producers } from "./producers";
import { Products } from "./products";
import { Quotes } from "./quotes";
import { RiskParameters } from "./riskparameters";
import { Submissions } from "./submissions";
import { WelcomeAndHealthCheck } from "./welcomeandhealthcheck";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Sandbox Environment
   */
  "https://sandbox.heraldapi.com",
  /**
   * Production Environment
   */
  "https://production.heraldapi.com",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * HeraldAPI is the API for commercial insurance.
 *
 * @remarks
 *
 * Below are the available endpoints:
 *
 * <b>Welcome & Health Check</b>
 * <br><tt>[GET&nbsp;/](/b3A6ODY5Mzc1MA-)</tt>
 * <hr>
 *
 * <b>Submissions</b>
 * <br><tt>[POST&nbsp;/submissions](/b3A6OTQ1Mjg5Nw-submissions)</tt>
 * <br><tt>[GET&nbsp;&nbsp;/submissions/{submission_id}](/b3A6OTQ1ODY3Mg-submissions-submission-id)</tt>
 * <hr>
 *
 * <b>Quotes</b>
 * <br><tt>[GET&nbsp;/quotes/{quote_id}](/b3A6ODc3NjcwMg-quotes-quote-id)</tt>
 * <hr>
 *
 * <b>Producers</b>
 * <br><tt>[GET&nbsp;/producers](/b3A6ODc3NjcwMQ-producers)</tt>
 * <hr>
 *
 * <b>Products</b>
 * <br><tt>[GET&nbsp;/products](/b3A6ODc3NjcwNg-products)</tt>
 * <hr>
 *
 * <b>Institutions</b>
 * <br><tt>[GET&nbsp;/institutions](/b3A6ODc3NjcwNw-institutions)</tt>
 * <hr>
 *
 * <b>Coverage Parameters</b>
 * <br><tt>[GET&nbsp;/coverage_parameters](/b3A6MTA0MDgyNzc-coverage-parameters)</tt>
 * <hr>
 *
 * <b>Risk Parameters</b>
 * <br><tt>[GET&nbsp;/risk_parameters](/b3A6MTA0MDgyNzg-risk-parameters)</tt>
 */
export class SDK {
  public applications: Applications;
  public auth: Auth;
  public classifications: Classifications;
  public coverageParameters: CoverageParameters;
  public files: Files;
  public institutions: Institutions;
  public policies: Policies;
  public producers: Producers;
  public products: Products;
  public quotes: Quotes;
  public riskParameters: RiskParameters;
  public submissions: Submissions;
  public welcomeAndHealthCheck: WelcomeAndHealthCheck;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.applications = new Applications(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.auth = new Auth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.classifications = new Classifications(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.coverageParameters = new CoverageParameters(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.files = new Files(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.institutions = new Institutions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.policies = new Policies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.producers = new Producers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.products = new Products(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.quotes = new Quotes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.riskParameters = new RiskParameters(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.submissions = new Submissions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.welcomeAndHealthCheck = new WelcomeAndHealthCheck(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
