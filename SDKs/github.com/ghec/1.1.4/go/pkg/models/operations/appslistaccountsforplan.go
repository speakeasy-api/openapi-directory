// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AppsListAccountsForPlanDirectionEnum - To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
type AppsListAccountsForPlanDirectionEnum string

const (
	AppsListAccountsForPlanDirectionEnumAsc  AppsListAccountsForPlanDirectionEnum = "asc"
	AppsListAccountsForPlanDirectionEnumDesc AppsListAccountsForPlanDirectionEnum = "desc"
)

func (e AppsListAccountsForPlanDirectionEnum) ToPointer() *AppsListAccountsForPlanDirectionEnum {
	return &e
}

func (e *AppsListAccountsForPlanDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = AppsListAccountsForPlanDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListAccountsForPlanDirectionEnum: %v", v)
	}
}

type AppsListAccountsForPlanRequest struct {
	// To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
	Direction *AppsListAccountsForPlanDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// The unique identifier of the plan.
	PlanID int64 `pathParam:"style=simple,explode=false,name=plan_id"`
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *shared.SortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type AppsListAccountsForPlanResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	MarketplacePurchases []shared.MarketplacePurchase
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
