"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contentredaction as shared_contentredaction
from ..shared import jobexecutionsettings as shared_jobexecutionsettings
from ..shared import languagecode_enum as shared_languagecode_enum
from ..shared import languageidsettings as shared_languageidsettings
from ..shared import media as shared_media
from ..shared import mediaformat_enum as shared_mediaformat_enum
from ..shared import modelsettings as shared_modelsettings
from ..shared import settings as shared_settings
from ..shared import subtitles as shared_subtitles
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartTranscriptionJobRequest:
    
    media: shared_media.Media = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Media') }})  
    transcription_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TranscriptionJobName') }})  
    content_redaction: Optional[shared_contentredaction.ContentRedaction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentRedaction'), 'exclude': lambda f: f is None }})  
    identify_language: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentifyLanguage'), 'exclude': lambda f: f is None }})  
    identify_multiple_languages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentifyMultipleLanguages'), 'exclude': lambda f: f is None }})  
    job_execution_settings: Optional[shared_jobexecutionsettings.JobExecutionSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobExecutionSettings'), 'exclude': lambda f: f is None }})  
    kms_encryption_context: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KMSEncryptionContext'), 'exclude': lambda f: f is None }})  
    language_code: Optional[shared_languagecode_enum.LanguageCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageCode'), 'exclude': lambda f: f is None }})  
    language_id_settings: Optional[dict[str, shared_languageidsettings.LanguageIDSettings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageIdSettings'), 'exclude': lambda f: f is None }})  
    language_options: Optional[list[shared_languagecode_enum.LanguageCodeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageOptions'), 'exclude': lambda f: f is None }})  
    media_format: Optional[shared_mediaformat_enum.MediaFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MediaFormat'), 'exclude': lambda f: f is None }})  
    media_sample_rate_hertz: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MediaSampleRateHertz'), 'exclude': lambda f: f is None }})  
    model_settings: Optional[shared_modelsettings.ModelSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelSettings'), 'exclude': lambda f: f is None }})  
    output_bucket_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputBucketName'), 'exclude': lambda f: f is None }})  
    output_encryption_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputEncryptionKMSKeyId'), 'exclude': lambda f: f is None }})  
    output_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputKey'), 'exclude': lambda f: f is None }})  
    settings: Optional[shared_settings.Settings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    subtitles: Optional[shared_subtitles.Subtitles] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subtitles'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    