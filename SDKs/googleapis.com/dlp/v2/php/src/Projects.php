<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * De-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyResponse
     */
	public function dlpProjectsLocationsContentDeidentify(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/content:deidentify', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2DeidentifyContentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentDeidentifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2DeidentifyContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2DeidentifyContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Finds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectResponse
     */
	public function dlpProjectsLocationsContentInspect(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/content:inspect', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2InspectContentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentInspectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2InspectContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2InspectContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Re-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyResponse
     */
	public function dlpProjectsLocationsContentReidentify(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/content:reidentify', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2ReidentifyContentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsContentReidentifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2ReidentifyContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2ReidentifyContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateResponse
     */
	public function dlpProjectsLocationsDeidentifyTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/deidentifyTemplates', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2CreateDeidentifyTemplateRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2DeidentifyTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2DeidentifyTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListResponse
     */
	public function dlpProjectsLocationsDeidentifyTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/deidentifyTemplates', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDeidentifyTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2ListDeidentifyTemplatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2ListDeidentifyTemplatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelResponse
     */
	public function dlpProjectsLocationsDlpJobsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateResponse
     */
	public function dlpProjectsLocationsDlpJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/dlpJobs', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2CreateDlpJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2DlpJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2DlpJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Finish a running hybrid DlpJob. Triggers the finalization steps and running of any enabled actions that have not yet run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishResponse
     */
	public function dlpProjectsLocationsDlpJobsFinish(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:finish', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsFinishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListResponse
     */
	public function dlpProjectsLocationsDlpJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/dlpJobs', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsDlpJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2ListDlpJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2ListDlpJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactResponse
     */
	public function dlpProjectsLocationsImageRedact(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/image:redact', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2RedactImageRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsImageRedactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2RedactImageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2RedactImageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateResponse
     */
	public function dlpProjectsLocationsInspectTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/inspectTemplates', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2CreateInspectTemplateRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2InspectTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2InspectTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListResponse
     */
	public function dlpProjectsLocationsInspectTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/inspectTemplates', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsInspectTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2ListInspectTemplatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2ListInspectTemplatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateResponse
     */
	public function dlpProjectsLocationsJobTriggersActivate(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:activate', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersActivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2DlpJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2DlpJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateResponse
     */
	public function dlpProjectsLocationsJobTriggersCreate(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/jobTriggers', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2CreateJobTriggerRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2JobTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2JobTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inspect hybrid content and store findings to a trigger. The inspection will be processed asynchronously. To review the findings monitor the jobs within the trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectResponse
     */
	public function dlpProjectsLocationsJobTriggersHybridInspect(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:hybridInspect', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2HybridInspectJobTriggerRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersHybridInspectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2HybridInspectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListResponse
     */
	public function dlpProjectsLocationsJobTriggersList(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/jobTriggers', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsLocationsJobTriggersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2ListJobTriggersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2ListJobTriggersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateResponse
     */
	public function dlpProjectsStoredInfoTypesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/storedInfoTypes', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2CreateStoredInfoTypeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2StoredInfoType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2StoredInfoType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteResponse
     */
	public function dlpProjectsStoredInfoTypesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetResponse
     */
	public function dlpProjectsStoredInfoTypesGet(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2StoredInfoType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2StoredInfoType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListResponse
     */
	public function dlpProjectsStoredInfoTypesList(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/storedInfoTypes', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2ListStoredInfoTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2ListStoredInfoTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchResponse
     */
	public function dlpProjectsStoredInfoTypesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googlePrivacyDlpV2UpdateStoredInfoTypeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DlpProjectsStoredInfoTypesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googlePrivacyDlpV2StoredInfoType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2StoredInfoType', 'json');
            }
        }

        return $response;
    }
}