/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class ClientRoleMappings {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public ClientRoleMappings(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete client-level roles from user role mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmGroupsIdRoleMappingsClientsClientResponse deleteRealmGroupsIdRoleMappingsClientsClient(org.openapis.openapi.models.operations.DeleteRealmGroupsIdRoleMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmGroupsIdRoleMappingsClientsClientRequest.class, baseUrl, "/{realm}/groups/{id}/role-mappings/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmGroupsIdRoleMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.DeleteRealmGroupsIdRoleMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Delete client-level roles from user role mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmUsersIdRoleMappingsClientsClientResponse deleteRealmUsersIdRoleMappingsClientsClient(org.openapis.openapi.models.operations.DeleteRealmUsersIdRoleMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmUsersIdRoleMappingsClientsClientRequest.class, baseUrl, "/{realm}/users/{id}/role-mappings/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmUsersIdRoleMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.DeleteRealmUsersIdRoleMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get client-level role mappings for the user, and the app
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientResponse getRealmGroupsIdRoleMappingsClientsClient(org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientRequest.class, baseUrl, "/{realm}/groups/{id}/role-mappings/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get available client-level roles that can be mapped to the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse getRealmGroupsIdRoleMappingsClientsClientAvailable(org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientAvailableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientAvailableRequest.class, baseUrl, "/{realm}/groups/{id}/role-mappings/clients/{client}/available", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse res = new org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientAvailableResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get effective client-level role mappings   This recurses any composite roles
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse getRealmGroupsIdRoleMappingsClientsClientComposite(org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientCompositeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientCompositeRequest.class, baseUrl, "/{realm}/groups/{id}/role-mappings/clients/{client}/composite", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse res = new org.openapis.openapi.models.operations.GetRealmGroupsIdRoleMappingsClientsClientCompositeResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get client-level role mappings for the user, and the app
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientResponse getRealmUsersIdRoleMappingsClientsClient(org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientRequest.class, baseUrl, "/{realm}/users/{id}/role-mappings/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get available client-level roles that can be mapped to the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientAvailableResponse getRealmUsersIdRoleMappingsClientsClientAvailable(org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientAvailableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientAvailableRequest.class, baseUrl, "/{realm}/users/{id}/role-mappings/clients/{client}/available", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientAvailableResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientAvailableResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get effective client-level role mappings   This recurses any composite roles
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientCompositeResponse getRealmUsersIdRoleMappingsClientsClientComposite(org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientCompositeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientCompositeRequest.class, baseUrl, "/{realm}/users/{id}/role-mappings/clients/{client}/composite", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientCompositeResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdRoleMappingsClientsClientCompositeResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Add client-level roles to the user role mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmGroupsIdRoleMappingsClientsClientResponse postRealmGroupsIdRoleMappingsClientsClient(org.openapis.openapi.models.operations.PostRealmGroupsIdRoleMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmGroupsIdRoleMappingsClientsClientRequest.class, baseUrl, "/{realm}/groups/{id}/role-mappings/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmGroupsIdRoleMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.PostRealmGroupsIdRoleMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add client-level roles to the user role mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersIdRoleMappingsClientsClientResponse postRealmUsersIdRoleMappingsClientsClient(org.openapis.openapi.models.operations.PostRealmUsersIdRoleMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersIdRoleMappingsClientsClientRequest.class, baseUrl, "/{realm}/users/{id}/role-mappings/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersIdRoleMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.PostRealmUsersIdRoleMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }
}