"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import gluetable as shared_gluetable
from ..shared import transformencryption as shared_transformencryption
from ..shared import transformparameters as shared_transformparameters
from ..shared import workertype_enum as shared_workertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMLTransformRequest:
    
    input_record_tables: list[shared_gluetable.GlueTable] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputRecordTables') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    parameters: shared_transformparameters.TransformParameters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters') }})  
    role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    glue_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlueVersion'), 'exclude': lambda f: f is None }})  
    max_capacity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxCapacity'), 'exclude': lambda f: f is None }})  
    max_retries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxRetries'), 'exclude': lambda f: f is None }})  
    number_of_workers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfWorkers'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})  
    transform_encryption: Optional[shared_transformencryption.TransformEncryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformEncryption'), 'exclude': lambda f: f is None }})  
    worker_type: Optional[shared_workertype_enum.WorkerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkerType'), 'exclude': lambda f: f is None }})  
    