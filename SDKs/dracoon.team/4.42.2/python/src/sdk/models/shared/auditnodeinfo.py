"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuditNodeInfo:
    r"""Audit node info"""
    
    node_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeId') }})
    r"""Node ID"""  
    node_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeName') }})
    r"""Node name"""  
    node_parent_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeParentPath') }})
    r"""Parent node path
    
    `/` if node is a root node (room)
    """  
    count_children: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countChildren'), 'exclude': lambda f: f is None }})
    r"""Number of direct children
    
    (no recursion; for rooms only)
    """  
    node_is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeIsEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encryption state"""  
    node_parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeParentId'), 'exclude': lambda f: f is None }})
    r"""Parent room ID"""  
    