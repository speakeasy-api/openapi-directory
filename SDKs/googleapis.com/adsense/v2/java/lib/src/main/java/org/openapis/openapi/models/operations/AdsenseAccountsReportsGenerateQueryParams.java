/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class AdsenseAccountsReportsGenerateQueryParams {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public AdsenseAccountsReportsGenerateQueryParams withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public AdsenseAccountsReportsGenerateQueryParams withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public AdsenseAccountsReportsGenerateQueryParams withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public AdsenseAccountsReportsGenerateQueryParams withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=currencyCode")
    public String currencyCode;
    public AdsenseAccountsReportsGenerateQueryParams withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * Date range of the report, if unset the range will be considered CUSTOM.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateRange")
    public AdsenseAccountsReportsGenerateDateRangeEnum dateRange;
    public AdsenseAccountsReportsGenerateQueryParams withDateRange(AdsenseAccountsReportsGenerateDateRangeEnum dateRange) {
        this.dateRange = dateRange;
        return this;
    }
    
    /**
     * Dimensions to base the report on.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dimensions")
    public AdsenseAccountsReportsGenerateDimensionsEnum[] dimensions;
    public AdsenseAccountsReportsGenerateQueryParams withDimensions(AdsenseAccountsReportsGenerateDimensionsEnum[] dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endDate.day")
    public Long endDateDay;
    public AdsenseAccountsReportsGenerateQueryParams withEndDateDay(Long endDateDay) {
        this.endDateDay = endDateDay;
        return this;
    }
    
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endDate.month")
    public Long endDateMonth;
    public AdsenseAccountsReportsGenerateQueryParams withEndDateMonth(Long endDateMonth) {
        this.endDateMonth = endDateMonth;
        return this;
    }
    
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endDate.year")
    public Long endDateYear;
    public AdsenseAccountsReportsGenerateQueryParams withEndDateYear(Long endDateYear) {
        this.endDateYear = endDateYear;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public AdsenseAccountsReportsGenerateQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * A list of [filters](/adsense/management/reporting/filtering) to apply to the report. All provided filters must match in order for the data to be included in the report.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filters")
    public String[] filters;
    public AdsenseAccountsReportsGenerateQueryParams withFilters(String[] filters) {
        this.filters = filters;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public AdsenseAccountsReportsGenerateQueryParams withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=languageCode")
    public String languageCode;
    public AdsenseAccountsReportsGenerateQueryParams withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public AdsenseAccountsReportsGenerateQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Required. Reporting metrics.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metrics")
    public AdsenseAccountsReportsGenerateMetricsEnum[] metrics;
    public AdsenseAccountsReportsGenerateQueryParams withMetrics(AdsenseAccountsReportsGenerateMetricsEnum[] metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public AdsenseAccountsReportsGenerateQueryParams withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderBy")
    public String[] orderBy;
    public AdsenseAccountsReportsGenerateQueryParams withOrderBy(String[] orderBy) {
        this.orderBy = orderBy;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public AdsenseAccountsReportsGenerateQueryParams withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public AdsenseAccountsReportsGenerateQueryParams withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=reportingTimeZone")
    public AdsenseAccountsReportsGenerateReportingTimeZoneEnum reportingTimeZone;
    public AdsenseAccountsReportsGenerateQueryParams withReportingTimeZone(AdsenseAccountsReportsGenerateReportingTimeZoneEnum reportingTimeZone) {
        this.reportingTimeZone = reportingTimeZone;
        return this;
    }
    
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startDate.day")
    public Long startDateDay;
    public AdsenseAccountsReportsGenerateQueryParams withStartDateDay(Long startDateDay) {
        this.startDateDay = startDateDay;
        return this;
    }
    
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startDate.month")
    public Long startDateMonth;
    public AdsenseAccountsReportsGenerateQueryParams withStartDateMonth(Long startDateMonth) {
        this.startDateMonth = startDateMonth;
        return this;
    }
    
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startDate.year")
    public Long startDateYear;
    public AdsenseAccountsReportsGenerateQueryParams withStartDateYear(Long startDateYear) {
        this.startDateYear = startDateYear;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public AdsenseAccountsReportsGenerateQueryParams withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public AdsenseAccountsReportsGenerateQueryParams withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
}
