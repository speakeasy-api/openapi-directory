"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import streamingcomputationconfig as shared_streamingcomputationconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamingConfigTask:
    r"""A task that carries configuration information for streaming computations."""
    
    commit_stream_chunk_size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitStreamChunkSizeBytes'), 'exclude': lambda f: f is None }})
    r"""Chunk size for commit streams from the harness to windmill."""  
    get_data_stream_chunk_size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('getDataStreamChunkSizeBytes'), 'exclude': lambda f: f is None }})
    r"""Chunk size for get data streams from the harness to windmill."""  
    max_work_item_commit_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxWorkItemCommitBytes'), 'exclude': lambda f: f is None }})
    r"""Maximum size for work item commit supported windmill storage layer."""  
    streaming_computation_configs: Optional[list[shared_streamingcomputationconfig.StreamingComputationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingComputationConfigs'), 'exclude': lambda f: f is None }})
    r"""Set of computation configuration information."""  
    user_step_to_state_family_name_map: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userStepToStateFamilyNameMap'), 'exclude': lambda f: f is None }})
    r"""Map from user step names to state families."""  
    windmill_service_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windmillServiceEndpoint'), 'exclude': lambda f: f is None }})
    r"""If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using."""  
    windmill_service_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windmillServicePort'), 'exclude': lambda f: f is None }})
    r"""If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified."""  
    