/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * What version of webhook request should be sent to the endpoint URL when messages are sent
 */
export enum AddWebhookAddWebhookRequestBodyResponseVersionEnum {
  V1 = "v1",
  V2 = "v2",
}

export class AddWebhookAddWebhookRequestBody extends SpeakeasyBase {
  /**
   * The endpoint is where the webhook request will be sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endpointUrl" })
  endpointUrl: string;

  /**
   * Resource identifier for the top folder this webhook is associated with
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource?: string;

  /**
   * What version of webhook request should be sent to the endpoint URL when messages are sent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "responseVersion" })
  responseVersion?: AddWebhookAddWebhookRequestBodyResponseVersionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "triggers" })
  @Type(() => shared.WebhookTriggers)
  triggers?: shared.WebhookTriggers;
}

export class AddWebhookRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: AddWebhookAddWebhookRequestBody;

  /**
   * Access token required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-access-token",
  })
  evAccessToken: string;

  /**
   * API key required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-api-key",
  })
  evApiKey: string;
}

export class AddWebhookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  webhookResponse?: shared.WebhookResponse;
}
