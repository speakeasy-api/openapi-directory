"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .analytics import Analytics
from .billingdetails import BillingDetails
from .credentials import Credentials
from .experiments import Experiments
from .gamesadmin import GamesAdmin
from .manage import Manage
from .notifications import Notifications
from .pushnotificationtest import PushNotificationTest
from .region import Region
from .scripts import Scripts
from .segmentqueryfilters import SegmentQueryFilters
from .snapshots import Snapshots
from .testharness import TestHarness

SERVERS = [
    "//config2.gamesparks.net",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The API to manage the GameSparks game details"""
    analytics: Analytics
    r"""Analytics Restv 2 Controller"""
    billing_details: BillingDetails
    r"""Billing Details Rest V 2 Controller"""
    credentials: Credentials
    r"""Game Credentials Rest V 2 Controller"""
    experiments: Experiments
    r"""Experiment Rest Controller"""
    games_admin: GamesAdmin
    r"""Games Admin Restv 2 Controller"""
    manage: Manage
    r"""Manage Restv 2 Controller"""
    notifications: Notifications
    r"""Log Summary Restv 2 Controller"""
    push_notification_test: PushNotificationTest
    r"""Push Notification Test Controller"""
    region: Region
    r"""Region Restv 2 Controller"""
    scripts: Scripts
    r"""Scripts Restv 2 Controller"""
    segment_query_filters: SegmentQueryFilters
    r"""Segment Query Filter Restv 2 Controller"""
    snapshots: Snapshots
    test_harness: TestHarness
    r"""Test Harness Restv 2 Controller"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.analytics = Analytics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.billing_details = BillingDetails(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.credentials = Credentials(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.experiments = Experiments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.games_admin = GamesAdmin(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.manage = Manage(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.notifications = Notifications(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.push_notification_test = PushNotificationTest(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.region = Region(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.scripts = Scripts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.segment_query_filters = SegmentQueryFilters(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.snapshots = Snapshots(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.test_harness = TestHarness(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    