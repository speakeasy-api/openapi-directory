"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Deprecated:
    r"""These methods are no longer maintained nor supported"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def devicelist(self, request: operations.DevicelistRequest, security: operations.DevicelistSecurity) -> operations.DevicelistResponse:
        r"""The method devicelist returns the list of devices owned by the user, and their modules.
        A device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/devicelist'
        
        query_params = utils.get_query_params(operations.DevicelistRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DevicelistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NADeviceListResponse])
                res.na_device_list_response = out

        return res

    def getthermstate(self, request: operations.GetthermstateRequest, security: operations.GetthermstateSecurity) -> operations.GetthermstateResponse:
        r"""The method getthermstate returns the last Thermostat measurements, its current weekly schedule, and, if present, its current manual temperature setpoint."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getthermstate'
        
        query_params = utils.get_query_params(operations.GetthermstateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetthermstateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAThermStateResponse])
                res.na_therm_state_response = out

        return res

    def getuser(self) -> operations.GetuserResponse:
        r"""The method getuser returns information about a user such as prefered language, prefered units, and list of devices."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getuser'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetuserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NAUserResponse])
                res.na_user_response = out

        return res

    