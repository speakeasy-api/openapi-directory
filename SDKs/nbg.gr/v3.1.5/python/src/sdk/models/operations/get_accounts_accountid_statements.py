"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import oberrorresponse1 as shared_oberrorresponse1
from ..shared import obreadstatement2 as shared_obreadstatement2
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetAccountsAccountIDStatementsSecurity:
    
    authorization_code_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    client_id: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Client-Id' }})  
    

@dataclasses.dataclass
class GetAccountsAccountIDStatementsRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""AccountId"""  
    sandbox_id: str = dataclasses.field(metadata={'header': { 'field_name': 'sandbox-id', 'style': 'simple', 'explode': False }})
    r"""The unique id of the sandbox to be used"""  
    from_statement_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromStatementDateTime', 'style': 'form', 'explode': True }})
    r"""The UTC ISO 8601 Date Time to filter statements FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component."""  
    to_statement_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'toStatementDateTime', 'style': 'form', 'explode': True }})
    r"""The UTC ISO 8601 Date Time to filter statements TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component."""  
    x_customer_user_agent: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-customer-user-agent', 'style': 'simple', 'explode': False }})
    r"""Indicates the user-agent that the PSU is using."""  
    x_fapi_auth_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-fapi-auth-date', 'style': 'simple', 'explode': False }})
    r"""The time when the PSU last logged in with the TPP.
    All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:
    Sun, 10 Sep 2017 19:43:31 UTC
    """  
    x_fapi_customer_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-fapi-customer-ip-address', 'style': 'simple', 'explode': False }})
    r"""The PSU's IP address if the PSU is currently logged in with the TPP."""  
    x_fapi_interaction_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-fapi-interaction-id', 'style': 'simple', 'explode': False }})
    r"""An RFC4122 UID used as a correlation id."""  
    

@dataclasses.dataclass
class GetAccountsAccountIDStatementsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    ob_error_response1: Optional[shared_oberrorresponse1.OBErrorResponse1] = dataclasses.field(default=None)
    r"""Bad request"""  
    ob_read_statement2: Optional[shared_obreadstatement2.OBReadStatement2] = dataclasses.field(default=None)
    r"""Statements Read"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    