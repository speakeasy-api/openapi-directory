/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://fax.twilio.com",
	};
    /**
	 * DELETE_FAX_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FAX_SERVERS = {
        "https://fax.twilio.com",
    };
	
    /**
	 * DELETE_FAX_MEDIA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FAX_MEDIA_SERVERS = {
        "https://fax.twilio.com",
    };
	
    /**
	 * FETCH_FAX_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FAX_SERVERS = {
        "https://fax.twilio.com",
    };
	
    /**
	 * FETCH_FAX_MEDIA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FAX_MEDIA_SERVERS = {
        "https://fax.twilio.com",
    };
	
    /**
	 * LIST_FAX_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FAX_SERVERS = {
        "https://fax.twilio.com",
    };
	
    /**
	 * LIST_FAX_MEDIA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FAX_MEDIA_SERVERS = {
        "https://fax.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Delete a specific fax and its associated media.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFaxResponse deleteFax(org.openapis.openapi.models.operations.DeleteFaxRequest request, org.openapis.openapi.models.operations.DeleteFaxSecurity security) throws Exception {
        return this.deleteFax(request, security, null);
    }

    /**
     * Delete a specific fax and its associated media.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFaxResponse deleteFax(org.openapis.openapi.models.operations.DeleteFaxRequest request, org.openapis.openapi.models.operations.DeleteFaxSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FAX_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFaxRequest.class, baseUrl, "/v1/Faxes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFaxResponse res = new org.openapis.openapi.models.operations.DeleteFaxResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific fax media instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFaxMediaResponse deleteFaxMedia(org.openapis.openapi.models.operations.DeleteFaxMediaRequest request, org.openapis.openapi.models.operations.DeleteFaxMediaSecurity security) throws Exception {
        return this.deleteFaxMedia(request, security, null);
    }

    /**
     * Delete a specific fax media instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFaxMediaResponse deleteFaxMedia(org.openapis.openapi.models.operations.DeleteFaxMediaRequest request, org.openapis.openapi.models.operations.DeleteFaxMediaSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FAX_MEDIA_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFaxMediaRequest.class, baseUrl, "/v1/Faxes/{FaxSid}/Media/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFaxMediaResponse res = new org.openapis.openapi.models.operations.DeleteFaxMediaResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch a specific fax.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFaxResponse fetchFax(org.openapis.openapi.models.operations.FetchFaxRequest request, org.openapis.openapi.models.operations.FetchFaxSecurity security) throws Exception {
        return this.fetchFax(request, security, null);
    }

    /**
     * Fetch a specific fax.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFaxResponse fetchFax(org.openapis.openapi.models.operations.FetchFaxRequest request, org.openapis.openapi.models.operations.FetchFaxSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FAX_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFaxRequest.class, baseUrl, "/v1/Faxes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFaxResponse res = new org.openapis.openapi.models.operations.FetchFaxResponse() {{
            faxV1Fax = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FaxV1Fax out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FaxV1Fax.class);
                res.faxV1Fax = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific fax media instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFaxMediaResponse fetchFaxMedia(org.openapis.openapi.models.operations.FetchFaxMediaRequest request, org.openapis.openapi.models.operations.FetchFaxMediaSecurity security) throws Exception {
        return this.fetchFaxMedia(request, security, null);
    }

    /**
     * Fetch a specific fax media instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFaxMediaResponse fetchFaxMedia(org.openapis.openapi.models.operations.FetchFaxMediaRequest request, org.openapis.openapi.models.operations.FetchFaxMediaSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FAX_MEDIA_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFaxMediaRequest.class, baseUrl, "/v1/Faxes/{FaxSid}/Media/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFaxMediaResponse res = new org.openapis.openapi.models.operations.FetchFaxMediaResponse() {{
            faxV1FaxFaxMedia = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FaxV1FaxFaxMedia out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FaxV1FaxFaxMedia.class);
                res.faxV1FaxFaxMedia = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all faxes.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFaxResponse listFax(org.openapis.openapi.models.operations.ListFaxRequest request, org.openapis.openapi.models.operations.ListFaxSecurity security) throws Exception {
        return this.listFax(request, security, null);
    }

    /**
     * Retrieve a list of all faxes.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFaxResponse listFax(org.openapis.openapi.models.operations.ListFaxRequest request, org.openapis.openapi.models.operations.ListFaxSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FAX_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Faxes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFaxRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFaxResponse res = new org.openapis.openapi.models.operations.ListFaxResponse() {{
            listFaxResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFaxListFaxResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFaxListFaxResponse.class);
                res.listFaxResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all fax media instances for the specified fax.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFaxMediaResponse listFaxMedia(org.openapis.openapi.models.operations.ListFaxMediaRequest request, org.openapis.openapi.models.operations.ListFaxMediaSecurity security) throws Exception {
        return this.listFaxMedia(request, security, null);
    }

    /**
     * Retrieve a list of all fax media instances for the specified fax.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFaxMediaResponse listFaxMedia(org.openapis.openapi.models.operations.ListFaxMediaRequest request, org.openapis.openapi.models.operations.ListFaxMediaSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FAX_MEDIA_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFaxMediaRequest.class, baseUrl, "/v1/Faxes/{FaxSid}/Media", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFaxMediaRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFaxMediaResponse res = new org.openapis.openapi.models.operations.ListFaxMediaResponse() {{
            listFaxMediaResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFaxMediaListFaxMediaResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFaxMediaListFaxMediaResponse.class);
                res.listFaxMediaResponse = out;
            }
        }

        return res;
    }
}