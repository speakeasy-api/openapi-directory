"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classicpeopledto as shared_classicpeopledto
from ..shared import instructionsdto as shared_instructionsdto
from ..shared import projectdatesdto as shared_projectdatesdto
from ..shared import taskfiledto as shared_taskfiledto
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassicProjectCreateDTO:
    r"""Created a new Classic Project."""
    
    customer_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId') }})  
    service_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceId') }})  
    specialization_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specializationId') }})  
    categories_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoriesIds'), 'exclude': lambda f: f is None }})
    r"""list of language categories"""  
    dates: Optional[shared_projectdatesdto.ProjectDatesDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})  
    input_files: Optional[list[shared_taskfiledto.TaskFileDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputFiles'), 'exclude': lambda f: f is None }})
    r"""input files"""  
    instructions: Optional[shared_instructionsdto.InstructionsDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    people: Optional[shared_classicpeopledto.ClassicPeopleDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people'), 'exclude': lambda f: f is None }})
    r"""people"""  
    source_language_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceLanguageId'), 'exclude': lambda f: f is None }})  
    target_languages_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetLanguagesIds'), 'exclude': lambda f: f is None }})  
    