"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InputConfigurationContainerTypeEnum(str, Enum):
    r"""The Type of the output"""
    TARIFF_INPUT = 'TariffInput'
    DIGITAL_INPUT = 'DigitalInput'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InputConfigurationContainer:
    r"""Configuration for the input of a meter (digital inputs)"""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The Name of the Input"""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})
    r"""The number of the Input. (1 for Input 1)"""  
    off_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffText'), 'exclude': lambda f: f is None }})
    r"""The visualization text for an OFF action"""  
    on_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnText'), 'exclude': lambda f: f is None }})
    r"""The visualization text for an ON action"""  
    type: Optional[InputConfigurationContainerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})
    r"""The Type of the output"""  
    