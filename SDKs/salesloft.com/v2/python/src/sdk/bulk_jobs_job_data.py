"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class BulkJobsJobData:
    r"""Bulk Jobs - Job Data"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_bulk_jobs_bulk_jobs_id_job_data(self, request: operations.GetV2BulkJobsBulkJobsIDJobDataRequest) -> operations.GetV2BulkJobsBulkJobsIDJobDataResponse:
        r"""List job data for a bulk job
        Fetches multiple job data records for a given bulk job. Pagination is not supported, but cursor based polling is via use of the `id[gt]` filter. Pass the last id seen (i.e. `id[gt]=1234`) in order to get the next batch of records.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2BulkJobsBulkJobsIDJobDataRequest, base_url, '/v2/bulk_jobs/{bulk_jobs_id}/job_data', request)
        
        query_params = utils.get_query_params(operations.GetV2BulkJobsBulkJobsIDJobDataRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2BulkJobsBulkJobsIDJobDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_bulk_jobs_bulk_jobs_id_job_data(self, request: operations.PostV2BulkJobsBulkJobsIDJobDataRequest) -> operations.PostV2BulkJobsBulkJobsIDJobDataResponse:
        r"""Create job data for a bulk job
        Upload job data for the specified bulk job. Upload an array of objects, where element contains the parameters necessary to execute the individual calls. Each call to this endpoint can handle up to 5,000 records at a time. There is no limit to how many times you can create job data for a given bulk job.
        
        For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href=\"/bulk.html\" target=\"_blank\" rel=\"noopener noreferrer\">bulk job details page</a>.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostV2BulkJobsBulkJobsIDJobDataRequest, base_url, '/v2/bulk_jobs/{bulk_jobs_id}/job_data', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2BulkJobsBulkJobsIDJobDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    