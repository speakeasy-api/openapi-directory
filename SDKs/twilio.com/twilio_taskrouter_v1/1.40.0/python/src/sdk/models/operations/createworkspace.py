"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taskrouter_v1_workspace as shared_taskrouter_v1_workspace
from ..shared import workspace_enum_queue_order_enum as shared_workspace_enum_queue_order_enum
from typing import Optional

CREATE_WORKSPACE_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class CreateWorkspaceSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateWorkspaceCreateWorkspaceRequest:
    
    friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the Workspace resource. It can be up to 64 characters long. For example: `Customer Support` or `2014 Election Campaign`."""  
    event_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EventCallbackUrl' }})
    r"""The URL we should call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides)."""  
    events_filter: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EventsFilter' }})
    r"""The list of Workspace events for which to call event_callback_url. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated."""  
    multi_task_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MultiTaskEnabled' }})
    r"""Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be created as multi-tasking. The default is `true`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking)."""  
    prioritize_queue_order: Optional[shared_workspace_enum_queue_order_enum.WorkspaceEnumQueueOrderEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'PrioritizeQueueOrder' }})  
    template: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Template' }})
    r"""An available template name. Can be: `NONE` or `FIFO` and the default is `NONE`. Pre-configures the Workspace with the Workflow and Activities specified in the template. `NONE` will create a Workspace with only a set of default activities. `FIFO` will configure TaskRouter with a set of default activities and a single TaskQueue for first-in, first-out distribution, which can be useful when you are getting started with TaskRouter."""  
    

@dataclasses.dataclass
class CreateWorkspaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taskrouter_v1_workspace: Optional[shared_taskrouter_v1_workspace.TaskrouterV1Workspace] = dataclasses.field(default=None)
    r"""Created"""  
    