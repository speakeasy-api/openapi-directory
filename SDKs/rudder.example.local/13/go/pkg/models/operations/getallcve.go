// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetAllCve200ApplicationJSONActionEnum - The id of the action
type GetAllCve200ApplicationJSONActionEnum string

const (
	GetAllCve200ApplicationJSONActionEnumGetAllCve GetAllCve200ApplicationJSONActionEnum = "getAllCve"
)

func (e *GetAllCve200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getAllCve":
		*e = GetAllCve200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllCve200ApplicationJSONActionEnum: %s", s)
	}
}

type GetAllCve200ApplicationJSONData struct {
	CVEs []shared.CveDetails `json:"CVEs"`
}

// GetAllCve200ApplicationJSONResultEnum - Result of the request
type GetAllCve200ApplicationJSONResultEnum string

const (
	GetAllCve200ApplicationJSONResultEnumSuccess GetAllCve200ApplicationJSONResultEnum = "success"
	GetAllCve200ApplicationJSONResultEnumError   GetAllCve200ApplicationJSONResultEnum = "error"
)

func (e *GetAllCve200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetAllCve200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllCve200ApplicationJSONResultEnum: %s", s)
	}
}

// GetAllCve200ApplicationJSON - CVE check result
type GetAllCve200ApplicationJSON struct {
	// The id of the action
	Action GetAllCve200ApplicationJSONActionEnum `json:"action"`
	Data   GetAllCve200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetAllCve200ApplicationJSONResultEnum `json:"result"`
}

type GetAllCveResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// CVE check result
	GetAllCve200ApplicationJSONObject *GetAllCve200ApplicationJSON
}
