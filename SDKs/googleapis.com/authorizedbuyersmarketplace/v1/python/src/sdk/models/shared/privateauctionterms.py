"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import price as shared_price
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PrivateAuctionTermsInput:
    r"""Pricing terms for Private Auctions."""
    
    floor_price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorPrice'), 'exclude': lambda f: f is None }})
    r"""Represents a price and a pricing type for a deal."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PrivateAuctionTerms:
    r"""Pricing terms for Private Auctions."""
    
    floor_price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorPrice'), 'exclude': lambda f: f is None }})
    r"""Represents a price and a pricing type for a deal."""  
    open_auction_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openAuctionAllowed'), 'exclude': lambda f: f is None }})
    r"""Output only. True if open auction buyers are allowed to compete with invited buyers in this private auction."""  
    