// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuthorizationPolicyActionEnum - Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
type AuthorizationPolicyActionEnum string

const (
	AuthorizationPolicyActionEnumActionUnspecified AuthorizationPolicyActionEnum = "ACTION_UNSPECIFIED"
	AuthorizationPolicyActionEnumAllow             AuthorizationPolicyActionEnum = "ALLOW"
	AuthorizationPolicyActionEnumDeny              AuthorizationPolicyActionEnum = "DENY"
)

func (e AuthorizationPolicyActionEnum) ToPointer() *AuthorizationPolicyActionEnum {
	return &e
}

func (e *AuthorizationPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_UNSPECIFIED":
		fallthrough
	case "ALLOW":
		fallthrough
	case "DENY":
		*e = AuthorizationPolicyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationPolicyActionEnum: %v", v)
	}
}

// AuthorizationPolicy - AuthorizationPolicy is a resource that specifies how a server should authorize incoming connections. This resource in itself does not change the configuration unless it's attached to a target https proxy or endpoint config selector resource.
type AuthorizationPolicy struct {
	// Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	Action *AuthorizationPolicyActionEnum `json:"action,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Optional. Free-text description of the resource.
	Description *string `json:"description,omitempty"`
	// Optional. Set of label tags associated with the AuthorizationPolicy resource.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
	Name *string `json:"name,omitempty"`
	// Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
	Rules []Rule `json:"rules,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// AuthorizationPolicyInput - AuthorizationPolicy is a resource that specifies how a server should authorize incoming connections. This resource in itself does not change the configuration unless it's attached to a target https proxy or endpoint config selector resource.
type AuthorizationPolicyInput struct {
	// Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	Action *AuthorizationPolicyActionEnum `json:"action,omitempty"`
	// Optional. Free-text description of the resource.
	Description *string `json:"description,omitempty"`
	// Optional. Set of label tags associated with the AuthorizationPolicy resource.
	Labels map[string]string `json:"labels,omitempty"`
	// Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
	Name *string `json:"name,omitempty"`
	// Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
	Rules []Rule `json:"rules,omitempty"`
}
