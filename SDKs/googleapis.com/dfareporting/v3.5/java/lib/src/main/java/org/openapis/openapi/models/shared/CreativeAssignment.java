/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CreativeAssignment - Creative Assignment.
 */
public class CreativeAssignment {
    /**
     * Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public CreativeAssignment withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyEventTags")
    public Boolean applyEventTags;

    public CreativeAssignment withApplyEventTags(Boolean applyEventTags) {
        this.applyEventTags = applyEventTags;
        return this;
    }
    
    /**
     * Click-through URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickThroughUrl")
    public ClickThroughUrl clickThroughUrl;

    public CreativeAssignment withClickThroughUrl(ClickThroughUrl clickThroughUrl) {
        this.clickThroughUrl = clickThroughUrl;
        return this;
    }
    
    /**
     * Companion creative overrides for this creative assignment. Applicable to video ads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companionCreativeOverrides")
    public CompanionClickThroughOverride[] companionCreativeOverrides;

    public CreativeAssignment withCompanionCreativeOverrides(CompanionClickThroughOverride[] companionCreativeOverrides) {
        this.companionCreativeOverrides = companionCreativeOverrides;
        return this;
    }
    
    /**
     * Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeGroupAssignments")
    public CreativeGroupAssignment[] creativeGroupAssignments;

    public CreativeAssignment withCreativeGroupAssignments(CreativeGroupAssignment[] creativeGroupAssignments) {
        this.creativeGroupAssignments = creativeGroupAssignments;
        return this;
    }
    
    /**
     * ID of the creative to be assigned. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeId")
    public String creativeId;

    public CreativeAssignment withCreativeId(String creativeId) {
        this.creativeId = creativeId;
        return this;
    }
    
    /**
     * Represents a DimensionValue resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeIdDimensionValue")
    public DimensionValue creativeIdDimensionValue;

    public CreativeAssignment withCreativeIdDimensionValue(DimensionValue creativeIdDimensionValue) {
        this.creativeIdDimensionValue = creativeIdDimensionValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public CreativeAssignment withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("richMediaExitOverrides")
    public RichMediaExitOverride[] richMediaExitOverrides;

    public CreativeAssignment withRichMediaExitOverrides(RichMediaExitOverride[] richMediaExitOverrides) {
        this.richMediaExitOverrides = richMediaExitOverrides;
        return this;
    }
    
    /**
     * Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    public Integer sequence;

    public CreativeAssignment withSequence(Integer sequence) {
        this.sequence = sequence;
        return this;
    }
    
    /**
     * Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslCompliant")
    public Boolean sslCompliant;

    public CreativeAssignment withSslCompliant(Boolean sslCompliant) {
        this.sslCompliant = sslCompliant;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public CreativeAssignment withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    public Integer weight;

    public CreativeAssignment withWeight(Integer weight) {
        this.weight = weight;
        return this;
    }
    
    public CreativeAssignment(){}
}
