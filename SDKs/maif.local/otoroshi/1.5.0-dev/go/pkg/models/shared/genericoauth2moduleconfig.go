// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type GenericOauth2ModuleConfigJwtVerifierType string

const (
	GenericOauth2ModuleConfigJwtVerifierTypeHSAlgoSettings   GenericOauth2ModuleConfigJwtVerifierType = "HSAlgoSettings"
	GenericOauth2ModuleConfigJwtVerifierTypeRSAlgoSettings   GenericOauth2ModuleConfigJwtVerifierType = "RSAlgoSettings"
	GenericOauth2ModuleConfigJwtVerifierTypeESAlgoSettings   GenericOauth2ModuleConfigJwtVerifierType = "ESAlgoSettings"
	GenericOauth2ModuleConfigJwtVerifierTypeJWKSAlgoSettings GenericOauth2ModuleConfigJwtVerifierType = "JWKSAlgoSettings"
)

type GenericOauth2ModuleConfigJwtVerifier struct {
	HSAlgoSettings   *HSAlgoSettings
	RSAlgoSettings   *RSAlgoSettings
	ESAlgoSettings   *ESAlgoSettings
	JWKSAlgoSettings *JWKSAlgoSettings

	Type GenericOauth2ModuleConfigJwtVerifierType
}

func CreateGenericOauth2ModuleConfigJwtVerifierHSAlgoSettings(hsAlgoSettings HSAlgoSettings) GenericOauth2ModuleConfigJwtVerifier {
	typ := GenericOauth2ModuleConfigJwtVerifierTypeHSAlgoSettings

	return GenericOauth2ModuleConfigJwtVerifier{
		HSAlgoSettings: &hsAlgoSettings,
		Type:           typ,
	}
}

func CreateGenericOauth2ModuleConfigJwtVerifierRSAlgoSettings(rsAlgoSettings RSAlgoSettings) GenericOauth2ModuleConfigJwtVerifier {
	typ := GenericOauth2ModuleConfigJwtVerifierTypeRSAlgoSettings

	return GenericOauth2ModuleConfigJwtVerifier{
		RSAlgoSettings: &rsAlgoSettings,
		Type:           typ,
	}
}

func CreateGenericOauth2ModuleConfigJwtVerifierESAlgoSettings(esAlgoSettings ESAlgoSettings) GenericOauth2ModuleConfigJwtVerifier {
	typ := GenericOauth2ModuleConfigJwtVerifierTypeESAlgoSettings

	return GenericOauth2ModuleConfigJwtVerifier{
		ESAlgoSettings: &esAlgoSettings,
		Type:           typ,
	}
}

func CreateGenericOauth2ModuleConfigJwtVerifierJWKSAlgoSettings(jwksAlgoSettings JWKSAlgoSettings) GenericOauth2ModuleConfigJwtVerifier {
	typ := GenericOauth2ModuleConfigJwtVerifierTypeJWKSAlgoSettings

	return GenericOauth2ModuleConfigJwtVerifier{
		JWKSAlgoSettings: &jwksAlgoSettings,
		Type:             typ,
	}
}

func (u *GenericOauth2ModuleConfigJwtVerifier) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	hsAlgoSettings := new(HSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&hsAlgoSettings); err == nil {
		u.HSAlgoSettings = hsAlgoSettings
		u.Type = GenericOauth2ModuleConfigJwtVerifierTypeHSAlgoSettings
		return nil
	}

	rsAlgoSettings := new(RSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&rsAlgoSettings); err == nil {
		u.RSAlgoSettings = rsAlgoSettings
		u.Type = GenericOauth2ModuleConfigJwtVerifierTypeRSAlgoSettings
		return nil
	}

	esAlgoSettings := new(ESAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&esAlgoSettings); err == nil {
		u.ESAlgoSettings = esAlgoSettings
		u.Type = GenericOauth2ModuleConfigJwtVerifierTypeESAlgoSettings
		return nil
	}

	jwksAlgoSettings := new(JWKSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&jwksAlgoSettings); err == nil {
		u.JWKSAlgoSettings = jwksAlgoSettings
		u.Type = GenericOauth2ModuleConfigJwtVerifierTypeJWKSAlgoSettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GenericOauth2ModuleConfigJwtVerifier) MarshalJSON() ([]byte, error) {
	if u.HSAlgoSettings != nil {
		return json.Marshal(u.HSAlgoSettings)
	}

	if u.RSAlgoSettings != nil {
		return json.Marshal(u.RSAlgoSettings)
	}

	if u.ESAlgoSettings != nil {
		return json.Marshal(u.ESAlgoSettings)
	}

	if u.JWKSAlgoSettings != nil {
		return json.Marshal(u.JWKSAlgoSettings)
	}

	return nil, nil
}

// GenericOauth2ModuleConfig - Settings to authenticate users using a generic OAuth2 provider
type GenericOauth2ModuleConfig struct {
	// Field name to get access token
	AccessTokenField string `json:"accessTokenField"`
	// OAuth authorize URL
	AuthorizeURL string `json:"authorizeUrl"`
	// Otoroshi callback URL
	CallbackURL string `json:"callbackUrl"`
	// The claims of the token
	Claims *string `json:"claims,omitempty"`
	// OAuth Client id
	ClientID string `json:"clientId"`
	// OAuth Client secret
	ClientSecret string `json:"clientSecret"`
	// Description of the config
	Desc string `json:"desc"`
	// Field name to get email from user profile
	EmailField string `json:"emailField"`
	// Unique id of the config
	ID string `json:"id"`
	// Algo. settings to verify JWT token
	JwtVerifier *GenericOauth2ModuleConfigJwtVerifier `json:"jwtVerifier,omitempty"`
	// OAuth login URL
	LoginURL string `json:"loginUrl"`
	// OAuth logout URL
	LogoutURL string `json:"logoutUrl"`
	// Name of the config
	Name string `json:"name"`
	// Field name to get name from user profile
	NameField string `json:"nameField"`
	// URL of the OIDC config. file
	OidConfig *string `json:"oidConfig,omitempty"`
	// Field name to get otoroshi metadata from. You can specify sub fields using | as separator
	OtoroshiDataField string `json:"otoroshiDataField"`
	// The user profile will be read from the JWT token in id_token
	ReadProfileFromToken *bool `json:"readProfileFromToken,omitempty"`
	// The scope of the token
	Scope *string `json:"scope,omitempty"`
	// Max age of the session
	SessionMaxAge int `json:"sessionMaxAge"`
	// OAuth token URL
	TokenURL string `json:"tokenUrl"`
	// Type of settings. value is oauth2
	Type string `json:"type"`
	// Use for redirection to actual service
	UseCookies *bool `json:"useCookies,omitempty"`
	// Use JSON or URL Form Encoded as payload with the OAuth provider
	UseJSON *bool `json:"useJson,omitempty"`
	// OAuth userinfo to get user profile
	UserInfoURL string `json:"userInfoUrl"`
}
