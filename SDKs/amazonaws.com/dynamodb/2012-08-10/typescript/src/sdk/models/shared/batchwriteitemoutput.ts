/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ConsumedCapacity } from "./consumedcapacity";
import { ItemCollectionMetrics } from "./itemcollectionmetrics";
import { WriteRequest } from "./writerequest";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents the output of a <code>BatchWriteItem</code> operation.
 */
export class BatchWriteItemOutput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConsumedCapacity })
  @Expose({ name: "ConsumedCapacity" })
  @Type(() => ConsumedCapacity)
  consumedCapacity?: ConsumedCapacity[];

  @SpeakeasyMetadata({ elemType: ItemCollectionMetrics, elemDepth: 2 })
  @Expose({ name: "ItemCollectionMetrics" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ItemCollectionMetrics[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ItemCollectionMetrics);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  itemCollectionMetrics?: Record<string, ItemCollectionMetrics[]>;

  @SpeakeasyMetadata({ elemType: WriteRequest, elemDepth: 2 })
  @Expose({ name: "UnprocessedItems" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, WriteRequest[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], WriteRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  unprocessedItems?: Record<string, WriteRequest[]>;
}
