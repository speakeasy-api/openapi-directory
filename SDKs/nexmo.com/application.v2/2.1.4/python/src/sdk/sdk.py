"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.nexmo.com/v2/applications",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Vonage provides an Application API to allow management of your Vonage Applications.
    
    This API is backwards compatible with version 1. Applications created using version 1 of the API can also be managed using version 2 (this version) of the API.
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def create_application(self, request: operations.CreateApplicationRequestBody) -> operations.CreateApplicationResponse:
        r"""Create an application"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateApplication201ApplicationJSON])
                res.create_application_201_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateApplication400ApplicationJSON])
                res.create_application_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateApplication401ApplicationJSON])
                res.create_application_401_application_json_object = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateApplication405ApplicationJSON])
                res.create_application_405_application_json_object = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateApplication406ApplicationJSON])
                res.create_application_406_application_json_object = out
        elif http_res.status_code == 415:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateApplication415ApplicationJSON])
                res.create_application_415_application_json_object = out

        return res

    def delete_application(self, request: operations.DeleteApplicationRequest) -> operations.DeleteApplicationResponse:
        r"""Delete an application
        Deleting an application **cannot be undone**.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteApplicationRequest, base_url, '/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteApplication401ApplicationJSON])
                res.delete_application_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteApplication404ApplicationJSON])
                res.delete_application_404_application_json_object = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteApplication405ApplicationJSON])
                res.delete_application_405_application_json_object = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteApplication406ApplicationJSON])
                res.delete_application_406_application_json_object = out

        return res

    def get_application(self, request: operations.GetApplicationRequest) -> operations.GetApplicationResponse:
        r"""Get an application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetApplicationRequest, base_url, '/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationResponse])
                res.application_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetApplication401ApplicationJSON])
                res.get_application_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetApplication404ApplicationJSON])
                res.get_application_404_application_json_object = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetApplication405ApplicationJSON])
                res.get_application_405_application_json_object = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetApplication406ApplicationJSON])
                res.get_application_406_application_json_object = out

        return res

    def list_application(self, request: operations.ListApplicationRequest) -> operations.ListApplicationResponse:
        r"""List available applications"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        query_params = utils.get_query_params(operations.ListApplicationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationResponseCollection])
                res.application_response_collection = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListApplication400ApplicationJSON])
                res.list_application_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListApplication401ApplicationJSON])
                res.list_application_401_application_json_object = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListApplication405ApplicationJSON])
                res.list_application_405_application_json_object = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListApplication406ApplicationJSON])
                res.list_application_406_application_json_object = out

        return res

    def update_application(self, request: operations.UpdateApplicationRequest) -> operations.UpdateApplicationResponse:
        r"""Update an application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateApplicationRequest, base_url, '/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication200ApplicationJSON])
                res.update_application_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication400ApplicationJSON])
                res.update_application_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication401ApplicationJSON])
                res.update_application_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication404ApplicationJSON])
                res.update_application_404_application_json_object = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication405ApplicationJSON])
                res.update_application_405_application_json_object = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication406ApplicationJSON])
                res.update_application_406_application_json_object = out
        elif http_res.status_code == 415:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateApplication415ApplicationJSON])
                res.update_application_415_application_json_object = out

        return res

    