<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DeviceInfo 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * App Device ID
     * 
     * This gives "app device id", "certificate" and "signed data".  
     * The `app_id` in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to `E8C28D3C`.  
     * 
     * The certificate is valid and issued by `Chromecast ICA 6 (Audio Assist), Google Inc`.
     * 
     * Not sure what the other two are.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AppDeviceIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AppDeviceIDResponse
     */
	public function appDeviceID(
        \OpenAPI\OpenAPI\Models\Shared\AppDeviceIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AppDeviceIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_app_device_id');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppDeviceIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example11 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example11', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Check Ready Status
     * 
     * **Update:** This seems to have changed now and is no longer possible. The error is also new.
     * 
     * Setting `play_ready_message` to true plays a welcome message on the device saying "Hi, I'm your Google Assistant. I'm here to help. To learn a few things you can do, continue in the Google Home app."
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CheckReadyStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckReadyStatusResponse
     */
	public function checkReadyStatus(
        \OpenAPI\OpenAPI\Models\Shared\CheckReadyStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckReadyStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assistant/check_ready_status');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckReadyStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example13 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example13', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Eureka Info
     * 
     * This gives most of the device info. The GET parameter `param` is a comma separated list of json keys to fetch. Currently, these params are known: `version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer,sign,aogh,ultrasound,mesh`
     * 
     * Nested items can also be filtered using the dot notation. Example: `audio.digital`
     * 
     * The `options` GET parameter is always set to `detail` or `detail,sign`. `sign` signs the `nonce` and returns some value.
     * 
     * The `nonce` GET parameter is an integer value signed with needed (see `option` parameter above).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EurekaInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EurekaInfoResponse
     */
	public function eurekaInfo(
        \OpenAPI\OpenAPI\Models\Operations\EurekaInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EurekaInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/eureka_info');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EurekaInfoRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EurekaInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Locales
     * 
     * Simply returns a list of all supported locales.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\LocalesResponse
     */
	public function locales(
    ): \OpenAPI\OpenAPI\Models\Operations\LocalesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/supported_locales');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocalesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example15s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Example15>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Offer
     * 
     * This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.  
     * A new token is generated for every request.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OfferResponse
     */
	public function offer(
    ): \OpenAPI\OpenAPI\Models\Operations\OfferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offer');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OfferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example12 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example12', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Test Internet Download Speed
     * 
     * **Update:** This seems to have been removed. Returns 404 Not Found.
     * 
     * This endpoint tests internet download speed. Any sample file URL can be provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TestInternetDownloadSpeedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestInternetDownloadSpeedResponse
     */
	public function testInternetDownloadSpeed(
        \OpenAPI\OpenAPI\Models\Shared\TestInternetDownloadSpeedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestInternetDownloadSpeedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/test_internet_download_speed');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestInternetDownloadSpeedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example16 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example16', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Timezones
     * 
     * Simply returns a list of all supported timezones.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TimezonesResponse
     */
	public function timezones(
    ): \OpenAPI\OpenAPI\Models\Operations\TimezonesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/supported_timezones');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TimezonesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example14s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Example14>', 'json');
            }
        }

        return $response;
    }
}