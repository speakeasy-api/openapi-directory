// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListChannelsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListChannelsXAmzTargetEnum
type ListChannelsXAmzTargetEnum string

const (
	ListChannelsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101ListChannels ListChannelsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListChannels"
)

func (e *ListChannelsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListChannels":
		*e = ListChannelsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListChannelsXAmzTargetEnum: %s", s)
	}
}

type ListChannelsHeaders struct {
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListChannelsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListChannelsRequest struct {
	QueryParams ListChannelsQueryParams
	Headers     ListChannelsHeaders
	Request     shared.ListChannelsRequest `request:"mediaType=application/json"`
}

type ListChannelsResponse struct {
	ContentType string
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListChannelsResponse *shared.ListChannelsResponse
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
