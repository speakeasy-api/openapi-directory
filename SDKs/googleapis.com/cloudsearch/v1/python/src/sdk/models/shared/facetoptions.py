"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import integerfacetingoptions as shared_integerfacetingoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FacetOptions:
    r"""Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination."""
    
    integer_faceting_options: Optional[shared_integerfacetingoptions.IntegerFacetingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integerFacetingOptions'), 'exclude': lambda f: f is None }})
    r"""Used to specify integer faceting options."""  
    num_facet_buckets: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numFacetBuckets'), 'exclude': lambda f: f is None }})
    r"""Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100."""  
    object_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectType'), 'exclude': lambda f: f is None }})
    r"""If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets."""  
    operator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operatorName'), 'exclude': lambda f: f is None }})
    r"""The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions"""  
    source_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceName'), 'exclude': lambda f: f is None }})
    r"""Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used."""  
    