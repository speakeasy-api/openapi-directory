/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedFiles extends SpeakeasyBase {
  /**
   * Comment about the allowed entity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment: string;

  /**
   * The file sha256 hash to allow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sha256" })
  sha256: string;
}

export class UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedUrls extends SpeakeasyBase {
  /**
   * Comment about the allowed entity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment: string;

  /**
   * The url to allow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * Set mode to 'enabled' to enable malware prevention, otherwise 'disabled'
 */
export enum UpdateNetworkSecurityMalwareSettingsRequestBodyModeEnum {
  Disabled = "disabled",
  Enabled = "enabled",
}

export class UpdateNetworkSecurityMalwareSettingsRequestBody extends SpeakeasyBase {
  /**
   * The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedFiles,
  })
  @Expose({ name: "allowedFiles" })
  @Type(() => UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedFiles)
  allowedFiles?: UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedFiles[];

  /**
   * The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP allow listing
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedUrls,
  })
  @Expose({ name: "allowedUrls" })
  @Type(() => UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedUrls)
  allowedUrls?: UpdateNetworkSecurityMalwareSettingsRequestBodyAllowedUrls[];

  /**
   * Set mode to 'enabled' to enable malware prevention, otherwise 'disabled'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode: UpdateNetworkSecurityMalwareSettingsRequestBodyModeEnum;
}

export class UpdateNetworkSecurityMalwareSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkSecurityMalwareSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkSecurityMalwareSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkSecurityMalwareSettings200ApplicationJSONObject?: Record<
    string,
    any
  >;
}
