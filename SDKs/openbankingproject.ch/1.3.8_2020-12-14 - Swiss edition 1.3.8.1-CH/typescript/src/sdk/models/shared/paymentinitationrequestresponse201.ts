/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Amount } from "./amount";
import { AuthenticationObject } from "./authenticationobject";
import { ChallengeData } from "./challengedata";
import { ChosenScaMethod } from "./chosenscamethod";
import { HrefType } from "./hreftype";
import { TppMessage2XX } from "./tppmessage2xx";
import { TransactionStatusEnum } from "./transactionstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Body of the response for a successful payment initiation request.
 */
export class PaymentInitationRequestResponse201 extends SpeakeasyBase {
  /**
   * A list of hyperlinks to be recognised by the TPP.
   *
   * @remarks
   * The actual hyperlinks used in the response depend on the dynamical decisions of the ASPSP when
   * processing the request.
   *
   * **Remark:** All links can be relative or full links, to be decided by the ASPSP.
   *
   * Type of links admitted in this response, (further links might be added for ASPSP defined extensions):
   *
   * * 'scaRedirect':
   *   In case of an SCA Redirect Approach, the ASPSP is transmitting the link to which to redirect the PSU browser.
   * * 'scaOAuth':
   *   In case of a SCA OAuth2 Approach, the ASPSP is transmitting the URI where the configuration of the Authorisation
   *   Server can be retrieved. The configuration follows the OAuth 2.0 Authorisation Server Metadata specification.
   * * 'confirmation':
   *   Might be added by the ASPSP if either the "scaRedirect" or "scaOAuth" hyperlink is returned
   *   in the same response message.
   *   This hyperlink defines the URL to the resource which needs to be updated with
   *     * a confirmation code as retrieved after the plain redirect authentication process with the ASPSP authentication server or
   *     * an access token as retrieved by submitting an authorization code after the integrated OAuth based authentication process with the ASPSP authentication server.
   * * 'startAuthorisation':
   *   In case, where an explicit start of the transaction authorisation is needed, but no more data needs to be updated
   *   (no authentication method to be selected, no PSU identification nor PSU authentication data to be uploaded).
   * * 'startAuthorisationWithPsuIdentification':
   *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
   *   uploading the PSU identification data.
   * * 'startAuthorisationWithPsuAuthentication':
   *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
   *   uploading the PSU authentication data.
   *   * 'startAuthorisationWithEncryptedPsuAuthentication':
   *     Same as startAuthorisactionWithPsuAuthentication where the authentication data need to be encrypted on
   *     application layer in uploading.
   * * 'startAuthorisationWithAuthenticationMethodSelection':
   *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
   *   selecting the authentication method.
   *   This link is contained under exactly the same conditions as the data element "scaMethods"
   * * 'startAuthorisationWithTransactionAuthorisation':
   *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
   *   authorising the transaction e.g. by uploading an OTP received by SMS.
   * * 'self':
   *   The link to the payment initiation resource created by this request.
   *   This link can be used to retrieve the resource data.
   * * 'status':
   *   The link to retrieve the transaction status of the payment initiation.
   * * 'scaStatus':
   *   The link to retrieve the scaStatus of the corresponding authorisation sub-resource.
   *   This link is only contained, if an authorisation sub-resource has been already created.
   *
   */
  @SpeakeasyMetadata({ elemType: HrefType })
  @Expose({ name: "_links" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, HrefType> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], HrefType);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  links: Record<string, HrefType>;

  /**
   * It is contained in addition to the data element 'chosenScaMethod' if challenge data is needed for SCA.
   *
   * @remarks
   * In rare cases this attribute is also used in the context of the 'startAuthorisationWithPsuAuthentication' link.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "challengeData" })
  @Type(() => ChallengeData)
  challengeData?: ChallengeData;

  /**
   * Authentication object.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chosenScaMethod" })
  @Type(() => ChosenScaMethod)
  chosenScaMethod?: ChosenScaMethod;

  @SpeakeasyMetadata()
  @Expose({ name: "currencyConversionFee" })
  @Type(() => Amount)
  currencyConversionFee?: Amount;

  @SpeakeasyMetadata()
  @Expose({ name: "estimatedInterbankSettlementAmount" })
  @Type(() => Amount)
  estimatedInterbankSettlementAmount?: Amount;

  @SpeakeasyMetadata()
  @Expose({ name: "estimatedTotalAmount" })
  @Type(() => Amount)
  estimatedTotalAmount?: Amount;

  /**
   * Resource identification of the generated payment initiation resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentId" })
  paymentId: string;

  /**
   * Text to be displayed to the PSU.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "psuMessage" })
  psuMessage?: string;

  /**
   * This data element might be contained, if SCA is required and if the PSU has a choice between different
   *
   * @remarks
   * authentication methods.
   *
   * Depending on the risk management of the ASPSP this choice might be offered before or after the PSU
   * has been identified with the first relevant factor, or if an access token is transported.
   *
   * If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection'
   * contained in the response body.
   *
   * These methods shall be presented towards the PSU for selection by the TPP.
   *
   */
  @SpeakeasyMetadata({ elemType: AuthenticationObject })
  @Expose({ name: "scaMethods" })
  @Type(() => AuthenticationObject)
  scaMethods?: AuthenticationObject[];

  @SpeakeasyMetadata({ elemType: TppMessage2XX })
  @Expose({ name: "tppMessages" })
  @Type(() => TppMessage2XX)
  tppMessages?: TppMessage2XX[];

  /**
   * If equals 'true', the transaction will involve specific transaction cost as shown by the ASPSP in
   *
   * @remarks
   * their public price list or as agreed between ASPSP and PSU.
   * If equals 'false', the transaction will not involve additional specific transaction costs to the PSU unless the fee amount is given specifically in the data elements transactionFees and/or currencyConversionFees.
   * If this data element is not used, there is no information about transaction fees unless the fee amount is given explicitly in the data element transactionFees and/or currencyConversionFees.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionFeeIndicator" })
  transactionFeeIndicator?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "transactionFees" })
  @Type(() => Amount)
  transactionFees?: Amount;

  /**
   * The transaction status is filled with codes of the ISO 20022 data table:
   *
   * @remarks
   * - 'ACCC': 'AcceptedSettlementCompleted' -
   *   Settlement on the creditor's account has been completed.
   * - 'ACCP': 'AcceptedCustomerProfile' -
   *   Preceding check of technical validation was successful.
   *   Customer profile check was also successful.
   * - 'ACSC': 'AcceptedSettlementCompleted' -
   *   Settlement on the debtoro?=s account has been completed.
   *
   *   **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.
   *
   *   **Warning:** this status is provided for transaction status reasons, not for financial information.
   *   It can only be used after bilateral agreement.
   * - 'ACSP': 'AcceptedSettlementInProcess' -
   *   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
   * - 'ACTC': 'AcceptedTechnicalValidation' -
   *   Authentication and syntactical and semantical validation are successful.
   * - 'ACWC': 'AcceptedWithChange' -
   *   Instruction is accepted but a change will be made, such as date or remittance not sent.
   * - 'ACWP': 'AcceptedWithoutPosting' -
   *   Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?=s account.
   * - 'RCVD': 'Received' -
   *   Payment initiation has been received by the receiving agent.
   * - 'PDNG': 'Pending' -
   *   Payment initiation or individual transaction included in the payment initiation is pending.
   *   Further checks and status update will be performed.
   * - 'RJCT': 'Rejected' -
   *   Payment initiation or individual transaction included in the payment initiation has been rejected.
   * - 'CANC': 'Cancelled'
   *   Payment initiation has been cancelled before execution
   *   Remark: This codeis accepted as new code by ISO20022.
   * - 'ACFC': 'AcceptedFundsChecked' -
   *   Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .
   *   Remark: This code is accepted as new code by ISO20022.
   * - 'PATC': 'PartiallyAcceptedTechnical'
   *   Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.
   *   Remark: This code is accepted as new code by ISO20022.
   * - 'PART': 'PartiallyAccepted' -
   *   A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.
   *   Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionStatus" })
  transactionStatus: TransactionStatusEnum;
}
