// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetEditorURLLanguageEnum - Specify the editor UI language. Defaults to organization editor language.
type GetEditorURLLanguageEnum string

const (
	GetEditorURLLanguageEnumEn GetEditorURLLanguageEnum = "en"
	GetEditorURLLanguageEnumEt GetEditorURLLanguageEnum = "et"
	GetEditorURLLanguageEnumCs GetEditorURLLanguageEnum = "cs"
	GetEditorURLLanguageEnumSk GetEditorURLLanguageEnum = "sk"
	GetEditorURLLanguageEnumRu GetEditorURLLanguageEnum = "ru"
)

func (e *GetEditorURLLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "en":
		fallthrough
	case "et":
		fallthrough
	case "cs":
		fallthrough
	case "sk":
		fallthrough
	case "ru":
		*e = GetEditorURLLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorURLLanguageEnum: %s", s)
	}
}

type GetEditorURLRequest struct {
	// Data used to generate the PDF. This can be JSON encoded string or a public URL to your JSON file.
	RequestBody map[string]interface{} `request:"mediaType=application/json"`
	// Specify the editor UI language. Defaults to organization editor language.
	Language *GetEditorURLLanguageEnum `queryParam:"style=form,explode=true,name=language"`
	// Template unique identifier
	TemplateID int64 `queryParam:"style=form,explode=true,name=templateId"`
}

// GetEditorURL500ApplicationJSON - Internal Server Error
type GetEditorURL500ApplicationJSON struct {
	// Error description
	Error *string `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetEditorURL422ApplicationJSONErrorEnum - Error description
type GetEditorURL422ApplicationJSONErrorEnum string

const (
	GetEditorURL422ApplicationJSONErrorEnumUnableToParseJSONPleaseCheckFormatting               GetEditorURL422ApplicationJSONErrorEnum = "Unable to parse JSON, please check formatting"
	GetEditorURL422ApplicationJSONErrorEnumRequiredParameterMissing                             GetEditorURL422ApplicationJSONErrorEnum = "Required parameter missing"
	GetEditorURL422ApplicationJSONErrorEnumRequiredParameterMissingTemplateDefinitionNotDefined GetEditorURL422ApplicationJSONErrorEnum = "Required parameter missing: template definition not defined"
	GetEditorURL422ApplicationJSONErrorEnumRequiredParameterMissingTemplateNotDefined           GetEditorURL422ApplicationJSONErrorEnum = "Required parameter missing: template not defined"
)

func (e *GetEditorURL422ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unable to parse JSON, please check formatting":
		fallthrough
	case "Required parameter missing":
		fallthrough
	case "Required parameter missing: template definition not defined":
		fallthrough
	case "Required parameter missing: template not defined":
		*e = GetEditorURL422ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorURL422ApplicationJSONErrorEnum: %s", s)
	}
}

// GetEditorURL422ApplicationJSON - Unprocessable Entity
type GetEditorURL422ApplicationJSON struct {
	// Error description
	Error *GetEditorURL422ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetEditorURL404ApplicationJSONErrorEnum - Error description
type GetEditorURL404ApplicationJSONErrorEnum string

const (
	GetEditorURL404ApplicationJSONErrorEnumEntityNotFound                               GetEditorURL404ApplicationJSONErrorEnum = "Entity not found"
	GetEditorURL404ApplicationJSONErrorEnumResourceNotFound                             GetEditorURL404ApplicationJSONErrorEnum = "Resource not found"
	GetEditorURL404ApplicationJSONErrorEnumNoneOfTheTemplatesIsAvailableForTheWorkspace GetEditorURL404ApplicationJSONErrorEnum = "None of the templates is available for the workspace."
)

func (e *GetEditorURL404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Entity not found":
		fallthrough
	case "Resource not found":
		fallthrough
	case "None of the templates is available for the workspace.":
		*e = GetEditorURL404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorURL404ApplicationJSONErrorEnum: %s", s)
	}
}

// GetEditorURL404ApplicationJSON - Not Found
type GetEditorURL404ApplicationJSON struct {
	// Error description
	Error *GetEditorURL404ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetEditorURL403ApplicationJSONErrorEnum - Error description
type GetEditorURL403ApplicationJSONErrorEnum string

const (
	GetEditorURL403ApplicationJSONErrorEnumYourAccountHasExceededTheMonthlyDocumentGenerationLimit GetEditorURL403ApplicationJSONErrorEnum = "Your account has exceeded the monthly document generation limit."
)

func (e *GetEditorURL403ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Your account has exceeded the monthly document generation limit.":
		*e = GetEditorURL403ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorURL403ApplicationJSONErrorEnum: %s", s)
	}
}

// GetEditorURL403ApplicationJSON - Forbidden
type GetEditorURL403ApplicationJSON struct {
	// Error description
	Error *GetEditorURL403ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetEditorURL401ApplicationJSONErrorEnum - Error description
type GetEditorURL401ApplicationJSONErrorEnum string

const (
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedRequestExpired                        GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: request expired"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedSignatureOrSecretMissing              GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: signature or secret missing"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedWorkspaceMissing                      GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: workspace missing"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedKeyMissing                            GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: key missing"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedPropertyIssIssuerMissingInJwt         GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: property 'iss' (issuer) missing in JWT"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedPropertySubSubjectMissingInJwt        GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: property 'sub' (subject) missing in JWT"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedPropertyExpExpirationTimeMissingInJwt GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: property 'exp' (expiration time) missing in JWT"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedInvalidIssIssuer                      GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: invalid 'iss' (issuer)"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailedIncorrectSignature                    GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed: incorrect signature"
	GetEditorURL401ApplicationJSONErrorEnumAuthenticationFailed                                      GetEditorURL401ApplicationJSONErrorEnum = "Authentication failed"
)

func (e *GetEditorURL401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed: request expired":
		fallthrough
	case "Authentication failed: signature or secret missing":
		fallthrough
	case "Authentication failed: workspace missing":
		fallthrough
	case "Authentication failed: key missing":
		fallthrough
	case "Authentication failed: property 'iss' (issuer) missing in JWT":
		fallthrough
	case "Authentication failed: property 'sub' (subject) missing in JWT":
		fallthrough
	case "Authentication failed: property 'exp' (expiration time) missing in JWT":
		fallthrough
	case "Authentication failed: invalid 'iss' (issuer)":
		fallthrough
	case "Authentication failed: incorrect signature":
		fallthrough
	case "Authentication failed":
		*e = GetEditorURL401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorURL401ApplicationJSONErrorEnum: %s", s)
	}
}

// GetEditorURL401ApplicationJSON - Unauthorized
type GetEditorURL401ApplicationJSON struct {
	// Error description
	Error *GetEditorURL401ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// GetEditorURL200ApplicationJSON - Returns an URL which you can use to redirect your user to the editor or use as iframe source
type GetEditorURL200ApplicationJSON struct {
	Response *string `json:"response,omitempty"`
}

type GetEditorURLResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returns an URL which you can use to redirect your user to the editor or use as iframe source
	GetEditorURL200ApplicationJSONObject *GetEditorURL200ApplicationJSON
	// Unauthorized
	GetEditorURL401ApplicationJSONObject *GetEditorURL401ApplicationJSON
	// Forbidden
	GetEditorURL403ApplicationJSONObject *GetEditorURL403ApplicationJSON
	// Not Found
	GetEditorURL404ApplicationJSONObject *GetEditorURL404ApplicationJSON
	// Unprocessable Entity
	GetEditorURL422ApplicationJSONObject *GetEditorURL422ApplicationJSON
	// Internal Server Error
	GetEditorURL500ApplicationJSONObject *GetEditorURL500ApplicationJSON
}
