/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetClientClientId200ApplicationJSON - OK
 */
public class GetClientClientId200ApplicationJSON {
    /**
     * URL of the Client's JSON representation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("@id")
    public String atId;
    public GetClientClientId200ApplicationJSON withAtId(String atId) {
        this.atId = atId;
        return this;
    }
    
    /**
     * OAuth 2.0 client identifier string.
     */
    @JsonProperty("client_id")
    public String clientId;
    public GetClientClientId200ApplicationJSON withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Human-readable string name of the client to be presented to the end-user during authorization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_name")
    public String clientName;
    public GetClientClientId200ApplicationJSON withClientName(String clientName) {
        this.clientName = clientName;
        return this;
    }
    
    /**
     * OAuth 2.0 client secret string. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_secret")
    public String clientSecret;
    public GetClientClientId200ApplicationJSON withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * URL string of a web page providing information about the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_uri")
    public String clientUri;
    public GetClientClientId200ApplicationJSON withClientUri(String clientUri) {
        this.clientUri = clientUri;
        return this;
    }
    
    /**
     * Array of strings representing ways to contact people responsible for this client, typically email addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contacts")
    public Object[] contacts;
    public GetClientClientId200ApplicationJSON withContacts(Object[] contacts) {
        this.contacts = contacts;
        return this;
    }
    
    /**
     * Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grant_types")
    public Object[] grantTypes;
    public GetClientClientId200ApplicationJSON withGrantTypes(Object[] grantTypes) {
        this.grantTypes = grantTypes;
        return this;
    }
    
    /**
     * Client's JSON Web Key Set [RFC7517] document value, which contains the client's public keys.  The value of this field MUST be a JSON object containing a valid JWK Set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwks")
    public Object[] jwks;
    public GetClientClientId200ApplicationJSON withJwks(Object[] jwks) {
        this.jwks = jwks;
        return this;
    }
    
    /**
     * URL string referencing the client's JSON Web Key (JWK) Set [RFC7517] document, which contains the client's public keys.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwks_uri")
    public String jwksUri;
    public GetClientClientId200ApplicationJSON withJwksUri(String jwksUri) {
        this.jwksUri = jwksUri;
        return this;
    }
    
    /**
     * An email address used to generate a gravatar.com logo_uri.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_email")
    public String logoEmail;
    public GetClientClientId200ApplicationJSON withLogoEmail(String logoEmail) {
        this.logoEmail = logoEmail;
        return this;
    }
    
    /**
     * URL string that references a logo for the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_uri")
    public String logoUri;
    public GetClientClientId200ApplicationJSON withLogoUri(String logoUri) {
        this.logoUri = logoUri;
        return this;
    }
    
    /**
     * URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policy_uri")
    public String policyUri;
    public GetClientClientId200ApplicationJSON withPolicyUri(String policyUri) {
        this.policyUri = policyUri;
        return this;
    }
    
    /**
     * Array of redirection URI strings for use in redirect-based flows such as the authorization code and implicit flows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uris")
    public Object[] redirectUris;
    public GetClientClientId200ApplicationJSON withRedirectUris(Object[] redirectUris) {
        this.redirectUris = redirectUris;
        return this;
    }
    
    /**
     * Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_types")
    public Object[] responseTypes;
    public GetClientClientId200ApplicationJSON withResponseTypes(Object[] responseTypes) {
        this.responseTypes = responseTypes;
        return this;
    }
    
    /**
     * String containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;
    public GetClientClientId200ApplicationJSON withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("software_id")
    public String softwareId;
    public GetClientClientId200ApplicationJSON withSoftwareId(String softwareId) {
        this.softwareId = softwareId;
        return this;
    }
    
    /**
     * A version identifier string for the client software identified by software_id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("software_version")
    public String softwareVersion;
    public GetClientClientId200ApplicationJSON withSoftwareVersion(String softwareVersion) {
        this.softwareVersion = softwareVersion;
        return this;
    }
    
    /**
     * String indicator of the requested authentication method for the token endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_endpoint_auth_method")
    public String tokenEndpointAuthMethod;
    public GetClientClientId200ApplicationJSON withTokenEndpointAuthMethod(String tokenEndpointAuthMethod) {
        this.tokenEndpointAuthMethod = tokenEndpointAuthMethod;
        return this;
    }
    
    /**
     * URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tos_uri")
    public String tosUri;
    public GetClientClientId200ApplicationJSON withTosUri(String tosUri) {
        this.tosUri = tosUri;
        return this;
    }
    
}
