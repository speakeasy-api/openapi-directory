// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FrontPortTypeLabelEnum string

const (
	FrontPortTypeLabelEnumEightP8C              FrontPortTypeLabelEnum = "8P8C"
	FrontPortTypeLabelEnumOneHundredAndTenPunch FrontPortTypeLabelEnum = "110 Punch"
	FrontPortTypeLabelEnumBnc                   FrontPortTypeLabelEnum = "BNC"
	FrontPortTypeLabelEnumMrj21                 FrontPortTypeLabelEnum = "MRJ21"
	FrontPortTypeLabelEnumFc                    FrontPortTypeLabelEnum = "FC"
	FrontPortTypeLabelEnumLc                    FrontPortTypeLabelEnum = "LC"
	FrontPortTypeLabelEnumLcApc                 FrontPortTypeLabelEnum = "LC/APC"
	FrontPortTypeLabelEnumLsh                   FrontPortTypeLabelEnum = "LSH"
	FrontPortTypeLabelEnumLshApc                FrontPortTypeLabelEnum = "LSH/APC"
	FrontPortTypeLabelEnumMpo                   FrontPortTypeLabelEnum = "MPO"
	FrontPortTypeLabelEnumMtrj                  FrontPortTypeLabelEnum = "MTRJ"
	FrontPortTypeLabelEnumSc                    FrontPortTypeLabelEnum = "SC"
	FrontPortTypeLabelEnumScApc                 FrontPortTypeLabelEnum = "SC/APC"
	FrontPortTypeLabelEnumSt                    FrontPortTypeLabelEnum = "ST"
)

func (e *FrontPortTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8P8C":
		fallthrough
	case "110 Punch":
		fallthrough
	case "BNC":
		fallthrough
	case "MRJ21":
		fallthrough
	case "FC":
		fallthrough
	case "LC":
		fallthrough
	case "LC/APC":
		fallthrough
	case "LSH":
		fallthrough
	case "LSH/APC":
		fallthrough
	case "MPO":
		fallthrough
	case "MTRJ":
		fallthrough
	case "SC":
		fallthrough
	case "SC/APC":
		fallthrough
	case "ST":
		*e = FrontPortTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FrontPortTypeLabelEnum: %s", s)
	}
}

type FrontPortTypeValueEnum string

const (
	FrontPortTypeValueEnumEightp8c              FrontPortTypeValueEnum = "8p8c"
	FrontPortTypeValueEnumOneHundredAndTenPunch FrontPortTypeValueEnum = "110-punch"
	FrontPortTypeValueEnumBnc                   FrontPortTypeValueEnum = "bnc"
	FrontPortTypeValueEnumMrj21                 FrontPortTypeValueEnum = "mrj21"
	FrontPortTypeValueEnumFc                    FrontPortTypeValueEnum = "fc"
	FrontPortTypeValueEnumLc                    FrontPortTypeValueEnum = "lc"
	FrontPortTypeValueEnumLcApc                 FrontPortTypeValueEnum = "lc-apc"
	FrontPortTypeValueEnumLsh                   FrontPortTypeValueEnum = "lsh"
	FrontPortTypeValueEnumLshApc                FrontPortTypeValueEnum = "lsh-apc"
	FrontPortTypeValueEnumMpo                   FrontPortTypeValueEnum = "mpo"
	FrontPortTypeValueEnumMtrj                  FrontPortTypeValueEnum = "mtrj"
	FrontPortTypeValueEnumSc                    FrontPortTypeValueEnum = "sc"
	FrontPortTypeValueEnumScApc                 FrontPortTypeValueEnum = "sc-apc"
	FrontPortTypeValueEnumSt                    FrontPortTypeValueEnum = "st"
)

func (e *FrontPortTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8p8c":
		fallthrough
	case "110-punch":
		fallthrough
	case "bnc":
		fallthrough
	case "mrj21":
		fallthrough
	case "fc":
		fallthrough
	case "lc":
		fallthrough
	case "lc-apc":
		fallthrough
	case "lsh":
		fallthrough
	case "lsh-apc":
		fallthrough
	case "mpo":
		fallthrough
	case "mtrj":
		fallthrough
	case "sc":
		fallthrough
	case "sc-apc":
		fallthrough
	case "st":
		*e = FrontPortTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FrontPortTypeValueEnum: %s", s)
	}
}

type FrontPortType struct {
	Label FrontPortTypeLabelEnum `json:"label"`
	Value FrontPortTypeValueEnum `json:"value"`
}

type FrontPort struct {
	Cable            *NestedCable      `json:"cable,omitempty"`
	Description      *string           `json:"description,omitempty"`
	Device           NestedDevice      `json:"device"`
	ID               *int64            `json:"id,omitempty"`
	Name             string            `json:"name"`
	RearPort         FrontPortRearPort `json:"rear_port"`
	RearPortPosition *int64            `json:"rear_port_position,omitempty"`
	Tags             []string          `json:"tags,omitempty"`
	Type             FrontPortType     `json:"type"`
}
