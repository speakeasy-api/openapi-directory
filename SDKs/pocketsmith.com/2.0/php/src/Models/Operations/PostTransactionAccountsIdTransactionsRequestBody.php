<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class PostTransactionAccountsIdTransactionsRequestBody
{
    /**
     * The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.
     * 
     * @var float $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $amount;
    
    /**
     * The unique identifier of a category for the transaction.
     * 
     * @var ?int $categoryId
     */
	#[\JMS\Serializer\Annotation\SerializedName('category_id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $categoryId = null;
    
    /**
     * A cheque number for the transaction.
     * 
     * @var ?string $chequeNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('cheque_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $chequeNumber = null;
    
    /**
     * The date when the transaction occurred.
     * 
     * @var string $date
     */
	#[\JMS\Serializer\Annotation\SerializedName('date')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $date;
    
    /**
     * Whether the transaction should be indicated as a transfer.
     * 
     * @var ?bool $isTransfer
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_transfer')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isTransfer = null;
    
    /**
     * A set of comma-separated labels for the transaction.
     * 
     * @var ?string $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $labels = null;
    
    /**
     * A memo for the transaction.
     * 
     * @var ?string $memo
     */
	#[\JMS\Serializer\Annotation\SerializedName('memo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $memo = null;
    
    /**
     * Whether the transaction needs to be reviewed or not.
     * 
     * @var ?bool $needsReview
     */
	#[\JMS\Serializer\Annotation\SerializedName('needs_review')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $needsReview = null;
    
    /**
     * A note for the transaction.
     * 
     * @var ?string $note
     */
	#[\JMS\Serializer\Annotation\SerializedName('note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $note = null;
    
    /**
     * The payee/merchant of the transaction.
     * 
     * @var string $payee
     */
	#[\JMS\Serializer\Annotation\SerializedName('payee')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $payee;
    
	public function __construct()
	{
		$this->amount = 0;
		$this->categoryId = null;
		$this->chequeNumber = null;
		$this->date = "";
		$this->isTransfer = null;
		$this->labels = null;
		$this->memo = null;
		$this->needsReview = null;
		$this->note = null;
		$this->payee = "";
	}
}
