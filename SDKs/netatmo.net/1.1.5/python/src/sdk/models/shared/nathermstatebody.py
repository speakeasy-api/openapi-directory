"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nasetpoint as shared_nasetpoint
from ..shared import nathermmeasure as shared_nathermmeasure
from ..shared import nathermprogram as shared_nathermprogram
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAThermStateBody:
    
    battery_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('battery_percent'), 'exclude': lambda f: f is None }})
    r"""It contains the current battery level in percentage."""  
    battery_vp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('battery_vp'), 'exclude': lambda f: f is None }})  
    last_plug_seen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_plug_seen'), 'exclude': lambda f: f is None }})  
    last_therm_seen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_therm_seen'), 'exclude': lambda f: f is None }})  
    measured: Optional[shared_nathermmeasure.NAThermMeasure] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measured'), 'exclude': lambda f: f is None }})  
    plug_connected_boiler: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plug_connected_boiler'), 'exclude': lambda f: f is None }})  
    rf_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rf_status'), 'exclude': lambda f: f is None }})  
    setpoint: Optional[shared_nasetpoint.NASetpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint'), 'exclude': lambda f: f is None }})  
    setpoint_order: Optional[shared_nasetpoint.NASetpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint_order'), 'exclude': lambda f: f is None }})  
    therm_orientation: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_orientation'), 'exclude': lambda f: f is None }})  
    therm_program: Optional[shared_nathermprogram.NAThermProgram] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program'), 'exclude': lambda f: f is None }})  
    therm_program_backup: Optional[list[shared_nathermprogram.NAThermProgram]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program_backup'), 'exclude': lambda f: f is None }})  
    therm_program_order: Optional[shared_nathermprogram.NAThermProgram] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program_order'), 'exclude': lambda f: f is None }})  
    therm_relay_cmd: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_relay_cmd'), 'exclude': lambda f: f is None }})  
    udp_conn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udp_conn'), 'exclude': lambda f: f is None }})  
    wifi_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifi_status'), 'exclude': lambda f: f is None }})  
    