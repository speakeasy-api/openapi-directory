"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def translate_projects_locations_batch_translate_document(self, request: operations.TranslateProjectsLocationsBatchTranslateDocumentRequest, security: operations.TranslateProjectsLocationsBatchTranslateDocumentSecurity) -> operations.TranslateProjectsLocationsBatchTranslateDocumentResponse:
        r"""Translates a large volume of document in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsBatchTranslateDocumentRequest, base_url, '/v3/{parent}:batchTranslateDocument', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_translate_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsBatchTranslateDocumentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsBatchTranslateDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_batch_translate_text(self, request: operations.TranslateProjectsLocationsBatchTranslateTextRequest, security: operations.TranslateProjectsLocationsBatchTranslateTextSecurity) -> operations.TranslateProjectsLocationsBatchTranslateTextResponse:
        r"""Translates a large volume of text in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsBatchTranslateTextRequest, base_url, '/v3/{parent}:batchTranslateText', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_translate_text_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsBatchTranslateTextRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsBatchTranslateTextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_datasets_create(self, request: operations.TranslateProjectsLocationsDatasetsCreateRequest, security: operations.TranslateProjectsLocationsDatasetsCreateSecurity) -> operations.TranslateProjectsLocationsDatasetsCreateResponse:
        r"""Creates a Dataset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsDatasetsCreateRequest, base_url, '/v3/{parent}/datasets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dataset_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsDatasetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsDatasetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_datasets_examples_list(self, request: operations.TranslateProjectsLocationsDatasetsExamplesListRequest, security: operations.TranslateProjectsLocationsDatasetsExamplesListSecurity) -> operations.TranslateProjectsLocationsDatasetsExamplesListResponse:
        r"""Lists sentence pairs in the dataset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsDatasetsExamplesListRequest, base_url, '/v3/{parent}/examples', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsDatasetsExamplesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsDatasetsExamplesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListExamplesResponse])
                res.list_examples_response = out

        return res

    def translate_projects_locations_datasets_export_data(self, request: operations.TranslateProjectsLocationsDatasetsExportDataRequest, security: operations.TranslateProjectsLocationsDatasetsExportDataSecurity) -> operations.TranslateProjectsLocationsDatasetsExportDataResponse:
        r"""Exports dataset's data to the provided output location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsDatasetsExportDataRequest, base_url, '/v3/{dataset}:exportData', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "export_data_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsDatasetsExportDataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsDatasetsExportDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_datasets_import_data(self, request: operations.TranslateProjectsLocationsDatasetsImportDataRequest, security: operations.TranslateProjectsLocationsDatasetsImportDataSecurity) -> operations.TranslateProjectsLocationsDatasetsImportDataResponse:
        r"""Import sentence pairs into translation Dataset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsDatasetsImportDataRequest, base_url, '/v3/{dataset}:importData', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "import_data_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsDatasetsImportDataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsDatasetsImportDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_datasets_list(self, request: operations.TranslateProjectsLocationsDatasetsListRequest, security: operations.TranslateProjectsLocationsDatasetsListSecurity) -> operations.TranslateProjectsLocationsDatasetsListResponse:
        r"""Lists datasets."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsDatasetsListRequest, base_url, '/v3/{parent}/datasets', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsDatasetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsDatasetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDatasetsResponse])
                res.list_datasets_response = out

        return res

    def translate_projects_locations_detect_language(self, request: operations.TranslateProjectsLocationsDetectLanguageRequest, security: operations.TranslateProjectsLocationsDetectLanguageSecurity) -> operations.TranslateProjectsLocationsDetectLanguageResponse:
        r"""Detects the language of text within a request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsDetectLanguageRequest, base_url, '/v3/{parent}:detectLanguage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "detect_language_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsDetectLanguageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsDetectLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DetectLanguageResponse])
                res.detect_language_response = out

        return res

    def translate_projects_locations_get_supported_languages(self, request: operations.TranslateProjectsLocationsGetSupportedLanguagesRequest, security: operations.TranslateProjectsLocationsGetSupportedLanguagesSecurity) -> operations.TranslateProjectsLocationsGetSupportedLanguagesResponse:
        r"""Returns a list of supported languages for translation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsGetSupportedLanguagesRequest, base_url, '/v3/{parent}/supportedLanguages', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsGetSupportedLanguagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsGetSupportedLanguagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupportedLanguages])
                res.supported_languages = out

        return res

    def translate_projects_locations_glossaries_create(self, request: operations.TranslateProjectsLocationsGlossariesCreateRequest, security: operations.TranslateProjectsLocationsGlossariesCreateSecurity) -> operations.TranslateProjectsLocationsGlossariesCreateResponse:
        r"""Creates a glossary and returns the long-running operation. Returns NOT_FOUND, if the project doesn't exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsGlossariesCreateRequest, base_url, '/v3/{parent}/glossaries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsGlossariesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsGlossariesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_glossaries_glossary_entries_create(self, request: operations.TranslateProjectsLocationsGlossariesGlossaryEntriesCreateRequest, security: operations.TranslateProjectsLocationsGlossariesGlossaryEntriesCreateSecurity) -> operations.TranslateProjectsLocationsGlossariesGlossaryEntriesCreateResponse:
        r"""Creates a glossary entry."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsGlossariesGlossaryEntriesCreateRequest, base_url, '/v3/{parent}/glossaryEntries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_entry", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsGlossariesGlossaryEntriesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsGlossariesGlossaryEntriesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlossaryEntry])
                res.glossary_entry = out

        return res

    def translate_projects_locations_glossaries_glossary_entries_list(self, request: operations.TranslateProjectsLocationsGlossariesGlossaryEntriesListRequest, security: operations.TranslateProjectsLocationsGlossariesGlossaryEntriesListSecurity) -> operations.TranslateProjectsLocationsGlossariesGlossaryEntriesListResponse:
        r"""List the entries for the glossary."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsGlossariesGlossaryEntriesListRequest, base_url, '/v3/{parent}/glossaryEntries', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsGlossariesGlossaryEntriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsGlossariesGlossaryEntriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGlossaryEntriesResponse])
                res.list_glossary_entries_response = out

        return res

    def translate_projects_locations_glossaries_glossary_entries_patch(self, request: operations.TranslateProjectsLocationsGlossariesGlossaryEntriesPatchRequest, security: operations.TranslateProjectsLocationsGlossariesGlossaryEntriesPatchSecurity) -> operations.TranslateProjectsLocationsGlossariesGlossaryEntriesPatchResponse:
        r"""Updates a glossary entry."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsGlossariesGlossaryEntriesPatchRequest, base_url, '/v3/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_entry", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsGlossariesGlossaryEntriesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsGlossariesGlossaryEntriesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlossaryEntry])
                res.glossary_entry = out

        return res

    def translate_projects_locations_glossaries_list(self, request: operations.TranslateProjectsLocationsGlossariesListRequest, security: operations.TranslateProjectsLocationsGlossariesListSecurity) -> operations.TranslateProjectsLocationsGlossariesListResponse:
        r"""Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsGlossariesListRequest, base_url, '/v3/{parent}/glossaries', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsGlossariesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsGlossariesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGlossariesResponse])
                res.list_glossaries_response = out

        return res

    def translate_projects_locations_list(self, request: operations.TranslateProjectsLocationsListRequest, security: operations.TranslateProjectsLocationsListSecurity) -> operations.TranslateProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsListRequest, base_url, '/v3/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def translate_projects_locations_models_create(self, request: operations.TranslateProjectsLocationsModelsCreateRequest, security: operations.TranslateProjectsLocationsModelsCreateSecurity) -> operations.TranslateProjectsLocationsModelsCreateResponse:
        r"""Creates a Model."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsModelsCreateRequest, base_url, '/v3/{parent}/models', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "model_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsModelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsModelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_models_list(self, request: operations.TranslateProjectsLocationsModelsListRequest, security: operations.TranslateProjectsLocationsModelsListSecurity) -> operations.TranslateProjectsLocationsModelsListResponse:
        r"""Lists models."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsModelsListRequest, base_url, '/v3/{parent}/models', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsModelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsModelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListModelsResponse])
                res.list_models_response = out

        return res

    def translate_projects_locations_operations_cancel(self, request: operations.TranslateProjectsLocationsOperationsCancelRequest, security: operations.TranslateProjectsLocationsOperationsCancelSecurity) -> operations.TranslateProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsOperationsCancelRequest, base_url, '/v3/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def translate_projects_locations_operations_delete(self, request: operations.TranslateProjectsLocationsOperationsDeleteRequest, security: operations.TranslateProjectsLocationsOperationsDeleteSecurity) -> operations.TranslateProjectsLocationsOperationsDeleteResponse:
        r"""Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsOperationsDeleteRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsOperationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsOperationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def translate_projects_locations_operations_get(self, request: operations.TranslateProjectsLocationsOperationsGetRequest, security: operations.TranslateProjectsLocationsOperationsGetSecurity) -> operations.TranslateProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsOperationsGetRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_operations_list(self, request: operations.TranslateProjectsLocationsOperationsListRequest, security: operations.TranslateProjectsLocationsOperationsListSecurity) -> operations.TranslateProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsOperationsListRequest, base_url, '/v3/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def translate_projects_locations_operations_wait(self, request: operations.TranslateProjectsLocationsOperationsWaitRequest, security: operations.TranslateProjectsLocationsOperationsWaitSecurity) -> operations.TranslateProjectsLocationsOperationsWaitResponse:
        r"""Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsOperationsWaitRequest, base_url, '/v3/{name}:wait', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "wait_operation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsOperationsWaitRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsOperationsWaitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def translate_projects_locations_translate_document(self, request: operations.TranslateProjectsLocationsTranslateDocumentRequest, security: operations.TranslateProjectsLocationsTranslateDocumentSecurity) -> operations.TranslateProjectsLocationsTranslateDocumentResponse:
        r"""Translates documents in synchronous mode."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsTranslateDocumentRequest, base_url, '/v3/{parent}:translateDocument', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "translate_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsTranslateDocumentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsTranslateDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TranslateDocumentResponse])
                res.translate_document_response = out

        return res

    def translate_projects_locations_translate_text(self, request: operations.TranslateProjectsLocationsTranslateTextRequest, security: operations.TranslateProjectsLocationsTranslateTextSecurity) -> operations.TranslateProjectsLocationsTranslateTextResponse:
        r"""Translates input text and returns translated text."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TranslateProjectsLocationsTranslateTextRequest, base_url, '/v3/{parent}:translateText', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "translate_text_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TranslateProjectsLocationsTranslateTextRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranslateProjectsLocationsTranslateTextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TranslateTextResponse])
                res.translate_text_response = out

        return res

    