// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DiscoverInstancesXAmzTargetEnum
type DiscoverInstancesXAmzTargetEnum string

const (
	DiscoverInstancesXAmzTargetEnumRoute53AutoNamingV20170314DiscoverInstances DiscoverInstancesXAmzTargetEnum = "Route53AutoNaming_v20170314.DiscoverInstances"
)

func (e *DiscoverInstancesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53AutoNaming_v20170314.DiscoverInstances":
		*e = DiscoverInstancesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscoverInstancesXAmzTargetEnum: %s", s)
	}
}

type DiscoverInstancesRequest struct {
	DiscoverInstancesRequest shared.DiscoverInstancesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               DiscoverInstancesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DiscoverInstancesResponse struct {
	ContentType string
	// Success
	DiscoverInstancesResponse *shared.DiscoverInstancesResponse
	// InvalidInput
	InvalidInput interface{}
	// NamespaceNotFound
	NamespaceNotFound interface{}
	// RequestLimitExceeded
	RequestLimitExceeded interface{}
	// ServiceNotFound
	ServiceNotFound interface{}
	StatusCode      int
	RawResponse     *http.Response
}
