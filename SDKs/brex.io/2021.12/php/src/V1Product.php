<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V1Product 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves a document availability result
     * 
     * Check availability and valid options for a particular product for a particular company identfied by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityResponse
     */
	public function productAvailability(
        \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/availability/{sku}/{subjectId}', \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productAvailability200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductAvailability200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productAvailabilityDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductAvailabilityDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a catalog of products
     * 
     * Returns a catalog of purchasable products available with some metadata for a particular country
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductCatalogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductCatalogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductCatalogResponse
     */
	public function productCatalog(
        \OpenAPI\OpenAPI\Models\Operations\ProductCatalogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductCatalogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductCatalogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/catalog/{country}', \OpenAPI\OpenAPI\Models\Operations\ProductCatalogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductCatalogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productCatalog200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductCatalog200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productCatalogDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductCatalogDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns metadata for a notifier
     * 
     * Queries and returns all metadata associated with a notifier identified by its notifer id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductNotifierRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductNotifierSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductNotifierResponse
     */
	public function productNotifier(
        \OpenAPI\OpenAPI\Models\Operations\ProductNotifierRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductNotifierSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductNotifierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/notifier/{notifierId}', \OpenAPI\OpenAPI\Models\Operations\ProductNotifierRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductNotifierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productNotifier200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductNotifier200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productNotifierDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductNotifierDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a notifier for an order
     * 
     * Create a notifier for a particular order. Parameters can be supplied in the path
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateResponse
     */
	public function productNotifierCreate(
        \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/notifier/{orderId}/{type}/{uri}', \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productNotifierCreate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productNotifierCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductNotifierCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Places a product order
     * 
     * Place an order for a particular product identified by its SKU for a particular company identified by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductOrderResponse
     */
	public function productOrder(
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/order/{sku}/{subjectId}', \OpenAPI\OpenAPI\Models\Operations\ProductOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrder200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Places a concierge order
     * 
     * Place an order for a concierge product
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeResponse
     */
	public function productOrderConcierge(
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/order/concierge');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderConcierge200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderConcierge200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderConciergeDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderConciergeDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Places a UBO order
     * 
     * Place an order for a UBO (ultimate beneficial owner) discovery report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboResponse
     */
	public function productOrderUbo(
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/order/ubo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductOrderUboResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderUbo200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderUbo200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderUboDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderUboDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Places a product order
     * 
     * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionResponse
     */
	public function productOrderWithOption(
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/order/{sku}/{option}/{subjectId}', \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderWithOption200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOption200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productOrderWithOptionDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductOrderWithOptionDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the result of an order
     * 
     * Retrieves the document or structured data associated with a completed order identified with its order id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveResponse
     */
	public function productRetrieve(
        \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/{orderId}', \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductRetrieveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productRetrieve200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productRetrieveDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductRetrieveDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of products
     * 
     * Search for possible products for a particular company identified by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductSearchResponse
     */
	public function productSearch(
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/search/{subjectId}', \OpenAPI\OpenAPI\Models\Operations\ProductSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearch200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ProductSearch200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearchDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductSearchDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns metadata for a order
     * 
     * Retrieve the current status of an order identified by its order id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductStatusResponse
     */
	public function productStatus(
        \OpenAPI\OpenAPI\Models\Operations\ProductStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/status/{orderId}', \OpenAPI\OpenAPI\Models\Operations\ProductStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductStatus200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productStatusDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductStatusDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates metadata of an order
     * 
     * Update an existing order identified by its order id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionResponse
     */
	public function productUpdateAction(
        \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/product/update/{action}/{orderId}', \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productUpdateAction200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductUpdateAction200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productUpdateActionDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProductUpdateActionDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}