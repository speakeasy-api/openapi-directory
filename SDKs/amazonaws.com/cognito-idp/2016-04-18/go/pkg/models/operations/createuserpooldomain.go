// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateUserPoolDomainXAmzTargetEnum
type CreateUserPoolDomainXAmzTargetEnum string

const (
	CreateUserPoolDomainXAmzTargetEnumAwsCognitoIdentityProviderServiceCreateUserPoolDomain CreateUserPoolDomainXAmzTargetEnum = "AWSCognitoIdentityProviderService.CreateUserPoolDomain"
)

func (e CreateUserPoolDomainXAmzTargetEnum) ToPointer() *CreateUserPoolDomainXAmzTargetEnum {
	return &e
}

func (e *CreateUserPoolDomainXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSCognitoIdentityProviderService.CreateUserPoolDomain":
		*e = CreateUserPoolDomainXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserPoolDomainXAmzTargetEnum: %v", v)
	}
}

type CreateUserPoolDomainRequest struct {
	CreateUserPoolDomainRequest shared.CreateUserPoolDomainRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateUserPoolDomainXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateUserPoolDomainResponse struct {
	ContentType string
	// Success
	CreateUserPoolDomainResponse *shared.CreateUserPoolDomainResponse
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
