// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeTagsXAmzTargetEnum
type DescribeTagsXAmzTargetEnum string

const (
	DescribeTagsXAmzTargetEnumOvertureServiceDescribeTags DescribeTagsXAmzTargetEnum = "OvertureService.DescribeTags"
)

func (e DescribeTagsXAmzTargetEnum) ToPointer() *DescribeTagsXAmzTargetEnum {
	return &e
}

func (e *DescribeTagsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OvertureService.DescribeTags":
		*e = DescribeTagsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeTagsXAmzTargetEnum: %v", v)
	}
}

type DescribeTagsRequest struct {
	DescribeTagsRequest shared.DescribeTagsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          DescribeTagsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeTagsResponse struct {
	ContentType string
	// Success
	DescribeTagsResponse *shared.DescribeTagsResponse
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
