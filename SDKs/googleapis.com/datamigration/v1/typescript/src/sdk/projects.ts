/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new connection profile in a given project and location.
   */
  datamigrationProjectsLocationsConnectionProfilesCreate(
    req: operations.DatamigrationProjectsLocationsConnectionProfilesCreateRequest,
    security: operations.DatamigrationProjectsLocationsConnectionProfilesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConnectionProfilesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConnectionProfilesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/connectionProfiles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "connectionProfileInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConnectionProfilesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConnectionProfilesCreateResponse =
        new operations.DatamigrationProjectsLocationsConnectionProfilesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of all connection profiles in a given project and location.
   */
  datamigrationProjectsLocationsConnectionProfilesList(
    req: operations.DatamigrationProjectsLocationsConnectionProfilesListRequest,
    security: operations.DatamigrationProjectsLocationsConnectionProfilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConnectionProfilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConnectionProfilesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/connectionProfiles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConnectionProfilesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConnectionProfilesListResponse =
        new operations.DatamigrationProjectsLocationsConnectionProfilesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listConnectionProfilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListConnectionProfilesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Applies draft tree onto a specific destination database.
   */
  datamigrationProjectsLocationsConversionWorkspacesApply(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesApplyRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesApplySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesApplyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesApplyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:apply", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "applyConversionWorkspaceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesApplySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesApplyResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesApplyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks all the data in the conversion workspace as committed.
   */
  datamigrationProjectsLocationsConversionWorkspacesCommit(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesCommitRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesCommitSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesCommitResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesCommitRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:commit", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "commitConversionWorkspaceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesCommitSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesCommitResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesCommitResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a draft tree schema for the destination database.
   */
  datamigrationProjectsLocationsConversionWorkspacesConvert(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesConvertRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesConvertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesConvertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesConvertRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:convert", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "convertConversionWorkspaceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesConvertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesConvertResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesConvertResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new conversion workspace in a given project and location.
   */
  datamigrationProjectsLocationsConversionWorkspacesCreate(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesCreateRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/conversionWorkspaces",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "conversionWorkspaceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesCreateResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of committed revisions of a specific conversion workspace.
   */
  datamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisions(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{conversionWorkspace}:describeConversionWorkspaceRevisions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.describeConversionWorkspaceRevisionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.DescribeConversionWorkspaceRevisionsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Describes the database entities tree for a specific conversion workspace and a specific tree type. Database entities are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are simple data objects describing the structure of the client database.
   */
  datamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntities(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{conversionWorkspace}:describeDatabaseEntities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.describeDatabaseEntitiesResponse = utils.objectToClass(
              httpRes?.data,
              shared.DescribeDatabaseEntitiesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists conversion workspaces in a given project and location.
   */
  datamigrationProjectsLocationsConversionWorkspacesList(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesListRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/conversionWorkspaces",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesListResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listConversionWorkspacesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListConversionWorkspacesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports the mapping rules for a given conversion workspace. Supports various formats of external rules files.
   */
  datamigrationProjectsLocationsConversionWorkspacesMappingRulesImport(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/mappingRules:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "importMappingRulesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rolls back a conversion workspace to the last committed snapshot.
   */
  datamigrationProjectsLocationsConversionWorkspacesRollback(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:rollback", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Searches/lists the background jobs for a specific conversion workspace. The background jobs are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are a way to expose the data plane jobs log.
   */
  datamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobs(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{conversionWorkspace}:searchBackgroundJobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchBackgroundJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchBackgroundJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports a snapshot of the source database into the conversion workspace.
   */
  datamigrationProjectsLocationsConversionWorkspacesSeed(
    req: operations.DatamigrationProjectsLocationsConversionWorkspacesSeedRequest,
    security: operations.DatamigrationProjectsLocationsConversionWorkspacesSeedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsConversionWorkspacesSeedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesSeedRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:seed", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "seedConversionWorkspaceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesSeedSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsConversionWorkspacesSeedResponse =
        new operations.DatamigrationProjectsLocationsConversionWorkspacesSeedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetches a set of static IP addresses that need to be allowlisted by the customer when using the static-IP connectivity method.
   */
  datamigrationProjectsLocationsFetchStaticIps(
    req: operations.DatamigrationProjectsLocationsFetchStaticIpsRequest,
    security: operations.DatamigrationProjectsLocationsFetchStaticIpsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsFetchStaticIpsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatamigrationProjectsLocationsFetchStaticIpsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:fetchStaticIps",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsFetchStaticIpsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsFetchStaticIpsResponse =
        new operations.DatamigrationProjectsLocationsFetchStaticIpsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fetchStaticIpsResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchStaticIpsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  datamigrationProjectsLocationsList(
    req: operations.DatamigrationProjectsLocationsListRequest,
    security: operations.DatamigrationProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatamigrationProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatamigrationProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsListResponse =
        new operations.DatamigrationProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new migration job in a given project and location.
   */
  datamigrationProjectsLocationsMigrationJobsCreate(
    req: operations.DatamigrationProjectsLocationsMigrationJobsCreateRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/migrationJobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "migrationJobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsCreateResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate a SSH configuration script to configure the reverse SSH connectivity.
   */
  datamigrationProjectsLocationsMigrationJobsGenerateSshScript(
    req: operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{migrationJob}:generateSshScript",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generateSshScriptRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsGenerateSshScriptResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshScript = utils.objectToClass(
              httpRes?.data,
              shared.SshScript
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  datamigrationProjectsLocationsMigrationJobsGetIamPolicy(
    req: operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists migration jobs in a given project and location.
   */
  datamigrationProjectsLocationsMigrationJobsList(
    req: operations.DatamigrationProjectsLocationsMigrationJobsListRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/migrationJobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsListResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMigrationJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMigrationJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the parameters of a single migration job.
   */
  datamigrationProjectsLocationsMigrationJobsPatch(
    req: operations.DatamigrationProjectsLocationsMigrationJobsPatchRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "migrationJobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsPatchResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database.
   */
  datamigrationProjectsLocationsMigrationJobsPromote(
    req: operations.DatamigrationProjectsLocationsMigrationJobsPromoteRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsPromoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsPromoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsPromoteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:promote", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsPromoteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsPromoteResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsPromoteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch.
   */
  datamigrationProjectsLocationsMigrationJobsRestart(
    req: operations.DatamigrationProjectsLocationsMigrationJobsRestartRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsRestartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsRestartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsRestartRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:restart", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsRestartSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsRestartResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsRestartResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase).
   */
  datamigrationProjectsLocationsMigrationJobsResume(
    req: operations.DatamigrationProjectsLocationsMigrationJobsResumeRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsResumeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsResumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsResumeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:resume", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsResumeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsResumeResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsResumeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  datamigrationProjectsLocationsMigrationJobsSetIamPolicy(
    req: operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start an already created migration job.
   */
  datamigrationProjectsLocationsMigrationJobsStart(
    req: operations.DatamigrationProjectsLocationsMigrationJobsStartRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsStartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsStartRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:start", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsStartSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsStartResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsStartResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stops a running migration job.
   */
  datamigrationProjectsLocationsMigrationJobsStop(
    req: operations.DatamigrationProjectsLocationsMigrationJobsStopRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsStopSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsStopRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:stop", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsStopSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsStopResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsStopResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  datamigrationProjectsLocationsMigrationJobsTestIamPermissions(
    req: operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.
   */
  datamigrationProjectsLocationsMigrationJobsVerify(
    req: operations.DatamigrationProjectsLocationsMigrationJobsVerifyRequest,
    security: operations.DatamigrationProjectsLocationsMigrationJobsVerifySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsMigrationJobsVerifyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsMigrationJobsVerifyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:verify", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsMigrationJobsVerifySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsMigrationJobsVerifyResponse =
        new operations.DatamigrationProjectsLocationsMigrationJobsVerifyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  datamigrationProjectsLocationsOperationsCancel(
    req: operations.DatamigrationProjectsLocationsOperationsCancelRequest,
    security: operations.DatamigrationProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsOperationsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsOperationsCancelResponse =
        new operations.DatamigrationProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  datamigrationProjectsLocationsOperationsList(
    req: operations.DatamigrationProjectsLocationsOperationsListRequest,
    security: operations.DatamigrationProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatamigrationProjectsLocationsOperationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsOperationsListResponse =
        new operations.DatamigrationProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new private connection in a given project and location.
   */
  datamigrationProjectsLocationsPrivateConnectionsCreate(
    req: operations.DatamigrationProjectsLocationsPrivateConnectionsCreateRequest,
    security: operations.DatamigrationProjectsLocationsPrivateConnectionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsPrivateConnectionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/privateConnections",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "privateConnectionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsPrivateConnectionsCreateResponse =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a single Database Migration Service private connection.
   */
  datamigrationProjectsLocationsPrivateConnectionsDelete(
    req: operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest,
    security: operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of a single private connection.
   */
  datamigrationProjectsLocationsPrivateConnectionsGet(
    req: operations.DatamigrationProjectsLocationsPrivateConnectionsGetRequest,
    security: operations.DatamigrationProjectsLocationsPrivateConnectionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsPrivateConnectionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsPrivateConnectionsGetResponse =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateConnection = utils.objectToClass(
              httpRes?.data,
              shared.PrivateConnection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of private connections in a given project and location.
   */
  datamigrationProjectsLocationsPrivateConnectionsList(
    req: operations.DatamigrationProjectsLocationsPrivateConnectionsListRequest,
    security: operations.DatamigrationProjectsLocationsPrivateConnectionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatamigrationProjectsLocationsPrivateConnectionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/privateConnections",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatamigrationProjectsLocationsPrivateConnectionsListResponse =
        new operations.DatamigrationProjectsLocationsPrivateConnectionsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPrivateConnectionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPrivateConnectionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
