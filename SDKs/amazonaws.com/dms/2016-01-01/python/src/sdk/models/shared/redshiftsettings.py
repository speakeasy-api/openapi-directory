"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import encryptionmodevalue_enum as shared_encryptionmodevalue_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RedshiftSettings:
    r"""Provides information that defines an Amazon Redshift endpoint."""
    
    accept_any_date: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceptAnyDate'), 'exclude': lambda f: f is None }})  
    after_connect_script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AfterConnectScript'), 'exclude': lambda f: f is None }})  
    bucket_folder: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketFolder'), 'exclude': lambda f: f is None }})  
    bucket_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketName'), 'exclude': lambda f: f is None }})  
    case_sensitive_names: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CaseSensitiveNames'), 'exclude': lambda f: f is None }})  
    comp_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompUpdate'), 'exclude': lambda f: f is None }})  
    connection_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionTimeout'), 'exclude': lambda f: f is None }})  
    database_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName'), 'exclude': lambda f: f is None }})  
    date_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateFormat'), 'exclude': lambda f: f is None }})  
    empty_as_null: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmptyAsNull'), 'exclude': lambda f: f is None }})  
    encryption_mode: Optional[shared_encryptionmodevalue_enum.EncryptionModeValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionMode'), 'exclude': lambda f: f is None }})  
    explicit_ids: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExplicitIds'), 'exclude': lambda f: f is None }})  
    file_transfer_upload_streams: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileTransferUploadStreams'), 'exclude': lambda f: f is None }})  
    load_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoadTimeout'), 'exclude': lambda f: f is None }})  
    map_boolean_as_boolean: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MapBooleanAsBoolean'), 'exclude': lambda f: f is None }})  
    max_file_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxFileSize'), 'exclude': lambda f: f is None }})  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Password'), 'exclude': lambda f: f is None }})  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Port'), 'exclude': lambda f: f is None }})  
    remove_quotes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveQuotes'), 'exclude': lambda f: f is None }})  
    replace_chars: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplaceChars'), 'exclude': lambda f: f is None }})  
    replace_invalid_chars: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplaceInvalidChars'), 'exclude': lambda f: f is None }})  
    secrets_manager_access_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretsManagerAccessRoleArn'), 'exclude': lambda f: f is None }})  
    secrets_manager_secret_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretsManagerSecretId'), 'exclude': lambda f: f is None }})  
    server_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerName'), 'exclude': lambda f: f is None }})  
    server_side_encryption_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerSideEncryptionKmsKeyId'), 'exclude': lambda f: f is None }})  
    service_access_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceAccessRoleArn'), 'exclude': lambda f: f is None }})  
    time_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeFormat'), 'exclude': lambda f: f is None }})  
    trim_blanks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrimBlanks'), 'exclude': lambda f: f is None }})  
    truncate_columns: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TruncateColumns'), 'exclude': lambda f: f is None }})  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username'), 'exclude': lambda f: f is None }})  
    write_buffer_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WriteBufferSize'), 'exclude': lambda f: f is None }})  
    