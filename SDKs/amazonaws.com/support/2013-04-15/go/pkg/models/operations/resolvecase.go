// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ResolveCaseXAmzTargetEnum
type ResolveCaseXAmzTargetEnum string

const (
	ResolveCaseXAmzTargetEnumAwsSupport20130415ResolveCase ResolveCaseXAmzTargetEnum = "AWSSupport_20130415.ResolveCase"
)

func (e ResolveCaseXAmzTargetEnum) ToPointer() *ResolveCaseXAmzTargetEnum {
	return &e
}

func (e *ResolveCaseXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSSupport_20130415.ResolveCase":
		*e = ResolveCaseXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResolveCaseXAmzTargetEnum: %v", v)
	}
}

type ResolveCaseRequest struct {
	ResolveCaseRequest shared.ResolveCaseRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         ResolveCaseXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ResolveCaseResponse struct {
	// CaseIdNotFound
	CaseIDNotFound interface{}
	ContentType    string
	// InternalServerError
	InternalServerError interface{}
	// Success
	ResolveCaseResponse *shared.ResolveCaseResponse
	StatusCode          int
	RawResponse         *http.Response
}
