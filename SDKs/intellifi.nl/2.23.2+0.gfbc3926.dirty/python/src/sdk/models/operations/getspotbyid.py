"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import geocoords as shared_geocoords
from ..shared import location as shared_location
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetSpotByIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Unique identifier"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpotByID200ApplicationJSON3AntennaReportLocations:
    
    antenna_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_number'), 'exclude': lambda f: f is None }})
    r"""Antenna number"""  
    report_location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location'), 'exclude': lambda f: f is None }})  
    report_location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    report_location_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpotByID200ApplicationJSON3:
    
    antenna_report_locations: Optional[list[GetSpotByID200ApplicationJSON3AntennaReportLocations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_report_locations'), 'exclude': lambda f: f is None }})
    r"""You may configure this field to an object which couples individual antenna ports to locations."""  
    config: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config'), 'exclude': lambda f: f is None }})
    r"""JSON object with possible settings. Refer to individual service documentation for a good overview."""  
    config_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new configuration. This will be applied automatically when the values are valid."""  
    geo_coords: Optional[shared_geocoords.GeoCoords] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo_coords'), 'exclude': lambda f: f is None }})
    r"""Last known geolocation estimate of this object. Not guaranteed to be included in response."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    is_online: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_online'), 'exclude': lambda f: f is None }})
    r"""Whether or not this resource is actively connected to the Brain."""  
    report_location_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    request_counter: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_counter'), 'exclude': lambda f: f is None }})
    r"""The total number of HTTP requests that this resource has done."""  
    senses: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses'), 'exclude': lambda f: f is None }})
    r"""Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    senses_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    serial_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number'), 'exclude': lambda f: f is None }})
    r"""This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime."""  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""An object with specific information about the spot, directly send by the spot itself when the connection is created."""  
    time_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created."""  
    time_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpotByID200ApplicationJSON2AntennaReportLocations:
    
    antenna_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_number'), 'exclude': lambda f: f is None }})
    r"""Antenna number"""  
    report_location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location'), 'exclude': lambda f: f is None }})  
    report_location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    report_location_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpotByID200ApplicationJSON2:
    
    antenna_report_locations: Optional[list[GetSpotByID200ApplicationJSON2AntennaReportLocations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_report_locations'), 'exclude': lambda f: f is None }})
    r"""You may configure this field to an object which couples individual antenna ports to locations."""  
    config: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config'), 'exclude': lambda f: f is None }})
    r"""JSON object with possible settings. Refer to individual service documentation for a good overview."""  
    config_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new configuration. This will be applied automatically when the values are valid."""  
    geo_coords: Optional[shared_geocoords.GeoCoords] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo_coords'), 'exclude': lambda f: f is None }})
    r"""Last known geolocation estimate of this object. Not guaranteed to be included in response."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    is_online: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_online'), 'exclude': lambda f: f is None }})
    r"""Whether or not this resource is actively connected to the Brain."""  
    report_location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    request_counter: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_counter'), 'exclude': lambda f: f is None }})
    r"""The total number of HTTP requests that this resource has done."""  
    senses: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses'), 'exclude': lambda f: f is None }})
    r"""Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    senses_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    serial_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number'), 'exclude': lambda f: f is None }})
    r"""This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime."""  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""An object with specific information about the spot, directly send by the spot itself when the connection is created."""  
    time_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created."""  
    time_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpotByID200ApplicationJSON1AntennaReportLocations:
    
    antenna_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_number'), 'exclude': lambda f: f is None }})
    r"""Antenna number"""  
    report_location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location'), 'exclude': lambda f: f is None }})  
    report_location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    report_location_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location_url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpotByID200ApplicationJSON1:
    
    antenna_report_locations: Optional[list[GetSpotByID200ApplicationJSON1AntennaReportLocations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antenna_report_locations'), 'exclude': lambda f: f is None }})
    r"""You may configure this field to an object which couples individual antenna ports to locations."""  
    config: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config'), 'exclude': lambda f: f is None }})
    r"""JSON object with possible settings. Refer to individual service documentation for a good overview."""  
    config_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new configuration. This will be applied automatically when the values are valid."""  
    geo_coords: Optional[shared_geocoords.GeoCoords] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo_coords'), 'exclude': lambda f: f is None }})
    r"""Last known geolocation estimate of this object. Not guaranteed to be included in response."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    is_online: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_online'), 'exclude': lambda f: f is None }})
    r"""Whether or not this resource is actively connected to the Brain."""  
    report_location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_location'), 'exclude': lambda f: f is None }})  
    request_counter: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_counter'), 'exclude': lambda f: f is None }})
    r"""The total number of HTTP requests that this resource has done."""  
    senses: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses'), 'exclude': lambda f: f is None }})
    r"""Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    senses_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senses_request'), 'exclude': lambda f: f is None }})
    r"""Object containing the new senses configuration. See [Sense & Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information."""  
    serial_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number'), 'exclude': lambda f: f is None }})
    r"""This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime."""  
    status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""An object with specific information about the spot, directly send by the spot itself when the connection is created."""  
    time_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created."""  
    time_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Url to the individual resource."""  
    

@dataclasses.dataclass
class GetSpotByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    spot_get: Optional[Any] = dataclasses.field(default=None)
    r"""A JSON object containing the spot"""  
    