"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientTlsSettings = exports.ClientTlsSettingsModeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var tlscontext_1 = require("./tlscontext");
var class_transformer_1 = require("class-transformer");
/**
 * Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends. MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
 */
var ClientTlsSettingsModeEnum;
(function (ClientTlsSettingsModeEnum) {
    ClientTlsSettingsModeEnum["Disable"] = "DISABLE";
    ClientTlsSettingsModeEnum["Invalid"] = "INVALID";
    ClientTlsSettingsModeEnum["Mutual"] = "MUTUAL";
    ClientTlsSettingsModeEnum["Simple"] = "SIMPLE";
})(ClientTlsSettingsModeEnum = exports.ClientTlsSettingsModeEnum || (exports.ClientTlsSettingsModeEnum = {}));
/**
 * [Deprecated] The client side authentication settings for connection originating from the backend service. the backend service.
 */
var ClientTlsSettings = /** @class */ (function (_super) {
    __extends(ClientTlsSettings, _super);
    function ClientTlsSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clientTlsContext" }),
        (0, class_transformer_1.Type)(function () { return tlscontext_1.TlsContext; }),
        __metadata("design:type", tlscontext_1.TlsContext)
    ], ClientTlsSettings.prototype, "clientTlsContext", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mode" }),
        __metadata("design:type", String)
    ], ClientTlsSettings.prototype, "mode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sni" }),
        __metadata("design:type", String)
    ], ClientTlsSettings.prototype, "sni", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subjectAltNames" }),
        __metadata("design:type", Array)
    ], ClientTlsSettings.prototype, "subjectAltNames", void 0);
    return ClientTlsSettings;
}(utils_1.SpeakeasyBase));
exports.ClientTlsSettings = ClientTlsSettings;
