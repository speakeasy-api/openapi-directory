"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import dependabot_alert_package as shared_dependabot_alert_package
from ..shared import dependabot_alert_security_advisory as shared_dependabot_alert_security_advisory
from ..shared import dependabot_alert_security_vulnerability as shared_dependabot_alert_security_vulnerability
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import simple_repository as shared_simple_repository
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DependabotAlertWithRepositoryDependencyScopeEnum(str, Enum):
    r"""The execution scope of the vulnerable dependency."""
    DEVELOPMENT = 'development'
    RUNTIME = 'runtime'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependabotAlertWithRepositoryDependency:
    r"""Details for the vulnerable dependency."""
    
    manifest_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manifest_path'), 'exclude': lambda f: f is None }})
    r"""The full path to the dependency manifest file, relative to the root of the repository."""  
    package: Optional[shared_dependabot_alert_package.DependabotAlertPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package'), 'exclude': lambda f: f is None }})
    r"""Details for the vulnerable package."""  
    scope: Optional[DependabotAlertWithRepositoryDependencyScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The execution scope of the vulnerable dependency."""  
    
class DependabotAlertWithRepositoryDismissedReasonEnum(str, Enum):
    r"""The reason that the alert was dismissed."""
    FIX_STARTED = 'fix_started'
    INACCURATE = 'inaccurate'
    NO_BANDWIDTH = 'no_bandwidth'
    NOT_USED = 'not_used'
    TOLERABLE_RISK = 'tolerable_risk'

class DependabotAlertWithRepositoryStateEnum(str, Enum):
    r"""The state of the Dependabot alert."""
    DISMISSED = 'dismissed'
    FIXED = 'fixed'
    OPEN = 'open'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependabotAlertWithRepository:
    r"""A Dependabot alert."""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    dependency: DependabotAlertWithRepositoryDependency = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependency') }})
    r"""Details for the vulnerable dependency."""  
    dismissed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    dismissed_by: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_by') }})
    r"""A GitHub user."""  
    dismissed_comment: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_comment') }})
    r"""An optional comment associated with the alert's dismissal."""  
    dismissed_reason: DependabotAlertWithRepositoryDismissedReasonEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_reason') }})
    r"""The reason that the alert was dismissed."""  
    fixed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})
    r"""The GitHub URL of the alert resource."""  
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""The security alert number."""  
    repository: shared_simple_repository.SimpleRepository = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})
    r"""A GitHub repository."""  
    security_advisory: shared_dependabot_alert_security_advisory.DependabotAlertSecurityAdvisory = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security_advisory') }})
    r"""Details for the GitHub Security Advisory."""  
    security_vulnerability: shared_dependabot_alert_security_vulnerability.DependabotAlertSecurityVulnerability = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security_vulnerability') }})
    r"""Details pertaining to one vulnerable version range for the advisory."""  
    state: DependabotAlertWithRepositoryStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state of the Dependabot alert."""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The REST API URL of the alert resource."""  
    