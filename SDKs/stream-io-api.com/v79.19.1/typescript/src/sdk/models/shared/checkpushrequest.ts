/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Push provider type
 */
export enum CheckPushRequestTypeOfPushProviderEnum {
  Firebase = "firebase",
  Apn = "apn",
  Huawei = "huawei",
  Xiaomi = "xiaomi",
}

export class CheckPushRequest extends SpeakeasyBase {
  /**
   * Push message template for APN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apn_template" })
  apnTemplate?: string;

  /**
   * Push message data template for Firebase
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firebase_data_template" })
  firebaseDataTemplate?: string;

  /**
   * Push message template for Firebase
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firebase_template" })
  firebaseTemplate?: string;

  /**
   * Message ID to send push notification for
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_id" })
  messageId?: string;

  /**
   * Name of push provider
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push_provider_name" })
  pushProviderName?: string;

  /**
   * Push provider type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push_provider_type" })
  pushProviderType?: CheckPushRequestTypeOfPushProviderEnum;

  /**
   * Don't require existing devices to render templates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skip_devices" })
  skipDevices?: boolean;

  /**
   * Represents chat user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}
