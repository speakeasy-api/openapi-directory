"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Imports:
    r"""Import Management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_v2_imports_id_json(self, request: operations.DeleteV2ImportsIDJSONRequest) -> operations.DeleteV2ImportsIDJSONResponse:
        r"""Delete an import
        Deletes an import, by ID only. The associated people can be deleted as part of the deletion process.
        
        Admin users can access imports for the entire team, but non-admin users can only access their own imports.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV2ImportsIDJSONRequest, base_url, '/v2/imports/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteV2ImportsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV2ImportsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_v2_imports_json(self, request: operations.GetV2ImportsJSONRequest) -> operations.GetV2ImportsJSONResponse:
        r"""List imports
        Fetches multiple imports.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/imports.json'
        
        query_params = utils.get_query_params(operations.GetV2ImportsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2ImportsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_imports_id_json(self, request: operations.GetV2ImportsIDJSONRequest) -> operations.GetV2ImportsIDJSONResponse:
        r"""Fetch an import
        Fetches an import, by ID only.
        
        Admin users can access imports for the entire team, but non-admin users can only access their own imports.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2ImportsIDJSONRequest, base_url, '/v2/imports/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2ImportsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_imports_json(self, request: operations.PostV2ImportsJSONRequestBody) -> operations.PostV2ImportsJSONResponse:
        r"""Create an import
        Creates an import.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/imports.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2ImportsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_imports_id_json(self, request: operations.PutV2ImportsIDJSONRequest) -> operations.PutV2ImportsIDJSONResponse:
        r"""Update an import
        Updates an import, by ID only.
        
        Admin users can access imports for the entire team, but non-admin users can only access their own imports.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2ImportsIDJSONRequest, base_url, '/v2/imports/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2ImportsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    