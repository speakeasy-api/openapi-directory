<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve all attachments associated with a support case.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListResponse
     */
	public function cloudsupportProjectsCasesAttachmentsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{parent}/attachments', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesAttachmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAttachmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAttachmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Close the specified case.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseResponse
     */
	public function cloudsupportProjectsCasesClose(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{name}:close', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCloseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->case = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CaseT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new comment to the specified Case. The comment object must have the following fields set: body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateResponse
     */
	public function cloudsupportProjectsCasesCommentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{parent}/comments', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Comment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all Comments associated with the Case object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListResponse
     */
	public function cloudsupportProjectsCasesCommentsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{parent}/comments', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCommentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCommentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCommentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new case and associate it with the given Cloud resource. The case object must have the following fields set: display_name, description, classification, and severity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateResponse
     */
	public function cloudsupportProjectsCasesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{parent}/cases', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "caseInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->case = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CaseT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Escalate a case. Escalating a case will initiate the Cloud Support escalation management process. This operation is only available to certain Customer Care tiers. Go to https://cloud.google.com/support and look for 'Technical support escalations' in the feature list to find out which tiers are able to perform escalations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateResponse
     */
	public function cloudsupportProjectsCasesEscalate(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{name}:escalate', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "escalateCaseRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesEscalateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->case = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CaseT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the specified case.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetResponse
     */
	public function cloudsupportProjectsCasesGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->case = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CaseT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all cases under the specified parent. Note: Listing cases under an Organization returns only the cases directly parented by that organization. To retrieve all cases under an organization, including cases parented by projects under that organization, use `cases.search`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListResponse
     */
	public function cloudsupportProjectsCasesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{parent}/cases', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsCasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCasesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the specified case. Only a subset of fields can be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesResponse
     */
	public function cloudsupportProjectsUpdateCases(
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "caseInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsupportProjectsUpdateCasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->case = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CaseT', 'json');
            }
        }

        return $response;
    }
}