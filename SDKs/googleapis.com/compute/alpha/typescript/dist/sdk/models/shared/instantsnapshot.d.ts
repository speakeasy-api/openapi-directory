import { SpeakeasyBase } from "../../../internal/utils";
import { InstantSnapshotResourceStatus } from "./instantsnapshotresourcestatus";
/**
 * [Output Only] The architecture of the instant snapshot. Valid values are ARM64 or X86_64.
 */
export declare enum InstantSnapshotArchitectureEnum {
    ArchitectureUnspecified = "ARCHITECTURE_UNSPECIFIED",
    Arm64 = "ARM64",
    X8664 = "X86_64"
}
/**
 * [Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
 */
export declare enum InstantSnapshotStatusEnum {
    Creating = "CREATING",
    Deleting = "DELETING",
    Failed = "FAILED",
    Ready = "READY"
}
/**
 * Represents a InstantSnapshot resource. You can use instant snapshots to create disk rollback points quickly..
 */
export declare class InstantSnapshot extends SpeakeasyBase {
    /**
     * [Output Only] The architecture of the instant snapshot. Valid values are ARM64 or X86_64.
     */
    architecture?: InstantSnapshotArchitectureEnum;
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description?: string;
    /**
     * [Output Only] Size of the source disk, specified in GB.
     */
    diskSizeGb?: string;
    /**
     * Whether to attempt an application consistent instant snapshot by informing the OS to prepare for the snapshot process.
     */
    guestFlush?: boolean;
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    id?: string;
    /**
     * [Output Only] Type of the resource. Always compute#instantSnapshot for InstantSnapshot resources.
     */
    kind?: string;
    /**
     * A fingerprint for the labels being applied to this InstantSnapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a InstantSnapshot.
     */
    labelFingerprint?: string;
    /**
     * Labels to apply to this InstantSnapshot. These can be later modified by the setLabels method. Label values may be empty.
     */
    labels?: Record<string, string>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: string;
    /**
     * [Output Only] URL of the region where the instant snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    region?: string;
    resourceStatus?: InstantSnapshotResourceStatus;
    /**
     * [Output Only] Reserved for future use.
     */
    satisfiesPzs?: boolean;
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    selfLink?: string;
    /**
     * [Output Only] Server-defined URL for this resource's resource id.
     */
    selfLinkWithId?: string;
    /**
     * URL of the source disk used to create this instant snapshot. Note that the source disk must be in the same zone/region as the instant snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
     */
    sourceDisk?: string;
    /**
     * [Output Only] The ID value of the disk used to create this InstantSnapshot. This value may be used to determine whether the InstantSnapshot was taken from the current or a previous instance of a given disk name.
     */
    sourceDiskId?: string;
    /**
     * [Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
     */
    status?: InstantSnapshotStatusEnum;
    /**
     * [Output Only] URL of the zone where the instant snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    zone?: string;
}
