"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1beta3documententitynormalizedvalue as shared_googleclouddocumentaiv1beta3documententitynormalizedvalue
from ..shared import googleclouddocumentaiv1beta3documentpageanchor as shared_googleclouddocumentaiv1beta3documentpageanchor
from ..shared import googleclouddocumentaiv1beta3documentprovenance as shared_googleclouddocumentaiv1beta3documentprovenance
from ..shared import googleclouddocumentaiv1beta3documenttextanchor as shared_googleclouddocumentaiv1beta3documenttextanchor
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1beta3DocumentEntity:
    r"""An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location."""
    
    confidence: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""Optional. Confidence of detected Schema entity. Range `[0, 1]`."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Optional. Canonical id. This will be a unique value in the entity list for this document."""  
    mention_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionId'), 'exclude': lambda f: f is None }})
    r"""Optional. Deprecated. Use `id` field instead."""  
    mention_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionText'), 'exclude': lambda f: f is None }})
    r"""Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`."""  
    normalized_value: Optional[shared_googleclouddocumentaiv1beta3documententitynormalizedvalue.GoogleCloudDocumentaiV1beta3DocumentEntityNormalizedValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normalizedValue'), 'exclude': lambda f: f is None }})
    r"""Parsed and normalized entity value."""  
    page_anchor: Optional[shared_googleclouddocumentaiv1beta3documentpageanchor.GoogleCloudDocumentaiV1beta3DocumentPageAnchor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageAnchor'), 'exclude': lambda f: f is None }})
    r"""Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types."""  
    properties: Optional[list[GoogleCloudDocumentaiV1beta3DocumentEntity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Optional. Entities can be nested to form a hierarchical data structure representing the content in the document."""  
    provenance: Optional[shared_googleclouddocumentaiv1beta3documentprovenance.GoogleCloudDocumentaiV1beta3DocumentProvenance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provenance'), 'exclude': lambda f: f is None }})
    r"""Structure to identify provenance relationships between annotations in different revisions."""  
    redacted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redacted'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether the entity will be redacted for de-identification purposes."""  
    text_anchor: Optional[shared_googleclouddocumentaiv1beta3documenttextanchor.GoogleCloudDocumentaiV1beta3DocumentTextAnchor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textAnchor'), 'exclude': lambda f: f is None }})
    r"""Text reference indexing into the Document.text."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. Entity type from a schema e.g. `Address`."""  
    