// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// ProjectRequestColorEnum - Color of the project.
type ProjectRequestColorEnum string

const (
	ProjectRequestColorEnumDarkPink      ProjectRequestColorEnum = "dark-pink"
	ProjectRequestColorEnumDarkGreen     ProjectRequestColorEnum = "dark-green"
	ProjectRequestColorEnumDarkBlue      ProjectRequestColorEnum = "dark-blue"
	ProjectRequestColorEnumDarkRed       ProjectRequestColorEnum = "dark-red"
	ProjectRequestColorEnumDarkTeal      ProjectRequestColorEnum = "dark-teal"
	ProjectRequestColorEnumDarkBrown     ProjectRequestColorEnum = "dark-brown"
	ProjectRequestColorEnumDarkOrange    ProjectRequestColorEnum = "dark-orange"
	ProjectRequestColorEnumDarkPurple    ProjectRequestColorEnum = "dark-purple"
	ProjectRequestColorEnumDarkWarmGray  ProjectRequestColorEnum = "dark-warm-gray"
	ProjectRequestColorEnumLightPink     ProjectRequestColorEnum = "light-pink"
	ProjectRequestColorEnumLightGreen    ProjectRequestColorEnum = "light-green"
	ProjectRequestColorEnumLightBlue     ProjectRequestColorEnum = "light-blue"
	ProjectRequestColorEnumLightRed      ProjectRequestColorEnum = "light-red"
	ProjectRequestColorEnumLightTeal     ProjectRequestColorEnum = "light-teal"
	ProjectRequestColorEnumLightBrown    ProjectRequestColorEnum = "light-brown"
	ProjectRequestColorEnumLightOrange   ProjectRequestColorEnum = "light-orange"
	ProjectRequestColorEnumLightPurple   ProjectRequestColorEnum = "light-purple"
	ProjectRequestColorEnumLightWarmGray ProjectRequestColorEnum = "light-warm-gray"
)

func (e *ProjectRequestColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark-pink":
		fallthrough
	case "dark-green":
		fallthrough
	case "dark-blue":
		fallthrough
	case "dark-red":
		fallthrough
	case "dark-teal":
		fallthrough
	case "dark-brown":
		fallthrough
	case "dark-orange":
		fallthrough
	case "dark-purple":
		fallthrough
	case "dark-warm-gray":
		fallthrough
	case "light-pink":
		fallthrough
	case "light-green":
		fallthrough
	case "light-blue":
		fallthrough
	case "light-red":
		fallthrough
	case "light-teal":
		fallthrough
	case "light-brown":
		fallthrough
	case "light-orange":
		fallthrough
	case "light-purple":
		fallthrough
	case "light-warm-gray":
		*e = ProjectRequestColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectRequestColorEnum: %s", s)
	}
}

// ProjectRequestCurrentStatusColorEnum - The color associated with the status update.
type ProjectRequestCurrentStatusColorEnum string

const (
	ProjectRequestCurrentStatusColorEnumGreen  ProjectRequestCurrentStatusColorEnum = "green"
	ProjectRequestCurrentStatusColorEnumYellow ProjectRequestCurrentStatusColorEnum = "yellow"
	ProjectRequestCurrentStatusColorEnumRed    ProjectRequestCurrentStatusColorEnum = "red"
	ProjectRequestCurrentStatusColorEnumBlue   ProjectRequestCurrentStatusColorEnum = "blue"
)

func (e *ProjectRequestCurrentStatusColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "green":
		fallthrough
	case "yellow":
		fallthrough
	case "red":
		fallthrough
	case "blue":
		*e = ProjectRequestCurrentStatusColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectRequestCurrentStatusColorEnum: %s", s)
	}
}

// ProjectRequestCurrentStatusInput - A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: "green" for projects that are on track, "yellow" for projects at risk, and "red" for projects that are behind.
type ProjectRequestCurrentStatusInput struct {
	Author *UserCompactInput `json:"author,omitempty"`
	// The color associated with the status update.
	Color     ProjectRequestCurrentStatusColorEnum `json:"color"`
	CreatedBy *UserCompactInput                    `json:"created_by,omitempty"`
	// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
	HTMLText *string `json:"html_text,omitempty"`
	// The text content of the status update.
	Text string `json:"text"`
	// The title of the project status update.
	Title *string `json:"title,omitempty"`
}

// ProjectRequestDefaultViewEnum - The default view (list, board, calendar, or timeline) of a project.
type ProjectRequestDefaultViewEnum string

const (
	ProjectRequestDefaultViewEnumList     ProjectRequestDefaultViewEnum = "list"
	ProjectRequestDefaultViewEnumBoard    ProjectRequestDefaultViewEnum = "board"
	ProjectRequestDefaultViewEnumCalendar ProjectRequestDefaultViewEnum = "calendar"
	ProjectRequestDefaultViewEnumTimeline ProjectRequestDefaultViewEnum = "timeline"
)

func (e *ProjectRequestDefaultViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "list":
		fallthrough
	case "board":
		fallthrough
	case "calendar":
		fallthrough
	case "timeline":
		*e = ProjectRequestDefaultViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectRequestDefaultViewEnum: %s", s)
	}
}

// ProjectRequestWorkspaceInput - A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.
type ProjectRequestWorkspaceInput struct {
	// The name of the workspace.
	Name *string `json:"name,omitempty"`
}

// ProjectRequestInput - A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.
type ProjectRequestInput struct {
	// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
	Archived *bool `json:"archived,omitempty"`
	// Color of the project.
	Color         *ProjectRequestColorEnum          `json:"color,omitempty"`
	CurrentStatus *ProjectRequestCurrentStatusInput `json:"current_status,omitempty"`
	// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
	CustomFields map[string]string `json:"custom_fields,omitempty"`
	// The default view (list, board, calendar, or timeline) of a project.
	DefaultView *ProjectRequestDefaultViewEnum `json:"default_view,omitempty"`
	// *Deprecated: new integrations should prefer the due_on field.*
	DueDate *time.Time `json:"due_date,omitempty"`
	// The day on which this project is due. This takes a date with format YYYY-MM-DD.
	DueOn *time.Time `json:"due_on,omitempty"`
	// *Create-only*. Comma separated string of users. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.
	Followers *string `json:"followers,omitempty"`
	// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
	HTMLNotes *string `json:"html_notes,omitempty"`
	// [Opt In](/docs/input-output-options). Determines if the project is a template.
	IsTemplate *bool `json:"is_template,omitempty"`
	// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`
	// Free-form textual information associated with the project (ie., its description).
	Notes *string `json:"notes,omitempty"`
	// The current owner of the project, may be null.
	Owner *string `json:"owner,omitempty"`
	// True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.
	Public *bool `json:"public,omitempty"`
	// The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
	StartOn *types.Date `json:"start_on,omitempty"`
	// *Create-only*. The team that this project is shared with. This field only exists for projects in organizations.
	Team      *string                       `json:"team,omitempty"`
	Workspace *ProjectRequestWorkspaceInput `json:"workspace,omitempty"`
}
