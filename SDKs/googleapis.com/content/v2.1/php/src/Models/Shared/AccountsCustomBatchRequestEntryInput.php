<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AccountsCustomBatchRequestEntryInput - A batch entry encoding a single non-batch accounts request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AccountsCustomBatchRequestEntryInput
{
    /**
     * Account data. After the creation of a new account it may take a few minutes before it's fully operational. The methods delete, insert, and update require the admin role.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AccountInput $account
     */
	#[\JMS\Serializer\Annotation\SerializedName('account')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccountInput $account = null;
    
    /**
     * The ID of the targeted account. Only defined if the method is not `insert`.
     * 
     * @var ?string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountId = null;
    
    /**
     * An entry ID, unique within the batch request.
     * 
     * @var ?int $batchId
     */
	#[\JMS\Serializer\Annotation\SerializedName('batchId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $batchId = null;
    
    /**
     * Whether the account should be deleted if the account has offers. Only applicable if the method is `delete`.
     * 
     * @var ?bool $force
     */
	#[\JMS\Serializer\Annotation\SerializedName('force')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $force = null;
    
    /**
     * Label IDs for the 'updatelabels' request.
     * 
     * @var ?array<string> $labelIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('labelIds')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labelIds = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('linkRequest')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountsCustomBatchRequestEntryLinkRequest')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccountsCustomBatchRequestEntryLinkRequest $linkRequest = null;
    
    /**
     * The ID of the managing account.
     * 
     * @var ?string $merchantId
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchantId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $merchantId = null;
    
    /**
     * The method of the batch entry. Acceptable values are: - "`claimWebsite`" - "`delete`" - "`get`" - "`insert`" - "`link`" - "`update`" 
     * 
     * @var ?string $method
     */
	#[\JMS\Serializer\Annotation\SerializedName('method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $method = null;
    
    /**
     * Only applicable if the method is `claimwebsite`. Indicates whether or not to take the claim from another account in case there is a conflict.
     * 
     * @var ?bool $overwrite
     */
	#[\JMS\Serializer\Annotation\SerializedName('overwrite')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $overwrite = null;
    
    /**
     * Controls which fields are visible. Only applicable if the method is 'get'.
     * 
     * @var ?string $view
     */
	#[\JMS\Serializer\Annotation\SerializedName('view')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $view = null;
    
	public function __construct()
	{
		$this->account = null;
		$this->accountId = null;
		$this->batchId = null;
		$this->force = null;
		$this->labelIds = null;
		$this->linkRequest = null;
		$this->merchantId = null;
		$this->method = null;
		$this->overwrite = null;
		$this->view = null;
	}
}
