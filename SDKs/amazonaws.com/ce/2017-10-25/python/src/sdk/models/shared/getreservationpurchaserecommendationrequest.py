"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountscope_enum as shared_accountscope_enum
from ..shared import expression as shared_expression
from ..shared import lookbackperiodindays_enum as shared_lookbackperiodindays_enum
from ..shared import paymentoption_enum as shared_paymentoption_enum
from ..shared import servicespecification as shared_servicespecification
from ..shared import terminyears_enum as shared_terminyears_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetReservationPurchaseRecommendationRequest:
    
    service: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service') }})  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})  
    account_scope: Optional[shared_accountscope_enum.AccountScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountScope'), 'exclude': lambda f: f is None }})  
    filter: Optional[shared_expression.Expression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})
    r"""<p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p> <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p> <p>There are two patterns:</p> <ul> <li> <p>Simple dimension values.</p> <ul> <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p> <ul> <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li> <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li> <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href=\\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html\\"> <code>DimensionValues</code> </a>.</p> </li> </ul> </li> <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p> <ul> <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \\"Dimensions\\": { \\"Key\\": \\"REGION\\", \\"Values\\": [ \\"us-east-1\\", “us-west-1” ] } }</code> </p> </li> <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li> </ul> </li> <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p> <ul> <li> <p>For example, you can filter for linked account names that start with “a”.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \\"Dimensions\\": { \\"Key\\": \\"LINKED_ACCOUNT_NAME\\", \\"MatchOptions\\": [ \\"STARTS_WITH\\" ], \\"Values\\": [ \\"a\\" ] } }</code> </p> </li> </ul> </li> </ul> </li> <li> <p>Compound <code>Expression</code> types with logical operations.</p> <ul> <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li> <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \\"And\\": [ {\\"Or\\": [ {\\"Dimensions\\": { \\"Key\\": \\"REGION\\", \\"Values\\": [ \\"us-east-1\\", \\"us-west-1\\" ] }}, {\\"Tags\\": { \\"Key\\": \\"TagName\\", \\"Values\\": [\\"Value1\\"] } } ]}, {\\"Not\\": {\\"Dimensions\\": { \\"Key\\": \\"USAGE_TYPE\\", \\"Values\\": [\\"DataTransfer\\"] }}} ] } </code> </p> </li> </ul> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { \\"And\\": [ ... ], \\"Dimensions\\": { \\"Key\\": \\"USAGE_TYPE\\", \\"Values\\": [ \\"DataTransfer\\" ] } } </code> </p> <p>The following is an example of the corresponding error message: <code>\\"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories\\"</code> </p> </note> </li> </ul> <note> <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p> </note>"""  
    lookback_period_in_days: Optional[shared_lookbackperiodindays_enum.LookbackPeriodInDaysEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookbackPeriodInDays'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextPageToken'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PageSize'), 'exclude': lambda f: f is None }})  
    payment_option: Optional[shared_paymentoption_enum.PaymentOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentOption'), 'exclude': lambda f: f is None }})  
    service_specification: Optional[shared_servicespecification.ServiceSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceSpecification'), 'exclude': lambda f: f is None }})  
    term_in_years: Optional[shared_terminyears_enum.TermInYearsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TermInYears'), 'exclude': lambda f: f is None }})  
    