/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { NAMeasure } from "./nameasure";
import { NAPlace } from "./naplace";
import { Expose, Transform, Type } from "class-transformer";

export class NAPublicData extends SpeakeasyBase {
  /**
   * id of the station
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mark" })
  mark?: number;

  @SpeakeasyMetadata({ elemType: NAMeasure })
  @Expose({ name: "measures" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, NAMeasure> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], NAMeasure);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  measures?: Record<string, NAMeasure>;

  /**
   * Latest measurements of the station, organized by module
   */
  @SpeakeasyMetadata()
  @Expose({ name: "module_types" })
  moduleTypes?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "modules" })
  modules?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "place" })
  @Type(() => NAPlace)
  place?: NAPlace;
}
