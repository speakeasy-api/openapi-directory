// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateRepositoryNameXAmzTargetEnum
type UpdateRepositoryNameXAmzTargetEnum string

const (
	UpdateRepositoryNameXAmzTargetEnumCodeCommit20150413UpdateRepositoryName UpdateRepositoryNameXAmzTargetEnum = "CodeCommit_20150413.UpdateRepositoryName"
)

func (e *UpdateRepositoryNameXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.UpdateRepositoryName":
		*e = UpdateRepositoryNameXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRepositoryNameXAmzTargetEnum: %s", s)
	}
}

type UpdateRepositoryNameRequest struct {
	UpdateRepositoryNameInput shared.UpdateRepositoryNameInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                UpdateRepositoryNameXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateRepositoryNameResponse struct {
	ContentType string
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameExistsException
	RepositoryNameExistsException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
}
