/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Policies - Property rules that impact guests.
 */
public class Policies {
    /**
     * All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allInclusiveAvailable")
    public Boolean allInclusiveAvailable;
    public Policies withAllInclusiveAvailable(Boolean allInclusiveAvailable) {
        this.allInclusiveAvailable = allInclusiveAvailable;
        return this;
    }
    
    /**
     * All inclusive available exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allInclusiveAvailableException")
    public PoliciesAllInclusiveAvailableExceptionEnum allInclusiveAvailableException;
    public Policies withAllInclusiveAvailableException(PoliciesAllInclusiveAvailableExceptionEnum allInclusiveAvailableException) {
        this.allInclusiveAvailableException = allInclusiveAvailableException;
        return this;
    }
    
    /**
     * All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allInclusiveOnly")
    public Boolean allInclusiveOnly;
    public Policies withAllInclusiveOnly(Boolean allInclusiveOnly) {
        this.allInclusiveOnly = allInclusiveOnly;
        return this;
    }
    
    /**
     * All inclusive only exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allInclusiveOnlyException")
    public PoliciesAllInclusiveOnlyExceptionEnum allInclusiveOnlyException;
    public Policies withAllInclusiveOnlyException(PoliciesAllInclusiveOnlyExceptionEnum allInclusiveOnlyException) {
        this.allInclusiveOnlyException = allInclusiveOnlyException;
        return this;
    }
    
    /**
     * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkinTime")
    public TimeOfDay checkinTime;
    public Policies withCheckinTime(TimeOfDay checkinTime) {
        this.checkinTime = checkinTime;
        return this;
    }
    
    /**
     * Check-in time exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkinTimeException")
    public PoliciesCheckinTimeExceptionEnum checkinTimeException;
    public Policies withCheckinTimeException(PoliciesCheckinTimeExceptionEnum checkinTimeException) {
        this.checkinTimeException = checkinTimeException;
        return this;
    }
    
    /**
     * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkoutTime")
    public TimeOfDay checkoutTime;
    public Policies withCheckoutTime(TimeOfDay checkoutTime) {
        this.checkoutTime = checkoutTime;
        return this;
    }
    
    /**
     * Check-out time exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkoutTimeException")
    public PoliciesCheckoutTimeExceptionEnum checkoutTimeException;
    public Policies withCheckoutTimeException(PoliciesCheckoutTimeExceptionEnum checkoutTimeException) {
        this.checkoutTimeException = checkoutTimeException;
        return this;
    }
    
    /**
     * Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kidsStayFree")
    public Boolean kidsStayFree;
    public Policies withKidsStayFree(Boolean kidsStayFree) {
        this.kidsStayFree = kidsStayFree;
        return this;
    }
    
    /**
     * Kids stay free exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kidsStayFreeException")
    public PoliciesKidsStayFreeExceptionEnum kidsStayFreeException;
    public Policies withKidsStayFreeException(PoliciesKidsStayFreeExceptionEnum kidsStayFreeException) {
        this.kidsStayFreeException = kidsStayFreeException;
        return this;
    }
    
    /**
     * Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxChildAge")
    public Integer maxChildAge;
    public Policies withMaxChildAge(Integer maxChildAge) {
        this.maxChildAge = maxChildAge;
        return this;
    }
    
    /**
     * Max child age exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxChildAgeException")
    public PoliciesMaxChildAgeExceptionEnum maxChildAgeException;
    public Policies withMaxChildAgeException(PoliciesMaxChildAgeExceptionEnum maxChildAgeException) {
        this.maxChildAgeException = maxChildAgeException;
        return this;
    }
    
    /**
     * Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxKidsStayFreeCount")
    public Integer maxKidsStayFreeCount;
    public Policies withMaxKidsStayFreeCount(Integer maxKidsStayFreeCount) {
        this.maxKidsStayFreeCount = maxKidsStayFreeCount;
        return this;
    }
    
    /**
     * Max kids stay free count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxKidsStayFreeCountException")
    public PoliciesMaxKidsStayFreeCountExceptionEnum maxKidsStayFreeCountException;
    public Policies withMaxKidsStayFreeCountException(PoliciesMaxKidsStayFreeCountExceptionEnum maxKidsStayFreeCountException) {
        this.maxKidsStayFreeCountException = maxKidsStayFreeCountException;
        return this;
    }
    
    /**
     * Forms of payment accepted at the property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentOptions")
    public PaymentOptions paymentOptions;
    public Policies withPaymentOptions(PaymentOptions paymentOptions) {
        this.paymentOptions = paymentOptions;
        return this;
    }
    
    /**
     * Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smokeFreeProperty")
    public Boolean smokeFreeProperty;
    public Policies withSmokeFreeProperty(Boolean smokeFreeProperty) {
        this.smokeFreeProperty = smokeFreeProperty;
        return this;
    }
    
    /**
     * Smoke free property exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smokeFreePropertyException")
    public PoliciesSmokeFreePropertyExceptionEnum smokeFreePropertyException;
    public Policies withSmokeFreePropertyException(PoliciesSmokeFreePropertyExceptionEnum smokeFreePropertyException) {
        this.smokeFreePropertyException = smokeFreePropertyException;
        return this;
    }
    
}
