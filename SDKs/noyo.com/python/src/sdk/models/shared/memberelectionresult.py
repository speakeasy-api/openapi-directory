"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MemberElectionResultMemberTypeEnum(str, Enum):
    r"""Type of member electing or waiving coverage"""
    DEPENDENT = 'dependent'
    EMPLOYEE = 'employee'

class MemberElectionResultStatusEnum(str, Enum):
    r"""Status of the member election on the coverage plan"""
    ENROLLING = 'enrolling'
    WAIVING = 'waiving'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MemberElectionResult:
    r"""Successful Response - Returns the new Member Election"""
    
    created: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""The date the record was created"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the record in Noyo"""  
    member_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member_id') }})
    r"""Unique identifier of the member in Noyo"""  
    member_type: MemberElectionResultMemberTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member_type') }})
    r"""Type of member electing or waiving coverage"""  
    modified: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified') }})
    r"""The date the record was last updated"""  
    plan_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_id') }})
    r"""Unique identifier of the coverage plan in Noyo"""  
    status: MemberElectionResultStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the member election on the coverage plan"""  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""Current version of the record"""  
    volume: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume'), 'exclude': lambda f: f is None }})
    r"""Volume amount requested for the enrolling member"""  
    