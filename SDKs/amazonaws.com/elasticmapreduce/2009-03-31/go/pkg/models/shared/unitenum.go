// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UnitEnum string

const (
	UnitEnumNone               UnitEnum = "NONE"
	UnitEnumSeconds            UnitEnum = "SECONDS"
	UnitEnumMicroSeconds       UnitEnum = "MICRO_SECONDS"
	UnitEnumMilliSeconds       UnitEnum = "MILLI_SECONDS"
	UnitEnumBytes              UnitEnum = "BYTES"
	UnitEnumKiloBytes          UnitEnum = "KILO_BYTES"
	UnitEnumMegaBytes          UnitEnum = "MEGA_BYTES"
	UnitEnumGigaBytes          UnitEnum = "GIGA_BYTES"
	UnitEnumTeraBytes          UnitEnum = "TERA_BYTES"
	UnitEnumBits               UnitEnum = "BITS"
	UnitEnumKiloBits           UnitEnum = "KILO_BITS"
	UnitEnumMegaBits           UnitEnum = "MEGA_BITS"
	UnitEnumGigaBits           UnitEnum = "GIGA_BITS"
	UnitEnumTeraBits           UnitEnum = "TERA_BITS"
	UnitEnumPercent            UnitEnum = "PERCENT"
	UnitEnumCount              UnitEnum = "COUNT"
	UnitEnumBytesPerSecond     UnitEnum = "BYTES_PER_SECOND"
	UnitEnumKiloBytesPerSecond UnitEnum = "KILO_BYTES_PER_SECOND"
	UnitEnumMegaBytesPerSecond UnitEnum = "MEGA_BYTES_PER_SECOND"
	UnitEnumGigaBytesPerSecond UnitEnum = "GIGA_BYTES_PER_SECOND"
	UnitEnumTeraBytesPerSecond UnitEnum = "TERA_BYTES_PER_SECOND"
	UnitEnumBitsPerSecond      UnitEnum = "BITS_PER_SECOND"
	UnitEnumKiloBitsPerSecond  UnitEnum = "KILO_BITS_PER_SECOND"
	UnitEnumMegaBitsPerSecond  UnitEnum = "MEGA_BITS_PER_SECOND"
	UnitEnumGigaBitsPerSecond  UnitEnum = "GIGA_BITS_PER_SECOND"
	UnitEnumTeraBitsPerSecond  UnitEnum = "TERA_BITS_PER_SECOND"
	UnitEnumCountPerSecond     UnitEnum = "COUNT_PER_SECOND"
)

func (e UnitEnum) ToPointer() *UnitEnum {
	return &e
}

func (e *UnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "SECONDS":
		fallthrough
	case "MICRO_SECONDS":
		fallthrough
	case "MILLI_SECONDS":
		fallthrough
	case "BYTES":
		fallthrough
	case "KILO_BYTES":
		fallthrough
	case "MEGA_BYTES":
		fallthrough
	case "GIGA_BYTES":
		fallthrough
	case "TERA_BYTES":
		fallthrough
	case "BITS":
		fallthrough
	case "KILO_BITS":
		fallthrough
	case "MEGA_BITS":
		fallthrough
	case "GIGA_BITS":
		fallthrough
	case "TERA_BITS":
		fallthrough
	case "PERCENT":
		fallthrough
	case "COUNT":
		fallthrough
	case "BYTES_PER_SECOND":
		fallthrough
	case "KILO_BYTES_PER_SECOND":
		fallthrough
	case "MEGA_BYTES_PER_SECOND":
		fallthrough
	case "GIGA_BYTES_PER_SECOND":
		fallthrough
	case "TERA_BYTES_PER_SECOND":
		fallthrough
	case "BITS_PER_SECOND":
		fallthrough
	case "KILO_BITS_PER_SECOND":
		fallthrough
	case "MEGA_BITS_PER_SECOND":
		fallthrough
	case "GIGA_BITS_PER_SECOND":
		fallthrough
	case "TERA_BITS_PER_SECOND":
		fallthrough
	case "COUNT_PER_SECOND":
		*e = UnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnitEnum: %v", v)
	}
}
