"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import feedback as shared_feedback
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SubmitUserFeedbackRequestBody:
    
    positive: int = dataclasses.field(metadata={'multipart_form': { 'field_name': 'positive' }})
    r"""If set to 1, the feedback is positive.  If set to 0, the feedback is negative."""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'category' }})
    r"""For positive feedback, category should not be set. <br /><br /> For negative feedback, category should be set to one of: NO_SHOW, UNRESPONSIVE, LATE_OR_TOO_EARLY, ITEM_NOT_AS_DESCRIBED, BROKEN_PROMISE, RUDE, RESELLER, SELLING, UNWANTED_MESSAGES, COMMUNICATION, OTHER <br /><br /> Below are descriptions for each of these categories: <br /><br /> **NO_SHOW** - The user did not show up when they said they would.<br /> **UNRESPONSIVE** - The user failed to respond when a response was expected.<br /> **LATE_OR_TOO_EARLY** - The user showed up later than they said they would (or too early).<br /> **ITEM_NOT_AS_DESCRIBED** - The user gave away an item that had a misleading on incomplete description.<br /> **BROKEN_PROMISE** - The user broke a promise.<br /> **RUDE** - The user was rude or impolite.<br /> **RESELLER** - The user is obtaining free items to sell on other sites without disclosing their intent to resell.<br /> **SELLING** - The user is selling items on trash nothing.<br /> **UNWANTED_MESSAGES** - The user is sending off-topic or unrelated messages.<br />           **COMMUNICATION** - The users' communication is unclear, confusing or bad.<br /> **OTHER** - This category is for anything that does not fit in any of the above categories."""  
    content: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'content' }})
    r"""A comment written by the current user about the user they are leaving feedback on. This is optional for positive feedback but is required for negative feedback."""  
    

@dataclasses.dataclass
class SubmitUserFeedbackRequest:
    
    request_body: SubmitUserFeedbackRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'multipart/form-data' }})  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""A user ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubmitUserFeedback200ApplicationJSON:
    r"""The updated user and feedback."""
    
    feedback: Optional[shared_feedback.Feedback] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedback'), 'exclude': lambda f: f is None }})  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class SubmitUserFeedbackResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    submit_user_feedback_200_application_json_object: Optional[SubmitUserFeedback200ApplicationJSON] = dataclasses.field(default=None)
    r"""The updated user and feedback."""  
    