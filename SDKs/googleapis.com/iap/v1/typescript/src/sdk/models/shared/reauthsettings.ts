/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Reauth method requested.
 */
export enum ReauthSettingsMethodEnum {
  MethodUnspecified = "METHOD_UNSPECIFIED",
  Login = "LOGIN",
  Password = "PASSWORD",
  SecureKey = "SECURE_KEY",
  EnrolledSecondFactors = "ENROLLED_SECOND_FACTORS",
}

/**
 * How IAP determines the effective policy in cases of hierarchial policies. Policies are merged from higher in the hierarchy to lower in the hierarchy.
 */
export enum ReauthSettingsPolicyTypeEnum {
  PolicyTypeUnspecified = "POLICY_TYPE_UNSPECIFIED",
  Minimum = "MINIMUM",
  Default = "DEFAULT",
}

/**
 * Configuration for IAP reauthentication policies.
 */
export class ReauthSettings extends SpeakeasyBase {
  /**
   * Reauth session lifetime, how long before a user has to reauthenticate again.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxAge" })
  maxAge?: string;

  /**
   * Reauth method requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: ReauthSettingsMethodEnum;

  /**
   * How IAP determines the effective policy in cases of hierarchial policies. Policies are merged from higher in the hierarchy to lower in the hierarchy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyType" })
  policyType?: ReauthSettingsPolicyTypeEnum;
}
