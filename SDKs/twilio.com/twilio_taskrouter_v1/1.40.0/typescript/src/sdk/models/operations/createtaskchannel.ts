/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateTaskChannelServerList = [
  "https://taskrouter.twilio.com",
] as const;

export class CreateTaskChannelSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateTaskChannelCreateTaskChannelRequest extends SpeakeasyBase {
  /**
   * Whether the Task Channel should prioritize Workers that have been idle. If `true`, Workers that have been idle the longest are prioritized.
   */
  @SpeakeasyMetadata({ data: "form, name=ChannelOptimizedRouting" })
  channelOptimizedRouting?: boolean;

  /**
   * A descriptive string that you create to describe the Task Channel. It can be up to 64 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName: string;

  /**
   * An application-defined string that uniquely identifies the Task Channel, such as `voice` or `sms`.
   */
  @SpeakeasyMetadata({ data: "form, name=UniqueName" })
  uniqueName: string;
}

export class CreateTaskChannelRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateTaskChannelCreateTaskChannelRequest;

  /**
   * The SID of the Workspace that the new Task Channel belongs to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkspaceSid",
  })
  workspaceSid: string;
}

export class CreateTaskChannelResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  taskrouterV1WorkspaceTaskChannel?: shared.TaskrouterV1WorkspaceTaskChannel;
}
