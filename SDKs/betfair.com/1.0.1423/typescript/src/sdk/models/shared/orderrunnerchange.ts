/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Order } from "./order";
import { StrategyMatchChange } from "./strategymatchchange";
import { Expose, Transform, Type } from "class-transformer";

export class OrderRunnerChange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "fullImage" })
  fullImage?: boolean;

  /**
   * Handicap - the handicap of the runner (selection) (null if not applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hc" })
  hc?: number;

  /**
   * Selection Id - the id of the runner (selection)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mb" })
  mb?: number[][];

  /**
   * Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ml" })
  ml?: number[][];

  /**
   * Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference
   */
  @SpeakeasyMetadata({ elemType: StrategyMatchChange })
  @Expose({ name: "smc" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, StrategyMatchChange> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], StrategyMatchChange);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  smc?: Record<string, StrategyMatchChange>;

  /**
   * Unmatched Orders - orders on this runner (selection) that are not fully matched
   */
  @SpeakeasyMetadata({ elemType: Order })
  @Expose({ name: "uo" })
  @Type(() => Order)
  uo?: Order[];
}
