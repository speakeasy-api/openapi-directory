"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributedimension as shared_attributedimension
from ..shared import metricdimension as shared_metricdimension
from ..shared import setdimension as shared_setdimension
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventDimensions:
    r"""Specifies the dimensions for an event filter that determines when a campaign is sent or a journey activity is performed."""
    
    attributes: Optional[dict[str, shared_attributedimension.AttributeDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    event_type: Optional[shared_setdimension.SetDimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventType'), 'exclude': lambda f: f is None }})  
    metrics: Optional[dict[str, shared_metricdimension.MetricDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Metrics'), 'exclude': lambda f: f is None }})  
    