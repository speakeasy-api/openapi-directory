// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateChannelSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type CreateChannelApplicationJSONMembers struct {
	// Member's email address.
	Email string `json:"email"`
}

// CreateChannelApplicationJSONTypeEnum - Type of the channel. The value can be one of the following:<br>
// `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
// `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
// `3`: Public channel. Anyone can search for this channel and join the channel.<br>
// `4`: New chat. This is an instant channel which can be created by adding members to a new chat.
type CreateChannelApplicationJSONTypeEnum string

const (
	CreateChannelApplicationJSONTypeEnumOne   CreateChannelApplicationJSONTypeEnum = "1"
	CreateChannelApplicationJSONTypeEnumTwo   CreateChannelApplicationJSONTypeEnum = "2"
	CreateChannelApplicationJSONTypeEnumThree CreateChannelApplicationJSONTypeEnum = "3"
)

func (e *CreateChannelApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = CreateChannelApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelApplicationJSONTypeEnum: %s", s)
	}
}

type CreateChannelApplicationJSON struct {
	// Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API.
	Members []CreateChannelApplicationJSONMembers `json:"members,omitempty"`
	// Name of the channel.
	Name *string `json:"name,omitempty"`
	// Type of the channel. The value can be one of the following:<br>
	// `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
	// `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
	// `3`: Public channel. Anyone can search for this channel and join the channel.<br>
	// `4`: New chat. This is an instant channel which can be created by adding members to a new chat.
	Type *CreateChannelApplicationJSONTypeEnum `json:"type,omitempty"`
}

type CreateChannelRequest struct {
	RequestBody *CreateChannelApplicationJSON `request:"mediaType=application/json"`
	// Unique identifier of the user.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// CreateChannel201ApplicationXML - **Status Code**: `201` <br>
// Channel created.
type CreateChannel201ApplicationXML struct {
	// Channel ID: Unique Identifier of the Channel.
	ID *string
	// Channel JID.
	Jid *string
	// Channel name.
	Name *string
	// Channel type.
	Type *int64
}

// CreateChannel201ApplicationJSON - **Status Code**: `201` <br>
// Channel created.
type CreateChannel201ApplicationJSON struct {
	// Channel ID: Unique Identifier of the Channel.
	ID *string `json:"id,omitempty"`
	// Channel JID.
	Jid *string `json:"jid,omitempty"`
	// Channel name.
	Name *string `json:"name,omitempty"`
	// Channel type.
	Type *int64 `json:"type,omitempty"`
}

type CreateChannelResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **Status Code**: `201` <br>
	// Channel created.
	CreateChannel201ApplicationJSONObject *CreateChannel201ApplicationJSON
}
