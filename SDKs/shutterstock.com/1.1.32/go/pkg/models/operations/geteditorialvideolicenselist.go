// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetEditorialVideoLicenseListSecurity struct {
	CustomerAccessCode string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetEditorialVideoLicenseListDownloadAvailabilityEnum - Filter licenses by download availability
type GetEditorialVideoLicenseListDownloadAvailabilityEnum string

const (
	GetEditorialVideoLicenseListDownloadAvailabilityEnumAll             GetEditorialVideoLicenseListDownloadAvailabilityEnum = "all"
	GetEditorialVideoLicenseListDownloadAvailabilityEnumDownloadable    GetEditorialVideoLicenseListDownloadAvailabilityEnum = "downloadable"
	GetEditorialVideoLicenseListDownloadAvailabilityEnumNonDownloadable GetEditorialVideoLicenseListDownloadAvailabilityEnum = "non_downloadable"
)

func (e GetEditorialVideoLicenseListDownloadAvailabilityEnum) ToPointer() *GetEditorialVideoLicenseListDownloadAvailabilityEnum {
	return &e
}

func (e *GetEditorialVideoLicenseListDownloadAvailabilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "downloadable":
		fallthrough
	case "non_downloadable":
		*e = GetEditorialVideoLicenseListDownloadAvailabilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorialVideoLicenseListDownloadAvailabilityEnum: %v", v)
	}
}

// GetEditorialVideoLicenseListSortEnum - Sort order
type GetEditorialVideoLicenseListSortEnum string

const (
	GetEditorialVideoLicenseListSortEnumNewest GetEditorialVideoLicenseListSortEnum = "newest"
	GetEditorialVideoLicenseListSortEnumOldest GetEditorialVideoLicenseListSortEnum = "oldest"
)

func (e GetEditorialVideoLicenseListSortEnum) ToPointer() *GetEditorialVideoLicenseListSortEnum {
	return &e
}

func (e *GetEditorialVideoLicenseListSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "newest":
		fallthrough
	case "oldest":
		*e = GetEditorialVideoLicenseListSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEditorialVideoLicenseListSortEnum: %v", v)
	}
}

type GetEditorialVideoLicenseListRequest struct {
	// Filter licenses by download availability
	DownloadAvailability *GetEditorialVideoLicenseListDownloadAvailabilityEnum `queryParam:"style=form,explode=true,name=download_availability"`
	// Show licenses created before the specified date
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
	// Show editorial videos that are available with the specified license name
	License *string `queryParam:"style=form,explode=true,name=license"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Sort order
	Sort *GetEditorialVideoLicenseListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Show licenses created on or after the specified date
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// Set to true to see license history for all members of your team.
	TeamHistory *bool `queryParam:"style=form,explode=true,name=team_history"`
	// Filter licenses by username of licensee
	Username *string `queryParam:"style=form,explode=true,name=username"`
	// Show licenses for the specified editorial video ID
	VideoID *string `queryParam:"style=form,explode=true,name=video_id"`
}

type GetEditorialVideoLicenseListResponse struct {
	ContentType string
	// OK
	DownloadHistoryDataList *shared.DownloadHistoryDataList
	StatusCode              int
	RawResponse             *http.Response
}
