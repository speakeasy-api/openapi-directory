"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LabelDescriptorValueTypeEnum(str, Enum):
    r"""The type of data that can be assigned to the label."""
    STRING = 'STRING'
    BOOL = 'BOOL'
    INT64 = 'INT64'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LabelDescriptor:
    r"""A description of a label."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A human-readable description for the label."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The label key."""  
    value_type: Optional[LabelDescriptorValueTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueType'), 'exclude': lambda f: f is None }})
    r"""The type of data that can be assigned to the label."""  
    