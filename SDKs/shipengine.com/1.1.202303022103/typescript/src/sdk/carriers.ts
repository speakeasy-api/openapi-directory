/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * carriers
 *
 * @remarks
 *
 */
export class Carriers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add Funds To Carrier
   *
   * @remarks
   * Add Funds To A Carrier
   */
  addFundsToCarrier(
    req: operations.AddFundsToCarrierRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddFundsToCarrierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddFundsToCarrierRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/carriers/{carrier_id}/add_funds",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addFundsToCarrierRequestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddFundsToCarrierResponse =
        new operations.AddFundsToCarrierResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addFundsToCarrierResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.AddFundsToCarrierResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Carrier By ID
   *
   * @remarks
   * Retrive carrier info by ID
   */
  getCarrierById(
    req: operations.GetCarrierByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCarrierByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCarrierByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/carriers/{carrier_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCarrierByIdResponse =
        new operations.GetCarrierByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCarrierByIdResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.GetCarrierByIdResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Carrier Options
   *
   * @remarks
   * Get a list of the options available for the carrier
   */
  getCarrierOptions(
    req: operations.GetCarrierOptionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCarrierOptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCarrierOptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/carriers/{carrier_id}/options",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCarrierOptionsResponse =
        new operations.GetCarrierOptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCarrierOptionsResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.GetCarrierOptionsResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Carrier Package Types
   *
   * @remarks
   * List the package types associated with the carrier
   */
  listCarrierPackageTypes(
    req: operations.ListCarrierPackageTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCarrierPackageTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCarrierPackageTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/carriers/{carrier_id}/packages",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCarrierPackageTypesResponse =
        new operations.ListCarrierPackageTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCarrierPackageTypesResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ListCarrierPackageTypesResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Carrier Services
   *
   * @remarks
   * List the services associated with the carrier ID
   */
  listCarrierServices(
    req: operations.ListCarrierServicesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCarrierServicesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCarrierServicesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/carriers/{carrier_id}/services",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCarrierServicesResponse =
        new operations.ListCarrierServicesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCarrierServicesResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ListCarrierServicesResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Carriers
   *
   * @remarks
   * List all carriers that have been added to this account
   */
  listCarriers(
    config?: AxiosRequestConfig
  ): Promise<operations.ListCarriersResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/carriers";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCarriersResponse =
        new operations.ListCarriersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 207].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCarriersResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.GetCarriersResponseBody
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseBody = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseBody
            );
          }
          break;
      }

      return res;
    });
  }
}
