// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkSwitchSettingsPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

type GetNetworkSwitchSettingsRequest struct {
	PathParams GetNetworkSwitchSettingsPathParams
}

// GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum - Per switch exception (combined, redundant, useNetworkSetting)
type GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum string

const (
	GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnumCombined          GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum = "combined"
	GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnumRedundant         GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum = "redundant"
	GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnumUseNetworkSetting GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum = "useNetworkSetting"
)

func (e *GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "combined":
		fallthrough
	case "redundant":
		fallthrough
	case "useNetworkSetting":
		*e = GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum: %s", s)
	}
}

type GetNetworkSwitchSettings200ApplicationJSONPowerExceptions struct {
	// Per switch exception (combined, redundant, useNetworkSetting)
	PowerType *GetNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum `json:"powerType,omitempty"`
	// Serial number of the switch
	Serial *string `json:"serial,omitempty"`
}

// GetNetworkSwitchSettings200ApplicationJSON - Successful operation
type GetNetworkSwitchSettings200ApplicationJSON struct {
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions []GetNetworkSwitchSettings200ApplicationJSONPowerExceptions `json:"powerExceptions,omitempty"`
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower *bool `json:"useCombinedPower,omitempty"`
	// Management VLAN
	Vlan *int64 `json:"vlan,omitempty"`
}

type GetNetworkSwitchSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkSwitchSettings200ApplicationJSONObject *GetNetworkSwitchSettings200ApplicationJSON
}
