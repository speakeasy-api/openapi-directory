/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClassificationResultStatus } from "./classificationresultstatus";
import { CustomDataIdentifiers } from "./customdataidentifiers";
import { SensitiveDataItem } from "./sensitivedataitem";
import { Expose, Type } from "class-transformer";

/**
 * Provides the details of a sensitive data finding, including the types, number of occurrences, and locations of the sensitive data that was detected.
 */
export class ClassificationResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "additionalOccurrences" })
  additionalOccurrences?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "customDataIdentifiers" })
  @Type(() => CustomDataIdentifiers)
  customDataIdentifiers?: CustomDataIdentifiers;

  @SpeakeasyMetadata()
  @Expose({ name: "mimeType" })
  mimeType?: string;

  @SpeakeasyMetadata({ elemType: SensitiveDataItem })
  @Expose({ name: "sensitiveData" })
  @Type(() => SensitiveDataItem)
  sensitiveData?: SensitiveDataItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "sizeClassified" })
  sizeClassified?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => ClassificationResultStatus)
  status?: ClassificationResultStatus;
}
