"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class Files:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def upload_file(self, request: shared.FileToUploadDto) -> operations.UploadFileResponse:
        r"""Uploads a temporary file (ie. for XML import). Returns token which can be used in other API calls.
        When a file is required by an operation (ie. task creation) it must be uploaded previously to the API.
        Uploading a file will result in a file token, which can be used to reference this file in other API calls.
         Each file must be uploaded separately.
         Keep in mind that file token has limited validity (ie. 10 minutes).
         Therefore files must be uploaded just before issuing API call which reference them.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/files'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    