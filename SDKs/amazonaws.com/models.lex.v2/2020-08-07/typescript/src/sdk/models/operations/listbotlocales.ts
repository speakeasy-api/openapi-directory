/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specifies attributes for sorting a list of bot locales.
 */
export class ListBotLocalesRequestBodySortBy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attribute" })
  attribute?: shared.BotLocaleSortAttributeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "order" })
  order?: shared.SortOrderEnum;
}

export class ListBotLocalesRequestBody extends SpeakeasyBase {
  /**
   * Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.
   */
  @SpeakeasyMetadata({ elemType: shared.BotLocaleFilter })
  @Expose({ name: "filters" })
  @Type(() => shared.BotLocaleFilter)
  filters?: shared.BotLocaleFilter[];

  /**
   * The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * If the response from the <code>ListBotLocales</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token as the <code>nextToken</code> parameter to return the next page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * Specifies attributes for sorting a list of bot locales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortBy" })
  @Type(() => ListBotLocalesRequestBodySortBy)
  sortBy?: ListBotLocalesRequestBodySortBy;
}

export class ListBotLocalesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListBotLocalesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The identifier of the bot to list locales for.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botId",
  })
  botId: string;

  /**
   * The version of the bot to list locales for.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botVersion",
  })
  botVersion: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListBotLocalesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listBotLocalesResponse?: shared.ListBotLocalesResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
