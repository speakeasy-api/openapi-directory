"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Revisions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def drive_revisions_delete(self, request: operations.DriveRevisionsDeleteRequest, security: operations.DriveRevisionsDeleteSecurity) -> operations.DriveRevisionsDeleteResponse:
        r"""Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveRevisionsDeleteRequest, base_url, '/files/{fileId}/revisions/{revisionId}', request)
        
        query_params = utils.get_query_params(operations.DriveRevisionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveRevisionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_revisions_get(self, request: operations.DriveRevisionsGetRequest, security: operations.DriveRevisionsGetSecurity) -> operations.DriveRevisionsGetResponse:
        r"""Gets a revision's metadata or content by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveRevisionsGetRequest, base_url, '/files/{fileId}/revisions/{revisionId}', request)
        
        query_params = utils.get_query_params(operations.DriveRevisionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveRevisionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Revision])
                res.revision = out

        return res

    def drive_revisions_list(self, request: operations.DriveRevisionsListRequest, security: operations.DriveRevisionsListSecurity) -> operations.DriveRevisionsListResponse:
        r"""Lists a file's revisions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveRevisionsListRequest, base_url, '/files/{fileId}/revisions', request)
        
        query_params = utils.get_query_params(operations.DriveRevisionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveRevisionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RevisionList])
                res.revision_list = out

        return res

    def drive_revisions_update(self, request: operations.DriveRevisionsUpdateRequest, security: operations.DriveRevisionsUpdateSecurity) -> operations.DriveRevisionsUpdateResponse:
        r"""Updates a revision with patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveRevisionsUpdateRequest, base_url, '/files/{fileId}/revisions/{revisionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "revision", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveRevisionsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveRevisionsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Revision])
                res.revision = out

        return res

    