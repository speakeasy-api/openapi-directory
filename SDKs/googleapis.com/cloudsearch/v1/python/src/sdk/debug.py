"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Debug:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudsearch_debug_datasources_items_check_access(self, request: operations.CloudsearchDebugDatasourcesItemsCheckAccessRequest, security: operations.CloudsearchDebugDatasourcesItemsCheckAccessSecurity) -> operations.CloudsearchDebugDatasourcesItemsCheckAccessResponse:
        r"""Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchDebugDatasourcesItemsCheckAccessRequest, base_url, '/v1/debug/{name}:checkAccess', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "principal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchDebugDatasourcesItemsCheckAccessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchDebugDatasourcesItemsCheckAccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CheckAccessResponse])
                res.check_access_response = out

        return res

    def cloudsearch_debug_datasources_items_search_by_view_url(self, request: operations.CloudsearchDebugDatasourcesItemsSearchByViewURLRequest, security: operations.CloudsearchDebugDatasourcesItemsSearchByViewURLSecurity) -> operations.CloudsearchDebugDatasourcesItemsSearchByViewURLResponse:
        r"""Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchDebugDatasourcesItemsSearchByViewURLRequest, base_url, '/v1/debug/{name}/items:searchByViewUrl', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "search_items_by_view_url_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsearchDebugDatasourcesItemsSearchByViewURLRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchDebugDatasourcesItemsSearchByViewURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchItemsByViewURLResponse])
                res.search_items_by_view_url_response = out

        return res

    def cloudsearch_debug_identitysources_items_list_forunmappedidentity(self, request: operations.CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest, security: operations.CloudsearchDebugIdentitysourcesItemsListForunmappedidentitySecurity) -> operations.CloudsearchDebugIdentitysourcesItemsListForunmappedidentityResponse:
        r"""Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest, base_url, '/v1/debug/{parent}/items:forunmappedidentity', request)
        
        query_params = utils.get_query_params(operations.CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchDebugIdentitysourcesItemsListForunmappedidentityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListItemNamesForUnmappedIdentityResponse])
                res.list_item_names_for_unmapped_identity_response = out

        return res

    def cloudsearch_debug_identitysources_unmappedids_list(self, request: operations.CloudsearchDebugIdentitysourcesUnmappedidsListRequest, security: operations.CloudsearchDebugIdentitysourcesUnmappedidsListSecurity) -> operations.CloudsearchDebugIdentitysourcesUnmappedidsListResponse:
        r"""Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchDebugIdentitysourcesUnmappedidsListRequest, base_url, '/v1/debug/{parent}/unmappedids', request)
        
        query_params = utils.get_query_params(operations.CloudsearchDebugIdentitysourcesUnmappedidsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchDebugIdentitysourcesUnmappedidsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListUnmappedIdentitiesResponse])
                res.list_unmapped_identities_response = out

        return res

    