<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class QuotesSmartV2 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds files to the quote as added by PM.
     * 
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see "POST v2/quotes/{quoteId}/files/upload" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddFiles2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddFiles2Response
     */
	public function addFiles2(
        \OpenAPI\OpenAPI\Models\Operations\AddFiles2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddFiles2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/files/add', \OpenAPI\OpenAPI\Models\Operations\AddFiles2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "timeDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddFiles2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Prepares a ZIP archive that contains the specified files.
     * 
     * Prepares a ZIP archive that contains the specified files.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\FilesDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Archive1Response
     */
	public function archive1(
        \OpenAPI\OpenAPI\Models\Shared\FilesDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Archive1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/files/archive');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Archive1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesArchiveDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesArchiveDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     * 
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED</li><li>SENT – available when the job has one of the following statuses: PENDING</li><li>APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT</li><li>REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeStatus3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeStatus3Response
     */
	public function changeStatus3(
        \OpenAPI\OpenAPI\Models\Operations\ChangeStatus3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeStatus3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/status', \OpenAPI\OpenAPI\Models\Operations\ChangeStatus3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectStatusDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeStatus3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Adds a payable to a quote.
     * 
     * Adds a payable to a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayable3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayable3Response
     */
	public function createPayable3(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayable3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayable3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance/payables', \OpenAPI\OpenAPI\Models\Operations\CreatePayable3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayable3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a receivable to a quote.
     * 
     * Adds a receivable to a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReceivable3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReceivable3Response
     */
	public function createReceivable3(
        \OpenAPI\OpenAPI\Models\Operations\CreateReceivable3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReceivable3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance/receivables', \OpenAPI\OpenAPI\Models\Operations\CreateReceivable3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReceivable3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Smart Quote.
     * 
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\QuoteCreateDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create7Response
     */
	public function create7(
        \OpenAPI\OpenAPI\Models\Shared\QuoteCreateDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create7Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create7Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDTOv2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuoteDTOv2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a payable.
     * 
     * Deletes a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePayable3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePayable3Response
     */
	public function deletePayable3(
        \OpenAPI\OpenAPI\Models\Operations\DeletePayable3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePayable3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\DeletePayable3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePayable3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a receivable.
     * 
     * Deletes a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable3Response
     */
	public function deleteReceivable3(
        \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteReceivable3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns quote details.
     * 
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById10Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById10Response
     */
	public function getById10(
        \OpenAPI\OpenAPI\Models\Operations\GetById10Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById10Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}', \OpenAPI\OpenAPI\Models\Operations\GetById10Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById10Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDTOv2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuoteDTOv2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns Client Contacts information for a quote.
     * 
     * Returns Client Contacts information for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContacts3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContacts3Response
     */
	public function getContacts3(
        \OpenAPI\OpenAPI\Models\Operations\GetContacts3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContacts3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/clientContacts', \OpenAPI\OpenAPI\Models\Operations\GetContacts3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContacts3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->smartContactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SmartContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of custom field keys and values for a project.
     * 
     * Returns a list of custom field keys and values for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields9Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields9Response
     */
	public function getCustomFields9(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields9Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields9Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields9Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields9Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns details of a file.
     * 
     * Returns details of a file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileById3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileById3Response
     */
	public function getFileById3(
        \OpenAPI\OpenAPI\Models\Operations\GetFileById3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileById3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/files/{fileId}', \OpenAPI\OpenAPI\Models\Operations\GetFileById3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileById3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectFileDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectFileDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Downloads a file content.
     * 
     * Downloads a file content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileContentById1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileContentById1Response
     */
	public function getFileContentById1(
        \OpenAPI\OpenAPI\Models\Operations\GetFileContentById1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileContentById1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/files/{fileId}/download/{fileName}', \OpenAPI\OpenAPI\Models\Operations\GetFileContentById1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileContentById1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * Returns list of files in a quote.
     * 
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFiles1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFiles1Response
     */
	public function getFiles1(
        \OpenAPI\OpenAPI\Models\Operations\GetFiles1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFiles1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/files', \OpenAPI\OpenAPI\Models\Operations\GetFiles1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFiles1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectFileDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectFileDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns finance information for a quote.
     * 
     * Returns finance information for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFinance3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFinance3Response
     */
	public function getFinance3(
        \OpenAPI\OpenAPI\Models\Operations\GetFinance3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFinance3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance', \OpenAPI\OpenAPI\Models\Operations\GetFinance3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFinance3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->financeDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FinanceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of jobs in a quote.
     * 
     * Returns list of jobs in a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobs1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobs1Response
     */
	public function getJobs1(
        \OpenAPI\OpenAPI\Models\Operations\GetJobs1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobs1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/jobs', \OpenAPI\OpenAPI\Models\Operations\GetJobs1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobs1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobDtos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JobDto>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates Business Days for a quote.
     * 
     * Updates Business Days for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBusinessDaysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBusinessDaysResponse
     */
	public function updateBusinessDays(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBusinessDaysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBusinessDaysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/businessDays', \OpenAPI\OpenAPI\Models\Operations\UpdateBusinessDaysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBusinessDaysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Notes for a quote.
     * 
     * Updates Client Notes for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotes1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotes1Response
     */
	public function updateClientNotes1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotes1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotes1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/clientNotes', \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotes1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientNotes1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Reference Number for a quote.
     * 
     * Updates Client Reference Number for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumber1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumber1Response
     */
	public function updateClientReferenceNumber1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumber1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumber1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/clientReferenceNumber', \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumber1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientReferenceNumber1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Client Contacts for a quote.
     * 
     * Updates Client Contacts for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContacts3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContacts3Response
     */
	public function updateContacts3(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContacts3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContacts3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/clientContacts', \OpenAPI\OpenAPI\Models\Operations\UpdateContacts3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "smartContactsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContacts3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->smartContactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SmartContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a custom field with a specified key in a quote.
     * 
     * Updates a custom field with a specified key in a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField3Response
     */
	public function updateCustomField3(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/customFields/{key}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "smartCustomFieldDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Expected Delivery Date for a quote.
     * 
     * Updates Expected Delivery Date for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExpectedDeliveryDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateExpectedDeliveryDateResponse
     */
	public function updateExpectedDeliveryDate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateExpectedDeliveryDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateExpectedDeliveryDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/expectedDeliveryDate', \OpenAPI\OpenAPI\Models\Operations\UpdateExpectedDeliveryDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "timeDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateExpectedDeliveryDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates Internal Notes for a quote.
     * 
     * Updates Internal Notes for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotes1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotes1Response
     */
	public function updateInternalNotes1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotes1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotes1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/internalNotes', \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotes1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInternalNotes1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates a payable.
     * 
     * Updates a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayable3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePayable3Response
     */
	public function updatePayable3(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayable3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePayable3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\UpdatePayable3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePayable3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates Quote Expiry Date for a quote.
     * 
     * Updates Quote Expiry Date for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateQuoteExpiryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateQuoteExpiryResponse
     */
	public function updateQuoteExpiry(
        \OpenAPI\OpenAPI\Models\Operations\UpdateQuoteExpiryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateQuoteExpiryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/quoteExpiry', \OpenAPI\OpenAPI\Models\Operations\UpdateQuoteExpiryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "timeDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateQuoteExpiryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates a receivable.
     * 
     * Updates a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable3Response
     */
	public function updateReceivable3(
        \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateReceivable3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates source language for a quote.
     * 
     * Updates source language for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguage1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguage1Response
     */
	public function updateSourceLanguage1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguage1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguage1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/sourceLanguage', \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguage1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sourceLanguageDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSourceLanguage1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates specialization for a quote.
     * 
     * Updates specialization for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSpecialization1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSpecialization1Response
     */
	public function updateSpecialization1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSpecialization1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSpecialization1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/specialization', \OpenAPI\OpenAPI\Models\Operations\UpdateSpecialization1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "specializationDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSpecialization1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates target languages for a quote.
     * 
     * Updates target languages for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguages1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguages1Response
     */
	public function updateTargetLanguages1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguages1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguages1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/targetLanguages', \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguages1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetLanguagesDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTargetLanguages1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     * 
     * Updates instructions for all vendors performing the jobs in a quote. See also "PUT /jobs/{jobId}/instructions" for updating instructions for a specific job in a project or quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructions1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructions1Response
     */
	public function updateVendorInstructions1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructions1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructions1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/vendorInstructions', \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructions1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stringDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVendorInstructions1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates volume for a quote.
     * 
     * Updates volume for a quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVolume1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVolume1Response
     */
	public function updateVolume1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVolume1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVolume1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/volume', \OpenAPI\OpenAPI\Models\Operations\UpdateVolume1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bigDecimalDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVolume1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Uploads file to the quote as a file uploaded by PM.
     * 
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see "PUT /v2/quotes/{quoteId}/files/add" operation).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadFile3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadFile3Response
     */
	public function uploadFile3(
        \OpenAPI\OpenAPI\Models\Operations\UploadFile3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadFile3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/quotes/{quoteId}/files/upload', \OpenAPI\OpenAPI\Models\Operations\UploadFile3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileToUploadDto", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadFile3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileDto1', 'json');
            }
        }

        return $response;
    }
}