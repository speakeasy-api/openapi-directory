"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LabelCounters:
    r"""Provides a breakdown of the number of objects labeled."""
    
    failed_non_retryable_error: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailedNonRetryableError'), 'exclude': lambda f: f is None }})  
    human_labeled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanLabeled'), 'exclude': lambda f: f is None }})  
    machine_labeled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MachineLabeled'), 'exclude': lambda f: f is None }})  
    total_labeled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalLabeled'), 'exclude': lambda f: f is None }})  
    unlabeled: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unlabeled'), 'exclude': lambda f: f is None }})  
    