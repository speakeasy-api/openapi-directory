/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ProxyModifySubscription - Container for custom fields of a Subscription object.
 * 
 */
public class ProxyModifySubscription {
    /**
     *  This field can be updated when **Status** is `Draft`. The ID of a valid account ID. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyModifySubscription withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. Indicates if the subscription automatically renews at the end of the term.
     * **Values**: `true`, `false` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AutoRenew")
    public Boolean autoRenew;
    public ProxyModifySubscription withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }
    
    /**
     *  The date of the Amendment object.
     * **Values**: inherited from `Amendment.EffectiveDate` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("CancelledDate")
    public LocalDate cancelledDate;
    public ProxyModifySubscription withCancelledDate(LocalDate cancelledDate) {
        this.cancelledDate = cancelledDate;
        return this;
    }
    
    /**
     * The date when the customer accepts the contract.
     * 
     * This field can be updated when **Status** is `Pending Acceptance`.
     * 
     * **Note** : This field is only required in the Subscribe call if the [Require Customer Acceptance of Orders?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Customer_Acceptance_of_Orders.3F) setting is set to `Yes`. If this setting is set to `Yes`:
     * 
     *  * If the `ServiceActivationDate` field is required, you must set this field, `ServiceActivationDate`, and `ContractEffectiveDate` fields in the Subscribe call to activate a subscription.
     *  * If the `ServiceActivationDate` field is not required, you must set both this field and the `ContractEffectiveDate` field in the Subscribe call to activate a subscription. If you only set a valid date in the `ContractEffectiveDate` field, the Subscribe call still returns success, but the subscription is in `Pending Acceptance` status.
     * 
     * This field can also be updated when the subscription is still on version one (has not been amended before) and the [Allow update Subscription trigger dates?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Allow_update_Subscription_trigger_dates.3F) setting in Billing Settings is set to `Yes`. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ContractAcceptanceDate")
    public LocalDate contractAcceptanceDate;
    public ProxyModifySubscription withContractAcceptanceDate(LocalDate contractAcceptanceDate) {
        this.contractAcceptanceDate = contractAcceptanceDate;
        return this;
    }
    
    /**
     * The date when the contract takes effect.
     * 
     * This field can be updated when **Status** is `Draft`.
     * 
     * **Note**: This field is required in the Subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the Subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field.
     * 
     * This field can also be updated when the subscription is still on version one (has not been amended before) and the [Allow update Subscription trigger dates?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Allow_update_Subscription_trigger_dates.3F) setting in Billing Settings is set to "Yes".
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ContractEffectiveDate")
    public LocalDate contractEffectiveDate;
    public ProxyModifySubscription withContractEffectiveDate(LocalDate contractEffectiveDate) {
        this.contractEffectiveDate = contractEffectiveDate;
        return this;
    }
    
    /**
     * The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CpqBundleJsonId__QT")
    public String cpqBundleJsonIdQT;
    public ProxyModifySubscription withCpqBundleJsonIdQT(String cpqBundleJsonIdQT) {
        this.cpqBundleJsonIdQT = cpqBundleJsonIdQT;
        return this;
    }
    
    /**
     *  The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentTermPeriodType")
    public String currentTermPeriodType;
    public ProxyModifySubscription withCurrentTermPeriodType(String currentTermPeriodType) {
        this.currentTermPeriodType = currentTermPeriodType;
        return this;
    }
    
    /**
     *  The length of the period for the first subscription term. This field can be updated when Status is `Draft`.
     * **Required**: If TermType is Termed **Character limit**: 20 **Values**: any valid number. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InitialTerm")
    public Integer initialTerm;
    public ProxyModifySubscription withInitialTerm(Integer initialTerm) {
        this.initialTerm = initialTerm;
        return this;
    }
    
    /**
     *  The period type for the first subscription term.
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * **Note**:
     * 
     * - This field can be updated when Status is `Draft`.
     * - This field is used with the InitialTerm field to specify the initial subscription term.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InitialTermPeriodType")
    public String initialTermPeriodType;
    public ProxyModifySubscription withInitialTermPeriodType(String initialTermPeriodType) {
        this.initialTermPeriodType = initialTermPeriodType;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyModifySubscription withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyModifySubscription withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. A valid account ID. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceOwnerId")
    public String invoiceOwnerId;
    public ProxyModifySubscription withInvoiceOwnerId(String invoiceOwnerId) {
        this.invoiceOwnerId = invoiceOwnerId;
        return this;
    }
    
    /**
     *  Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.
     * **Values**: `TRUE`, `FALSE `(default) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsInvoiceSeparate")
    public Boolean isInvoiceSeparate;
    public ProxyModifySubscription withIsInvoiceSeparate(Boolean isInvoiceSeparate) {
        this.isInvoiceSeparate = isInvoiceSeparate;
        return this;
    }
    
    /**
     *  The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur.
     * **Character limit**: 100 **Values**: one of the following:
     * 
     * - leave null to automatically generate
     * - a string of 100 characters or fewer
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public ProxyModifySubscription withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     *  Use this field to record comments about the subscription.
     * **Character limit**: 500 **Values**: a string of 500 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Notes")
    public String notes;
    public ProxyModifySubscription withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("OpportunityCloseDate__QT")
    public LocalDate opportunityCloseDateQT;
    public ProxyModifySubscription withOpportunityCloseDateQT(LocalDate opportunityCloseDateQT) {
        this.opportunityCloseDateQT = opportunityCloseDateQT;
        return this;
    }
    
    /**
     * The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpportunityName__QT")
    public String opportunityNameQT;
    public ProxyModifySubscription withOpportunityNameQT(String opportunityNameQT) {
        this.opportunityNameQT = opportunityNameQT;
        return this;
    }
    
    /**
     * The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Project__NS")
    public String projectNS;
    public ProxyModifySubscription withProjectNS(String projectNS) {
        this.projectNS = projectNS;
        return this;
    }
    
    /**
     * The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteBusinessType__QT")
    public String quoteBusinessTypeQT;
    public ProxyModifySubscription withQuoteBusinessTypeQT(String quoteBusinessTypeQT) {
        this.quoteBusinessTypeQT = quoteBusinessTypeQT;
        return this;
    }
    
    /**
     * The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteNumber__QT")
    public String quoteNumberQT;
    public ProxyModifySubscription withQuoteNumberQT(String quoteNumberQT) {
        this.quoteNumberQT = quoteNumberQT;
        return this;
    }
    
    /**
     * The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteType__QT")
    public String quoteTypeQT;
    public ProxyModifySubscription withQuoteTypeQT(String quoteTypeQT) {
        this.quoteTypeQT = quoteTypeQT;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
     * **Required**: If TermType is Termed **Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalSetting")
    public String renewalSetting;
    public ProxyModifySubscription withRenewalSetting(String renewalSetting) {
        this.renewalSetting = renewalSetting;
        return this;
    }
    
    /**
     *  The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. **Required**: If TermType is Termed.
     * **Character limit**: 20 **Values**: one of the following:
     * 
     * - leave null to default to `0`
     * - any number
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalTerm")
    public Integer renewalTerm;
    public ProxyModifySubscription withRenewalTerm(Integer renewalTerm) {
        this.renewalTerm = renewalTerm;
        return this;
    }
    
    /**
     *  The period type for the subscription renewal term.
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * **Note**:
     * 
     * - This field is used with the RenewalTerm field to specify the subscription renewal term.
     * - This field can be updated when Status is `Draft`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalTermPeriodType")
    public String renewalTermPeriodType;
    public ProxyModifySubscription withRenewalTermPeriodType(String renewalTermPeriodType) {
        this.renewalTermPeriodType = renewalTermPeriodType;
        return this;
    }
    
    /**
     * The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SalesOrder__NS")
    public String salesOrderNS;
    public ProxyModifySubscription withSalesOrderNS(String salesOrderNS) {
        this.salesOrderNS = salesOrderNS;
        return this;
    }
    
    /**
     * The date when the subscription is activated. 
     * 
     * **Character limit**: 29
     * 
     * This field can be updated when **Status** is `Pending Activation`.
     * 
     * **Note**: This field is only required in the Subscribe call if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Service_Activation_of_Orders.3F) setting is set to `Yes`. If this setting is set to `Yes`:
     * 
     *  * If the `ContractAcceptanceDate` field is required, you must set this field, `ContractAcceptanceDate`, and `ContractEffectiveDate` fields in the Subscribe call to activate a subscription.
     *  * If the `ContractAcceptanceDate` field is not required, you must set both this field and the `ContractEffectiveDate` field in the Subscribe call to activate a subscription. If you only set a valid date in the `ContractEffectiveDate` field, the Subscribe call still returns success, but the subscription is in `Pending Activation` status.
     * 
     * This field can also be updated when the subscription is still on version one (has not been amended before) and the [Allow update Subscription trigger dates?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Allow_update_Subscription_trigger_dates.3F) setting in Billing Settings is set to "Yes". 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ServiceActivationDate")
    public LocalDate serviceActivationDate;
    public ProxyModifySubscription withServiceActivationDate(LocalDate serviceActivationDate) {
        this.serviceActivationDate = serviceActivationDate;
        return this;
    }
    
    /**
     *  The status of the subscription.
     * **Character limit**: 17 **Values**: automatically generated **Possible values**: one of the following:
     * 
     * - `Draft`
     * - `Pending Activation`
     * - `Pending Acceptance`
     * - `Active`
     * - `Cancelled`
     * - `Expired`
     * - `Suspended` (This value is in **Limited Availability**.)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public ProxyModifySubscription withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyModifySubscription withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date.
     * **Character limit**: 29 **Version notes**: -- 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TermStartDate")
    public LocalDate termStartDate;
    public ProxyModifySubscription withTermStartDate(LocalDate termStartDate) {
        this.termStartDate = termStartDate;
        return this;
    }
    
    /**
     *  This field can be updated when **Status** is `Draft`. Indicates if a subscription is termed or evergreen.
     * **Character limit**: 9 **Values**: `TERMED`, `EVERGREEN` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TermType")
    public String termType;
    public ProxyModifySubscription withTermType(String termType) {
        this.termType = termType;
        return this;
    }
    
    /**
     *  The version number of the subscription.
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Version")
    public Integer version;
    public ProxyModifySubscription withVersion(Integer version) {
        this.version = version;
        return this;
    }
    
}
