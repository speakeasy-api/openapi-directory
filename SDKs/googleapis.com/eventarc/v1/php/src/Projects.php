<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new ChannelConnection in a particular project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateResponse
     */
	public function eventarcProjectsLocationsChannelConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/channelConnections', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelConnectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List channel connections.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListResponse
     */
	public function eventarcProjectsLocationsChannelConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/channelConnections', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListChannelConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new channel in a particular project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateResponse
     */
	public function eventarcProjectsLocationsChannelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/channels', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List channels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListResponse
     */
	public function eventarcProjectsLocationsChannelsList(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/channels', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsChannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListResponse
     */
	public function eventarcProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelResponse
     */
	public function eventarcProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListResponse
     */
	public function eventarcProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List providers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListResponse
     */
	public function eventarcProjectsLocationsProvidersList(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/providers', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsProvidersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProvidersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProvidersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new trigger in a particular project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateResponse
     */
	public function eventarcProjectsLocationsTriggersCreate(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/triggers', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "triggerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a single trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteResponse
     */
	public function eventarcProjectsLocationsTriggersDelete(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a single trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetResponse
     */
	public function eventarcProjectsLocationsTriggersGet(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Trigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyResponse
     */
	public function eventarcProjectsLocationsTriggersGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List triggers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListResponse
     */
	public function eventarcProjectsLocationsTriggersList(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/triggers', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTriggersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTriggersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a single trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchResponse
     */
	public function eventarcProjectsLocationsTriggersPatch(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "triggerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyResponse
     */
	public function eventarcProjectsLocationsTriggersSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsResponse
     */
	public function eventarcProjectsLocationsTriggersTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EventarcProjectsLocationsTriggersTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}