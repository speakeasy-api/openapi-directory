/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint.
 */
export class Tags {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Tag
   *
   * @remarks
   * This endpoint creates a new Tag in a specified Product
   * identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
   */
  createTag(
    req: operations.CreateTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createTagModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTagResponse =
        new operations.CreateTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.tagModelHaljson = utils.objectToClass(
              httpRes?.data,
              shared.TagModelHaljson
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagModel = utils.objectToClass(httpRes?.data, shared.TagModel);
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete Tag
   *
   * @remarks
   * This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
   */
  deleteTag(
    req: operations.DeleteTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/tags/{tagId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTagResponse =
        new operations.DeleteTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List Settings by Tag
   *
   * @remarks
   * This endpoint returns the list of the Settings that
   * has the specified Tag, identified by the `tagId` parameter.
   */
  getSettingsByTag(
    req: operations.GetSettingsByTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsByTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSettingsByTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/tags/{tagId}/settings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsByTagResponse =
        new operations.GetSettingsByTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.settingModelHaljsons = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.settingModelHaljsons = utils.objectToClass(
              httpRes?.data,
              shared.SettingModelHaljson,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.settingModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.settingModels = utils.objectToClass(
              httpRes?.data,
              shared.SettingModel,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Tag
   *
   * @remarks
   * This endpoint returns the metadata of a Tag
   * identified by the `tagId`.
   */
  getTag(
    req: operations.GetTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/tags/{tagId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTagResponse = new operations.GetTagResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.tagModelHaljson = utils.objectToClass(
              httpRes?.data,
              shared.TagModelHaljson
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagModel = utils.objectToClass(httpRes?.data, shared.TagModel);
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List Tags
   *
   * @remarks
   * This endpoint returns the list of the Tags in a
   * specified Product, identified by the `productId` parameter.
   */
  getTags(
    req: operations.GetTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTagsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/products/{productId}/tags",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTagsResponse = new operations.GetTagsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.tagModelHaljsons = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagModelHaljsons = utils.objectToClass(
              httpRes?.data,
              shared.TagModelHaljson,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagModels = utils.objectToClass(
              httpRes?.data,
              shared.TagModel,
              resFieldDepth
            );
          }
          break;
        case [401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update Tag
   *
   * @remarks
   * This endpoint updates a Tag identified by the `tagId` parameter.
   */
  updateTag(
    req: operations.UpdateTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/tags/{tagId}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateTagModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTagResponse =
        new operations.UpdateTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.tagModelHaljson = utils.objectToClass(
              httpRes?.data,
              shared.TagModelHaljson
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagModel = utils.objectToClass(httpRes?.data, shared.TagModel);
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
