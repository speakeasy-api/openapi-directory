"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configfile as shared_configfile
from ..shared import importfile as shared_importfile
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Manifest:
    r"""Successful response"""
    
    config: Optional[shared_configfile.ConfigFile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config'), 'exclude': lambda f: f is None }})  
    expanded_config: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expandedConfig'), 'exclude': lambda f: f is None }})
    r"""Output only. The fully-expanded configuration file, including any templates and references."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    imports: Optional[list[shared_importfile.ImportFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imports'), 'exclude': lambda f: f is None }})
    r"""Output only. The imported files for this manifest."""  
    insert_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Creation timestamp in RFC3339 text format."""  
    layout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""Output only. The YAML layout for this manifest."""  
    manifest_size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manifestSizeBytes'), 'exclude': lambda f: f is None }})
    r"""Output only. The computed size of the fully expanded manifest."""  
    manifest_size_limit_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manifestSizeLimitBytes'), 'exclude': lambda f: f is None }})
    r"""Output only. The size limit for expanded manifests in the project."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the manifest."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""Output only. Self link for the manifest."""  
    