// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListStudioSessionMappingsQueryParams struct {
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
}

// ListStudioSessionMappingsXAmzTargetEnum
type ListStudioSessionMappingsXAmzTargetEnum string

const (
	ListStudioSessionMappingsXAmzTargetEnumElasticMapReduceListStudioSessionMappings ListStudioSessionMappingsXAmzTargetEnum = "ElasticMapReduce.ListStudioSessionMappings"
)

func (e *ListStudioSessionMappingsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ElasticMapReduce.ListStudioSessionMappings":
		*e = ListStudioSessionMappingsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListStudioSessionMappingsXAmzTargetEnum: %s", s)
	}
}

type ListStudioSessionMappingsHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListStudioSessionMappingsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListStudioSessionMappingsRequest struct {
	QueryParams ListStudioSessionMappingsQueryParams
	Headers     ListStudioSessionMappingsHeaders
	Request     shared.ListStudioSessionMappingsInput `request:"mediaType=application/json"`
}

type ListStudioSessionMappingsResponse struct {
	ContentType string
	// InternalServerError
	InternalServerError interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListStudioSessionMappingsOutput *shared.ListStudioSessionMappingsOutput
	StatusCode                      int
	RawResponse                     *http.Response
}
