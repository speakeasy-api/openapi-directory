"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetChatMessagesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetChatMessagesRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})  
    date_: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date', 'style': 'form', 'explode': True }})
    r"""The query date for which you would like to get the chat messages."""  
    include_deleted_and_edited_message: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_deleted_and_edited_message', 'style': 'form', 'explode': True }})
    r"""**Optional** <br>
    Set the value of this field to `true` to include edited and deleted messages in the response.
    """  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned with a single API call."""  
    to_channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to_channel', 'style': 'form', 'explode': True }})
    r"""The channel Id of a channel inside which the current user had chat conversations. Messages that were sent and/or received between the user and the channel is displayed.
    
    Note: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel.
    """  
    to_contact: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to_contact', 'style': 'form', 'explode': True }})
    r"""The email address of a chat contact with whom the current user chatted. Messages that were sent and/or received between the user and the contact is displayed.
    
    Note: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel.
    """  
    
class GetChatMessages200ApplicationXMLMessagesStatusEnum(str, Enum):
    r"""This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
    
    This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
    """
    DELETED = 'Deleted'
    EDITED = 'Edited'
    NORMAL = 'Normal'


@dataclasses.dataclass
class GetChatMessages200ApplicationXMLMessages:
    
    date_time: Optional[str] = dataclasses.field(default=None)
    r"""The date-time at which the message was sent."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Message ID: Unique Identifier of the message."""  
    message: Optional[str] = dataclasses.field(default=None)
    r"""The message content."""  
    reply_main_message_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of a reply. This field will only be returned if the message is a reply message."""  
    reply_main_message_timestamp: Optional[int] = dataclasses.field(default=None)
    r"""Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
    
    The value of this field will be in **long** format(int64).
    """  
    sender: Optional[str] = dataclasses.field(default=None)
    r"""The email address of the sender of the message."""  
    status: Optional[GetChatMessages200ApplicationXMLMessagesStatusEnum] = dataclasses.field(default=None)
    r"""This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
    
    This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
    """  
    timestamp: Optional[int] = dataclasses.field(default=None)
    r"""The timestamp of the message in microseconds."""  
    

@dataclasses.dataclass
class GetChatMessages200ApplicationXML:
    r"""Chat message object."""
    
    date_: Optional[date] = dataclasses.field(default=None)
    r"""The date provided in the query parameter. If a date is not provided, the default value is the **current date**."""  
    messages: Optional[list[GetChatMessages200ApplicationXMLMessages]] = dataclasses.field(default=None)
    r"""List of message(s)."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call."""  
    
class GetChatMessages200ApplicationJSONMessagesStatusEnum(str, Enum):
    r"""This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
    
    This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
    """
    DELETED = 'Deleted'
    EDITED = 'Edited'
    NORMAL = 'Normal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetChatMessages200ApplicationJSONMessages:
    
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'exclude': lambda f: f is None }})
    r"""The date-time at which the message was sent."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Message ID: Unique Identifier of the message."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The message content."""  
    reply_main_message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_main_message_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of a reply. This field will only be returned if the message is a reply message."""  
    reply_main_message_timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_main_message_timestamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
    
    The value of this field will be in **long** format(int64).
    """  
    sender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sender'), 'exclude': lambda f: f is None }})
    r"""The email address of the sender of the message."""  
    status: Optional[GetChatMessages200ApplicationJSONMessagesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
    
    This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
    """  
    timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The timestamp of the message in microseconds."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetChatMessages200ApplicationJSON:
    r"""Chat message object."""
    
    date_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date provided in the query parameter. If a date is not provided, the default value is the **current date**."""  
    messages: Optional[list[GetChatMessages200ApplicationJSONMessages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""List of message(s)."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call."""  
    

@dataclasses.dataclass
class GetChatMessagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_chat_messages_200_application_json_object: Optional[GetChatMessages200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:**`200`<br>
    List of chat messages returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    