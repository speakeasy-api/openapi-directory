/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Policy - A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
 */
public class Policy {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternativeNameServerConfig")
    public PolicyAlternativeNameServerConfig alternativeNameServerConfig;

    public Policy withAlternativeNameServerConfig(PolicyAlternativeNameServerConfig alternativeNameServerConfig) {
        this.alternativeNameServerConfig = alternativeNameServerConfig;
        return this;
    }
    
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Policy withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableInboundForwarding")
    public Boolean enableInboundForwarding;

    public Policy withEnableInboundForwarding(Boolean enableInboundForwarding) {
        this.enableInboundForwarding = enableInboundForwarding;
        return this;
    }
    
    /**
     * Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableLogging")
    public Boolean enableLogging;

    public Policy withEnableLogging(Boolean enableLogging) {
        this.enableLogging = enableLogging;
        return this;
    }
    
    /**
     * Unique identifier for the resource; defined by the server (output only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Policy withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Policy withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * User-assigned name for this policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Policy withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * List of network names specifying networks to which this policy is applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networks")
    public PolicyNetwork[] networks;

    public Policy withNetworks(PolicyNetwork[] networks) {
        this.networks = networks;
        return this;
    }
    
    public Policy(){}
}
