// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EditAlbumAlt1Security struct {
	Oauth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// EditAlbumAlt1RequestBodyLayoutEnum - The type of layout for presenting the album.
type EditAlbumAlt1RequestBodyLayoutEnum string

const (
	EditAlbumAlt1RequestBodyLayoutEnumGrid   EditAlbumAlt1RequestBodyLayoutEnum = "grid"
	EditAlbumAlt1RequestBodyLayoutEnumPlayer EditAlbumAlt1RequestBodyLayoutEnum = "player"
)

func (e *EditAlbumAlt1RequestBodyLayoutEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "grid":
		fallthrough
	case "player":
		*e = EditAlbumAlt1RequestBodyLayoutEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumAlt1RequestBodyLayoutEnum: %s", s)
	}
}

// EditAlbumAlt1RequestBodyPrivacyEnum - The privacy level of the album.
type EditAlbumAlt1RequestBodyPrivacyEnum string

const (
	EditAlbumAlt1RequestBodyPrivacyEnumAnybody   EditAlbumAlt1RequestBodyPrivacyEnum = "anybody"
	EditAlbumAlt1RequestBodyPrivacyEnumEmbedOnly EditAlbumAlt1RequestBodyPrivacyEnum = "embed_only"
	EditAlbumAlt1RequestBodyPrivacyEnumPassword  EditAlbumAlt1RequestBodyPrivacyEnum = "password"
)

func (e *EditAlbumAlt1RequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "embed_only":
		fallthrough
	case "password":
		*e = EditAlbumAlt1RequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumAlt1RequestBodyPrivacyEnum: %s", s)
	}
}

// EditAlbumAlt1RequestBodySortEnum - The default sort order of the album's videos.
type EditAlbumAlt1RequestBodySortEnum string

const (
	EditAlbumAlt1RequestBodySortEnumAddedFirst   EditAlbumAlt1RequestBodySortEnum = "added_first"
	EditAlbumAlt1RequestBodySortEnumAddedLast    EditAlbumAlt1RequestBodySortEnum = "added_last"
	EditAlbumAlt1RequestBodySortEnumAlphabetical EditAlbumAlt1RequestBodySortEnum = "alphabetical"
	EditAlbumAlt1RequestBodySortEnumArranged     EditAlbumAlt1RequestBodySortEnum = "arranged"
	EditAlbumAlt1RequestBodySortEnumComments     EditAlbumAlt1RequestBodySortEnum = "comments"
	EditAlbumAlt1RequestBodySortEnumLikes        EditAlbumAlt1RequestBodySortEnum = "likes"
	EditAlbumAlt1RequestBodySortEnumNewest       EditAlbumAlt1RequestBodySortEnum = "newest"
	EditAlbumAlt1RequestBodySortEnumOldest       EditAlbumAlt1RequestBodySortEnum = "oldest"
	EditAlbumAlt1RequestBodySortEnumPlays        EditAlbumAlt1RequestBodySortEnum = "plays"
)

func (e *EditAlbumAlt1RequestBodySortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "added_first":
		fallthrough
	case "added_last":
		fallthrough
	case "alphabetical":
		fallthrough
	case "arranged":
		fallthrough
	case "comments":
		fallthrough
	case "likes":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		fallthrough
	case "plays":
		*e = EditAlbumAlt1RequestBodySortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumAlt1RequestBodySortEnum: %s", s)
	}
}

// EditAlbumAlt1RequestBodyThemeEnum - The color theme of the album.
type EditAlbumAlt1RequestBodyThemeEnum string

const (
	EditAlbumAlt1RequestBodyThemeEnumDark     EditAlbumAlt1RequestBodyThemeEnum = "dark"
	EditAlbumAlt1RequestBodyThemeEnumStandard EditAlbumAlt1RequestBodyThemeEnum = "standard"
)

func (e *EditAlbumAlt1RequestBodyThemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark":
		fallthrough
	case "standard":
		*e = EditAlbumAlt1RequestBodyThemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAlbumAlt1RequestBodyThemeEnum: %s", s)
	}
}

type EditAlbumAlt1RequestBody struct {
	// The hexadecimal code for the color of the player buttons.
	BrandColor *string `json:"brand_color,omitempty"`
	// The description of the album.
	Description *string `json:"description,omitempty"`
	// The custom domain a user has selected for their album.
	Domain *string `json:"domain,omitempty"`
	// Whether to hide Vimeo navigation when displaying the album.
	HideNav *bool `json:"hide_nav,omitempty"`
	// The type of layout for presenting the album.
	Layout *EditAlbumAlt1RequestBodyLayoutEnum `json:"layout,omitempty"`
	// The name of the album.
	Name *string `json:"name,omitempty"`
	// The album's password. Required only if **privacy** is `password`.
	Password *string `json:"password,omitempty"`
	// The privacy level of the album.
	Privacy *EditAlbumAlt1RequestBodyPrivacyEnum `json:"privacy,omitempty"`
	// Whether album videos should use the review mode URL.
	ReviewMode *bool `json:"review_mode,omitempty"`
	// The default sort order of the album's videos.
	Sort *EditAlbumAlt1RequestBodySortEnum `json:"sort,omitempty"`
	// The color theme of the album.
	Theme *EditAlbumAlt1RequestBodyThemeEnum `json:"theme,omitempty"`
	// The custom Vimeo URL a user has selected for their album.
	URL *string `json:"url,omitempty"`
	// Whether the user has opted in to use a custom domain for their album.
	UseCustomDomain *bool `json:"use_custom_domain,omitempty"`
}

type EditAlbumAlt1Request struct {
	RequestBody *EditAlbumAlt1RequestBody `request:"mediaType=application/vnd.vimeo.album+json"`
	// The ID of the album.
	AlbumID float64 `pathParam:"style=simple,explode=false,name=album_id"`
}

type EditAlbumAlt1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The album was edited.
	Album *shared.Album
	// A parameter is invalid.
	LegacyError *shared.LegacyError
}
