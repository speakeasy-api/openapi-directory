// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IoFilterStatusEnum - Status of Rubrik Io Filter on Cluster.
type IoFilterStatusEnum string

const (
	IoFilterStatusEnumUninstalled         IoFilterStatusEnum = "Uninstalled"
	IoFilterStatusEnumInstallInProgress   IoFilterStatusEnum = "InstallInProgress"
	IoFilterStatusEnumUpgradeInProgress   IoFilterStatusEnum = "UpgradeInProgress"
	IoFilterStatusEnumUninstallInProgress IoFilterStatusEnum = "UninstallInProgress"
	IoFilterStatusEnumOutOfDate           IoFilterStatusEnum = "OutOfDate"
	IoFilterStatusEnumInstalled           IoFilterStatusEnum = "Installed"
	IoFilterStatusEnumInstallError        IoFilterStatusEnum = "InstallError"
	IoFilterStatusEnumUpgradeError        IoFilterStatusEnum = "UpgradeError"
	IoFilterStatusEnumUninstallError      IoFilterStatusEnum = "UninstallError"
	IoFilterStatusEnumUnknown             IoFilterStatusEnum = "Unknown"
	IoFilterStatusEnumInconsistent        IoFilterStatusEnum = "Inconsistent"
	IoFilterStatusEnumUnsupported         IoFilterStatusEnum = "Unsupported"
	IoFilterStatusEnumUnsupportedByRubrik IoFilterStatusEnum = "UnsupportedByRubrik"
	IoFilterStatusEnumUnsupportedByVmware IoFilterStatusEnum = "UnsupportedByVmware"
	IoFilterStatusEnumUnavailable         IoFilterStatusEnum = "Unavailable"
)

func (e IoFilterStatusEnum) ToPointer() *IoFilterStatusEnum {
	return &e
}

func (e *IoFilterStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Uninstalled":
		fallthrough
	case "InstallInProgress":
		fallthrough
	case "UpgradeInProgress":
		fallthrough
	case "UninstallInProgress":
		fallthrough
	case "OutOfDate":
		fallthrough
	case "Installed":
		fallthrough
	case "InstallError":
		fallthrough
	case "UpgradeError":
		fallthrough
	case "UninstallError":
		fallthrough
	case "Unknown":
		fallthrough
	case "Inconsistent":
		fallthrough
	case "Unsupported":
		fallthrough
	case "UnsupportedByRubrik":
		fallthrough
	case "UnsupportedByVmware":
		fallthrough
	case "Unavailable":
		*e = IoFilterStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IoFilterStatusEnum: %v", v)
	}
}
