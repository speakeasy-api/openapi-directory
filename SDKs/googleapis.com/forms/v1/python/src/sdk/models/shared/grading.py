"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import correctanswers as shared_correctanswers
from ..shared import feedback as shared_feedback
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Grading:
    r"""Grading for a single question"""
    
    correct_answers: Optional[shared_correctanswers.CorrectAnswers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correctAnswers'), 'exclude': lambda f: f is None }})
    r"""The answer key for a question."""  
    general_feedback: Optional[shared_feedback.Feedback] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalFeedback'), 'exclude': lambda f: f is None }})
    r"""Feedback for a respondent about their response to a question."""  
    point_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointValue'), 'exclude': lambda f: f is None }})
    r"""Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative."""  
    when_right: Optional[shared_feedback.Feedback] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whenRight'), 'exclude': lambda f: f is None }})
    r"""Feedback for a respondent about their response to a question."""  
    when_wrong: Optional[shared_feedback.Feedback] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whenWrong'), 'exclude': lambda f: f is None }})
    r"""Feedback for a respondent about their response to a question."""  
    