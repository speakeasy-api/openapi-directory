/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class OrderLine {
    /**
     * URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).
     *  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    public String imageUrl;
    public OrderLine withImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
        return this;
    }
    
    /**
     * Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_data")
    public String merchantData;
    public OrderLine withMerchantData(String merchantData) {
        this.merchantData = merchantData;
        return this;
    }
    
    /**
     * Descriptive name of the order line item.
     */
    @JsonProperty("name")
    public String name;
    public OrderLine withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_identifiers")
    public ProductIdentifiers productIdentifiers;
    public OrderLine withProductIdentifiers(ProductIdentifiers productIdentifiers) {
        this.productIdentifiers = productIdentifiers;
        return this;
    }
    
    /**
     * URL to the product in the merchant\u2019s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_url")
    public String productUrl;
    public OrderLine withProductUrl(String productUrl) {
        this.productUrl = productUrl;
        return this;
    }
    
    /**
     * Quantity of the order line item. Must be a non-negative number.
     */
    @JsonProperty("quantity")
    public Long quantity;
    public OrderLine withQuantity(Long quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity_unit")
    public String quantityUnit;
    public OrderLine withQuantityUnit(String quantityUnit) {
        this.quantityUnit = quantityUnit;
        return this;
    }
    
    /**
     * Client facing article number, SKU or similar. Max length is 256 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;
    public OrderLine withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    public Subscription subscription;
    public OrderLine withSubscription(Subscription subscription) {
        this.subscription = subscription;
        return this;
    }
    
    /**
     * Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_rate")
    public Long taxRate;
    public OrderLine withTaxRate(Long taxRate) {
        this.taxRate = taxRate;
        return this;
    }
    
    /**
     * Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros
     * Value = (quantity x unit_price) - total_discount_amount. 
     * (max value: 100000000)
     */
    @JsonProperty("total_amount")
    public Long totalAmount;
    public OrderLine withTotalAmount(Long totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Non-negative minor units. Includes tax. Eg: 500=5 euros
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount_amount")
    public Long totalDiscountAmount;
    public OrderLine withTotalDiscountAmount(Long totalDiscountAmount) {
        this.totalDiscountAmount = totalDiscountAmount;
        return this;
    }
    
    /**
     * Total tax amount of the order line. Must be within \u00b11 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_amount")
    public Long totalTaxAmount;
    public OrderLine withTotalTaxAmount(Long totalTaxAmount) {
        this.totalTaxAmount = totalTaxAmount;
        return this;
    }
    
    /**
     * Type of the order line item. The possible values are:
     * 
     * physical
     * discount
     * shipping_fee
     * sales_tax
     * digital
     * gift_card
     * store_credit
     * surcharge
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public OrderLine withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
     */
    @JsonProperty("unit_price")
    public Long unitPrice;
    public OrderLine withUnitPrice(Long unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }
    
}
