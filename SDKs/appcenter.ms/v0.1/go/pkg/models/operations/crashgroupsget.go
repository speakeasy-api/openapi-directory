// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type CrashGroupsGetSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type CrashGroupsGetPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// id of a specific group
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type CrashGroupsGetRequest struct {
	PathParams CrashGroupsGetPathParams
	Security   CrashGroupsGetSecurity
}

// CrashGroupsGetDefaultApplicationJSON - Error
type CrashGroupsGetDefaultApplicationJSON struct {
	Message string `json:"message"`
}

// CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum - programming language of the frame
type CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum string

const (
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumJavaScript   CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "JavaScript"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumCSharp       CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "CSharp"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumObjectiveC   CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "Objective-C"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumObjectiveCpp CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "Objective-Cpp"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumCpp          CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "Cpp"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumC            CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "C"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumSwift        CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "Swift"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumJava         CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "Java"
	CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnumUnknown      CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum = "Unknown"
)

func (e *CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum: %s", s)
	}
}

// CrashGroupsGet200ApplicationJSONReasonFrame - frame belonging to the reason of the crash
type CrashGroupsGet200ApplicationJSONReasonFrame struct {
	// this line isn't from any framework
	AppCode *bool `json:"app_code,omitempty"`
	// is a class method
	ClassMethod *bool `json:"class_method,omitempty"`
	// name of the class
	ClassName *string `json:"class_name,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"code_formatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"code_raw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exception_type,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"framework_name,omitempty"`
	// programming language of the frame
	Language *CrashGroupsGet200ApplicationJSONReasonFrameLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"method_params,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"os_exception_type,omitempty"`
}

type CrashGroupsGet200ApplicationJSONStatusEnum string

const (
	CrashGroupsGet200ApplicationJSONStatusEnumOpen    CrashGroupsGet200ApplicationJSONStatusEnum = "open"
	CrashGroupsGet200ApplicationJSONStatusEnumClosed  CrashGroupsGet200ApplicationJSONStatusEnum = "closed"
	CrashGroupsGet200ApplicationJSONStatusEnumIgnored CrashGroupsGet200ApplicationJSONStatusEnum = "ignored"
)

func (e *CrashGroupsGet200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = CrashGroupsGet200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashGroupsGet200ApplicationJSONStatusEnum: %s", s)
	}
}

// CrashGroupsGet200ApplicationJSON - Success
type CrashGroupsGet200ApplicationJSON struct {
	Annotation   string  `json:"annotation"`
	AppVersion   string  `json:"app_version"`
	Build        string  `json:"build"`
	Count        int64   `json:"count"`
	CrashGroupID string  `json:"crash_group_id"`
	CrashReason  string  `json:"crash_reason"`
	DisplayID    string  `json:"display_id"`
	Exception    *string `json:"exception,omitempty"`
	// Crash or handled exception
	Fatal           bool      `json:"fatal"`
	FirstOccurrence time.Time `json:"first_occurrence"`
	ImpactedUsers   *int64    `json:"impacted_users,omitempty"`
	LastOccurrence  time.Time `json:"last_occurrence"`
	NewCrashGroupID string    `json:"new_crash_group_id"`
	// frame belonging to the reason of the crash
	ReasonFrame *CrashGroupsGet200ApplicationJSONReasonFrame `json:"reason_frame,omitempty"`
	Status      CrashGroupsGet200ApplicationJSONStatusEnum   `json:"status"`
}

type CrashGroupsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	CrashGroupsGet200ApplicationJSONObject *CrashGroupsGet200ApplicationJSON
	// Error
	CrashGroupsGetDefaultApplicationJSONObject *CrashGroupsGetDefaultApplicationJSON
}
