"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applyjobdetails as shared_applyjobdetails
from ..shared import convertjobdetails as shared_convertjobdetails
from ..shared import importrulesjobdetails as shared_importrulesjobdetails
from ..shared import seedjobdetails as shared_seedjobdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BackgroundJobLogEntryCompletionStateEnum(str, Enum):
    r"""Job completion state, i.e. the final state after the job completed."""
    JOB_COMPLETION_STATE_UNSPECIFIED = 'JOB_COMPLETION_STATE_UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'

class BackgroundJobLogEntryJobTypeEnum(str, Enum):
    r"""The type of job that was executed."""
    BACKGROUND_JOB_TYPE_UNSPECIFIED = 'BACKGROUND_JOB_TYPE_UNSPECIFIED'
    BACKGROUND_JOB_TYPE_SOURCE_SEED = 'BACKGROUND_JOB_TYPE_SOURCE_SEED'
    BACKGROUND_JOB_TYPE_CONVERT = 'BACKGROUND_JOB_TYPE_CONVERT'
    BACKGROUND_JOB_TYPE_APPLY_DESTINATION = 'BACKGROUND_JOB_TYPE_APPLY_DESTINATION'
    BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE = 'BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackgroundJobLogEntry:
    r"""Execution log of a background job."""
    
    apply_job_details: Optional[shared_applyjobdetails.ApplyJobDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applyJobDetails'), 'exclude': lambda f: f is None }})
    r"""Details regarding an Apply background job."""  
    completion_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completionComment'), 'exclude': lambda f: f is None }})
    r"""Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information."""  
    completion_state: Optional[BackgroundJobLogEntryCompletionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completionState'), 'exclude': lambda f: f is None }})
    r"""Job completion state, i.e. the final state after the job completed."""  
    convert_job_details: Optional[shared_convertjobdetails.ConvertJobDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('convertJobDetails'), 'exclude': lambda f: f is None }})
    r"""Details regarding a Convert background job."""  
    finish_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finishTime'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the background job was finished."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The background job log entry ID."""  
    import_rules_job_details: Optional[shared_importrulesjobdetails.ImportRulesJobDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importRulesJobDetails'), 'exclude': lambda f: f is None }})
    r"""Details regarding an Import Rules background job."""  
    job_type: Optional[BackgroundJobLogEntryJobTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobType'), 'exclude': lambda f: f is None }})
    r"""The type of job that was executed."""  
    request_autocommit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestAutocommit'), 'exclude': lambda f: f is None }})
    r"""Whether the client requested the conversion workspace to be committed after a successful completion of the job."""  
    seed_job_details: Optional[shared_seedjobdetails.SeedJobDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seedJobDetails'), 'exclude': lambda f: f is None }})
    r"""Details regarding a Seed background job."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the background job was started."""  
    