"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import call_summaries_enum_processing_state_request_enum as shared_call_summaries_enum_processing_state_request_enum
from ..shared import call_summaries_enum_sort_by_enum as shared_call_summaries_enum_sort_by_enum
from ..shared import insights_v1_call_summaries as shared_insights_v1_call_summaries
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional

LIST_CALL_SUMMARIES_SERVERS = [
	"https://insights.twilio.com",
]


@dataclasses.dataclass
class ListCallSummariesSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class ListCallSummariesRequest:
    
    abnormal_session: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AbnormalSession', 'style': 'form', 'explode': True }})  
    branded: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Branded', 'style': 'form', 'explode': True }})  
    call_state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CallState', 'style': 'form', 'explode': True }})  
    call_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CallType', 'style': 'form', 'explode': True }})  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Direction', 'style': 'form', 'explode': True }})  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndTime', 'style': 'form', 'explode': True }})  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'From', 'style': 'form', 'explode': True }})  
    from_carrier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FromCarrier', 'style': 'form', 'explode': True }})  
    from_country_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FromCountryCode', 'style': 'form', 'explode': True }})  
    has_tag: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HasTag', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Page', 'style': 'form', 'explode': True }})
    r"""The page index. This value is simply for client state."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""The page token. This is provided by the API."""  
    processing_state: Optional[shared_call_summaries_enum_processing_state_request_enum.CallSummariesEnumProcessingStateRequestEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ProcessingState', 'style': 'form', 'explode': True }})  
    sort_by: Optional[shared_call_summaries_enum_sort_by_enum.CallSummariesEnumSortByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SortBy', 'style': 'form', 'explode': True }})  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StartTime', 'style': 'form', 'explode': True }})  
    subaccount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Subaccount', 'style': 'form', 'explode': True }})  
    to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'To', 'style': 'form', 'explode': True }})  
    to_carrier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ToCarrier', 'style': 'form', 'explode': True }})  
    to_country_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ToCountryCode', 'style': 'form', 'explode': True }})  
    verified_caller: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VerifiedCaller', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCallSummariesListCallSummariesResponseMeta:
    
    first_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_page_url'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    next_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_url'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    previous_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCallSummariesListCallSummariesResponse:
    r"""OK"""
    
    call_summaries: Optional[list[shared_insights_v1_call_summaries.InsightsV1CallSummaries]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_summaries'), 'exclude': lambda f: f is None }})  
    meta: Optional[ListCallSummariesListCallSummariesResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListCallSummariesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_call_summaries_response: Optional[ListCallSummariesListCallSummariesResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    