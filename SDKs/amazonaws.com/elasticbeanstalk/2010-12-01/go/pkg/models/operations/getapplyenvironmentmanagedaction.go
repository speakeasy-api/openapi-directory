// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETApplyEnvironmentManagedActionActionEnum
type GETApplyEnvironmentManagedActionActionEnum string

const (
	GETApplyEnvironmentManagedActionActionEnumApplyEnvironmentManagedAction GETApplyEnvironmentManagedActionActionEnum = "ApplyEnvironmentManagedAction"
)

func (e *GETApplyEnvironmentManagedActionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ApplyEnvironmentManagedAction":
		*e = GETApplyEnvironmentManagedActionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETApplyEnvironmentManagedActionActionEnum: %s", s)
	}
}

// GETApplyEnvironmentManagedActionVersionEnum
type GETApplyEnvironmentManagedActionVersionEnum string

const (
	GETApplyEnvironmentManagedActionVersionEnumTwoThousandAndTen1201 GETApplyEnvironmentManagedActionVersionEnum = "2010-12-01"
)

func (e *GETApplyEnvironmentManagedActionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = GETApplyEnvironmentManagedActionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETApplyEnvironmentManagedActionVersionEnum: %s", s)
	}
}

type GETApplyEnvironmentManagedActionRequest struct {
	Action GETApplyEnvironmentManagedActionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The action ID of the scheduled managed action to execute.
	ActionID string `queryParam:"style=form,explode=true,name=ActionId"`
	// The environment ID of the target environment.
	EnvironmentID *string `queryParam:"style=form,explode=true,name=EnvironmentId"`
	// The name of the target environment.
	EnvironmentName   *string                                     `queryParam:"style=form,explode=true,name=EnvironmentName"`
	Version           GETApplyEnvironmentManagedActionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETApplyEnvironmentManagedActionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
