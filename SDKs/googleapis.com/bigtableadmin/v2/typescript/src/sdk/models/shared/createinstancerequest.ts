/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ClusterInput } from "./cluster";
import { InstanceInput } from "./instance";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Request message for BigtableInstanceAdmin.CreateInstance.
 */
export class CreateInstanceRequestInput extends SpeakeasyBase {
  /**
   * Required. The clusters to be created within the instance, mapped by desired cluster ID, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`. Fields marked `OutputOnly` must be left blank.
   */
  @SpeakeasyMetadata({ elemType: ClusterInput })
  @Expose({ name: "clusters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ClusterInput> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ClusterInput);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  clusters?: Record<string, ClusterInput>;

  /**
   * A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  @Type(() => InstanceInput)
  instance?: InstanceInput;

  /**
   * Required. The ID to be used when referring to the new instance within its project, e.g., just `myinstance` rather than `projects/myproject/instances/myinstance`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceId" })
  instanceId?: string;

  /**
   * Required. The unique name of the project in which to create the new instance. Values are of the form `projects/{project}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent" })
  parent?: string;
}
