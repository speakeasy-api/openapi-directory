// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum string

const (
	HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnumOk HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum = "OK"
)

func (e HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum) ToPointer() *HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum {
	return &e
}

func (e *HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OK":
		*e = HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum: %v", v)
	}
}

type HIUSubscriptionNotificationAcknowledgmentAcknowledgement struct {
	EventID string                                                             `json:"eventId"`
	Status  HIUSubscriptionNotificationAcknowledgmentAcknowledgementStatusEnum `json:"status"`
}

type HIUSubscriptionNotificationAcknowledgment struct {
	Acknowledgement *HIUSubscriptionNotificationAcknowledgmentAcknowledgement `json:"acknowledgement,omitempty"`
	Error           *Error                                                    `json:"error,omitempty"`
	// a nonce, unique for each HTTP request
	RequestID string           `json:"requestId"`
	Resp      RequestReference `json:"resp"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
