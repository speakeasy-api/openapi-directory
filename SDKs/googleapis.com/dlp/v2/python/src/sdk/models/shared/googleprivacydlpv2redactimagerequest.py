"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2bytecontentitem as shared_googleprivacydlpv2bytecontentitem
from ..shared import googleprivacydlpv2imageredactionconfig as shared_googleprivacydlpv2imageredactionconfig
from ..shared import googleprivacydlpv2inspectconfig as shared_googleprivacydlpv2inspectconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2RedactImageRequest:
    r"""Request to search for potentially sensitive info in an image and redact it by covering it with a colored rectangle."""
    
    byte_item: Optional[shared_googleprivacydlpv2bytecontentitem.GooglePrivacyDlpV2ByteContentItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byteItem'), 'exclude': lambda f: f is None }})
    r"""Container for bytes to inspect or redact."""  
    image_redaction_configs: Optional[list[shared_googleprivacydlpv2imageredactionconfig.GooglePrivacyDlpV2ImageRedactionConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageRedactionConfigs'), 'exclude': lambda f: f is None }})
    r"""The configuration for specifying what content to redact from images."""  
    include_findings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeFindings'), 'exclude': lambda f: f is None }})
    r"""Whether the response should include findings along with the redacted image."""  
    inspect_config: Optional[shared_googleprivacydlpv2inspectconfig.GooglePrivacyDlpV2InspectConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationId'), 'exclude': lambda f: f is None }})
    r"""Deprecated. This field has no effect."""  
    