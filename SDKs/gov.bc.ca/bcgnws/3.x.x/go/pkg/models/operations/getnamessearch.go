// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesSearchEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesSearchEmbedEnum int64

const (
	GetNamesSearchEmbedEnumZero GetNamesSearchEmbedEnum = 0
	GetNamesSearchEmbedEnumOne  GetNamesSearchEmbedEnum = 1
)

func (e GetNamesSearchEmbedEnum) ToPointer() *GetNamesSearchEmbedEnum {
	return &e
}

func (e *GetNamesSearchEmbedEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesSearchEmbedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesSearchEmbedEnum: %v", v)
	}
}

// GetNamesSearchExactSpellingEnum - If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
type GetNamesSearchExactSpellingEnum int64

const (
	GetNamesSearchExactSpellingEnumZero GetNamesSearchExactSpellingEnum = 0
	GetNamesSearchExactSpellingEnumOne  GetNamesSearchExactSpellingEnum = 1
)

func (e GetNamesSearchExactSpellingEnum) ToPointer() *GetNamesSearchExactSpellingEnum {
	return &e
}

func (e *GetNamesSearchExactSpellingEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesSearchExactSpellingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesSearchExactSpellingEnum: %v", v)
	}
}

// GetNamesSearchOutputFormatEnum - The format of the output.
type GetNamesSearchOutputFormatEnum string

const (
	GetNamesSearchOutputFormatEnumJSON GetNamesSearchOutputFormatEnum = "json"
	GetNamesSearchOutputFormatEnumXML  GetNamesSearchOutputFormatEnum = "xml"
	GetNamesSearchOutputFormatEnumKml  GetNamesSearchOutputFormatEnum = "kml"
	GetNamesSearchOutputFormatEnumCsv  GetNamesSearchOutputFormatEnum = "csv"
)

func (e GetNamesSearchOutputFormatEnum) ToPointer() *GetNamesSearchOutputFormatEnum {
	return &e
}

func (e *GetNamesSearchOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesSearchOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesSearchOutputFormatEnum: %v", v)
	}
}

// GetNamesSearchOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesSearchOutputSrsEnum int64

const (
	GetNamesSearchOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesSearchOutputSrsEnum = 4326
	GetNamesSearchOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesSearchOutputSrsEnum = 4269
	GetNamesSearchOutputSrsEnumThreeThousandAndFive                   GetNamesSearchOutputSrsEnum = 3005
	GetNamesSearchOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesSearchOutputSrsEnum = 3857
	GetNamesSearchOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesSearchOutputSrsEnum = 26907
	GetNamesSearchOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesSearchOutputSrsEnum = 26908
	GetNamesSearchOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesSearchOutputSrsEnum = 26909
	GetNamesSearchOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesSearchOutputSrsEnum = 26910
	GetNamesSearchOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesSearchOutputSrsEnum = 26911
)

func (e GetNamesSearchOutputSrsEnum) ToPointer() *GetNamesSearchOutputSrsEnum {
	return &e
}

func (e *GetNamesSearchOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 3857:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetNamesSearchOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesSearchOutputSrsEnum: %v", v)
	}
}

// GetNamesSearchOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesSearchOutputStyleEnum string

const (
	GetNamesSearchOutputStyleEnumSummary GetNamesSearchOutputStyleEnum = "summary"
	GetNamesSearchOutputStyleEnumDetail  GetNamesSearchOutputStyleEnum = "detail"
)

func (e GetNamesSearchOutputStyleEnum) ToPointer() *GetNamesSearchOutputStyleEnum {
	return &e
}

func (e *GetNamesSearchOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesSearchOutputStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesSearchOutputStyleEnum: %v", v)
	}
}

// GetNamesSearchSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesSearchSortByEnum string

const (
	GetNamesSearchSortByEnumRelevance    GetNamesSearchSortByEnum = "relevance"
	GetNamesSearchSortByEnumName         GetNamesSearchSortByEnum = "name"
	GetNamesSearchSortByEnumFeatureType  GetNamesSearchSortByEnum = "featureType"
	GetNamesSearchSortByEnumDecisionDate GetNamesSearchSortByEnum = "decisionDate"
)

func (e GetNamesSearchSortByEnum) ToPointer() *GetNamesSearchSortByEnum {
	return &e
}

func (e *GetNamesSearchSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relevance":
		fallthrough
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesSearchSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesSearchSortByEnum: %v", v)
	}
}

type GetNamesSearchRequest struct {
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesSearchEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
	ExactSpelling *GetNamesSearchExactSpellingEnum `queryParam:"style=form,explode=true,name=exactSpelling"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'
	Name string `queryParam:"style=form,explode=true,name=name"`
	// The format of the output.
	OutputFormat GetNamesSearchOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesSearchOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesSearchOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesSearchSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
}

type GetNamesSearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
