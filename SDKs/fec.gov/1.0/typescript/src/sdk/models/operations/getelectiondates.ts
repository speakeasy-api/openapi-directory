/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export enum GetElectionDatesOfficeSoughtEnum {
  H = "H",
  S = "S",
  P = "P",
}

export class GetElectionDatesRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * House district of the office sought, if applicable.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_district",
  })
  electionDistrict?: string[];

  /**
   *
   * @remarks
   * Party, if applicable.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_party",
  })
  electionParty?: string[];

  /**
   *
   * @remarks
   * State or territory of the office sought.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_state",
  })
  electionState?: string[];

  /**
   *
   * @remarks
   * Election type id
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_type_id",
  })
  electionTypeId?: string[];

  /**
   * Year of election
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_year",
  })
  electionYear?: string[];

  /**
   *
   * @remarks
   * The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_create_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxCreateDate?: Date;

  /**
   *
   * @remarks
   * The maximum date of election.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_election_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxElectionDate?: Date;

  /**
   *
   * @remarks
   * The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_primary_general_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxPrimaryGeneralDate?: Date;

  /**
   *
   * @remarks
   * The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_update_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxUpdateDate?: Date;

  /**
   *
   * @remarks
   * The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_create_date;dateTimeFormat=YYYY-MM-DD",
  })
  minCreateDate?: Date;

  /**
   *
   * @remarks
   * The minimum date of election.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_election_date;dateTimeFormat=YYYY-MM-DD",
  })
  minElectionDate?: Date;

  /**
   *
   * @remarks
   * The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_primary_general_date;dateTimeFormat=YYYY-MM-DD",
  })
  minPrimaryGeneralDate?: Date;

  /**
   *
   * @remarks
   * The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_update_date;dateTimeFormat=YYYY-MM-DD",
  })
  minUpdateDate?: Date;

  /**
   *
   * @remarks
   * House, Senate or presidential office.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=office_sought",
  })
  officeSought?: GetElectionDatesOfficeSoughtEnum[];

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;
}

export class GetElectionDatesDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => shared.OffsetInfo)
  pagination?: shared.OffsetInfo;

  @SpeakeasyMetadata({ elemType: shared.ElectionDate })
  @Expose({ name: "results" })
  @Type(() => shared.ElectionDate)
  results?: shared.ElectionDate[];
}

export class GetElectionDatesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  @SpeakeasyMetadata()
  getElectionDatesDefaultApplicationJSONObject?: GetElectionDatesDefaultApplicationJSON;
}
