<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TestCase - `TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TestCase
{
    /**
     * Test expectation.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TestCaseExpectationEnum $expectation
     */
	#[\JMS\Serializer\Annotation\SerializedName('expectation')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TestCaseExpectationEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestCaseExpectationEnum $expectation = null;
    
    /**
     * Specifies what should be included in the response.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TestCaseExpressionReportLevelEnum $expressionReportLevel
     */
	#[\JMS\Serializer\Annotation\SerializedName('expressionReportLevel')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TestCaseExpressionReportLevelEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestCaseExpressionReportLevelEnum $expressionReportLevel = null;
    
    /**
     * Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\FunctionMock> $functionMocks
     */
	#[\JMS\Serializer\Annotation\SerializedName('functionMocks')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\FunctionMock>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $functionMocks = null;
    
    /**
     * Specifies whether paths (such as request.path) are encoded and how.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TestCasePathEncodingEnum $pathEncoding
     */
	#[\JMS\Serializer\Annotation\SerializedName('pathEncoding')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TestCasePathEncodingEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestCasePathEncodingEnum $pathEncoding = null;
    
    /**
     * Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
     * 
     * @var mixed $request
     */
	#[\JMS\Serializer\Annotation\SerializedName('request')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $request = null;
    
    /**
     * Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
     * 
     * @var mixed $resource
     */
	#[\JMS\Serializer\Annotation\SerializedName('resource')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $resource = null;
    
	public function __construct()
	{
		$this->expectation = null;
		$this->expressionReportLevel = null;
		$this->functionMocks = null;
		$this->pathEncoding = null;
		$this->request = null;
		$this->resource = null;
	}
}
