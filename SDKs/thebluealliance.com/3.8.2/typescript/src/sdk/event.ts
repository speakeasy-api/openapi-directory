/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Calls that return event, or event-specific information.
 */
export class Event {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a list of events in the given district.
   */
  getDistrictEvents(
    req: operations.GetDistrictEventsRequest,
    security: operations.GetDistrictEventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsResponse =
        new operations.GetDistrictEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of event keys for events in the given district.
   */
  getDistrictEventsKeys(
    req: operations.GetDistrictEventsKeysRequest,
    security: operations.GetDistrictEventsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsKeysResponse =
        new operations.GetDistrictEventsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDistrictEventsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events in the given district.
   */
  getDistrictEventsSimple(
    req: operations.GetDistrictEventsSimpleRequest,
    security: operations.GetDistrictEventsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsSimpleResponse =
        new operations.GetDistrictEventsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets an Event.
   */
  getEvent(
    req: operations.GetEventRequest,
    security: operations.GetEventSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/event/{event_key}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventResponse = new operations.GetEventResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Elimination Alliances for the given Event.
   */
  getEventAlliances(
    req: operations.GetEventAlliancesRequest,
    security: operations.GetEventAlliancesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventAlliancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventAlliancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/alliances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventAlliancesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventAlliancesResponse =
        new operations.GetEventAlliancesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eliminationAlliances = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eliminationAlliances = utils.objectToClass(
              httpRes?.data,
              shared.EliminationAlliance,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of awards from the given event.
   */
  getEventAwards(
    req: operations.GetEventAwardsRequest,
    security: operations.GetEventAwardsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventAwardsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventAwardsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/awards",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventAwardsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventAwardsResponse =
        new operations.GetEventAwardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.awards = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.awards = utils.objectToClass(
              httpRes?.data,
              shared.Award,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of team rankings for the Event.
   */
  getEventDistrictPoints(
    req: operations.GetEventDistrictPointsRequest,
    security: operations.GetEventDistrictPointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventDistrictPointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventDistrictPointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/district_points",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventDistrictPointsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventDistrictPointsResponse =
        new operations.GetEventDistrictPointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventDistrictPoints = utils.objectToClass(
              httpRes?.data,
              shared.EventDistrictPoints
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a set of Event-specific insights for the given Event.
   */
  getEventInsights(
    req: operations.GetEventInsightsRequest,
    security: operations.GetEventInsightsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventInsightsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventInsightsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/insights",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventInsightsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventInsightsResponse =
        new operations.GetEventInsightsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventInsights = utils.objectToClass(
              httpRes?.data,
              shared.EventInsights
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
   * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
   * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
   */
  getEventMatchTimeseries(
    req: operations.GetEventMatchTimeseriesRequest,
    security: operations.GetEventMatchTimeseriesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchTimeseriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchTimeseriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches/timeseries",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchTimeseriesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchTimeseriesResponse =
        new operations.GetEventMatchTimeseriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventMatchTimeseries200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given event.
   */
  getEventMatches(
    req: operations.GetEventMatchesRequest,
    security: operations.GetEventMatchesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchesResponse =
        new operations.GetEventMatchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for the given event.
   */
  getEventMatchesKeys(
    req: operations.GetEventMatchesKeysRequest,
    security: operations.GetEventMatchesKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchesKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchesKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchesKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchesKeysResponse =
        new operations.GetEventMatchesKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventMatchesKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given event.
   */
  getEventMatchesSimple(
    req: operations.GetEventMatchesSimpleRequest,
    security: operations.GetEventMatchesSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchesSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchesSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchesSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchesSimpleResponse =
        new operations.GetEventMatchesSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matchSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matchSimples = utils.objectToClass(
              httpRes?.data,
              shared.MatchSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
   */
  getEventOPRs(
    req: operations.GetEventOPRsRequest,
    security: operations.GetEventOPRsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventOPRsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventOPRsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/oprs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventOPRsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventOPRsResponse =
        new operations.GetEventOPRsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventOPRs = utils.objectToClass(
              httpRes?.data,
              shared.EventOPRs
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
   */
  getEventPredictions(
    req: operations.GetEventPredictionsRequest,
    security: operations.GetEventPredictionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventPredictionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventPredictionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/predictions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventPredictionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventPredictionsResponse =
        new operations.GetEventPredictionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventPredictions = utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of team rankings for the Event.
   */
  getEventRankings(
    req: operations.GetEventRankingsRequest,
    security: operations.GetEventRankingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventRankingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventRankingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/rankings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventRankingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventRankingsResponse =
        new operations.GetEventRankingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventRanking = utils.objectToClass(
              httpRes?.data,
              shared.EventRanking
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form Event.
   */
  getEventSimple(
    req: operations.GetEventSimpleRequest,
    security: operations.GetEventSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventSimpleResponse =
        new operations.GetEventSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimple = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in the given event.
   */
  getEventTeams(
    req: operations.GetEventTeamsRequest,
    security: operations.GetEventTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsResponse =
        new operations.GetEventTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` keys that competed in the given event.
   */
  getEventTeamsKeys(
    req: operations.GetEventTeamsKeysRequest,
    security: operations.GetEventTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsKeysResponse =
        new operations.GetEventTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTeamsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of `Team` objects that competed in the given event.
   */
  getEventTeamsSimple(
    req: operations.GetEventTeamsSimpleRequest,
    security: operations.GetEventTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsSimpleResponse =
        new operations.GetEventTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a key-value list of the event statuses for teams competing at the given event.
   */
  getEventTeamsStatuses(
    req: operations.GetEventTeamsStatusesRequest,
    security: operations.GetEventTeamsStatusesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsStatusesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsStatusesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/statuses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsStatusesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsStatusesResponse =
        new operations.GetEventTeamsStatusesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTeamsStatuses200ApplicationJSONObject = {};
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getEventTeamsStatuses200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                shared.TeamEventStatus,
                resFieldDepth
              );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of events in the given year.
   */
  getEventsByYear(
    req: operations.GetEventsByYearRequest,
    security: operations.GetEventsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/events/{year}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsByYearResponse =
        new operations.GetEventsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of event keys in the given year.
   */
  getEventsByYearKeys(
    req: operations.GetEventsByYearKeysRequest,
    security: operations.GetEventsByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/events/{year}/keys", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsByYearKeysResponse =
        new operations.GetEventsByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventsByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events in the given year.
   */
  getEventsByYearSimple(
    req: operations.GetEventsByYearSimpleRequest,
    security: operations.GetEventsByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/events/{year}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsByYearSimpleResponse =
        new operations.GetEventsByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of awards the given team won at the given event.
   */
  getTeamEventAwards(
    req: operations.GetTeamEventAwardsRequest,
    security: operations.GetTeamEventAwardsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventAwardsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventAwardsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/awards",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventAwardsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventAwardsResponse =
        new operations.GetTeamEventAwardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.awards = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.awards = utils.objectToClass(
              httpRes?.data,
              shared.Award,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given team and event.
   */
  getTeamEventMatches(
    req: operations.GetTeamEventMatchesRequest,
    security: operations.GetTeamEventMatchesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesResponse =
        new operations.GetTeamEventMatchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for matches for the given team and event.
   */
  getTeamEventMatchesKeys(
    req: operations.GetTeamEventMatchesKeysRequest,
    security: operations.GetTeamEventMatchesKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesKeysResponse =
        new operations.GetTeamEventMatchesKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventMatchesKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given team and event.
   */
  getTeamEventMatchesSimple(
    req: operations.GetTeamEventMatchesSimpleRequest,
    security: operations.GetTeamEventMatchesSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesSimpleResponse =
        new operations.GetTeamEventMatchesSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets the competition rank and status of the team at the given event.
   */
  getTeamEventStatus(
    req: operations.GetTeamEventStatusRequest,
    security: operations.GetTeamEventStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/status",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventStatusSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventStatusResponse =
        new operations.GetTeamEventStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamEventStatus = utils.objectToClass(
              httpRes?.data,
              shared.TeamEventStatus
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of all events this team has competed at.
   */
  getTeamEvents(
    req: operations.GetTeamEventsRequest,
    security: operations.GetTeamEventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsResponse =
        new operations.GetTeamEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of events this team has competed at in the given year.
   */
  getTeamEventsByYear(
    req: operations.GetTeamEventsByYearRequest,
    security: operations.GetTeamEventsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsByYearResponse =
        new operations.GetTeamEventsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of the event keys for events this team has competed at in the given year.
   */
  getTeamEventsByYearKeys(
    req: operations.GetTeamEventsByYearKeysRequest,
    security: operations.GetTeamEventsByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsByYearKeysResponse =
        new operations.GetTeamEventsByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events this team has competed at in the given year.
   */
  getTeamEventsByYearSimple(
    req: operations.GetTeamEventsByYearSimpleRequest,
    security: operations.GetTeamEventsByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsByYearSimpleResponse =
        new operations.GetTeamEventsByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of the event keys for all events this team has competed at.
   */
  getTeamEventsKeys(
    req: operations.GetTeamEventsKeysRequest,
    security: operations.GetTeamEventsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsKeysResponse =
        new operations.GetTeamEventsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of all events this team has competed at.
   */
  getTeamEventsSimple(
    req: operations.GetTeamEventsSimpleRequest,
    security: operations.GetTeamEventsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsSimpleResponse =
        new operations.GetTeamEventsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a key-value list of the event statuses for events this team has competed at in the given year.
   */
  getTeamEventsStatusesByYear(
    req: operations.GetTeamEventsStatusesByYearRequest,
    security: operations.GetTeamEventsStatusesByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsStatusesByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsStatusesByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/statuses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsStatusesByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsStatusesByYearResponse =
        new operations.GetTeamEventsStatusesByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsStatusesByYear200ApplicationJSONObject = {};
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTeamEventsStatusesByYear200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                shared.TeamEventStatus,
                resFieldDepth
              );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
