/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot {
    /**
     * Indicates "right after which checkpoint task's execution" this snapshot is taken.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkpointTaskNumber")
    public String checkpointTaskNumber;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withCheckpointTaskNumber(String checkpointTaskNumber) {
        this.checkpointTaskNumber = checkpointTaskNumber;
        return this;
    }
    
    /**
     * All of the computed conditions that been calculated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditionResults")
    public EnterpriseCrmEventbusProtoConditionResult[] conditionResults;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withConditionResults(EnterpriseCrmEventbusProtoConditionResult[] conditionResults) {
        this.conditionResults = conditionResults;
        return this;
    }
    
    /**
     * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diffParams")
    public EnterpriseCrmFrontendsEventbusProtoEventParameters diffParams;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withDiffParams(EnterpriseCrmFrontendsEventbusProtoEventParameters diffParams) {
        this.diffParams = diffParams;
        return this;
    }
    
    /**
     * Points to the event execution info this snapshot belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventExecutionInfoId")
    public String eventExecutionInfoId;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withEventExecutionInfoId(String eventExecutionInfoId) {
        this.eventExecutionInfoId = eventExecutionInfoId;
        return this;
    }
    
    /**
     * Auto-generated. Used as primary key for EventExecutionSnapshots table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventExecutionSnapshotId")
    public String eventExecutionSnapshotId;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withEventExecutionSnapshotId(String eventExecutionSnapshotId) {
        this.eventExecutionSnapshotId = eventExecutionSnapshotId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventExecutionSnapshotMetadata")
    public EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata eventExecutionSnapshotMetadata;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withEventExecutionSnapshotMetadata(EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata eventExecutionSnapshotMetadata) {
        this.eventExecutionSnapshotMetadata = eventExecutionSnapshotMetadata;
        return this;
    }
    
    /**
     * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventParams")
    public EnterpriseCrmFrontendsEventbusProtoEventParameters eventParams;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withEventParams(EnterpriseCrmFrontendsEventbusProtoEventParameters eventParams) {
        this.eventParams = eventParams;
        return this;
    }
    
    /**
     * Indicates when this snapshot is taken.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotTime")
    public String snapshotTime;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withSnapshotTime(String snapshotTime) {
        this.snapshotTime = snapshotTime;
        return this;
    }
    
    /**
     * All of the task execution details at the given point of time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskExecutionDetails")
    public EnterpriseCrmEventbusProtoTaskExecutionDetails[] taskExecutionDetails;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withTaskExecutionDetails(EnterpriseCrmEventbusProtoTaskExecutionDetails[] taskExecutionDetails) {
        this.taskExecutionDetails = taskExecutionDetails;
        return this;
    }
    
    /**
     * The task name associated with this snapshot. Could be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskName")
    public String taskName;
    public EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot withTaskName(String taskName) {
        this.taskName = taskName;
        return this;
    }
    
}
