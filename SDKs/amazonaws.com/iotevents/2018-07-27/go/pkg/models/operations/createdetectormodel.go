// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDetectorModelRequestBodyDetectorModelDefinition - Information that defines how a detector operates.
type CreateDetectorModelRequestBodyDetectorModelDefinition struct {
	InitialStateName *string        `json:"initialStateName,omitempty"`
	States           []shared.State `json:"states,omitempty"`
}

// CreateDetectorModelRequestBodyEvaluationMethodEnum - Information about the order in which events are evaluated and how actions are executed.
type CreateDetectorModelRequestBodyEvaluationMethodEnum string

const (
	CreateDetectorModelRequestBodyEvaluationMethodEnumBatch  CreateDetectorModelRequestBodyEvaluationMethodEnum = "BATCH"
	CreateDetectorModelRequestBodyEvaluationMethodEnumSerial CreateDetectorModelRequestBodyEvaluationMethodEnum = "SERIAL"
)

func (e *CreateDetectorModelRequestBodyEvaluationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BATCH":
		fallthrough
	case "SERIAL":
		*e = CreateDetectorModelRequestBodyEvaluationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDetectorModelRequestBodyEvaluationMethodEnum: %s", s)
	}
}

type CreateDetectorModelRequestBody struct {
	// Information that defines how a detector operates.
	DetectorModelDefinition CreateDetectorModelRequestBodyDetectorModelDefinition `json:"detectorModelDefinition"`
	// A brief description of the detector model.
	DetectorModelDescription *string `json:"detectorModelDescription,omitempty"`
	// The name of the detector model.
	DetectorModelName string `json:"detectorModelName"`
	// Information about the order in which events are evaluated and how actions are executed.
	EvaluationMethod *CreateDetectorModelRequestBodyEvaluationMethodEnum `json:"evaluationMethod,omitempty"`
	// The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.
	Key *string `json:"key,omitempty"`
	// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
	RoleArn string `json:"roleArn"`
	// Metadata that can be used to manage the detector model.
	Tags []shared.Tag `json:"tags,omitempty"`
}

type CreateDetectorModelRequest struct {
	RequestBody       CreateDetectorModelRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateDetectorModelResponse struct {
	ContentType string
	// Success
	CreateDetectorModelResponse *shared.CreateDetectorModelResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
