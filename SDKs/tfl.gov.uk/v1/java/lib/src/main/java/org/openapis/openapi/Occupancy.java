/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class Occupancy {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Occupancy(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Gets the occupancy for a car park with a given id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OccupancyGetResponse occupancyGet(org.openapis.openapi.models.operations.OccupancyGetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OccupancyGetRequest.class, baseUrl, "/Occupancy/CarPark/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OccupancyGetResponse res = new org.openapis.openapi.models.operations.OccupancyGetResponse() {{
            tflApiPresentationEntitiesCarParkOccupancy = null;
            tflApiPresentationEntitiesCarParkOccupancy = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy.class);
                res.tflApiPresentationEntitiesCarParkOccupancy = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy.class);
                res.tflApiPresentationEntitiesCarParkOccupancy = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the occupancy for all charge connectors
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OccupancyGetAllChargeConnectorStatusResponse occupancyGetAllChargeConnectorStatus() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Occupancy/ChargeConnector");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OccupancyGetAllChargeConnectorStatusResponse res = new org.openapis.openapi.models.operations.OccupancyGetAllChargeConnectorStatusResponse() {{
            tflApiPresentationEntitiesChargeConnectorOccupancies = null;
            tflApiPresentationEntitiesChargeConnectorOccupancies = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[].class);
                res.tflApiPresentationEntitiesChargeConnectorOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[].class);
                res.tflApiPresentationEntitiesChargeConnectorOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Get the occupancy for bike points.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OccupancyGetBikePointsOccupanciesResponse occupancyGetBikePointsOccupancies(org.openapis.openapi.models.operations.OccupancyGetBikePointsOccupanciesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OccupancyGetBikePointsOccupanciesRequest.class, baseUrl, "/Occupancy/BikePoints/{ids}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OccupancyGetBikePointsOccupanciesResponse res = new org.openapis.openapi.models.operations.OccupancyGetBikePointsOccupanciesResponse() {{
            tflApiPresentationEntitiesBikePointOccupancies = null;
            tflApiPresentationEntitiesBikePointOccupancies = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesBikePointOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesBikePointOccupancy[].class);
                res.tflApiPresentationEntitiesBikePointOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesBikePointOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesBikePointOccupancy[].class);
                res.tflApiPresentationEntitiesBikePointOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OccupancyGetChargeConnectorStatusResponse occupancyGetChargeConnectorStatus(org.openapis.openapi.models.operations.OccupancyGetChargeConnectorStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OccupancyGetChargeConnectorStatusRequest.class, baseUrl, "/Occupancy/ChargeConnector/{ids}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OccupancyGetChargeConnectorStatusResponse res = new org.openapis.openapi.models.operations.OccupancyGetChargeConnectorStatusResponse() {{
            tflApiPresentationEntitiesChargeConnectorOccupancies = null;
            tflApiPresentationEntitiesChargeConnectorOccupancies = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[].class);
                res.tflApiPresentationEntitiesChargeConnectorOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesChargeConnectorOccupancy[].class);
                res.tflApiPresentationEntitiesChargeConnectorOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the occupancy for all car parks that have occupancy data
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOccupancyCarParkResponse getOccupancyCarPark() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Occupancy/CarPark");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOccupancyCarParkResponse res = new org.openapis.openapi.models.operations.GetOccupancyCarParkResponse() {{
            tflApiPresentationEntitiesCarParkOccupancies = null;
            tflApiPresentationEntitiesCarParkOccupancies = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy[].class);
                res.tflApiPresentationEntitiesCarParkOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesCarParkOccupancy[].class);
                res.tflApiPresentationEntitiesCarParkOccupancies = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}