"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "https://staging.truanon.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Welcome to TruAnon!
    Thank you for helping make the Internet a safer place to be.
    
    Adopting TruAnon is simple. There is no setup or dependencies, nothing to store or process. Making identity part of your service is fun, and youâ€™ll be up and running in a matter of minutes.
    
    TruAnon Private Token is used anytime you request information from TruAnon and you must edit this into the Variables section for this collection.
    
    This API contains two endpoints and both require these same two arguments, also found in the Variables section of this collection.
    
    These two arguments are:
    
    TruAnon Service Identifier
    
    and
    
    Your Member Name
    
    Your TruAnon Service Identifier was provided by TruAnon and is likely the root domain of your site or service. Your Member Name is the unique member ID on your system that you would like to query.
    
    Information is continuously updated for display purposes and aside from performance considerations, there should be no need to capture or save anything from TruAnon.
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_profile(self, request: operations.GetProfileRequest) -> operations.GetProfileResponse:
        r"""Get Profile
        get_profile Private API: Request confirmed profile data for your unique member ID
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/get_profile'
        
        query_params = utils.get_query_params(operations.GetProfileRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_token(self, request: operations.GetTokenRequest) -> operations.GetTokenResponse:
        r"""Get Token
        request_token Private API: Request a Proof token to let the member confirm in a popup interface
        
                {\"id\":\"qjgblv72bzzio\",\"type\":\"Proof\",\"active\":true,\"name\":\"New Proof\"}
        
        Step 2. Create a verifyProfile Public Web link: Use the Proof token id as the token argument in your public URL used to open a new target popup. This activity is where members may confirm immediately.
            
                https://staging.truanon.com/verifyProfile?id=john_doe&service=securecannabisalliance&token=qjgblv72bzzio
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/request_token'
        
        query_params = utils.get_query_params(operations.GetTokenRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    