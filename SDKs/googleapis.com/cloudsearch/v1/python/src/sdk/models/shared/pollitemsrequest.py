"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import debugoptions as shared_debugoptions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PollItemsRequestStatusCodesEnum(str, Enum):
    CODE_UNSPECIFIED = 'CODE_UNSPECIFIED'
    ERROR = 'ERROR'
    MODIFIED = 'MODIFIED'
    NEW_ITEM = 'NEW_ITEM'
    ACCEPTED = 'ACCEPTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PollItemsRequest:
    
    connector_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorName'), 'exclude': lambda f: f is None }})
    r"""The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"""  
    debug_options: Optional[shared_debugoptions.DebugOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debugOptions'), 'exclude': lambda f: f is None }})
    r"""Shared request debug options for all cloudsearch RPC methods."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Maximum number of items to return. The maximum value is 100 and the default value is 20."""  
    queue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queue'), 'exclude': lambda f: f is None }})
    r"""Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters."""  
    status_codes: Optional[list[PollItemsRequestStatusCodesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCodes'), 'exclude': lambda f: f is None }})
    r"""Limit the items polled to the ones with these statuses."""  
    