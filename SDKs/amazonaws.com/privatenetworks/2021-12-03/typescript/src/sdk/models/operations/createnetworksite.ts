/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Information about a site plan.
 */
export class CreateNetworkSiteRequestBodyPendingPlan extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.NameValuePair })
  @Expose({ name: "options" })
  @Type(() => shared.NameValuePair)
  options?: shared.NameValuePair[];

  @SpeakeasyMetadata({ elemType: shared.NetworkResourceDefinition })
  @Expose({ name: "resourceDefinitions" })
  @Type(() => shared.NetworkResourceDefinition)
  resourceDefinitions?: shared.NetworkResourceDefinition[];
}

export class CreateNetworkSiteRequestBody extends SpeakeasyBase {
  /**
   * The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availabilityZone" })
  availabilityZone?: string;

  /**
   * The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availabilityZoneId" })
  availabilityZoneId?: string;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * The description of the site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The Amazon Resource Name (ARN) of the network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkArn" })
  networkArn: string;

  /**
   * The name of the site. You can't change the name after you create the site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkSiteName" })
  networkSiteName: string;

  /**
   * Information about a site plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pendingPlan" })
  @Type(() => CreateNetworkSiteRequestBodyPendingPlan)
  pendingPlan?: CreateNetworkSiteRequestBodyPendingPlan;

  /**
   *  The tags to apply to the network site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateNetworkSiteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkSiteRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateNetworkSiteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createNetworkSiteResponse?: shared.CreateNetworkSiteResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
