/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * While there are many types of transactions, they are all represented by the same JSON object with a different txnType.
 */
export class Transactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List transactions for an account (v1)
   *
   * @remarks
   * Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
   */
  getTransactionsByIdv1(
    req: operations.GetTransactionsByIdv1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionsByIdv1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionsByIdv1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{ican}/transactions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionsByIdv1Response =
        new operations.GetTransactionsByIdv1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardTransactionsv1 = utils.objectToClass(
              httpRes?.data,
              operations.GetTransactionsByIdv1CardTransactionsv1
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List transactions for an account (v3)
   *
   * @remarks
   * Retrieve a list of transactions against an account. Initially, use the optional `limit`, `dateRangeFrom` and `dateRangeTo` query params to limit your query, then use the embedded `next` or `prev` links in the response to get newer or older pages.
   *
   */
  getTransactionsByIdv3(
    req: operations.GetTransactionsByIdv3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionsByIdv3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionsByIdv3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/accounts/{ican}/transactions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionsByIdv3Response =
        new operations.GetTransactionsByIdv3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardTransactionsv3 = utils.objectToClass(
              httpRes?.data,
              operations.GetTransactionsByIdv3CardTransactionsv3
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Filtered list of transactions for an account (v1)
   *
   * @remarks
   * Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead.
   * * `dateRangeFrom` - A millisecond epoch time specifying the date range start date.
   * * `dateRangeTo` - A millisecond epoch time specifying the date range end date.
   * * `searchKeyword` - Search term to filter by from the reference field (`myRef`).
   * * `transactionTypes` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
   * * `offset` - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59.
   *
   */
  getTransactionsFilteredById(
    req: operations.GetTransactionsFilteredByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionsFilteredByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionsFilteredByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{ican}/transactions/filter",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionsFilteredByIdResponse =
        new operations.GetTransactionsFilteredByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardTransactionsv1 = utils.objectToClass(
              httpRes?.data,
              operations.GetTransactionsFilteredByIdCardTransactionsv1
            );
          }
          break;
      }

      return res;
    });
  }
}
