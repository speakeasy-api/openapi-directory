/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostV2CalendarEventsUpsertRequestBody {
    /**
     * Should be set to `true` for all day calendar events.
     */
    @SpeakeasyMetadata("form:name=all_day")
    public Boolean allDay;

    public PostV2CalendarEventsUpsertRequestBody withAllDay(Boolean allDay) {
        this.allDay = allDay;
        return this;
    }
    
    /**
     *   List of attendees of the calendar event.
     *   Example:
     *   ```
     *     {
     *       ...
     *       "attendees": [
     *         {
     *           "name": "Alice",
     *           "email": "alice@example.com",
     *           "status": "accepted",
     *           "organizer": true
     *         },
     *         {
     *           "name": "Bob",
     *           "email": "bob@example.com",
     *           "status": "needsAction",
     *           "organizer": false
     *         }
     *       ]
     *     }
     *   ```
     *   `name`: full name of the attendee
     * 
     *   `email`: email address of the attendee
     * 
     *   `status`: one of the following - needsAction, accepted, tentative, declined
     * 
     *   `organizer`: whether the attendee is the organizer of the calendar event
     * 
     */
    @SpeakeasyMetadata("form:name=attendees,json")
    public java.util.Map<String, Object> attendees;

    public PostV2CalendarEventsUpsertRequestBody withAttendees(java.util.Map<String, Object> attendees) {
        this.attendees = attendees;
        return this;
    }
    
    /**
     *   Calendar ID of the calendar event owner.
     *   For the External Calendar connection use `external_{salesloft_user_guid}` format.
     *   Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`.
     * 
     */
    @SpeakeasyMetadata("form:name=calendar_id")
    public String calendarId;

    public PostV2CalendarEventsUpsertRequestBody withCalendarId(String calendarId) {
        this.calendarId = calendarId;
        return this;
    }
    
    /**
     *   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
     *   Example: `2022-02-14T10:12:59+00:00`.
     * 
     */
    @SpeakeasyMetadata("form:name=canceled_at")
    public String canceledAt;

    public PostV2CalendarEventsUpsertRequestBody withCanceledAt(String canceledAt) {
        this.canceledAt = canceledAt;
        return this;
    }
    
    /**
     * Description of the calendar event
     */
    @SpeakeasyMetadata("form:name=description")
    public String description;

    public PostV2CalendarEventsUpsertRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     *   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
     *   Example: `2022-02-14T10:12:59+00:00`.
     * 
     */
    @SpeakeasyMetadata("form:name=end_time")
    public LocalDate endTime;

    public PostV2CalendarEventsUpsertRequestBody withEndTime(LocalDate endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     *   icalUID of the calendar event. Unique identifier for a calendar event across calendars.
     * 
     *   Used as an upsert key.
     * 
     */
    @SpeakeasyMetadata("form:name=i_cal_uid")
    public String iCalUid;

    public PostV2CalendarEventsUpsertRequestBody withICalUid(String iCalUid) {
        this.iCalUid = iCalUid;
        return this;
    }
    
    /**
     *   Id of the calendar event, different for each occurrence in a recurring series.
     * 
     *   Used as an upsert key.
     * 
     */
    @SpeakeasyMetadata("form:name=id")
    public String id;

    public PostV2CalendarEventsUpsertRequestBody withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Location of the calendar event as free-form text.
     */
    @SpeakeasyMetadata("form:name=location")
    public String location;

    public PostV2CalendarEventsUpsertRequestBody withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     *   Email address of the organizer
     * 
     */
    @SpeakeasyMetadata("form:name=organizer")
    public String organizer;

    public PostV2CalendarEventsUpsertRequestBody withOrganizer(String organizer) {
        this.organizer = organizer;
        return this;
    }
    
    /**
     * Should be set to `true` if this is one of recurring series calendar event.
     */
    @SpeakeasyMetadata("form:name=recurring")
    public Boolean recurring;

    public PostV2CalendarEventsUpsertRequestBody withRecurring(Boolean recurring) {
        this.recurring = recurring;
        return this;
    }
    
    /**
     *   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
     *   Example: `2022-02-14T10:12:59+00:00`.
     * 
     */
    @SpeakeasyMetadata("form:name=start_time")
    public LocalDate startTime;

    public PostV2CalendarEventsUpsertRequestBody withStartTime(LocalDate startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     *   Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.
     *   Possible values: `confirmed`, `tentative`, `cancelled`.
     *   Example: `confirmed`.
     * 
     */
    @SpeakeasyMetadata("form:name=status")
    public String status;

    public PostV2CalendarEventsUpsertRequestBody withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Title of the calendar event
     */
    @SpeakeasyMetadata("form:name=title")
    public String title;

    public PostV2CalendarEventsUpsertRequestBody withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     *   Last modification time of the event in the ISO 8601 format with a time zone offset. The event will not be updated if the 'updated_at' timestamp from the payload is earlier than the one in the database.
     *   Example: `2022-02-14T10:12:59+00:00`.
     * 
     */
    @SpeakeasyMetadata("form:name=updated_at")
    public String updatedAt;

    public PostV2CalendarEventsUpsertRequestBody withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public PostV2CalendarEventsUpsertRequestBody(@JsonProperty("calendar_id") String calendarId, @JsonProperty("end_time") LocalDate endTime, @JsonProperty("i_cal_uid") String iCalUid, @JsonProperty("id") String id, @JsonProperty("start_time") LocalDate startTime) {
        this.calendarId = calendarId;
        this.endTime = endTime;
        this.iCalUid = iCalUid;
        this.id = id;
        this.startTime = startTime;
  }
}
