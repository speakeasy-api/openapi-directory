"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EmbedPresetsCustomLogos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_custom_logo(self, request: operations.CreateCustomLogoRequest, security: operations.CreateCustomLogoSecurity) -> operations.CreateCustomLogoResponse:
        r"""Add a custom logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateCustomLogoRequest, base_url, '/users/{user_id}/customlogos', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def create_custom_logo_alt1(self) -> operations.CreateCustomLogoAlt1Response:
        r"""Add a custom logo"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/customlogos'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomLogoAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_custom_logo(self, request: operations.GetCustomLogoRequest) -> operations.GetCustomLogoResponse:
        r"""Get a specific custom logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomLogoRequest, base_url, '/users/{user_id}/customlogos/{logo_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_custom_logo_alt1(self, request: operations.GetCustomLogoAlt1Request) -> operations.GetCustomLogoAlt1Response:
        r"""Get a specific custom logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomLogoAlt1Request, base_url, '/me/customlogos/{logo_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomLogoAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_custom_logos(self, request: operations.GetCustomLogosRequest) -> operations.GetCustomLogosResponse:
        r"""Get all the custom logos that belong to a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomLogosRequest, base_url, '/users/{user_id}/customlogos', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomLogosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_custom_logos_alt1(self) -> operations.GetCustomLogosAlt1Response:
        r"""Get all the custom logos that belong to a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/customlogos'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomLogosAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    