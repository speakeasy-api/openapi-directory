/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserInfo } from "./userinfo";
import { Expose, Type } from "class-transformer";

/**
 * Request to upload user account in batch.
 */
export class IdentitytoolkitRelyingpartyUploadAccountRequest extends SpeakeasyBase {
  /**
   * Whether allow overwrite existing account when user local_id exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowOverwrite" })
  allowOverwrite?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "blockSize" })
  blockSize?: number;

  /**
   * The following 4 fields are for standard scrypt algorithm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpuMemCost" })
  cpuMemCost?: number;

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delegatedProjectNumber" })
  delegatedProjectNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "dkLen" })
  dkLen?: number;

  /**
   * The password hash algorithm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hashAlgorithm" })
  hashAlgorithm?: string;

  /**
   * Memory cost for hash calculation. Used by scrypt similar algorithms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memoryCost" })
  memoryCost?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "parallelization" })
  parallelization?: number;

  /**
   * Rounds for hash calculation. Used by scrypt and similar algorithms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rounds" })
  rounds?: number;

  /**
   * The salt separator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "saltSeparator" })
  saltSeparator?: string;

  /**
   * If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sanityCheck" })
  sanityCheck?: boolean;

  /**
   * The key for to hash the password.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signerKey" })
  signerKey?: string;

  /**
   * Specify which project (field value is actually project id) to operate. Only used when provided credential.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetProjectId" })
  targetProjectId?: string;

  /**
   * The account info to be stored.
   */
  @SpeakeasyMetadata({ elemType: UserInfo })
  @Expose({ name: "users" })
  @Type(() => UserInfo)
  users?: UserInfo[];
}
