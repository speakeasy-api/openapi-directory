/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * GdataMedia - A reference to data stored on the filesystem, on GFS or in blobstore.
 */
public class GdataMedia {
    /**
     * Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, "MD5" is the only possible value for this field. New values may be added at any time.
     */
    
    public String algorithm;
    public GdataMedia withAlgorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }
    
    /**
     * Use object_id instead.
     */
    
    public String bigstoreObjectRef;
    public GdataMedia withBigstoreObjectRef(String bigstoreObjectRef) {
        this.bigstoreObjectRef = bigstoreObjectRef;
        return this;
    }
    
    /**
     * Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.
     */
    
    public String blobRef;
    public GdataMedia withBlobRef(String blobRef) {
        this.blobRef = blobRef;
        return this;
    }
    
    /**
     * Information to read/write to blobstore2.
     */
    
    public GdataBlobstore2Info blobstore2Info;
    public GdataMedia withBlobstore2Info(GdataBlobstore2Info blobstore2Info) {
        this.blobstore2Info = blobstore2Info;
        return this;
    }
    
    /**
     * A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.
     */
    
    public GdataCompositeMedia[] compositeMedia;
    public GdataMedia withCompositeMedia(GdataCompositeMedia[] compositeMedia) {
        this.compositeMedia = compositeMedia;
        return this;
    }
    
    /**
     * MIME type of the data
     */
    
    public String contentType;
    public GdataMedia withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
     */
    
    public GdataContentTypeInfo contentTypeInfo;
    public GdataMedia withContentTypeInfo(GdataContentTypeInfo contentTypeInfo) {
        this.contentTypeInfo = contentTypeInfo;
        return this;
    }
    
    /**
     * A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.
     */
    
    public String cosmoBinaryReference;
    public GdataMedia withCosmoBinaryReference(String cosmoBinaryReference) {
        this.cosmoBinaryReference = cosmoBinaryReference;
        return this;
    }
    
    /**
     * For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.
     */
    
    public Long crc32cHash;
    public GdataMedia withCrc32cHash(Long crc32cHash) {
        this.crc32cHash = crc32cHash;
        return this;
    }
    
    /**
     * Backend response for a Diff get checksums response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     */
    
    public GdataDiffChecksumsResponse diffChecksumsResponse;
    public GdataMedia withDiffChecksumsResponse(GdataDiffChecksumsResponse diffChecksumsResponse) {
        this.diffChecksumsResponse = diffChecksumsResponse;
        return this;
    }
    
    /**
     * Backend response for a Diff download response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     */
    
    public GdataDiffDownloadResponse diffDownloadResponse;
    public GdataMedia withDiffDownloadResponse(GdataDiffDownloadResponse diffDownloadResponse) {
        this.diffDownloadResponse = diffDownloadResponse;
        return this;
    }
    
    /**
     * A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     */
    
    public GdataDiffUploadRequest diffUploadRequest;
    public GdataMedia withDiffUploadRequest(GdataDiffUploadRequest diffUploadRequest) {
        this.diffUploadRequest = diffUploadRequest;
        return this;
    }
    
    /**
     * Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     */
    
    public GdataDiffUploadResponse diffUploadResponse;
    public GdataMedia withDiffUploadResponse(GdataDiffUploadResponse diffUploadResponse) {
        this.diffUploadResponse = diffUploadResponse;
        return this;
    }
    
    /**
     * Backend response for a Diff get version response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     */
    
    public GdataDiffVersionResponse diffVersionResponse;
    public GdataMedia withDiffVersionResponse(GdataDiffVersionResponse diffVersionResponse) {
        this.diffVersionResponse = diffVersionResponse;
        return this;
    }
    
    /**
     * Parameters specific to media downloads.
     */
    
    public GdataDownloadParameters downloadParameters;
    public GdataMedia withDownloadParameters(GdataDownloadParameters downloadParameters) {
        this.downloadParameters = downloadParameters;
        return this;
    }
    
    /**
     * Original file name
     */
    
    public String filename;
    public GdataMedia withFilename(String filename) {
        this.filename = filename;
        return this;
    }
    
    /**
     * Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&amp;q=class:Hash Hex encoded hash value of the uploaded media.
     */
    
    public String hash;
    public GdataMedia withHash(String hash) {
        this.hash = hash;
        return this;
    }
    
    /**
     * For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.
     */
    
    public Boolean hashVerified;
    public GdataMedia withHashVerified(Boolean hashVerified) {
        this.hashVerified = hashVerified;
        return this;
    }
    
    /**
     * Media data, set if reference_type is INLINE
     */
    
    public String inline;
    public GdataMedia withInline(String inline) {
        this.inline = inline;
        return this;
    }
    
    /**
     * |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.
     */
    
    public Boolean isPotentialRetry;
    public GdataMedia withIsPotentialRetry(Boolean isPotentialRetry) {
        this.isPotentialRetry = isPotentialRetry;
        return this;
    }
    
    /**
     * Size of the data, in bytes
     */
    
    public String length;
    public GdataMedia withLength(String length) {
        this.length = length;
        return this;
    }
    
    /**
     * Scotty-provided MD5 hash for an upload.
     */
    
    public String md5Hash;
    public GdataMedia withMd5Hash(String md5Hash) {
        this.md5Hash = md5Hash;
        return this;
    }
    
    /**
     * Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.
     */
    
    public String mediaId;
    public GdataMedia withMediaId(String mediaId) {
        this.mediaId = mediaId;
        return this;
    }
    
    /**
     * This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
     */
    
    public GdataObjectId objectId;
    public GdataMedia withObjectId(GdataObjectId objectId) {
        this.objectId = objectId;
        return this;
    }
    
    /**
     * Path to the data, set if reference_type is PATH
     */
    
    public String path;
    public GdataMedia withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Describes what the field reference contains.
     */
    
    public GdataMediaReferenceTypeEnum referenceType;
    public GdataMedia withReferenceType(GdataMediaReferenceTypeEnum referenceType) {
        this.referenceType = referenceType;
        return this;
    }
    
    /**
     * Scotty-provided SHA1 hash for an upload.
     */
    
    public String sha1Hash;
    public GdataMedia withSha1Hash(String sha1Hash) {
        this.sha1Hash = sha1Hash;
        return this;
    }
    
    /**
     * Scotty-provided SHA256 hash for an upload.
     */
    
    public String sha256Hash;
    public GdataMedia withSha256Hash(String sha256Hash) {
        this.sha256Hash = sha256Hash;
        return this;
    }
    
    /**
     * Time at which the media data was last updated, in milliseconds since UNIX epoch
     */
    
    public String timestamp;
    public GdataMedia withTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * A unique fingerprint/version id for the media data
     */
    
    public String token;
    public GdataMedia withToken(String token) {
        this.token = token;
        return this;
    }
    
}
