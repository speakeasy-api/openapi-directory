// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DomainProvisioningCertStatusEnum - The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
type DomainProvisioningCertStatusEnum string

const (
	DomainProvisioningCertStatusEnumCertStatusUnspecified DomainProvisioningCertStatusEnum = "CERT_STATUS_UNSPECIFIED"
	DomainProvisioningCertStatusEnumCertPending           DomainProvisioningCertStatusEnum = "CERT_PENDING"
	DomainProvisioningCertStatusEnumCertMissing           DomainProvisioningCertStatusEnum = "CERT_MISSING"
	DomainProvisioningCertStatusEnumCertProcessing        DomainProvisioningCertStatusEnum = "CERT_PROCESSING"
	DomainProvisioningCertStatusEnumCertPropagating       DomainProvisioningCertStatusEnum = "CERT_PROPAGATING"
	DomainProvisioningCertStatusEnumCertActive            DomainProvisioningCertStatusEnum = "CERT_ACTIVE"
	DomainProvisioningCertStatusEnumCertError             DomainProvisioningCertStatusEnum = "CERT_ERROR"
)

func (e *DomainProvisioningCertStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CERT_STATUS_UNSPECIFIED":
		fallthrough
	case "CERT_PENDING":
		fallthrough
	case "CERT_MISSING":
		fallthrough
	case "CERT_PROCESSING":
		fallthrough
	case "CERT_PROPAGATING":
		fallthrough
	case "CERT_ACTIVE":
		fallthrough
	case "CERT_ERROR":
		*e = DomainProvisioningCertStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainProvisioningCertStatusEnum: %s", s)
	}
}

// DomainProvisioningDNSStatusEnum - The DNS record match status as of the last DNS fetch.
type DomainProvisioningDNSStatusEnum string

const (
	DomainProvisioningDNSStatusEnumDNSStatusUnspecified DomainProvisioningDNSStatusEnum = "DNS_STATUS_UNSPECIFIED"
	DomainProvisioningDNSStatusEnumDNSPending           DomainProvisioningDNSStatusEnum = "DNS_PENDING"
	DomainProvisioningDNSStatusEnumDNSMissing           DomainProvisioningDNSStatusEnum = "DNS_MISSING"
	DomainProvisioningDNSStatusEnumDNSPartialMatch      DomainProvisioningDNSStatusEnum = "DNS_PARTIAL_MATCH"
	DomainProvisioningDNSStatusEnumDNSMatch             DomainProvisioningDNSStatusEnum = "DNS_MATCH"
	DomainProvisioningDNSStatusEnumDNSExtraneousMatch   DomainProvisioningDNSStatusEnum = "DNS_EXTRANEOUS_MATCH"
)

func (e *DomainProvisioningDNSStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DNS_STATUS_UNSPECIFIED":
		fallthrough
	case "DNS_PENDING":
		fallthrough
	case "DNS_MISSING":
		fallthrough
	case "DNS_PARTIAL_MATCH":
		fallthrough
	case "DNS_MATCH":
		fallthrough
	case "DNS_EXTRANEOUS_MATCH":
		*e = DomainProvisioningDNSStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainProvisioningDNSStatusEnum: %s", s)
	}
}

// DomainProvisioning - The current certificate provisioning status information for a domain.
type DomainProvisioning struct {
	// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
	CertChallengeDiscoveredTxt []string `json:"certChallengeDiscoveredTxt,omitempty"`
	// Represents a DNS certificate challenge.
	CertChallengeDNS *CertDNSChallenge `json:"certChallengeDns,omitempty"`
	// Represents an HTTP certificate challenge.
	CertChallengeHTTP *CertHTTPChallenge `json:"certChallengeHttp,omitempty"`
	// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
	CertStatus *DomainProvisioningCertStatusEnum `json:"certStatus,omitempty"`
	// The IPs found at the last DNS fetch.
	DiscoveredIps []string `json:"discoveredIps,omitempty"`
	// The time at which the last DNS fetch occurred.
	DNSFetchTime *string `json:"dnsFetchTime,omitempty"`
	// The DNS record match status as of the last DNS fetch.
	DNSStatus *DomainProvisioningDNSStatusEnum `json:"dnsStatus,omitempty"`
	// The list of IPs to which the domain is expected to resolve.
	ExpectedIps []string `json:"expectedIps,omitempty"`
}
