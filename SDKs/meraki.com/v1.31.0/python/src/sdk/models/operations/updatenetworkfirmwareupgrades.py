"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion:
    r"""The version to be updated to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade:
    r"""The pending firmware upgrade if it exists"""
    
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The time of the last successful upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""The version to be updated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance:
    r"""The network device to be updated"""
    
    next_upgrade: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""The pending firmware upgrade if it exists"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion:
    r"""The version to be updated to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade:
    r"""The pending firmware upgrade if it exists"""
    
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The time of the last successful upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""The version to be updated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera:
    r"""The network device to be updated"""
    
    next_upgrade: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""The pending firmware upgrade if it exists"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion:
    r"""The version to be updated to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade:
    r"""The pending firmware upgrade if it exists"""
    
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The time of the last successful upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""The version to be updated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway:
    r"""The network device to be updated"""
    
    next_upgrade: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""The pending firmware upgrade if it exists"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion:
    r"""The version to be updated to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade:
    r"""The pending firmware upgrade if it exists"""
    
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The time of the last successful upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""The version to be updated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor:
    r"""The network device to be updated"""
    
    next_upgrade: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""The pending firmware upgrade if it exists"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion:
    r"""The version to be updated to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade:
    r"""The pending firmware upgrade if it exists"""
    
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The time of the last successful upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""The version to be updated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch:
    r"""The network device to be updated"""
    
    next_upgrade: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""The pending firmware upgrade if it exists"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion:
    r"""The version to be updated to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The version ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade:
    r"""The pending firmware upgrade if it exists"""
    
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The time of the last successful upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""The version to be updated to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless:
    r"""The network device to be updated"""
    
    next_upgrade: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""The pending firmware upgrade if it exists"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyProducts:
    r"""Contains information about the network to update"""
    
    appliance: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliance'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    camera: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('camera'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    cellular_gateway: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellularGateway'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    sensor: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensor'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    switch: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    wireless: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wireless'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    
class UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum(str, Enum):
    r"""Day of the week"""
    FRI = 'fri'
    FRIDAY = 'friday'
    MON = 'mon'
    MONDAY = 'monday'
    SAT = 'sat'
    SATURDAY = 'saturday'
    SUN = 'sun'
    SUNDAY = 'sunday'
    THU = 'thu'
    THURSDAY = 'thursday'
    TUE = 'tue'
    TUESDAY = 'tuesday'
    WED = 'wed'
    WEDNESDAY = 'wednesday'

class UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum(str, Enum):
    r"""Hour of the day"""
    ZERO_00 = '0:00'
    TEN_00 = '10:00'
    ELEVEN_00 = '11:00'
    TWELVE_00 = '12:00'
    THIRTEEN_00 = '13:00'
    FOURTEEN_00 = '14:00'
    FIFTEEN_00 = '15:00'
    SIXTEEN_00 = '16:00'
    SEVENTEEN_00 = '17:00'
    EIGHTEEN_00 = '18:00'
    NINETEEN_00 = '19:00'
    ONE_00 = '1:00'
    TWENTY_00 = '20:00'
    TWENTY_ONE_00 = '21:00'
    TWENTY_TWO_00 = '22:00'
    TWENTY_THREE_00 = '23:00'
    TWO_00 = '2:00'
    THREE_00 = '3:00'
    FOUR_00 = '4:00'
    FIVE_00 = '5:00'
    SIX_00 = '6:00'
    SEVEN_00 = '7:00'
    EIGHT_00 = '8:00'
    NINE_00 = '9:00'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow:
    r"""Upgrade window for devices in network"""
    
    day_of_week: Optional[UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Day of the week"""  
    hour_of_day: Optional[UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourOfDay'), 'exclude': lambda f: f is None }})
    r"""Hour of the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequestBody:
    
    products: Optional[UpdateNetworkFirmwareUpgradesRequestBodyProducts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""Contains information about the network to update"""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The timezone for the network"""  
    upgrade_window: Optional[UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeWindow'), 'exclude': lambda f: f is None }})
    r"""Upgrade window for devices in network"""  
    

@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkFirmwareUpgradesRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts:
    r"""The network devices to be updated"""
    
    appliance: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliance'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    camera: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('camera'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    cellular_gateway: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellularGateway'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    sensor: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensor'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    switch: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    wireless: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wireless'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    
class UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum(str, Enum):
    r"""Day of the week"""
    FRI = 'fri'
    FRIDAY = 'friday'
    MON = 'mon'
    MONDAY = 'monday'
    SAT = 'sat'
    SATURDAY = 'saturday'
    SUN = 'sun'
    SUNDAY = 'sunday'
    THU = 'thu'
    THURSDAY = 'thursday'
    TUE = 'tue'
    TUESDAY = 'tuesday'
    WED = 'wed'
    WEDNESDAY = 'wednesday'

class UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum(str, Enum):
    r"""Hour of the day"""
    ZERO_00 = '0:00'
    TEN_00 = '10:00'
    ELEVEN_00 = '11:00'
    TWELVE_00 = '12:00'
    THIRTEEN_00 = '13:00'
    FOURTEEN_00 = '14:00'
    FIFTEEN_00 = '15:00'
    SIXTEEN_00 = '16:00'
    SEVENTEEN_00 = '17:00'
    EIGHTEEN_00 = '18:00'
    NINETEEN_00 = '19:00'
    ONE_00 = '1:00'
    TWENTY_00 = '20:00'
    TWENTY_ONE_00 = '21:00'
    TWENTY_TWO_00 = '22:00'
    TWENTY_THREE_00 = '23:00'
    TWO_00 = '2:00'
    THREE_00 = '3:00'
    FOUR_00 = '4:00'
    FIVE_00 = '5:00'
    SIX_00 = '6:00'
    SEVEN_00 = '7:00'
    EIGHT_00 = '8:00'
    NINE_00 = '9:00'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow:
    r"""Upgrade window for devices in network"""
    
    day_of_week: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Day of the week"""  
    hour_of_day: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourOfDay'), 'exclude': lambda f: f is None }})
    r"""Hour of the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirmwareUpgrades200ApplicationJSON:
    r"""Successful operation"""
    
    products: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""The network devices to be updated"""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The timezone for the network"""  
    upgrade_window: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeWindow'), 'exclude': lambda f: f is None }})
    r"""Upgrade window for devices in network"""  
    

@dataclasses.dataclass
class UpdateNetworkFirmwareUpgradesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_firmware_upgrades_200_application_json_object: Optional[UpdateNetworkFirmwareUpgrades200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    