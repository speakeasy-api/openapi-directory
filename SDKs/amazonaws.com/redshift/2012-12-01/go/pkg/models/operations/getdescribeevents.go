// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GETDescribeEventsActionEnum
type GETDescribeEventsActionEnum string

const (
	GETDescribeEventsActionEnumDescribeEvents GETDescribeEventsActionEnum = "DescribeEvents"
)

func (e *GETDescribeEventsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeEvents":
		*e = GETDescribeEventsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventsActionEnum: %s", s)
	}
}

// GETDescribeEventsSourceTypeEnum - <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
type GETDescribeEventsSourceTypeEnum string

const (
	GETDescribeEventsSourceTypeEnumCluster               GETDescribeEventsSourceTypeEnum = "cluster"
	GETDescribeEventsSourceTypeEnumClusterParameterGroup GETDescribeEventsSourceTypeEnum = "cluster-parameter-group"
	GETDescribeEventsSourceTypeEnumClusterSecurityGroup  GETDescribeEventsSourceTypeEnum = "cluster-security-group"
	GETDescribeEventsSourceTypeEnumClusterSnapshot       GETDescribeEventsSourceTypeEnum = "cluster-snapshot"
	GETDescribeEventsSourceTypeEnumScheduledAction       GETDescribeEventsSourceTypeEnum = "scheduled-action"
)

func (e *GETDescribeEventsSourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cluster":
		fallthrough
	case "cluster-parameter-group":
		fallthrough
	case "cluster-security-group":
		fallthrough
	case "cluster-snapshot":
		fallthrough
	case "scheduled-action":
		*e = GETDescribeEventsSourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventsSourceTypeEnum: %s", s)
	}
}

// GETDescribeEventsVersionEnum
type GETDescribeEventsVersionEnum string

const (
	GETDescribeEventsVersionEnumTwoThousandAndTwelve1201 GETDescribeEventsVersionEnum = "2012-12-01"
)

func (e *GETDescribeEventsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETDescribeEventsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventsVersionEnum: %s", s)
	}
}

type GETDescribeEventsQueryParams struct {
	Action GETDescribeEventsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p>
	Duration *int64 `queryParam:"style=form,explode=true,name=Duration"`
	// <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
	EndTime *time.Time `queryParam:"style=form,explode=true,name=EndTime"`
	// An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// <p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
	SourceIdentifier *string `queryParam:"style=form,explode=true,name=SourceIdentifier"`
	// <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
	SourceType *GETDescribeEventsSourceTypeEnum `queryParam:"style=form,explode=true,name=SourceType"`
	// <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
	StartTime *time.Time                   `queryParam:"style=form,explode=true,name=StartTime"`
	Version   GETDescribeEventsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeEventsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeEventsRequest struct {
	QueryParams GETDescribeEventsQueryParams
	Headers     GETDescribeEventsHeaders
}

type GETDescribeEventsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
