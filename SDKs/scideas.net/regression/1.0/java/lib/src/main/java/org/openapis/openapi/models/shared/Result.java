/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Result {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calls\"")
    public ResultCalls calls;
    public Result withCalls(ResultCalls calls) {
        this.calls = calls;
        return this;
    }
    
    /**
     * number of data rows processed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_count")
    public Long dataCount;
    public Result withDataCount(Long dataCount) {
        this.dataCount = dataCount;
        return this;
    }
    
    /**
     * either month or week
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dates_converted_to")
    public String datesConvertedTo;
    public Result withDatesConvertedTo(String datesConvertedTo) {
        this.datesConvertedTo = datesConvertedTo;
        return this;
    }
    
    /**
     * text for pdf footer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footer")
    public String footer;
    public Result withFooter(String footer) {
        this.footer = footer;
        return this;
    }
    
    /**
     * text for pdf header
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header")
    public String header;
    public Result withHeader(String header) {
        this.header = header;
        return this;
    }
    
    /**
     * number of data rows used for analysis
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_observations")
    public Long numberObservations;
    public Result withNumberObservations(Long numberObservations) {
        this.numberObservations = numberObservations;
        return this;
    }
    
    /**
     * number of data rows used to test model accuracy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_tests")
    public Long numberTests;
    public Result withNumberTests(Long numberTests) {
        this.numberTests = numberTests;
        return this;
    }
    
    /**
     * the name of the variable processed as the outcome
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outcome_variable")
    public String outcomeVariable;
    public Result withOutcomeVariable(String outcomeVariable) {
        this.outcomeVariable = outcomeVariable;
        return this;
    }
    
    /**
     * yes if paid subscriber, otherwise no
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paid")
    public String paid;
    public Result withPaid(String paid) {
        this.paid = paid;
        return this;
    }
    
    /**
     * url of pdf summary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pdf")
    public String pdf;
    public Result withPdf(String pdf) {
        this.pdf = pdf;
        return this;
    }
    
    /**
     * percentage accuracy of model created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prediction_mean_accuracy")
    public Long predictionMeanAccuracy;
    public Result withPredictionMeanAccuracy(Long predictionMeanAccuracy) {
        this.predictionMeanAccuracy = predictionMeanAccuracy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standardized_coefficients")
    public ResultStandardizedCoefficients[] standardizedCoefficients;
    public Result withStandardizedCoefficients(ResultStandardizedCoefficients[] standardizedCoefficients) {
        this.standardizedCoefficients = standardizedCoefficients;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public java.util.Map<String, Object>[] summary;
    public Result withSummary(java.util.Map<String, Object>[] summary) {
        this.summary = summary;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tested_variables")
    public String[] testedVariables;
    public Result withTestedVariables(String[] testedVariables) {
        this.testedVariables = testedVariables;
        return this;
    }
    
}
