<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * BiddingFunction - The bidding function to be executed as part of the TURTLEDOVE simulation experiment bidding flow.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class BiddingFunction
{
    /**
     * The raw Javascript source code of the bidding function.
     * 
     * @var ?string $biddingFunction
     */
	#[\JMS\Serializer\Annotation\SerializedName('biddingFunction')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $biddingFunction = null;
    
    /**
     * The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Output only. The state of the bidding function.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BiddingFunctionStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BiddingFunctionStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BiddingFunctionStateEnum $state = null;
    
    /**
     * The type of the bidding function to be created.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BiddingFunctionTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BiddingFunctionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BiddingFunctionTypeEnum $type = null;
    
	public function __construct()
	{
		$this->biddingFunction = null;
		$this->name = null;
		$this->state = null;
		$this->type = null;
	}
}
