// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ReportDefinitionReportDefinitionReportQueryGroupGroupCondition struct {
	// The compare condition bases' value a
	AtValueA *string `json:"@ValueA,omitempty"`
	// The compare condition bases' value b
	AtValueB *string `json:"@ValueB,omitempty"`
}

type ReportDefinitionReportDefinitionReportQueryGroupGroupFilter struct {
	// The filter bases' is or
	AtIsOr *bool `json:"@IsOr,omitempty"`
	// The filter bases' property
	AtProperty *string `json:"@Property,omitempty"`
	// The filter bases' value
	AtValue *string `json:"@Value,omitempty"`
}

type ReportDefinitionReportDefinitionReportQueryGroupGroupOrder struct {
	// The order by bases' property
	AtProperty *string `json:"@Property,omitempty"`
}

// ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum - The output bases' output
type ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum string

const (
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumElement         ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "Element"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumAttribute       ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "Attribute"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumVariable        ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "Variable"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumVariableSum     ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "VariableSum"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumVariableAppend  ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "VariableAppend"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumVariablePrepend ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "VariablePrepend"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumElementDatePart ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "ElementDatePart"
	ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnumInnerText       ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum = "InnerText"
)

func (e *ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Element":
		fallthrough
	case "Attribute":
		fallthrough
	case "Variable":
		fallthrough
	case "VariableSum":
		fallthrough
	case "VariableAppend":
		fallthrough
	case "VariablePrepend":
		fallthrough
	case "ElementDatePart":
		fallthrough
	case "InnerText":
		*e = ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum: %s", s)
	}
}

type ReportDefinitionReportDefinitionReportQueryGroupGroupOutput struct {
	// The output bases' max length
	AtMaxLength *string `json:"@MaxLength,omitempty"`
	// The output bases' output
	AtOutput *ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum `json:"@Output,omitempty"`
}

type ReportDefinitionReportDefinitionReportQueryGroupGroup struct {
	// The entity groups' group name
	AtGroupName *string `json:"@GroupName,omitempty"`
	// The entity groups' item name
	AtItemName *string `json:"@ItemName,omitempty"`
	// The entity groups' loop expression
	AtLoopExpression *string `json:"@LoopExpression,omitempty"`
	// The entity groups' predicate
	AtPredicate *string `json:"@Predicate,omitempty"`
	// The entity groups' selector
	AtSelector *string `json:"@Selector,omitempty"`
	// The entity groups' unique key variable
	AtUniqueKeyVariable *string `json:"@UniqueKeyVariable,omitempty"`
	// The entity groups' conditions
	Condition []ReportDefinitionReportDefinitionReportQueryGroupGroupCondition `json:"Condition,omitempty"`
	// The entity groups' filters
	Filter []ReportDefinitionReportDefinitionReportQueryGroupGroupFilter `json:"Filter,omitempty"`
	// The entity groups' ordering
	Order []ReportDefinitionReportDefinitionReportQueryGroupGroupOrder `json:"Order,omitempty"`
	// The entity groups' outputs
	Output []ReportDefinitionReportDefinitionReportQueryGroupGroupOutput `json:"Output,omitempty"`
}

// ReportDefinitionReportDefinitionReportQueryGroup - The querys' groups
type ReportDefinitionReportDefinitionReportQueryGroup struct {
	Group []ReportDefinitionReportDefinitionReportQueryGroupGroup `json:"Group,omitempty"`
}

type ReportDefinitionReportDefinitionReportQueryVariableVariable struct {
	// The name value pairs' name
	AtName *string `json:"@Name,omitempty"`
	// The name value pairs' value
	AtValue *string `json:"@Value,omitempty"`
}

// ReportDefinitionReportDefinitionReportQueryVariable - The querys' variables
type ReportDefinitionReportDefinitionReportQueryVariable struct {
	Variable []ReportDefinitionReportDefinitionReportQueryVariableVariable `json:"Variable,omitempty"`
}

// ReportDefinitionReportDefinitionReportQuery - The report definitions' report query
type ReportDefinitionReportDefinitionReportQuery struct {
	// The querys' encoding
	Encoding *string `json:"Encoding,omitempty"`
	// The querys' exclude null or empty elements
	ExcludeNullOrEmptyElements *bool `json:"ExcludeNullOrEmptyElements,omitempty"`
	// The querys' groups
	Groups *ReportDefinitionReportDefinitionReportQueryGroup `json:"Groups,omitempty"`
	// The querys' root node name
	RootNodeName *string `json:"RootNodeName,omitempty"`
	// The querys' suppress metric attributes
	SuppressMetricAttributes *bool `json:"SuppressMetricAttributes,omitempty"`
	// The querys' variables
	Variables *ReportDefinitionReportDefinitionReportQueryVariable `json:"Variables,omitempty"`
}

type ReportDefinitionReportDefinition struct {
	// The report definitions' active
	Active *bool `json:"Active,omitempty"`
	// The report definitions' readonly
	Readonly *bool `json:"Readonly,omitempty"`
	// The report definitions' report query
	ReportQuery *ReportDefinitionReportDefinitionReportQuery `json:"ReportQuery,omitempty"`
	// The report definitions' supported transforms
	SupportedTransforms *string `json:"SupportedTransforms,omitempty"`
	// The report definitions' title
	Title *string `json:"Title,omitempty"`
	// The report definitions' version
	Version *string `json:"Version,omitempty"`
}

// ReportDefinition - The report definition object.
type ReportDefinition struct {
	ReportDefinition *ReportDefinitionReportDefinition `json:"ReportDefinition,omitempty"`
}
