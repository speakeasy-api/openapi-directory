/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Receive slack notifications on Probely events.
 *
 * @remarks
 *
 */
export class SlackIntegration {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve slack integration data
   */
  getTargetsTargetIdIntegrationsSlack(
    req: operations.GetTargetsTargetIdIntegrationsSlackRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdIntegrationsSlackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdIntegrationsSlackRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/slack/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdIntegrationsSlackResponse =
        new operations.GetTargetsTargetIdIntegrationsSlackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slack = utils.objectToClass(httpRes?.data, shared.Slack);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdIntegrationsSlack401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdIntegrationsSlack401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdIntegrationsSlack403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdIntegrationsSlack403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update slack integration data
   */
  patchTargetsTargetIdIntegrationsSlack(
    req: operations.PatchTargetsTargetIdIntegrationsSlackRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdIntegrationsSlackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTargetsTargetIdIntegrationsSlackRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/slack/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "slack",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdIntegrationsSlackResponse =
        new operations.PatchTargetsTargetIdIntegrationsSlackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slack = utils.objectToClass(httpRes?.data, shared.Slack);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsSlack401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsSlack401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsSlack403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsSlack403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdIntegrationsSlack404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdIntegrationsSlack404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update slack integration data
   */
  putTargetsTargetIdIntegrationsSlack(
    req: operations.PutTargetsTargetIdIntegrationsSlackRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdIntegrationsSlackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTargetsTargetIdIntegrationsSlackRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/integrations/slack/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "slack",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdIntegrationsSlackResponse =
        new operations.PutTargetsTargetIdIntegrationsSlackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.slack = utils.objectToClass(httpRes?.data, shared.Slack);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsSlack401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsSlack401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsSlack403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsSlack403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdIntegrationsSlack404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdIntegrationsSlack404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
