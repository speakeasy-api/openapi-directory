// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LunMultiprotocolTypeEnum - The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
type LunMultiprotocolTypeEnum string

const (
	LunMultiprotocolTypeEnumMultiprotocolTypeUnspecified LunMultiprotocolTypeEnum = "MULTIPROTOCOL_TYPE_UNSPECIFIED"
	LunMultiprotocolTypeEnumLinux                        LunMultiprotocolTypeEnum = "LINUX"
)

func (e LunMultiprotocolTypeEnum) ToPointer() *LunMultiprotocolTypeEnum {
	return &e
}

func (e *LunMultiprotocolTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MULTIPROTOCOL_TYPE_UNSPECIFIED":
		fallthrough
	case "LINUX":
		*e = LunMultiprotocolTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LunMultiprotocolTypeEnum: %v", v)
	}
}

// LunStateEnum - The state of this storage volume.
type LunStateEnum string

const (
	LunStateEnumStateUnspecified LunStateEnum = "STATE_UNSPECIFIED"
	LunStateEnumCreating         LunStateEnum = "CREATING"
	LunStateEnumUpdating         LunStateEnum = "UPDATING"
	LunStateEnumReady            LunStateEnum = "READY"
	LunStateEnumDeleting         LunStateEnum = "DELETING"
	LunStateEnumCoolOff          LunStateEnum = "COOL_OFF"
)

func (e LunStateEnum) ToPointer() *LunStateEnum {
	return &e
}

func (e *LunStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "READY":
		fallthrough
	case "DELETING":
		fallthrough
	case "COOL_OFF":
		*e = LunStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LunStateEnum: %v", v)
	}
}

// LunStorageTypeEnum - The storage type for this LUN.
type LunStorageTypeEnum string

const (
	LunStorageTypeEnumStorageTypeUnspecified LunStorageTypeEnum = "STORAGE_TYPE_UNSPECIFIED"
	LunStorageTypeEnumSsd                    LunStorageTypeEnum = "SSD"
	LunStorageTypeEnumHdd                    LunStorageTypeEnum = "HDD"
)

func (e LunStorageTypeEnum) ToPointer() *LunStorageTypeEnum {
	return &e
}

func (e *LunStorageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STORAGE_TYPE_UNSPECIFIED":
		fallthrough
	case "SSD":
		fallthrough
	case "HDD":
		*e = LunStorageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LunStorageTypeEnum: %v", v)
	}
}

// Lun - A storage volume logical unit number (LUN).
type Lun struct {
	// Display if this LUN is a boot LUN.
	BootLun *bool `json:"bootLun,omitempty"`
	// Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
	ExpireTime *string `json:"expireTime,omitempty"`
	// An identifier for the LUN, generated by the backend.
	ID *string `json:"id,omitempty"`
	// Output only. Instances this Lun is attached to.
	Instances []string `json:"instances,omitempty"`
	// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
	MultiprotocolType *LunMultiprotocolTypeEnum `json:"multiprotocolType,omitempty"`
	// Output only. The name of the LUN.
	Name *string `json:"name,omitempty"`
	// Display if this LUN can be shared between multiple physical servers.
	Shareable *bool `json:"shareable,omitempty"`
	// The size of this LUN, in gigabytes.
	SizeGb *string `json:"sizeGb,omitempty"`
	// The state of this storage volume.
	State *LunStateEnum `json:"state,omitempty"`
	// The storage type for this LUN.
	StorageType *LunStorageTypeEnum `json:"storageType,omitempty"`
	// Display the storage volume for this LUN.
	StorageVolume *string `json:"storageVolume,omitempty"`
	// The WWID for this LUN.
	Wwid *string `json:"wwid,omitempty"`
}

// LunInput - A storage volume logical unit number (LUN).
type LunInput struct {
	// Display if this LUN is a boot LUN.
	BootLun *bool `json:"bootLun,omitempty"`
	// An identifier for the LUN, generated by the backend.
	ID *string `json:"id,omitempty"`
	// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
	MultiprotocolType *LunMultiprotocolTypeEnum `json:"multiprotocolType,omitempty"`
	// Display if this LUN can be shared between multiple physical servers.
	Shareable *bool `json:"shareable,omitempty"`
	// The size of this LUN, in gigabytes.
	SizeGb *string `json:"sizeGb,omitempty"`
	// The state of this storage volume.
	State *LunStateEnum `json:"state,omitempty"`
	// The storage type for this LUN.
	StorageType *LunStorageTypeEnum `json:"storageType,omitempty"`
	// Display the storage volume for this LUN.
	StorageVolume *string `json:"storageVolume,omitempty"`
	// The WWID for this LUN.
	Wwid *string `json:"wwid,omitempty"`
}
