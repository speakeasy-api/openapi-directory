"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import system_collections_generic_keyvaluepair_system_string_system_collections_generic_list_system_collections_generic_keyvaluepair_system_int32_system_string_ as shared_system_collections_generic_keyvaluepair_system_string_system_collections_generic_list_system_collections_generic_keyvaluepair_system_int32_system_string_
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesShippingProductService:
    
    can_be_configured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CanBeConfigured'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayName'), 'exclude': lambda f: f is None }})  
    display_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayValue'), 'exclude': lambda f: f is None }})  
    possible_value_lists: Optional[list[shared_system_collections_generic_keyvaluepair_system_string_system_collections_generic_list_system_collections_generic_keyvaluepair_system_int32_system_string_.SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PossibleValueLists'), 'exclude': lambda f: f is None }})  
    requires_user_input: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequiresUserInput'), 'exclude': lambda f: f is None }})  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName'), 'exclude': lambda f: f is None }})  
    type_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeName'), 'exclude': lambda f: f is None }})  
    