// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AnomalyDetectionTaskStatusEnum string

const (
	AnomalyDetectionTaskStatusEnumPending          AnomalyDetectionTaskStatusEnum = "PENDING"
	AnomalyDetectionTaskStatusEnumInProgress       AnomalyDetectionTaskStatusEnum = "IN_PROGRESS"
	AnomalyDetectionTaskStatusEnumCompleted        AnomalyDetectionTaskStatusEnum = "COMPLETED"
	AnomalyDetectionTaskStatusEnumFailed           AnomalyDetectionTaskStatusEnum = "FAILED"
	AnomalyDetectionTaskStatusEnumFailedToSchedule AnomalyDetectionTaskStatusEnum = "FAILED_TO_SCHEDULE"
)

func (e AnomalyDetectionTaskStatusEnum) ToPointer() *AnomalyDetectionTaskStatusEnum {
	return &e
}

func (e *AnomalyDetectionTaskStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		fallthrough
	case "FAILED_TO_SCHEDULE":
		*e = AnomalyDetectionTaskStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnomalyDetectionTaskStatusEnum: %v", v)
	}
}
