// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ProjectOrganizationPermissionEnum - The baseline permission that all organization members have on this project. Only present if owner is an organization.
type ProjectOrganizationPermissionEnum string

const (
	ProjectOrganizationPermissionEnumRead  ProjectOrganizationPermissionEnum = "read"
	ProjectOrganizationPermissionEnumWrite ProjectOrganizationPermissionEnum = "write"
	ProjectOrganizationPermissionEnumAdmin ProjectOrganizationPermissionEnum = "admin"
	ProjectOrganizationPermissionEnumNone  ProjectOrganizationPermissionEnum = "none"
)

func (e *ProjectOrganizationPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		fallthrough
	case "none":
		*e = ProjectOrganizationPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectOrganizationPermissionEnum: %s", s)
	}
}

// Project - Projects are a way to organize columns and cards of work.
type Project struct {
	// Body of the project
	Body       string    `json:"body"`
	ColumnsURL string    `json:"columns_url"`
	CreatedAt  time.Time `json:"created_at"`
	// Simple User
	Creator NullableSimpleUser `json:"creator"`
	HTMLURL string             `json:"html_url"`
	ID      int64              `json:"id"`
	// Name of the project
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	Number int64  `json:"number"`
	// The baseline permission that all organization members have on this project. Only present if owner is an organization.
	OrganizationPermission *ProjectOrganizationPermissionEnum `json:"organization_permission,omitempty"`
	OwnerURL               string                             `json:"owner_url"`
	// Whether or not this project can be seen by everyone. Only present if owner is an organization.
	Private *bool `json:"private,omitempty"`
	// State of the project; either 'open' or 'closed'
	State     string    `json:"state"`
	UpdatedAt time.Time `json:"updated_at"`
	URL       string    `json:"url"`
}
