"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cardholderreceipt as shared_cardholderreceipt
from ..shared import connectivity as shared_connectivity
from ..shared import gratuity as shared_gratuity
from ..shared import hardware as shared_hardware
from ..shared import nexo as shared_nexo
from ..shared import offlineprocessing as shared_offlineprocessing
from ..shared import opi as shared_opi
from ..shared import passcodes as shared_passcodes
from ..shared import payattable as shared_payattable
from ..shared import payment as shared_payment
from ..shared import receiptoptions as shared_receiptoptions
from ..shared import receiptprinting as shared_receiptprinting
from ..shared import signature as shared_signature
from ..shared import standalone as shared_standalone
from ..shared import surcharge as shared_surcharge
from ..shared import timeouts as shared_timeouts
from ..shared import wifiprofiles as shared_wifiprofiles
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TerminalSettings:
    r"""OK - the request has succeeded."""
    
    cardholder_receipt: Optional[shared_cardholderreceipt.CardholderReceipt] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardholderReceipt'), 'exclude': lambda f: f is None }})  
    connectivity: Optional[shared_connectivity.Connectivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectivity'), 'exclude': lambda f: f is None }})  
    gratuities: Optional[list[shared_gratuity.Gratuity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gratuities'), 'exclude': lambda f: f is None }})
    r"""Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip."""  
    hardware: Optional[shared_hardware.Hardware] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardware'), 'exclude': lambda f: f is None }})  
    nexo: Optional[shared_nexo.Nexo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nexo'), 'exclude': lambda f: f is None }})  
    offline_processing: Optional[shared_offlineprocessing.OfflineProcessing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offlineProcessing'), 'exclude': lambda f: f is None }})  
    opi: Optional[shared_opi.Opi] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opi'), 'exclude': lambda f: f is None }})  
    passcodes: Optional[shared_passcodes.Passcodes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passcodes'), 'exclude': lambda f: f is None }})  
    pay_at_table: Optional[shared_payattable.PayAtTable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payAtTable'), 'exclude': lambda f: f is None }})  
    payment: Optional[shared_payment.Payment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment'), 'exclude': lambda f: f is None }})  
    receipt_options: Optional[shared_receiptoptions.ReceiptOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiptOptions'), 'exclude': lambda f: f is None }})  
    receipt_printing: Optional[shared_receiptprinting.ReceiptPrinting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiptPrinting'), 'exclude': lambda f: f is None }})  
    signature: Optional[shared_signature.Signature] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signature'), 'exclude': lambda f: f is None }})  
    standalone: Optional[shared_standalone.Standalone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standalone'), 'exclude': lambda f: f is None }})  
    surcharge: Optional[shared_surcharge.Surcharge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surcharge'), 'exclude': lambda f: f is None }})  
    timeouts: Optional[shared_timeouts.Timeouts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeouts'), 'exclude': lambda f: f is None }})  
    wifi_profiles: Optional[shared_wifiprofiles.WifiProfiles] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiProfiles'), 'exclude': lambda f: f is None }})  
    