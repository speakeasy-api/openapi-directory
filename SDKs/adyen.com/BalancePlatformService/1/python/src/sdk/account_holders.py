"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccountHolders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_account_holders_id(self, request: operations.GetAccountHoldersIDRequest, security: operations.GetAccountHoldersIDSecurity) -> operations.GetAccountHoldersIDResponse:
        r"""Get an account holder
        Returns an account holder.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountHoldersIDRequest, base_url, '/accountHolders/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountHoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountHolder])
                res.account_holder = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_account_holders_id_balance_accounts(self, request: operations.GetAccountHoldersIDBalanceAccountsRequest, security: operations.GetAccountHoldersIDBalanceAccountsSecurity) -> operations.GetAccountHoldersIDBalanceAccountsResponse:
        r"""Get all balance accounts of an account holder
        Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters. 
        
        For example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountHoldersIDBalanceAccountsRequest, base_url, '/accountHolders/{id}/balanceAccounts', request)
        
        query_params = utils.get_query_params(operations.GetAccountHoldersIDBalanceAccountsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountHoldersIDBalanceAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedBalanceAccountsResponse])
                res.paginated_balance_accounts_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_account_holders_id(self, request: operations.PatchAccountHoldersIDRequest, security: operations.PatchAccountHoldersIDSecurity) -> operations.PatchAccountHoldersIDResponse:
        r"""Update an account holder
        Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchAccountHoldersIDRequest, base_url, '/accountHolders/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_holder_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAccountHoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountHolder])
                res.account_holder = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_account_holders(self, request: shared.AccountHolderInfoInput, security: operations.PostAccountHoldersSecurity) -> operations.PostAccountHoldersResponse:
        r"""Create an account holder
        Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accountHolders'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAccountHoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountHolder])
                res.account_holder = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    