"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Apikeys:
    r"""Everything about Otoroshi api keys"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_api_keys(self) -> operations.AllAPIKeysResponse:
        r"""Get all api keys
        Get all api keys
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/apikeys'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllAPIKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.APIKey]])
                res.api_keys = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_key(self, request: operations.APIKeyRequest, security: operations.APIKeySecurity) -> operations.APIKeyResponse:
        r"""Get an api key
        Get an api key for a specified service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeyRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_key_from_group(self, request: operations.APIKeyFromGroupRequest, security: operations.APIKeyFromGroupSecurity) -> operations.APIKeyFromGroupResponse:
        r"""Get an api key
        Get an api key for a specified service group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeyFromGroupRequest, base_url, '/api/groups/{groupId}/apikeys/{clientId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyFromGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_key_from_group_quotas(self, request: operations.APIKeyFromGroupQuotasRequest, security: operations.APIKeyFromGroupQuotasSecurity) -> operations.APIKeyFromGroupQuotasResponse:
        r"""Get the quota state of an api key
        Get the quota state of an api key
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeyFromGroupQuotasRequest, base_url, '/api/groups/{groupId}/apikeys/{clientId}/quotas', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyFromGroupQuotasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Quotas])
                res.quotas = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_key_group(self, request: operations.APIKeyGroupRequest, security: operations.APIKeyGroupSecurity) -> operations.APIKeyGroupResponse:
        r"""Get the group of an api key
        Get the group of an api key
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeyGroupRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}/group', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_key_quotas(self, request: operations.APIKeyQuotasRequest, security: operations.APIKeyQuotasSecurity) -> operations.APIKeyQuotasResponse:
        r"""Get the quota state of an api key
        Get the quota state of an api key
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeyQuotasRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}/quotas', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeyQuotasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Quotas])
                res.quotas = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_keys(self, request: operations.APIKeysRequest, security: operations.APIKeysSecurity) -> operations.APIKeysResponse:
        r"""Get all api keys for the group of a service
        Get all api keys for the group of a service
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeysRequest, base_url, '/api/services/{serviceId}/apikeys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.APIKey]])
                res.api_keys = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def api_keys_from_group(self, request: operations.APIKeysFromGroupRequest, security: operations.APIKeysFromGroupSecurity) -> operations.APIKeysFromGroupResponse:
        r"""Get all api keys for the group of a service
        Get all api keys for the group of a service
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.APIKeysFromGroupRequest, base_url, '/api/groups/{groupId}/apikeys', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.APIKeysFromGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.APIKey]])
                res.api_keys = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_api_key(self, request: operations.CreateAPIKeyRequest, security: operations.CreateAPIKeySecurity) -> operations.CreateAPIKeyResponse:
        r"""Create a new api key for a service"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAPIKeyRequest, base_url, '/api/services/{serviceId}/apikeys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_key", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_api_key_from_group(self, request: operations.CreateAPIKeyFromGroupRequest, security: operations.CreateAPIKeyFromGroupSecurity) -> operations.CreateAPIKeyFromGroupResponse:
        r"""Create a new api key for a group
        Create a new api key for a group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAPIKeyFromGroupRequest, base_url, '/api/groups/{groupId}/apikeys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_key", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAPIKeyFromGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_api_key(self, request: operations.DeleteAPIKeyRequest, security: operations.DeleteAPIKeySecurity) -> operations.DeleteAPIKeyResponse:
        r"""Delete an api key
        Delete an api key for a specified service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIKeyRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_api_key_from_group(self, request: operations.DeleteAPIKeyFromGroupRequest, security: operations.DeleteAPIKeyFromGroupSecurity) -> operations.DeleteAPIKeyFromGroupResponse:
        r"""Delete an api key
        Delete an api key for a specified service group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIKeyFromGroupRequest, base_url, '/api/groups/{groupId}/apikeys/{clientId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIKeyFromGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_api_key(self, request: operations.PatchAPIKeyRequest, security: operations.PatchAPIKeySecurity) -> operations.PatchAPIKeyResponse:
        r"""Update an api key with a diff
        Update an api key for a specified service descriptor with a diff
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchAPIKeyRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_api_key_from_group(self, request: operations.PatchAPIKeyFromGroupRequest, security: operations.PatchAPIKeyFromGroupSecurity) -> operations.PatchAPIKeyFromGroupResponse:
        r"""Update an api key with a diff
        Update an api key for a specified service descriptor with a diff
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchAPIKeyFromGroupRequest, base_url, '/api/groups/{groupId}/apikeys/{clientId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAPIKeyFromGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def reset_api_key_from_group_quotas(self, request: operations.ResetAPIKeyFromGroupQuotasRequest, security: operations.ResetAPIKeyFromGroupQuotasSecurity) -> operations.ResetAPIKeyFromGroupQuotasResponse:
        r"""Reset the quota state of an api key
        Reset the quota state of an api key
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResetAPIKeyFromGroupQuotasRequest, base_url, '/api/groups/{groupId}/apikeys/{clientId}/quotas', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetAPIKeyFromGroupQuotasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Quotas])
                res.quotas = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def reset_api_key_quotas(self, request: operations.ResetAPIKeyQuotasRequest, security: operations.ResetAPIKeyQuotasSecurity) -> operations.ResetAPIKeyQuotasResponse:
        r"""Reset the quota state of an api key
        Reset the quota state of an api key
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResetAPIKeyQuotasRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}/quotas', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetAPIKeyQuotasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Quotas])
                res.quotas = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_api_key(self, request: operations.UpdateAPIKeyRequest, security: operations.UpdateAPIKeySecurity) -> operations.UpdateAPIKeyResponse:
        r"""Update an api key
        Update an api key for a specified service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAPIKeyRequest, base_url, '/api/services/{serviceId}/apikeys/{clientId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_key", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_api_key_from_group(self, request: operations.UpdateAPIKeyFromGroupRequest, security: operations.UpdateAPIKeyFromGroupSecurity) -> operations.UpdateAPIKeyFromGroupResponse:
        r"""Update an api key
        Update an api key for a specified service group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAPIKeyFromGroupRequest, base_url, '/api/groups/{groupId}/apikeys/{clientId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_key", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAPIKeyFromGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    