/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Configuration } from "./configuration";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class DescribeEventConfigurationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata({ elemType: Configuration })
  @Expose({ name: "eventConfigurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Configuration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Configuration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  eventConfigurations?: Record<string, Configuration>;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedDate?: Date;
}
