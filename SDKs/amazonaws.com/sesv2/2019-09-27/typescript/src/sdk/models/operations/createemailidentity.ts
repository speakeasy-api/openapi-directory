/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM
 */
export class CreateEmailIdentityRequestBodyDkimSigningAttributes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DomainSigningPrivateKey" })
  domainSigningPrivateKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DomainSigningSelector" })
  domainSigningSelector?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "NextSigningKeyLength" })
  nextSigningKeyLength?: shared.DkimSigningKeyLengthEnum;
}

export class CreateEmailIdentityRequestBody extends SpeakeasyBase {
  /**
   * <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConfigurationSetName" })
  configurationSetName?: string;

  /**
   * An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DkimSigningAttributes" })
  @Type(() => CreateEmailIdentityRequestBodyDkimSigningAttributes)
  dkimSigningAttributes?: CreateEmailIdentityRequestBodyDkimSigningAttributes;

  /**
   * The email address or domain to verify.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmailIdentity" })
  emailIdentity: string;

  /**
   * An array of objects that define the tags (keys and values) to associate with the email identity.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "Tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateEmailIdentityRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateEmailIdentityRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateEmailIdentityResponse extends SpeakeasyBase {
  /**
   * AlreadyExistsException
   */
  @SpeakeasyMetadata()
  alreadyExistsException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createEmailIdentityResponse?: shared.CreateEmailIdentityResponse;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
