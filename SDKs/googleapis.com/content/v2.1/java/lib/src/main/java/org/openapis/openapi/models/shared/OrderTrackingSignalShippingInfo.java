/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderTrackingSignalShippingInfo - The shipping information for the order.
 */
public class OrderTrackingSignalShippingInfo {
    /**
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actualDeliveryTime")
    public DateTime actualDeliveryTime;

    public OrderTrackingSignalShippingInfo withActualDeliveryTime(DateTime actualDeliveryTime) {
        this.actualDeliveryTime = actualDeliveryTime;
        return this;
    }
    
    /**
     * The name of the shipping carrier for the delivery. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrierName")
    public String carrierName;

    public OrderTrackingSignalShippingInfo withCarrierName(String carrierName) {
        this.carrierName = carrierName;
        return this;
    }
    
    /**
     * The service type for fulfillment, e.g., GROUND, FIRST_CLASS, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrierServiceName")
    public String carrierServiceName;

    public OrderTrackingSignalShippingInfo withCarrierServiceName(String carrierServiceName) {
        this.carrierServiceName = carrierServiceName;
        return this;
    }
    
    /**
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earliestDeliveryPromiseTime")
    public DateTime earliestDeliveryPromiseTime;

    public OrderTrackingSignalShippingInfo withEarliestDeliveryPromiseTime(DateTime earliestDeliveryPromiseTime) {
        this.earliestDeliveryPromiseTime = earliestDeliveryPromiseTime;
        return this;
    }
    
    /**
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latestDeliveryPromiseTime")
    public DateTime latestDeliveryPromiseTime;

    public OrderTrackingSignalShippingInfo withLatestDeliveryPromiseTime(DateTime latestDeliveryPromiseTime) {
        this.latestDeliveryPromiseTime = latestDeliveryPromiseTime;
        return this;
    }
    
    /**
     * The origin postal code, as a continuous string without spaces or dashes, e.g. "95016". This field will be anonymized in returned OrderTrackingSignal creation response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originPostalCode")
    public String originPostalCode;

    public OrderTrackingSignalShippingInfo withOriginPostalCode(String originPostalCode) {
        this.originPostalCode = originPostalCode;
        return this;
    }
    
    /**
     * The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping origin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originRegionCode")
    public String originRegionCode;

    public OrderTrackingSignalShippingInfo withOriginRegionCode(String originRegionCode) {
        this.originRegionCode = originRegionCode;
        return this;
    }
    
    /**
     * Required. The shipment ID. This field will be hashed in returned OrderTrackingSignal creation response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipmentId")
    public String shipmentId;

    public OrderTrackingSignalShippingInfo withShipmentId(String shipmentId) {
        this.shipmentId = shipmentId;
        return this;
    }
    
    /**
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippedTime")
    public DateTime shippedTime;

    public OrderTrackingSignalShippingInfo withShippedTime(DateTime shippedTime) {
        this.shippedTime = shippedTime;
        return this;
    }
    
    /**
     * The status of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingStatus")
    public OrderTrackingSignalShippingInfoShippingStatusEnum shippingStatus;

    public OrderTrackingSignalShippingInfo withShippingStatus(OrderTrackingSignalShippingInfoShippingStatusEnum shippingStatus) {
        this.shippingStatus = shippingStatus;
        return this;
    }
    
    /**
     * The tracking ID of the shipment. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingId")
    public String trackingId;

    public OrderTrackingSignalShippingInfo withTrackingId(String trackingId) {
        this.trackingId = trackingId;
        return this;
    }
    
    public OrderTrackingSignalShippingInfo(){}
}
