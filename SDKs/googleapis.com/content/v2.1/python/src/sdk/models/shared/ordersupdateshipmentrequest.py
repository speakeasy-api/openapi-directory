"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orderscustombatchrequestentryupdateshipmentscheduleddeliverydetails as shared_orderscustombatchrequestentryupdateshipmentscheduleddeliverydetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrdersUpdateShipmentRequest:
    
    carrier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier'), 'exclude': lambda f: f is None }})
    r"""The carrier handling the shipment. Not updated if missing. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values."""  
    delivery_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryDate'), 'exclude': lambda f: f is None }})
    r"""Date on which the shipment has been delivered, in ISO 8601 format. Optional and can be provided only if `status` is `delivered`."""  
    last_pickup_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastPickupDate'), 'exclude': lambda f: f is None }})
    r"""Date after which the pickup will expire, in ISO 8601 format. Required only when order is buy-online-pickup-in-store(BOPIS) and `status` is `ready for pickup`."""  
    operation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationId'), 'exclude': lambda f: f is None }})
    r"""The ID of the operation. Unique across all operations for a given order."""  
    ready_pickup_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readyPickupDate'), 'exclude': lambda f: f is None }})
    r"""Date on which the shipment has been ready for pickup, in ISO 8601 format. Optional and can be provided only if `status` is `ready for pickup`."""  
    scheduled_delivery_details: Optional[shared_orderscustombatchrequestentryupdateshipmentscheduleddeliverydetails.OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledDeliveryDetails'), 'exclude': lambda f: f is None }})
    r"""ScheduledDeliveryDetails used to update the scheduled delivery order."""  
    shipment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipmentId'), 'exclude': lambda f: f is None }})
    r"""The ID of the shipment."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""New status for the shipment. Not updated if missing. Acceptable values are: - \\"`delivered`\\" - \\"`undeliverable`\\" - \\"`readyForPickup`\\" """  
    tracking_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingId'), 'exclude': lambda f: f is None }})
    r"""The tracking ID for the shipment. Not updated if missing."""  
    undelivered_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('undeliveredDate'), 'exclude': lambda f: f is None }})
    r"""Date on which the shipment has been undeliverable, in ISO 8601 format. Optional and can be provided only if `status` is `undeliverable`."""  
    