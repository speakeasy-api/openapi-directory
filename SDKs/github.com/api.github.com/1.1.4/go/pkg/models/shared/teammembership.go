// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TeamMembershipRoleEnum - The role of the user in the team.
type TeamMembershipRoleEnum string

const (
	TeamMembershipRoleEnumMember     TeamMembershipRoleEnum = "member"
	TeamMembershipRoleEnumMaintainer TeamMembershipRoleEnum = "maintainer"
)

func (e *TeamMembershipRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "member":
		fallthrough
	case "maintainer":
		*e = TeamMembershipRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamMembershipRoleEnum: %s", s)
	}
}

// TeamMembershipStateEnum - The state of the user's membership in the team.
type TeamMembershipStateEnum string

const (
	TeamMembershipStateEnumActive  TeamMembershipStateEnum = "active"
	TeamMembershipStateEnumPending TeamMembershipStateEnum = "pending"
)

func (e *TeamMembershipStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "pending":
		*e = TeamMembershipStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamMembershipStateEnum: %s", s)
	}
}

// TeamMembership - Team Membership
type TeamMembership struct {
	// The role of the user in the team.
	Role TeamMembershipRoleEnum `json:"role"`
	// The state of the user's membership in the team.
	State TeamMembershipStateEnum `json:"state"`
	URL   string                  `json:"url"`
}
