"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitymapping as shared_entitymapping
from ..shared import functionentity as shared_functionentity
from ..shared import packageentity as shared_packageentity
from ..shared import schemaentity as shared_schemaentity
from ..shared import sequenceentity as shared_sequenceentity
from ..shared import storedprocedureentity as shared_storedprocedureentity
from ..shared import synonymentity as shared_synonymentity
from ..shared import tableentity as shared_tableentity
from ..shared import viewentity as shared_viewentity
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DatabaseEntityEntityTypeEnum(str, Enum):
    r"""The type of the database entity (table, view, index, ...)."""
    DATABASE_ENTITY_TYPE_UNSPECIFIED = 'DATABASE_ENTITY_TYPE_UNSPECIFIED'
    DATABASE_ENTITY_TYPE_SCHEMA = 'DATABASE_ENTITY_TYPE_SCHEMA'
    DATABASE_ENTITY_TYPE_TABLE = 'DATABASE_ENTITY_TYPE_TABLE'
    DATABASE_ENTITY_TYPE_COLUMN = 'DATABASE_ENTITY_TYPE_COLUMN'
    DATABASE_ENTITY_TYPE_CONSTRAINT = 'DATABASE_ENTITY_TYPE_CONSTRAINT'
    DATABASE_ENTITY_TYPE_INDEX = 'DATABASE_ENTITY_TYPE_INDEX'
    DATABASE_ENTITY_TYPE_TRIGGER = 'DATABASE_ENTITY_TYPE_TRIGGER'
    DATABASE_ENTITY_TYPE_VIEW = 'DATABASE_ENTITY_TYPE_VIEW'
    DATABASE_ENTITY_TYPE_SEQUENCE = 'DATABASE_ENTITY_TYPE_SEQUENCE'
    DATABASE_ENTITY_TYPE_STORED_PROCEDURE = 'DATABASE_ENTITY_TYPE_STORED_PROCEDURE'
    DATABASE_ENTITY_TYPE_FUNCTION = 'DATABASE_ENTITY_TYPE_FUNCTION'
    DATABASE_ENTITY_TYPE_SYNONYM = 'DATABASE_ENTITY_TYPE_SYNONYM'
    DATABASE_ENTITY_TYPE_DATABASE_PACKAGE = 'DATABASE_ENTITY_TYPE_DATABASE_PACKAGE'
    DATABASE_ENTITY_TYPE_UDT = 'DATABASE_ENTITY_TYPE_UDT'
    DATABASE_ENTITY_TYPE_MATERIAL_VIEW = 'DATABASE_ENTITY_TYPE_MATERIAL_VIEW'
    DATABASE_ENTITY_TYPE_DATABASE = 'DATABASE_ENTITY_TYPE_DATABASE'

class DatabaseEntityTreeEnum(str, Enum):
    r"""The type of tree the entity belongs to."""
    TREE_TYPE_UNSPECIFIED = 'TREE_TYPE_UNSPECIFIED'
    SOURCE = 'SOURCE'
    DRAFT = 'DRAFT'
    DESTINATION = 'DESTINATION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DatabaseEntity:
    r"""The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type."""
    
    database_function: Optional[shared_functionentity.FunctionEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseFunction'), 'exclude': lambda f: f is None }})
    r"""Function's parent is a schema."""  
    database_package: Optional[shared_packageentity.PackageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databasePackage'), 'exclude': lambda f: f is None }})
    r"""Package's parent is a schema."""  
    entity_type: Optional[DatabaseEntityEntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityType'), 'exclude': lambda f: f is None }})
    r"""The type of the database entity (table, view, index, ...)."""  
    mappings: Optional[list[shared_entitymapping.EntityMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mappings'), 'exclude': lambda f: f is None }})
    r"""Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details."""  
    parent_entity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentEntity'), 'exclude': lambda f: f is None }})
    r"""The full name of the parent entity (e.g. schema name)."""  
    schema: Optional[shared_schemaentity.SchemaEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schema'), 'exclude': lambda f: f is None }})
    r"""Schema typically has no parent entity, but can have a parent entity DatabaseInstance (for database engines which support it). For some database engines, the terms schema and user can be used interchangeably when they refer to a namespace or a collection of other database entities. Can store additional information which is schema specific."""  
    sequence: Optional[shared_sequenceentity.SequenceEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence'), 'exclude': lambda f: f is None }})
    r"""Sequence's parent is a schema."""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""The short name (e.g. table name) of the entity."""  
    stored_procedure: Optional[shared_storedprocedureentity.StoredProcedureEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storedProcedure'), 'exclude': lambda f: f is None }})
    r"""Stored procedure's parent is a schema."""  
    synonym: Optional[shared_synonymentity.SynonymEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('synonym'), 'exclude': lambda f: f is None }})
    r"""Synonym's parent is a schema."""  
    table: Optional[shared_tableentity.TableEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('table'), 'exclude': lambda f: f is None }})
    r"""Table's parent is a schema."""  
    tree: Optional[DatabaseEntityTreeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tree'), 'exclude': lambda f: f is None }})
    r"""The type of tree the entity belongs to."""  
    view: Optional[shared_viewentity.ViewEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""View's parent is a schema."""  
    