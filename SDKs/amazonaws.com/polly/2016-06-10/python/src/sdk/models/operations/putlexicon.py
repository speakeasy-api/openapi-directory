"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutLexiconRequestBody:
    
    content: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content') }})
    r"""Content of the PLS lexicon as string data."""  
    

@dataclasses.dataclass
class PutLexiconRequest:
    
    lexicon_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'LexiconName', 'style': 'simple', 'explode': False }})
    r"""Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long."""  
    request_body: PutLexiconRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutLexiconResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_lexicon_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidLexiconException"""  
    lexicon_size_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LexiconSizeExceededException"""  
    max_lexeme_length_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaxLexemeLengthExceededException"""  
    max_lexicons_number_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaxLexiconsNumberExceededException"""  
    put_lexicon_output: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceFailureException"""  
    unsupported_pls_alphabet_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedPlsAlphabetException"""  
    unsupported_pls_language_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedPlsLanguageException"""  
    