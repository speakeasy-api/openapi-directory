/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Players {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.
   */
  gamesPlayersGet(
    req: operations.GamesPlayersGetRequest,
    security: operations.GamesPlayersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesPlayersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesPlayersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/players/{playerId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesPlayersGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesPlayersGetResponse =
        new operations.GamesPlayersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.player = utils.objectToClass(httpRes?.data, shared.Player);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the application player ids for the currently authenticated player across all requested games by the same developer as the calling application. This will only return ids for players that actually have an id (scoped or otherwise) with that game.
   */
  gamesPlayersGetMultipleApplicationPlayerIds(
    req: operations.GamesPlayersGetMultipleApplicationPlayerIdsRequest,
    security: operations.GamesPlayersGetMultipleApplicationPlayerIdsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesPlayersGetMultipleApplicationPlayerIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesPlayersGetMultipleApplicationPlayerIdsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/games/v1/players/me/multipleApplicationPlayerIds";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesPlayersGetMultipleApplicationPlayerIdsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesPlayersGetMultipleApplicationPlayerIdsResponse =
        new operations.GamesPlayersGetMultipleApplicationPlayerIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMultipleApplicationPlayerIdsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetMultipleApplicationPlayerIdsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves scoped player identifiers for currently authenticated user.
   */
  gamesPlayersGetScopedPlayerIds(
    req: operations.GamesPlayersGetScopedPlayerIdsRequest,
    security: operations.GamesPlayersGetScopedPlayerIdsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesPlayersGetScopedPlayerIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesPlayersGetScopedPlayerIdsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/games/v1/players/me/scopedIds";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesPlayersGetScopedPlayerIdsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesPlayersGetScopedPlayerIdsResponse =
        new operations.GamesPlayersGetScopedPlayerIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scopedPlayerIds = utils.objectToClass(
              httpRes?.data,
              shared.ScopedPlayerIds
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the collection of players for the currently authenticated user.
   */
  gamesPlayersList(
    req: operations.GamesPlayersListRequest,
    security: operations.GamesPlayersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesPlayersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesPlayersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/players/me/players/{collection}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesPlayersListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesPlayersListResponse =
        new operations.GamesPlayersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerListResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlayerListResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
