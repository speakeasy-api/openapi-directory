/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ObjectAccessControls {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Permanently deletes the ACL entry for the specified entity on the specified object.
   */
  storageObjectAccessControlsDelete(
    req: operations.StorageObjectAccessControlsDeleteRequest,
    security: operations.StorageObjectAccessControlsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageObjectAccessControlsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageObjectAccessControlsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/b/{bucket}/o/{object}/acl/{entity}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageObjectAccessControlsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageObjectAccessControlsDeleteResponse =
        new operations.StorageObjectAccessControlsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns the ACL entry for the specified entity on the specified object.
   */
  storageObjectAccessControlsGet(
    req: operations.StorageObjectAccessControlsGetRequest,
    security: operations.StorageObjectAccessControlsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageObjectAccessControlsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageObjectAccessControlsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/b/{bucket}/o/{object}/acl/{entity}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageObjectAccessControlsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageObjectAccessControlsGetResponse =
        new operations.StorageObjectAccessControlsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectAccessControl = utils.objectToClass(
              httpRes?.data,
              shared.ObjectAccessControl
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new ACL entry on the specified object.
   */
  storageObjectAccessControlsInsert(
    req: operations.StorageObjectAccessControlsInsertRequest,
    security: operations.StorageObjectAccessControlsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageObjectAccessControlsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageObjectAccessControlsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/b/{bucket}/o/{object}/acl",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "objectAccessControl",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageObjectAccessControlsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageObjectAccessControlsInsertResponse =
        new operations.StorageObjectAccessControlsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectAccessControl = utils.objectToClass(
              httpRes?.data,
              shared.ObjectAccessControl
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves ACL entries on the specified object.
   */
  storageObjectAccessControlsList(
    req: operations.StorageObjectAccessControlsListRequest,
    security: operations.StorageObjectAccessControlsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageObjectAccessControlsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageObjectAccessControlsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/b/{bucket}/o/{object}/acl",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageObjectAccessControlsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageObjectAccessControlsListResponse =
        new operations.StorageObjectAccessControlsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectAccessControls = utils.objectToClass(
              httpRes?.data,
              shared.ObjectAccessControls
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an ACL entry on the specified object. This method supports patch semantics.
   */
  storageObjectAccessControlsPatch(
    req: operations.StorageObjectAccessControlsPatchRequest,
    security: operations.StorageObjectAccessControlsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageObjectAccessControlsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageObjectAccessControlsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/b/{bucket}/o/{object}/acl/{entity}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "objectAccessControl",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageObjectAccessControlsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageObjectAccessControlsPatchResponse =
        new operations.StorageObjectAccessControlsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectAccessControl = utils.objectToClass(
              httpRes?.data,
              shared.ObjectAccessControl
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an ACL entry on the specified object.
   */
  storageObjectAccessControlsUpdate(
    req: operations.StorageObjectAccessControlsUpdateRequest,
    security: operations.StorageObjectAccessControlsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageObjectAccessControlsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageObjectAccessControlsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/b/{bucket}/o/{object}/acl/{entity}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "objectAccessControl",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageObjectAccessControlsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageObjectAccessControlsUpdateResponse =
        new operations.StorageObjectAccessControlsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectAccessControl = utils.objectToClass(
              httpRes?.data,
              shared.ObjectAccessControl
            );
          }
          break;
      }

      return res;
    });
  }
}
