/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Authorization } from "./authorization";
import { CheckAPIUsage } from "./checkapiusage";
import { LanguageDatasets } from "./languagedatasets";
import { LanguageExamples } from "./languageexamples";
import { LanguageModels } from "./languagemodels";
import { LanguagePrediction } from "./languageprediction";
import { LanguageTraining } from "./languagetraining";
import { VisionDatasets } from "./visiondatasets";
import { VisionExamples } from "./visionexamples";
import { VisionModels } from "./visionmodels";
import { VisionPrediction } from "./visionprediction";
import { VisionTraining } from "./visiontraining";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://salesforce.local"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * @see {@link https://metamind.readme.io} - For more information, see the Einstein Platform Services Developer Guide
 */
export class SDK {
  /**
   * Resources that manage authorization tokens.
   */
  public authorization: Authorization;
  /**
   * Resources that let you get API usage information.
   */
  public checkAPIUsage: CheckAPIUsage;
  /**
   * Resources that manage text datasets.
   */
  public languageDatasets: LanguageDatasets;
  /**
   * Resources that manage text examples.
   */
  public languageExamples: LanguageExamples;
  /**
   * Resources that manage text models and model metrics.
   */
  public languageModels: LanguageModels;
  /**
   * Resources that return predictions for text input.
   */
  public languagePrediction: LanguagePrediction;
  /**
   * Resources that handle text dataset training.
   */
  public languageTraining: LanguageTraining;
  /**
   * Resources that manage image datasets.
   */
  public visionDatasets: VisionDatasets;
  /**
   * Resources that manage image examples.
   */
  public visionExamples: VisionExamples;
  /**
   * Resources that manage image models and model metrics.
   */
  public visionModels: VisionModels;
  /**
   * Resources that return predictions for image input.
   */
  public visionPrediction: VisionPrediction;
  /**
   * Resources that handle image dataset training.
   */
  public visionTraining: VisionTraining;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.authorization = new Authorization(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.checkAPIUsage = new CheckAPIUsage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.languageDatasets = new LanguageDatasets(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.languageExamples = new LanguageExamples(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.languageModels = new LanguageModels(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.languagePrediction = new LanguagePrediction(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.languageTraining = new LanguageTraining(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.visionDatasets = new VisionDatasets(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.visionExamples = new VisionExamples(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.visionModels = new VisionModels(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.visionPrediction = new VisionPrediction(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.visionTraining = new VisionTraining(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
