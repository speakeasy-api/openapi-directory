/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MemberInvitedEvent - Member Invited
 */
public class MemberInvitedEvent {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public MemberInvitedEventLinks links;
    public MemberInvitedEvent withLinks(MemberInvitedEventLinks links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public Member body;
    public MemberInvitedEvent withBody(Member body) {
        this.body = body;
        return this;
    }
    
    /**
     * The member ID of the sender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public String from;
    public MemberInvitedEvent withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * The ID of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public MemberInvitedEvent withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The time that the event happened
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    public String timestamp;
    public MemberInvitedEvent withTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * The event type (`member:invited`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public MemberInvitedEvent withType(String type) {
        this.type = type;
        return this;
    }
    
}
