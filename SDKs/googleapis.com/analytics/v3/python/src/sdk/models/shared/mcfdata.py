"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class McfDataColumnHeaders:
    
    column_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnType'), 'exclude': lambda f: f is None }})
    r"""Column Type. Either DIMENSION or METRIC."""  
    data_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})
    r"""Data type. Dimension and metric values data types such as INTEGER, DOUBLE, CURRENCY, MCF_SEQUENCE etc."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Column name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class McfDataProfileInfo:
    r"""Information for the view (profile), for which the Analytics data was requested."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this view (profile) belongs."""  
    internal_web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalWebPropertyId'), 'exclude': lambda f: f is None }})
    r"""Internal ID for the web property to which this view (profile) belongs."""  
    profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileId'), 'exclude': lambda f: f is None }})
    r"""View (Profile) ID."""  
    profile_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileName'), 'exclude': lambda f: f is None }})
    r"""View (Profile) name."""  
    table_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableId'), 'exclude': lambda f: f is None }})
    r"""Table ID for view (profile)."""  
    web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyId'), 'exclude': lambda f: f is None }})
    r"""Web Property ID to which this view (profile) belongs."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class McfDataQuery:
    r"""Analytics data request query parameters."""
    
    dimensions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensions'), 'exclude': lambda f: f is None }})
    r"""List of analytics dimensions."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end-date'), 'exclude': lambda f: f is None }})
    r"""End date."""  
    filters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of dimension or metric filters."""  
    ids: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ids'), 'exclude': lambda f: f is None }})
    r"""Unique table ID."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max-results'), 'exclude': lambda f: f is None }})
    r"""Maximum results per page."""  
    metrics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""List of analytics metrics."""  
    sampling_level: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samplingLevel'), 'exclude': lambda f: f is None }})
    r"""Desired sampling level"""  
    segment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segment'), 'exclude': lambda f: f is None }})
    r"""Analytics advanced segment."""  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort'), 'exclude': lambda f: f is None }})
    r"""List of dimensions or metrics based on which Analytics data is sorted."""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start-date'), 'exclude': lambda f: f is None }})
    r"""Start date."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start-index'), 'exclude': lambda f: f is None }})
    r"""Start index."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class McfDataRowsConversionPathValue:
    
    interaction_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactionType'), 'exclude': lambda f: f is None }})
    r"""Type of an interaction on conversion path. Such as CLICK, IMPRESSION etc."""  
    node_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeValue'), 'exclude': lambda f: f is None }})
    r"""Node value of an interaction on conversion path. Such as source, medium etc."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class McfDataRows:
    r"""A union object representing a dimension or metric value. Only one of \\"primitiveValue\\" or \\"conversionPathValue\\" attribute will be populated."""
    
    conversion_path_value: Optional[list[McfDataRowsConversionPathValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionPathValue'), 'exclude': lambda f: f is None }})
    r"""A conversion path dimension value, containing a list of interactions with their attributes."""  
    primitive_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primitiveValue'), 'exclude': lambda f: f is None }})
    r"""A primitive dimension value. A primitive metric value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class McfData:
    r"""Multi-Channel Funnels data for a given view (profile)."""
    
    column_headers: Optional[list[McfDataColumnHeaders]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnHeaders'), 'exclude': lambda f: f is None }})
    r"""Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request."""  
    contains_sampled_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containsSampledData'), 'exclude': lambda f: f is None }})
    r"""Determines if the Analytics data contains sampled data."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique ID for this data response."""  
    items_per_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsPerPage'), 'exclude': lambda f: f is None }})
    r"""The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type."""  
    next_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextLink'), 'exclude': lambda f: f is None }})
    r"""Link to next page for this Analytics data query."""  
    previous_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousLink'), 'exclude': lambda f: f is None }})
    r"""Link to previous page for this Analytics data query."""  
    profile_info: Optional[McfDataProfileInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileInfo'), 'exclude': lambda f: f is None }})
    r"""Information for the view (profile), for which the Analytics data was requested."""  
    query: Optional[McfDataQuery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""Analytics data request query parameters."""  
    rows: Optional[list[list[McfDataRows]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rows'), 'exclude': lambda f: f is None }})
    r"""Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request."""  
    sample_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleSize'), 'exclude': lambda f: f is None }})
    r"""The number of samples used to calculate the result."""  
    sample_space: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleSpace'), 'exclude': lambda f: f is None }})
    r"""Total size of the sample space from which the samples were selected."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""Link to this page."""  
    total_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalResults'), 'exclude': lambda f: f is None }})
    r"""The total number of rows for the query, regardless of the number of rows in the response."""  
    totals_for_all_results: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalsForAllResults'), 'exclude': lambda f: f is None }})
    r"""Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request."""  
    