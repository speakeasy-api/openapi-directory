/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BasicAuth } from "./basicauth";
import { ChangedBy } from "./changedby";
import { Cookies } from "./cookies";
import { FormLogin } from "./formlogin";
import { Headers } from "./headers";
import { VerificationMethodEnum } from "./verificationmethodenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Main resource associated with a target
 */
export class SiteInput extends SpeakeasyBase {
  /**
   * Basic authentication credentials
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basic_auth" })
  @Type(() => BasicAuth)
  basicAuth?: BasicAuth;

  /**
   * Custom cookies name/value pairs
   */
  @SpeakeasyMetadata({ elemType: Cookies })
  @Expose({ name: "cookies" })
  @Type(() => Cookies)
  cookies?: Cookies[];

  /**
   * Custom description for the resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "desc" })
  desc?: string;

  /**
   * Form login field name, field input pairs
   */
  @SpeakeasyMetadata({ elemType: FormLogin })
  @Expose({ name: "form_login" })
  @Type(() => FormLogin)
  formLogin?: FormLogin[];

  /**
   * Pattern to check successful authentication (not used)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_login_check_pattern" })
  formLoginCheckPattern?: string;

  /**
   * URL for the form login
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_login_url" })
  formLoginUrl?: string;

  /**
   * Use basic authentication in scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_basic_auth" })
  hasBasicAuth?: boolean;

  /**
   * Does the resource use form login
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_form_login" })
  hasFormLogin?: boolean;

  /**
   * Custom headers name value pairs
   */
  @SpeakeasyMetadata({ elemType: Headers })
  @Expose({ name: "headers" })
  @Type(() => Headers)
  headers?: Headers[];

  /**
   * Custom name for the resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Site URL, it should include the path if the site is not located at the root. This URL can only be set once.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "whitelist" })
  whitelist?: string[];
}

/**
 * Main resource associated with a target
 */
export class Site extends SpeakeasyBase {
  /**
   * Basic authentication credentials
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basic_auth" })
  @Type(() => BasicAuth)
  basicAuth?: BasicAuth;

  /**
   * Date time of the last change
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  changed?: Date;

  /**
   * User that last modified the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed_by" })
  @Type(() => ChangedBy)
  changedBy?: ChangedBy;

  /**
   * Custom cookies name/value pairs
   */
  @SpeakeasyMetadata({ elemType: Cookies })
  @Expose({ name: "cookies" })
  @Type(() => Cookies)
  cookies?: Cookies[];

  /**
   * Custom description for the resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "desc" })
  desc?: string;

  /**
   * Form login field name, field input pairs
   */
  @SpeakeasyMetadata({ elemType: FormLogin })
  @Expose({ name: "form_login" })
  @Type(() => FormLogin)
  formLogin?: FormLogin[];

  /**
   * Pattern to check successful authentication (not used)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_login_check_pattern" })
  formLoginCheckPattern?: string;

  /**
   * URL for the form login
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form_login_url" })
  formLoginUrl?: string;

  /**
   * Use basic authentication in scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_basic_auth" })
  hasBasicAuth?: boolean;

  /**
   * Does the resource use form login
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_form_login" })
  hasFormLogin?: boolean;

  /**
   * Custom headers name value pairs
   */
  @SpeakeasyMetadata({ elemType: Headers })
  @Expose({ name: "headers" })
  @Type(() => Headers)
  headers?: Headers[];

  /**
   * Site host
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * Object id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Custom name for the resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * List of frameworks detected on this resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stack" })
  stack?: string[];

  /**
   * Site URL, it should include the path if the site is not located at the root. This URL can only be set once.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * Verification date time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verification_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  verificationDate?: Date;

  /**
   * Reason for last verification failure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verification_last_error" })
  verificationLastError?: string;

  /**
   * Type of verification:
   *
   * @remarks
   * * dns - we look or a TXT record on the host you registered containing
   * `Probely=<verification_token>`
   * * file - on the root of the path you registered we look for a file
   * named `<verification token>` containing `Probely`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verification_method" })
  verificationMethod?: VerificationMethodEnum;

  /**
   * Token used to verify
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verification_token" })
  verificationToken?: string;

  /**
   * Has resource ownership been verified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verified" })
  verified?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "whitelist" })
  whitelist?: string[];
}
