<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Orders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * layoutApiGetList
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\LayoutApiGetListResponse
     */
	public function layoutApiGetList(
    ): \OpenAPI\OpenAPI\Models\Operations\LayoutApiGetListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/layouts');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LayoutApiGetListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Add a shipment to a given order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentFormResponse
     */
	public function orderApiAddShipmentForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/shipment', \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiAddShipmentForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiAddShipmentForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a shipment to a given order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentJsonResponse
     */
	public function orderApiAddShipmentJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/shipment', \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiAddShipmentJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiAddShipmentJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a shipment to a given order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentRawResponse
     */
	public function orderApiAddShipmentRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/shipment', \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiAddShipmentRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiAddShipmentRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiAddShipmentRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteResponse
     */
	public function orderApiCreateDeliveryNote(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/CreateDeliveryNote/{id}', \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateDeliveryNoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiCreateDeliveryNote200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiCreateDeliveryNote200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceResponse
     */
	public function orderApiCreateInvoice(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/CreateInvoice/{id}', \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiCreateInvoiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Find a single order by its external id (order number)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiFindRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiFindResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function orderApiFind(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiFindRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiFindResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/find/{id}/{partner}', \OpenAPI\OpenAPI\Models\Operations\OrderApiFindRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiFindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiFind200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiFind200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiGetResponse
     */
	public function orderApiGet(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}', \OpenAPI\OpenAPI\Models\Operations\OrderApiGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a single order by its external order number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiGetByExtRefRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiGetByExtRefResponse
     */
	public function orderApiGetByExtRef(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiGetByExtRefRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiGetByExtRefResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/findbyextref/{extRef}', \OpenAPI\OpenAPI\Models\Operations\OrderApiGetByExtRefRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiGetByExtRefResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiGetInvoiceListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiGetInvoiceListResponse
     */
	public function orderApiGetInvoiceList(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiGetInvoiceListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiGetInvoiceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/invoices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiGetInvoiceListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiGetInvoiceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceAPIModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceAPIModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceAPIModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceAPIModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a list of all orders optionally filtered by date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiGetListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiGetListResponse
     */
	public function orderApiGetList(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiGetListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiGetListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiGetListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiGetListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of fields which can be updated with the orders/{id} patch call
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiGetPatchableFieldsResponse
     */
	public function orderApiGetPatchableFields(
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiGetPatchableFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/PatchableFields');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiGetPatchableFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiGetPatchableFields200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiGetPatchableFields200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Parses a text and replaces all placeholders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersFormResponse
     */
	public function orderApiParsePlaceholdersForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/parse-placeholders', \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiParsePlaceholdersForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiParsePlaceholdersForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Parses a text and replaces all placeholders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersJsonResponse
     */
	public function orderApiParsePlaceholdersJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/parse-placeholders', \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiParsePlaceholdersJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiParsePlaceholdersJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Parses a text and replaces all placeholders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersRawResponse
     */
	public function orderApiParsePlaceholdersRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/parse-placeholders', \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiParsePlaceholdersRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiParsePlaceholdersRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiParsePlaceholdersRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates one or more fields of an order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiPatchOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiPatchOrderResponse
     */
	public function orderApiPatchOrder(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiPatchOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiPatchOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}', \OpenAPI\OpenAPI\Models\Operations\OrderApiPatchOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiPatchOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Creates a new order in the Billbee account
     * 
     * To create an order POST an JSON object to the orders endpoint with the shown properties.
     * Not all properties are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderFormResponse
     */
	public function orderApiPostNewOrderForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "billbeeInterfacesBillbeeAPIModelOrderInput", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderFormRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Creates a new order in the Billbee account
     * 
     * To create an order POST an JSON object to the orders endpoint with the shown properties.
     * Not all properties are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderJsonResponse
     */
	public function orderApiPostNewOrderJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "billbeeInterfacesBillbeeAPIModelOrderInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Creates a new order in the Billbee account
     * 
     * To create an order POST an JSON object to the orders endpoint with the shown properties.
     * Not all properties are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderRawResponse
     */
	public function orderApiPostNewOrderRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderRawRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiPostNewOrderRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersAPIAPIResultBillbeeInterfacesBillbeeAPIModelOrder', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Sends a message to the buyer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageFormResponse
     */
	public function orderApiSendMessageForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/send-message', \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiSendMessageForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiSendMessageForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a message to the buyer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageJsonResponse
     */
	public function orderApiSendMessageJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/send-message', \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiSendMessageJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiSendMessageJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a message to the buyer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageRawResponse
     */
	public function orderApiSendMessageRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/send-message', \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiSendMessageRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiSendMessageRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiSendMessageRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attach one or more tags to an order
     * 
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateFormResponse
     */
	public function orderApiTagsCreateForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderTagCreate", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsCreateForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsCreateForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attach one or more tags to an order
     * 
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateJsonResponse
     */
	public function orderApiTagsCreateJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderTagCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsCreateJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsCreateJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attach one or more tags to an order
     * 
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateRawResponse
     */
	public function orderApiTagsCreateRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsCreateRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsCreateRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsCreateRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the tags attached to an order
     * 
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateFormResponse
     */
	public function orderApiTagsUpdateForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderTagCreate", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsUpdateForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsUpdateForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the tags attached to an order
     * 
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateJsonResponse
     */
	public function orderApiTagsUpdateJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderTagCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsUpdateJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsUpdateJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the tags attached to an order
     * 
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateRawResponse
     */
	public function orderApiTagsUpdateRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/tags', \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTagsUpdateRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsUpdateRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTagsUpdateRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a rule event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventFormResponse
     */
	public function orderApiTriggerEventForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/trigger-event', \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTriggerEventForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTriggerEventForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a rule event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventJsonResponse
     */
	public function orderApiTriggerEventJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/trigger-event', \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTriggerEventJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTriggerEventJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a rule event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventRawResponse
     */
	public function orderApiTriggerEventRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/trigger-event', \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiTriggerEventRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTriggerEventRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiTriggerEventRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the main state of a single order
     * 
     * ### REMARKS ###
     * Use this call to change the state of an order to i.e. paid or sent.
     * 
     * The state is transfered to the external shop/marketplace if configured.
     * This is the list of known states:
     * - 1: ordered
     * - 2: confirmed
     * - 3: paid
     * - 4: shipped
     * - 5: reclamation
     * - 6: deleted
     * - 7: closed
     * - 8: canceled
     * - 9: archived
     * - 10: not used
     * - 11: demand note 1
     * - 12: demand note 2
     * - 13: packed
     * - 14: offered
     * - 15: payment reminder
     * - 16: fulfilling
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateFormResponse
     */
	public function orderApiUpdateStateForm(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/orderstate', \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderStateUpdate", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiUpdateStateForm200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiUpdateStateForm200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the main state of a single order
     * 
     * ### REMARKS ###
     * Use this call to change the state of an order to i.e. paid or sent.
     * 
     * The state is transfered to the external shop/marketplace if configured.
     * This is the list of known states:
     * - 1: ordered
     * - 2: confirmed
     * - 3: paid
     * - 4: shipped
     * - 5: reclamation
     * - 6: deleted
     * - 7: closed
     * - 8: canceled
     * - 9: archived
     * - 10: not used
     * - 11: demand note 1
     * - 12: demand note 2
     * - 13: packed
     * - 14: offered
     * - 15: payment reminder
     * - 16: fulfilling
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateJsonResponse
     */
	public function orderApiUpdateStateJson(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/orderstate', \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rechnungsdruckWebAppControllersApiOrderStateUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiUpdateStateJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiUpdateStateJSON200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the main state of a single order
     * 
     * ### REMARKS ###
     * Use this call to change the state of an order to i.e. paid or sent.
     * 
     * The state is transfered to the external shop/marketplace if configured.
     * This is the list of known states:
     * - 1: ordered
     * - 2: confirmed
     * - 3: paid
     * - 4: shipped
     * - 5: reclamation
     * - 6: deleted
     * - 7: closed
     * - 8: canceled
     * - 9: archived
     * - 10: not used
     * - 11: demand note 1
     * - 12: demand note 2
     * - 13: packed
     * - 14: offered
     * - 15: payment reminder
     * - 16: fulfilling
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateRawResponse
     */
	public function orderApiUpdateStateRaw(
        \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{id}/orderstate', \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrderApiUpdateStateRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiUpdateStateRaw200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderApiUpdateStateRaw200TextJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for products, customers and orders.
     * Type can be "order", "product" and / or "customer"
     * Term can contains lucene query syntax
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchSearchFormResponse
     */
	public function searchSearchForm(
        \OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchSearchFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchSearchFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Search for products, customers and orders.
     * Type can be "order", "product" and / or "customer"
     * Term can contains lucene query syntax
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchSearchJsonResponse
     */
	public function searchSearchJson(
        \OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiSearchControllerSearchModel $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchSearchJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchSearchJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Search for products, customers and orders.
     * Type can be "order", "product" and / or "customer"
     * Term can contains lucene query syntax
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchSearchRawResponse
     */
	public function searchSearchRaw(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchSearchRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchSearchRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}