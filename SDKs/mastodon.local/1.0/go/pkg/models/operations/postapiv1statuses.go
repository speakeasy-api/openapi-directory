// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostAPIV1StatusesSecurity struct {
	BearerAuth string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// PostAPIV1StatusesRequestBodyVisibilityEnum - Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.
type PostAPIV1StatusesRequestBodyVisibilityEnum string

const (
	PostAPIV1StatusesRequestBodyVisibilityEnumPublic   PostAPIV1StatusesRequestBodyVisibilityEnum = "public"
	PostAPIV1StatusesRequestBodyVisibilityEnumUnlisted PostAPIV1StatusesRequestBodyVisibilityEnum = "unlisted"
	PostAPIV1StatusesRequestBodyVisibilityEnumPrivate  PostAPIV1StatusesRequestBodyVisibilityEnum = "private"
	PostAPIV1StatusesRequestBodyVisibilityEnumDirect   PostAPIV1StatusesRequestBodyVisibilityEnum = "direct"
)

func (e *PostAPIV1StatusesRequestBodyVisibilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "unlisted":
		fallthrough
	case "private":
		fallthrough
	case "direct":
		*e = PostAPIV1StatusesRequestBodyVisibilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAPIV1StatusesRequestBodyVisibilityEnum: %s", s)
	}
}

type PostAPIV1StatusesRequestBody struct {
	// ID of the status being replied to, if status is a reply
	InReplyToID *string `json:"in_reply_to_id,omitempty"`
	// ISO 639 language code for this status.
	Language *string `json:"language,omitempty"`
	// Array of Attachment ids to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used.
	MediaIds []string                 `json:"media_ids,omitempty"`
	Poll     []map[string]interface{} `json:"poll,omitempty"`
	// ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.
	ScheduledAt *string `json:"scheduled_at,omitempty"`
	// Mark status and attached media as sensitive?
	Sensitive *bool `json:"sensitive,omitempty"`
	// Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.
	SpoilerText *string `json:"spoiler_text,omitempty"`
	// Text content of the status. If `media_ids` is provided, this becomes optional. Attaching a `poll` is optional while `status` is provided.
	Status *string `json:"status,omitempty"`
	// Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.
	Visibility *PostAPIV1StatusesRequestBodyVisibilityEnum `json:"visibility,omitempty"`
}

type PostAPIV1StatusesRequest struct {
	// Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side.
	IdempotencyKey *string                        `header:"style=simple,explode=false,name=Idempotency-Key"`
	RequestBody    []PostAPIV1StatusesRequestBody `request:"mediaType=application/json"`
}

type PostAPIV1Statuses200ApplicationJSONType string

const (
	PostAPIV1Statuses200ApplicationJSONTypeStatus          PostAPIV1Statuses200ApplicationJSONType = "Status"
	PostAPIV1Statuses200ApplicationJSONTypeScheduledStatus PostAPIV1Statuses200ApplicationJSONType = "ScheduledStatus"
)

type PostAPIV1Statuses200ApplicationJSON struct {
	Status          *shared.Status
	ScheduledStatus *shared.ScheduledStatus

	Type PostAPIV1Statuses200ApplicationJSONType
}

func CreatePostAPIV1Statuses200ApplicationJSONStatus(status shared.Status) PostAPIV1Statuses200ApplicationJSON {
	typ := PostAPIV1Statuses200ApplicationJSONTypeStatus

	return PostAPIV1Statuses200ApplicationJSON{
		Status: &status,
		Type:   typ,
	}
}

func CreatePostAPIV1Statuses200ApplicationJSONScheduledStatus(scheduledStatus shared.ScheduledStatus) PostAPIV1Statuses200ApplicationJSON {
	typ := PostAPIV1Statuses200ApplicationJSONTypeScheduledStatus

	return PostAPIV1Statuses200ApplicationJSON{
		ScheduledStatus: &scheduledStatus,
		Type:            typ,
	}
}

func (u *PostAPIV1Statuses200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	status := new(shared.Status)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&status); err == nil {
		u.Status = status
		u.Type = PostAPIV1Statuses200ApplicationJSONTypeStatus
		return nil
	}

	scheduledStatus := new(shared.ScheduledStatus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&scheduledStatus); err == nil {
		u.ScheduledStatus = scheduledStatus
		u.Type = PostAPIV1Statuses200ApplicationJSONTypeScheduledStatus
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAPIV1Statuses200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Status != nil {
		return json.Marshal(u.Status)
	}

	if u.ScheduledStatus != nil {
		return json.Marshal(u.ScheduledStatus)
	}

	return nil, nil
}

type PostAPIV1StatusesResponse struct {
	ContentType string
	// Invalid or missing Authorization header
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.
	PostAPIV1Statuses200ApplicationJSONOneOf *PostAPIV1Statuses200ApplicationJSON
}
