// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesOfficialSearchEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesOfficialSearchEmbedEnum int64

const (
	GetNamesOfficialSearchEmbedEnumZero GetNamesOfficialSearchEmbedEnum = 0
	GetNamesOfficialSearchEmbedEnumOne  GetNamesOfficialSearchEmbedEnum = 1
)

func (e GetNamesOfficialSearchEmbedEnum) ToPointer() *GetNamesOfficialSearchEmbedEnum {
	return &e
}

func (e *GetNamesOfficialSearchEmbedEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesOfficialSearchEmbedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesOfficialSearchEmbedEnum: %v", v)
	}
}

// GetNamesOfficialSearchExactSpellingEnum - If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
type GetNamesOfficialSearchExactSpellingEnum int64

const (
	GetNamesOfficialSearchExactSpellingEnumZero GetNamesOfficialSearchExactSpellingEnum = 0
	GetNamesOfficialSearchExactSpellingEnumOne  GetNamesOfficialSearchExactSpellingEnum = 1
)

func (e GetNamesOfficialSearchExactSpellingEnum) ToPointer() *GetNamesOfficialSearchExactSpellingEnum {
	return &e
}

func (e *GetNamesOfficialSearchExactSpellingEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesOfficialSearchExactSpellingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesOfficialSearchExactSpellingEnum: %v", v)
	}
}

// GetNamesOfficialSearchOutputFormatEnum - The format of the output.
type GetNamesOfficialSearchOutputFormatEnum string

const (
	GetNamesOfficialSearchOutputFormatEnumJSON GetNamesOfficialSearchOutputFormatEnum = "json"
	GetNamesOfficialSearchOutputFormatEnumXML  GetNamesOfficialSearchOutputFormatEnum = "xml"
	GetNamesOfficialSearchOutputFormatEnumKml  GetNamesOfficialSearchOutputFormatEnum = "kml"
	GetNamesOfficialSearchOutputFormatEnumCsv  GetNamesOfficialSearchOutputFormatEnum = "csv"
)

func (e GetNamesOfficialSearchOutputFormatEnum) ToPointer() *GetNamesOfficialSearchOutputFormatEnum {
	return &e
}

func (e *GetNamesOfficialSearchOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesOfficialSearchOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesOfficialSearchOutputFormatEnum: %v", v)
	}
}

// GetNamesOfficialSearchOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesOfficialSearchOutputSrsEnum int64

const (
	GetNamesOfficialSearchOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesOfficialSearchOutputSrsEnum = 4326
	GetNamesOfficialSearchOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesOfficialSearchOutputSrsEnum = 4269
	GetNamesOfficialSearchOutputSrsEnumThreeThousandAndFive                   GetNamesOfficialSearchOutputSrsEnum = 3005
	GetNamesOfficialSearchOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesOfficialSearchOutputSrsEnum = 3857
	GetNamesOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesOfficialSearchOutputSrsEnum = 26907
	GetNamesOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesOfficialSearchOutputSrsEnum = 26908
	GetNamesOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesOfficialSearchOutputSrsEnum = 26909
	GetNamesOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesOfficialSearchOutputSrsEnum = 26910
	GetNamesOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesOfficialSearchOutputSrsEnum = 26911
)

func (e GetNamesOfficialSearchOutputSrsEnum) ToPointer() *GetNamesOfficialSearchOutputSrsEnum {
	return &e
}

func (e *GetNamesOfficialSearchOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 3857:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetNamesOfficialSearchOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesOfficialSearchOutputSrsEnum: %v", v)
	}
}

// GetNamesOfficialSearchOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesOfficialSearchOutputStyleEnum string

const (
	GetNamesOfficialSearchOutputStyleEnumSummary GetNamesOfficialSearchOutputStyleEnum = "summary"
	GetNamesOfficialSearchOutputStyleEnumDetail  GetNamesOfficialSearchOutputStyleEnum = "detail"
)

func (e GetNamesOfficialSearchOutputStyleEnum) ToPointer() *GetNamesOfficialSearchOutputStyleEnum {
	return &e
}

func (e *GetNamesOfficialSearchOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesOfficialSearchOutputStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesOfficialSearchOutputStyleEnum: %v", v)
	}
}

// GetNamesOfficialSearchSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesOfficialSearchSortByEnum string

const (
	GetNamesOfficialSearchSortByEnumRelevance    GetNamesOfficialSearchSortByEnum = "relevance"
	GetNamesOfficialSearchSortByEnumName         GetNamesOfficialSearchSortByEnum = "name"
	GetNamesOfficialSearchSortByEnumFeatureType  GetNamesOfficialSearchSortByEnum = "featureType"
	GetNamesOfficialSearchSortByEnumDecisionDate GetNamesOfficialSearchSortByEnum = "decisionDate"
)

func (e GetNamesOfficialSearchSortByEnum) ToPointer() *GetNamesOfficialSearchSortByEnum {
	return &e
}

func (e *GetNamesOfficialSearchSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relevance":
		fallthrough
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesOfficialSearchSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesOfficialSearchSortByEnum: %v", v)
	}
}

type GetNamesOfficialSearchRequest struct {
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesOfficialSearchEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
	ExactSpelling *GetNamesOfficialSearchExactSpellingEnum `queryParam:"style=form,explode=true,name=exactSpelling"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'
	Name string `queryParam:"style=form,explode=true,name=name"`
	// The format of the output.
	OutputFormat GetNamesOfficialSearchOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesOfficialSearchOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesOfficialSearchOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesOfficialSearchSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
}

type GetNamesOfficialSearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
