"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Resources:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_consumer_v1_resources(self, request: operations.GetConsumerV1ResourcesRequest) -> operations.GetConsumerV1ResourcesResponse:
        r"""List Resources
        <p>Use this endpoint to return a <b>List of Resources</b> associated with a business location. If not specified, the business location defaults to the primary business location. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumer/v1/resources'
        
        query_params = utils.get_query_params(operations.GetConsumerV1ResourcesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceListViewModel])
                res.resource_list_view_model = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def get_consumer_v1_resources_id_(self, request: operations.GetConsumerV1ResourcesIDRequest) -> operations.GetConsumerV1ResourcesIDResponse:
        r"""Get Resource
        <p>Use this endpoint to return a <b>Resource</b> object. A valid <b>resource id</b> is required. Find resource id's by using the <i>GET consumer/v1/resources</i> endpoint. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1ResourcesIDRequest, base_url, '/consumer/v1/resources/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ResourcesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceViewModel])
                res.resource_view_model = out

        return res

    def get_consumer_v1_resources_id_services(self, request: operations.GetConsumerV1ResourcesIDServicesRequest) -> operations.GetConsumerV1ResourcesIDServicesResponse:
        r"""Get Resource Linked Services
        <p>Use this endpoint to get a <b>List of Linked Services</b> associated with the resource requested. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, the maximum limit is 100. Use the other query parameters to filter the results further.</p>
        <p>Resource linked services are used to explicitly define the services that can be booked for a specified resource. By default, all services are bookable for any resource. For more information: <a href=\"https://docs.onsched.com/docs/linked-services\">Linked Services Overview</a></p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConsumerV1ResourcesIDServicesRequest, base_url, '/consumer/v1/resources/{id}/services', request)
        
        query_params = utils.get_query_params(operations.GetConsumerV1ResourcesIDServicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConsumerV1ResourcesIDServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceServiceListViewModel])
                res.resource_service_list_view_model = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    