// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterInstanceXAmzTargetEnum
type RegisterInstanceXAmzTargetEnum string

const (
	RegisterInstanceXAmzTargetEnumRoute53AutoNamingV20170314RegisterInstance RegisterInstanceXAmzTargetEnum = "Route53AutoNaming_v20170314.RegisterInstance"
)

func (e RegisterInstanceXAmzTargetEnum) ToPointer() *RegisterInstanceXAmzTargetEnum {
	return &e
}

func (e *RegisterInstanceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53AutoNaming_v20170314.RegisterInstance":
		*e = RegisterInstanceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterInstanceXAmzTargetEnum: %v", v)
	}
}

type RegisterInstanceRequest struct {
	RegisterInstanceRequest shared.RegisterInstanceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              RegisterInstanceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterInstanceResponse struct {
	ContentType string
	// DuplicateRequest
	DuplicateRequest interface{}
	// InvalidInput
	InvalidInput interface{}
	// Success
	RegisterInstanceResponse *shared.RegisterInstanceResponse
	// ServiceNotFound
	ServiceNotFound interface{}
	StatusCode      int
	RawResponse     *http.Response
	// ResourceInUse
	ResourceInUse interface{}
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
}
