// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateFeaturePathParams struct {
	// The name or ARN of the project that is to contain the new feature.
	Project string `pathParam:"style=simple,explode=false,name=project"`
}

type CreateFeatureHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateFeatureRequestBodyEvaluationStrategyEnum - Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.
type CreateFeatureRequestBodyEvaluationStrategyEnum string

const (
	CreateFeatureRequestBodyEvaluationStrategyEnumAllRules         CreateFeatureRequestBodyEvaluationStrategyEnum = "ALL_RULES"
	CreateFeatureRequestBodyEvaluationStrategyEnumDefaultVariation CreateFeatureRequestBodyEvaluationStrategyEnum = "DEFAULT_VARIATION"
)

func (e *CreateFeatureRequestBodyEvaluationStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL_RULES":
		fallthrough
	case "DEFAULT_VARIATION":
		*e = CreateFeatureRequestBodyEvaluationStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeatureRequestBodyEvaluationStrategyEnum: %s", s)
	}
}

type CreateFeatureRequestBody struct {
	// <p>The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p> <p>This variation must also be listed in the <code>variations</code> structure.</p> <p>If you omit <code>defaultVariation</code>, the first variation listed in the <code>variations</code> structure is used as the default variation.</p>
	DefaultVariation *string `json:"defaultVariation,omitempty"`
	// An optional description of the feature.
	Description *string `json:"description,omitempty"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides map[string]string `json:"entityOverrides,omitempty"`
	// Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.
	EvaluationStrategy *CreateFeatureRequestBodyEvaluationStrategyEnum `json:"evaluationStrategy,omitempty"`
	// The name for the new feature.
	Name string `json:"name"`
	// <p>Assigns one or more tags (key-value pairs) to the feature.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a feature.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
	Tags map[string]string `json:"tags,omitempty"`
	// An array of structures that contain the configuration of the feature's different variations.
	Variations []shared.VariationConfig `json:"variations"`
}

type CreateFeatureRequest struct {
	PathParams CreateFeaturePathParams
	Headers    CreateFeatureHeaders
	Request    CreateFeatureRequestBody `request:"mediaType=application/json"`
}

type CreateFeatureResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateFeatureResponse *shared.CreateFeatureResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ValidationException
	ValidationException interface{}
}
