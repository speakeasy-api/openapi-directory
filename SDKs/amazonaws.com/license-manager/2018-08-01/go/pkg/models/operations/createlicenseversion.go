// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateLicenseVersionXAmzTargetEnum
type CreateLicenseVersionXAmzTargetEnum string

const (
	CreateLicenseVersionXAmzTargetEnumAwsLicenseManagerCreateLicenseVersion CreateLicenseVersionXAmzTargetEnum = "AWSLicenseManager.CreateLicenseVersion"
)

func (e CreateLicenseVersionXAmzTargetEnum) ToPointer() *CreateLicenseVersionXAmzTargetEnum {
	return &e
}

func (e *CreateLicenseVersionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSLicenseManager.CreateLicenseVersion":
		*e = CreateLicenseVersionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLicenseVersionXAmzTargetEnum: %v", v)
	}
}

type CreateLicenseVersionRequest struct {
	CreateLicenseVersionRequest shared.CreateLicenseVersionRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateLicenseVersionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateLicenseVersionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AuthorizationException
	AuthorizationException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateLicenseVersionResponse *shared.CreateLicenseVersionResponse
	// RateLimitExceededException
	RateLimitExceededException interface{}
	// RedirectException
	RedirectException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServerInternalException
	ServerInternalException interface{}
	// ValidationException
	ValidationException interface{}
}
