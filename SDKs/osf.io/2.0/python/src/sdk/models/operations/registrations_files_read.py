"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Any, Optional


@dataclasses.dataclass
class RegistrationsFilesReadRequest:
    
    path: str = dataclasses.field(metadata={'path_param': { 'field_name': 'path', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the file path."""  
    provider: str = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the storage provider."""  
    registration_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'registration_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the registration."""  
    

@dataclasses.dataclass
class RegistrationsFilesReadFileAttributes:
    r"""The properties of the file entity."""
    
    checkout: Optional[str] = dataclasses.field(default=None)
    r"""SOON TO BE DEPRECATED, see relationships checkout."""  
    current_user_can_comment: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the current user is allowed to post comments."""  
    current_version: Optional[int] = dataclasses.field(default=None)
    r"""Version number of the file."""  
    date_created: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the file was created, as an iso8601 formatted timestamp."""  
    date_modified: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the file was last modified, as an iso8601 formatted timestamp."""  
    delete_allowed: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not deletion of the file is allowed."""  
    extra: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."""  
    guid: Optional[str] = dataclasses.field(default=None)
    r"""Global unique identifier (GUID) for this file (if one has been assigned)."""  
    kind: Optional[str] = dataclasses.field(default=None)
    r"""The kind of files object it is (`file` or `folder`)."""  
    last_touched: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."""  
    materialized_path: Optional[str] = dataclasses.field(default=None)
    r"""Unix-style path to the file relative to the provider root."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the file"""  
    path: Optional[str] = dataclasses.field(default=None)
    r"""The unique identifier for this file entity for this project and storage provider."""  
    provider: Optional[str] = dataclasses.field(default=None)
    r"""The id of the file provider (e.g., `osfstorage`)"""  
    size: Optional[int] = dataclasses.field(default=None)
    r"""Size of the file in bytes."""  
    tags: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of strings that describe this file, as entered by project contributors."""  
    

@dataclasses.dataclass
class RegistrationsFilesReadFileLinks:
    r"""Links to alternative representations of the file entity."""
    
    delete: Optional[str] = dataclasses.field(default=None)
    r"""The Waterbutler API route for file deletions."""  
    download: Optional[str] = dataclasses.field(default=None)
    r"""The Waterbutler API route for file downloads."""  
    info: Optional[str] = dataclasses.field(default=None)
    r"""A link to the page to view a file's information or a folder's contents."""  
    move: Optional[str] = dataclasses.field(default=None)
    r"""The Waterbutler API route for file moves."""  
    new_folder: Optional[str] = dataclasses.field(default=None)
    r"""The Waterbutler API route for creating a new subfolder (does not exist for files)."""  
    self_: Optional[str] = dataclasses.field(default=None)
    r"""A link to the detail page for the file."""  
    upload: Optional[str] = dataclasses.field(default=None)
    r"""The Waterbutler API route for file uploads."""  
    

@dataclasses.dataclass
class RegistrationsFilesReadFileRelationships:
    r"""Links to other entities or entity collections that have a relationship to the file entity."""
    
    checkout: Optional[str] = dataclasses.field(default=None)
    r"""A link to the user who checked out the file."""  
    comments: Optional[str] = dataclasses.field(default=None)
    r"""A link to the comments on the file."""  
    node: Optional[str] = dataclasses.field(default=None)
    r"""A link to the node the file is on."""  
    versions: Optional[str] = dataclasses.field(default=None)
    r"""A link to the versions of the file."""  
    

@dataclasses.dataclass
class RegistrationsFilesReadFile:
    r"""OK"""
    
    attributes: Optional[RegistrationsFilesReadFileAttributes] = dataclasses.field(default=None)
    r"""The properties of the file entity."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The identifier of the file entity."""  
    links: Optional[RegistrationsFilesReadFileLinks] = dataclasses.field(default=None)
    r"""Links to alternative representations of the file entity."""  
    relationships: Optional[RegistrationsFilesReadFileRelationships] = dataclasses.field(default=None)
    r"""Links to other entities or entity collections that have a relationship to the file entity."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""The type identifier of the file entity (`files`)."""  
    

@dataclasses.dataclass
class RegistrationsFilesReadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    