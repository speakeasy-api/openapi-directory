/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Analysis {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public String config;

    public Analysis withConfig(String config) {
        this.config = config;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public Analysis withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_finished")
    public OffsetDateTime dateFinished;

    public Analysis withDateFinished(OffsetDateTime dateFinished) {
        this.dateFinished = dateFinished;
        return this;
    }
    
    /**
     * Date of last modified analysis
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_last_modified")
    public OffsetDateTime dateLastModified;

    public Analysis withDateLastModified(OffsetDateTime dateLastModified) {
        this.dateLastModified = dateLastModified;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_launched")
    public OffsetDateTime dateLaunched;

    public Analysis withDateLaunched(OffsetDateTime dateLaunched) {
        this.dateLaunched = dateLaunched;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public String features;

    public Analysis withFeatures(String features) {
        this.features = features;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Analysis withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Analysis withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    public String slug;

    public Analysis withSlug(String slug) {
        this.slug = slug;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Analysis withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Analysis withUrl(String url) {
        this.url = url;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urls_done")
    public String urlsDone;

    public Analysis withUrlsDone(String urlsDone) {
        this.urlsDone = urlsDone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urls_in_queue")
    public String urlsInQueue;

    public Analysis withUrlsInQueue(String urlsInQueue) {
        this.urlsInQueue = urlsInQueue;
        return this;
    }
    
    @JsonProperty("user")
    public User user;

    public Analysis withUser(User user) {
        this.user = user;
        return this;
    }
    
    public Analysis(@JsonProperty("user") User user) {
        this.user = user;
  }
}
