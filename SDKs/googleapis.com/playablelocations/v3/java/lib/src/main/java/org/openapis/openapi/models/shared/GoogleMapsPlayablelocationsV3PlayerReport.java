/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleMapsPlayablelocationsV3PlayerReport - A report submitted by a player about a playable location that is considered inappropriate for use in the game.
 */
public class GoogleMapsPlayablelocationsV3PlayerReport {
    /**
     * Language code (in BCP-47 format) indicating the language of the freeform description provided in `reason_details`. Examples are "en", "en-US" or "ja-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;
    public GoogleMapsPlayablelocationsV3PlayerReport withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * Required. The name of the playable location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationName")
    public String locationName;
    public GoogleMapsPlayablelocationsV3PlayerReport withLocationName(String locationName) {
        this.locationName = locationName;
        return this;
    }
    
    /**
     * Required. A free-form description detailing why the playable location is considered bad.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasonDetails")
    public String reasonDetails;
    public GoogleMapsPlayablelocationsV3PlayerReport withReasonDetails(String reasonDetails) {
        this.reasonDetails = reasonDetails;
        return this;
    }
    
    /**
     * Required. One or more reasons why this playable location is considered bad.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasons")
    public GoogleMapsPlayablelocationsV3PlayerReportReasonsEnum[] reasons;
    public GoogleMapsPlayablelocationsV3PlayerReport withReasons(GoogleMapsPlayablelocationsV3PlayerReportReasonsEnum[] reasons) {
        this.reasons = reasons;
        return this;
    }
    
}
