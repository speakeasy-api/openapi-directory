/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CompressionTypeEnum } from "./compressiontypeenum";
import { DataSource } from "./datasource";
import { RecordWrapperEnum } from "./recordwrapperenum";
import { ShuffleConfig } from "./shuffleconfig";
import { TrainingInputModeEnum } from "./traininginputmodeenum";
import { Expose, Type } from "class-transformer";

/**
 * A channel is a named input source that training algorithms can consume.
 */
export class Channel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ChannelName" })
  channelName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CompressionType" })
  compressionType?: CompressionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ContentType" })
  contentType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DataSource" })
  @Type(() => DataSource)
  dataSource: DataSource;

  @SpeakeasyMetadata()
  @Expose({ name: "InputMode" })
  inputMode?: TrainingInputModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "RecordWrapperType" })
  recordWrapperType?: RecordWrapperEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ShuffleConfig" })
  @Type(() => ShuffleConfig)
  shuffleConfig?: ShuffleConfig;
}
