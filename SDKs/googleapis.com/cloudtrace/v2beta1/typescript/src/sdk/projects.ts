/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a sink that exports trace spans to a destination. The export of newly-ingested traces begins immediately, unless the sink's `writer_identity` is not permitted to write to the destination. A sink can export traces only from the resource owning the sink (the 'parent').
   */
  cloudtraceProjectsTraceSinksCreate(
    req: operations.CloudtraceProjectsTraceSinksCreateRequest,
    security: operations.CloudtraceProjectsTraceSinksCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTraceSinksCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTraceSinksCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{parent}/traceSinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "traceSinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTraceSinksCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTraceSinksCreateResponse =
        new operations.CloudtraceProjectsTraceSinksCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.traceSink = utils.objectToClass(
              httpRes?.data,
              shared.TraceSink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a sink.
   */
  cloudtraceProjectsTraceSinksDelete(
    req: operations.CloudtraceProjectsTraceSinksDeleteRequest,
    security: operations.CloudtraceProjectsTraceSinksDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTraceSinksDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTraceSinksDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTraceSinksDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTraceSinksDeleteResponse =
        new operations.CloudtraceProjectsTraceSinksDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a trace sink by name under the parent resource (GCP project).
   */
  cloudtraceProjectsTraceSinksGet(
    req: operations.CloudtraceProjectsTraceSinksGetRequest,
    security: operations.CloudtraceProjectsTraceSinksGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTraceSinksGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTraceSinksGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTraceSinksGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTraceSinksGetResponse =
        new operations.CloudtraceProjectsTraceSinksGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.traceSink = utils.objectToClass(
              httpRes?.data,
              shared.TraceSink
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all sinks for the parent resource (GCP project).
   */
  cloudtraceProjectsTraceSinksList(
    req: operations.CloudtraceProjectsTraceSinksListRequest,
    security: operations.CloudtraceProjectsTraceSinksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTraceSinksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTraceSinksListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{parent}/traceSinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTraceSinksListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTraceSinksListResponse =
        new operations.CloudtraceProjectsTraceSinksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTraceSinksResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTraceSinksResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a sink. This method updates fields in the existing sink according to the provided update mask. The sink's name cannot be changed nor any output-only fields (e.g. the writer_identity).
   */
  cloudtraceProjectsTraceSinksPatch(
    req: operations.CloudtraceProjectsTraceSinksPatchRequest,
    security: operations.CloudtraceProjectsTraceSinksPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudtraceProjectsTraceSinksPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudtraceProjectsTraceSinksPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "traceSinkInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudtraceProjectsTraceSinksPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudtraceProjectsTraceSinksPatchResponse =
        new operations.CloudtraceProjectsTraceSinksPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.traceSink = utils.objectToClass(
              httpRes?.data,
              shared.TraceSink
            );
          }
          break;
      }

      return res;
    });
  }
}
