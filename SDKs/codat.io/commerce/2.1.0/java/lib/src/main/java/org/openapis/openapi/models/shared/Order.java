/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Order - Orders contain the transaction details for all products sold by the company, and include details of any payments, service charges, or refunds related to each order. You can use data from the Orders endpoints to calculate key metrics, such as gross sales values and monthly recurring revenue (MRR).
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&amp;dataType=commerce-orders) for this data type.
 * 
 */
public class Order {
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closedDate")
    public String closedDate;

    public Order withClosedDate(String closedDate) {
        this.closedDate = closedDate;
        return this;
    }
    
    /**
     * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
     * 
     * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
     * 
     * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/codat-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public Order withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    public String createdDate;

    public Order withCreatedDate(String createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public Order withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Reference to the customer that placed the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerRef")
    public CustomerRef customerRef;

    public Order withCustomerRef(CustomerRef customerRef) {
        this.customerRef = customerRef;
        return this;
    }
    
    /**
     * A unique, persistent identifier for this record
     */
    @JsonProperty("id")
    public String id;

    public Order withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Reference to the geographic location where the order was placed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationRef")
    public LocationRef locationRef;

    public Order withLocationRef(LocationRef locationRef) {
        this.locationRef = locationRef;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    public String modifiedDate;

    public Order withModifiedDate(String modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderLineItems")
    public OrderLineItem[] orderLineItems;

    public Order withOrderLineItems(OrderLineItem[] orderLineItems) {
        this.orderLineItems = orderLineItems;
        return this;
    }
    
    /**
     * Friendly reference for the order in the commerce or point of sale platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderNumber")
    public String orderNumber;

    public Order withOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    public PaymentRef[] payments;

    public Order withPayments(PaymentRef[] payments) {
        this.payments = payments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceCharges")
    public ServiceCharge[] serviceCharges;

    public Order withServiceCharges(ServiceCharge[] serviceCharges) {
        this.serviceCharges = serviceCharges;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    public String sourceModifiedDate;

    public Order withSourceModifiedDate(String sourceModifiedDate) {
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }
    
    /**
     * Total amount of the order, including tax, net of any discounts and refunds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    public Double totalAmount;

    public Order withTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Total amount of discount applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDiscount")
    public Double totalDiscount;

    public Order withTotalDiscount(Double totalDiscount) {
        this.totalDiscount = totalDiscount;
        return this;
    }
    
    /**
     * Extra amount added to a bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalGratuity")
    public Double totalGratuity;

    public Order withTotalGratuity(Double totalGratuity) {
        this.totalGratuity = totalGratuity;
        return this;
    }
    
    /**
     * Total amount refunded issued by a merchant on an order (always a negative value).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalRefund")
    public Double totalRefund;

    public Order withTotalRefund(Double totalRefund) {
        this.totalRefund = totalRefund;
        return this;
    }
    
    /**
     * Total amount of tax applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxAmount")
    public Double totalTaxAmount;

    public Order withTotalTaxAmount(Double totalTaxAmount) {
        this.totalTaxAmount = totalTaxAmount;
        return this;
    }
    
    public Order(@JsonProperty("id") String id) {
        this.id = id;
  }
}
