<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_ASSISTANT_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_FIELD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_FIELD_TYPE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_FIELD_VALUE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_MODEL_BUILD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_QUERY_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_SAMPLE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_TASK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const CREATE_WEBHOOK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_ASSISTANT_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_FIELD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_FIELD_TYPE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_FIELD_VALUE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_MODEL_BUILD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_QUERY_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_SAMPLE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_TASK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const DELETE_WEBHOOK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_ASSISTANT_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_DEFAULTS_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_DIALOGUE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_FIELD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_FIELD_TYPE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_FIELD_VALUE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_MODEL_BUILD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_QUERY_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_SAMPLE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_STYLE_SHEET_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_TASK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_TASK_ACTIONS_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_TASK_STATISTICS_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const FETCH_WEBHOOK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_ASSISTANT_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_FIELD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_FIELD_TYPE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_FIELD_VALUE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_MODEL_BUILD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_QUERY_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_SAMPLE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_TASK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const LIST_WEBHOOK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_ASSISTANT_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_DEFAULTS_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_FIELD_TYPE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_MODEL_BUILD_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_QUERY_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_RESTORE_ASSISTANT_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_SAMPLE_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_STYLE_SHEET_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_TASK_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_TASK_ACTIONS_SERVERS = [
		'https://autopilot.twilio.com',
	];
	
	public const UPDATE_WEBHOOK_SERVERS = [
		'https://autopilot.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssistantCreateAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAssistantResponse
     */
	public function createAssistant(
        \OpenAPI\OpenAPI\Models\Operations\CreateAssistantCreateAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAssistantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAssistantResponse
    {
        $baseUrl = SDK::CREATE_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1Assistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1Assistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFieldResponse
     */
	public function createField(
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFieldResponse
    {
        $baseUrl = SDK::CREATE_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', \OpenAPI\OpenAPI\Models\Operations\CreateFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeResponse
     */
	public function createFieldType(
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeResponse
    {
        $baseUrl = SDK::CREATE_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes', \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantFieldType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueResponse
     */
	public function createFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueResponse
    {
        $baseUrl = SDK::CREATE_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues', \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantFieldTypeFieldValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantFieldTypeFieldValue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildResponse
     */
	public function createModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildResponse
    {
        $baseUrl = SDK::CREATE_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/ModelBuilds', \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantModelBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantModelBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateQueryResponse
     */
	public function createQuery(
        \OpenAPI\OpenAPI\Models\Operations\CreateQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateQuerySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateQueryResponse
    {
        $baseUrl = SDK::CREATE_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Queries', \OpenAPI\OpenAPI\Models\Operations\CreateQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSampleResponse
     */
	public function createSample(
        \OpenAPI\OpenAPI\Models\Operations\CreateSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSampleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSampleResponse
    {
        $baseUrl = SDK::CREATE_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', \OpenAPI\OpenAPI\Models\Operations\CreateSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskSample', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse
     */
	public function createTask(
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse
    {
        $baseUrl = SDK::CREATE_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks', \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse
     */
	public function createWebhook(
        \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWebhookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse
    {
        $baseUrl = SDK::CREATE_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantResponse
     */
	public function deleteAssistant(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantResponse
    {
        $baseUrl = SDK::DELETE_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFieldResponse
     */
	public function deleteField(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFieldResponse
    {
        $baseUrl = SDK::DELETE_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeResponse
     */
	public function deleteFieldType(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeResponse
    {
        $baseUrl = SDK::DELETE_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueResponse
     */
	public function deleteFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueResponse
    {
        $baseUrl = SDK::DELETE_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildResponse
     */
	public function deleteModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildResponse
    {
        $baseUrl = SDK::DELETE_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQueryResponse
     */
	public function deleteQuery(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuerySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQueryResponse
    {
        $baseUrl = SDK::DELETE_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Queries/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSampleResponse
     */
	public function deleteSample(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSampleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSampleResponse
    {
        $baseUrl = SDK::DELETE_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTaskResponse
     */
	public function deleteTask(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTaskResponse
    {
        $baseUrl = SDK::DELETE_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse
     */
	public function deleteWebhook(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse
    {
        $baseUrl = SDK::DELETE_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAssistantResponse
     */
	public function fetchAssistant(
        \OpenAPI\OpenAPI\Models\Operations\FetchAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAssistantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAssistantResponse
    {
        $baseUrl = SDK::FETCH_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1Assistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1Assistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchDefaults
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsResponse
     */
	public function fetchDefaults(
        \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsResponse
    {
        $baseUrl = SDK::FETCH_DEFAULTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Defaults', \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDefaultsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantDefaults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantDefaults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchDialogue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDialogueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDialogueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDialogueResponse
     */
	public function fetchDialogue(
        \OpenAPI\OpenAPI\Models\Operations\FetchDialogueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDialogueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDialogueResponse
    {
        $baseUrl = SDK::FETCH_DIALOGUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Dialogues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDialogueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDialogueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantDialogue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantDialogue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFieldResponse
     */
	public function fetchField(
        \OpenAPI\OpenAPI\Models\Operations\FetchFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFieldSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFieldResponse
    {
        $baseUrl = SDK::FETCH_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeResponse
     */
	public function fetchFieldType(
        \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeResponse
    {
        $baseUrl = SDK::FETCH_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantFieldType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueResponse
     */
	public function fetchFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueResponse
    {
        $baseUrl = SDK::FETCH_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantFieldTypeFieldValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantFieldTypeFieldValue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildResponse
     */
	public function fetchModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildResponse
    {
        $baseUrl = SDK::FETCH_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantModelBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantModelBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchQueryResponse
     */
	public function fetchQuery(
        \OpenAPI\OpenAPI\Models\Operations\FetchQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchQuerySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchQueryResponse
    {
        $baseUrl = SDK::FETCH_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Queries/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSampleResponse
     */
	public function fetchSample(
        \OpenAPI\OpenAPI\Models\Operations\FetchSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSampleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSampleResponse
    {
        $baseUrl = SDK::FETCH_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskSample', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns Style sheet JSON object for the Assistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetResponse
     */
	public function fetchStyleSheet(
        \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetResponse
    {
        $baseUrl = SDK::FETCH_STYLE_SHEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/StyleSheet', \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchStyleSheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantStyleSheet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantStyleSheet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskResponse
     */
	public function fetchTask(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskResponse
    {
        $baseUrl = SDK::FETCH_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns JSON actions for the Task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsResponse
     */
	public function fetchTaskActions(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsResponse
    {
        $baseUrl = SDK::FETCH_TASK_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions', \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskTaskActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskTaskActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsResponse
     */
	public function fetchTaskStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsResponse
    {
        $baseUrl = SDK::FETCH_TASK_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskTaskStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskTaskStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWebhookResponse
     */
	public function fetchWebhook(
        \OpenAPI\OpenAPI\Models\Operations\FetchWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWebhookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWebhookResponse
    {
        $baseUrl = SDK::FETCH_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAssistantResponse
     */
	public function listAssistant(
        \OpenAPI\OpenAPI\Models\Operations\ListAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAssistantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAssistantResponse
    {
        $baseUrl = SDK::LIST_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAssistantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssistantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAssistantListAssistantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFieldResponse
     */
	public function listField(
        \OpenAPI\OpenAPI\Models\Operations\ListFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFieldSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFieldResponse
    {
        $baseUrl = SDK::LIST_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', \OpenAPI\OpenAPI\Models\Operations\ListFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFieldRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFieldResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFieldListFieldResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeResponse
     */
	public function listFieldType(
        \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeResponse
    {
        $baseUrl = SDK::LIST_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes', \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFieldTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFieldTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFieldTypeListFieldTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFieldValueResponse
     */
	public function listFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\ListFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFieldValueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFieldValueResponse
    {
        $baseUrl = SDK::LIST_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues', \OpenAPI\OpenAPI\Models\Operations\ListFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFieldValueRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFieldValueResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFieldValueListFieldValueResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelBuildResponse
     */
	public function listModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\ListModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListModelBuildSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelBuildResponse
    {
        $baseUrl = SDK::LIST_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/ModelBuilds', \OpenAPI\OpenAPI\Models\Operations\ListModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListModelBuildRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelBuildResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListModelBuildListModelBuildResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListQueryResponse
     */
	public function listQuery(
        \OpenAPI\OpenAPI\Models\Operations\ListQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListQuerySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListQueryResponse
    {
        $baseUrl = SDK::LIST_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Queries', \OpenAPI\OpenAPI\Models\Operations\ListQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListQueryListQueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSampleResponse
     */
	public function listSample(
        \OpenAPI\OpenAPI\Models\Operations\ListSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSampleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSampleResponse
    {
        $baseUrl = SDK::LIST_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', \OpenAPI\OpenAPI\Models\Operations\ListSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSampleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSampleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSampleListSampleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTaskResponse
     */
	public function listTask(
        \OpenAPI\OpenAPI\Models\Operations\ListTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTaskSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTaskResponse
    {
        $baseUrl = SDK::LIST_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks', \OpenAPI\OpenAPI\Models\Operations\ListTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTaskRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTaskResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTaskListTaskResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWebhookResponse
     */
	public function listWebhook(
        \OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWebhookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWebhookResponse
    {
        $baseUrl = SDK::LIST_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWebhookListWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantResponse
     */
	public function updateAssistant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantResponse
    {
        $baseUrl = SDK::UPDATE_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1Assistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1Assistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateDefaults
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsResponse
     */
	public function updateDefaults(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsResponse
    {
        $baseUrl = SDK::UPDATE_DEFAULTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Defaults', \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDefaultsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantDefaults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantDefaults', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeResponse
     */
	public function updateFieldType(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeResponse
    {
        $baseUrl = SDK::UPDATE_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantFieldType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildResponse
     */
	public function updateModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildResponse
    {
        $baseUrl = SDK::UPDATE_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantModelBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantModelBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateQueryResponse
     */
	public function updateQuery(
        \OpenAPI\OpenAPI\Models\Operations\UpdateQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateQuerySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateQueryResponse
    {
        $baseUrl = SDK::UPDATE_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Queries/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRestoreAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantUpdateRestoreAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantResponse
     */
	public function updateRestoreAssistant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantUpdateRestoreAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantResponse
    {
        $baseUrl = SDK::UPDATE_RESTORE_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/Restore');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRestoreAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1RestoreAssistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1RestoreAssistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSampleResponse
     */
	public function updateSample(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSampleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSampleResponse
    {
        $baseUrl = SDK::UPDATE_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskSample', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the style sheet for an Assistant identified by `assistant_sid`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetResponse
     */
	public function updateStyleSheet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetResponse
    {
        $baseUrl = SDK::UPDATE_STYLE_SHEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/StyleSheet', \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateStyleSheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantStyleSheet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantStyleSheet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse
     */
	public function updateTask(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse
    {
        $baseUrl = SDK::UPDATE_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsResponse
     */
	public function updateTaskActions(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsResponse
    {
        $baseUrl = SDK::UPDATE_TASK_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantTaskTaskActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantTaskTaskActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse
     */
	public function updateWebhook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse
    {
        $baseUrl = SDK::UPDATE_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autopilotV1AssistantWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutopilotV1AssistantWebhook', 'json');
            }
        }

        return $response;
    }
}