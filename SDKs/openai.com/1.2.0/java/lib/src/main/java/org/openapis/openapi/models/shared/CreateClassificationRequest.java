/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateClassificationRequest {
    /**
     * A list of examples with labels, in the following format:
     * 
     * `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
     * 
     * All the label strings will be normalized to be capitalized.
     * 
     * You should specify either `examples` or `file`, but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("examples")
    public String[][] examples;

    public CreateClassificationRequest withExamples(String[][] examples) {
        this.examples = examples;
        return this;
    }
    
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expand")
    public Object[] expand;

    public CreateClassificationRequest withExpand(Object[] expand) {
        this.expand = expand;
        return this;
    }
    
    /**
     * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
     * 
     * You should specify either `examples` or `file`, but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file")
    public String file;

    public CreateClassificationRequest withFile(String file) {
        this.file = file;
        return this;
    }
    
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;

    public CreateClassificationRequest withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * As an example, you can pass `{"50256": -100}` to prevent the &lt;|endoftext|&gt; token from being generated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logit_bias")
    public java.util.Map<String, Object> logitBias;

    public CreateClassificationRequest withLogitBias(java.util.Map<String, Object> logitBias) {
        this.logitBias = logitBias;
        return this;
    }
    
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
     * 
     * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
     * 
     * When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logprobs")
    public Long logprobs;

    public CreateClassificationRequest withLogprobs(Long logprobs) {
        this.logprobs = logprobs;
        return this;
    }
    
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_examples")
    public Long maxExamples;

    public CreateClassificationRequest withMaxExamples(Long maxExamples) {
        this.maxExamples = maxExamples;
        return this;
    }
    
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     */
    @JsonProperty("model")
    public String model;

    public CreateClassificationRequest withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * Query to be classified.
     */
    @JsonProperty("query")
    public String query;

    public CreateClassificationRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
     * 
     * This flag only takes effect when `file` is set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_metadata")
    public Boolean returnMetadata;

    public CreateClassificationRequest withReturnMetadata(Boolean returnMetadata) {
        this.returnMetadata = returnMetadata;
        return this;
    }
    
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_prompt")
    public Boolean returnPrompt;

    public CreateClassificationRequest withReturnPrompt(Boolean returnPrompt) {
        this.returnPrompt = returnPrompt;
        return this;
    }
    
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_model")
    public String searchModel;

    public CreateClassificationRequest withSearchModel(String searchModel) {
        this.searchModel = searchModel;
        return this;
    }
    
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;

    public CreateClassificationRequest withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public String user;

    public CreateClassificationRequest withUser(String user) {
        this.user = user;
        return this;
    }
    
    public CreateClassificationRequest(@JsonProperty("model") String model, @JsonProperty("query") String query) {
        this.model = model;
        this.query = query;
  }
}
