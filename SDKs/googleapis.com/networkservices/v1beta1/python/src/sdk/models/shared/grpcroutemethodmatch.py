"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GrpcRouteMethodMatchTypeEnum(str, Enum):
    r"""Optional. Specifies how to match against the name. If not specified, a default value of \\"EXACT\\" is used."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    EXACT = 'EXACT'
    REGULAR_EXPRESSION = 'REGULAR_EXPRESSION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GrpcRouteMethodMatch:
    r"""Specifies a match against a method."""
    
    case_sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseSensitive'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION."""  
    grpc_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grpcMethod'), 'exclude': lambda f: f is None }})
    r"""Required. Name of the method to match against. If unspecified, will match all methods."""  
    grpc_service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grpcService'), 'exclude': lambda f: f is None }})
    r"""Required. Name of the service to match against. If unspecified, will match all services."""  
    type: Optional[GrpcRouteMethodMatchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies how to match against the name. If not specified, a default value of \\"EXACT\\" is used."""  
    