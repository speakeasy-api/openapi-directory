/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * TaskRequestInput - The *task* is the basic object around which many operations in Asana are centered.
 */
public class TaskRequestInput {
    /**
     * *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_status")
    public TaskRequestApprovalStatusEnum approvalStatus;

    public TaskRequestInput withApprovalStatus(TaskRequestApprovalStatusEnum approvalStatus) {
        this.approvalStatus = approvalStatus;
        return this;
    }
    
    /**
     * Gid of a user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee")
    public String assignee;

    public TaskRequestInput withAssignee(String assignee) {
        this.assignee = assignee;
        return this;
    }
    
    /**
     * The *assignee section* is a subdivision of a project that groups tasks together in the assignee's "My Tasks" list. It can either be a header above a list of tasks in a list view or a column in a board view of "My Tasks."
     * The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's "My Tasks" list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee_section")
    public String assigneeSection;

    public TaskRequestInput withAssigneeSection(String assigneeSection) {
        this.assigneeSection = assigneeSection;
        return this;
    }
    
    /**
     * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee_status")
    public TaskRequestAssigneeStatusEnum assigneeStatus;

    public TaskRequestInput withAssigneeStatus(TaskRequestAssigneeStatusEnum assigneeStatus) {
        this.assigneeStatus = assigneeStatus;
        return this;
    }
    
    /**
     * True if the task is currently marked complete, false if not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    public Boolean completed;

    public TaskRequestInput withCompleted(Boolean completed) {
        this.completed = completed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_by")
    public UserCompactInput completedBy;

    public TaskRequestInput withCompletedBy(UserCompactInput completedBy) {
        this.completedBy = completedBy;
        return this;
    }
    
    /**
     * An object where each key is a Custom Field GID and each value is an enum GID, string, number, object, or array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    public java.util.Map<String, String> customFields;

    public TaskRequestInput withCustomFields(java.util.Map<String, String> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("due_at")
    public LocalDate dueAt;

    public TaskRequestInput withDueAt(LocalDate dueAt) {
        this.dueAt = dueAt;
        return this;
    }
    
    /**
     * The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("due_on")
    public LocalDate dueOn;

    public TaskRequestInput withDueOn(LocalDate dueOn) {
        this.dueOn = dueOn;
        return this;
    }
    
    /**
     * *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).
     * The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external")
    public TaskRequestExternal external;

    public TaskRequestInput withExternal(TaskRequestExternal external) {
        this.external = external;
        return this;
    }
    
    /**
     * *Create-Only* An array of strings identifying users. These can either be the string "me", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    public String[] followers;

    public TaskRequestInput withFollowers(String[] followers) {
        this.followers = followers;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_notes")
    public String htmlNotes;

    public TaskRequestInput withHtmlNotes(String htmlNotes) {
        this.htmlNotes = htmlNotes;
        return this;
    }
    
    /**
     * True if the task is liked by the authorized user, false if not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liked")
    public Boolean liked;

    public TaskRequestInput withLiked(Boolean liked) {
        this.liked = liked;
        return this;
    }
    
    /**
     * The name of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public TaskRequestInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Free-form textual information associated with the task (i.e. its description).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public TaskRequestInput withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Gid of a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    public String parent;

    public TaskRequestInput withParent(String parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projects")
    public String[] projects;

    public TaskRequestInput withProjects(String[] projects) {
        this.projects = projects;
        return this;
    }
    
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_subtype")
    public TaskRequestResourceSubtypeEnum resourceSubtype;

    public TaskRequestInput withResourceSubtype(TaskRequestResourceSubtypeEnum resourceSubtype) {
        this.resourceSubtype = resourceSubtype;
        return this;
    }
    
    /**
     * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.
     * *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_at")
    public LocalDate startAt;

    public TaskRequestInput withStartAt(LocalDate startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.
     * *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_on")
    public LocalDate startOn;

    public TaskRequestInput withStartOn(LocalDate startOn) {
        this.startOn = startOn;
        return this;
    }
    
    /**
     * *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public TaskRequestInput withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Gid of a workspace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace")
    public String workspace;

    public TaskRequestInput withWorkspace(String workspace) {
        this.workspace = workspace;
        return this;
    }
    
    public TaskRequestInput(){}
}
