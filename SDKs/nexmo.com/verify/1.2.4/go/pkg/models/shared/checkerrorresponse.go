// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CheckErrorResponseStatusEnum - Code | Text | Description
// -- | -- | --
// 0 | Success | The request was successfully accepted by Vonage.
// 1 | Throttled | You are trying to send more than the maximum of 30 requests per second.
// 2 | Your request is incomplete and missing the mandatory parameter `$parameter` | The stated parameter is missing.
// 3 | Invalid value for parameter `$parameter` | Invalid value for parameter. If you see Facility not allowed in the error text, check that you are using the correct Base URL in your request.
// 4 | Invalid credentials were provided | The supplied API key or secret in the request is either invalid or disabled.
// 5 | Internal Error | An error occurred processing this request in the Cloud Communications Platform.
// 6 | The Vonage platform was unable to process this message for the following reason: `$reason` | The request could not be routed.
// 16 | The code inserted does not match the expected value |
// 17 | The wrong code was provided too many times | You can run Verify check on a specific `request_id` up to three times unless a new verification code is generated. If you check a request more than three times, it is set to FAILED and you cannot check it again.
type CheckErrorResponseStatusEnum string

const (
	CheckErrorResponseStatusEnumZero      CheckErrorResponseStatusEnum = "0"
	CheckErrorResponseStatusEnumOne       CheckErrorResponseStatusEnum = "1"
	CheckErrorResponseStatusEnumTwo       CheckErrorResponseStatusEnum = "2"
	CheckErrorResponseStatusEnumThree     CheckErrorResponseStatusEnum = "3"
	CheckErrorResponseStatusEnumFour      CheckErrorResponseStatusEnum = "4"
	CheckErrorResponseStatusEnumFive      CheckErrorResponseStatusEnum = "5"
	CheckErrorResponseStatusEnumSix       CheckErrorResponseStatusEnum = "6"
	CheckErrorResponseStatusEnumSixteen   CheckErrorResponseStatusEnum = "16"
	CheckErrorResponseStatusEnumSeventeen CheckErrorResponseStatusEnum = "17"
)

func (e *CheckErrorResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "16":
		fallthrough
	case "17":
		*e = CheckErrorResponseStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckErrorResponseStatusEnum: %s", s)
	}
}

// CheckErrorResponse - Error
type CheckErrorResponse struct {
	// If the `status` is non-zero, this explains the error encountered.
	ErrorText *string `json:"error_text,omitempty"`
	// The `request_id` that you received in the response to the Verify request and used in the Verify check request.
	RequestID *string `json:"request_id,omitempty"`
	// Code | Text | Description
	// -- | -- | --
	// 0 | Success | The request was successfully accepted by Vonage.
	// 1 | Throttled | You are trying to send more than the maximum of 30 requests per second.
	// 2 | Your request is incomplete and missing the mandatory parameter `$parameter` | The stated parameter is missing.
	// 3 | Invalid value for parameter `$parameter` | Invalid value for parameter. If you see Facility not allowed in the error text, check that you are using the correct Base URL in your request.
	// 4 | Invalid credentials were provided | The supplied API key or secret in the request is either invalid or disabled.
	// 5 | Internal Error | An error occurred processing this request in the Cloud Communications Platform.
	// 6 | The Vonage platform was unable to process this message for the following reason: `$reason` | The request could not be routed.
	// 16 | The code inserted does not match the expected value |
	// 17 | The wrong code was provided too many times | You can run Verify check on a specific `request_id` up to three times unless a new verification code is generated. If you check a request more than three times, it is set to FAILED and you cannot check it again.
	//
	Status *CheckErrorResponseStatusEnum `json:"status,omitempty"`
}
