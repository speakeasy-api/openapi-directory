"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://trusthub.twilio.com"];
/**
 * This is the public Twilio REST API.
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
    }
    /**
     * Create a new Customer-Profile.
     */
    SDK.prototype.createCustomerProfile = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateCustomerProfileCreateCustomerProfileRequest(req);
        }
        var baseURL = operations.CreateCustomerProfileServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/CustomerProfiles";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateCustomerProfileSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateCustomerProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfile = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfile);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Assigned Item.
     */
    SDK.prototype.createCustomerProfileChannelEndpointAssignment = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CreateCustomerProfileChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.CreateCustomerProfileChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CreateCustomerProfileChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateCustomerProfileChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Assigned Item.
     */
    SDK.prototype.createCustomerProfileEntityAssignment = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateCustomerProfileEntityAssignmentRequest(req);
        }
        var baseURL = operations.CreateCustomerProfileEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateCustomerProfileEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateCustomerProfileEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfileCustomerProfileEntityAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfileCustomerProfileEntityAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Evaluation
     */
    SDK.prototype.createCustomerProfileEvaluation = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateCustomerProfileEvaluationRequest(req);
        }
        var baseURL = operations.CreateCustomerProfileEvaluationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateCustomerProfileEvaluationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateCustomerProfileEvaluationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfileCustomerProfileEvaluation =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfileCustomerProfileEvaluation);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new End User.
     */
    SDK.prototype.createEndUser = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateEndUserCreateEndUserRequest(req);
        }
        var baseURL = operations.CreateEndUserServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/EndUsers";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateEndUserSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateEndUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1EndUser = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1EndUser);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Supporting Document.
     */
    SDK.prototype.createSupportingDocument = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CreateSupportingDocumentCreateSupportingDocumentRequest(req);
        }
        var baseURL = operations.CreateSupportingDocumentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/SupportingDocuments";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateSupportingDocumentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateSupportingDocumentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1SupportingDocument = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1SupportingDocument);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Customer-Profile.
     */
    SDK.prototype.createTrustProduct = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTrustProductCreateTrustProductRequest(req);
        }
        var baseURL = operations.CreateTrustProductServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/TrustProducts";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateTrustProductSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTrustProductResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProduct = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProduct);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Assigned Item.
     */
    SDK.prototype.createTrustProductChannelEndpointAssignment = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTrustProductChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.CreateTrustProductChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CreateTrustProductChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTrustProductChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProductTrustProductChannelEndpointAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProductTrustProductChannelEndpointAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Assigned Item.
     */
    SDK.prototype.createTrustProductEntityAssignment = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTrustProductEntityAssignmentRequest(req);
        }
        var baseURL = operations.CreateTrustProductEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/EntityAssignments", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateTrustProductEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTrustProductEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProductTrustProductEntityAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProductTrustProductEntityAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Evaluation
     */
    SDK.prototype.createTrustProductEvaluation = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTrustProductEvaluationRequest(req);
        }
        var baseURL = operations.CreateTrustProductEvaluationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/Evaluations", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateTrustProductEvaluationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTrustProductEvaluationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProductTrustProductEvaluation =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProductTrustProductEvaluation);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Customer-Profile.
     */
    SDK.prototype.deleteCustomerProfile = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteCustomerProfileRequest(req);
        }
        var baseURL = operations.DeleteCustomerProfileServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteCustomerProfileSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteCustomerProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Remove an Assignment Item Instance.
     */
    SDK.prototype.deleteCustomerProfileChannelEndpointAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.DeleteCustomerProfileChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.DeleteCustomerProfileChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.DeleteCustomerProfileChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteCustomerProfileChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Remove an Assignment Item Instance.
     */
    SDK.prototype.deleteCustomerProfileEntityAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteCustomerProfileEntityAssignmentRequest(req);
        }
        var baseURL = operations.DeleteCustomerProfileEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteCustomerProfileEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteCustomerProfileEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific End User.
     */
    SDK.prototype.deleteEndUser = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteEndUserRequest(req);
        }
        var baseURL = operations.DeleteEndUserServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/EndUsers/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteEndUserSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteEndUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Supporting Document.
     */
    SDK.prototype.deleteSupportingDocument = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteSupportingDocumentRequest(req);
        }
        var baseURL = operations.DeleteSupportingDocumentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/SupportingDocuments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteSupportingDocumentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteSupportingDocumentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Customer-Profile.
     */
    SDK.prototype.deleteTrustProduct = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTrustProductRequest(req);
        }
        var baseURL = operations.DeleteTrustProductServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteTrustProductSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTrustProductResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Remove an Assignment Item Instance.
     */
    SDK.prototype.deleteTrustProductChannelEndpointAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTrustProductChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.DeleteTrustProductChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.DeleteTrustProductChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTrustProductChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Remove an Assignment Item Instance.
     */
    SDK.prototype.deleteTrustProductEntityAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTrustProductEntityAssignmentRequest(req);
        }
        var baseURL = operations.DeleteTrustProductEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteTrustProductEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTrustProductEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Customer-Profile instance.
     */
    SDK.prototype.fetchCustomerProfile = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchCustomerProfileRequest(req);
        }
        var baseURL = operations.FetchCustomerProfileServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchCustomerProfileSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchCustomerProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfile = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfile);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Assigned Item Instance.
     */
    SDK.prototype.fetchCustomerProfileChannelEndpointAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchCustomerProfileChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.FetchCustomerProfileChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.FetchCustomerProfileChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchCustomerProfileChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Assigned Item Instance.
     */
    SDK.prototype.fetchCustomerProfileEntityAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchCustomerProfileEntityAssignmentRequest(req);
        }
        var baseURL = operations.FetchCustomerProfileEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchCustomerProfileEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchCustomerProfileEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfileCustomerProfileEntityAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfileCustomerProfileEntityAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Evaluation Instance.
     */
    SDK.prototype.fetchCustomerProfileEvaluation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchCustomerProfileEvaluationRequest(req);
        }
        var baseURL = operations.FetchCustomerProfileEvaluationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchCustomerProfileEvaluationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchCustomerProfileEvaluationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfileCustomerProfileEvaluation =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfileCustomerProfileEvaluation);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific End User Instance.
     */
    SDK.prototype.fetchEndUser = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchEndUserRequest(req);
        }
        var baseURL = operations.FetchEndUserServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/EndUsers/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchEndUserSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchEndUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1EndUser = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1EndUser);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific End-User Type Instance.
     */
    SDK.prototype.fetchEndUserType = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchEndUserTypeRequest(req);
        }
        var baseURL = operations.FetchEndUserTypeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/EndUserTypes/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchEndUserTypeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchEndUserTypeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1EndUserType = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1EndUserType);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Policy Instance.
     */
    SDK.prototype.fetchPolicies = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchPoliciesRequest(req);
        }
        var baseURL = operations.FetchPoliciesServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Policies/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchPoliciesSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchPoliciesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1Policies = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1Policies);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Supporting Document Instance.
     */
    SDK.prototype.fetchSupportingDocument = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchSupportingDocumentRequest(req);
        }
        var baseURL = operations.FetchSupportingDocumentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/SupportingDocuments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchSupportingDocumentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchSupportingDocumentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1SupportingDocument = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1SupportingDocument);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Supporting Document Type Instance.
     */
    SDK.prototype.fetchSupportingDocumentType = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchSupportingDocumentTypeRequest(req);
        }
        var baseURL = operations.FetchSupportingDocumentTypeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/SupportingDocumentTypes/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchSupportingDocumentTypeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchSupportingDocumentTypeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1SupportingDocumentType = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1SupportingDocumentType);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Customer-Profile instance.
     */
    SDK.prototype.fetchTrustProduct = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTrustProductRequest(req);
        }
        var baseURL = operations.FetchTrustProductServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTrustProductSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTrustProductResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProduct = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProduct);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Assigned Item Instance.
     */
    SDK.prototype.fetchTrustProductChannelEndpointAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTrustProductChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.FetchTrustProductChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.FetchTrustProductChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTrustProductChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProductTrustProductChannelEndpointAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProductTrustProductChannelEndpointAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Assigned Item Instance.
     */
    SDK.prototype.fetchTrustProductEntityAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTrustProductEntityAssignmentRequest(req);
        }
        var baseURL = operations.FetchTrustProductEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTrustProductEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTrustProductEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProductTrustProductEntityAssignment =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProductTrustProductEntityAssignment);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Evaluation Instance.
     */
    SDK.prototype.fetchTrustProductEvaluation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTrustProductEvaluationRequest(req);
        }
        var baseURL = operations.FetchTrustProductEvaluationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/Evaluations/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTrustProductEvaluationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTrustProductEvaluationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProductTrustProductEvaluation =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProductTrustProductEvaluation);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Customer-Profiles for an account.
     */
    SDK.prototype.listCustomerProfile = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListCustomerProfileRequest(req);
        }
        var baseURL = operations.ListCustomerProfileServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/CustomerProfiles";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListCustomerProfileSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListCustomerProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listCustomerProfileResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListCustomerProfileListCustomerProfileResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Assigned Items for an account.
     */
    SDK.prototype.listCustomerProfileChannelEndpointAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListCustomerProfileChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.ListCustomerProfileChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.ListCustomerProfileChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListCustomerProfileChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listCustomerProfileChannelEndpointAssignmentResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListCustomerProfileChannelEndpointAssignmentListCustomerProfileChannelEndpointAssignmentResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Assigned Items for an account.
     */
    SDK.prototype.listCustomerProfileEntityAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListCustomerProfileEntityAssignmentRequest(req);
        }
        var baseURL = operations.ListCustomerProfileEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListCustomerProfileEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListCustomerProfileEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listCustomerProfileEntityAssignmentResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListCustomerProfileEntityAssignmentListCustomerProfileEntityAssignmentResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of Evaluations associated to the customer_profile resource.
     */
    SDK.prototype.listCustomerProfileEvaluation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListCustomerProfileEvaluationRequest(req);
        }
        var baseURL = operations.ListCustomerProfileEvaluationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListCustomerProfileEvaluationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListCustomerProfileEvaluationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listCustomerProfileEvaluationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListCustomerProfileEvaluationListCustomerProfileEvaluationResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all End User for an account.
     */
    SDK.prototype.listEndUser = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListEndUserRequest(req);
        }
        var baseURL = operations.ListEndUserServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/EndUsers";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListEndUserSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListEndUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listEndUserResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListEndUserListEndUserResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all End-User Types.
     */
    SDK.prototype.listEndUserType = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListEndUserTypeRequest(req);
        }
        var baseURL = operations.ListEndUserTypeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/EndUserTypes";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListEndUserTypeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListEndUserTypeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listEndUserTypeResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListEndUserTypeListEndUserTypeResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Policys.
     */
    SDK.prototype.listPolicies = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListPoliciesRequest(req);
        }
        var baseURL = operations.ListPoliciesServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Policies";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListPoliciesSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListPoliciesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listPoliciesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListPoliciesListPoliciesResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Supporting Document for an account.
     */
    SDK.prototype.listSupportingDocument = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListSupportingDocumentRequest(req);
        }
        var baseURL = operations.ListSupportingDocumentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/SupportingDocuments";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListSupportingDocumentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListSupportingDocumentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listSupportingDocumentResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListSupportingDocumentListSupportingDocumentResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Supporting Document Types.
     */
    SDK.prototype.listSupportingDocumentType = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListSupportingDocumentTypeRequest(req);
        }
        var baseURL = operations.ListSupportingDocumentTypeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/SupportingDocumentTypes";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListSupportingDocumentTypeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListSupportingDocumentTypeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listSupportingDocumentTypeResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListSupportingDocumentTypeListSupportingDocumentTypeResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Customer-Profiles for an account.
     */
    SDK.prototype.listTrustProduct = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTrustProductRequest(req);
        }
        var baseURL = operations.ListTrustProductServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/TrustProducts";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTrustProductSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTrustProductResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTrustProductResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTrustProductListTrustProductResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Assigned Items for an account.
     */
    SDK.prototype.listTrustProductChannelEndpointAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTrustProductChannelEndpointAssignmentRequest(req);
        }
        var baseURL = operations.ListTrustProductChannelEndpointAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.ListTrustProductChannelEndpointAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTrustProductChannelEndpointAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTrustProductChannelEndpointAssignmentResponse =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTrustProductChannelEndpointAssignmentListTrustProductChannelEndpointAssignmentResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Assigned Items for an account.
     */
    SDK.prototype.listTrustProductEntityAssignment = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTrustProductEntityAssignmentRequest(req);
        }
        var baseURL = operations.ListTrustProductEntityAssignmentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/EntityAssignments", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTrustProductEntityAssignmentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTrustProductEntityAssignmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTrustProductEntityAssignmentResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTrustProductEntityAssignmentListTrustProductEntityAssignmentResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of Evaluations associated to the trust_product resource.
     */
    SDK.prototype.listTrustProductEvaluation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTrustProductEvaluationRequest(req);
        }
        var baseURL = operations.ListTrustProductEvaluationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{TrustProductSid}/Evaluations", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTrustProductEvaluationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTrustProductEvaluationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTrustProductEvaluationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTrustProductEvaluationListTrustProductEvaluationResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Updates a Customer-Profile in an account.
     */
    SDK.prototype.updateCustomerProfile = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateCustomerProfileRequest(req);
        }
        var baseURL = operations.UpdateCustomerProfileServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/CustomerProfiles/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateCustomerProfileSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateCustomerProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1CustomerProfile = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1CustomerProfile);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update an existing End User.
     */
    SDK.prototype.updateEndUser = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateEndUserRequest(req);
        }
        var baseURL = operations.UpdateEndUserServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/EndUsers/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateEndUserSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateEndUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1EndUser = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1EndUser);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update an existing Supporting Document.
     */
    SDK.prototype.updateSupportingDocument = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateSupportingDocumentRequest(req);
        }
        var baseURL = operations.UpdateSupportingDocumentServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/SupportingDocuments/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateSupportingDocumentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateSupportingDocumentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1SupportingDocument = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1SupportingDocument);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Updates a Customer-Profile in an account.
     */
    SDK.prototype.updateTrustProduct = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTrustProductRequest(req);
        }
        var baseURL = operations.UpdateTrustProductServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/TrustProducts/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateTrustProductSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateTrustProductResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.trusthubV1TrustProduct = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TrusthubV1TrustProduct);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
