/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class QueryQueryGroupGroupCondition extends SpeakeasyBase {
  /**
   * The compare condition bases' value a
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@ValueA" })
  atValueA?: string;

  /**
   * The compare condition bases' value b
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@ValueB" })
  atValueB?: string;
}

export class QueryQueryGroupGroupFilter extends SpeakeasyBase {
  /**
   * The filter bases' is or
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@IsOr" })
  atIsOr?: boolean;

  /**
   * The filter bases' property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Property" })
  atProperty?: string;

  /**
   * The filter bases' value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Value" })
  atValue?: string;
}

export class QueryQueryGroupGroupOrder extends SpeakeasyBase {
  /**
   * The order by bases' property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Property" })
  atProperty?: string;
}

/**
 * The output bases' output
 */
export enum QueryQueryGroupGroupOutputAtOutputEnum {
  Element = "Element",
  Attribute = "Attribute",
  Variable = "Variable",
  VariableSum = "VariableSum",
  VariableAppend = "VariableAppend",
  VariablePrepend = "VariablePrepend",
  ElementDatePart = "ElementDatePart",
  InnerText = "InnerText",
}

export class QueryQueryGroupGroupOutput extends SpeakeasyBase {
  /**
   * The output bases' max length
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@MaxLength" })
  atMaxLength?: string;

  /**
   * The output bases' output
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Output" })
  atOutput?: QueryQueryGroupGroupOutputAtOutputEnum;
}

export class QueryQueryGroupGroup extends SpeakeasyBase {
  /**
   * The entity groups' group name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@GroupName" })
  atGroupName?: string;

  /**
   * The entity groups' item name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@ItemName" })
  atItemName?: string;

  /**
   * The entity groups' loop expression
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@LoopExpression" })
  atLoopExpression?: string;

  /**
   * The entity groups' predicate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Predicate" })
  atPredicate?: string;

  /**
   * The entity groups' selector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Selector" })
  atSelector?: string;

  /**
   * The entity groups' unique key variable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@UniqueKeyVariable" })
  atUniqueKeyVariable?: string;

  /**
   * The entity groups' conditions
   */
  @SpeakeasyMetadata({ elemType: QueryQueryGroupGroupCondition })
  @Expose({ name: "Condition" })
  @Type(() => QueryQueryGroupGroupCondition)
  condition?: QueryQueryGroupGroupCondition[];

  /**
   * The entity groups' filters
   */
  @SpeakeasyMetadata({ elemType: QueryQueryGroupGroupFilter })
  @Expose({ name: "Filter" })
  @Type(() => QueryQueryGroupGroupFilter)
  filter?: QueryQueryGroupGroupFilter[];

  /**
   * The entity groups' ordering
   */
  @SpeakeasyMetadata({ elemType: QueryQueryGroupGroupOrder })
  @Expose({ name: "Order" })
  @Type(() => QueryQueryGroupGroupOrder)
  order?: QueryQueryGroupGroupOrder[];

  /**
   * The entity groups' outputs
   */
  @SpeakeasyMetadata({ elemType: QueryQueryGroupGroupOutput })
  @Expose({ name: "Output" })
  @Type(() => QueryQueryGroupGroupOutput)
  output?: QueryQueryGroupGroupOutput[];
}

/**
 * The querys' groups
 */
export class QueryQueryGroup extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: QueryQueryGroupGroup })
  @Expose({ name: "Group" })
  @Type(() => QueryQueryGroupGroup)
  group?: QueryQueryGroupGroup[];
}

export class QueryQueryVariableVariable extends SpeakeasyBase {
  /**
   * The name value pairs' name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Name" })
  atName?: string;

  /**
   * The name value pairs' value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Value" })
  atValue?: string;
}

/**
 * The querys' variables
 */
export class QueryQueryVariable extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: QueryQueryVariableVariable })
  @Expose({ name: "Variable" })
  @Type(() => QueryQueryVariableVariable)
  variable?: QueryQueryVariableVariable[];
}

export class QueryQuery extends SpeakeasyBase {
  /**
   * The querys' encoding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Encoding" })
  encoding?: string;

  /**
   * The querys' exclude null or empty elements
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExcludeNullOrEmptyElements" })
  excludeNullOrEmptyElements?: boolean;

  /**
   * The querys' groups
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Groups" })
  @Type(() => QueryQueryGroup)
  groups?: QueryQueryGroup;

  /**
   * The querys' root node name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RootNodeName" })
  rootNodeName?: string;

  /**
   * The querys' suppress metric attributes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SuppressMetricAttributes" })
  suppressMetricAttributes?: boolean;

  /**
   * The querys' variables
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Variables" })
  @Type(() => QueryQueryVariable)
  variables?: QueryQueryVariable;
}

/**
 * The query object to be executed against the application data.
 */
export class Query extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Query" })
  @Type(() => QueryQuery)
  query?: QueryQuery;
}
