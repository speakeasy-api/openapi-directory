// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WeeklyScheduleDayOfWeekEnum - Required. Day of the week.
type WeeklyScheduleDayOfWeekEnum string

const (
	WeeklyScheduleDayOfWeekEnumDayOfWeekUnspecified WeeklyScheduleDayOfWeekEnum = "DAY_OF_WEEK_UNSPECIFIED"
	WeeklyScheduleDayOfWeekEnumMonday               WeeklyScheduleDayOfWeekEnum = "MONDAY"
	WeeklyScheduleDayOfWeekEnumTuesday              WeeklyScheduleDayOfWeekEnum = "TUESDAY"
	WeeklyScheduleDayOfWeekEnumWednesday            WeeklyScheduleDayOfWeekEnum = "WEDNESDAY"
	WeeklyScheduleDayOfWeekEnumThursday             WeeklyScheduleDayOfWeekEnum = "THURSDAY"
	WeeklyScheduleDayOfWeekEnumFriday               WeeklyScheduleDayOfWeekEnum = "FRIDAY"
	WeeklyScheduleDayOfWeekEnumSaturday             WeeklyScheduleDayOfWeekEnum = "SATURDAY"
	WeeklyScheduleDayOfWeekEnumSunday               WeeklyScheduleDayOfWeekEnum = "SUNDAY"
)

func (e WeeklyScheduleDayOfWeekEnum) ToPointer() *WeeklyScheduleDayOfWeekEnum {
	return &e
}

func (e *WeeklyScheduleDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DAY_OF_WEEK_UNSPECIFIED":
		fallthrough
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = WeeklyScheduleDayOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WeeklyScheduleDayOfWeekEnum: %v", v)
	}
}

// WeeklySchedule - Represents a weekly schedule.
type WeeklySchedule struct {
	// Required. Day of the week.
	DayOfWeek *WeeklyScheduleDayOfWeekEnum `json:"dayOfWeek,omitempty"`
}
