// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PhoneNumberTypeEnum string

const (
	PhoneNumberTypeEnumPrimary      PhoneNumberTypeEnum = "primary"
	PhoneNumberTypeEnumSecondary    PhoneNumberTypeEnum = "secondary"
	PhoneNumberTypeEnumHome         PhoneNumberTypeEnum = "home"
	PhoneNumberTypeEnumWork         PhoneNumberTypeEnum = "work"
	PhoneNumberTypeEnumOffice       PhoneNumberTypeEnum = "office"
	PhoneNumberTypeEnumMobile       PhoneNumberTypeEnum = "mobile"
	PhoneNumberTypeEnumAssistant    PhoneNumberTypeEnum = "assistant"
	PhoneNumberTypeEnumFax          PhoneNumberTypeEnum = "fax"
	PhoneNumberTypeEnumDirectDialIn PhoneNumberTypeEnum = "direct-dial-in"
	PhoneNumberTypeEnumPersonal     PhoneNumberTypeEnum = "personal"
	PhoneNumberTypeEnumOther        PhoneNumberTypeEnum = "other"
)

func (e PhoneNumberTypeEnum) ToPointer() *PhoneNumberTypeEnum {
	return &e
}

func (e *PhoneNumberTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "secondary":
		fallthrough
	case "home":
		fallthrough
	case "work":
		fallthrough
	case "office":
		fallthrough
	case "mobile":
		fallthrough
	case "assistant":
		fallthrough
	case "fax":
		fallthrough
	case "direct-dial-in":
		fallthrough
	case "personal":
		fallthrough
	case "other":
		*e = PhoneNumberTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PhoneNumberTypeEnum: %v", v)
	}
}

type PhoneNumber struct {
	AreaCode    *string              `json:"area_code,omitempty"`
	CountryCode *string              `json:"country_code,omitempty"`
	Extension   *string              `json:"extension,omitempty"`
	ID          *string              `json:"id,omitempty"`
	Number      string               `json:"number"`
	Type        *PhoneNumberTypeEnum `json:"type,omitempty"`
}
