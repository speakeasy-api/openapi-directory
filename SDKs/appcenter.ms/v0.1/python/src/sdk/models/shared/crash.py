"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import stacktrace as shared_stacktrace
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrashDetails:
    
    locale: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale') }})
    r"""Language code (example: en_US)."""  
    rooted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rooted') }})
    r"""Whether the device where the crash occurred is rooted or jailbroken"""  
    screen_size: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_size') }})
    r"""Screen size of the device in pixels (example: 640x480)."""  
    app_start_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_start_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Application launch timestamp (example: 1985-04-12T23:20:50.52Z)."""  
    carrier_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_country'), 'exclude': lambda f: f is None }})
    r"""Carrier country code (for mobile devices)."""  
    carrier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_name'), 'exclude': lambda f: f is None }})
    r"""Carrier name (for mobile devices)."""  
    os_build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_build'), 'exclude': lambda f: f is None }})
    r"""OS build code (example: LMY47X)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Crash:
    r"""Created"""
    
    build: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build') }})  
    crash_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crash_id') }})  
    device: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device') }})  
    new_crash_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_crash_group_id') }})  
    new_crash_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_crash_id') }})  
    os_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version') }})  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    user_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name') }})  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})  
    details: Optional[CrashDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})  
    device_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_name'), 'exclude': lambda f: f is None }})  
    display_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_id'), 'exclude': lambda f: f is None }})  
    os_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_type'), 'exclude': lambda f: f is None }})  
    stacktrace: Optional[shared_stacktrace.Stacktrace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stacktrace'), 'exclude': lambda f: f is None }})
    r"""a stacktrace in a processed and prettyfied way"""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})  
    