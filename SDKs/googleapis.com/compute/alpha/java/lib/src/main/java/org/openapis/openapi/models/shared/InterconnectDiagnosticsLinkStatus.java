/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class InterconnectDiagnosticsLinkStatus {
    /**
     * A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arpCaches")
    public InterconnectDiagnosticsARPEntry[] arpCaches;

    public InterconnectDiagnosticsLinkStatus withArpCaches(InterconnectDiagnosticsARPEntry[] arpCaches) {
        this.arpCaches = arpCaches;
        return this;
    }
    
    /**
     * The unique ID for this link assigned during turn up by Google.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("circuitId")
    public String circuitId;

    public InterconnectDiagnosticsLinkStatus withCircuitId(String circuitId) {
        this.circuitId = circuitId;
        return this;
    }
    
    /**
     * The Demarc address assigned by Google and provided in the LoA.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleDemarc")
    public String googleDemarc;

    public InterconnectDiagnosticsLinkStatus withGoogleDemarc(String googleDemarc) {
        this.googleDemarc = googleDemarc;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lacpStatus")
    public InterconnectDiagnosticsLinkLACPStatus lacpStatus;

    public InterconnectDiagnosticsLinkStatus withLacpStatus(InterconnectDiagnosticsLinkLACPStatus lacpStatus) {
        this.lacpStatus = lacpStatus;
        return this;
    }
    
    /**
     * Describes the status of MACsec encryption on the link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macsec")
    public InterconnectDiagnosticsMacsecStatus macsec;

    public InterconnectDiagnosticsLinkStatus withMacsec(InterconnectDiagnosticsMacsecStatus macsec) {
        this.macsec = macsec;
        return this;
    }
    
    /**
     * The operational status of the link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationalStatus")
    public InterconnectDiagnosticsLinkStatusOperationalStatusEnum operationalStatus;

    public InterconnectDiagnosticsLinkStatus withOperationalStatus(InterconnectDiagnosticsLinkStatusOperationalStatusEnum operationalStatus) {
        this.operationalStatus = operationalStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receivingOpticalPower")
    public InterconnectDiagnosticsLinkOpticalPower receivingOpticalPower;

    public InterconnectDiagnosticsLinkStatus withReceivingOpticalPower(InterconnectDiagnosticsLinkOpticalPower receivingOpticalPower) {
        this.receivingOpticalPower = receivingOpticalPower;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transmittingOpticalPower")
    public InterconnectDiagnosticsLinkOpticalPower transmittingOpticalPower;

    public InterconnectDiagnosticsLinkStatus withTransmittingOpticalPower(InterconnectDiagnosticsLinkOpticalPower transmittingOpticalPower) {
        this.transmittingOpticalPower = transmittingOpticalPower;
        return this;
    }
    
    public InterconnectDiagnosticsLinkStatus(){}
}
