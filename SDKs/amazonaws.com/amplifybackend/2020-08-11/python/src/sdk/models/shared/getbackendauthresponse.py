"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalconstraintselement_enum as shared_additionalconstraintselement_enum
from ..shared import backendauthappleproviderconfig as shared_backendauthappleproviderconfig
from ..shared import backendauthsocialproviderconfig as shared_backendauthsocialproviderconfig
from ..shared import mfamode_enum as shared_mfamode_enum
from ..shared import mfatypeselement_enum as shared_mfatypeselement_enum
from ..shared import oauthscopeselement_enum as shared_oauthscopeselement_enum
from ..shared import requiredsignupattributeselement_enum as shared_requiredsignupattributeselement_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetBackendAuthResponseResourceConfigAuthResourcesEnum(str, Enum):
    r"""Defines whether you want to configure only authentication or both authentication and authorization settings."""
    USER_POOL_ONLY = 'USER_POOL_ONLY'
    IDENTITY_POOL_AND_USER_POOL = 'IDENTITY_POOL_AND_USER_POOL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigIdentityPoolConfigs:
    r"""Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project."""
    
    identity_pool_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolName') }})  
    unauthenticated_login: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnauthenticatedLogin') }})  
    
class GetBackendAuthResponseResourceConfigServiceEnum(str, Enum):
    r"""Defines the service name to use when configuring an authentication resource in your Amplify project."""
    COGNITO = 'COGNITO'

class GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum(str, Enum):
    r"""<b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password."""
    EMAIL = 'EMAIL'
    SMS = 'SMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPasswordEmailSettings:
    r"""<b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password."""
    
    email_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailMessage'), 'exclude': lambda f: f is None }})  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSubject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPasswordSmsSettings:
    r"""<b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password."""
    
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPassword:
    r"""<b>(DEPRECATED)</b> Describes the forgotten password policy for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    delivery_method: GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryMethod') }})  
    email_settings: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPasswordEmailSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSettings'), 'exclude': lambda f: f is None }})  
    sms_settings: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPasswordSmsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsMfaSettings:
    r"""Describes the configuration settings and methods for your Amplify app users to use MFA."""
    
    mfa_types: Optional[list[shared_mfatypeselement_enum.MfaTypesElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MfaTypes'), 'exclude': lambda f: f is None }})  
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsMfa:
    r"""Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project."""
    
    mfa_mode: shared_mfamode_enum.MFAModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MFAMode') }})  
    settings: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsMfaSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    
class GetBackendAuthResponseResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum(str, Enum):
    r"""The OAuth grant type that you use to allow app users to authenticate from your Amplify app."""
    CODE = 'CODE'
    IMPLICIT = 'IMPLICIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsOAuthSocialProviderSettings:
    r"""The settings for using social providers to access your Amplify app."""
    
    facebook: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Facebook'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    google: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Google'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    login_with_amazon: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoginWithAmazon'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    sign_in_with_apple: Optional[shared_backendauthappleproviderconfig.BackendAuthAppleProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignInWithApple'), 'exclude': lambda f: f is None }})
    r"""Describes Apple social federation configurations for allowing your app users to sign in using OAuth."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsOAuth:
    r"""Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    o_auth_grant_type: GetBackendAuthResponseResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuthGrantType') }})  
    o_auth_scopes: list[shared_oauthscopeselement_enum.OAuthScopesElementEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuthScopes') }})  
    redirect_sign_in_ur_is: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectSignInURIs') }})  
    redirect_sign_out_ur_is: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectSignOutURIs') }})  
    domain_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainPrefix'), 'exclude': lambda f: f is None }})  
    social_provider_settings: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsOAuthSocialProviderSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SocialProviderSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsPasswordPolicy:
    r"""Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    minimum_length: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumLength') }})  
    additional_constraints: Optional[list[shared_additionalconstraintselement_enum.AdditionalConstraintsElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalConstraints'), 'exclude': lambda f: f is None }})  
    
class GetBackendAuthResponseResourceConfigUserPoolConfigsSignInMethodEnum(str, Enum):
    r"""Describes the sign-in methods that your Amplify app users use to log in using the Amazon Cognito user pool, configured as a part of your Amplify project."""
    EMAIL = 'EMAIL'
    EMAIL_AND_PHONE_NUMBER = 'EMAIL_AND_PHONE_NUMBER'
    PHONE_NUMBER = 'PHONE_NUMBER'
    USERNAME = 'USERNAME'

class GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum(str, Enum):
    r"""The type of verification message to send."""
    EMAIL = 'EMAIL'
    SMS = 'SMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessageEmailSettings:
    r"""The settings for the email message."""
    
    email_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailMessage'), 'exclude': lambda f: f is None }})  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSubject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessageSmsSettings:
    r"""The settings for the SMS message."""
    
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessage:
    r"""Describes the email or SMS verification message for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    delivery_method: GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryMethod') }})  
    email_settings: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessageEmailSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSettings'), 'exclude': lambda f: f is None }})  
    sms_settings: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessageSmsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfigUserPoolConfigs:
    r"""Describes authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project."""
    
    required_sign_up_attributes: list[shared_requiredsignupattributeselement_enum.RequiredSignUpAttributesElementEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequiredSignUpAttributes') }})  
    sign_in_method: GetBackendAuthResponseResourceConfigUserPoolConfigsSignInMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignInMethod') }})  
    user_pool_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolName') }})  
    forgot_password: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsForgotPassword] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForgotPassword'), 'exclude': lambda f: f is None }})  
    mfa: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsMfa] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mfa'), 'exclude': lambda f: f is None }})  
    o_auth: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsOAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuth'), 'exclude': lambda f: f is None }})  
    password_policy: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsPasswordPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PasswordPolicy'), 'exclude': lambda f: f is None }})  
    verification_message: Optional[GetBackendAuthResponseResourceConfigUserPoolConfigsVerificationMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponseResourceConfig:
    r"""The resource configuration for authorization requests to the backend of your Amplify project."""
    
    auth_resources: GetBackendAuthResponseResourceConfigAuthResourcesEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthResources') }})  
    service: GetBackendAuthResponseResourceConfigServiceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service') }})  
    user_pool_configs: GetBackendAuthResponseResourceConfigUserPoolConfigs = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolConfigs') }})  
    identity_pool_configs: Optional[GetBackendAuthResponseResourceConfigIdentityPoolConfigs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolConfigs'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBackendAuthResponse:
    r"""Success"""
    
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppId'), 'exclude': lambda f: f is None }})  
    backend_environment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackendEnvironmentName'), 'exclude': lambda f: f is None }})  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Error'), 'exclude': lambda f: f is None }})  
    resource_config: Optional[GetBackendAuthResponseResourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceConfig'), 'exclude': lambda f: f is None }})  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceName'), 'exclude': lambda f: f is None }})  
    