/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Container for custom fields of a Rate Plan Charge object.
 *
 * @remarks
 *
 */
export class RatePlanChargeDataRatePlanCharge extends SpeakeasyBase {
  /**
   * The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.
   *
   * @remarks
   *
   * **Character limit**: 100
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.AccountingCode`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountingCode" })
  accountingCode?: string;

  /**
   *  Specifies the type of charges a specific discount applies to.
   *
   * @remarks
   *
   * **Character limit**: 21
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ApplyDiscountTo" })
  applyDiscountTo?: string;

  /**
   *  Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.
   *
   * @remarks
   *
   *
   * **Character limit**: 2
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.BillCycleDay`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillCycleDay" })
  billCycleDay?: number;

  /**
   *  Specifies how to determine the billing day for the charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 20
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillCycleType" })
  billCycleType?: string;

  /**
   *  Allows billing period to be overridden on rate plan charge.
   *
   * @remarks
   *
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillingPeriod" })
  billingPeriod?: string;

  /**
   *  Aligns charges within the same subscription if multiple charges begin on different dates.
   *
   * @remarks
   *
   *
   * **Character limit**: 24
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillingPeriodAlignment" })
  billingPeriodAlignment?: string;

  /**
   *  The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
   *
   * @remarks
   *
   *
   * **Character limit**:
   *
   *
   * **Values**: one of the following:
   *
   * - I`n Advance`
   * - `In Arrears`
   * **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.
   * This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillingTiming" })
  billingTiming?: string;

  /**
   *  Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.ChargeModel`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChargeModel" })
  chargeModel?: string;

  /**
   *  A unique number that identifies the charge. This number is returned as a string.
   *
   * @remarks
   *
   *
   * **Character limit**: 50
   *
   *
   * **Values**: one of the following:
   *
   * - automatically generated if left null
   * - a unique number of 50 characters or fewer
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChargeNumber" })
  chargeNumber?: string;

  /**
   *  Specifies the type of charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 9
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.ChargeType`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChargeType" })
  chargeType?: string;

  /**
   *  The date through which a customer has been billed for the charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChargedThroughDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  chargedThroughDate?: Date;

  /**
   * The ID of the Zuora user who created the `RatePlanCharge` object.
   *
   * @remarks
   *
   * **Character limit**: 32
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedById" })
  createdById?: string;

  /**
   *  The date when the `RatePlanCharge` object was created.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription.
   *
   * @remarks
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DMRC" })
  dmrc?: number;

  /**
   *  After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DTCV" })
  dtcv?: number;

  /**
   *  A description of the charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 500
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.Description`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   *  Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:
   *
   * @remarks
   *
   * - Price
   * - IncludedUnits
   * - DiscountPercentage
   * - OveragePrice
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: a valid currency amount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DiscountAmount" })
  discountAmount?: number;

  /**
   * Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. This field is only required if the `ChargeModel` field is set to `DiscountFixedAmount` or `DiscountPercentage`.
   *
   * @remarks
   *
   * **Character limit**: 12
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.DiscountLevel`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DiscountLevel" })
  discountLevel?: string;

  /**
   *  Query Filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DiscountPercentage" })
  discountPercentage?: number;

  /**
   *  The date when the segmented charge ends or ended.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveEndDate?: Date;

  /**
   *  The date when the segmented charge starts or started.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveStartDate?: Date;

  /**
   *  Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.
   *
   * @remarks
   *
   *
   *
   * **Values**: one of the following:
   *
   * - `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value.
   * - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.
   * - `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.
   *
   *
   *
   * **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EndDateCondition" })
  endDateCondition?: string;

  /**
   *  Query Filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IncludedUnits" })
  includedUnits?: number;

  /**
   * Indicates if the segment of the rate plan charge is the most recent segment.
   *
   * @remarks
   *
   * **Character limit**: 5
   *
   *
   * **Values**: automatically generated: `true`, `false`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsLastSegment" })
  isLastSegment?: boolean;

  /**
   * The list price base for the product rate plan charge.
   *
   * @remarks
   *
   *
   * **Values**: one of the following:
   *
   * - `Per Month`
   * - `Per Billing Period`
   * - `Per Week`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ListPriceBase" })
  listPriceBase?: string;

  /**
   * Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.
   *
   * @remarks
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MRR" })
  mrr?: number;

  /**
   * The name of the rate plan charge.
   *
   * @remarks
   *
   * **Character limit**: 100
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   * Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
   *
   * @remarks
   *
   * **Character limit**: 5
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfPeriods" })
  numberOfPeriods?: number;

  /**
   * The original ID of the rate plan charge.
   *
   * @remarks
   *
   * **Character limit**: 32
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OriginalId" })
  originalId?: string;

  /**
   * Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored.
   *
   * @remarks
   *
   * **Character limit**: 20
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OverageCalculationOption" })
  overageCalculationOption?: string;

  /**
   *  Query Filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OveragePrice" })
  overagePrice?: number;

  /**
   *  Determines whether to credit the customer with unused units of usage.
   *
   * @remarks
   *
   *
   * **Character limit**: 20
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OverageUnusedUnitsCreditOption" })
  overageUnusedUnitsCreditOption?: string;

  /**
   *  Query Filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Price" })
  price?: number;

  /**
   *  Applies an automatic price change when a termed subscription is renewed.
   *
   * @remarks
   *
   *
   * **Character limit**:
   *
   *
   * **Values**: one of the following:
   *
   * - `NoChange` (default)
   * - `SpecificPercentageValue`
   * - `UseLatestProductCatalogPricing`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PriceChangeOption" })
  priceChangeOption?: string;

  /**
   *  Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: a decimal value between -100 and 100
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PriceIncreasePercentage" })
  priceIncreasePercentage?: number;

  /**
   *  The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProcessedThroughDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  processedThroughDate?: Date;

  /**
   *  The ID of the product rate plan charge associated with the subscription rate plan charge,
   *
   * @remarks
   *
   * **Character limit**: 32
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.Id`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductRatePlanChargeId" })
  productRatePlanChargeId: string;

  /**
   *  The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: a valid quantity value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Quantity" })
  quantity?: number;

  /**
   *  The ID of the rate plan associated with the rate plan charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 32
   *
   *
   * **Values**: inherited from `RatePlan.Id`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RatePlanId" })
  ratePlanId?: string;

  /**
   *  Associates this product rate plan charge with a specific revenue recognition code.
   *
   * @remarks
   *
   *
   * **Character limit**: 70
   *
   *
   * **Values**: a valid revenue recognition code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RevRecCode" })
  revRecCode?: string;

  /**
   *  Specifies when revenue recognition begins.
   *
   * @remarks
   *
   *
   * **Character limit**: 22
   *
   *
   * **Values**: one of the following:
   *
   * -  `ContractEffectiveDate`
   *
   * -  `ServiceActivationDate`
   *
   * -  `CustomerAcceptanceDate`
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RevRecTriggerCondition" })
  revRecTriggerCondition?: string;

  /**
   *  Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend
   *
   * @remarks
   * calls, you can use this field only for NewProduct amendments. For Update
   * calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.
   *
   *
   *
   * **Character limit**: n/a
   *
   *
   * **Values**: name of an active Revenue Recognition Rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RevenueRecognitionRuleName" })
  revenueRecognitionRuleName?: string;

  /**
   *  Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   *
   * **Note**:
   *
   * - You cannot query or filter this field with other fields in a single query.
   * - To query or filter this field, you must specify and only specify the rate plan charge Id in the condition.
   * - You cannot use this field in the query or filter condition.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RolloverBalance" })
  rolloverBalance?: number;

  /**
   *  The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.
   *
   * @remarks
   *
   *
   * **Character limit**: 2
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Segment" })
  segment?: number;

  /**
   *  Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.
   *
   * @remarks
   *
   * **Character limit**: 5
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SpecificBillingPeriod" })
  specificBillingPeriod?: number;

  /**
   *  The specific date on which the charge ends, in `yyyy-mm-dd` format.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   *
   * **Note**:
   *
   * - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.
   * - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SpecificEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  specificEndDate?: Date;

  /**
   *  The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TCV" })
  tcv?: number;

  /**
   *  The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TriggerDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  triggerDate?: Date;

  /**
   *  Specifies when to start billing the customer for the charge.
   *
   * @remarks
   * **Note: **This field can be passed through the subscribe
   * and amend
   * calls and will override the default value set on the Product Rate Plan Charge.
   *
   *
   * **Character limit**: 18
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:
   *
   * - `ContractEffective`is the date when the subscription's contract goes into effect and the charge is ready to be billed. When previewing invoices with the subscribe call, if a charge's trigger event is set to `ContractEffective`, you must also set the `subscribes` > `SubscriptionData` > `Subscription` > `ContractEffectiveDate` field to a specific date to complete your preview. You cannot leave this field as blank.
   * - `ServiceActivation`is when the services or products for a subscription have been activated and the customers have access. When previewing invoices with the subscribe call, if a charge's trigger event is set to `ServiceActivation`, you must also set the `subscribes` > `SubscriptionData` > `Subscription` > `ServiceActivationDate` field to a specific date to complete your preview. You cannot leave this field as blank.
   * - `CustomerAcceptance`is when the customer accepts the services or products for a subscription. When previewing invoices with the subscribe call, if a charge's trigger event is set to `CustomerAcceptance`, you must also set the `subscribes` > `SubscriptionData` > `Subscription` > `CustomerAcceptanceDate` field to a specific date to complete your preview. You cannot leave this field as blank.
   * - `SpecificDate` is valid only on the RatePlanCharge.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TriggerEvent" })
  triggerEvent?: string;

  /**
   *  Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**.
   *
   * @remarks
   *
   *
   * **Character limit**: 25
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.UOM`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UOM" })
  uom?: string;

  /**
   *  Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.
   *
   * @remarks
   *
   *
   * **Character limit**: 16
   *
   *
   * **Values**: a valid decimal value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UnusedUnitsCreditRates" })
  unusedUnitsCreditRates?: number;

  /**
   *  Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
   *
   * @remarks
   *
   *
   * **Character limit**: 5
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`
   *
   * **Note**:
   *
   * - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
   * - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
   * - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.
   * - If you override the value in this field, enter a whole number between 0 and 65535, exclusive.
   * - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpToPeriods" })
  upToPeriods?: number;

  /**
   *  The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.
   *
   * @remarks
   *
   *
   * **Values**: one of the following:
   *
   * - `Billing Periods` (default)
   * - `Days`
   * - `Weeks`
   * - `Months`
   * - `Years`
   *
   *
   * **Note**:
   *
   * - You must use this field together with the `UpToPeriods` field to specify the time period.
   * - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpToPeriodsType" })
  upToPeriodsType?: string;

  /**
   * The ID of the last user to update the object.
   *
   * @remarks
   *
   * **Character limit**: 32
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedById" })
  updatedById?: string;

  /**
   *  The date when the object was last updated.
   *
   * @remarks
   *
   *
   * **Character limit**: 29
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;

  /**
   *  Determines how Zuora processes usage records for per-unit usage charges.
   *
   * @remarks
   *
   * **Character limit**: 18
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UsageRecordRatingOption" })
  usageRecordRatingOption?: string;

  /**
   *  Determines whether to define a new accounting code for the new discount charge.
   *
   * @remarks
   *
   *
   * **Character limit**: 5
   *
   *
   * **Values**: inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UseDiscountSpecificAccountingCode" })
  useDiscountSpecificAccountingCode?: boolean;

  /**
   *  The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.
   *
   * @remarks
   *
   * **Character limit**: 5
   *
   *
   * **Values**: automatically generated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Version" })
  version?: number;

  /**
   *  Specifies which day of the week as the bill cycle day (BCD) for the charge.
   *
   * @remarks
   * This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   *
   *
   *
   * **Values**: one of the following:
   *
   * - `Sunday`
   * - `Monday`
   * - `Tuesday`
   * - `Wednesday`
   * - `Thursday`
   * - `Friday`
   * - `Saturday`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WeeklyBillCycleDay" })
  weeklyBillCycleDay?: string;
}
