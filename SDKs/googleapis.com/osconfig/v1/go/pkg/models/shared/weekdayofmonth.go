// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WeekDayOfMonthDayOfWeekEnum - Required. A day of the week.
type WeekDayOfMonthDayOfWeekEnum string

const (
	WeekDayOfMonthDayOfWeekEnumDayOfWeekUnspecified WeekDayOfMonthDayOfWeekEnum = "DAY_OF_WEEK_UNSPECIFIED"
	WeekDayOfMonthDayOfWeekEnumMonday               WeekDayOfMonthDayOfWeekEnum = "MONDAY"
	WeekDayOfMonthDayOfWeekEnumTuesday              WeekDayOfMonthDayOfWeekEnum = "TUESDAY"
	WeekDayOfMonthDayOfWeekEnumWednesday            WeekDayOfMonthDayOfWeekEnum = "WEDNESDAY"
	WeekDayOfMonthDayOfWeekEnumThursday             WeekDayOfMonthDayOfWeekEnum = "THURSDAY"
	WeekDayOfMonthDayOfWeekEnumFriday               WeekDayOfMonthDayOfWeekEnum = "FRIDAY"
	WeekDayOfMonthDayOfWeekEnumSaturday             WeekDayOfMonthDayOfWeekEnum = "SATURDAY"
	WeekDayOfMonthDayOfWeekEnumSunday               WeekDayOfMonthDayOfWeekEnum = "SUNDAY"
)

func (e *WeekDayOfMonthDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DAY_OF_WEEK_UNSPECIFIED":
		fallthrough
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = WeekDayOfMonthDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WeekDayOfMonthDayOfWeekEnum: %s", s)
	}
}

// WeekDayOfMonth - Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonth struct {
	// Required. A day of the week.
	DayOfWeek *WeekDayOfMonthDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
	DayOffset *int `json:"dayOffset,omitempty"`
	// Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal *int `json:"weekOrdinal,omitempty"`
}
