/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * This folder contains the requests around API versions.
 */
export class APIVersion {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create API Version
   *
   * @remarks
   * This call creates a new API version in the specified API.
   *
   * Request body should contain a `version` object which should have fields:
   *
   * <table>
   * <tr>
   * 	<td>name</td>
   * 	<td>Required. Name of the API Version</td>
   * </tr>
   * <tr>
   * 	<td>source</td>
   * 	<td>
   * 		If specified, it will copy the contents of the specified api version to create a new api verison.
   * 		<table>
   * 			<tr>
   * 				<td>id</td>
   * 				<td>Required. Id of the apiversion from where the details are to be copied</td>
   * 			</tr>
   * 			<tr>
   * 				<td>schema</td>
   * 				<td>Boolean. If true then copies the schema from the specified api version</td>
   * 			</tr>
   * 			<tr>
   * 				<td>relations</td>
   * 				<td>Object. {"&lt;relationType&gt;": true/false}.
   * 					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`
   * 				Relation types which should be copied over to the new api verison</td>
   * 			</tr>
   * 		</table>
   * 	</td>
   * </tr>
   * </table>
   *
   * Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  createApiVersion(
    req: operations.CreateApiVersionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateApiVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateApiVersionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/{apiId}/versions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateApiVersionResponse =
        new operations.CreateApiVersionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApiVersion200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApiVersion200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an API Version
   *
   * @remarks
   * This call deletes an existing API Version having the specified id.
   *
   * Response contains an `version` object with `id` of the API Version which was deleted.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  deleteAnApiVersion(
    req: operations.DeleteAnApiVersionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAnApiVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAnApiVersionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/{apiId}/versions/{apiVersionId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAnApiVersionResponse =
        new operations.DeleteAnApiVersionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAnApiVersion200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteAnApiVersion200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get All API Versions
   *
   * @remarks
   * This call fetches details about the all the API Versions in the specified API.
   *
   * The response will contain an array `versions` object which would be a list of all the API Version along with their details.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  getAllApiVersions(
    req: operations.GetAllApiVersionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllApiVersionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllApiVersionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/{apiId}/versions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllApiVersionsResponse =
        new operations.GetAllApiVersionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllApiVersions200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllApiVersions200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an API Version
   *
   * @remarks
   * This call fetches details about the specified API Version.
   *
   * The response will contain a `version` object which would contain all the details of the API Version.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  getAnApiVersion(
    req: operations.GetAnApiVersionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAnApiVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAnApiVersionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/{apiId}/versions/{apiVersionId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAnApiVersionResponse =
        new operations.GetAnApiVersionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAnApiVersion200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAnApiVersion200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an API Version
   *
   * @remarks
   * This call updates an existing API Version.
   *
   * Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.
   *
   * Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  updateAnApiVersion(
    req: operations.UpdateAnApiVersionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAnApiVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateAnApiVersionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/apis/{apiId}/versions/{apiVersionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAnApiVersionResponse =
        new operations.UpdateAnApiVersionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateAnApiVersion200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateAnApiVersion200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
