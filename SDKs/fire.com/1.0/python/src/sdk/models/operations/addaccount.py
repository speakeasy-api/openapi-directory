"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AddAccountNewAccountCurrencyEnum(str, Enum):
    r"""The currency of the new account"""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddAccountNewAccount:
    r"""Details of the new account"""
    
    accept_fees_and_charges: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acceptFeesAndCharges'), 'exclude': lambda f: f is None }})
    r"""a field to indicate you accept the fee for a new account"""  
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountName'), 'exclude': lambda f: f is None }})
    r"""Name to give the new account"""  
    currency: Optional[AddAccountNewAccountCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency of the new account"""  
    
class AddAccountAccountCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddAccountAccountCurrency:
    r"""The currency."""
    
    code: Optional[AddAccountAccountCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    
class AddAccountAccountStatusEnum(str, Enum):
    r"""Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only."""
    LIVE = 'LIVE'
    BREXIT_MIGRATED = 'BREXIT_MIGRATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddAccountAccount:
    r"""The details of the new account"""
    
    balance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account)."""  
    cbic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cbic'), 'exclude': lambda f: f is None }})
    r"""the BIC of the account (provided if currency is EUR)."""  
    ccan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccan'), 'exclude': lambda f: f is None }})
    r"""the Account Number of the account."""  
    ciban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ciban'), 'exclude': lambda f: f is None }})
    r"""the IBAN of the account (provided if currency is EUR)."""  
    cnsc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cnsc'), 'exclude': lambda f: f is None }})
    r"""the Sort Code of the account."""  
    colour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colour'), 'exclude': lambda f: f is None }})
    r"""Internal Use"""  
    currency: Optional[AddAccountAccountCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    default_account: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultAccount'), 'exclude': lambda f: f is None }})
    r"""true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees)."""  
    direct_debits_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDebitsAllowed'), 'exclude': lambda f: f is None }})
    r"""Whether or not direct debits can be set up on this account."""  
    fop_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fopOnly'), 'exclude': lambda f: f is None }})
    r"""Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned."""  
    ican: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ican'), 'exclude': lambda f: f is None }})
    r"""identifier for the fire.com account (assigned by fire.com)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""the name the user gives to the account to help them identify it."""  
    status: Optional[AddAccountAccountStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only."""  
    

@dataclasses.dataclass
class AddAccountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account: Optional[AddAccountAccount] = dataclasses.field(default=None)
    r"""The details of the new account"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    