"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GeoRegionAssignedTargetingOptionDetailsGeoRegionTypeEnum(str, Enum):
    r"""Output only. The type of geographic region targeting."""
    GEO_REGION_TYPE_UNKNOWN = 'GEO_REGION_TYPE_UNKNOWN'
    GEO_REGION_TYPE_OTHER = 'GEO_REGION_TYPE_OTHER'
    GEO_REGION_TYPE_COUNTRY = 'GEO_REGION_TYPE_COUNTRY'
    GEO_REGION_TYPE_REGION = 'GEO_REGION_TYPE_REGION'
    GEO_REGION_TYPE_TERRITORY = 'GEO_REGION_TYPE_TERRITORY'
    GEO_REGION_TYPE_PROVINCE = 'GEO_REGION_TYPE_PROVINCE'
    GEO_REGION_TYPE_STATE = 'GEO_REGION_TYPE_STATE'
    GEO_REGION_TYPE_PREFECTURE = 'GEO_REGION_TYPE_PREFECTURE'
    GEO_REGION_TYPE_GOVERNORATE = 'GEO_REGION_TYPE_GOVERNORATE'
    GEO_REGION_TYPE_CANTON = 'GEO_REGION_TYPE_CANTON'
    GEO_REGION_TYPE_UNION_TERRITORY = 'GEO_REGION_TYPE_UNION_TERRITORY'
    GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY = 'GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY'
    GEO_REGION_TYPE_DMA_REGION = 'GEO_REGION_TYPE_DMA_REGION'
    GEO_REGION_TYPE_METRO = 'GEO_REGION_TYPE_METRO'
    GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT = 'GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT'
    GEO_REGION_TYPE_COUNTY = 'GEO_REGION_TYPE_COUNTY'
    GEO_REGION_TYPE_MUNICIPALITY = 'GEO_REGION_TYPE_MUNICIPALITY'
    GEO_REGION_TYPE_CITY = 'GEO_REGION_TYPE_CITY'
    GEO_REGION_TYPE_POSTAL_CODE = 'GEO_REGION_TYPE_POSTAL_CODE'
    GEO_REGION_TYPE_DEPARTMENT = 'GEO_REGION_TYPE_DEPARTMENT'
    GEO_REGION_TYPE_AIRPORT = 'GEO_REGION_TYPE_AIRPORT'
    GEO_REGION_TYPE_TV_REGION = 'GEO_REGION_TYPE_TV_REGION'
    GEO_REGION_TYPE_OKRUG = 'GEO_REGION_TYPE_OKRUG'
    GEO_REGION_TYPE_BOROUGH = 'GEO_REGION_TYPE_BOROUGH'
    GEO_REGION_TYPE_CITY_REGION = 'GEO_REGION_TYPE_CITY_REGION'
    GEO_REGION_TYPE_ARRONDISSEMENT = 'GEO_REGION_TYPE_ARRONDISSEMENT'
    GEO_REGION_TYPE_NEIGHBORHOOD = 'GEO_REGION_TYPE_NEIGHBORHOOD'
    GEO_REGION_TYPE_UNIVERSITY = 'GEO_REGION_TYPE_UNIVERSITY'
    GEO_REGION_TYPE_DISTRICT = 'GEO_REGION_TYPE_DISTRICT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeoRegionAssignedTargetingOptionDetails:
    r"""Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GEO_REGION`."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. The display name of the geographic region (e.g., \\"Ontario, Canada\\")."""  
    geo_region_type: Optional[GeoRegionAssignedTargetingOptionDetailsGeoRegionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoRegionType'), 'exclude': lambda f: f is None }})
    r"""Output only. The type of geographic region targeting."""  
    negative: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negative'), 'exclude': lambda f: f is None }})
    r"""Indicates if this option is being negatively targeted."""  
    targeting_option_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingOptionId'), 'exclude': lambda f: f is None }})
    r"""Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GEO_REGION`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeoRegionAssignedTargetingOptionDetailsInput:
    r"""Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GEO_REGION`."""
    
    negative: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negative'), 'exclude': lambda f: f is None }})
    r"""Indicates if this option is being negatively targeted."""  
    targeting_option_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingOptionId'), 'exclude': lambda f: f is None }})
    r"""Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GEO_REGION`."""  
    