<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - 
 * 
 * The largest open video games database.
 * 
 * ### Why build on RAWG
 * - More than 350,000 games for 50 platforms including mobiles.
 * - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates,
 * Metacritic ratings.
 * - Where to buy: links to digital distribution services
 * - Similar games based on visual similarity.
 * - Player activity data: Steam average playtime and RAWG player counts and ratings.
 * - Actively developing and constantly getting better by user contribution and our algorithms.
 * 
 * ### Terms of Use
 * - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active
 * hyperlink from every page where the data of RAWG is used.
 * - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000
 * page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for
 * commercial terms.
 * - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy
 * to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt,
 * and we will talk it through.
 * - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs.
 * If you donâ€™t provide it, we may ban your requests.
 * 
 * __[Read more](https://rawg.io/apidocs)__.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.rawg.io/api',
	];
  	
	public CreatorRoles $creatorRoles;
	
	public Creators $creators;
	
	public Developers $developers;
	
	public Games $games;
	
	public Genres $genres;
	
	public Platforms $platforms;
	
	public Publishers $publishers;
	
	public Stores $stores;
	
	public Tags $tags;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->creatorRoles = new CreatorRoles(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->creators = new Creators(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->developers = new Developers(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->games = new Games(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->genres = new Genres(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->platforms = new Platforms(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->publishers = new Publishers(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->stores = new Stores(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->tags = new Tags(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}