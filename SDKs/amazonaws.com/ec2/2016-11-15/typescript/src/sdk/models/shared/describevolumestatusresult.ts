/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes a volume status operation code.
 */
export class DescribeVolumeStatusResultVolumeStatusesActions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: string;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  eventId?: string;

  @SpeakeasyMetadata()
  eventType?: string;
}

/**
 * Information about the instances to which the volume is attached.
 */
export class DescribeVolumeStatusResultVolumeStatusesAttachmentStatuses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  instanceId?: string;

  @SpeakeasyMetadata()
  ioPerformance?: string;
}

/**
 * Describes a volume status event.
 */
export class DescribeVolumeStatusResultVolumeStatusesEvents extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  eventId?: string;

  @SpeakeasyMetadata()
  eventType?: string;

  @SpeakeasyMetadata()
  instanceId?: string;

  @SpeakeasyMetadata()
  notAfter?: Date;

  @SpeakeasyMetadata()
  notBefore?: Date;
}

/**
 * The name of the volume status.
 */
export enum DescribeVolumeStatusResultVolumeStatusesVolumeStatusDetailsNameEnum {
  IoEnabled = "io-enabled",
  IoPerformance = "io-performance",
}

/**
 * Describes a volume status.
 */
export class DescribeVolumeStatusResultVolumeStatusesVolumeStatusDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  name?: DescribeVolumeStatusResultVolumeStatusesVolumeStatusDetailsNameEnum;

  @SpeakeasyMetadata()
  status?: string;
}

/**
 * The status of the volume.
 */
export enum DescribeVolumeStatusResultVolumeStatusesVolumeStatusStatusEnum {
  Ok = "ok",
  Impaired = "impaired",
  InsufficientData = "insufficient-data",
}

/**
 * The volume status.
 */
export class DescribeVolumeStatusResultVolumeStatusesVolumeStatus extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: DescribeVolumeStatusResultVolumeStatusesVolumeStatusDetails,
  })
  details?: DescribeVolumeStatusResultVolumeStatusesVolumeStatusDetails[];

  @SpeakeasyMetadata()
  status?: DescribeVolumeStatusResultVolumeStatusesVolumeStatusStatusEnum;
}

/**
 * Describes the volume status.
 */
export class DescribeVolumeStatusResultVolumeStatuses extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: DescribeVolumeStatusResultVolumeStatusesActions,
  })
  actions?: DescribeVolumeStatusResultVolumeStatusesActions[];

  @SpeakeasyMetadata({
    elemType: DescribeVolumeStatusResultVolumeStatusesAttachmentStatuses,
  })
  attachmentStatuses?: DescribeVolumeStatusResultVolumeStatusesAttachmentStatuses[];

  @SpeakeasyMetadata()
  availabilityZone?: string;

  @SpeakeasyMetadata({
    elemType: DescribeVolumeStatusResultVolumeStatusesEvents,
  })
  events?: DescribeVolumeStatusResultVolumeStatusesEvents[];

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  volumeId?: string;

  @SpeakeasyMetadata()
  volumeStatus?: DescribeVolumeStatusResultVolumeStatusesVolumeStatus;
}

/**
 * Success
 */
export class DescribeVolumeStatusResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: DescribeVolumeStatusResultVolumeStatuses })
  volumeStatuses?: DescribeVolumeStatusResultVolumeStatuses[];
}
