// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteVocabularyXAmzTargetEnum
type DeleteVocabularyXAmzTargetEnum string

const (
	DeleteVocabularyXAmzTargetEnumTranscribeDeleteVocabulary DeleteVocabularyXAmzTargetEnum = "Transcribe.DeleteVocabulary"
)

func (e *DeleteVocabularyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Transcribe.DeleteVocabulary":
		*e = DeleteVocabularyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteVocabularyXAmzTargetEnum: %s", s)
	}
}

type DeleteVocabularyHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteVocabularyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteVocabularyRequest struct {
	Headers DeleteVocabularyHeaders
	Request shared.DeleteVocabularyRequest `request:"mediaType=application/json"`
}

type DeleteVocabularyResponse struct {
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// InternalFailureException
	InternalFailureException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
}
