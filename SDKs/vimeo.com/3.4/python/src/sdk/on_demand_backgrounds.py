"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OnDemandBackgrounds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_vod_background(self, request: operations.CreateVodBackgroundRequest, security: operations.CreateVodBackgroundSecurity) -> operations.CreateVodBackgroundResponse:
        r"""Add a background to an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateVodBackgroundRequest, base_url, '/ondemand/pages/{ondemand_id}/backgrounds', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVodBackgroundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_vod_background(self, request: operations.DeleteVodBackgroundRequest, security: operations.DeleteVodBackgroundSecurity) -> operations.DeleteVodBackgroundResponse:
        r"""Remove a background from an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVodBackgroundRequest, base_url, '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVodBackgroundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_vod_background(self, request: operations.EditVodBackgroundRequest, security: operations.EditVodBackgroundSecurity) -> operations.EditVodBackgroundResponse:
        r"""Edit a background of an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditVodBackgroundRequest, base_url, '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditVodBackgroundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod_background(self, request: operations.GetVodBackgroundRequest) -> operations.GetVodBackgroundResponse:
        r"""Get a specific background of an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodBackgroundRequest, base_url, '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodBackgroundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod_backgrounds(self, request: operations.GetVodBackgroundsRequest) -> operations.GetVodBackgroundsResponse:
        r"""Get all the backgrounds of an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodBackgroundsRequest, base_url, '/ondemand/pages/{ondemand_id}/backgrounds', request)
        
        query_params = utils.get_query_params(operations.GetVodBackgroundsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodBackgroundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    