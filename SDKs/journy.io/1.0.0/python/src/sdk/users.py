"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Users:
    r"""Endpoints for creating, deleting or updating users."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_user(self, request: operations.DeleteUserRequestBody) -> operations.DeleteUserResponse:
        r"""Delete user
        Endpoint to delete a user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser202ApplicationJSON])
                res.delete_user_202_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser400ApplicationJSON])
                res.delete_user_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser401ApplicationJSON])
                res.delete_user_401_application_json_object = out
        elif http_res.status_code == 403:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser403ApplicationJSON])
                res.delete_user_403_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser429ApplicationJSON])
                res.delete_user_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser500ApplicationJSON])
                res.delete_user_500_application_json_object = out

        return res

    def link(self, request: operations.LinkRequestBody) -> operations.LinkResponse:
        r"""Link web activity to user
        ðŸ’¡ You don't need to use this endpoint if you use our JavaScript snippet in your application.
        
        This endpoint is used to link web activity to a user in your application. This will help you discover which channels and campaigns work best.
        
        When our JavaScript snippet is embedded on your website, blog or landing pages, a cookie named \"__journey\" will be set.
        
        This will only work if your website and application are under the same top level domain.
        
        Website, blog or landing pages
        * www.my-domain.tld
        * blog.my-domain.tld
        * landing-page.my-domain.tld
        
        Application
        * app.my-domain.tld
        
        The cookie on my-domain.tld will also be send to your app domain.
        
        You should call this endpoint after the user succesfully logged in (so that you know the user's ID). Use the value of the cookie as device ID.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/link'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Link201ApplicationJSON])
                res.link_201_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Link400ApplicationJSON])
                res.link_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Link401ApplicationJSON])
                res.link_401_application_json_object = out
        elif http_res.status_code == 403:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Link403ApplicationJSON])
                res.link_403_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Link429ApplicationJSON])
                res.link_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Link500ApplicationJSON])
                res.link_500_application_json_object = out

        return res

    def upsert_user(self, request: operations.UpsertUserRequestBody) -> operations.UpsertUserResponse:
        r"""Create or update user
        Endpoint to create or update a user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/upsert'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpsertUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertUser201ApplicationJSON])
                res.upsert_user_201_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertUser400ApplicationJSON])
                res.upsert_user_400_application_json_object = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertUser401ApplicationJSON])
                res.upsert_user_401_application_json_object = out
        elif http_res.status_code == 403:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertUser403ApplicationJSON])
                res.upsert_user_403_application_json_object = out
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertUser429ApplicationJSON])
                res.upsert_user_429_application_json_object = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpsertUser500ApplicationJSON])
                res.upsert_user_500_application_json_object = out

        return res

    