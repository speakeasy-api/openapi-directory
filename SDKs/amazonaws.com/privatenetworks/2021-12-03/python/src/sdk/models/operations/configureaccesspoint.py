"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import configureaccesspointresponse as shared_configureaccesspointresponse
from ..shared import elevationreference_enum as shared_elevationreference_enum
from ..shared import elevationunit_enum as shared_elevationunit_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigureAccessPointRequestBodyPosition:
    r"""Information about a position."""
    
    elevation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation'), 'exclude': lambda f: f is None }})  
    elevation_reference: Optional[shared_elevationreference_enum.ElevationReferenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevationReference'), 'exclude': lambda f: f is None }})  
    elevation_unit: Optional[shared_elevationunit_enum.ElevationUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevationUnit'), 'exclude': lambda f: f is None }})  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigureAccessPointRequestBody:
    
    access_point_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPointArn') }})
    r"""The Amazon Resource Name (ARN) of the network resource."""  
    cpi_secret_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpiSecretKey'), 'exclude': lambda f: f is None }})
    r"""A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource."""  
    cpi_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpiUserId'), 'exclude': lambda f: f is None }})
    r"""The CPI user ID of the CPI user who is certifying the coordinates of the network resource."""  
    cpi_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpiUsername'), 'exclude': lambda f: f is None }})
    r"""The CPI user name of the CPI user who is certifying the coordinates of the radio unit."""  
    cpi_user_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpiUserPassword'), 'exclude': lambda f: f is None }})
    r"""The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>."""  
    position: Optional[ConfigureAccessPointRequestBodyPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Information about a position."""  
    

@dataclasses.dataclass
class ConfigureAccessPointRequest:
    
    request_body: ConfigureAccessPointRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ConfigureAccessPointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    configure_access_point_response: Optional[shared_configureaccesspointresponse.ConfigureAccessPointResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    