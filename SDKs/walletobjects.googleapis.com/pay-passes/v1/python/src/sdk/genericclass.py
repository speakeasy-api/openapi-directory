"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Genericclass:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_genericclass_get(self, request: operations.WalletobjectsGenericclassGetRequest, security: operations.WalletobjectsGenericclassGetSecurity) -> operations.WalletobjectsGenericclassGetResponse:
        r"""Returns the generic class with the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsGenericclassGetRequest, base_url, '/walletobjects/v1/genericClass/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsGenericclassGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsGenericclassGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericClass])
                res.generic_class = out

        return res

    def walletobjects_genericclass_insert(self, request: operations.WalletobjectsGenericclassInsertRequest, security: operations.WalletobjectsGenericclassInsertSecurity) -> operations.WalletobjectsGenericclassInsertResponse:
        r"""Inserts a generic class with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/genericClass'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generic_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsGenericclassInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsGenericclassInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericClass])
                res.generic_class = out

        return res

    def walletobjects_genericclass_list(self, request: operations.WalletobjectsGenericclassListRequest, security: operations.WalletobjectsGenericclassListSecurity) -> operations.WalletobjectsGenericclassListResponse:
        r"""Returns a list of all generic classes for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/genericClass'
        
        query_params = utils.get_query_params(operations.WalletobjectsGenericclassListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsGenericclassListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericClassListResponse])
                res.generic_class_list_response = out

        return res

    def walletobjects_genericclass_patch(self, request: operations.WalletobjectsGenericclassPatchRequest, security: operations.WalletobjectsGenericclassPatchSecurity) -> operations.WalletobjectsGenericclassPatchResponse:
        r"""Updates the generic class referenced by the given class ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsGenericclassPatchRequest, base_url, '/walletobjects/v1/genericClass/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generic_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsGenericclassPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsGenericclassPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericClass])
                res.generic_class = out

        return res

    def walletobjects_genericclass_update(self, request: operations.WalletobjectsGenericclassUpdateRequest, security: operations.WalletobjectsGenericclassUpdateSecurity) -> operations.WalletobjectsGenericclassUpdateResponse:
        r"""Updates the Generic class referenced by the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsGenericclassUpdateRequest, base_url, '/walletobjects/v1/genericClass/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generic_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsGenericclassUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsGenericclassUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenericClass])
                res.generic_class = out

        return res

    