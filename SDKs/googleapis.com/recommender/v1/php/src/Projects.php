<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListResponse
     */
	public function recommenderProjectsLocationsInsightTypesInsightsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/insights', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1ListInsightsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1ListInsightsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedResponse
     */
	public function recommenderProjectsLocationsInsightTypesInsightsMarkAccepted(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:markAccepted', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommenderV1MarkInsightAcceptedRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsInsightTypesInsightsMarkAcceptedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1Insight = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1Insight', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetResponse
     */
	public function recommenderProjectsLocationsRecommendersRecommendationsGet(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1Recommendation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1Recommendation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListResponse
     */
	public function recommenderProjectsLocationsRecommendersRecommendationsList(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/recommendations', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1ListRecommendationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1ListRecommendationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedResponse
     */
	public function recommenderProjectsLocationsRecommendersRecommendationsMarkClaimed(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:markClaimed', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommenderV1MarkRecommendationClaimedRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkClaimedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1Recommendation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1Recommendation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedResponse
     */
	public function recommenderProjectsLocationsRecommendersRecommendationsMarkDismissed(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:markDismissed', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommenderV1MarkRecommendationDismissedRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkDismissedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1Recommendation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1Recommendation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedResponse
     */
	public function recommenderProjectsLocationsRecommendersRecommendationsMarkFailed(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:markFailed', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommenderV1MarkRecommendationFailedRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkFailedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1Recommendation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1Recommendation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededResponse
     */
	public function recommenderProjectsLocationsRecommendersRecommendationsMarkSucceeded(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:markSucceeded', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommenderV1MarkRecommendationSucceededRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersRecommendationsMarkSucceededResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1Recommendation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1Recommendation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Recommender Config. This will create a new revision of the config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigResponse
     */
	public function recommenderProjectsLocationsRecommendersUpdateConfig(
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecommenderV1RecommenderConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecommenderProjectsLocationsRecommendersUpdateConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecommenderV1RecommenderConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecommenderV1RecommenderConfig', 'json');
            }
        }

        return $response;
    }
}