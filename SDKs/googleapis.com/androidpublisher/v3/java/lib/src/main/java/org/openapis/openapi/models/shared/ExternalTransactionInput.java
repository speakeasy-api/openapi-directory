/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ExternalTransactionInput - The details of an external transaction.
 */
public class ExternalTransactionInput {
    /**
     * Definition of a price, i.e. currency and units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentPreTaxAmount")
    public Price currentPreTaxAmount;

    public ExternalTransactionInput withCurrentPreTaxAmount(Price currentPreTaxAmount) {
        this.currentPreTaxAmount = currentPreTaxAmount;
        return this;
    }
    
    /**
     * Definition of a price, i.e. currency and units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentTaxAmount")
    public Price currentTaxAmount;

    public ExternalTransactionInput withCurrentTaxAmount(Price currentTaxAmount) {
        this.currentTaxAmount = currentTaxAmount;
        return this;
    }
    
    /**
     * Represents a one-time transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneTimeTransaction")
    public OneTimeExternalTransaction oneTimeTransaction;

    public ExternalTransactionInput withOneTimeTransaction(OneTimeExternalTransaction oneTimeTransaction) {
        this.oneTimeTransaction = oneTimeTransaction;
        return this;
    }
    
    /**
     * Definition of a price, i.e. currency and units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalPreTaxAmount")
    public Price originalPreTaxAmount;

    public ExternalTransactionInput withOriginalPreTaxAmount(Price originalPreTaxAmount) {
        this.originalPreTaxAmount = originalPreTaxAmount;
        return this;
    }
    
    /**
     * Definition of a price, i.e. currency and units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalTaxAmount")
    public Price originalTaxAmount;

    public ExternalTransactionInput withOriginalTaxAmount(Price originalTaxAmount) {
        this.originalTaxAmount = originalTaxAmount;
        return this;
    }
    
    /**
     * Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringTransaction")
    public RecurringExternalTransaction recurringTransaction;

    public ExternalTransactionInput withRecurringTransaction(RecurringExternalTransaction recurringTransaction) {
        this.recurringTransaction = recurringTransaction;
        return this;
    }
    
    /**
     * Represents a transaction performed using a test account. These transactions will not be charged by Google.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testPurchase")
    public java.util.Map<String, Object> testPurchase;

    public ExternalTransactionInput withTestPurchase(java.util.Map<String, Object> testPurchase) {
        this.testPurchase = testPurchase;
        return this;
    }
    
    /**
     * Required. The time when the transaction was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionTime")
    public String transactionTime;

    public ExternalTransactionInput withTransactionTime(String transactionTime) {
        this.transactionTime = transactionTime;
        return this;
    }
    
    /**
     * User's address for the external transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userTaxAddress")
    public ExternalTransactionAddress userTaxAddress;

    public ExternalTransactionInput withUserTaxAddress(ExternalTransactionAddress userTaxAddress) {
        this.userTaxAddress = userTaxAddress;
        return this;
    }
    
    public ExternalTransactionInput(){}
}
