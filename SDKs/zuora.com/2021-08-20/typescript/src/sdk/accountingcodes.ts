/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AccountingCodes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete an accounting code
   *
   * @remarks
   * This reference describes how to delete an accounting code through the REST API.
   * ## Prerequisites
   * If you have Zuora Finance enabled on your tenant, then you must have the Delete Unused Accounting Code permission.
   * ## Limitations
   * You can only delete accounting codes that have never been associated with any transactions. An accounting code must be deactivated before you can delete it.
   *
   */
  deleteAccountingCode(
    req: operations.DELETEAccountingCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEAccountingCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEAccountingCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounting-codes/{ac-id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEAccountingCodeResponse =
        new operations.DELETEAccountingCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an accounting code
   *
   * @remarks
   * This reference describes how to query an accounting code through the REST API.
   */
  getAccountingCode(
    req: operations.GETAccountingCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAccountingCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAccountingCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounting-codes/{ac-id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAccountingCodeResponse =
        new operations.GETAccountingCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getAccountingCodeItemType = utils.objectToClass(
              httpRes?.data,
              shared.GETAccountingCodeItemType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all accounting codes
   *
   * @remarks
   * This reference describes how to query all accounting codes in your chart of accounts through the REST API.
   */
  getAllAccountingCodes(
    req: operations.GETAllAccountingCodesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAllAccountingCodesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAllAccountingCodesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/accounting-codes";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAllAccountingCodesResponse =
        new operations.GETAllAccountingCodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getAccountingCodesType = utils.objectToClass(
              httpRes?.data,
              shared.GETAccountingCodesType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an accounting code
   *
   * @remarks
   * This reference describes how to create a new accounting code through the REST API.
   * The accounting code will be active as soon as it has been created.
   *
   * ## Prerequisites
   *   If you have Zuora Finance enabled on your tenant, you must have the  Configure Accounting Codes permission.
   *
   */
  postAccountingCode(
    req: operations.POSTAccountingCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTAccountingCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTAccountingCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/accounting-codes";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postAccountingCodeType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTAccountingCodeResponse =
        new operations.POSTAccountingCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.postAccountingCodeResponseType = utils.objectToClass(
              httpRes?.data,
              shared.POSTAccountingCodeResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an accounting code
   *
   * @remarks
   * This reference describes how to update an existing accounting code through the REST API.
   * ## Prerequisites
   *   If you have Zuora Finance enabled on your tenant, you must have the  Manage Accounting Code permission.
   * ## Limitations
   * You can only update accounting codes that are not already associated with any transactions.
   *
   */
  putAccountingCode(
    req: operations.PUTAccountingCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTAccountingCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTAccountingCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounting-codes/{ac-id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putAccountingCodeType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTAccountingCodeResponse =
        new operations.PUTAccountingCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Activate an accounting code
   *
   * @remarks
   * This reference describes how to activate an accounting code through the REST API.
   *
   * Prerequisites
   * -------------
   * If you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission.
   *
   */
  putActivateAccountingCode(
    req: operations.PUTActivateAccountingCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTActivateAccountingCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTActivateAccountingCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounting-codes/{ac-id}/activate",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTActivateAccountingCodeResponse =
        new operations.PUTActivateAccountingCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactivate an accounting code
   *
   * @remarks
   * This reference describes how to deactivate an accounting code through the REST API.
   *
   * ## Prerequisites
   * If you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission.
   * ## Limitations
   * You can only deactivate accounting codes that are not associated with any transactions.
   * You cannot disable accounting codes of type AccountsReceivable.
   *
   */
  putDeactivateAccountingCode(
    req: operations.PUTDeactivateAccountingCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTDeactivateAccountingCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTDeactivateAccountingCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounting-codes/{ac-id}/deactivate",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTDeactivateAccountingCodeResponse =
        new operations.PUTDeactivateAccountingCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }
}
