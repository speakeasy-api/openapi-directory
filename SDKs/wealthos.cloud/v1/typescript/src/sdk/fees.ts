/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * <!-- <div class="warning" style='padding:0.1em; background-color:#FEEFB3; color:#9F6000;'>
 *
 * @remarks
 *     <span>
 *         <p style='margin-top:0.9em;margin-bottom:0.9em;margin-left:1em; text-align:left'>
 *             <b>â“˜</b> This feature is currently in BETA mode
 *         </p>
 *     </span>
 * </div>
 *
 * The Fees endpoints allow a wealth manager to manage fees in terms of creating and charging an external fee or retrieving information on fee configurations setup in the system for recurring fee computations. -->
 *
 * The Fees endpoint allows a wealth manager to charge an externally calculated or derived fee from an investor's pot.
 */
export class Fees {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Fee
   *
   * @remarks
   * This endpoint supports the creation of a single fee deduction from an investor's pot. A sucessful fee creation will result in the creation of a fee transaction and updates to holdings. The system will return the `transaction_id` of the fee transaction.
   */
  createFee(
    req: operations.CreateFeeRequest,
    security: operations.CreateFeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFeeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/transactions/v1/create/Fees";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateFeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFeeResponse =
        new operations.CreateFeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rootTypeForFeeCreationResponse = utils.objectToClass(
              httpRes?.data,
              operations.CreateFeeRootTypeForFeeCreationResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFee500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateFee500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
