<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const CREATE_ACCOUNT_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const CREATE_ACCOUNT_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const CREATE_DEVICE_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const CREATE_DEVICE_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const DELETE_ACCOUNT_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const DELETE_ACCOUNT_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const DELETE_APP_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const DELETE_DEVICE_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const DELETE_DEVICE_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_ACCOUNT_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_ACCOUNT_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_APP_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_APP_MANIFEST_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_DEVICE_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_DEVICE_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const FETCH_DEVICE_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const LIST_ACCOUNT_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const LIST_ACCOUNT_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const LIST_APP_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const LIST_DEVICE_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const LIST_DEVICE_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const LIST_DEVICE_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const UPDATE_ACCOUNT_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const UPDATE_ACCOUNT_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const UPDATE_DEVICE_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const UPDATE_DEVICE_CONFIG_SERVERS = [
		'https://microvisor.twilio.com',
	];
	
	public const UPDATE_DEVICE_SECRET_SERVERS = [
		'https://microvisor.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a config for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigCreateAccountConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigResponse
     */
	public function createAccountConfig(
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigCreateAccountConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigResponse
    {
        $baseUrl = SDK::CREATE_ACCOUNT_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AccountConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AccountConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a secret for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretCreateAccountSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretResponse
     */
	public function createAccountSecret(
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretCreateAccountSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretResponse
    {
        $baseUrl = SDK::CREATE_ACCOUNT_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Secrets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AccountSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AccountSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a config for a Microvisor Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigResponse
     */
	public function createDeviceConfig(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigResponse
    {
        $baseUrl = SDK::CREATE_DEVICE_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Configs', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1DeviceDeviceConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1DeviceDeviceConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a secret for a Microvisor Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretResponse
     */
	public function createDeviceSecret(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretResponse
    {
        $baseUrl = SDK::CREATE_DEVICE_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Secrets', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1DeviceDeviceSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1DeviceDeviceSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a config for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigResponse
     */
	public function deleteAccountConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigResponse
    {
        $baseUrl = SDK::DELETE_ACCOUNT_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configs/{Key}', \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a secret for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretResponse
     */
	public function deleteAccountSecret(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretResponse
    {
        $baseUrl = SDK::DELETE_ACCOUNT_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Secrets/{Key}', \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific App.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAppResponse
     */
	public function deleteApp(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAppResponse
    {
        $baseUrl = SDK::DELETE_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Apps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a config for a Microvisor Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigResponse
     */
	public function deleteDeviceConfig(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigResponse
    {
        $baseUrl = SDK::DELETE_DEVICE_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Configs/{Key}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a secret for a Microvisor Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretResponse
     */
	public function deleteDeviceSecret(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretResponse
    {
        $baseUrl = SDK::DELETE_DEVICE_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Secrets/{Key}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve a Config for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigResponse
     */
	public function fetchAccountConfig(
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigResponse
    {
        $baseUrl = SDK::FETCH_ACCOUNT_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configs/{Key}', \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAccountConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AccountConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AccountConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Secret for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretResponse
     */
	public function fetchAccountSecret(
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretResponse
    {
        $baseUrl = SDK::FETCH_ACCOUNT_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Secrets/{Key}', \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AccountSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AccountSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific App.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAppResponse
     */
	public function fetchApp(
        \OpenAPI\OpenAPI\Models\Operations\FetchAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAppSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAppResponse
    {
        $baseUrl = SDK::FETCH_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Apps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1App = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1App', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the Manifest for an App.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestResponse
     */
	public function fetchAppManifest(
        \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestResponse
    {
        $baseUrl = SDK::FETCH_APP_MANIFEST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Apps/{AppSid}/Manifest', \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAppManifestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AppAppManifest = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AppAppManifest', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeviceResponse
     */
	public function fetchDevice(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeviceResponse
    {
        $baseUrl = SDK::FETCH_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1Device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Config for a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigResponse
     */
	public function fetchDeviceConfig(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigResponse
    {
        $baseUrl = SDK::FETCH_DEVICE_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Configs/{Key}', \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeviceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1DeviceDeviceConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1DeviceDeviceConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Secret for a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretResponse
     */
	public function fetchDeviceSecret(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretResponse
    {
        $baseUrl = SDK::FETCH_DEVICE_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Secrets/{Key}', \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeviceSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1DeviceDeviceSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1DeviceDeviceSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Configs for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigResponse
     */
	public function listAccountConfig(
        \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigResponse
    {
        $baseUrl = SDK::LIST_ACCOUNT_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAccountConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAccountConfigListAccountConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Secrets for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretResponse
     */
	public function listAccountSecret(
        \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretResponse
    {
        $baseUrl = SDK::LIST_ACCOUNT_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Secrets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAccountSecretRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountSecretResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAccountSecretListAccountSecretResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Apps for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAppResponse
     */
	public function listApp(
        \OpenAPI\OpenAPI\Models\Operations\ListAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAppSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAppResponse
    {
        $baseUrl = SDK::LIST_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Apps');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAppRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAppResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAppListAppResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Devices registered with the Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeviceResponse
     */
	public function listDevice(
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeviceResponse
    {
        $baseUrl = SDK::LIST_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeviceListDeviceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Configs for a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigResponse
     */
	public function listDeviceConfig(
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigResponse
    {
        $baseUrl = SDK::LIST_DEVICE_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Configs', \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeviceConfigListDeviceConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Secrets for a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretResponse
     */
	public function listDeviceSecret(
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretResponse
    {
        $baseUrl = SDK::LIST_DEVICE_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Secrets', \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceSecretResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeviceSecretListDeviceSecretResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a config for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigResponse
     */
	public function updateAccountConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigResponse
    {
        $baseUrl = SDK::UPDATE_ACCOUNT_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configs/{Key}', \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AccountConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AccountConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a secret for an Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretResponse
     */
	public function updateAccountSecret(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretResponse
    {
        $baseUrl = SDK::UPDATE_ACCOUNT_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Secrets/{Key}', \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1AccountSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1AccountSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse
     */
	public function updateDevice(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse
    {
        $baseUrl = SDK::UPDATE_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1Device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a config for a Microvisor Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigResponse
     */
	public function updateDeviceConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigResponse
    {
        $baseUrl = SDK::UPDATE_DEVICE_CONFIG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Configs/{Key}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1DeviceDeviceConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1DeviceDeviceConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a secret for a Microvisor Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretResponse
     */
	public function updateDeviceSecret(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretResponse
    {
        $baseUrl = SDK::UPDATE_DEVICE_SECRET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Devices/{DeviceSid}/Secrets/{Key}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->microvisorV1DeviceDeviceSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MicrovisorV1DeviceDeviceSecret', 'json');
            }
        }

        return $response;
    }
}