// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpgradeStatusStateEnum - The state of the upgradeAppliance operation.
type UpgradeStatusStateEnum string

const (
	UpgradeStatusStateEnumStateUnspecified UpgradeStatusStateEnum = "STATE_UNSPECIFIED"
	UpgradeStatusStateEnumRunning          UpgradeStatusStateEnum = "RUNNING"
	UpgradeStatusStateEnumFailed           UpgradeStatusStateEnum = "FAILED"
	UpgradeStatusStateEnumSucceeded        UpgradeStatusStateEnum = "SUCCEEDED"
)

func (e *UpgradeStatusStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCEEDED":
		*e = UpgradeStatusStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpgradeStatusStateEnum: %s", s)
	}
}

// UpgradeStatus - UpgradeStatus contains information about upgradeAppliance operation.
type UpgradeStatus struct {
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// The version from which we upgraded.
	PreviousVersion *string `json:"previousVersion,omitempty"`
	// The time the operation was started.
	StartTime *string `json:"startTime,omitempty"`
	// The state of the upgradeAppliance operation.
	State *UpgradeStatusStateEnum `json:"state,omitempty"`
	// The version to upgrade to.
	Version *string `json:"version,omitempty"`
}
