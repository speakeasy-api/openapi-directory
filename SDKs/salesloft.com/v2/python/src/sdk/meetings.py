"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Meetings:
    r"""Meetings"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_meetings_json(self, request: operations.GetV2MeetingsJSONRequest) -> operations.GetV2MeetingsJSONResponse:
        r"""List meetings
        Fetches multiple meeting records. The records can be filtered, paged, and sorted according to the respective parameters.
        Meetings resource is responsible for events created via the Salesloft platform using calendaring features.
        These events can relate to cadences, people, and accounts.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/meetings.json'
        
        query_params = utils.get_query_params(operations.GetV2MeetingsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2MeetingsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_meetings_id_json(self, request: operations.PutV2MeetingsIDJSONRequest) -> operations.PutV2MeetingsIDJSONResponse:
        r"""Update a meeting
        Updates a meeting, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2MeetingsIDJSONRequest, base_url, '/v2/meetings/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2MeetingsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    