// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type SubscriptionsAPIEnable2RequestBodyType string

const (
	SubscriptionsAPIEnable2RequestBodyTypeFindCredentials SubscriptionsAPIEnable2RequestBodyType = "FindCredentials"
)

type SubscriptionsAPIEnable2RequestBody struct {
	FindCredentials *shared.FindCredentials

	Type SubscriptionsAPIEnable2RequestBodyType
}

func CreateSubscriptionsAPIEnable2RequestBodyFindCredentials(findCredentials shared.FindCredentials) SubscriptionsAPIEnable2RequestBody {
	typ := SubscriptionsAPIEnable2RequestBodyTypeFindCredentials

	return SubscriptionsAPIEnable2RequestBody{
		FindCredentials: &findCredentials,
		Type:            typ,
	}
}

func (u *SubscriptionsAPIEnable2RequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	findCredentials := new(shared.FindCredentials)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&findCredentials); err == nil {
		u.FindCredentials = findCredentials
		u.Type = SubscriptionsAPIEnable2RequestBodyTypeFindCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPIEnable2RequestBody) MarshalJSON() ([]byte, error) {
	if u.FindCredentials != nil {
		return json.Marshal(u.FindCredentials)
	}

	return nil, nil
}

type SubscriptionsAPIEnable2Request struct {
	Request SubscriptionsAPIEnable2RequestBody `request:"mediaType=application/json"`
}

type SubscriptionsAPIEnable2Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
