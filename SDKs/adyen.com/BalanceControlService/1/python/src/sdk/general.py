"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class General:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_balance_transfer(self, request: shared.BalanceTransferRequest, security: operations.PostBalanceTransferSecurity) -> operations.PostBalanceTransferResponse:
        r"""Start a balance transfer
        Starts a balance transfer request between merchant accounts. The following conditions must be met before you can successfully transfer balances:
        
        * The source and destination merchant accounts must be under the same company account and legal entity.
        
        * The source merchant account must have sufficient funds.
        
        * The source and destination merchant accounts must have at least one common processing currency.
        
        When sending multiple API requests with the same source and destination merchant accounts, send the requests sequentially and *not* in parallel. Some requests may not be processed if the requests are sent in parallel.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/balanceTransfer'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBalanceTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BalanceTransferResponse])
                res.balance_transfer_response = out

        return res

    