// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsDistributionReleaseCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsDistributionReleaseCountsRequestBodyReleases struct {
	// Distribution group Id.
	//
	DistributionGroup *string `json:"distribution_group,omitempty"`
	// Release Id.
	//
	Release string `json:"release"`
}

// AnalyticsDistributionReleaseCountsRequestBody - The releases to retrieve.
type AnalyticsDistributionReleaseCountsRequestBody struct {
	Releases []AnalyticsDistributionReleaseCountsRequestBodyReleases `json:"releases"`
}

type AnalyticsDistributionReleaseCountsRequest struct {
	// The releases to retrieve.
	RequestBody AnalyticsDistributionReleaseCountsRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumBadRequest          AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumConflict            AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumNotAcceptable       AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumNotFound            AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumInternalServerError AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumUnauthorized        AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnumTooManyRequests     AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsDistributionReleaseCountsDefaultApplicationJSONError struct {
	Code    AnalyticsDistributionReleaseCountsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                                `json:"message"`
}

// AnalyticsDistributionReleaseCountsDefaultApplicationJSON - Error code with reason.
type AnalyticsDistributionReleaseCountsDefaultApplicationJSON struct {
	Error AnalyticsDistributionReleaseCountsDefaultApplicationJSONError `json:"error"`
}

type AnalyticsDistributionReleaseCounts200ApplicationJSONCounts struct {
	// Distribution group queried.
	//
	DistributionGroup *string `json:"distribution_group,omitempty"`
	ReleaseID         string  `json:"release_id"`
	// Total count of downloads.
	//
	TotalCount int64 `json:"total_count"`
	// Count of unique downloads against user id.
	//
	UniqueCount int64 `json:"unique_count"`
}

// AnalyticsDistributionReleaseCounts200ApplicationJSON - Count of total downloads for the provided distribution release(s).
type AnalyticsDistributionReleaseCounts200ApplicationJSON struct {
	Counts []AnalyticsDistributionReleaseCounts200ApplicationJSONCounts `json:"counts"`
	Total  *int64                                                       `json:"total,omitempty"`
}

type AnalyticsDistributionReleaseCountsResponse struct {
	// Count of total downloads for the provided distribution release(s).
	AnalyticsDistributionReleaseCounts200ApplicationJSONObject *AnalyticsDistributionReleaseCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsDistributionReleaseCountsDefaultApplicationJSONObject *AnalyticsDistributionReleaseCountsDefaultApplicationJSON
	ContentType                                                    string
	StatusCode                                                     int
	RawResponse                                                    *http.Response
}
