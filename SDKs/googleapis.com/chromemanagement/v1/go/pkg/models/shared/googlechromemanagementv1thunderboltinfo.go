// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum - Security level of the Thunderbolt bus.
type GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum string

const (
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecurityLevelUnspecified GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED"
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecurityNoneLevel        GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_NONE_LEVEL"
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecurityUserLevel        GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_USER_LEVEL"
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecuritySecureLevel      GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_SECURE_LEVEL"
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecurityDpOnlyLevel      GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_DP_ONLY_LEVEL"
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecurityUsbOnlyLevel     GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_USB_ONLY_LEVEL"
	GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnumThunderboltSecurityNoPcieLevel      GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum = "THUNDERBOLT_SECURITY_NO_PCIE_LEVEL"
)

func (e *GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED":
		fallthrough
	case "THUNDERBOLT_SECURITY_NONE_LEVEL":
		fallthrough
	case "THUNDERBOLT_SECURITY_USER_LEVEL":
		fallthrough
	case "THUNDERBOLT_SECURITY_SECURE_LEVEL":
		fallthrough
	case "THUNDERBOLT_SECURITY_DP_ONLY_LEVEL":
		fallthrough
	case "THUNDERBOLT_SECURITY_USB_ONLY_LEVEL":
		fallthrough
	case "THUNDERBOLT_SECURITY_NO_PCIE_LEVEL":
		*e = GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum: %s", s)
	}
}

// GoogleChromeManagementV1ThunderboltInfo - Thunderbolt bus info. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceSecurityStatus](https://chromeenterprise.google/policies/#ReportDeviceSecurityStatus) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: No * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
type GoogleChromeManagementV1ThunderboltInfo struct {
	// Security level of the Thunderbolt bus.
	SecurityLevel *GoogleChromeManagementV1ThunderboltInfoSecurityLevelEnum `json:"securityLevel,omitempty"`
}
