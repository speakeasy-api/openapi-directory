<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Presidential 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * Net receipts per candidate.
     * 
     * Filter with `contributor_state='US'` for national totals
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByCandidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByCandidateResponse
     */
	public function getPresidentialContributionsByCandidate(
        \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByCandidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByCandidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/presidential/contributions/by_candidate/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByCandidateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->presidentialByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PresidentialByCandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Contribution receipts by size per candidate.
     * 
     * Filter by candidate_id, election_year and/or size
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsBySizeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsBySizeResponse
     */
	public function getPresidentialContributionsBySize(
        \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsBySizeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsBySizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/presidential/contributions/by_size/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsBySizeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsBySizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->presidentialBySizePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PresidentialBySizePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Contribution receipts by state per candidate.
     * 
     * Filter by candidate_id and/or election_year
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByStateResponse
     */
	public function getPresidentialContributionsByState(
        \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/presidential/contributions/by_state/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByStateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPresidentialContributionsByStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->presidentialByStatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PresidentialByStatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Coverage end date per candidate.
     * 
     * Filter by candidate_id and/or election_year
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPresidentialCoverageEndDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPresidentialCoverageEndDateResponse
     */
	public function getPresidentialCoverageEndDate(
        \OpenAPI\OpenAPI\Models\Operations\GetPresidentialCoverageEndDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPresidentialCoverageEndDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/presidential/coverage_end_date/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPresidentialCoverageEndDateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPresidentialCoverageEndDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->presidentialCoveragePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PresidentialCoveragePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Financial summary per candidate.
     * 
     * Filter by candidate_id and/or election_year
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPresidentialFinancialSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPresidentialFinancialSummaryResponse
     */
	public function getPresidentialFinancialSummary(
        \OpenAPI\OpenAPI\Models\Operations\GetPresidentialFinancialSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPresidentialFinancialSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/presidential/financial_summary/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPresidentialFinancialSummaryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPresidentialFinancialSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->presidentialSummaryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PresidentialSummaryPage', 'json');
            }
        }

        return $response;
    }
}