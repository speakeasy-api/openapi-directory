/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class InventoryperdockandwarehouseRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=dockId",
  })
  dockId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=skuId",
  })
  skuId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=warehouseId",
  })
  warehouseId: string;
}

export class Inventoryperdockandwarehouse200ApplicationJSON extends SpeakeasyBase {
  /**
   * Amount of items available for sale. Difference between total quantity and reserved quantity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availableQuantity" })
  availableQuantity?: number;

  /**
   * Date of supply lot in UTC.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateOfSupplyUtc" })
  dateOfSupplyUtc?: string;

  /**
   * List of delivery channels available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deliveryChannel" })
  deliveryChannel?: string[];

  /**
   * Dock ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dockId" })
  dockId?: string;

  /**
   * Indicates whether the SKU's availability is unlimited ("infinite inventory").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isUnlimited" })
  isUnlimited?: boolean;

  /**
   * Indicates whether SKU can continue to be sold after the available quantity gets to 0.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keepSellingAfterExpiration" })
  keepSellingAfterExpiration?: boolean;

  /**
   * Reserved quantity of the SKU.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reservedQuantity" })
  reservedQuantity?: number;

  /**
   * List of sales channels associated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "salesChannel" })
  salesChannel?: string[];

  /**
   * SKU ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skuId" })
  skuId?: string;

  /**
   * Time to refill (deprecated).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeToRefill" })
  timeToRefill?: string;

  /**
   * Total quantity of SKU.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalQuantity" })
  totalQuantity?: number;

  /**
   * Transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer" })
  transfer?: string;

  /**
   * Warehouse ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warehouseId" })
  warehouseId?: string;
}

export class InventoryperdockandwarehouseResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata({
    elemType: Inventoryperdockandwarehouse200ApplicationJSON,
  })
  inventoryperdockandwarehouse200ApplicationJSONObjects?: Inventoryperdockandwarehouse200ApplicationJSON[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
