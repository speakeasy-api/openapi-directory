/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Result of processing.
 */
export enum As2OutgoingMessageEntityProcessingResultEnum {
  NotStarted = "not_started",
  SendFailed = "send_failed",
  SendSuccess = "send_success",
  SendSuccessMdnInvalid = "send_success_mdn_invalid",
  SendSuccessMicMismatch = "send_success_mic_mismatch",
  SendSuccessMessageIdMismatch = "send_success_message_id_mismatch",
  SendSuccessSignatureMismatch = "send_success_signature_mismatch",
  SendSuccessProcessingFailure = "send_success_processing_failure",
  SendFailedUnknownHost = "send_failed_unknown_host",
  SendFailedBadHttpResponseCode = "send_failed_bad_http_response_code",
  SendFailedSslError = "send_failed_ssl_error",
  SendFailedConnectionRefused = "send_failed_connection_refused",
}

/**
 * List As2 Outgoing Messages
 */
export class As2OutgoingMessageEntity extends SpeakeasyBase {
  /**
   * JSON Structure of the activity log.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activity_log" })
  activityLog?: string;

  /**
   * AS2 FROM
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_from" })
  as2From?: string;

  /**
   * Id of the AS2 Partner associated with this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_partner_id" })
  as2PartnerId?: number;

  /**
   * Id of the AS2 Station associated with this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_station_id" })
  as2StationId?: number;

  /**
   * AS2 TO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "as2_to" })
  as2To?: string;

  /**
   * Filename of the file being sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attachment_filename" })
  attachmentFilename?: string;

  /**
   * Encrypted Payload Body Size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body_size" })
  bodySize?: string;

  /**
   * Message creation date/time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Date Header
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date?: string;

  /**
   * URL to download the encrypted signed smime that is to sent as AS2 body
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encrypted_uri" })
  encryptedUri?: string;

  /**
   * HTTP Headers sent with this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_headers" })
  httpHeaders?: Record<string, any>;

  /**
   * HTTP Response Code received for this message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_response_code" })
  httpResponseCode?: string;

  /**
   * HTTP Headers received for this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_response_headers" })
  httpResponseHeaders?: Record<string, any>;

  /**
   * HTTP transmission duration in seceonds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http_transmission_duration" })
  httpTransmissionDuration?: number;

  /**
   * Id of the AS2 Partner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * MDN message id matched?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_message_id_matched" })
  mdnMessageIdMatched?: boolean;

  /**
   * MDN MIC matched?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_mic_matched" })
  mdnMicMatched?: boolean;

  /**
   * MDN disposition indicate a successful processing?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_processing_success" })
  mdnProcessingSuccess?: boolean;

  /**
   * Did the partner give a response body?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_received" })
  mdnReceived?: boolean;

  /**
   * URL to download the http response body
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_response_uri" })
  mdnResponseUri?: string;

  /**
   * MDN signature verified?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_signature_verified" })
  mdnSignatureVerified?: boolean;

  /**
   * Is the response in MDN format?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mdn_valid" })
  mdnValid?: boolean;

  /**
   * AS2 Message Id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_id" })
  messageId?: string;

  /**
   * AS2 Message Integrity Check SHA1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mic" })
  mic?: string;

  /**
   * AS2 Message Integrity Check SHA256
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mic_sha_256" })
  micSha256?: string;

  /**
   * Result of processing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processing_result" })
  processingResult?: As2OutgoingMessageEntityProcessingResultEnum;

  /**
   * Result of processing description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processing_result_description" })
  processingResultDescription?: string;

  /**
   * URL to download the original file contents
   */
  @SpeakeasyMetadata()
  @Expose({ name: "raw_uri" })
  rawUri?: string;

  /**
   * URL to download the file contents as smime with signature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smime_signed_uri" })
  smimeSignedUri?: string;

  /**
   * URL to download the file contents encoded as smime
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smime_uri" })
  smimeUri?: string;

  /**
   * UUID assigned to this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}
