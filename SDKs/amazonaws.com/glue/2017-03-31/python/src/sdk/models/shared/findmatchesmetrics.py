"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import columnimportance as shared_columnimportance
from ..shared import confusionmatrix as shared_confusionmatrix
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindMatchesMetrics:
    r"""The evaluation metrics for the find matches algorithm. The quality of your machine learning transform is measured by getting your transform to predict some matches and comparing the results to known matches from the same dataset. The quality metrics are based on a subset of your data, so they are not precise."""
    
    area_under_pr_curve: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AreaUnderPRCurve'), 'exclude': lambda f: f is None }})  
    column_importances: Optional[list[shared_columnimportance.ColumnImportance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ColumnImportances'), 'exclude': lambda f: f is None }})  
    confusion_matrix: Optional[shared_confusionmatrix.ConfusionMatrix] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfusionMatrix'), 'exclude': lambda f: f is None }})  
    f1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('F1'), 'exclude': lambda f: f is None }})  
    precision: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Precision'), 'exclude': lambda f: f is None }})  
    recall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Recall'), 'exclude': lambda f: f is None }})  
    