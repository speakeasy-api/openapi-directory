/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CatalogQueryExact } from "./catalogqueryexact";
import { CatalogQueryItemsForItemOptions } from "./catalogqueryitemsforitemoptions";
import { CatalogQueryItemsForModifierList } from "./catalogqueryitemsformodifierlist";
import { CatalogQueryItemsForTax } from "./catalogqueryitemsfortax";
import { CatalogQueryItemVariationsForItemOptionValues } from "./catalogqueryitemvariationsforitemoptionvalues";
import { CatalogQueryPrefix } from "./catalogqueryprefix";
import { CatalogQueryRange } from "./catalogqueryrange";
import { CatalogQuerySet } from "./catalogqueryset";
import { CatalogQuerySortedAttribute } from "./catalogquerysortedattribute";
import { CatalogQueryText } from "./catalogquerytext";
import { Expose, Type } from "class-transformer";

/**
 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
 *
 * @remarks
 *
 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
 * Any combination of the following types may be used together:
 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
 * All other query types cannot be combined with any others.
 *
 * When a query filter is based on an attribute, the attribute must be searchable.
 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
 *
 * * Searchable attribute and objects queryable by searchable attributes **
 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
 * - `abbreviation`: `CatalogItem`
 * - `upc`: `CatalogItemVariation`
 * - `sku`: `CatalogItemVariation`
 * - `caption`: `CatalogImage`
 * - `display_name`: `CatalogItemOption`
 *
 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
 */
export class CatalogQuery extends SpeakeasyBase {
  /**
   * The query filter to return the search result by exact match of the specified attribute name and value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exact_query" })
  @Type(() => CatalogQueryExact)
  exactQuery?: CatalogQueryExact;

  /**
   * The query filter to return the item variations containing the specified item option value IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "item_variations_for_item_option_values_query" })
  @Type(() => CatalogQueryItemVariationsForItemOptionValues)
  itemVariationsForItemOptionValuesQuery?: CatalogQueryItemVariationsForItemOptionValues;

  /**
   * The query filter to return the items containing the specified item option IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "items_for_item_options_query" })
  @Type(() => CatalogQueryItemsForItemOptions)
  itemsForItemOptionsQuery?: CatalogQueryItemsForItemOptions;

  /**
   * The query filter to return the items containing the specified modifier list IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "items_for_modifier_list_query" })
  @Type(() => CatalogQueryItemsForModifierList)
  itemsForModifierListQuery?: CatalogQueryItemsForModifierList;

  /**
   * The query filter to return the items containing the specified tax IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "items_for_tax_query" })
  @Type(() => CatalogQueryItemsForTax)
  itemsForTaxQuery?: CatalogQueryItemsForTax;

  /**
   * The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prefix_query" })
  @Type(() => CatalogQueryPrefix)
  prefixQuery?: CatalogQueryPrefix;

  /**
   * The query filter to return the search result whose named attribute values fall between the specified range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "range_query" })
  @Type(() => CatalogQueryRange)
  rangeQuery?: CatalogQueryRange;

  /**
   * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
   *
   * @remarks
   * the `attribute_values`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "set_query" })
  @Type(() => CatalogQuerySet)
  setQuery?: CatalogQuerySet;

  /**
   * The query expression to specify the key to sort search results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sorted_attribute_query" })
  @Type(() => CatalogQuerySortedAttribute)
  sortedAttributeQuery?: CatalogQuerySortedAttribute;

  /**
   * The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text_query" })
  @Type(() => CatalogQueryText)
  textQuery?: CatalogQueryText;
}
