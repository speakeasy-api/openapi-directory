<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Journals 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a Journal instruction
     * 
     * Delete the specified Journal instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionResponse
     */
	public function deleteJournalInstruction(
        \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Journal instruction template
     * 
     * Delete the specified Journal instruction template object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionTemplateResponse
     */
	public function deleteJournalInstructionTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/JournalInstruction/{JournalInstructionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteJournalInstructionTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified journal instruction from the employer
     * 
     * Returns the specified journal instruction from employer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionFromEmployerResponse
     */
	public function getJournalInstructionFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}', \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->journalInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JournalInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Journal instructions template for the application
     * 
     * Retrurns the specified journal instruction from the application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplateResponse
     */
	public function getJournalInstructionTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/JournalInstruction/{JournalInstructionId}', \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->journalInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JournalInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Journal instructions templates for the application
     * 
     * Get links to all journal instruction templates for the application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplatesResponse
     */
	public function getJournalInstructionTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/JournalInstructions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Journal instructions from the specified employer
     * 
     * Get links to all journal instructions for the specified employer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionsFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionsFromEmployerResponse
     */
	public function getJournalInstructionsFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionsFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionsFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalInstructions', \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionsFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalInstructionsFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified journal Line from the employer
     * 
     * Returns the specified journal Line from employer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalLineFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalLineFromEmployerResponse
     */
	public function getJournalLineFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalLineFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalLineFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalLine/{JournalLineId}', \OpenAPI\OpenAPI\Models\Operations\GetJournalLineFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalLineFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->journalLine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JournalLine', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the journal Lines from the specified employee
     * 
     * Get links to all journal lines for the specified employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployeeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployeeResponse
     */
	public function getJournalLinesFromEmployee(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployeeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/JournalLines', \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Journal Lines from the specified employer
     * 
     * Get links to all journal Lines for the specified employer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployerResponse
     */
	public function getJournalLinesFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalLines', \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the journal Lines from the specified pay run
     * 
     * Get links to all journal lines for the specified pay run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromPayRunRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromPayRunResponse
     */
	public function getJournalLinesFromPayRun(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromPayRunRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromPayRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/JournalLines', \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromPayRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromPayRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the journal Lines from the specified sub contractor
     * 
     * Get links to all journal lines for the specified sub contractor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromSubContractorResponse
     */
	public function getJournalLinesFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/JournalLines', \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJournalLinesFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Journal Instruction
     * 
     * Creates a new Journal instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionResponse
     */
	public function postJournalInstruction(
        \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalInstructions', \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Journal Instruction template
     * 
     * Creates a new Journal instruction teamplte object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionTemplateResponse
     */
	public function postJournalInstructionTemplate(
        \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/JournalInstructions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostJournalInstructionTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Journal Instruction
     * 
     * Updates the existing specified Journal instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionResponse
     */
	public function putJournalInstruction(
        \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}', \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->journalInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JournalInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Journal Instruction template
     * 
     * Updates the existing specified Journal instruction template object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionTemplateResponse
     */
	public function putJournalInstructionTemplate(
        \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/JournalInstruction/{JournalInstructionId}', \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutJournalInstructionTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->journalInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JournalInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
}