// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsEventDeviceCountSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsEventDeviceCountRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The id of the event.
	EventName string `pathParam:"style=simple,explode=false,name=event_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsEventDeviceCountDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsEventDeviceCountDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsEventDeviceCountDefaultApplicationJSON - Error
type AnalyticsEventDeviceCountDefaultApplicationJSON struct {
	Error *AnalyticsEventDeviceCountDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsEventDeviceCount200ApplicationJSONDevicesCount struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

// AnalyticsEventDeviceCount200ApplicationJSON - Count of devices for an event by interval in the time range.
type AnalyticsEventDeviceCount200ApplicationJSON struct {
	DevicesCount                  []AnalyticsEventDeviceCount200ApplicationJSONDevicesCount `json:"devices_count,omitempty"`
	PreviousTotalDevicesWithEvent *int64                                                    `json:"previous_total_devices_with_event,omitempty"`
	TotalDevices                  *int64                                                    `json:"total_devices,omitempty"`
	TotalDevicesWithEvent         *int64                                                    `json:"total_devices_with_event,omitempty"`
}

type AnalyticsEventDeviceCountResponse struct {
	// Count of devices for an event by interval in the time range.
	AnalyticsEventDeviceCount200ApplicationJSONObject *AnalyticsEventDeviceCount200ApplicationJSON
	// Error code with reason.
	AnalyticsEventDeviceCountDefaultApplicationJSONObject *AnalyticsEventDeviceCountDefaultApplicationJSON
	ContentType                                           string
	StatusCode                                            int
	RawResponse                                           *http.Response
}
