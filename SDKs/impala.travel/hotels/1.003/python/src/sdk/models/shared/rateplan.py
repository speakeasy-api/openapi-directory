"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conditions as shared_conditions
from ..shared import rateadjustment as shared_rateadjustment
from ..shared import ratecomponent as shared_ratecomponent
from ..shared import rateplanrestrictions as shared_rateplanrestrictions
from ..shared import rateplanroomtype as shared_rateplanroomtype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RatePlan:
    r"""Rate plan encapsulates rates given a set of internal conditions like cancellation policy or meal plan."""
    
    conditions: shared_conditions.Conditions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditions') }})
    r"""Conditions described by the rate plan."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Human-readable summary describing this rate plan."""  
    hotel_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelId') }})
    r"""The unique identifier of the hotel this rate plan is available for."""  
    rate_plan_id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratePlanId') }})
    r"""The integer identifier of this rate plan."""  
    restrictions: shared_rateplanrestrictions.RatePlanRestrictions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictions') }})
    r"""Restrictions that apply to this rate plan."""  
    room_types: list[shared_rateplanroomtype.RatePlanRoomType] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roomTypes') }})
    r"""A list of room types this rate plan is bookable for."""  
    adjustments: Optional[list[shared_rateadjustment.RateAdjustment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjustments'), 'exclude': lambda f: f is None }})
    r"""A list of adjustments that could apply to this rate."""  
    components: Optional[list[shared_ratecomponent.RateComponent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})  
    