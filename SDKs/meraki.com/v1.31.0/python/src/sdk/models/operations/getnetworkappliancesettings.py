"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkApplianceSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    
class GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum(str, Enum):
    r"""Client tracking method of a network"""
    IP_ADDRESS = 'IP address'
    MAC_ADDRESS = 'MAC address'
    UNIQUE_CLIENT_IDENTIFIER = 'Unique client identifier'

class GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum(str, Enum):
    r"""Deployment mode of a network"""
    PASSTHROUGH = 'passthrough'
    ROUTED = 'routed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceSettings200ApplicationJSONDynamicDNS:
    r"""Dynamic DNS settings for a network"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Dynamic DNS enabled"""  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""Dynamic DNS url prefix. DDNS must be enabled to update"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Dynamic DNS url. DDNS must be enabled to update"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceSettings200ApplicationJSON:
    r"""Successful operation"""
    
    client_tracking_method: Optional[GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientTrackingMethod'), 'exclude': lambda f: f is None }})
    r"""Client tracking method of a network"""  
    deployment_mode: Optional[GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentMode'), 'exclude': lambda f: f is None }})
    r"""Deployment mode of a network"""  
    dynamic_dns: Optional[GetNetworkApplianceSettings200ApplicationJSONDynamicDNS] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamicDns'), 'exclude': lambda f: f is None }})
    r"""Dynamic DNS settings for a network"""  
    

@dataclasses.dataclass
class GetNetworkApplianceSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_appliance_settings_200_application_json_object: Optional[GetNetworkApplianceSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    