"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetFormatEnum(str, Enum):
    r"""Format of the response message."""
    JSON = 'json'
    XML = 'xml'

class GetLangEnum(str, Enum):
    r"""Translation information. The translation only applicable for continent, country, region and city name. This parameter is only available for Plus and Security plan only."""
    AR = 'ar'
    CS = 'cs'
    DA = 'da'
    DE = 'de'
    EN = 'en'
    ES = 'es'
    ET = 'et'
    FI = 'fi'
    FR = 'fr'
    GA = 'ga'
    IT = 'it'
    JA = 'ja'
    KO = 'ko'
    MS = 'ms'
    NL = 'nl'
    PT = 'pt'
    RU = 'ru'
    SV = 'sv'
    TR = 'tr'
    VI = 'vi'
    ZH_CN = 'zh-cn'
    ZH_TW = 'zh-tw'


@dataclasses.dataclass
class GetRequest:
    
    ip: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ip', 'style': 'form', 'explode': True }})
    r"""IP address (IPv4 or IPv6) for reverse IP location lookup purposes. If not present, the server IP address will be used for the location lookup."""  
    key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key."""  
    format: Optional[GetFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""Format of the response message."""  
    lang: Optional[GetLangEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lang', 'style': 'form', 'explode': True }})
    r"""Translation information. The translation only applicable for continent, country, region and city name. This parameter is only available for Plus and Security plan only."""  
    

@dataclasses.dataclass
class GetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    