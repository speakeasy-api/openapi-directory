"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getdataendpointoutput as shared_getdataendpointoutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GetDataEndpointRequestBodyAPINameEnum(str, Enum):
    r"""The name of the API action for which to get an endpoint."""
    PUT_MEDIA = 'PUT_MEDIA'
    GET_MEDIA = 'GET_MEDIA'
    LIST_FRAGMENTS = 'LIST_FRAGMENTS'
    GET_MEDIA_FOR_FRAGMENT_LIST = 'GET_MEDIA_FOR_FRAGMENT_LIST'
    GET_HLS_STREAMING_SESSION_URL = 'GET_HLS_STREAMING_SESSION_URL'
    GET_DASH_STREAMING_SESSION_URL = 'GET_DASH_STREAMING_SESSION_URL'
    GET_CLIP = 'GET_CLIP'
    GET_IMAGES = 'GET_IMAGES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDataEndpointRequestBody:
    
    api_name: GetDataEndpointRequestBodyAPINameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('APIName') }})
    r"""The name of the API action for which to get an endpoint."""  
    stream_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamARN'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the stream that you want to get the endpoint for. You must specify either this parameter or a <code>StreamName</code> in the request."""  
    stream_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamName'), 'exclude': lambda f: f is None }})
    r"""The name of the stream that you want to get the endpoint for. You must specify either this parameter or a <code>StreamARN</code> in the request."""  
    

@dataclasses.dataclass
class GetDataEndpointRequest:
    
    request_body: GetDataEndpointRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetDataEndpointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientLimitExceededException"""  
    get_data_endpoint_output: Optional[shared_getdataendpointoutput.GetDataEndpointOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_argument_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArgumentException"""  
    not_authorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotAuthorizedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    