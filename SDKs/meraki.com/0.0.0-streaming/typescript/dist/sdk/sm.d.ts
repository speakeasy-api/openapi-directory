import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig } from "axios";
export declare class Sm {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    /**
     * Force check-in a set of devices
     *
     * @remarks
     * Force check-in a set of devices
     */
    checkinNetworkSmDevices(req: operations.CheckinNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.CheckinNetworkSmDevicesResponse>;
    /**
     * Bypass activation lock attempt
     *
     * @remarks
     * Bypass activation lock attempt
     */
    createNetworkSmBypassActivationLockAttempt(req: operations.CreateNetworkSmBypassActivationLockAttemptRequest, config?: AxiosRequestConfig): Promise<operations.CreateNetworkSmBypassActivationLockAttemptResponse>;
    /**
     * Bypass activation lock attempt status
     *
     * @remarks
     * Bypass activation lock attempt status
     */
    getNetworkSmBypassActivationLockAttempt(req: operations.GetNetworkSmBypassActivationLockAttemptRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmBypassActivationLockAttemptResponse>;
    /**
     * Return the client's daily cellular data usage history
     *
     * @remarks
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     */
    getNetworkSmCellularUsageHistory(req: operations.GetNetworkSmCellularUsageHistoryRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmCellularUsageHistoryResponse>;
    /**
     * List the certs on a device
     *
     * @remarks
     * List the certs on a device
     */
    getNetworkSmCerts(req: operations.GetNetworkSmCertsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmCertsResponse>;
    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * @remarks
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     */
    getNetworkSmConnectivity(req: operations.GetNetworkSmConnectivityRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmConnectivityResponse>;
    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * @remarks
     * Return historical records of various Systems Manager network connection details for desktop devices.
     */
    getNetworkSmDesktopLogs(req: operations.GetNetworkSmDesktopLogsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDesktopLogsResponse>;
    /**
     * Return historical records of commands sent to Systems Manager devices
     *
     * @remarks
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     */
    getNetworkSmDeviceCommandLogs(req: operations.GetNetworkSmDeviceCommandLogsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceCommandLogsResponse>;
    /**
     * Get the profiles associated with a device
     *
     * @remarks
     * Get the profiles associated with a device
     */
    getNetworkSmDeviceProfiles(req: operations.GetNetworkSmDeviceProfilesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceProfilesResponse>;
    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * @remarks
     * List the devices enrolled in an SM network with various specified fields and filters
     */
    getNetworkSmDevices(req: operations.GetNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDevicesResponse>;
    /**
     * List the network adapters of a device
     *
     * @remarks
     * List the network adapters of a device
     */
    getNetworkSmNetworkAdapters(req: operations.GetNetworkSmNetworkAdaptersRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmNetworkAdaptersResponse>;
    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * @remarks
     * Return historical records of various Systems Manager client metrics for desktop devices.
     */
    getNetworkSmPerformanceHistory(req: operations.GetNetworkSmPerformanceHistoryRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmPerformanceHistoryResponse>;
    /**
     * List all the profiles in the network
     *
     * @remarks
     * List all the profiles in the network
     */
    getNetworkSmProfiles(req: operations.GetNetworkSmProfilesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmProfilesResponse>;
    /**
     * List the restrictions on a device
     *
     * @remarks
     * List the restrictions on a device
     */
    getNetworkSmRestrictions(req: operations.GetNetworkSmRestrictionsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmRestrictionsResponse>;
    /**
     * List the security centers on a device
     *
     * @remarks
     * List the security centers on a device
     */
    getNetworkSmSecurityCenters(req: operations.GetNetworkSmSecurityCentersRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmSecurityCentersResponse>;
    /**
     * Get a list of softwares associated with a device
     *
     * @remarks
     * Get a list of softwares associated with a device
     */
    getNetworkSmSoftwares(req: operations.GetNetworkSmSoftwaresRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmSoftwaresResponse>;
    /**
     * Get the profiles associated with a user
     *
     * @remarks
     * Get the profiles associated with a user
     */
    getNetworkSmUserDeviceProfiles(req: operations.GetNetworkSmUserDeviceProfilesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUserDeviceProfilesResponse>;
    /**
     * Get a list of softwares associated with a user
     *
     * @remarks
     * Get a list of softwares associated with a user
     */
    getNetworkSmUserSoftwares(req: operations.GetNetworkSmUserSoftwaresRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUserSoftwaresResponse>;
    /**
     * List the owners in an SM network with various specified fields and filters
     *
     * @remarks
     * List the owners in an SM network with various specified fields and filters
     */
    getNetworkSmUsers(req: operations.GetNetworkSmUsersRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUsersResponse>;
    /**
     * List the saved SSID names on a device
     *
     * @remarks
     * List the saved SSID names on a device
     */
    getNetworkSmWlanLists(req: operations.GetNetworkSmWlanListsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmWlanListsResponse>;
    /**
     * Lock a set of devices
     *
     * @remarks
     * Lock a set of devices
     */
    lockNetworkSmDevices(req: operations.LockNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.LockNetworkSmDevicesResponse>;
    /**
     * Refresh the details of a device
     *
     * @remarks
     * Refresh the details of a device
     */
    refreshNetworkSmDeviceDetails(req: operations.RefreshNetworkSmDeviceDetailsRequest, config?: AxiosRequestConfig): Promise<operations.RefreshNetworkSmDeviceDetailsResponse>;
    /**
     * Unenroll a device
     *
     * @remarks
     * Unenroll a device
     */
    unenrollNetworkSmDevice(req: operations.UnenrollNetworkSmDeviceRequest, config?: AxiosRequestConfig): Promise<operations.UnenrollNetworkSmDeviceResponse>;
    /**
     * Modify the fields of a device
     *
     * @remarks
     * Modify the fields of a device
     */
    updateNetworkSmDeviceFields(req: operations.UpdateNetworkSmDeviceFieldsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNetworkSmDeviceFieldsResponse>;
    /**
     * Add, delete, or update the tags of a set of devices
     *
     * @remarks
     * Add, delete, or update the tags of a set of devices
     */
    updateNetworkSmDevicesTags(req: operations.UpdateNetworkSmDevicesTagsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNetworkSmDevicesTagsResponse>;
    /**
     * Wipe a device
     *
     * @remarks
     * Wipe a device
     */
    wipeNetworkSmDevice(req: operations.WipeNetworkSmDeviceRequest, config?: AxiosRequestConfig): Promise<operations.WipeNetworkSmDeviceResponse>;
}
