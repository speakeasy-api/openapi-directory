/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Period {
    /**
     * The sum of all actuals (transactions) in the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actual_amount")
    public Double actualAmount;

    public Period withActualAmount(Double actualAmount) {
        this.actualAmount = actualAmount;
        return this;
    }
    
    /**
     * The currency of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_code")
    public String currencyCode;

    public Period withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * Whether this period is current, such that the current date (in the user's time zone) falls within the date range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    public Boolean current;

    public Period withCurrent(Boolean current) {
        this.current = current;
        return this;
    }
    
    /**
     * The end date of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    public String endDate;

    public Period withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_amount")
    public Double forecastAmount;

    public Period withForecastAmount(Double forecastAmount) {
        this.forecastAmount = forecastAmount;
        return this;
    }
    
    /**
     * Whether the budget has been exceeded in the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("over_budget")
    public Boolean overBudget;

    public Period withOverBudget(Boolean overBudget) {
        this.overBudget = overBudget;
        return this;
    }
    
    /**
     * How much the budget has been exceeded by in the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("over_by")
    public Double overBy;

    public Period withOverBy(Double overBy) {
        this.overBy = overBy;
        return this;
    }
    
    /**
     * The percentage of the budget that has been used in the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage_used")
    public Double percentageUsed;

    public Period withPercentageUsed(Double percentageUsed) {
        this.percentageUsed = percentageUsed;
        return this;
    }
    
    /**
     * This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to "always expense", any credit transactions are treated as refunds and when set to "always income", any debit transactions are treated as deductions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_amount")
    public Double refundAmount;

    public Period withRefundAmount(Double refundAmount) {
        this.refundAmount = refundAmount;
        return this;
    }
    
    /**
     * The start date of the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    public String startDate;

    public Period withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Whether the budget has not been exceeded in the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("under_budget")
    public Boolean underBudget;

    public Period withUnderBudget(Boolean underBudget) {
        this.underBudget = underBudget;
        return this;
    }
    
    /**
     * How much there is left in the budget for the period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("under_by")
    public Double underBy;

    public Period withUnderBy(Double underBy) {
        this.underBy = underBy;
        return this;
    }
    
    public Period(){}
}
