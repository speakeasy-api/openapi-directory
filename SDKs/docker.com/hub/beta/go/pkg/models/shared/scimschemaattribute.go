// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScimSchemaAttributeTypeEnum string

const (
	ScimSchemaAttributeTypeEnumString  ScimSchemaAttributeTypeEnum = "string"
	ScimSchemaAttributeTypeEnumBoolean ScimSchemaAttributeTypeEnum = "boolean"
	ScimSchemaAttributeTypeEnumComplex ScimSchemaAttributeTypeEnum = "complex"
)

func (e *ScimSchemaAttributeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "string":
		fallthrough
	case "boolean":
		fallthrough
	case "complex":
		*e = ScimSchemaAttributeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimSchemaAttributeTypeEnum: %s", s)
	}
}

type ScimSchemaAttribute struct {
	CaseExact   *bool                        `json:"caseExact,omitempty"`
	Description *string                      `json:"description,omitempty"`
	MultiValued *bool                        `json:"multiValued,omitempty"`
	Mutability  *string                      `json:"mutability,omitempty"`
	Name        *string                      `json:"name,omitempty"`
	Required    *bool                        `json:"required,omitempty"`
	Returned    *string                      `json:"returned,omitempty"`
	Type        *ScimSchemaAttributeTypeEnum `json:"type,omitempty"`
	Uniqueness  *string                      `json:"uniqueness,omitempty"`
}
