/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComponentProperty } from "./componentproperty";
import { MutationActionSetStateParameter } from "./mutationactionsetstateparameter";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents the event action configuration for an element of a <code>Component</code> or <code>ComponentChild</code>. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. <code>ActionParameters</code> defines the action that is performed when an event occurs on the component.
 */
export class ActionParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "anchor" })
  @Type(() => ComponentProperty)
  anchor?: ComponentProperty;

  @SpeakeasyMetadata({ elemType: ComponentProperty })
  @Expose({ name: "fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentProperty> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentProperty);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields?: Record<string, ComponentProperty>;

  @SpeakeasyMetadata()
  @Expose({ name: "global" })
  @Type(() => ComponentProperty)
  global?: ComponentProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  @Type(() => ComponentProperty)
  id?: ComponentProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => MutationActionSetStateParameter)
  state?: MutationActionSetStateParameter;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => ComponentProperty)
  target?: ComponentProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  @Type(() => ComponentProperty)
  type?: ComponentProperty;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  @Type(() => ComponentProperty)
  url?: ComponentProperty;
}
