/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ComputeNode - A compute node in the Batch service.
 */
public class ComputeNode {
    /**
     * Gets or sets an identifier which can be passed in the Add Task API to request that the task be scheduled close to this compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affinityId")
    public String affinityId;

    public ComputeNode withAffinityId(String affinityId) {
        this.affinityId = affinityId;
        return this;
    }
    
    /**
     * Gets or sets the time at which this compute node was allocated to the pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("allocationTime")
    public OffsetDateTime allocationTime;

    public ComputeNode withAllocationTime(OffsetDateTime allocationTime) {
        this.allocationTime = allocationTime;
        return this;
    }
    
    /**
     * Gets or sets the list of certificates installed on the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateReferences")
    public CertificateReference[] certificateReferences;

    public ComputeNode withCertificateReferences(CertificateReference[] certificateReferences) {
        this.certificateReferences = certificateReferences;
        return this;
    }
    
    /**
     * Gets or sets the list of errors that are currently being encountered by the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public ComputeNodeError[] errors;

    public ComputeNode withErrors(ComputeNodeError[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * Gets or sets the id of the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public ComputeNode withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Gets or sets the IP address that other compute nodes can use to communicate with this compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    public String ipAddress;

    public ComputeNode withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Gets or sets the time at which the compute node was started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastBootTime")
    public OffsetDateTime lastBootTime;

    public ComputeNode withLastBootTime(OffsetDateTime lastBootTime) {
        this.lastBootTime = lastBootTime;
        return this;
    }
    
    /**
     * Gets or sets the list of tasks that are currently running on the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recentTasks")
    public TaskInformation[] recentTasks;

    public ComputeNode withRecentTasks(TaskInformation[] recentTasks) {
        this.recentTasks = recentTasks;
        return this;
    }
    
    /**
     * Gets or sets whether the compute node should be available for task scheduling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingState")
    public ComputeNodeSchedulingStateEnum schedulingState;

    public ComputeNode withSchedulingState(ComputeNodeSchedulingStateEnum schedulingState) {
        this.schedulingState = schedulingState;
        return this;
    }
    
    /**
     * A task defined on a pool and run by compute nodes when they join the pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTask")
    public StartTask startTask;

    public ComputeNode withStartTask(StartTask startTask) {
        this.startTask = startTask;
        return this;
    }
    
    /**
     * Information about a start task running on a compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTaskInfo")
    public StartTaskInformation startTaskInfo;

    public ComputeNode withStartTaskInfo(StartTaskInformation startTaskInfo) {
        this.startTaskInfo = startTaskInfo;
        return this;
    }
    
    /**
     * Gets or sets the current state of the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ComputeNodeStateEnum state;

    public ComputeNode withState(ComputeNodeStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Gets or sets the time at which the compute node entered its current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stateTransitionTime")
    public OffsetDateTime stateTransitionTime;

    public ComputeNode withStateTransitionTime(OffsetDateTime stateTransitionTime) {
        this.stateTransitionTime = stateTransitionTime;
        return this;
    }
    
    /**
     * Gets or sets the total number of job tasks completed on the compute node. This includes Job Preparation, Job Release and Job Manager tasks, but not the pool start task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTasksRun")
    public Integer totalTasksRun;

    public ComputeNode withTotalTasksRun(Integer totalTasksRun) {
        this.totalTasksRun = totalTasksRun;
        return this;
    }
    
    /**
     * Gets or sets the URL of the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public ComputeNode withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Gets or sets the size of the virtual machine hosting the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmSize")
    public String vmSize;

    public ComputeNode withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }
    
    public ComputeNode(){}
}
