// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type TransformSettingsLocationType string

const (
	TransformSettingsLocationTypeInQueryParam TransformSettingsLocationType = "InQueryParam"
	TransformSettingsLocationTypeInHeader     TransformSettingsLocationType = "InHeader"
	TransformSettingsLocationTypeInCookie     TransformSettingsLocationType = "InCookie"
)

type TransformSettingsLocation struct {
	InQueryParam *InQueryParam
	InHeader     *InHeader
	InCookie     *InCookie

	Type TransformSettingsLocationType
}

func CreateTransformSettingsLocationInQueryParam(inQueryParam InQueryParam) TransformSettingsLocation {
	typ := TransformSettingsLocationTypeInQueryParam

	return TransformSettingsLocation{
		InQueryParam: &inQueryParam,
		Type:         typ,
	}
}

func CreateTransformSettingsLocationInHeader(inHeader InHeader) TransformSettingsLocation {
	typ := TransformSettingsLocationTypeInHeader

	return TransformSettingsLocation{
		InHeader: &inHeader,
		Type:     typ,
	}
}

func CreateTransformSettingsLocationInCookie(inCookie InCookie) TransformSettingsLocation {
	typ := TransformSettingsLocationTypeInCookie

	return TransformSettingsLocation{
		InCookie: &inCookie,
		Type:     typ,
	}
}

func (u *TransformSettingsLocation) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	inQueryParam := new(InQueryParam)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inQueryParam); err == nil {
		u.InQueryParam = inQueryParam
		u.Type = TransformSettingsLocationTypeInQueryParam
		return nil
	}

	inHeader := new(InHeader)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inHeader); err == nil {
		u.InHeader = inHeader
		u.Type = TransformSettingsLocationTypeInHeader
		return nil
	}

	inCookie := new(InCookie)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inCookie); err == nil {
		u.InCookie = inCookie
		u.Type = TransformSettingsLocationTypeInCookie
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransformSettingsLocation) MarshalJSON() ([]byte, error) {
	if u.InQueryParam != nil {
		return json.Marshal(u.InQueryParam)
	}

	if u.InHeader != nil {
		return json.Marshal(u.InHeader)
	}

	if u.InCookie != nil {
		return json.Marshal(u.InCookie)
	}

	return nil, nil
}

// TransformSettings - Settings to transform a JWT token and its location
type TransformSettings struct {
	Location TransformSettingsLocation `json:"location"`
	// Settings to change fields of a JWT token
	MappingSettings MappingSettings `json:"mappingSettings"`
}
