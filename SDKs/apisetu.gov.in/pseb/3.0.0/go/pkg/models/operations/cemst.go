// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CemstSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type CemstRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// CemstRequestBodyFormatEnum - The format of the certificate in response.
type CemstRequestBodyFormatEnum string

const (
	CemstRequestBodyFormatEnumPdf CemstRequestBodyFormatEnum = "pdf"
)

func (e *CemstRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = CemstRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CemstRequestBodyFormatEnum: %s", s)
	}
}

// CemstRequestBody - Request format
type CemstRequestBody struct {
	CertificateParameters *CemstRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CemstRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type CemstRequest struct {
	// Request format
	Request  *CemstRequestBody `request:"mediaType=application/json"`
	Security CemstSecurity
}

type Cemst504ApplicationJSONErrorEnum string

const (
	Cemst504ApplicationJSONErrorEnumGatewayTimeout Cemst504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cemst504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cemst504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst504ApplicationJSONErrorDescriptionEnum string

const (
	Cemst504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cemst504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cemst504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cemst504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst504ApplicationJSON - Gateway timeout
type Cemst504ApplicationJSON struct {
	Error            *Cemst504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cemst503ApplicationJSONErrorEnum string

const (
	Cemst503ApplicationJSONErrorEnumServiceUnavailable Cemst503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cemst503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cemst503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst503ApplicationJSONErrorDescriptionEnum string

const (
	Cemst503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cemst503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cemst503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cemst503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst503ApplicationJSON - Service unavailable
type Cemst503ApplicationJSON struct {
	Error            *Cemst503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cemst502ApplicationJSONErrorEnum string

const (
	Cemst502ApplicationJSONErrorEnumBadGatewy Cemst502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cemst502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cemst502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst502ApplicationJSONErrorDescriptionEnum string

const (
	Cemst502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cemst502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cemst502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cemst502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst502ApplicationJSON - Bad gateway
type Cemst502ApplicationJSON struct {
	Error            *Cemst502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cemst500ApplicationJSONErrorEnum string

const (
	Cemst500ApplicationJSONErrorEnumInternalServerError Cemst500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cemst500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cemst500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst500ApplicationJSONErrorDescriptionEnum string

const (
	Cemst500ApplicationJSONErrorDescriptionEnumInternalServerError Cemst500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cemst500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cemst500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst500ApplicationJSON - Internal server error
type Cemst500ApplicationJSON struct {
	Error            *Cemst500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cemst404ApplicationJSONErrorEnum string

const (
	Cemst404ApplicationJSONErrorEnumRecordNotFound Cemst404ApplicationJSONErrorEnum = "record_not_found"
	Cemst404ApplicationJSONErrorEnumURLNotFound    Cemst404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cemst404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cemst404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst404ApplicationJSONErrorDescriptionEnum string

const (
	Cemst404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cemst404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cemst404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cemst404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cemst404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cemst404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst404ApplicationJSON - No record found
type Cemst404ApplicationJSON struct {
	Error            *Cemst404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cemst401ApplicationJSONErrorEnum string

const (
	Cemst401ApplicationJSONErrorEnumInvalidAuthentication Cemst401ApplicationJSONErrorEnum = "invalid_authentication"
	Cemst401ApplicationJSONErrorEnumInvalidAuthorization  Cemst401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cemst401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cemst401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst401ApplicationJSONErrorDescriptionEnum string

const (
	Cemst401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cemst401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cemst401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cemst401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cemst401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cemst401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst401ApplicationJSON - Unauthorized access
type Cemst401ApplicationJSON struct {
	Error            *Cemst401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cemst400ApplicationJSONErrorEnum string

const (
	Cemst400ApplicationJSONErrorEnumMissingParameter Cemst400ApplicationJSONErrorEnum = "missing_parameter"
	Cemst400ApplicationJSONErrorEnumInvalidParameter Cemst400ApplicationJSONErrorEnum = "invalid_parameter"
	Cemst400ApplicationJSONErrorEnumInvalidFormat    Cemst400ApplicationJSONErrorEnum = "invalid_format"
	Cemst400ApplicationJSONErrorEnumInvalidTxnid     Cemst400ApplicationJSONErrorEnum = "invalid_txnid"
	Cemst400ApplicationJSONErrorEnumInvalidConsentid Cemst400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cemst400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cemst400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cemst400ApplicationJSONErrorDescriptionEnum string

const (
	Cemst400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cemst400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cemst400ApplicationJSONErrorDescriptionEnumBadRequest                              Cemst400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cemst400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cemst400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cemst400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cemst400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cemst400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cemst400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cemst400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cemst400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cemst400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cemst400ApplicationJSON - Bad request
type Cemst400ApplicationJSON struct {
	Error            *Cemst400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cemst400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CemstResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cemst400ApplicationJSONObject *Cemst400ApplicationJSON
	// Unauthorized access
	Cemst401ApplicationJSONObject *Cemst401ApplicationJSON
	// No record found
	Cemst404ApplicationJSONObject *Cemst404ApplicationJSON
	// Internal server error
	Cemst500ApplicationJSONObject *Cemst500ApplicationJSON
	// Bad gateway
	Cemst502ApplicationJSONObject *Cemst502ApplicationJSON
	// Service unavailable
	Cemst503ApplicationJSONObject *Cemst503ApplicationJSON
	// Gateway timeout
	Cemst504ApplicationJSONObject *Cemst504ApplicationJSON
}
