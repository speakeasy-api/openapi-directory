/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Status } from "./status";
import { Trace } from "./trace";
import { Expose, Type } from "class-transformer";

/**
 * The overall result of the test's configuration analysis.
 */
export enum ReachabilityDetailsResultEnum {
  ResultUnspecified = "RESULT_UNSPECIFIED",
  Reachable = "REACHABLE",
  Unreachable = "UNREACHABLE",
  Ambiguous = "AMBIGUOUS",
  Undetermined = "UNDETERMINED",
}

/**
 * Results of the configuration analysis from the last run of the test.
 */
export class ReachabilityDetails extends SpeakeasyBase {
  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => Status)
  error?: Status;

  /**
   * The overall result of the test's configuration analysis.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  result?: ReachabilityDetailsResultEnum;

  /**
   * Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
   */
  @SpeakeasyMetadata({ elemType: Trace })
  @Expose({ name: "traces" })
  @Type(() => Trace)
  traces?: Trace[];

  /**
   * The time of the configuration analysis.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verifyTime" })
  verifyTime?: string;
}
