"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GrpcRouteHeaderMatchTypeEnum(str, Enum):
    r"""Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    EXACT = 'EXACT'
    REGULAR_EXPRESSION = 'REGULAR_EXPRESSION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GrpcRouteHeaderMatch:
    r"""A match against a collection of headers."""
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Required. The key of the header."""  
    type: Optional[GrpcRouteHeaderMatchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Required. The value of the header."""  
    