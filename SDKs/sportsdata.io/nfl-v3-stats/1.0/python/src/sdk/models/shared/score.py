"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import stadium as shared_stadium
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Score:
    
    attendance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attendance'), 'exclude': lambda f: f is None }})  
    away_rotation_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayRotationNumber'), 'exclude': lambda f: f is None }})  
    away_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayScore'), 'exclude': lambda f: f is None }})  
    away_score_overtime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayScoreOvertime'), 'exclude': lambda f: f is None }})  
    away_score_quarter1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayScoreQuarter1'), 'exclude': lambda f: f is None }})  
    away_score_quarter2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayScoreQuarter2'), 'exclude': lambda f: f is None }})  
    away_score_quarter3: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayScoreQuarter3'), 'exclude': lambda f: f is None }})  
    away_score_quarter4: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayScoreQuarter4'), 'exclude': lambda f: f is None }})  
    away_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeam'), 'exclude': lambda f: f is None }})  
    away_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamID'), 'exclude': lambda f: f is None }})  
    away_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    away_timeouts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTimeouts'), 'exclude': lambda f: f is None }})  
    canceled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Canceled'), 'exclude': lambda f: f is None }})  
    channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Channel'), 'exclude': lambda f: f is None }})  
    closed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Closed'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTime'), 'exclude': lambda f: f is None }})  
    date_time_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTimeUTC'), 'exclude': lambda f: f is None }})  
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Day'), 'exclude': lambda f: f is None }})  
    distance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Distance'), 'exclude': lambda f: f is None }})  
    down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Down'), 'exclude': lambda f: f is None }})  
    down_and_distance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DownAndDistance'), 'exclude': lambda f: f is None }})  
    forecast_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastDescription'), 'exclude': lambda f: f is None }})  
    forecast_temp_high: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTempHigh'), 'exclude': lambda f: f is None }})  
    forecast_temp_low: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTempLow'), 'exclude': lambda f: f is None }})  
    forecast_wind_chill: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastWindChill'), 'exclude': lambda f: f is None }})  
    forecast_wind_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastWindSpeed'), 'exclude': lambda f: f is None }})  
    game_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameEndDateTime'), 'exclude': lambda f: f is None }})  
    game_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameKey'), 'exclude': lambda f: f is None }})  
    geo_lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeoLat'), 'exclude': lambda f: f is None }})  
    geo_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeoLong'), 'exclude': lambda f: f is None }})  
    global_away_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalAwayTeamID'), 'exclude': lambda f: f is None }})  
    global_game_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalGameID'), 'exclude': lambda f: f is None }})  
    global_home_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalHomeTeamID'), 'exclude': lambda f: f is None }})  
    has1st_quarter_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Has1stQuarterStarted'), 'exclude': lambda f: f is None }})  
    has2nd_quarter_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Has2ndQuarterStarted'), 'exclude': lambda f: f is None }})  
    has3rd_quarter_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Has3rdQuarterStarted'), 'exclude': lambda f: f is None }})  
    has4th_quarter_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Has4thQuarterStarted'), 'exclude': lambda f: f is None }})  
    has_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasStarted'), 'exclude': lambda f: f is None }})  
    home_rotation_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeRotationNumber'), 'exclude': lambda f: f is None }})  
    home_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeScore'), 'exclude': lambda f: f is None }})  
    home_score_overtime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeScoreOvertime'), 'exclude': lambda f: f is None }})  
    home_score_quarter1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeScoreQuarter1'), 'exclude': lambda f: f is None }})  
    home_score_quarter2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeScoreQuarter2'), 'exclude': lambda f: f is None }})  
    home_score_quarter3: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeScoreQuarter3'), 'exclude': lambda f: f is None }})  
    home_score_quarter4: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeScoreQuarter4'), 'exclude': lambda f: f is None }})  
    home_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeam'), 'exclude': lambda f: f is None }})  
    home_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamID'), 'exclude': lambda f: f is None }})  
    home_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    home_timeouts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTimeouts'), 'exclude': lambda f: f is None }})  
    is_in_progress: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsInProgress'), 'exclude': lambda f: f is None }})  
    is_over: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsOver'), 'exclude': lambda f: f is None }})  
    is_overtime: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsOvertime'), 'exclude': lambda f: f is None }})  
    last_play: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastPlay'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdated'), 'exclude': lambda f: f is None }})  
    neutral_venue: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NeutralVenue'), 'exclude': lambda f: f is None }})  
    over_payout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverPayout'), 'exclude': lambda f: f is None }})  
    over_under: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverUnder'), 'exclude': lambda f: f is None }})  
    point_spread: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpread'), 'exclude': lambda f: f is None }})  
    point_spread_away_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpreadAwayTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    point_spread_home_team_money_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PointSpreadHomeTeamMoneyLine'), 'exclude': lambda f: f is None }})  
    possession: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Possession'), 'exclude': lambda f: f is None }})  
    quarter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quarter'), 'exclude': lambda f: f is None }})  
    quarter_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterDescription'), 'exclude': lambda f: f is None }})  
    red_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedZone'), 'exclude': lambda f: f is None }})  
    referee_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefereeID'), 'exclude': lambda f: f is None }})  
    score_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoreID'), 'exclude': lambda f: f is None }})  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Season'), 'exclude': lambda f: f is None }})  
    season_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeasonType'), 'exclude': lambda f: f is None }})  
    stadium_details: Optional[shared_stadium.Stadium] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StadiumDetails'), 'exclude': lambda f: f is None }})  
    stadium_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StadiumID'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    time_remaining: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRemaining'), 'exclude': lambda f: f is None }})  
    under_payout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnderPayout'), 'exclude': lambda f: f is None }})  
    week: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Week'), 'exclude': lambda f: f is None }})  
    yard_line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YardLine'), 'exclude': lambda f: f is None }})  
    yard_line_territory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YardLineTerritory'), 'exclude': lambda f: f is None }})  
    