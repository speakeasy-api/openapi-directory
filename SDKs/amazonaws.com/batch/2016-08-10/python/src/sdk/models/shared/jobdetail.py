"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import arraypropertiesdetail as shared_arraypropertiesdetail
from ..shared import attemptdetail as shared_attemptdetail
from ..shared import containerdetail as shared_containerdetail
from ..shared import eksattemptdetail as shared_eksattemptdetail
from ..shared import ekspropertiesdetail as shared_ekspropertiesdetail
from ..shared import jobdependency as shared_jobdependency
from ..shared import jobstatus_enum as shared_jobstatus_enum
from ..shared import jobtimeout as shared_jobtimeout
from ..shared import nodedetails as shared_nodedetails
from ..shared import nodeproperties as shared_nodeproperties
from ..shared import platformcapability_enum as shared_platformcapability_enum
from ..shared import retrystrategy as shared_retrystrategy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobDetail:
    r"""An object that represents an Batch job."""
    
    job_definition: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobDefinition') }})  
    job_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobId') }})  
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobName') }})  
    job_queue: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobQueue') }})  
    started_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedAt') }})  
    status: shared_jobstatus_enum.JobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    array_properties: Optional[shared_arraypropertiesdetail.ArrayPropertiesDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrayProperties'), 'exclude': lambda f: f is None }})  
    attempts: Optional[list[shared_attemptdetail.AttemptDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attempts'), 'exclude': lambda f: f is None }})  
    container: Optional[shared_containerdetail.ContainerDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('container'), 'exclude': lambda f: f is None }})  
    created_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'exclude': lambda f: f is None }})  
    depends_on: Optional[list[shared_jobdependency.JobDependency]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependsOn'), 'exclude': lambda f: f is None }})  
    eks_attempts: Optional[list[shared_eksattemptdetail.EksAttemptDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eksAttempts'), 'exclude': lambda f: f is None }})  
    eks_properties: Optional[shared_ekspropertiesdetail.EksPropertiesDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eksProperties'), 'exclude': lambda f: f is None }})  
    is_cancelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCancelled'), 'exclude': lambda f: f is None }})  
    is_terminated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTerminated'), 'exclude': lambda f: f is None }})  
    job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobArn'), 'exclude': lambda f: f is None }})  
    node_details: Optional[shared_nodedetails.NodeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeDetails'), 'exclude': lambda f: f is None }})  
    node_properties: Optional[shared_nodeproperties.NodeProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeProperties'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})  
    platform_capabilities: Optional[list[shared_platformcapability_enum.PlatformCapabilityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformCapabilities'), 'exclude': lambda f: f is None }})  
    propagate_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propagateTags'), 'exclude': lambda f: f is None }})  
    retry_strategy: Optional[shared_retrystrategy.RetryStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryStrategy'), 'exclude': lambda f: f is None }})  
    scheduling_priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingPriority'), 'exclude': lambda f: f is None }})  
    share_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareIdentifier'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusReason'), 'exclude': lambda f: f is None }})  
    stopped_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stoppedAt'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    timeout: Optional[shared_jobtimeout.JobTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})  
    