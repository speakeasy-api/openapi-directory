// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateClusterXAmzTargetEnum
type CreateClusterXAmzTargetEnum string

const (
	CreateClusterXAmzTargetEnumAwsieSnowballJobManagementServiceCreateCluster CreateClusterXAmzTargetEnum = "AWSIESnowballJobManagementService.CreateCluster"
)

func (e CreateClusterXAmzTargetEnum) ToPointer() *CreateClusterXAmzTargetEnum {
	return &e
}

func (e *CreateClusterXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSIESnowballJobManagementService.CreateCluster":
		*e = CreateClusterXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterXAmzTargetEnum: %v", v)
	}
}

type CreateClusterRequest struct {
	CreateClusterRequest shared.CreateClusterRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateClusterXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateClusterResponse struct {
	ContentType string
	// Success
	CreateClusterResult *shared.CreateClusterResult
	// Ec2RequestFailedException
	Ec2RequestFailedException interface{}
	// InvalidInputCombinationException
	InvalidInputCombinationException interface{}
	// InvalidResourceException
	InvalidResourceException interface{}
	// KMSRequestFailedException
	KMSRequestFailedException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
