/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class TermsOfService {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public TermsOfService(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get Terms of Service information for a legal entity
     * Returns Terms of Service information for a legal entity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse getLegalEntitiesIdTermsOfServiceAcceptanceInfos(org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosPathParams.class, baseUrl, "/legalEntities/{id}/termsOfServiceAcceptanceInfos", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse res = new org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse() {{
            getTermsOfServiceAcceptanceInfosResponse = null;
            serviceError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetTermsOfServiceAcceptanceInfosResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetTermsOfServiceAcceptanceInfosResponse.class);
                res.getTermsOfServiceAcceptanceInfosResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 422 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceError.class);
                res.serviceError = out;
            }
        }

        return res;
    }

    /**
     * Get Terms of Service status
     * Returns the required types of Terms of Service that need to be accepted by a legal entity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceStatusResponse getLegalEntitiesIdTermsOfServiceStatus(org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceStatusPathParams.class, baseUrl, "/legalEntities/{id}/termsOfServiceStatus", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceStatusResponse res = new org.openapis.openapi.models.operations.GetLegalEntitiesIdTermsOfServiceStatusResponse() {{
            calculateTermsOfServiceStatusResponse = null;
            serviceError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CalculateTermsOfServiceStatusResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CalculateTermsOfServiceStatusResponse.class);
                res.calculateTermsOfServiceStatusResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 422 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceError.class);
                res.serviceError = out;
            }
        }

        return res;
    }

    /**
     * Accept Terms of Service
     * Accepts Terms of Service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid(org.openapis.openapi.models.operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidPathParams.class, baseUrl, "/legalEntities/{id}/termsOfService/{termsofservicedocumentid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse res = new org.openapis.openapi.models.operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse() {{
            acceptTermsOfServiceResponse = null;
            serviceError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AcceptTermsOfServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AcceptTermsOfServiceResponse.class);
                res.acceptTermsOfServiceResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 422 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceError.class);
                res.serviceError = out;
            }
        }

        return res;
    }

    /**
     * Get Terms of Service document
     * Returns the Terms of Service document for a legal entity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostLegalEntitiesIdTermsOfServiceResponse postLegalEntitiesIdTermsOfService(org.openapis.openapi.models.operations.PostLegalEntitiesIdTermsOfServiceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostLegalEntitiesIdTermsOfServicePathParams.class, baseUrl, "/legalEntities/{id}/termsOfService", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostLegalEntitiesIdTermsOfServiceResponse res = new org.openapis.openapi.models.operations.PostLegalEntitiesIdTermsOfServiceResponse() {{
            getTermsOfServiceDocumentResponse = null;
            serviceError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetTermsOfServiceDocumentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetTermsOfServiceDocumentResponse.class);
                res.getTermsOfServiceDocumentResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 422 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceError.class);
                res.serviceError = out;
            }
        }

        return res;
    }
}