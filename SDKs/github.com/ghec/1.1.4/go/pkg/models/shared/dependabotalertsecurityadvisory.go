// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DependabotAlertSecurityAdvisoryCvss - Details for the advisory pertaining to the Common Vulnerability Scoring System.
type DependabotAlertSecurityAdvisoryCvss struct {
	// The overall CVSS score of the advisory.
	Score float64 `json:"score"`
	// The full CVSS vector string for the advisory.
	VectorString string `json:"vector_string"`
}

// DependabotAlertSecurityAdvisoryCwes - A CWE weakness assigned to the advisory.
type DependabotAlertSecurityAdvisoryCwes struct {
	// The unique CWE ID.
	CweID string `json:"cwe_id"`
	// The short, plain text name of the CWE.
	Name string `json:"name"`
}

// DependabotAlertSecurityAdvisoryIdentifiersTypeEnum - The type of advisory identifier.
type DependabotAlertSecurityAdvisoryIdentifiersTypeEnum string

const (
	DependabotAlertSecurityAdvisoryIdentifiersTypeEnumCve  DependabotAlertSecurityAdvisoryIdentifiersTypeEnum = "CVE"
	DependabotAlertSecurityAdvisoryIdentifiersTypeEnumGhsa DependabotAlertSecurityAdvisoryIdentifiersTypeEnum = "GHSA"
)

func (e DependabotAlertSecurityAdvisoryIdentifiersTypeEnum) ToPointer() *DependabotAlertSecurityAdvisoryIdentifiersTypeEnum {
	return &e
}

func (e *DependabotAlertSecurityAdvisoryIdentifiersTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CVE":
		fallthrough
	case "GHSA":
		*e = DependabotAlertSecurityAdvisoryIdentifiersTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertSecurityAdvisoryIdentifiersTypeEnum: %v", v)
	}
}

// DependabotAlertSecurityAdvisoryIdentifiers - An advisory identifier.
type DependabotAlertSecurityAdvisoryIdentifiers struct {
	// The type of advisory identifier.
	Type DependabotAlertSecurityAdvisoryIdentifiersTypeEnum `json:"type"`
	// The value of the advisory identifer.
	Value string `json:"value"`
}

// DependabotAlertSecurityAdvisoryReferences - A link to additional advisory information.
type DependabotAlertSecurityAdvisoryReferences struct {
	// The URL of the reference.
	URL string `json:"url"`
}

// DependabotAlertSecurityAdvisorySeverityEnum - The severity of the advisory.
type DependabotAlertSecurityAdvisorySeverityEnum string

const (
	DependabotAlertSecurityAdvisorySeverityEnumLow      DependabotAlertSecurityAdvisorySeverityEnum = "low"
	DependabotAlertSecurityAdvisorySeverityEnumMedium   DependabotAlertSecurityAdvisorySeverityEnum = "medium"
	DependabotAlertSecurityAdvisorySeverityEnumHigh     DependabotAlertSecurityAdvisorySeverityEnum = "high"
	DependabotAlertSecurityAdvisorySeverityEnumCritical DependabotAlertSecurityAdvisorySeverityEnum = "critical"
)

func (e DependabotAlertSecurityAdvisorySeverityEnum) ToPointer() *DependabotAlertSecurityAdvisorySeverityEnum {
	return &e
}

func (e *DependabotAlertSecurityAdvisorySeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		fallthrough
	case "critical":
		*e = DependabotAlertSecurityAdvisorySeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DependabotAlertSecurityAdvisorySeverityEnum: %v", v)
	}
}

// DependabotAlertSecurityAdvisory - Details for the GitHub Security Advisory.
type DependabotAlertSecurityAdvisory struct {
	// The unique CVE ID assigned to the advisory.
	CveID string `json:"cve_id"`
	// Details for the advisory pertaining to the Common Vulnerability Scoring System.
	Cvss DependabotAlertSecurityAdvisoryCvss `json:"cvss"`
	// Details for the advisory pertaining to Common Weakness Enumeration.
	Cwes []DependabotAlertSecurityAdvisoryCwes `json:"cwes"`
	// A long-form Markdown-supported description of the advisory.
	Description string `json:"description"`
	// The unique GitHub Security Advisory ID assigned to the advisory.
	GhsaID string `json:"ghsa_id"`
	// Values that identify this advisory among security information sources.
	Identifiers []DependabotAlertSecurityAdvisoryIdentifiers `json:"identifiers"`
	// The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	PublishedAt time.Time `json:"published_at"`
	// Links to additional advisory information.
	References []DependabotAlertSecurityAdvisoryReferences `json:"references"`
	// The severity of the advisory.
	Severity DependabotAlertSecurityAdvisorySeverityEnum `json:"severity"`
	// A short, plain text summary of the advisory.
	Summary string `json:"summary"`
	// The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt time.Time `json:"updated_at"`
	// Vulnerable version range information for the advisory.
	Vulnerabilities []DependabotAlertSecurityVulnerability `json:"vulnerabilities"`
	// The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	WithdrawnAt time.Time `json:"withdrawn_at"`
}
