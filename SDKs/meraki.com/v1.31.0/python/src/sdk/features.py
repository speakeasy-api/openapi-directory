"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Features:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_organization_early_access_features_opt_in(self, request: operations.CreateOrganizationEarlyAccessFeaturesOptInRequest) -> operations.CreateOrganizationEarlyAccessFeaturesOptInResponse:
        r"""Create a new early access feature opt-in for an organization
        Create a new early access feature opt-in for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationEarlyAccessFeaturesOptInRequest, base_url, '/organizations/{organizationId}/earlyAccess/features/optIns', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationEarlyAccessFeaturesOptInResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_early_access_features_opt_in_200_application_json_object = out

        return res

    def delete_organization_early_access_features_opt_in(self, request: operations.DeleteOrganizationEarlyAccessFeaturesOptInRequest) -> operations.DeleteOrganizationEarlyAccessFeaturesOptInResponse:
        r"""Delete an early access feature opt-in
        Delete an early access feature opt-in
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationEarlyAccessFeaturesOptInRequest, base_url, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationEarlyAccessFeaturesOptInResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_organization_early_access_features(self, request: operations.GetOrganizationEarlyAccessFeaturesRequest) -> operations.GetOrganizationEarlyAccessFeaturesResponse:
        r"""List the available early access features for organization
        List the available early access features for organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationEarlyAccessFeaturesRequest, base_url, '/organizations/{organizationId}/earlyAccess/features', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationEarlyAccessFeaturesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_early_access_features_200_application_json_objects = out

        return res

    def get_organization_early_access_features_opt_in(self, request: operations.GetOrganizationEarlyAccessFeaturesOptInRequest) -> operations.GetOrganizationEarlyAccessFeaturesOptInResponse:
        r"""Show an early access feature opt-in for an organization
        Show an early access feature opt-in for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationEarlyAccessFeaturesOptInRequest, base_url, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationEarlyAccessFeaturesOptInResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_early_access_features_opt_in_200_application_json_object = out

        return res

    def get_organization_early_access_features_opt_ins(self, request: operations.GetOrganizationEarlyAccessFeaturesOptInsRequest) -> operations.GetOrganizationEarlyAccessFeaturesOptInsResponse:
        r"""List the early access feature opt-ins for an organization
        List the early access feature opt-ins for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationEarlyAccessFeaturesOptInsRequest, base_url, '/organizations/{organizationId}/earlyAccess/features/optIns', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationEarlyAccessFeaturesOptInsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_early_access_features_opt_ins_200_application_json_objects = out

        return res

    def update_organization_early_access_features_opt_in(self, request: operations.UpdateOrganizationEarlyAccessFeaturesOptInRequest) -> operations.UpdateOrganizationEarlyAccessFeaturesOptInResponse:
        r"""Update an early access feature opt-in for an organization
        Update an early access feature opt-in for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationEarlyAccessFeaturesOptInRequest, base_url, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationEarlyAccessFeaturesOptInResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_organization_early_access_features_opt_in_200_application_json_object = out

        return res

    