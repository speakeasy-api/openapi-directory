// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCertificateXAmzTargetEnum
type CreateCertificateXAmzTargetEnum string

const (
	CreateCertificateXAmzTargetEnumLightsail20161128CreateCertificate CreateCertificateXAmzTargetEnum = "Lightsail_20161128.CreateCertificate"
)

func (e CreateCertificateXAmzTargetEnum) ToPointer() *CreateCertificateXAmzTargetEnum {
	return &e
}

func (e *CreateCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Lightsail_20161128.CreateCertificate":
		*e = CreateCertificateXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCertificateXAmzTargetEnum: %v", v)
	}
}

type CreateCertificateRequest struct {
	CreateCertificateRequest shared.CreateCertificateRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreateCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateCertificateResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	CreateCertificateResult *shared.CreateCertificateResult
	// InvalidInputException
	InvalidInputException interface{}
	// NotFoundException
	NotFoundException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// UnauthenticatedException
	UnauthenticatedException interface{}
}
