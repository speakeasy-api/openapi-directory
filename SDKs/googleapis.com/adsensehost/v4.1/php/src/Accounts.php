<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get information about one of the ad clients in the specified publisher's AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetResponse
     */
	public function adsensehostAccountsAdclientsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adClient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdClient', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all hosted ad clients in the specified hosted account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListResponse
     */
	public function adsensehostAccountsAdclientsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdclientsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adClients = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdClients', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the specified ad unit from the specified publisher AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteResponse
     */
	public function adsensehostAccountsAdunitsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the specified host ad unit in this AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetResponse
     */
	public function adsensehostAccountsAdunitsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get ad code for the specified ad unit, attaching the specified host custom channels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeResponse
     */
	public function adsensehostAccountsAdunitsGetAdCode(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsGetAdCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert the supplied ad unit into the specified publisher AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertResponse
     */
	public function adsensehostAccountsAdunitsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "adUnit", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all ad units in the specified publisher's AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListResponse
     */
	public function adsensehostAccountsAdunitsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnits = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnits', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchResponse
     */
	public function adsensehostAccountsAdunitsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "adUnit", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the supplied ad unit in the specified publisher AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateResponse
     */
	public function adsensehostAccountsAdunitsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "adUnit", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsAdunitsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about the selected associated AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetResponse
     */
	public function adsensehostAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List hosted accounts associated with this AdSense account by ad client id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListResponse
     */
	public function adsensehostAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Accounts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateResponse
     */
	public function adsensehostAccountsReportsGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/reports', \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsensehostAccountsReportsGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
}