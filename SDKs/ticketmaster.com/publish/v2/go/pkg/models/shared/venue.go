// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VenueTypeEnum - Type of the entity
type VenueTypeEnum string

const (
	VenueTypeEnumEvent      VenueTypeEnum = "event"
	VenueTypeEnumVenue      VenueTypeEnum = "venue"
	VenueTypeEnumAttraction VenueTypeEnum = "attraction"
)

func (e *VenueTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "event":
		fallthrough
	case "venue":
		fallthrough
	case "attraction":
		*e = VenueTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VenueTypeEnum: %s", s)
	}
}

// Venue - Venue
type Venue struct {
	// Venue accessible seating details - multi-lingual fields
	AccessibleSeatingDetails map[string]string `json:"accessibleSeatingDetails,omitempty"`
	// Indicate if the entity is active, inactive entity won't appear in Discovery API
	Active *bool `json:"active,omitempty"`
	// Additional informations of the entity - multi-lingual fields
	AdditionalInfos map[string]string `json:"additionalInfos,omitempty"`
	// Address
	Address *Address `json:"address,omitempty"`
	// Venue box office information
	BoxOfficeInfo *VenueBoxOfficeInfo `json:"boxOfficeInfo,omitempty"`
	// City
	City *City `json:"city,omitempty"`
	// Country
	Country *Country `json:"country,omitempty"`
	// Default currency of ticket prices for events in this venue
	Currency *string `json:"currency,omitempty"`
	// Descriptions of the entity - multi-lingual fields
	Descriptions map[string]string `json:"descriptions,omitempty"`
	// True if the entity is dicoverable in discovery API
	Discoverable *bool    `json:"discoverable,omitempty"`
	Distance     *float64 `json:"distance,omitempty"`
	// The list of associated DMAs (Designated Market Areas) of the venue
	Dma []Dma `json:"dma,omitempty"`
	// Venue general information
	GeneralInfo *VenueGeneralInfo `json:"generalInfo,omitempty"`
	// Images of the entity
	Images []Image `json:"images,omitempty"`
	// Location
	Location *Location `json:"location,omitempty"`
	// Markets of the venue
	Markets []Market `json:"markets,omitempty"`
	// Names of the entity - multi-lingual fields
	Names map[string]string `json:"names,omitempty"`
	// Venue parking info - multi-lingual fields
	ParkingDetails map[string]string `json:"parkingDetails,omitempty"`
	// Postal code / zipcode of the venue
	PostalCode *string `json:"postalCode,omitempty"`
	// References of this entity in an other system. Reference is the exact same entity
	References map[string]string `json:"references,omitempty"`
	// Relationships on the entity, like if the entity is a duplicate of another one
	Relationships []map[string]interface{} `json:"relationships,omitempty"`
	// Social networks data
	Social *Social `json:"social,omitempty"`
	// Source
	Source *Source `json:"source,omitempty"`
	// State
	State *State `json:"state,omitempty"`
	// Indicate if this is a test entity, by default test entities won't appear in discovery API
	Test *bool `json:"test,omitempty"`
	// Timezone of the venue
	Timezone *string `json:"timezone,omitempty"`
	// Type of the entity
	Type  VenueTypeEnum `json:"type"`
	Units *string       `json:"units,omitempty"`
	// URL of a web site detail page of the entity
	URL *string `json:"url,omitempty"`
	// Version of the entity. Version is to avoid updated an entity with an older version
	Version *int64 `json:"version,omitempty"`
}
