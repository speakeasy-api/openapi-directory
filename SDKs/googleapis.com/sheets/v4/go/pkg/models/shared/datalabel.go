// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataLabelPlacementEnum - The placement of the data label relative to the labeled data.
type DataLabelPlacementEnum string

const (
	DataLabelPlacementEnumDataLabelPlacementUnspecified DataLabelPlacementEnum = "DATA_LABEL_PLACEMENT_UNSPECIFIED"
	DataLabelPlacementEnumCenter                        DataLabelPlacementEnum = "CENTER"
	DataLabelPlacementEnumLeft                          DataLabelPlacementEnum = "LEFT"
	DataLabelPlacementEnumRight                         DataLabelPlacementEnum = "RIGHT"
	DataLabelPlacementEnumAbove                         DataLabelPlacementEnum = "ABOVE"
	DataLabelPlacementEnumBelow                         DataLabelPlacementEnum = "BELOW"
	DataLabelPlacementEnumInsideEnd                     DataLabelPlacementEnum = "INSIDE_END"
	DataLabelPlacementEnumInsideBase                    DataLabelPlacementEnum = "INSIDE_BASE"
	DataLabelPlacementEnumOutsideEnd                    DataLabelPlacementEnum = "OUTSIDE_END"
)

func (e *DataLabelPlacementEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA_LABEL_PLACEMENT_UNSPECIFIED":
		fallthrough
	case "CENTER":
		fallthrough
	case "LEFT":
		fallthrough
	case "RIGHT":
		fallthrough
	case "ABOVE":
		fallthrough
	case "BELOW":
		fallthrough
	case "INSIDE_END":
		fallthrough
	case "INSIDE_BASE":
		fallthrough
	case "OUTSIDE_END":
		*e = DataLabelPlacementEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataLabelPlacementEnum: %s", s)
	}
}

// DataLabelTypeEnum - The type of the data label.
type DataLabelTypeEnum string

const (
	DataLabelTypeEnumDataLabelTypeUnspecified DataLabelTypeEnum = "DATA_LABEL_TYPE_UNSPECIFIED"
	DataLabelTypeEnumNone                     DataLabelTypeEnum = "NONE"
	DataLabelTypeEnumData                     DataLabelTypeEnum = "DATA"
	DataLabelTypeEnumCustom                   DataLabelTypeEnum = "CUSTOM"
)

func (e *DataLabelTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA_LABEL_TYPE_UNSPECIFIED":
		fallthrough
	case "NONE":
		fallthrough
	case "DATA":
		fallthrough
	case "CUSTOM":
		*e = DataLabelTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataLabelTypeEnum: %s", s)
	}
}

// DataLabel - Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
type DataLabel struct {
	// The data included in a domain or series.
	CustomLabelData *ChartData `json:"customLabelData,omitempty"`
	// The placement of the data label relative to the labeled data.
	Placement *DataLabelPlacementEnum `json:"placement,omitempty"`
	// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
	TextFormat *TextFormat `json:"textFormat,omitempty"`
	// The type of the data label.
	Type *DataLabelTypeEnum `json:"type,omitempty"`
}
