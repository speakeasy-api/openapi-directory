/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateExecutionServerList = ["https://studio.twilio.com"] as const;

export class CreateExecutionSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateExecutionCreateExecutionRequest extends SpeakeasyBase {
  /**
   * The Twilio phone number to send messages or initiate calls from during the Flow's Execution. Available as variable `{{flow.channel.address}}`. For SMS, this can also be a Messaging Service SID.
   */
  @SpeakeasyMetadata({ data: "form, name=From" })
  from: string;

  /**
   * JSON data that will be added to the Flow's context and that can be accessed as variables inside your Flow. For example, if you pass in `Parameters={"name":"Zeke"}`, a widget in your Flow can reference the variable `{{flow.data.name}}`, which returns "Zeke". Note: the JSON value must explicitly be passed as a string, not as a hash object. Depending on your particular HTTP library, you may need to add quotes or URL encode the JSON string.
   */
  @SpeakeasyMetadata({ data: "form, name=Parameters" })
  parameters?: any;

  /**
   * The Contact phone number to start a Studio Flow Execution, available as variable `{{contact.channel.address}}`.
   */
  @SpeakeasyMetadata({ data: "form, name=To" })
  to: string;
}

export class CreateExecutionRequest extends SpeakeasyBase {
  /**
   * The SID of the Excecution's Flow.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=FlowSid",
  })
  flowSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateExecutionCreateExecutionRequest;
}

export class CreateExecutionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  studioV2FlowExecution?: shared.StudioV2FlowExecution;
}
