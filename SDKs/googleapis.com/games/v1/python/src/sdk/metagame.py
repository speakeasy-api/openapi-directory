"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Metagame:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def games_metagame_get_metagame_config(self, request: operations.GamesMetagameGetMetagameConfigRequest, security: operations.GamesMetagameGetMetagameConfigSecurity) -> operations.GamesMetagameGetMetagameConfigResponse:
        r"""Return the metagame configuration data for the calling application."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1/metagameConfig'
        
        query_params = utils.get_query_params(operations.GamesMetagameGetMetagameConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesMetagameGetMetagameConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MetagameConfig])
                res.metagame_config = out

        return res

    def games_metagame_list_categories_by_player(self, request: operations.GamesMetagameListCategoriesByPlayerRequest, security: operations.GamesMetagameListCategoriesByPlayerSecurity) -> operations.GamesMetagameListCategoriesByPlayerResponse:
        r"""List play data aggregated per category for the player corresponding to `playerId`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesMetagameListCategoriesByPlayerRequest, base_url, '/games/v1/players/{playerId}/categories/{collection}', request)
        
        query_params = utils.get_query_params(operations.GamesMetagameListCategoriesByPlayerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesMetagameListCategoriesByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CategoryListResponse])
                res.category_list_response = out

        return res

    