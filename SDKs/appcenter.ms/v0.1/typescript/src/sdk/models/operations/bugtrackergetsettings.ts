/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BugtrackerGetSettingsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class BugtrackerGetSettingsRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

/**
 * The status code return by the API. It can be 400 or 404 or 409 or 500.
 */
export enum BugtrackerGetSettingsDefaultApplicationJSONCodeEnum {
  FourHundred = "400",
  FourHundredAndFour = "404",
  FourHundredAndNine = "409",
  FiveHundred = "500",
}

/**
 * Generic result for any alerting API operation
 */
export class BugtrackerGetSettingsDefaultApplicationJSON extends SpeakeasyBase {
  /**
   * The status code return by the API. It can be 400 or 404 or 409 or 500.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: BugtrackerGetSettingsDefaultApplicationJSONCodeEnum;

  /**
   * The reason for the request failed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * Unique request identifier for tracking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId: string;
}

/**
 * Alerting EventTypes enum
 */
export enum BugtrackerGetSettings200ApplicationJSONEventTypesEnum {
  NewCrashGroupCreated = "newCrashGroupCreated",
  NewAppReleased = "newAppReleased",
}

/**
 * type of bugtracker
 */
export enum BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum {
  Github = "github",
  Vsts = "vsts",
  Jira = "jira",
}

/**
 * Bugtracker specific settings
 */
export class BugtrackerGetSettings200ApplicationJSONSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "callback_url" })
  callbackUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "owner_name" })
  ownerName: string;

  /**
   * type of bugtracker
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum;
}

/**
 * bugtracker state
 */
export enum BugtrackerGetSettings200ApplicationJSONStateEnum {
  Enabled = "enabled",
  Disabled = "disabled",
  Unauthorized = "unauthorized",
}

/**
 * type of bugtracker
 */
export enum BugtrackerGetSettings200ApplicationJSONTypeEnum {
  Github = "github",
  Vsts = "vsts",
  Jira = "jira",
}

/**
 * Alerting bugtracker resource
 */
export class BugtrackerGetSettings200ApplicationJSON extends SpeakeasyBase {
  /**
   * Event types enabled for bugtracker
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_types" })
  eventTypes?: BugtrackerGetSettings200ApplicationJSONEventTypesEnum[];

  /**
   * Bugtracker specific settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  @Type(() => BugtrackerGetSettings200ApplicationJSONSettings)
  settings?: BugtrackerGetSettings200ApplicationJSONSettings;

  /**
   * bugtracker state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: BugtrackerGetSettings200ApplicationJSONStateEnum;

  /**
   * ID of OAuth token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "token_id" })
  tokenId?: string;

  /**
   * type of bugtracker
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: BugtrackerGetSettings200ApplicationJSONTypeEnum;
}

export class BugtrackerGetSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  bugtrackerGetSettings200ApplicationJSONObject?: BugtrackerGetSettings200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  bugtrackerGetSettingsDefaultApplicationJSONObject?: BugtrackerGetSettingsDefaultApplicationJSON;
}
