/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AmazonManagedKafkaEventSourceConfig } from "./amazonmanagedkafkaeventsourceconfig";
import { DestinationConfig } from "./destinationconfig";
import { DocumentDBEventSourceConfig } from "./documentdbeventsourceconfig";
import { EventSourcePositionEnum } from "./eventsourcepositionenum";
import { FilterCriteria } from "./filtercriteria";
import { FunctionResponseTypeEnum } from "./functionresponsetypeenum";
import { ScalingConfig } from "./scalingconfig";
import { SelfManagedEventSource } from "./selfmanagedeventsource";
import { SelfManagedKafkaEventSourceConfig } from "./selfmanagedkafkaeventsourceconfig";
import { SourceAccessConfiguration } from "./sourceaccessconfiguration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A mapping between an Amazon Web Services resource and a Lambda function. For details, see <a>CreateEventSourceMapping</a>.
 */
export class EventSourceMappingConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AmazonManagedKafkaEventSourceConfig" })
  @Type(() => AmazonManagedKafkaEventSourceConfig)
  amazonManagedKafkaEventSourceConfig?: AmazonManagedKafkaEventSourceConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "BatchSize" })
  batchSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "BisectBatchOnFunctionError" })
  bisectBatchOnFunctionError?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "DestinationConfig" })
  @Type(() => DestinationConfig)
  destinationConfig?: DestinationConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentDBEventSourceConfig" })
  @Type(() => DocumentDBEventSourceConfig)
  documentDBEventSourceConfig?: DocumentDBEventSourceConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "EventSourceArn" })
  eventSourceArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FilterCriteria" })
  @Type(() => FilterCriteria)
  filterCriteria?: FilterCriteria;

  @SpeakeasyMetadata()
  @Expose({ name: "FunctionArn" })
  functionArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FunctionResponseTypes" })
  functionResponseTypes?: FunctionResponseTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "LastModified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModified?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastProcessingResult" })
  lastProcessingResult?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumBatchingWindowInSeconds" })
  maximumBatchingWindowInSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumRecordAgeInSeconds" })
  maximumRecordAgeInSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumRetryAttempts" })
  maximumRetryAttempts?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ParallelizationFactor" })
  parallelizationFactor?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Queues" })
  queues?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ScalingConfig" })
  @Type(() => ScalingConfig)
  scalingConfig?: ScalingConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "SelfManagedEventSource" })
  @Type(() => SelfManagedEventSource)
  selfManagedEventSource?: SelfManagedEventSource;

  @SpeakeasyMetadata()
  @Expose({ name: "SelfManagedKafkaEventSourceConfig" })
  @Type(() => SelfManagedKafkaEventSourceConfig)
  selfManagedKafkaEventSourceConfig?: SelfManagedKafkaEventSourceConfig;

  @SpeakeasyMetadata({ elemType: SourceAccessConfiguration })
  @Expose({ name: "SourceAccessConfigurations" })
  @Type(() => SourceAccessConfiguration)
  sourceAccessConfigurations?: SourceAccessConfiguration[];

  @SpeakeasyMetadata()
  @Expose({ name: "StartingPosition" })
  startingPosition?: EventSourcePositionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "StartingPositionTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startingPositionTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StateTransitionReason" })
  stateTransitionReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Topics" })
  topics?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "TumblingWindowInSeconds" })
  tumblingWindowInSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "UUID" })
  uuid?: string;
}
