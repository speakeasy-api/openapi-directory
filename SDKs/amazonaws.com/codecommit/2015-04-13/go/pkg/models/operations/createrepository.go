// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateRepositoryXAmzTargetEnum
type CreateRepositoryXAmzTargetEnum string

const (
	CreateRepositoryXAmzTargetEnumCodeCommit20150413CreateRepository CreateRepositoryXAmzTargetEnum = "CodeCommit_20150413.CreateRepository"
)

func (e *CreateRepositoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.CreateRepository":
		*e = CreateRepositoryXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRepositoryXAmzTargetEnum: %s", s)
	}
}

type CreateRepositoryHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateRepositoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateRepositoryRequest struct {
	Headers CreateRepositoryHeaders
	Request shared.CreateRepositoryInput `request:"mediaType=application/json"`
}

type CreateRepositoryResponse struct {
	ContentType string
	// Success
	CreateRepositoryOutput *shared.CreateRepositoryOutput
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidRepositoryDescriptionException
	InvalidRepositoryDescriptionException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// InvalidSystemTagUsageException
	InvalidSystemTagUsageException interface{}
	// InvalidTagsMapException
	InvalidTagsMapException interface{}
	// RepositoryLimitExceededException
	RepositoryLimitExceededException interface{}
	// RepositoryNameExistsException
	RepositoryNameExistsException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	// TagPolicyException
	TagPolicyException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
