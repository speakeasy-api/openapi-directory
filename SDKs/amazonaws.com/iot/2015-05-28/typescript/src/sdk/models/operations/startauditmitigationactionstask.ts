/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
 */
export class StartAuditMitigationActionsTaskRequestBodyTarget extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "auditCheckToReasonCodeFilter" })
  auditCheckToReasonCodeFilter?: Record<string, string[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "auditTaskId" })
  auditTaskId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "findingIds" })
  findingIds?: string[];
}

export class StartAuditMitigationActionsTaskRequestBody extends SpeakeasyBase {
  /**
   * For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auditCheckToActionsMapping" })
  auditCheckToActionsMapping: Record<string, string[]>;

  /**
   * Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken: string;

  /**
   * Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => StartAuditMitigationActionsTaskRequestBodyTarget)
  target: StartAuditMitigationActionsTaskRequestBodyTarget;
}

export class StartAuditMitigationActionsTaskRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartAuditMitigationActionsTaskRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=taskId",
  })
  taskId: string;
}

export class StartAuditMitigationActionsTaskResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startAuditMitigationActionsTaskResponse?: shared.StartAuditMitigationActionsTaskResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TaskAlreadyExistsException
   */
  @SpeakeasyMetadata()
  taskAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
