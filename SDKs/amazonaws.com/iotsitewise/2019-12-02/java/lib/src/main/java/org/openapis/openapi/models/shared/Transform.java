/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transform - &lt;p&gt;Contains an asset transform property. A transform is a one-to-one mapping of a property's data points from one form to another. For example, you can use a transform to convert a Celsius data stream to Fahrenheit by applying the transformation expression to each data point of the Celsius stream. A transform can only have a data type of &lt;code&gt;DOUBLE&lt;/code&gt; and consume properties with data types of &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;DOUBLE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html#transforms"&gt;Transforms&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.&lt;/p&gt;
 */
public class Transform {
    @JsonProperty("expression")
    public String expression;
    public Transform withExpression(String expression) {
        this.expression = expression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processingConfig")
    public TransformProcessingConfig processingConfig;
    public Transform withProcessingConfig(TransformProcessingConfig processingConfig) {
        this.processingConfig = processingConfig;
        return this;
    }
    
    @JsonProperty("variables")
    public ExpressionVariable[] variables;
    public Transform withVariables(ExpressionVariable[] variables) {
        this.variables = variables;
        return this;
    }
    
}
