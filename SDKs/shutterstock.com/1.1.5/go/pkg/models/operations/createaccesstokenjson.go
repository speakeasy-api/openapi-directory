// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAccessTokenApplicationJSONGrantTypeEnum - Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
type CreateAccessTokenApplicationJSONGrantTypeEnum string

const (
	CreateAccessTokenApplicationJSONGrantTypeEnumAuthorizationCode CreateAccessTokenApplicationJSONGrantTypeEnum = "authorization_code"
	CreateAccessTokenApplicationJSONGrantTypeEnumClientCredentials CreateAccessTokenApplicationJSONGrantTypeEnum = "client_credentials"
	CreateAccessTokenApplicationJSONGrantTypeEnumRefreshToken      CreateAccessTokenApplicationJSONGrantTypeEnum = "refresh_token"
)

func (e *CreateAccessTokenApplicationJSONGrantTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "authorization_code":
		fallthrough
	case "client_credentials":
		fallthrough
	case "refresh_token":
		*e = CreateAccessTokenApplicationJSONGrantTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessTokenApplicationJSONGrantTypeEnum: %s", s)
	}
}

// CreateAccessTokenApplicationJSONRealmEnum - User type to be authorized (usually 'customer')
type CreateAccessTokenApplicationJSONRealmEnum string

const (
	CreateAccessTokenApplicationJSONRealmEnumCustomer    CreateAccessTokenApplicationJSONRealmEnum = "customer"
	CreateAccessTokenApplicationJSONRealmEnumContributor CreateAccessTokenApplicationJSONRealmEnum = "contributor"
)

func (e *CreateAccessTokenApplicationJSONRealmEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "contributor":
		*e = CreateAccessTokenApplicationJSONRealmEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessTokenApplicationJSONRealmEnum: %s", s)
	}
}

type CreateAccessTokenApplicationJSON struct {
	// Client ID (Consumer Key) of your application
	ClientID string `json:"client_id"`
	// Client Secret (Consumer Secret) of your application
	ClientSecret *string `json:"client_secret,omitempty"`
	// Response code from the /oauth/authorize flow; required if grant_type=authorization_code
	Code *string `json:"code,omitempty"`
	// Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
	Expires *bool `json:"expires,omitempty"`
	// Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
	GrantType CreateAccessTokenApplicationJSONGrantTypeEnum `json:"grant_type"`
	// User type to be authorized (usually 'customer')
	Realm *CreateAccessTokenApplicationJSONRealmEnum `json:"realm,omitempty"`
	// Pass this along with grant_type=refresh_token to get a fresh access token
	RefreshToken *string `json:"refresh_token,omitempty"`
}

type CreateAccessTokenJSONRequest struct {
	Request *CreateAccessTokenApplicationJSON `request:"mediaType=application/json"`
}

type CreateAccessTokenJSONResponse struct {
	ContentType string
	// OK
	OauthAccessTokenResponse *shared.OauthAccessTokenResponse
	StatusCode               int
	RawResponse              *http.Response
}
