<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CustomVitalType - OK
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CustomVitalType
{
    /**
     * If `data_type` is `single_sel`, this is the array of values in the select's dropdown.
     * 
     * @var ?array<string> $allowedValues
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowed_values')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $allowedValues = null;
    
    /**
     * Indicates that the object has been soft-deleted and should not be used
     * 
     * @var ?bool $archived
     */
	#[\JMS\Serializer\Annotation\SerializedName('archived')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $archived = null;
    
    /**
     * One of `text`, `number`, or `single_sel`
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CustomVitalTypeDataTypeEnum $dataType
     */
	#[\JMS\Serializer\Annotation\SerializedName('data_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CustomVitalTypeDataTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CustomVitalTypeDataTypeEnum $dataType = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * ID of the doctor who created the custom vital
     * 
     * @var ?string $doctor
     */
	#[\JMS\Serializer\Annotation\SerializedName('doctor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $doctor = null;
    
    /**
     * If `is_fraction_field` is true, this is the character separating the numerator and denominator
     * 
     * @var ?string $fractionDelimiter
     */
	#[\JMS\Serializer\Annotation\SerializedName('fraction_delimiter')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fractionDelimiter = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $id = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('is_fraction_field')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isFractionField = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('unit')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $unit = null;
    
	public function __construct()
	{
		$this->allowedValues = null;
		$this->archived = null;
		$this->dataType = null;
		$this->description = null;
		$this->doctor = null;
		$this->fractionDelimiter = null;
		$this->id = null;
		$this->isFractionField = null;
		$this->name = null;
		$this->unit = null;
	}
}
