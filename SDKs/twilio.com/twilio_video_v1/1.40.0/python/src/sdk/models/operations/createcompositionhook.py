"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import composition_hook_enum_format_enum as shared_composition_hook_enum_format_enum
from ..shared import video_v1_composition_hook as shared_video_v1_composition_hook
from enum import Enum
from typing import Any, Optional

CREATE_COMPOSITION_HOOK_SERVERS = [
	"https://video.twilio.com",
]


@dataclasses.dataclass
class CreateCompositionHookSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateCompositionHookCreateCompositionHookRequestStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateCompositionHookCreateCompositionHookRequest:
    
    friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account."""  
    audio_sources: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AudioSources' }})
    r"""An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`."""  
    audio_sources_excluded: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AudioSourcesExcluded' }})
    r"""An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Enabled' }})
    r"""Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook will never be triggered."""  
    format: Optional[shared_composition_hook_enum_format_enum.CompositionHookEnumFormatEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Format' }})  
    resolution: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Resolution' }})
    r"""A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.
    The string's format is `{width}x{height}` where: 
    
    * 16 <= `{width}` <= 1280
    * 16 <= `{height}` <= 1280
    * `{width}` * `{height}` <= 921,600
    
    Typical values are: 
    
    * HD = `1280x720`
    * PAL = `1024x576`
    * VGA = `640x480`
    * CIF = `320x240`
    
    Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
    """  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallback' }})
    r"""The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched."""  
    status_callback_method: Optional[CreateCompositionHookCreateCompositionHookRequestStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackMethod' }})
    r"""The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`."""  
    trim: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Trim' }})
    r"""Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info."""  
    video_layout: Optional[Any] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VideoLayout' }})
    r"""An object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info."""  
    

@dataclasses.dataclass
class CreateCompositionHookResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    video_v1_composition_hook: Optional[shared_video_v1_composition_hook.VideoV1CompositionHook] = dataclasses.field(default=None)
    r"""Created"""  
    