// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AppPermissionsActionsEnum - The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
type AppPermissionsActionsEnum string

const (
	AppPermissionsActionsEnumRead  AppPermissionsActionsEnum = "read"
	AppPermissionsActionsEnumWrite AppPermissionsActionsEnum = "write"
)

func (e *AppPermissionsActionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsActionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsActionsEnum: %s", s)
	}
}

// AppPermissionsAdministrationEnum - The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
type AppPermissionsAdministrationEnum string

const (
	AppPermissionsAdministrationEnumRead  AppPermissionsAdministrationEnum = "read"
	AppPermissionsAdministrationEnumWrite AppPermissionsAdministrationEnum = "write"
)

func (e *AppPermissionsAdministrationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsAdministrationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsAdministrationEnum: %s", s)
	}
}

// AppPermissionsChecksEnum - The level of permission to grant the access token for checks on code.
type AppPermissionsChecksEnum string

const (
	AppPermissionsChecksEnumRead  AppPermissionsChecksEnum = "read"
	AppPermissionsChecksEnumWrite AppPermissionsChecksEnum = "write"
)

func (e *AppPermissionsChecksEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsChecksEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsChecksEnum: %s", s)
	}
}

// AppPermissionsContentsEnum - The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
type AppPermissionsContentsEnum string

const (
	AppPermissionsContentsEnumRead  AppPermissionsContentsEnum = "read"
	AppPermissionsContentsEnumWrite AppPermissionsContentsEnum = "write"
)

func (e *AppPermissionsContentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsContentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsContentsEnum: %s", s)
	}
}

// AppPermissionsDeploymentsEnum - The level of permission to grant the access token for deployments and deployment statuses.
type AppPermissionsDeploymentsEnum string

const (
	AppPermissionsDeploymentsEnumRead  AppPermissionsDeploymentsEnum = "read"
	AppPermissionsDeploymentsEnumWrite AppPermissionsDeploymentsEnum = "write"
)

func (e *AppPermissionsDeploymentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsDeploymentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsDeploymentsEnum: %s", s)
	}
}

// AppPermissionsEnvironmentsEnum - The level of permission to grant the access token for managing repository environments.
type AppPermissionsEnvironmentsEnum string

const (
	AppPermissionsEnvironmentsEnumRead  AppPermissionsEnvironmentsEnum = "read"
	AppPermissionsEnvironmentsEnumWrite AppPermissionsEnvironmentsEnum = "write"
)

func (e *AppPermissionsEnvironmentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsEnvironmentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsEnvironmentsEnum: %s", s)
	}
}

// AppPermissionsIssuesEnum - The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
type AppPermissionsIssuesEnum string

const (
	AppPermissionsIssuesEnumRead  AppPermissionsIssuesEnum = "read"
	AppPermissionsIssuesEnumWrite AppPermissionsIssuesEnum = "write"
)

func (e *AppPermissionsIssuesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsIssuesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsIssuesEnum: %s", s)
	}
}

// AppPermissionsMembersEnum - The level of permission to grant the access token for organization teams and members.
type AppPermissionsMembersEnum string

const (
	AppPermissionsMembersEnumRead  AppPermissionsMembersEnum = "read"
	AppPermissionsMembersEnumWrite AppPermissionsMembersEnum = "write"
)

func (e *AppPermissionsMembersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsMembersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsMembersEnum: %s", s)
	}
}

// AppPermissionsMetadataEnum - The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
type AppPermissionsMetadataEnum string

const (
	AppPermissionsMetadataEnumRead  AppPermissionsMetadataEnum = "read"
	AppPermissionsMetadataEnumWrite AppPermissionsMetadataEnum = "write"
)

func (e *AppPermissionsMetadataEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsMetadataEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsMetadataEnum: %s", s)
	}
}

// AppPermissionsOrganizationAdministrationEnum - The level of permission to grant the access token to manage access to an organization.
type AppPermissionsOrganizationAdministrationEnum string

const (
	AppPermissionsOrganizationAdministrationEnumRead  AppPermissionsOrganizationAdministrationEnum = "read"
	AppPermissionsOrganizationAdministrationEnumWrite AppPermissionsOrganizationAdministrationEnum = "write"
)

func (e *AppPermissionsOrganizationAdministrationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationAdministrationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationAdministrationEnum: %s", s)
	}
}

// AppPermissionsOrganizationAnnouncementBannersEnum - The level of permission to grant the access token to view and manage announcement banners for an organization.
type AppPermissionsOrganizationAnnouncementBannersEnum string

const (
	AppPermissionsOrganizationAnnouncementBannersEnumRead  AppPermissionsOrganizationAnnouncementBannersEnum = "read"
	AppPermissionsOrganizationAnnouncementBannersEnumWrite AppPermissionsOrganizationAnnouncementBannersEnum = "write"
)

func (e *AppPermissionsOrganizationAnnouncementBannersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationAnnouncementBannersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationAnnouncementBannersEnum: %s", s)
	}
}

// AppPermissionsOrganizationCustomRolesEnum - The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
type AppPermissionsOrganizationCustomRolesEnum string

const (
	AppPermissionsOrganizationCustomRolesEnumRead  AppPermissionsOrganizationCustomRolesEnum = "read"
	AppPermissionsOrganizationCustomRolesEnumWrite AppPermissionsOrganizationCustomRolesEnum = "write"
)

func (e *AppPermissionsOrganizationCustomRolesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationCustomRolesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationCustomRolesEnum: %s", s)
	}
}

// AppPermissionsOrganizationHooksEnum - The level of permission to grant the access token to manage the post-receive hooks for an organization.
type AppPermissionsOrganizationHooksEnum string

const (
	AppPermissionsOrganizationHooksEnumRead  AppPermissionsOrganizationHooksEnum = "read"
	AppPermissionsOrganizationHooksEnumWrite AppPermissionsOrganizationHooksEnum = "write"
)

func (e *AppPermissionsOrganizationHooksEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationHooksEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationHooksEnum: %s", s)
	}
}

// AppPermissionsOrganizationPackagesEnum - The level of permission to grant the access token for organization packages published to GitHub Packages.
type AppPermissionsOrganizationPackagesEnum string

const (
	AppPermissionsOrganizationPackagesEnumRead  AppPermissionsOrganizationPackagesEnum = "read"
	AppPermissionsOrganizationPackagesEnumWrite AppPermissionsOrganizationPackagesEnum = "write"
)

func (e *AppPermissionsOrganizationPackagesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationPackagesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationPackagesEnum: %s", s)
	}
}

// AppPermissionsOrganizationPlanEnum - The level of permission to grant the access token for viewing an organization's plan.
type AppPermissionsOrganizationPlanEnum string

const (
	AppPermissionsOrganizationPlanEnumRead AppPermissionsOrganizationPlanEnum = "read"
)

func (e *AppPermissionsOrganizationPlanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		*e = AppPermissionsOrganizationPlanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationPlanEnum: %s", s)
	}
}

// AppPermissionsOrganizationProjectsEnum - The level of permission to grant the access token to manage organization projects and projects beta (where available).
type AppPermissionsOrganizationProjectsEnum string

const (
	AppPermissionsOrganizationProjectsEnumRead  AppPermissionsOrganizationProjectsEnum = "read"
	AppPermissionsOrganizationProjectsEnumWrite AppPermissionsOrganizationProjectsEnum = "write"
	AppPermissionsOrganizationProjectsEnumAdmin AppPermissionsOrganizationProjectsEnum = "admin"
)

func (e *AppPermissionsOrganizationProjectsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = AppPermissionsOrganizationProjectsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationProjectsEnum: %s", s)
	}
}

// AppPermissionsOrganizationSecretsEnum - The level of permission to grant the access token to manage organization secrets.
type AppPermissionsOrganizationSecretsEnum string

const (
	AppPermissionsOrganizationSecretsEnumRead  AppPermissionsOrganizationSecretsEnum = "read"
	AppPermissionsOrganizationSecretsEnumWrite AppPermissionsOrganizationSecretsEnum = "write"
)

func (e *AppPermissionsOrganizationSecretsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationSecretsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationSecretsEnum: %s", s)
	}
}

// AppPermissionsOrganizationSelfHostedRunnersEnum - The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
type AppPermissionsOrganizationSelfHostedRunnersEnum string

const (
	AppPermissionsOrganizationSelfHostedRunnersEnumRead  AppPermissionsOrganizationSelfHostedRunnersEnum = "read"
	AppPermissionsOrganizationSelfHostedRunnersEnumWrite AppPermissionsOrganizationSelfHostedRunnersEnum = "write"
)

func (e *AppPermissionsOrganizationSelfHostedRunnersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationSelfHostedRunnersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationSelfHostedRunnersEnum: %s", s)
	}
}

// AppPermissionsOrganizationUserBlockingEnum - The level of permission to grant the access token to view and manage users blocked by the organization.
type AppPermissionsOrganizationUserBlockingEnum string

const (
	AppPermissionsOrganizationUserBlockingEnumRead  AppPermissionsOrganizationUserBlockingEnum = "read"
	AppPermissionsOrganizationUserBlockingEnumWrite AppPermissionsOrganizationUserBlockingEnum = "write"
)

func (e *AppPermissionsOrganizationUserBlockingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsOrganizationUserBlockingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsOrganizationUserBlockingEnum: %s", s)
	}
}

// AppPermissionsPackagesEnum - The level of permission to grant the access token for packages published to GitHub Packages.
type AppPermissionsPackagesEnum string

const (
	AppPermissionsPackagesEnumRead  AppPermissionsPackagesEnum = "read"
	AppPermissionsPackagesEnumWrite AppPermissionsPackagesEnum = "write"
)

func (e *AppPermissionsPackagesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsPackagesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsPackagesEnum: %s", s)
	}
}

// AppPermissionsPagesEnum - The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
type AppPermissionsPagesEnum string

const (
	AppPermissionsPagesEnumRead  AppPermissionsPagesEnum = "read"
	AppPermissionsPagesEnumWrite AppPermissionsPagesEnum = "write"
)

func (e *AppPermissionsPagesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsPagesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsPagesEnum: %s", s)
	}
}

// AppPermissionsPullRequestsEnum - The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
type AppPermissionsPullRequestsEnum string

const (
	AppPermissionsPullRequestsEnumRead  AppPermissionsPullRequestsEnum = "read"
	AppPermissionsPullRequestsEnumWrite AppPermissionsPullRequestsEnum = "write"
)

func (e *AppPermissionsPullRequestsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsPullRequestsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsPullRequestsEnum: %s", s)
	}
}

// AppPermissionsRepositoryAnnouncementBannersEnum - The level of permission to grant the access token to view and manage announcement banners for a repository.
type AppPermissionsRepositoryAnnouncementBannersEnum string

const (
	AppPermissionsRepositoryAnnouncementBannersEnumRead  AppPermissionsRepositoryAnnouncementBannersEnum = "read"
	AppPermissionsRepositoryAnnouncementBannersEnumWrite AppPermissionsRepositoryAnnouncementBannersEnum = "write"
)

func (e *AppPermissionsRepositoryAnnouncementBannersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsRepositoryAnnouncementBannersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsRepositoryAnnouncementBannersEnum: %s", s)
	}
}

// AppPermissionsRepositoryHooksEnum - The level of permission to grant the access token to manage the post-receive hooks for a repository.
type AppPermissionsRepositoryHooksEnum string

const (
	AppPermissionsRepositoryHooksEnumRead  AppPermissionsRepositoryHooksEnum = "read"
	AppPermissionsRepositoryHooksEnumWrite AppPermissionsRepositoryHooksEnum = "write"
)

func (e *AppPermissionsRepositoryHooksEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsRepositoryHooksEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsRepositoryHooksEnum: %s", s)
	}
}

// AppPermissionsRepositoryProjectsEnum - The level of permission to grant the access token to manage repository projects, columns, and cards.
type AppPermissionsRepositoryProjectsEnum string

const (
	AppPermissionsRepositoryProjectsEnumRead  AppPermissionsRepositoryProjectsEnum = "read"
	AppPermissionsRepositoryProjectsEnumWrite AppPermissionsRepositoryProjectsEnum = "write"
	AppPermissionsRepositoryProjectsEnumAdmin AppPermissionsRepositoryProjectsEnum = "admin"
)

func (e *AppPermissionsRepositoryProjectsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = AppPermissionsRepositoryProjectsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsRepositoryProjectsEnum: %s", s)
	}
}

// AppPermissionsSecretScanningAlertsEnum - The level of permission to grant the access token to view and manage secret scanning alerts.
type AppPermissionsSecretScanningAlertsEnum string

const (
	AppPermissionsSecretScanningAlertsEnumRead  AppPermissionsSecretScanningAlertsEnum = "read"
	AppPermissionsSecretScanningAlertsEnumWrite AppPermissionsSecretScanningAlertsEnum = "write"
)

func (e *AppPermissionsSecretScanningAlertsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSecretScanningAlertsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSecretScanningAlertsEnum: %s", s)
	}
}

// AppPermissionsSecretsEnum - The level of permission to grant the access token to manage repository secrets.
type AppPermissionsSecretsEnum string

const (
	AppPermissionsSecretsEnumRead  AppPermissionsSecretsEnum = "read"
	AppPermissionsSecretsEnumWrite AppPermissionsSecretsEnum = "write"
)

func (e *AppPermissionsSecretsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSecretsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSecretsEnum: %s", s)
	}
}

// AppPermissionsSecurityEventsEnum - The level of permission to grant the access token to view and manage security events like code scanning alerts.
type AppPermissionsSecurityEventsEnum string

const (
	AppPermissionsSecurityEventsEnumRead  AppPermissionsSecurityEventsEnum = "read"
	AppPermissionsSecurityEventsEnumWrite AppPermissionsSecurityEventsEnum = "write"
)

func (e *AppPermissionsSecurityEventsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSecurityEventsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSecurityEventsEnum: %s", s)
	}
}

// AppPermissionsSingleFileEnum - The level of permission to grant the access token to manage just a single file.
type AppPermissionsSingleFileEnum string

const (
	AppPermissionsSingleFileEnumRead  AppPermissionsSingleFileEnum = "read"
	AppPermissionsSingleFileEnumWrite AppPermissionsSingleFileEnum = "write"
)

func (e *AppPermissionsSingleFileEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsSingleFileEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsSingleFileEnum: %s", s)
	}
}

// AppPermissionsStatusesEnum - The level of permission to grant the access token for commit statuses.
type AppPermissionsStatusesEnum string

const (
	AppPermissionsStatusesEnumRead  AppPermissionsStatusesEnum = "read"
	AppPermissionsStatusesEnumWrite AppPermissionsStatusesEnum = "write"
)

func (e *AppPermissionsStatusesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsStatusesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsStatusesEnum: %s", s)
	}
}

// AppPermissionsTeamDiscussionsEnum - The level of permission to grant the access token to manage team discussions and related comments.
type AppPermissionsTeamDiscussionsEnum string

const (
	AppPermissionsTeamDiscussionsEnumRead  AppPermissionsTeamDiscussionsEnum = "read"
	AppPermissionsTeamDiscussionsEnumWrite AppPermissionsTeamDiscussionsEnum = "write"
)

func (e *AppPermissionsTeamDiscussionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsTeamDiscussionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsTeamDiscussionsEnum: %s", s)
	}
}

// AppPermissionsVulnerabilityAlertsEnum - The level of permission to grant the access token to manage Dependabot alerts.
type AppPermissionsVulnerabilityAlertsEnum string

const (
	AppPermissionsVulnerabilityAlertsEnumRead  AppPermissionsVulnerabilityAlertsEnum = "read"
	AppPermissionsVulnerabilityAlertsEnumWrite AppPermissionsVulnerabilityAlertsEnum = "write"
)

func (e *AppPermissionsVulnerabilityAlertsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		*e = AppPermissionsVulnerabilityAlertsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsVulnerabilityAlertsEnum: %s", s)
	}
}

// AppPermissionsWorkflowsEnum - The level of permission to grant the access token to update GitHub Actions workflow files.
type AppPermissionsWorkflowsEnum string

const (
	AppPermissionsWorkflowsEnumWrite AppPermissionsWorkflowsEnum = "write"
)

func (e *AppPermissionsWorkflowsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "write":
		*e = AppPermissionsWorkflowsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppPermissionsWorkflowsEnum: %s", s)
	}
}

// AppPermissions - The permissions granted to the user-to-server access token.
type AppPermissions struct {
	// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
	Actions *AppPermissionsActionsEnum `json:"actions,omitempty"`
	// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
	Administration *AppPermissionsAdministrationEnum `json:"administration,omitempty"`
	// The level of permission to grant the access token for checks on code.
	Checks *AppPermissionsChecksEnum `json:"checks,omitempty"`
	// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
	Contents *AppPermissionsContentsEnum `json:"contents,omitempty"`
	// The level of permission to grant the access token for deployments and deployment statuses.
	Deployments *AppPermissionsDeploymentsEnum `json:"deployments,omitempty"`
	// The level of permission to grant the access token for managing repository environments.
	Environments *AppPermissionsEnvironmentsEnum `json:"environments,omitempty"`
	// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
	Issues *AppPermissionsIssuesEnum `json:"issues,omitempty"`
	// The level of permission to grant the access token for organization teams and members.
	Members *AppPermissionsMembersEnum `json:"members,omitempty"`
	// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
	Metadata *AppPermissionsMetadataEnum `json:"metadata,omitempty"`
	// The level of permission to grant the access token to manage access to an organization.
	OrganizationAdministration *AppPermissionsOrganizationAdministrationEnum `json:"organization_administration,omitempty"`
	// The level of permission to grant the access token to view and manage announcement banners for an organization.
	OrganizationAnnouncementBanners *AppPermissionsOrganizationAnnouncementBannersEnum `json:"organization_announcement_banners,omitempty"`
	// The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
	OrganizationCustomRoles *AppPermissionsOrganizationCustomRolesEnum `json:"organization_custom_roles,omitempty"`
	// The level of permission to grant the access token to manage the post-receive hooks for an organization.
	OrganizationHooks *AppPermissionsOrganizationHooksEnum `json:"organization_hooks,omitempty"`
	// The level of permission to grant the access token for organization packages published to GitHub Packages.
	OrganizationPackages *AppPermissionsOrganizationPackagesEnum `json:"organization_packages,omitempty"`
	// The level of permission to grant the access token for viewing an organization's plan.
	OrganizationPlan *AppPermissionsOrganizationPlanEnum `json:"organization_plan,omitempty"`
	// The level of permission to grant the access token to manage organization projects and projects beta (where available).
	OrganizationProjects *AppPermissionsOrganizationProjectsEnum `json:"organization_projects,omitempty"`
	// The level of permission to grant the access token to manage organization secrets.
	OrganizationSecrets *AppPermissionsOrganizationSecretsEnum `json:"organization_secrets,omitempty"`
	// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
	OrganizationSelfHostedRunners *AppPermissionsOrganizationSelfHostedRunnersEnum `json:"organization_self_hosted_runners,omitempty"`
	// The level of permission to grant the access token to view and manage users blocked by the organization.
	OrganizationUserBlocking *AppPermissionsOrganizationUserBlockingEnum `json:"organization_user_blocking,omitempty"`
	// The level of permission to grant the access token for packages published to GitHub Packages.
	Packages *AppPermissionsPackagesEnum `json:"packages,omitempty"`
	// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
	Pages *AppPermissionsPagesEnum `json:"pages,omitempty"`
	// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
	PullRequests *AppPermissionsPullRequestsEnum `json:"pull_requests,omitempty"`
	// The level of permission to grant the access token to view and manage announcement banners for a repository.
	RepositoryAnnouncementBanners *AppPermissionsRepositoryAnnouncementBannersEnum `json:"repository_announcement_banners,omitempty"`
	// The level of permission to grant the access token to manage the post-receive hooks for a repository.
	RepositoryHooks *AppPermissionsRepositoryHooksEnum `json:"repository_hooks,omitempty"`
	// The level of permission to grant the access token to manage repository projects, columns, and cards.
	RepositoryProjects *AppPermissionsRepositoryProjectsEnum `json:"repository_projects,omitempty"`
	// The level of permission to grant the access token to view and manage secret scanning alerts.
	SecretScanningAlerts *AppPermissionsSecretScanningAlertsEnum `json:"secret_scanning_alerts,omitempty"`
	// The level of permission to grant the access token to manage repository secrets.
	Secrets *AppPermissionsSecretsEnum `json:"secrets,omitempty"`
	// The level of permission to grant the access token to view and manage security events like code scanning alerts.
	SecurityEvents *AppPermissionsSecurityEventsEnum `json:"security_events,omitempty"`
	// The level of permission to grant the access token to manage just a single file.
	SingleFile *AppPermissionsSingleFileEnum `json:"single_file,omitempty"`
	// The level of permission to grant the access token for commit statuses.
	Statuses *AppPermissionsStatusesEnum `json:"statuses,omitempty"`
	// The level of permission to grant the access token to manage team discussions and related comments.
	TeamDiscussions *AppPermissionsTeamDiscussionsEnum `json:"team_discussions,omitempty"`
	// The level of permission to grant the access token to manage Dependabot alerts.
	VulnerabilityAlerts *AppPermissionsVulnerabilityAlertsEnum `json:"vulnerability_alerts,omitempty"`
	// The level of permission to grant the access token to update GitHub Actions workflow files.
	Workflows *AppPermissionsWorkflowsEnum `json:"workflows,omitempty"`
}
