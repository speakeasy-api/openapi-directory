"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import condition as shared_condition
from ..shared import parameter as shared_parameter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TriggerTypeEnum(str, Enum):
    r"""Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update"""
    PAGEVIEW = 'pageview'
    DOM_READY = 'domReady'
    WINDOW_LOADED = 'windowLoaded'
    CUSTOM_EVENT = 'customEvent'
    TRIGGER_GROUP = 'triggerGroup'
    ALWAYS = 'always'
    FORM_SUBMISSION = 'formSubmission'
    CLICK = 'click'
    LINK_CLICK = 'linkClick'
    JS_ERROR = 'jsError'
    HISTORY_CHANGE = 'historyChange'
    TIMER = 'timer'
    AMP_CLICK = 'ampClick'
    AMP_TIMER = 'ampTimer'
    AMP_SCROLL = 'ampScroll'
    AMP_VISIBILITY = 'ampVisibility'
    YOU_TUBE_VIDEO = 'youTubeVideo'
    SCROLL_DEPTH = 'scrollDepth'
    ELEMENT_VISIBILITY = 'elementVisibility'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Trigger:
    r"""Represents a Google Tag Manager Trigger"""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""GTM Account ID."""  
    auto_event_filter: Optional[list[shared_condition.Condition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoEventFilter'), 'exclude': lambda f: f is None }})
    r"""Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update"""  
    check_validation: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkValidation'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    container_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerId'), 'exclude': lambda f: f is None }})
    r"""GTM Container ID."""  
    continuous_time_min_milliseconds: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continuousTimeMinMilliseconds'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    custom_event_filter: Optional[list[shared_condition.Condition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customEventFilter'), 'exclude': lambda f: f is None }})
    r"""Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update"""  
    event_name: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventName'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    filter: Optional[list[shared_condition.Condition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})
    r"""The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update"""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified."""  
    horizontal_scroll_percentage_list: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('horizontalScrollPercentageList'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    interval: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    interval_seconds: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intervalSeconds'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    limit: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    max_timer_length_seconds: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxTimerLengthSeconds'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Trigger display name. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update"""  
    parameter: Optional[list[shared_parameter.Parameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameter'), 'exclude': lambda f: f is None }})
    r"""Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update"""  
    parent_folder_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentFolderId'), 'exclude': lambda f: f is None }})
    r"""Parent folder id."""  
    selector: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    total_time_min_milliseconds: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalTimeMinMilliseconds'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    trigger_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerId'), 'exclude': lambda f: f is None }})
    r"""The Trigger ID uniquely identifies the GTM Trigger."""  
    type: Optional[TriggerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update"""  
    unique_trigger_id: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueTriggerId'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    vertical_scroll_percentage_list: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verticalScrollPercentageList'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    visibility_selector: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibilitySelector'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    visible_percentage_max: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visiblePercentageMax'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    visible_percentage_min: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visiblePercentageMin'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    wait_for_tags: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waitForTags'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    wait_for_tags_timeout: Optional[shared_parameter.Parameter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waitForTagsTimeout'), 'exclude': lambda f: f is None }})
    r"""Represents a Google Tag Manager Parameter."""  
    