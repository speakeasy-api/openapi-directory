/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetSnippetsWorkspaceEncodedIdRevisionPatchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

export class GetSnippetsWorkspaceEncodedIdRevisionPatchRequest extends SpeakeasyBase {
  /**
   * The snippet id.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=encoded_id",
  })
  encodedId: string;

  /**
   * A revspec expression. This can simply be a commit SHA1, a ref name, or a compare expression like `staging..production`.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=revision",
  })
  revision: string;

  /**
   * This can either be the workspace ID (slug) or the workspace UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{workspace UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace",
  })
  workspace: string;
}

export class GetSnippetsWorkspaceEncodedIdRevisionPatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If the authenticated user does not have access to the snippet.
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;
}
