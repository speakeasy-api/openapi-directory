<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RealmsAdmin 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the realm
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmResponse
     */
	public function deleteRealm(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete all admin events
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAdminEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAdminEventsResponse
     */
	public function deleteRealmAdminEvents(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAdminEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAdminEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/admin-events', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAdminEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmAdminEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * deleteRealmDefaultDefaultClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultDefaultClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse
     */
	public function deleteRealmDefaultDefaultClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultDefaultClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-default-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultDefaultClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultDefaultClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * deleteRealmDefaultGroupsGroupId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultGroupsGroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultGroupsGroupIdResponse
     */
	public function deleteRealmDefaultGroupsGroupId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultGroupsGroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultGroupsGroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultGroupsGroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultGroupsGroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * deleteRealmDefaultOptionalClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultOptionalClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse
     */
	public function deleteRealmDefaultOptionalClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultOptionalClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-optional-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultOptionalClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmDefaultOptionalClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete all events
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmEventsResponse
     */
	public function deleteRealmEvents(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/events', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Remove a specific user session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmSessionsSessionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmSessionsSessionResponse
     */
	public function deleteRealmSessionsSession(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmSessionsSessionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmSessionsSessionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/sessions/{session}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmSessionsSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmSessionsSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get the top-level representation of the realm   It will not include nested information like User and Client representations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmResponse
     */
	public function getRealm(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}', \OpenAPI\OpenAPI\Models\Operations\GetRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->realmRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RealmRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsResponse
     */
	public function getRealmAdminEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/admin-events', \OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmAdminEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminEventRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AdminEventRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get client session stats   Returns a JSON map.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientSessionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientSessionStatsResponse
     */
	public function getRealmClientSessionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientSessionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientSessionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-session-stats', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientSessionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientSessionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmClientSessionStats2XXApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getRealmCredentialRegistrators
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmCredentialRegistratorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmCredentialRegistratorsResponse
     */
	public function getRealmCredentialRegistrators(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmCredentialRegistratorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmCredentialRegistratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/credential-registrators', \OpenAPI\OpenAPI\Models\Operations\GetRealmCredentialRegistratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmCredentialRegistratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmCredentialRegistrators2XXApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm default client scopes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultDefaultClientScopesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultDefaultClientScopesResponse
     */
	public function getRealmDefaultDefaultClientScopes(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultDefaultClientScopesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultDefaultClientScopesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-default-client-scopes', \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultDefaultClientScopesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultDefaultClientScopesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientScopeRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClientScopeRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get group hierarchy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultGroupsResponse
     */
	public function getRealmDefaultGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-groups', \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get realm optional client scopes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultOptionalClientScopesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultOptionalClientScopesResponse
     */
	public function getRealmDefaultOptionalClientScopes(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultOptionalClientScopesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultOptionalClientScopesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-optional-client-scopes', \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultOptionalClientScopesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmDefaultOptionalClientScopesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientScopeRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClientScopeRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get events   Returns all events, or filters them based on URL query parameters listed here
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsResponse
     */
	public function getRealmEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/events', \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the events provider configuration   Returns JSON object with events provider configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsConfigResponse
     */
	public function getRealmEventsConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/events/config', \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmEventsConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->realmEventsConfigRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RealmEventsConfigRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getRealmGroupByPathPath
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupByPathPathRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupByPathPathResponse
     */
	public function getRealmGroupByPathPath(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupByPathPathRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupByPathPathResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/group-by-path/{path}', \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupByPathPathRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmGroupByPathPathResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getRealmUsersManagementPermissions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersManagementPermissionsResponse
     */
	public function getRealmUsersManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users-management-permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUsersManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Import a realm   Imports a realm from a full representation of that realm.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RealmRepresentation $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostResponse
     */
	public function post(
        \OpenAPI\OpenAPI\Models\Shared\RealmRepresentation $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Clear cache of external public keys (Public keys of clients or Identity providers)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClearKeysCacheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClearKeysCacheResponse
     */
	public function postRealmClearKeysCache(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClearKeysCacheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClearKeysCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clear-keys-cache', \OpenAPI\OpenAPI\Models\Operations\PostRealmClearKeysCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClearKeysCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Clear realm cache
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClearRealmCacheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClearRealmCacheResponse
     */
	public function postRealmClearRealmCache(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClearRealmCacheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClearRealmCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clear-realm-cache', \OpenAPI\OpenAPI\Models\Operations\PostRealmClearRealmCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClearRealmCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Clear user cache
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClearUserCacheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClearUserCacheResponse
     */
	public function postRealmClearUserCache(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClearUserCacheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClearUserCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clear-user-cache', \OpenAPI\OpenAPI\Models\Operations\PostRealmClearUserCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClearUserCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Base path for importing clients under this realm.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientDescriptionConverterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientDescriptionConverterResponse
     */
	public function postRealmClientDescriptionConverter(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientDescriptionConverterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientDescriptionConverterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/client-description-converter', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientDescriptionConverterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientDescriptionConverterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes all user sessions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmLogoutAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmLogoutAllResponse
     */
	public function postRealmLogoutAll(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmLogoutAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmLogoutAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/logout-all', \OpenAPI\OpenAPI\Models\Operations\PostRealmLogoutAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmLogoutAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Partial export of existing realm into a JSON file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportResponse
     */
	public function postRealmPartialExport(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/partial-export', \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->realmRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RealmRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partial import from a JSON file to an existing realm.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialImportResponse
     */
	public function postRealmPartialImport(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/partialImport', \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "partialImportRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmPartialImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Push the realm’s revocation policy to any client that has an admin url associated with it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmPushRevocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmPushRevocationResponse
     */
	public function postRealmPushRevocation(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmPushRevocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmPushRevocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/push-revocation', \OpenAPI\OpenAPI\Models\Operations\PostRealmPushRevocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmPushRevocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Test LDAP connection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmTestLDAPConnectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmTestLDAPConnectionResponse
     */
	public function postRealmTestLDAPConnection(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmTestLDAPConnectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmTestLDAPConnectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/testLDAPConnection', \OpenAPI\OpenAPI\Models\Operations\PostRealmTestLDAPConnectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testLdapConnectionRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmTestLDAPConnectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * postRealmTestSMTPConnection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmTestSMTPConnectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmTestSMTPConnectionResponse
     */
	public function postRealmTestSMTPConnection(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmTestSMTPConnectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmTestSMTPConnectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/testSMTPConnection', \OpenAPI\OpenAPI\Models\Operations\PostRealmTestSMTPConnectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmTestSMTPConnectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmResponse
     */
	public function putRealm(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}', \OpenAPI\OpenAPI\Models\Operations\PutRealmRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "realmRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * putRealmDefaultDefaultClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultDefaultClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultDefaultClientScopesClientScopeIdResponse
     */
	public function putRealmDefaultDefaultClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultDefaultClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultDefaultClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-default-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultDefaultClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultDefaultClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * putRealmDefaultGroupsGroupId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultGroupsGroupIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultGroupsGroupIdResponse
     */
	public function putRealmDefaultGroupsGroupId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultGroupsGroupIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultGroupsGroupIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultGroupsGroupIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultGroupsGroupIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * putRealmDefaultOptionalClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultOptionalClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultOptionalClientScopesClientScopeIdResponse
     */
	public function putRealmDefaultOptionalClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultOptionalClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultOptionalClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/default-optional-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultOptionalClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmDefaultOptionalClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update the events provider   Change the events provider and/or its configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmEventsConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmEventsConfigResponse
     */
	public function putRealmEventsConfig(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmEventsConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmEventsConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/events/config', \OpenAPI\OpenAPI\Models\Operations\PutRealmEventsConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "realmEventsConfigRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmEventsConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * putRealmUsersManagementPermissions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmUsersManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmUsersManagementPermissionsResponse
     */
	public function putRealmUsersManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmUsersManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmUsersManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/users-management-permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmUsersManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmUsersManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
}