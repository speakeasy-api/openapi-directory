// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ArcmwSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ArcmwRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// ArcmwRequestBodyFormatEnum - The format of the certificate in response.
type ArcmwRequestBodyFormatEnum string

const (
	ArcmwRequestBodyFormatEnumPdf ArcmwRequestBodyFormatEnum = "pdf"
)

func (e ArcmwRequestBodyFormatEnum) ToPointer() *ArcmwRequestBodyFormatEnum {
	return &e
}

func (e *ArcmwRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = ArcmwRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ArcmwRequestBodyFormatEnum: %v", v)
	}
}

// ArcmwRequestBody - Request format
type ArcmwRequestBody struct {
	CertificateParameters *ArcmwRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ArcmwRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Arcmw504ApplicationJSONErrorEnum string

const (
	Arcmw504ApplicationJSONErrorEnumGatewayTimeout Arcmw504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Arcmw504ApplicationJSONErrorEnum) ToPointer() *Arcmw504ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Arcmw504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw504ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw504ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Arcmw504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Arcmw504ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Arcmw504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw504ApplicationJSON - Gateway timeout
type Arcmw504ApplicationJSON struct {
	Error            *Arcmw504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Arcmw503ApplicationJSONErrorEnum string

const (
	Arcmw503ApplicationJSONErrorEnumServiceUnavailable Arcmw503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Arcmw503ApplicationJSONErrorEnum) ToPointer() *Arcmw503ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Arcmw503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw503ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw503ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Arcmw503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Arcmw503ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Arcmw503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw503ApplicationJSON - Service unavailable
type Arcmw503ApplicationJSON struct {
	Error            *Arcmw503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Arcmw502ApplicationJSONErrorEnum string

const (
	Arcmw502ApplicationJSONErrorEnumBadGatewy Arcmw502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Arcmw502ApplicationJSONErrorEnum) ToPointer() *Arcmw502ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Arcmw502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw502ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw502ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Arcmw502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Arcmw502ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Arcmw502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw502ApplicationJSON - Bad gateway
type Arcmw502ApplicationJSON struct {
	Error            *Arcmw502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Arcmw500ApplicationJSONErrorEnum string

const (
	Arcmw500ApplicationJSONErrorEnumInternalServerError Arcmw500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Arcmw500ApplicationJSONErrorEnum) ToPointer() *Arcmw500ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Arcmw500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw500ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw500ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw500ApplicationJSONErrorDescriptionEnumInternalServerError Arcmw500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Arcmw500ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Arcmw500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw500ApplicationJSON - Internal server error
type Arcmw500ApplicationJSON struct {
	Error            *Arcmw500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Arcmw404ApplicationJSONErrorEnum string

const (
	Arcmw404ApplicationJSONErrorEnumRecordNotFound Arcmw404ApplicationJSONErrorEnum = "record_not_found"
	Arcmw404ApplicationJSONErrorEnumURLNotFound    Arcmw404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Arcmw404ApplicationJSONErrorEnum) ToPointer() *Arcmw404ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Arcmw404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw404ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw404ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw404ApplicationJSONErrorDescriptionEnumNoRecordFound               Arcmw404ApplicationJSONErrorDescriptionEnum = "No record found"
	Arcmw404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Arcmw404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Arcmw404ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Arcmw404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw404ApplicationJSON - No record found
type Arcmw404ApplicationJSON struct {
	Error            *Arcmw404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Arcmw401ApplicationJSONErrorEnum string

const (
	Arcmw401ApplicationJSONErrorEnumInvalidAuthentication Arcmw401ApplicationJSONErrorEnum = "invalid_authentication"
	Arcmw401ApplicationJSONErrorEnumInvalidAuthorization  Arcmw401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Arcmw401ApplicationJSONErrorEnum) ToPointer() *Arcmw401ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Arcmw401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw401ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw401ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Arcmw401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Arcmw401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Arcmw401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Arcmw401ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Arcmw401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw401ApplicationJSON - Unauthorized access
type Arcmw401ApplicationJSON struct {
	Error            *Arcmw401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Arcmw400ApplicationJSONErrorEnum string

const (
	Arcmw400ApplicationJSONErrorEnumMissingParameter Arcmw400ApplicationJSONErrorEnum = "missing_parameter"
	Arcmw400ApplicationJSONErrorEnumInvalidParameter Arcmw400ApplicationJSONErrorEnum = "invalid_parameter"
	Arcmw400ApplicationJSONErrorEnumInvalidFormat    Arcmw400ApplicationJSONErrorEnum = "invalid_format"
	Arcmw400ApplicationJSONErrorEnumInvalidTxnid     Arcmw400ApplicationJSONErrorEnum = "invalid_txnid"
	Arcmw400ApplicationJSONErrorEnumInvalidConsentid Arcmw400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Arcmw400ApplicationJSONErrorEnum) ToPointer() *Arcmw400ApplicationJSONErrorEnum {
	return &e
}

func (e *Arcmw400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Arcmw400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw400ApplicationJSONErrorEnum: %v", v)
	}
}

type Arcmw400ApplicationJSONErrorDescriptionEnum string

const (
	Arcmw400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Arcmw400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Arcmw400ApplicationJSONErrorDescriptionEnumBadRequest                              Arcmw400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Arcmw400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Arcmw400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Arcmw400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Arcmw400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Arcmw400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Arcmw400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Arcmw400ApplicationJSONErrorDescriptionEnum) ToPointer() *Arcmw400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Arcmw400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Arcmw400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Arcmw400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Arcmw400ApplicationJSON - Bad request
type Arcmw400ApplicationJSON struct {
	Error            *Arcmw400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Arcmw400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ArcmwResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Arcmw400ApplicationJSONObject *Arcmw400ApplicationJSON
	// Unauthorized access
	Arcmw401ApplicationJSONObject *Arcmw401ApplicationJSON
	// No record found
	Arcmw404ApplicationJSONObject *Arcmw404ApplicationJSON
	// Internal server error
	Arcmw500ApplicationJSONObject *Arcmw500ApplicationJSON
	// Bad gateway
	Arcmw502ApplicationJSONObject *Arcmw502ApplicationJSON
	// Service unavailable
	Arcmw503ApplicationJSONObject *Arcmw503ApplicationJSON
	// Gateway timeout
	Arcmw504ApplicationJSONObject *Arcmw504ApplicationJSON
}
