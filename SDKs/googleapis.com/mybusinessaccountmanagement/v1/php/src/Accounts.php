<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsCreateResponse
     */
	public function mybusinessaccountmanagementAccountsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified account. Returns `NOT_FOUND` if the account does not exist or if the caller does not have access rights to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetResponse
     */
	public function mybusinessaccountmanagementAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts the specified invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptResponse
     */
	public function mybusinessaccountmanagementAccountsInvitationsAccept(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:accept', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsAcceptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Declines the specified invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineResponse
     */
	public function mybusinessaccountmanagementAccountsInvitationsDecline(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:decline', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsDeclineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists pending invitations for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListResponse
     */
	public function mybusinessaccountmanagementAccountsInvitationsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/invitations', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsInvitationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInvitationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInvitationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsListResponse
     */
	public function mybusinessaccountmanagementAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountsResponse', 'json');
            }
        }

        return $response;
    }
}