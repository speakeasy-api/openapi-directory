// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CertificateExtensionConstraintsKnownExtensionsEnum string

const (
	CertificateExtensionConstraintsKnownExtensionsEnumKnownCertificateExtensionUnspecified CertificateExtensionConstraintsKnownExtensionsEnum = "KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED"
	CertificateExtensionConstraintsKnownExtensionsEnumBaseKeyUsage                         CertificateExtensionConstraintsKnownExtensionsEnum = "BASE_KEY_USAGE"
	CertificateExtensionConstraintsKnownExtensionsEnumExtendedKeyUsage                     CertificateExtensionConstraintsKnownExtensionsEnum = "EXTENDED_KEY_USAGE"
	CertificateExtensionConstraintsKnownExtensionsEnumCaOptions                            CertificateExtensionConstraintsKnownExtensionsEnum = "CA_OPTIONS"
	CertificateExtensionConstraintsKnownExtensionsEnumPolicyIds                            CertificateExtensionConstraintsKnownExtensionsEnum = "POLICY_IDS"
	CertificateExtensionConstraintsKnownExtensionsEnumAiaOcspServers                       CertificateExtensionConstraintsKnownExtensionsEnum = "AIA_OCSP_SERVERS"
	CertificateExtensionConstraintsKnownExtensionsEnumNameConstraints                      CertificateExtensionConstraintsKnownExtensionsEnum = "NAME_CONSTRAINTS"
)

func (e *CertificateExtensionConstraintsKnownExtensionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED":
		fallthrough
	case "BASE_KEY_USAGE":
		fallthrough
	case "EXTENDED_KEY_USAGE":
		fallthrough
	case "CA_OPTIONS":
		fallthrough
	case "POLICY_IDS":
		fallthrough
	case "AIA_OCSP_SERVERS":
		fallthrough
	case "NAME_CONSTRAINTS":
		*e = CertificateExtensionConstraintsKnownExtensionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateExtensionConstraintsKnownExtensionsEnum: %s", s)
	}
}

// CertificateExtensionConstraints - Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraints struct {
	// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
	AdditionalExtensions []ObjectID `json:"additionalExtensions,omitempty"`
	// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
	KnownExtensions []CertificateExtensionConstraintsKnownExtensionsEnum `json:"knownExtensions,omitempty"`
}
