/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Tags {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List of all the groups associated to the user filtered by this tag.
   */
  tagsCount(
    req: operations.TagsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tags/count";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsCountResponse =
        new operations.TagsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a tag
   */
  tagsDelete(
    req: operations.TagsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsDeleteResponse =
        new operations.TagsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete the association of this tag with all datapoints
   */
  tagsDeleteRelatedDatapoints(
    req: operations.TagsDeleteRelatedDatapointsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsDeleteRelatedDatapointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsDeleteRelatedDatapointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/datapoints",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsDeleteRelatedDatapointsResponse =
        new operations.TagsDeleteRelatedDatapointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete the association of this tag with all groups
   */
  tagsDeleteRelatedGroups(
    req: operations.TagsDeleteRelatedGroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsDeleteRelatedGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsDeleteRelatedGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}/groups", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsDeleteRelatedGroupsResponse =
        new operations.TagsDeleteRelatedGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List of all the groups associated to the user filtered by this tag.
   */
  tagsGet(
    req: operations.TagsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tags";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsGetResponse = new operations.TagsGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List of all the datapoints associated to the user filtered by this tag
   */
  tagsGetDatapoints(
    req: operations.TagsGetDatapointsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsGetDatapointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsGetDatapointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/datapoints",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsGetDatapointsResponse =
        new operations.TagsGetDatapointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count the datapoints associated to the user filtered by this tag
   */
  tagsGetDatapointsCount(
    req: operations.TagsGetDatapointsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsGetDatapointsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsGetDatapointsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/datapoints/count",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsGetDatapointsCountResponse =
        new operations.TagsGetDatapointsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List of all the groups associated to the user filtered by this tag.
   */
  tagsGetGroups(
    req: operations.TagsGetGroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsGetGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsGetGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}/groups", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsGetGroupsResponse =
        new operations.TagsGetGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count the groups associated to the user filtered by this tag
   */
  tagsGetGroupsCount(
    req: operations.TagsGetGroupsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsGetGroupsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsGetGroupsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/groups/count",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsGetGroupsCountResponse =
        new operations.TagsGetGroupsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Associate/Deassociate a tag with a datapoint
   */
  tagsPatchDataPointForm(
    req: operations.TagsPatchDataPointFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchDataPointFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchDataPointFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/datapoints/patch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsPatchBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchDataPointFormResponse =
        new operations.TagsPatchDataPointFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Associate/Deassociate a tag with a datapoint
   */
  tagsPatchDataPointJson(
    req: operations.TagsPatchDataPointJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchDataPointJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchDataPointJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/datapoints/patch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsPatchBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchDataPointJsonResponse =
        new operations.TagsPatchDataPointJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Associate/Deassociate a tag with a datapoint
   */
  tagsPatchDataPointRaw(
    req: operations.TagsPatchDataPointRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchDataPointRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchDataPointRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/datapoints/patch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchDataPointRawResponse =
        new operations.TagsPatchDataPointRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Associate/Deassociate a tag with a group
   */
  tagsPatchGroupForm(
    req: operations.TagsPatchGroupFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchGroupFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchGroupFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/groups/patch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsPatchBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchGroupFormResponse =
        new operations.TagsPatchGroupFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Associate/Deassociate a tag with a group
   */
  tagsPatchGroupJson(
    req: operations.TagsPatchGroupJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchGroupJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchGroupJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/groups/patch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsPatchBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchGroupJsonResponse =
        new operations.TagsPatchGroupJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Associate/Deassociate a tag with a group
   */
  tagsPatchGroupRaw(
    req: operations.TagsPatchGroupRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchGroupRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchGroupRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tags/{tagId}/groups/patch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchGroupRawResponse =
        new operations.TagsPatchGroupRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast patch a tag name
   */
  tagsPatchTagNameForm(
    req: operations.TagsPatchTagNameFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchTagNameFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchTagNameFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}/name", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsGenericTextPatch",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchTagNameFormResponse =
        new operations.TagsPatchTagNameFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast patch a tag name
   */
  tagsPatchTagNameJson(
    req: operations.TagsPatchTagNameJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchTagNameJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchTagNameJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}/name", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsGenericTextPatch",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchTagNameJsonResponse =
        new operations.TagsPatchTagNameJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast patch a tag name
   */
  tagsPatchTagNameRaw(
    req: operations.TagsPatchTagNameRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPatchTagNameRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagsPatchTagNameRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}/name", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPatchTagNameRawResponse =
        new operations.TagsPatchTagNameRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a tag
   */
  tagsPut(
    req: shared.ApiCoreDtoTagsTag,
    config?: AxiosRequestConfig
  ): Promise<operations.TagsPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreDtoTagsTag(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tags";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagsPutResponse = new operations.TagsPutResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a tag
   */
  getTagsTagId(
    req: operations.GetTagsTagIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTagsTagIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTagsTagIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/tags/{tagId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTagsTagIdResponse =
        new operations.GetTagsTagIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoTagsTag = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoTagsTag
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoTagsTag = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoTagsTag
            );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
