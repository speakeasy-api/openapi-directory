/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class QueryHdfsRequest {
    /**
     * Filter the summary information based on the ID of the effective SLA Domain inherited by a HDFS directory.
     * Use **_UNPROTECTED_** to only return information for HDFS directories that do not have an effective SLA Domain.
     * Use **_PROTECTED_** to only return information for HDFS directories that have an effective SLA Domain.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=effective_sla_domain_id")
    public String effectiveSlaDomainId;

    public QueryHdfsRequest withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * Filter the summary information based on the ID of the host referenced by the HDFS directory (name node).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=host_id")
    public String hostId;

    public QueryHdfsRequest withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * Retrieve HDFS directories with a host name (name node) matching the provided name. The search is performed as a case-insensitive infix search.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=host_name")
    public String hostName;

    public QueryHdfsRequest withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }
    
    /**
     * Filter the summary information based on the relic status of the HDFS directory. When this parameter is not set, the returned HDFS directory summary information is not filtered by relic status.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_relic")
    public Boolean isRelic;

    public QueryHdfsRequest withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * Limit the summary information to a specified maximum number of HDFS directories.
     * Optionally, use with **_offset_** to start the count at a specified point.
     * Optionally, use with **_sort_by_** to perform sort on given attributes. Include **_sort_order_** to determine the ascending or descending direction of sort.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;

    public QueryHdfsRequest withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Retrieve HDFS directories with a name matching the provided name. The search is performed as a case-insensitive infix search.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;

    public QueryHdfsRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Starting position in the list of HDFS directory entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as a collection of grouped entries for paging.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;

    public QueryHdfsRequest withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
     * Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=primary_cluster_id")
    public String primaryClusterId;

    public QueryHdfsRequest withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * Specifies a comma-separated list of HDFS directory attributes to use in sorting the HDFS directory summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.
     * Valid attributes are: **_name_**, **_hostName_**, **_templateType_**, **_slaName_**, **_includes_**, **_excludes_**, and **_exceptions_**. Requires **_sort_order_**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public QueryHdfsSortByEnum sortBy;

    public QueryHdfsRequest withSortBy(QueryHdfsSortByEnum sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Sort order, either ascending or descending.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_order")
    public QueryHdfsSortOrderEnum sortOrder;

    public QueryHdfsRequest withSortOrder(QueryHdfsSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * Filter the summary information based on the ID of a HDFS directory template.
     * Use **_NONE_** to only return information for HDFS directories that were not created from a HDFS directory template.
     * Use **_ANY_** to only return information for HDFS directories that were created from a HDFS directory template.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=template_id")
    public String templateId;

    public QueryHdfsRequest withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    public QueryHdfsRequest(){}
}
