/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ErrorsUpdateStateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export enum ErrorsUpdateStateRequestBodyStateEnum {
  Open = "open",
  Closed = "closed",
  Ignored = "ignored",
}

/**
 * The state of the error group
 */
export class ErrorsUpdateStateRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "annotation" })
  annotation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: ErrorsUpdateStateRequestBodyStateEnum;
}

export class ErrorsUpdateStateRequest extends SpeakeasyBase {
  /**
   * The state of the error group
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ErrorsUpdateStateRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The id of the error group
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=errorGroupId",
  })
  errorGroupId: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

export enum ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ErrorsUpdateStateDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ErrorsUpdateStateDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error code with reason
 */
export class ErrorsUpdateStateDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorsUpdateStateDefaultApplicationJSONError)
  error: ErrorsUpdateStateDefaultApplicationJSONError;
}

/**
 * programming language of the frame
 */
export enum ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum {
  JavaScript = "JavaScript",
  CSharp = "CSharp",
  ObjectiveC = "Objective-C",
  ObjectiveCpp = "Objective-Cpp",
  Cpp = "Cpp",
  C = "C",
  Swift = "Swift",
  Java = "Java",
  Unknown = "Unknown",
}

export class ErrorsUpdateState200ApplicationJSONReasonFrames extends SpeakeasyBase {
  /**
   * this line isn't from any framework
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appCode" })
  appCode?: boolean;

  /**
   * is a class method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classMethod" })
  classMethod?: boolean;

  /**
   * name of the class
   */
  @SpeakeasyMetadata()
  @Expose({ name: "className" })
  className?: string;

  /**
   * Formatted frame string
   */
  @SpeakeasyMetadata()
  @Expose({ name: "codeFormatted" })
  codeFormatted?: string;

  /**
   * Unformatted Frame string
   */
  @SpeakeasyMetadata()
  @Expose({ name: "codeRaw" })
  codeRaw?: string;

  /**
   * Exception type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exceptionType" })
  exceptionType?: string;

  /**
   * name of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  file?: string;

  /**
   * Name of the framework
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frameworkName" })
  frameworkName?: string;

  /**
   * programming language of the frame
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: ErrorsUpdateState200ApplicationJSONReasonFramesLanguageEnum;

  /**
   * line number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line" })
  line?: number;

  /**
   * name of the method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: string;

  /**
   * parameters of the frames method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "methodParams" })
  methodParams?: string;

  /**
   * OS exception type. (aka. SIGNAL)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "osExceptionType" })
  osExceptionType?: string;
}

export enum ErrorsUpdateState200ApplicationJSONStateEnum {
  Open = "open",
  Closed = "closed",
  Ignored = "ignored",
}

/**
 * Error group details
 */
export class ErrorsUpdateState200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "annotation" })
  annotation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "appBuild" })
  appBuild?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "appVersion" })
  appVersion: string;

  @SpeakeasyMetadata()
  @Expose({ name: "codeRaw" })
  codeRaw?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count: number;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceCount" })
  deviceCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "errorGroupId" })
  errorGroupId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionAppCode" })
  exceptionAppCode?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionClassMethod" })
  exceptionClassMethod?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionClassName" })
  exceptionClassName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionFile" })
  exceptionFile?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionLine" })
  exceptionLine?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionMessage" })
  exceptionMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionMethod" })
  exceptionMethod?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exceptionType" })
  exceptionType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstOccurrence" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  firstOccurrence: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "hidden" })
  hidden?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "lastOccurrence" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastOccurrence: Date;

  @SpeakeasyMetadata({
    elemType: ErrorsUpdateState200ApplicationJSONReasonFrames,
  })
  @Expose({ name: "reasonFrames" })
  @Type(() => ErrorsUpdateState200ApplicationJSONReasonFrames)
  reasonFrames?: ErrorsUpdateState200ApplicationJSONReasonFrames[];

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: ErrorsUpdateState200ApplicationJSONStateEnum;
}

export class ErrorsUpdateStateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error group details
   */
  @SpeakeasyMetadata()
  errorsUpdateState200ApplicationJSONObject?: ErrorsUpdateState200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  errorsUpdateStateDefaultApplicationJSONObject?: ErrorsUpdateStateDefaultApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
