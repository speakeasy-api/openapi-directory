<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * EnterpriseCrmEventbusProtoFailurePolicy - Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class EnterpriseCrmEventbusProtoFailurePolicy
{
    /**
     * Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.
     * 
     * @var ?string $intervalInSeconds
     */
	#[\JMS\Serializer\Annotation\SerializedName('intervalInSeconds')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $intervalInSeconds = null;
    
    /**
     * Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
     * 
     * @var ?int $maxNumRetries
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxNumRetries')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxNumRetries = null;
    
    /**
     * Defines what happens to the task upon failure.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum $retryStrategy
     */
	#[\JMS\Serializer\Annotation\SerializedName('retryStrategy')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum $retryStrategy = null;
    
	public function __construct()
	{
		$this->intervalInSeconds = null;
		$this->maxNumRetries = null;
		$this->retryStrategy = null;
	}
}
