<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Breakpoint - ------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Breakpoint
{
    /**
     * Action that the agent should perform when the code at the breakpoint location is hit.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BreakpointActionEnum $action
     */
	#[\JMS\Serializer\Annotation\SerializedName('action')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BreakpointActionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BreakpointActionEnum $action = null;
    
    /**
     * The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state.
     * 
     * @var ?string $canaryExpireTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('canaryExpireTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $canaryExpireTime = null;
    
    /**
     * Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location.
     * 
     * @var ?string $condition
     */
	#[\JMS\Serializer\Annotation\SerializedName('condition')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $condition = null;
    
    /**
     * Time this breakpoint was created by the server in seconds resolution.
     * 
     * @var ?string $createTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('createTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createTime = null;
    
    /**
     * Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Variable> $evaluatedExpressions
     */
	#[\JMS\Serializer\Annotation\SerializedName('evaluatedExpressions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Variable>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $evaluatedExpressions = null;
    
    /**
     * List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.
     * 
     * @var ?array<string> $expressions
     */
	#[\JMS\Serializer\Annotation\SerializedName('expressions')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $expressions = null;
    
    /**
     * Time this breakpoint was finalized as seen by the server in seconds resolution.
     * 
     * @var ?string $finalTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('finalTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $finalTime = null;
    
    /**
     * Breakpoint identifier, unique in the scope of the debuggee.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * When true, indicates that this is a final result and the breakpoint state will not change from here on.
     * 
     * @var ?bool $isFinalState
     */
	#[\JMS\Serializer\Annotation\SerializedName('isFinalState')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isFinalState = null;
    
    /**
     * A set of custom breakpoint properties, populated by the agent, to be displayed to the user.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Represents a location in the source code.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SourceLocation $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SourceLocation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SourceLocation $location = null;
    
    /**
     * Indicates the severity of the log. Only relevant when action is `LOG`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BreakpointLogLevelEnum $logLevel
     */
	#[\JMS\Serializer\Annotation\SerializedName('logLevel')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BreakpointLogLevelEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BreakpointLogLevelEnum $logLevel = null;
    
    /**
     * Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`.
     * 
     * @var ?string $logMessageFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('logMessageFormat')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $logMessageFormat = null;
    
    /**
     * The stack at breakpoint time, where stack_frames[0] represents the most recently entered function.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\StackFrame> $stackFrames
     */
	#[\JMS\Serializer\Annotation\SerializedName('stackFrames')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\StackFrame>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $stackFrames = null;
    
    /**
     * The current state of the breakpoint.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BreakpointStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BreakpointStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BreakpointStateEnum $state = null;
    
    /**
     * Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StatusMessage $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StatusMessage')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StatusMessage $status = null;
    
    /**
     * E-mail address of the user that created this breakpoint
     * 
     * @var ?string $userEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('userEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userEmail = null;
    
    /**
     * The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Variable> $variableTable
     */
	#[\JMS\Serializer\Annotation\SerializedName('variableTable')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Variable>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $variableTable = null;
    
	public function __construct()
	{
		$this->action = null;
		$this->canaryExpireTime = null;
		$this->condition = null;
		$this->createTime = null;
		$this->evaluatedExpressions = null;
		$this->expressions = null;
		$this->finalTime = null;
		$this->id = null;
		$this->isFinalState = null;
		$this->labels = null;
		$this->location = null;
		$this->logLevel = null;
		$this->logMessageFormat = null;
		$this->stackFrames = null;
		$this->state = null;
		$this->status = null;
		$this->userEmail = null;
		$this->variableTable = null;
	}
}
