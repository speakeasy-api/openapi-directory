"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossProfilePolicies = exports.CrossProfilePoliciesWorkProfileWidgetsDefaultEnum = exports.CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum = exports.CrossProfilePoliciesCrossProfileDataSharingEnum = exports.CrossProfilePoliciesCrossProfileCopyPasteEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Whether text copied from one profile (personal or work) can be pasted in the other profile.
 */
var CrossProfilePoliciesCrossProfileCopyPasteEnum;
(function (CrossProfilePoliciesCrossProfileCopyPasteEnum) {
    CrossProfilePoliciesCrossProfileCopyPasteEnum["CrossProfileCopyPasteUnspecified"] = "CROSS_PROFILE_COPY_PASTE_UNSPECIFIED";
    CrossProfilePoliciesCrossProfileCopyPasteEnum["CopyFromWorkToPersonalDisallowed"] = "COPY_FROM_WORK_TO_PERSONAL_DISALLOWED";
    CrossProfilePoliciesCrossProfileCopyPasteEnum["CrossProfileCopyPasteAllowed"] = "CROSS_PROFILE_COPY_PASTE_ALLOWED";
})(CrossProfilePoliciesCrossProfileCopyPasteEnum = exports.CrossProfilePoliciesCrossProfileCopyPasteEnum || (exports.CrossProfilePoliciesCrossProfileCopyPasteEnum = {}));
/**
 * Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.
 */
var CrossProfilePoliciesCrossProfileDataSharingEnum;
(function (CrossProfilePoliciesCrossProfileDataSharingEnum) {
    CrossProfilePoliciesCrossProfileDataSharingEnum["CrossProfileDataSharingUnspecified"] = "CROSS_PROFILE_DATA_SHARING_UNSPECIFIED";
    CrossProfilePoliciesCrossProfileDataSharingEnum["CrossProfileDataSharingDisallowed"] = "CROSS_PROFILE_DATA_SHARING_DISALLOWED";
    CrossProfilePoliciesCrossProfileDataSharingEnum["DataSharingFromWorkToPersonalDisallowed"] = "DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED";
    CrossProfilePoliciesCrossProfileDataSharingEnum["CrossProfileDataSharingAllowed"] = "CROSS_PROFILE_DATA_SHARING_ALLOWED";
})(CrossProfilePoliciesCrossProfileDataSharingEnum = exports.CrossProfilePoliciesCrossProfileDataSharingEnum || (exports.CrossProfilePoliciesCrossProfileDataSharingEnum = {}));
/**
 * Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls.
 */
var CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum;
(function (CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum) {
    CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum["ShowWorkContactsInPersonalProfileUnspecified"] = "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED";
    CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum["ShowWorkContactsInPersonalProfileDisallowed"] = "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED";
    CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum["ShowWorkContactsInPersonalProfileAllowed"] = "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED";
})(CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum = exports.CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum || (exports.CrossProfilePoliciesShowWorkContactsInPersonalProfileEnum = {}));
/**
 * Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here.
 */
var CrossProfilePoliciesWorkProfileWidgetsDefaultEnum;
(function (CrossProfilePoliciesWorkProfileWidgetsDefaultEnum) {
    CrossProfilePoliciesWorkProfileWidgetsDefaultEnum["WorkProfileWidgetsDefaultUnspecified"] = "WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED";
    CrossProfilePoliciesWorkProfileWidgetsDefaultEnum["WorkProfileWidgetsDefaultAllowed"] = "WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED";
    CrossProfilePoliciesWorkProfileWidgetsDefaultEnum["WorkProfileWidgetsDefaultDisallowed"] = "WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED";
})(CrossProfilePoliciesWorkProfileWidgetsDefaultEnum = exports.CrossProfilePoliciesWorkProfileWidgetsDefaultEnum || (exports.CrossProfilePoliciesWorkProfileWidgetsDefaultEnum = {}));
/**
 * Cross-profile policies applied on the device.
 */
var CrossProfilePolicies = /** @class */ (function (_super) {
    __extends(CrossProfilePolicies, _super);
    function CrossProfilePolicies() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "crossProfileCopyPaste" }),
        __metadata("design:type", String)
    ], CrossProfilePolicies.prototype, "crossProfileCopyPaste", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "crossProfileDataSharing" }),
        __metadata("design:type", String)
    ], CrossProfilePolicies.prototype, "crossProfileDataSharing", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "showWorkContactsInPersonalProfile" }),
        __metadata("design:type", String)
    ], CrossProfilePolicies.prototype, "showWorkContactsInPersonalProfile", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workProfileWidgetsDefault" }),
        __metadata("design:type", String)
    ], CrossProfilePolicies.prototype, "workProfileWidgetsDefault", void 0);
    return CrossProfilePolicies;
}(utils_1.SpeakeasyBase));
exports.CrossProfilePolicies = CrossProfilePolicies;
