/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://events.twilio.com",
	};
    /**
	 * CREATE_SINK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SINK_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * CREATE_SINK_TEST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SINK_TEST_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * CREATE_SINK_VALIDATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SINK_VALIDATE_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * CREATE_SUBSCRIBED_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SUBSCRIBED_EVENT_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * CREATE_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SUBSCRIPTION_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * DELETE_SINK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SINK_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * DELETE_SUBSCRIBED_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SUBSCRIBED_EVENT_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * DELETE_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SUBSCRIPTION_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * FETCH_EVENT_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EVENT_TYPE_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * FETCH_SCHEMA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SCHEMA_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * FETCH_SCHEMA_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SCHEMA_VERSION_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * FETCH_SINK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SINK_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * FETCH_SUBSCRIBED_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SUBSCRIBED_EVENT_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * FETCH_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SUBSCRIPTION_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * LIST_EVENT_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EVENT_TYPE_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * LIST_SCHEMA_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SCHEMA_VERSION_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * LIST_SINK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SINK_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * LIST_SUBSCRIBED_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SUBSCRIBED_EVENT_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * LIST_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SUBSCRIPTION_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * UPDATE_SINK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SINK_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * UPDATE_SUBSCRIBED_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SUBSCRIBED_EVENT_SERVERS = {
        "https://events.twilio.com",
    };
	
    /**
	 * UPDATE_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SUBSCRIPTION_SERVERS = {
        "https://events.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new Sink
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSinkResponse createSink(org.openapis.openapi.models.operations.CreateSinkRequest request) throws Exception {
        String baseUrl = CREATE_SINK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Sinks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSinkResponse res = new org.openapis.openapi.models.operations.CreateSinkResponse() {{
            eventsV1Sink = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Sink out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Sink.class);
                res.eventsV1Sink = out;
            }
        }

        return res;
    }

    /**
     * Create a new Sink Test Event for the given Sink.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSinkTestResponse createSinkTest(org.openapis.openapi.models.operations.CreateSinkTestRequest request) throws Exception {
        String baseUrl = CREATE_SINK_TEST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSinkTestPathParams.class, baseUrl, "/v1/Sinks/{Sid}/Test", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSinkTestResponse res = new org.openapis.openapi.models.operations.CreateSinkTestResponse() {{
            eventsV1SinkSinkTest = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1SinkSinkTest out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1SinkSinkTest.class);
                res.eventsV1SinkSinkTest = out;
            }
        }

        return res;
    }

    /**
     * Validate that a test event for a Sink was received.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSinkValidateResponse createSinkValidate(org.openapis.openapi.models.operations.CreateSinkValidateRequest request) throws Exception {
        String baseUrl = CREATE_SINK_VALIDATE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSinkValidatePathParams.class, baseUrl, "/v1/Sinks/{Sid}/Validate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSinkValidateResponse res = new org.openapis.openapi.models.operations.CreateSinkValidateResponse() {{
            eventsV1SinkSinkValidate = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1SinkSinkValidate out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1SinkSinkValidate.class);
                res.eventsV1SinkSinkValidate = out;
            }
        }

        return res;
    }

    /**
     * Create a new Subscribed Event type for the subscription
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSubscribedEventResponse createSubscribedEvent(org.openapis.openapi.models.operations.CreateSubscribedEventRequest request) throws Exception {
        String baseUrl = CREATE_SUBSCRIBED_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSubscribedEventPathParams.class, baseUrl, "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSubscribedEventResponse res = new org.openapis.openapi.models.operations.CreateSubscribedEventResponse() {{
            eventsV1SubscriptionSubscribedEvent = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1SubscriptionSubscribedEvent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1SubscriptionSubscribedEvent.class);
                res.eventsV1SubscriptionSubscribedEvent = out;
            }
        }

        return res;
    }

    /**
     * Create a new Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSubscriptionResponse createSubscription(org.openapis.openapi.models.operations.CreateSubscriptionRequest request) throws Exception {
        String baseUrl = CREATE_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Subscriptions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSubscriptionResponse res = new org.openapis.openapi.models.operations.CreateSubscriptionResponse() {{
            eventsV1Subscription = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Subscription.class);
                res.eventsV1Subscription = out;
            }
        }

        return res;
    }

    /**
     * Delete a specific Sink.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSinkResponse deleteSink(org.openapis.openapi.models.operations.DeleteSinkRequest request) throws Exception {
        String baseUrl = DELETE_SINK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSinkPathParams.class, baseUrl, "/v1/Sinks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSinkResponse res = new org.openapis.openapi.models.operations.DeleteSinkResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an event type from a subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSubscribedEventResponse deleteSubscribedEvent(org.openapis.openapi.models.operations.DeleteSubscribedEventRequest request) throws Exception {
        String baseUrl = DELETE_SUBSCRIBED_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSubscribedEventPathParams.class, baseUrl, "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSubscribedEventResponse res = new org.openapis.openapi.models.operations.DeleteSubscribedEventResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSubscriptionResponse deleteSubscription(org.openapis.openapi.models.operations.DeleteSubscriptionRequest request) throws Exception {
        String baseUrl = DELETE_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSubscriptionPathParams.class, baseUrl, "/v1/Subscriptions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSubscriptionResponse res = new org.openapis.openapi.models.operations.DeleteSubscriptionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch a specific Event Type.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEventTypeResponse fetchEventType(org.openapis.openapi.models.operations.FetchEventTypeRequest request) throws Exception {
        String baseUrl = FETCH_EVENT_TYPE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEventTypePathParams.class, baseUrl, "/v1/Types/{Type}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEventTypeResponse res = new org.openapis.openapi.models.operations.FetchEventTypeResponse() {{
            eventsV1EventType = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1EventType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1EventType.class);
                res.eventsV1EventType = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific schema with its nested versions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSchemaResponse fetchSchema(org.openapis.openapi.models.operations.FetchSchemaRequest request) throws Exception {
        String baseUrl = FETCH_SCHEMA_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSchemaPathParams.class, baseUrl, "/v1/Schemas/{Id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSchemaResponse res = new org.openapis.openapi.models.operations.FetchSchemaResponse() {{
            eventsV1Schema = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Schema out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Schema.class);
                res.eventsV1Schema = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific schema and version.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSchemaVersionResponse fetchSchemaVersion(org.openapis.openapi.models.operations.FetchSchemaVersionRequest request) throws Exception {
        String baseUrl = FETCH_SCHEMA_VERSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSchemaVersionPathParams.class, baseUrl, "/v1/Schemas/{Id}/Versions/{SchemaVersion}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSchemaVersionResponse res = new org.openapis.openapi.models.operations.FetchSchemaVersionResponse() {{
            eventsV1SchemaSchemaVersion = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1SchemaSchemaVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1SchemaSchemaVersion.class);
                res.eventsV1SchemaSchemaVersion = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sink.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSinkResponse fetchSink(org.openapis.openapi.models.operations.FetchSinkRequest request) throws Exception {
        String baseUrl = FETCH_SINK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSinkPathParams.class, baseUrl, "/v1/Sinks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSinkResponse res = new org.openapis.openapi.models.operations.FetchSinkResponse() {{
            eventsV1Sink = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Sink out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Sink.class);
                res.eventsV1Sink = out;
            }
        }

        return res;
    }

    /**
     * Read an Event for a Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSubscribedEventResponse fetchSubscribedEvent(org.openapis.openapi.models.operations.FetchSubscribedEventRequest request) throws Exception {
        String baseUrl = FETCH_SUBSCRIBED_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSubscribedEventPathParams.class, baseUrl, "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSubscribedEventResponse res = new org.openapis.openapi.models.operations.FetchSubscribedEventResponse() {{
            eventsV1SubscriptionSubscribedEvent = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1SubscriptionSubscribedEvent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1SubscriptionSubscribedEvent.class);
                res.eventsV1SubscriptionSubscribedEvent = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSubscriptionResponse fetchSubscription(org.openapis.openapi.models.operations.FetchSubscriptionRequest request) throws Exception {
        String baseUrl = FETCH_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSubscriptionPathParams.class, baseUrl, "/v1/Subscriptions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSubscriptionResponse res = new org.openapis.openapi.models.operations.FetchSubscriptionResponse() {{
            eventsV1Subscription = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Subscription.class);
                res.eventsV1Subscription = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a paginated list of all the available Event Types.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEventTypeResponse listEventType(org.openapis.openapi.models.operations.ListEventTypeRequest request) throws Exception {
        String baseUrl = LIST_EVENT_TYPE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Types");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEventTypeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEventTypeResponse res = new org.openapis.openapi.models.operations.ListEventTypeResponse() {{
            listEventTypeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEventTypeListEventTypeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEventTypeListEventTypeResponse.class);
                res.listEventTypeResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a paginated list of versions of the schema.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSchemaVersionResponse listSchemaVersion(org.openapis.openapi.models.operations.ListSchemaVersionRequest request) throws Exception {
        String baseUrl = LIST_SCHEMA_VERSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSchemaVersionPathParams.class, baseUrl, "/v1/Schemas/{Id}/Versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSchemaVersionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSchemaVersionResponse res = new org.openapis.openapi.models.operations.ListSchemaVersionResponse() {{
            listSchemaVersionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSchemaVersionListSchemaVersionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSchemaVersionListSchemaVersionResponse.class);
                res.listSchemaVersionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a paginated list of Sinks belonging to the account used to make the request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSinkResponse listSink(org.openapis.openapi.models.operations.ListSinkRequest request) throws Exception {
        String baseUrl = LIST_SINK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Sinks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSinkQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSinkResponse res = new org.openapis.openapi.models.operations.ListSinkResponse() {{
            listSinkResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSinkListSinkResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSinkListSinkResponse.class);
                res.listSinkResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Subscribed Event types for a Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSubscribedEventResponse listSubscribedEvent(org.openapis.openapi.models.operations.ListSubscribedEventRequest request) throws Exception {
        String baseUrl = LIST_SUBSCRIBED_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSubscribedEventPathParams.class, baseUrl, "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSubscribedEventQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSubscribedEventResponse res = new org.openapis.openapi.models.operations.ListSubscribedEventResponse() {{
            listSubscribedEventResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSubscribedEventListSubscribedEventResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSubscribedEventListSubscribedEventResponse.class);
                res.listSubscribedEventResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a paginated list of Subscriptions belonging to the account used to make the request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSubscriptionResponse listSubscription(org.openapis.openapi.models.operations.ListSubscriptionRequest request) throws Exception {
        String baseUrl = LIST_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Subscriptions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSubscriptionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSubscriptionResponse res = new org.openapis.openapi.models.operations.ListSubscriptionResponse() {{
            listSubscriptionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSubscriptionListSubscriptionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSubscriptionListSubscriptionResponse.class);
                res.listSubscriptionResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Sink
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSinkResponse updateSink(org.openapis.openapi.models.operations.UpdateSinkRequest request) throws Exception {
        String baseUrl = UPDATE_SINK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSinkPathParams.class, baseUrl, "/v1/Sinks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSinkResponse res = new org.openapis.openapi.models.operations.UpdateSinkResponse() {{
            eventsV1Sink = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Sink out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Sink.class);
                res.eventsV1Sink = out;
            }
        }

        return res;
    }

    /**
     * Update an Event for a Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSubscribedEventResponse updateSubscribedEvent(org.openapis.openapi.models.operations.UpdateSubscribedEventRequest request) throws Exception {
        String baseUrl = UPDATE_SUBSCRIBED_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSubscribedEventPathParams.class, baseUrl, "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSubscribedEventResponse res = new org.openapis.openapi.models.operations.UpdateSubscribedEventResponse() {{
            eventsV1SubscriptionSubscribedEvent = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1SubscriptionSubscribedEvent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1SubscriptionSubscribedEvent.class);
                res.eventsV1SubscriptionSubscribedEvent = out;
            }
        }

        return res;
    }

    /**
     * Update a Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSubscriptionResponse updateSubscription(org.openapis.openapi.models.operations.UpdateSubscriptionRequest request) throws Exception {
        String baseUrl = UPDATE_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSubscriptionPathParams.class, baseUrl, "/v1/Subscriptions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSubscriptionResponse res = new org.openapis.openapi.models.operations.UpdateSubscriptionResponse() {{
            eventsV1Subscription = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventsV1Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventsV1Subscription.class);
                res.eventsV1Subscription = out;
            }
        }

        return res;
    }
}