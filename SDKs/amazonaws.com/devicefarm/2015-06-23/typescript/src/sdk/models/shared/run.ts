/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BillingMethodEnum } from "./billingmethodenum";
import { Counters } from "./counters";
import { CustomerArtifactPaths } from "./customerartifactpaths";
import { DeviceMinutes } from "./deviceminutes";
import { DevicePlatformEnum } from "./deviceplatformenum";
import { DeviceSelectionResult } from "./deviceselectionresult";
import { ExecutionResultCodeEnum } from "./executionresultcodeenum";
import { ExecutionResultEnum } from "./executionresultenum";
import { ExecutionStatusEnum } from "./executionstatusenum";
import { Location } from "./location";
import { NetworkProfile } from "./networkprofile";
import { Radios } from "./radios";
import { TestTypeEnum } from "./testtypeenum";
import { VpcConfig } from "./vpcconfig";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents a test run on a set of devices with a given app package, test parameters, and so on.
 */
export class Run extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appUpload" })
  appUpload?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "billingMethod" })
  billingMethod?: BillingMethodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "completedJobs" })
  completedJobs?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "counters" })
  @Type(() => Counters)
  counters?: Counters;

  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "customerArtifactPaths" })
  @Type(() => CustomerArtifactPaths)
  customerArtifactPaths?: CustomerArtifactPaths;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceMinutes" })
  @Type(() => DeviceMinutes)
  deviceMinutes?: DeviceMinutes;

  @SpeakeasyMetadata()
  @Expose({ name: "devicePoolArn" })
  devicePoolArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceSelectionResult" })
  @Type(() => DeviceSelectionResult)
  deviceSelectionResult?: DeviceSelectionResult;

  @SpeakeasyMetadata()
  @Expose({ name: "eventCount" })
  eventCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "jobTimeoutMinutes" })
  jobTimeoutMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => Location)
  location?: Location;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "networkProfile" })
  @Type(() => NetworkProfile)
  networkProfile?: NetworkProfile;

  @SpeakeasyMetadata()
  @Expose({ name: "parsingResultUrl" })
  parsingResultUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform?: DevicePlatformEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "radios" })
  @Type(() => Radios)
  radios?: Radios;

  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  result?: ExecutionResultEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "resultCode" })
  resultCode?: ExecutionResultCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "seed" })
  seed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "skipAppResign" })
  skipAppResign?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  started?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ExecutionStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "stopped" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  stopped?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "testSpecArn" })
  testSpecArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "totalJobs" })
  totalJobs?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: TestTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "vpcConfig" })
  @Type(() => VpcConfig)
  vpcConfig?: VpcConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "webUrl" })
  webUrl?: string;
}
