"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import editorialupdatedresults as shared_editorialupdatedresults
from ..shared import security as shared_security
from datetime import date, datetime
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetUpdatedEditorialImageSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetUpdatedEditorialImageSortEnum(str, Enum):
    r"""Sort by"""
    NEWEST = 'newest'
    OLDEST = 'oldest'

class GetUpdatedEditorialImageTypeEnum(str, Enum):
    r"""Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted"""
    EDIT = 'edit'
    ADDITION = 'addition'


@dataclasses.dataclass
class GetUpdatedEditorialImageRequest:
    
    country: str = dataclasses.field(metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Show only editorial content that is available for distribution in a certain country"""  
    date_updated_end: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'date_updated_end', 'style': 'form', 'explode': True }})
    r"""Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00."""  
    date_updated_start: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'date_updated_start', 'style': 'form', 'explode': True }})
    r"""Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00."""  
    type: GetUpdatedEditorialImageTypeEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted"""  
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""The cursor of the page with which to start fetching results; this cursor is returned from previous requests"""  
    date_taken_end: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_taken_end', 'style': 'form', 'explode': True }})
    r"""Show images that were taken before the specified date"""  
    date_taken_start: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_taken_start', 'style': 'form', 'explode': True }})
    r"""Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    sort: Optional[GetUpdatedEditorialImageSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort by"""  
    supplier_code: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'supplier_code', 'style': 'form', 'explode': True }})
    r"""Show only editorial content from certain suppliers"""  
    

@dataclasses.dataclass
class GetUpdatedEditorialImageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    editorial_updated_results: Optional[shared_editorialupdatedresults.EditorialUpdatedResults] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    