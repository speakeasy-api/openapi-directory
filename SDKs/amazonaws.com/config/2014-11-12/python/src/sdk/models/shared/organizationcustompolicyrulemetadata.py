"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import maximumexecutionfrequency_enum as shared_maximumexecutionfrequency_enum
from ..shared import organizationconfigruletriggertypenosn_enum as shared_organizationconfigruletriggertypenosn_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganizationCustomPolicyRuleMetadata:
    r"""An object that specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have debug logging enabled, and other custom rule metadata, such as resource type, resource ID of Amazon Web Services resource, and organization trigger types that initiate Config to evaluate Amazon Web Services resources against a rule."""
    
    policy_runtime: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyRuntime') }})  
    policy_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyText') }})  
    debug_log_delivery_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebugLogDeliveryAccounts'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    input_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputParameters'), 'exclude': lambda f: f is None }})  
    maximum_execution_frequency: Optional[shared_maximumexecutionfrequency_enum.MaximumExecutionFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumExecutionFrequency'), 'exclude': lambda f: f is None }})  
    organization_config_rule_trigger_types: Optional[list[shared_organizationconfigruletriggertypenosn_enum.OrganizationConfigRuleTriggerTypeNoSNEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationConfigRuleTriggerTypes'), 'exclude': lambda f: f is None }})  
    resource_id_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceIdScope'), 'exclude': lambda f: f is None }})  
    resource_types_scope: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTypesScope'), 'exclude': lambda f: f is None }})  
    tag_key_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagKeyScope'), 'exclude': lambda f: f is None }})  
    tag_value_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagValueScope'), 'exclude': lambda f: f is None }})  
    