// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateExperimentXAmzTargetEnum
type UpdateExperimentXAmzTargetEnum string

const (
	UpdateExperimentXAmzTargetEnumSageMakerUpdateExperiment UpdateExperimentXAmzTargetEnum = "SageMaker.UpdateExperiment"
)

func (e UpdateExperimentXAmzTargetEnum) ToPointer() *UpdateExperimentXAmzTargetEnum {
	return &e
}

func (e *UpdateExperimentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.UpdateExperiment":
		*e = UpdateExperimentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateExperimentXAmzTargetEnum: %v", v)
	}
}

type UpdateExperimentRequest struct {
	UpdateExperimentRequest shared.UpdateExperimentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              UpdateExperimentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateExperimentResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
	// Success
	UpdateExperimentResponse *shared.UpdateExperimentResponse
}
