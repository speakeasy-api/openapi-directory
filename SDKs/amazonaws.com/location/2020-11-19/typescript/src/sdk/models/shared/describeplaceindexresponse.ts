/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DataSourceConfiguration } from "./datasourceconfiguration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * No longer used. Always returns <code>RequestBasedUsage</code>.Deprecated. Always returns RequestBasedUsage.
 */
export enum DescribePlaceIndexResponsePricingPlanEnum {
  RequestBasedUsage = "RequestBasedUsage",
  MobileAssetTracking = "MobileAssetTracking",
  MobileAssetManagement = "MobileAssetManagement",
}

/**
 * Success
 */
export class DescribePlaceIndexResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DataSource" })
  dataSource: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DataSourceConfiguration" })
  @Type(() => DataSourceConfiguration)
  dataSourceConfiguration: DataSourceConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "IndexArn" })
  indexArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "IndexName" })
  indexName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PricingPlan" })
  pricingPlan?: DescribePlaceIndexResponsePricingPlanEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updateTime: Date;
}
