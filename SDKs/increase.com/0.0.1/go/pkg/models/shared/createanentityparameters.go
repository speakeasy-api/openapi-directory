// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CreateAnEntityParametersCorporationAddress - The corporation's address.
type CreateAnEntityParametersCorporationAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress - The individual's address.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense - Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense struct {
	// The driver's license's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the driver's license.
	FileID string `json:"file_id"`
	// The state that issued the provided driver's license.
	State string `json:"state"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum string

const (
	CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnumSocialSecurityNumber                   CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum = "social_security_number"
	CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnumPassport                               CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum = "passport"
	CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnumDriversLicense                         CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum = "drivers_license"
	CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnumOther                                  CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum = "other"
)

func (e *CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum: %s", s)
	}
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther - Information about the identification document provided. Required if `method` is equal to `other`.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther struct {
	// The two-character ISO 3166-1 code representing the country that issued the document.
	Country string `json:"country"`
	// A description of the document submitted.
	Description string `json:"description"`
	// The document's expiration date in YYYY-MM-DD format.
	ExpirationDate *types.Date `json:"expiration_date,omitempty"`
	// The identifier of the File containing the document.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport - Information about the passport used for identification. Required if `method` is equal to `passport`.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport struct {
	// The country that issued the passport.
	Country string `json:"country"`
	// The passport's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the passport.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification - A means of verifying the person's identity.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification struct {
	// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
	DriversLicense *CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense `json:"drivers_license,omitempty"`
	// A method that can be used to verify the individual's identity.
	Method CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum `json:"method"`
	// An identification number that can be used to verify the individual's identity, such as a social security number.
	Number string `json:"number"`
	// Information about the identification document provided. Required if `method` is equal to `other`.
	Other *CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther `json:"other,omitempty"`
	// Information about the passport used for identification. Required if `method` is equal to `passport`.
	Passport *CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport `json:"passport,omitempty"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersIndividual - Personal details for the beneficial owner.
type CreateAnEntityParametersCorporationBeneficialOwnersIndividual struct {
	// The individual's address.
	Address CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress `json:"address"`
	// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
	ConfirmedNoUsTaxID *bool `json:"confirmed_no_us_tax_id,omitempty"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// CreateAnEntityParametersCorporationBeneficialOwnersProngEnum - Why this person is considered a beneficial owner of the entity.
type CreateAnEntityParametersCorporationBeneficialOwnersProngEnum string

const (
	CreateAnEntityParametersCorporationBeneficialOwnersProngEnumOwnership CreateAnEntityParametersCorporationBeneficialOwnersProngEnum = "ownership"
	CreateAnEntityParametersCorporationBeneficialOwnersProngEnumControl   CreateAnEntityParametersCorporationBeneficialOwnersProngEnum = "control"
)

func (e *CreateAnEntityParametersCorporationBeneficialOwnersProngEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ownership":
		fallthrough
	case "control":
		*e = CreateAnEntityParametersCorporationBeneficialOwnersProngEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersCorporationBeneficialOwnersProngEnum: %s", s)
	}
}

type CreateAnEntityParametersCorporationBeneficialOwners struct {
	// This person's role or title within the entity.
	CompanyTitle *string `json:"company_title,omitempty"`
	// Personal details for the beneficial owner.
	Individual CreateAnEntityParametersCorporationBeneficialOwnersIndividual `json:"individual"`
	// Why this person is considered a beneficial owner of the entity.
	Prong CreateAnEntityParametersCorporationBeneficialOwnersProngEnum `json:"prong"`
}

// CreateAnEntityParametersCorporation - Details of the corporation entity to create. Required if `structure` is equal to `corporation`.
type CreateAnEntityParametersCorporation struct {
	// The corporation's address.
	Address CreateAnEntityParametersCorporationAddress `json:"address"`
	// The identifying details of anyone controlling or owning 25% or more of the corporation.
	BeneficialOwners []CreateAnEntityParametersCorporationBeneficialOwners `json:"beneficial_owners"`
	// The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
	IncorporationState *string `json:"incorporation_state,omitempty"`
	// The legal name of the corporation.
	Name string `json:"name"`
	// The Employer Identification Number (EIN) for the corporation.
	TaxIdentifier string `json:"tax_identifier"`
	// The website of the corporation.
	Website *string `json:"website,omitempty"`
}

// CreateAnEntityParametersJointIndividualsAddress - The individual's address.
type CreateAnEntityParametersJointIndividualsAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersJointIndividualsIdentificationDriversLicense - Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
type CreateAnEntityParametersJointIndividualsIdentificationDriversLicense struct {
	// The driver's license's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the driver's license.
	FileID string `json:"file_id"`
	// The state that issued the provided driver's license.
	State string `json:"state"`
}

// CreateAnEntityParametersJointIndividualsIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type CreateAnEntityParametersJointIndividualsIdentificationMethodEnum string

const (
	CreateAnEntityParametersJointIndividualsIdentificationMethodEnumSocialSecurityNumber                   CreateAnEntityParametersJointIndividualsIdentificationMethodEnum = "social_security_number"
	CreateAnEntityParametersJointIndividualsIdentificationMethodEnumIndividualTaxpayerIdentificationNumber CreateAnEntityParametersJointIndividualsIdentificationMethodEnum = "individual_taxpayer_identification_number"
	CreateAnEntityParametersJointIndividualsIdentificationMethodEnumPassport                               CreateAnEntityParametersJointIndividualsIdentificationMethodEnum = "passport"
	CreateAnEntityParametersJointIndividualsIdentificationMethodEnumDriversLicense                         CreateAnEntityParametersJointIndividualsIdentificationMethodEnum = "drivers_license"
	CreateAnEntityParametersJointIndividualsIdentificationMethodEnumOther                                  CreateAnEntityParametersJointIndividualsIdentificationMethodEnum = "other"
)

func (e *CreateAnEntityParametersJointIndividualsIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = CreateAnEntityParametersJointIndividualsIdentificationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersJointIndividualsIdentificationMethodEnum: %s", s)
	}
}

// CreateAnEntityParametersJointIndividualsIdentificationOther - Information about the identification document provided. Required if `method` is equal to `other`.
type CreateAnEntityParametersJointIndividualsIdentificationOther struct {
	// The two-character ISO 3166-1 code representing the country that issued the document.
	Country string `json:"country"`
	// A description of the document submitted.
	Description string `json:"description"`
	// The document's expiration date in YYYY-MM-DD format.
	ExpirationDate *types.Date `json:"expiration_date,omitempty"`
	// The identifier of the File containing the document.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersJointIndividualsIdentificationPassport - Information about the passport used for identification. Required if `method` is equal to `passport`.
type CreateAnEntityParametersJointIndividualsIdentificationPassport struct {
	// The country that issued the passport.
	Country string `json:"country"`
	// The passport's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the passport.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersJointIndividualsIdentification - A means of verifying the person's identity.
type CreateAnEntityParametersJointIndividualsIdentification struct {
	// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
	DriversLicense *CreateAnEntityParametersJointIndividualsIdentificationDriversLicense `json:"drivers_license,omitempty"`
	// A method that can be used to verify the individual's identity.
	Method CreateAnEntityParametersJointIndividualsIdentificationMethodEnum `json:"method"`
	// An identification number that can be used to verify the individual's identity, such as a social security number.
	Number string `json:"number"`
	// Information about the identification document provided. Required if `method` is equal to `other`.
	Other *CreateAnEntityParametersJointIndividualsIdentificationOther `json:"other,omitempty"`
	// Information about the passport used for identification. Required if `method` is equal to `passport`.
	Passport *CreateAnEntityParametersJointIndividualsIdentificationPassport `json:"passport,omitempty"`
}

type CreateAnEntityParametersJointIndividuals struct {
	// The individual's address.
	Address CreateAnEntityParametersJointIndividualsAddress `json:"address"`
	// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
	ConfirmedNoUsTaxID *bool `json:"confirmed_no_us_tax_id,omitempty"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification CreateAnEntityParametersJointIndividualsIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// CreateAnEntityParametersJoint - Details of the joint entity to create. Required if `structure` is equal to `joint`.
type CreateAnEntityParametersJoint struct {
	// The two individuals that share control of the entity.
	Individuals []CreateAnEntityParametersJointIndividuals `json:"individuals"`
	// The name of the joint entity.
	Name *string `json:"name,omitempty"`
}

// CreateAnEntityParametersNaturalPersonAddress - The individual's address.
type CreateAnEntityParametersNaturalPersonAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersNaturalPersonIdentificationDriversLicense - Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
type CreateAnEntityParametersNaturalPersonIdentificationDriversLicense struct {
	// The driver's license's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the driver's license.
	FileID string `json:"file_id"`
	// The state that issued the provided driver's license.
	State string `json:"state"`
}

// CreateAnEntityParametersNaturalPersonIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type CreateAnEntityParametersNaturalPersonIdentificationMethodEnum string

const (
	CreateAnEntityParametersNaturalPersonIdentificationMethodEnumSocialSecurityNumber                   CreateAnEntityParametersNaturalPersonIdentificationMethodEnum = "social_security_number"
	CreateAnEntityParametersNaturalPersonIdentificationMethodEnumIndividualTaxpayerIdentificationNumber CreateAnEntityParametersNaturalPersonIdentificationMethodEnum = "individual_taxpayer_identification_number"
	CreateAnEntityParametersNaturalPersonIdentificationMethodEnumPassport                               CreateAnEntityParametersNaturalPersonIdentificationMethodEnum = "passport"
	CreateAnEntityParametersNaturalPersonIdentificationMethodEnumDriversLicense                         CreateAnEntityParametersNaturalPersonIdentificationMethodEnum = "drivers_license"
	CreateAnEntityParametersNaturalPersonIdentificationMethodEnumOther                                  CreateAnEntityParametersNaturalPersonIdentificationMethodEnum = "other"
)

func (e *CreateAnEntityParametersNaturalPersonIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = CreateAnEntityParametersNaturalPersonIdentificationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersNaturalPersonIdentificationMethodEnum: %s", s)
	}
}

// CreateAnEntityParametersNaturalPersonIdentificationOther - Information about the identification document provided. Required if `method` is equal to `other`.
type CreateAnEntityParametersNaturalPersonIdentificationOther struct {
	// The two-character ISO 3166-1 code representing the country that issued the document.
	Country string `json:"country"`
	// A description of the document submitted.
	Description string `json:"description"`
	// The document's expiration date in YYYY-MM-DD format.
	ExpirationDate *types.Date `json:"expiration_date,omitempty"`
	// The identifier of the File containing the document.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersNaturalPersonIdentificationPassport - Information about the passport used for identification. Required if `method` is equal to `passport`.
type CreateAnEntityParametersNaturalPersonIdentificationPassport struct {
	// The country that issued the passport.
	Country string `json:"country"`
	// The passport's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the passport.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersNaturalPersonIdentification - A means of verifying the person's identity.
type CreateAnEntityParametersNaturalPersonIdentification struct {
	// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
	DriversLicense *CreateAnEntityParametersNaturalPersonIdentificationDriversLicense `json:"drivers_license,omitempty"`
	// A method that can be used to verify the individual's identity.
	Method CreateAnEntityParametersNaturalPersonIdentificationMethodEnum `json:"method"`
	// An identification number that can be used to verify the individual's identity, such as a social security number.
	Number string `json:"number"`
	// Information about the identification document provided. Required if `method` is equal to `other`.
	Other *CreateAnEntityParametersNaturalPersonIdentificationOther `json:"other,omitempty"`
	// Information about the passport used for identification. Required if `method` is equal to `passport`.
	Passport *CreateAnEntityParametersNaturalPersonIdentificationPassport `json:"passport,omitempty"`
}

// CreateAnEntityParametersNaturalPerson - Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.
type CreateAnEntityParametersNaturalPerson struct {
	// The individual's address.
	Address CreateAnEntityParametersNaturalPersonAddress `json:"address"`
	// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
	ConfirmedNoUsTaxID *bool `json:"confirmed_no_us_tax_id,omitempty"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification CreateAnEntityParametersNaturalPersonIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// CreateAnEntityParametersRelationshipEnum - The relationship between your group and the entity.
type CreateAnEntityParametersRelationshipEnum string

const (
	CreateAnEntityParametersRelationshipEnumAffiliated    CreateAnEntityParametersRelationshipEnum = "affiliated"
	CreateAnEntityParametersRelationshipEnumInformational CreateAnEntityParametersRelationshipEnum = "informational"
	CreateAnEntityParametersRelationshipEnumUnaffiliated  CreateAnEntityParametersRelationshipEnum = "unaffiliated"
)

func (e *CreateAnEntityParametersRelationshipEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "affiliated":
		fallthrough
	case "informational":
		fallthrough
	case "unaffiliated":
		*e = CreateAnEntityParametersRelationshipEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersRelationshipEnum: %s", s)
	}
}

// CreateAnEntityParametersStructureEnum - The type of Entity to create.
type CreateAnEntityParametersStructureEnum string

const (
	CreateAnEntityParametersStructureEnumCorporation   CreateAnEntityParametersStructureEnum = "corporation"
	CreateAnEntityParametersStructureEnumNaturalPerson CreateAnEntityParametersStructureEnum = "natural_person"
	CreateAnEntityParametersStructureEnumJoint         CreateAnEntityParametersStructureEnum = "joint"
	CreateAnEntityParametersStructureEnumTrust         CreateAnEntityParametersStructureEnum = "trust"
)

func (e *CreateAnEntityParametersStructureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "corporation":
		fallthrough
	case "natural_person":
		fallthrough
	case "joint":
		fallthrough
	case "trust":
		*e = CreateAnEntityParametersStructureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersStructureEnum: %s", s)
	}
}

type CreateAnEntityParametersSupplementalDocuments struct {
	// The identifier of the File containing the document.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersTrustAddress - The trust's address.
type CreateAnEntityParametersTrustAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersTrustCategoryEnum - Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
type CreateAnEntityParametersTrustCategoryEnum string

const (
	CreateAnEntityParametersTrustCategoryEnumRevocable   CreateAnEntityParametersTrustCategoryEnum = "revocable"
	CreateAnEntityParametersTrustCategoryEnumIrrevocable CreateAnEntityParametersTrustCategoryEnum = "irrevocable"
)

func (e *CreateAnEntityParametersTrustCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "revocable":
		fallthrough
	case "irrevocable":
		*e = CreateAnEntityParametersTrustCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersTrustCategoryEnum: %s", s)
	}
}

// CreateAnEntityParametersTrustGrantorAddress - The individual's address.
type CreateAnEntityParametersTrustGrantorAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersTrustGrantorIdentificationDriversLicense - Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
type CreateAnEntityParametersTrustGrantorIdentificationDriversLicense struct {
	// The driver's license's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the driver's license.
	FileID string `json:"file_id"`
	// The state that issued the provided driver's license.
	State string `json:"state"`
}

// CreateAnEntityParametersTrustGrantorIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type CreateAnEntityParametersTrustGrantorIdentificationMethodEnum string

const (
	CreateAnEntityParametersTrustGrantorIdentificationMethodEnumSocialSecurityNumber                   CreateAnEntityParametersTrustGrantorIdentificationMethodEnum = "social_security_number"
	CreateAnEntityParametersTrustGrantorIdentificationMethodEnumIndividualTaxpayerIdentificationNumber CreateAnEntityParametersTrustGrantorIdentificationMethodEnum = "individual_taxpayer_identification_number"
	CreateAnEntityParametersTrustGrantorIdentificationMethodEnumPassport                               CreateAnEntityParametersTrustGrantorIdentificationMethodEnum = "passport"
	CreateAnEntityParametersTrustGrantorIdentificationMethodEnumDriversLicense                         CreateAnEntityParametersTrustGrantorIdentificationMethodEnum = "drivers_license"
	CreateAnEntityParametersTrustGrantorIdentificationMethodEnumOther                                  CreateAnEntityParametersTrustGrantorIdentificationMethodEnum = "other"
)

func (e *CreateAnEntityParametersTrustGrantorIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = CreateAnEntityParametersTrustGrantorIdentificationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersTrustGrantorIdentificationMethodEnum: %s", s)
	}
}

// CreateAnEntityParametersTrustGrantorIdentificationOther - Information about the identification document provided. Required if `method` is equal to `other`.
type CreateAnEntityParametersTrustGrantorIdentificationOther struct {
	// The two-character ISO 3166-1 code representing the country that issued the document.
	Country string `json:"country"`
	// A description of the document submitted.
	Description string `json:"description"`
	// The document's expiration date in YYYY-MM-DD format.
	ExpirationDate *types.Date `json:"expiration_date,omitempty"`
	// The identifier of the File containing the document.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersTrustGrantorIdentificationPassport - Information about the passport used for identification. Required if `method` is equal to `passport`.
type CreateAnEntityParametersTrustGrantorIdentificationPassport struct {
	// The country that issued the passport.
	Country string `json:"country"`
	// The passport's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the passport.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersTrustGrantorIdentification - A means of verifying the person's identity.
type CreateAnEntityParametersTrustGrantorIdentification struct {
	// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
	DriversLicense *CreateAnEntityParametersTrustGrantorIdentificationDriversLicense `json:"drivers_license,omitempty"`
	// A method that can be used to verify the individual's identity.
	Method CreateAnEntityParametersTrustGrantorIdentificationMethodEnum `json:"method"`
	// An identification number that can be used to verify the individual's identity, such as a social security number.
	Number string `json:"number"`
	// Information about the identification document provided. Required if `method` is equal to `other`.
	Other *CreateAnEntityParametersTrustGrantorIdentificationOther `json:"other,omitempty"`
	// Information about the passport used for identification. Required if `method` is equal to `passport`.
	Passport *CreateAnEntityParametersTrustGrantorIdentificationPassport `json:"passport,omitempty"`
}

// CreateAnEntityParametersTrustGrantor - The grantor of the trust. Required if `category` is equal to `revocable`.
type CreateAnEntityParametersTrustGrantor struct {
	// The individual's address.
	Address CreateAnEntityParametersTrustGrantorAddress `json:"address"`
	// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
	ConfirmedNoUsTaxID *bool `json:"confirmed_no_us_tax_id,omitempty"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification CreateAnEntityParametersTrustGrantorIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// CreateAnEntityParametersTrustTrusteesIndividualAddress - The individual's address.
type CreateAnEntityParametersTrustTrusteesIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address. This is usually the street number and street.
	Line1 string `json:"line1"`
	// The second line of the address. This might be the floor or room number.
	Line2 *string `json:"line2,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense - Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
type CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense struct {
	// The driver's license's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the driver's license.
	FileID string `json:"file_id"`
	// The state that issued the provided driver's license.
	State string `json:"state"`
}

// CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum string

const (
	CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnumSocialSecurityNumber                   CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum = "social_security_number"
	CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnumPassport                               CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum = "passport"
	CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnumDriversLicense                         CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum = "drivers_license"
	CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnumOther                                  CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum = "other"
)

func (e *CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum: %s", s)
	}
}

// CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther - Information about the identification document provided. Required if `method` is equal to `other`.
type CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther struct {
	// The two-character ISO 3166-1 code representing the country that issued the document.
	Country string `json:"country"`
	// A description of the document submitted.
	Description string `json:"description"`
	// The document's expiration date in YYYY-MM-DD format.
	ExpirationDate *types.Date `json:"expiration_date,omitempty"`
	// The identifier of the File containing the document.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport - Information about the passport used for identification. Required if `method` is equal to `passport`.
type CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport struct {
	// The country that issued the passport.
	Country string `json:"country"`
	// The passport's expiration date in YYYY-MM-DD format.
	ExpirationDate types.Date `json:"expiration_date"`
	// The identifier of the File containing the passport.
	FileID string `json:"file_id"`
}

// CreateAnEntityParametersTrustTrusteesIndividualIdentification - A means of verifying the person's identity.
type CreateAnEntityParametersTrustTrusteesIndividualIdentification struct {
	// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
	DriversLicense *CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense `json:"drivers_license,omitempty"`
	// A method that can be used to verify the individual's identity.
	Method CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum `json:"method"`
	// An identification number that can be used to verify the individual's identity, such as a social security number.
	Number string `json:"number"`
	// Information about the identification document provided. Required if `method` is equal to `other`.
	Other *CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther `json:"other,omitempty"`
	// Information about the passport used for identification. Required if `method` is equal to `passport`.
	Passport *CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport `json:"passport,omitempty"`
}

// CreateAnEntityParametersTrustTrusteesIndividual - Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.
type CreateAnEntityParametersTrustTrusteesIndividual struct {
	// The individual's address.
	Address CreateAnEntityParametersTrustTrusteesIndividualAddress `json:"address"`
	// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
	ConfirmedNoUsTaxID *bool `json:"confirmed_no_us_tax_id,omitempty"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification CreateAnEntityParametersTrustTrusteesIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// CreateAnEntityParametersTrustTrusteesStructureEnum - The structure of the trustee.
type CreateAnEntityParametersTrustTrusteesStructureEnum string

const (
	CreateAnEntityParametersTrustTrusteesStructureEnumIndividual CreateAnEntityParametersTrustTrusteesStructureEnum = "individual"
)

func (e *CreateAnEntityParametersTrustTrusteesStructureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "individual":
		*e = CreateAnEntityParametersTrustTrusteesStructureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnEntityParametersTrustTrusteesStructureEnum: %s", s)
	}
}

type CreateAnEntityParametersTrustTrustees struct {
	// Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.
	Individual *CreateAnEntityParametersTrustTrusteesIndividual `json:"individual,omitempty"`
	// The structure of the trustee.
	Structure CreateAnEntityParametersTrustTrusteesStructureEnum `json:"structure"`
}

// CreateAnEntityParametersTrust - Details of the trust entity to create. Required if `structure` is equal to `trust`.
type CreateAnEntityParametersTrust struct {
	// The trust's address.
	Address CreateAnEntityParametersTrustAddress `json:"address"`
	// Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
	Category CreateAnEntityParametersTrustCategoryEnum `json:"category"`
	// The identifier of the File containing the formation document of the trust.
	FormationDocumentFileID *string `json:"formation_document_file_id,omitempty"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
	FormationState *string `json:"formation_state,omitempty"`
	// The grantor of the trust. Required if `category` is equal to `revocable`.
	Grantor *CreateAnEntityParametersTrustGrantor `json:"grantor,omitempty"`
	// The legal name of the trust.
	Name string `json:"name"`
	// The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.
	TaxIdentifier *string `json:"tax_identifier,omitempty"`
	// The trustees of the trust.
	Trustees []CreateAnEntityParametersTrustTrustees `json:"trustees"`
}

type CreateAnEntityParameters struct {
	// Details of the corporation entity to create. Required if `structure` is equal to `corporation`.
	Corporation *CreateAnEntityParametersCorporation `json:"corporation,omitempty"`
	// The description you choose to give the entity.
	Description *string `json:"description,omitempty"`
	// Details of the joint entity to create. Required if `structure` is equal to `joint`.
	Joint *CreateAnEntityParametersJoint `json:"joint,omitempty"`
	// Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.
	NaturalPerson *CreateAnEntityParametersNaturalPerson `json:"natural_person,omitempty"`
	// The relationship between your group and the entity.
	Relationship CreateAnEntityParametersRelationshipEnum `json:"relationship"`
	// The type of Entity to create.
	Structure CreateAnEntityParametersStructureEnum `json:"structure"`
	// Additional documentation associated with the entity.
	SupplementalDocuments []CreateAnEntityParametersSupplementalDocuments `json:"supplemental_documents,omitempty"`
	// Details of the trust entity to create. Required if `structure` is equal to `trust`.
	Trust *CreateAnEntityParametersTrust `json:"trust,omitempty"`
}
