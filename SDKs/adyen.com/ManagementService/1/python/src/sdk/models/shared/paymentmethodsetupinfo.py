"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applepayinfo as shared_applepayinfo
from ..shared import bcmcinfo as shared_bcmcinfo
from ..shared import cartesbancairesinfo as shared_cartesbancairesinfo
from ..shared import giropayinfo as shared_giropayinfo
from ..shared import googlepayinfo as shared_googlepayinfo
from ..shared import klarnainfo as shared_klarnainfo
from ..shared import mealvoucherfrinfo as shared_mealvoucherfrinfo
from ..shared import paypalinfo as shared_paypalinfo
from ..shared import sofortinfo as shared_sofortinfo
from ..shared import swishinfo as shared_swishinfo
from ..shared import vippsinfo as shared_vippsinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PaymentMethodSetupInfoShopperInteractionEnum(str, Enum):
    r"""The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.
    
    Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**.
    """
    E_COMMERCE = 'eCommerce'
    POS = 'pos'
    MOTO = 'moto'
    CONT_AUTH = 'contAuth'

class PaymentMethodSetupInfoTypeEnum(str, Enum):
    r"""Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api)."""
    AFTERPAYTOUCH = 'afterpaytouch'
    ALIPAY = 'alipay'
    ALIPAY_HK = 'alipay_hk'
    AMEX = 'amex'
    APPLEPAY = 'applepay'
    BCMC = 'bcmc'
    BLIK = 'blik'
    CARTEBANCAIRE = 'cartebancaire'
    CLEARPAY = 'clearpay'
    CUP = 'cup'
    DINERS = 'diners'
    DIRECT_EBANKING = 'directEbanking'
    DIRECTDEBIT_GB = 'directdebit_GB'
    DISCOVER = 'discover'
    EBANKING_FI = 'ebanking_FI'
    EFTPOS_AUSTRALIA = 'eftpos_australia'
    ELO = 'elo'
    ELOCREDIT = 'elocredit'
    ELODEBIT = 'elodebit'
    GIROCARD = 'girocard'
    GIROPAY = 'giropay'
    GOOGLEPAY = 'googlepay'
    HIPER = 'hiper'
    HIPERCARD = 'hipercard'
    IDEAL = 'ideal'
    INTERAC_CARD = 'interac_card'
    JCB = 'jcb'
    KLARNA = 'klarna'
    KLARNA_ACCOUNT = 'klarna_account'
    KLARNA_PAYNOW = 'klarna_paynow'
    MAESTRO = 'maestro'
    MBWAY = 'mbway'
    MC = 'mc'
    MCDEBIT = 'mcdebit'
    MEAL_VOUCHER_FR = 'mealVoucher_FR'
    MOBILEPAY = 'mobilepay'
    MULTIBANCO = 'multibanco'
    ONLINE_BANKING_PL = 'onlineBanking_PL'
    PAYPAL = 'paypal'
    PAYSHOP = 'payshop'
    SWISH = 'swish'
    TRUSTLY = 'trustly'
    VIPPS = 'vipps'
    VISA = 'visa'
    VISADEBIT = 'visadebit'
    VPAY = 'vpay'
    WECHATPAY = 'wechatpay'
    WECHATPAY_POS = 'wechatpay_pos'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentMethodSetupInfo:
    
    apple_pay: Optional[shared_applepayinfo.ApplePayInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applePay'), 'exclude': lambda f: f is None }})  
    bcmc: Optional[shared_bcmcinfo.BcmcInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bcmc'), 'exclude': lambda f: f is None }})  
    business_line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessLineId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the business line."""  
    cartes_bancaires: Optional[shared_cartesbancairesinfo.CartesBancairesInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cartesBancaires'), 'exclude': lambda f: f is None }})  
    countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countries'), 'exclude': lambda f: f is None }})
    r"""The list of countries where a payment method is available. By default, all countries supported by the payment method."""  
    currencies: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencies'), 'exclude': lambda f: f is None }})
    r"""The list of currencies that a payment method supports. By default, all currencies supported by the payment method."""  
    custom_routing_flags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customRoutingFlags'), 'exclude': lambda f: f is None }})
    r"""The list of custom routing flags to route payment to the intended acquirer."""  
    giro_pay: Optional[shared_giropayinfo.GiroPayInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giroPay'), 'exclude': lambda f: f is None }})  
    google_pay: Optional[shared_googlepayinfo.GooglePayInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googlePay'), 'exclude': lambda f: f is None }})  
    klarna: Optional[shared_klarnainfo.KlarnaInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('klarna'), 'exclude': lambda f: f is None }})  
    meal_voucher_fr: Optional[shared_mealvoucherfrinfo.MealVoucherFRInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mealVoucher_FR'), 'exclude': lambda f: f is None }})  
    paypal: Optional[shared_paypalinfo.PayPalInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paypal'), 'exclude': lambda f: f is None }})  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Your reference for the payment method. Supported characters a-z, A-Z, 0-9."""  
    shopper_interaction: Optional[PaymentMethodSetupInfoShopperInteractionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperInteraction'), 'exclude': lambda f: f is None }})
    r"""The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.
    
    Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**.
    """  
    sofort: Optional[shared_sofortinfo.SofortInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sofort'), 'exclude': lambda f: f is None }})  
    store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/post/stores__resParam_id), if any."""  
    swish: Optional[shared_swishinfo.SwishInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('swish'), 'exclude': lambda f: f is None }})  
    type: Optional[PaymentMethodSetupInfoTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api)."""  
    vipps: Optional[shared_vippsinfo.VippsInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vipps'), 'exclude': lambda f: f is None }})  
    