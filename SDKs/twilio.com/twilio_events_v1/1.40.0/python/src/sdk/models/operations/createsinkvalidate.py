"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import events_v1_sink_sink_validate as shared_events_v1_sink_sink_validate
from typing import Optional

CREATE_SINK_VALIDATE_SERVERS = [
	"https://events.twilio.com",
]


@dataclasses.dataclass
class CreateSinkValidateSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateSinkValidateCreateSinkValidateRequest:
    
    test_id: str = dataclasses.field(metadata={'form': { 'field_name': 'TestId' }})
    r"""A 34 character string that uniquely identifies the test event for a Sink being validated."""  
    

@dataclasses.dataclass
class CreateSinkValidateRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""A 34 character string that uniquely identifies the Sink being validated."""  
    request_body: Optional[CreateSinkValidateCreateSinkValidateRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateSinkValidateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    events_v1_sink_sink_validate: Optional[shared_events_v1_sink_sink_validate.EventsV1SinkSinkValidate] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    