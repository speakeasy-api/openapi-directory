/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DocumentOrder - The order to send.
 */
public class DocumentOrder {
    /**
     * The buyer's accounting cost centre for this document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingCost")public String accountingCost;
    public DocumentOrder withAccountingCost(String accountingCost) {
        this.accountingCost = accountingCost;
        return this;
    }
    
    /**
     * An array of allowance charges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowanceCharges")public AllowanceCharge[] allowanceCharges;
    public DocumentOrder withAllowanceCharges(AllowanceCharge[] allowanceCharges) {
        this.allowanceCharges = allowanceCharges;
        return this;
    }
    
    /**
     * Total amount including Tax.
     */
    @JsonProperty("amountIncludingTax")public Double amountIncludingTax;
    public DocumentOrder withAmountIncludingTax(Double amountIncludingTax) {
        this.amountIncludingTax = amountIncludingTax;
        return this;
    }
    
    /**
     * An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")public Attachment[] attachments;
    public DocumentOrder withAttachments(Attachment[] attachments) {
        this.attachments = attachments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery")public Delivery delivery;
    public DocumentOrder withDelivery(Delivery delivery) {
        this.delivery = delivery;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryTerms")public DeliveryTerms deliveryTerms;
    public DocumentOrder withDeliveryTerms(DeliveryTerms deliveryTerms) {
        this.deliveryTerms = deliveryTerms;
        return this;
    }
    
    /**
     * The ISO 4217 currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentCurrencyCode")public CurrencyCodeEnum documentCurrencyCode;
    public DocumentOrder withDocumentCurrencyCode(CurrencyCodeEnum documentCurrencyCode) {
        this.documentCurrencyCode = documentCurrencyCode;
        return this;
    }
    
    /**
     * The number you assigned to the document.
     */
    @JsonProperty("documentNumber")public String documentNumber;
    public DocumentOrder withDocumentNumber(String documentNumber) {
        this.documentNumber = documentNumber;
        return this;
    }
    
    /**
     * Format: yyyy-mm-dd.
     */
    @JsonProperty("issueDate")public String issueDate;
    public DocumentOrder withIssueDate(String issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * Format: hh:mm:ss\u00b1zzzz 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueTime")public String issueTime;
    public DocumentOrder withIssueTime(String issueTime) {
        this.issueTime = issueTime;
        return this;
    }
    
    /**
     * A note to add to the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")public String note;
    public DocumentOrder withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * An array of order lines.
     */
    @JsonProperty("orderLines")public OrderLine[] orderLines;
    public DocumentOrder withOrderLines(OrderLine[] orderLines) {
        this.orderLines = orderLines;
        return this;
    }
    
    /**
     * The type of this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderType")public DocumentOrderOrderTypeEnum orderType;
    public DocumentOrder withOrderType(DocumentOrderOrderTypeEnum orderType) {
        this.orderType = orderType;
        return this;
    }
    
    /**
     * The payment terms of the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentTerms")public PaymentTerms paymentTerms;
    public DocumentOrder withPaymentTerms(PaymentTerms paymentTerms) {
        this.paymentTerms = paymentTerms;
        return this;
    }
    
    /**
     * An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("references")public Reference[] references;
    public DocumentOrder withReferences(Reference[] references) {
        this.references = references;
        return this;
    }
    
    /**
     * The party sending the order.
     */
    @JsonProperty("sellerSupplierParty")public SellerSupplierParty sellerSupplierParty;
    public DocumentOrder withSellerSupplierParty(SellerSupplierParty sellerSupplierParty) {
        this.sellerSupplierParty = sellerSupplierParty;
        return this;
    }
    
    /**
     * The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxSystem")public DocumentOrderTaxSystemEnum taxSystem;
    public DocumentOrder withTaxSystem(DocumentOrderTaxSystemEnum taxSystem) {
        this.taxSystem = taxSystem;
        return this;
    }
    
    /**
     * Format: \u00b1zzzz, where \u00b1zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")public String timeZone;
    public DocumentOrder withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validityPeriod")public String validityPeriod;
    public DocumentOrder withValidityPeriod(String validityPeriod) {
        this.validityPeriod = validityPeriod;
        return this;
    }
    
}
