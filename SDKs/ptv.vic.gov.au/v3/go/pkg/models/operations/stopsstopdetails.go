// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StopsStopDetailsRouteTypeEnum - Number identifying transport mode; values returned via RouteTypes API
type StopsStopDetailsRouteTypeEnum int

const (
	StopsStopDetailsRouteTypeEnumZero  StopsStopDetailsRouteTypeEnum = 0
	StopsStopDetailsRouteTypeEnumOne   StopsStopDetailsRouteTypeEnum = 1
	StopsStopDetailsRouteTypeEnumTwo   StopsStopDetailsRouteTypeEnum = 2
	StopsStopDetailsRouteTypeEnumThree StopsStopDetailsRouteTypeEnum = 3
	StopsStopDetailsRouteTypeEnumFour  StopsStopDetailsRouteTypeEnum = 4
)

func (e StopsStopDetailsRouteTypeEnum) ToPointer() *StopsStopDetailsRouteTypeEnum {
	return &e
}

func (e *StopsStopDetailsRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = StopsStopDetailsRouteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopsStopDetailsRouteTypeEnum: %v", v)
	}
}

type StopsStopDetailsRequest struct {
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// Incdicates whether the stop_id is a GTFS ID or not
	Gtfs *bool `queryParam:"style=form,explode=true,name=gtfs"`
	// Number identifying transport mode; values returned via RouteTypes API
	RouteType StopsStopDetailsRouteTypeEnum `pathParam:"style=simple,explode=false,name=route_type"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Indicates if stop accessibility information will be returned (default = false)
	StopAccessibility *bool `queryParam:"style=form,explode=true,name=stop_accessibility"`
	// Indicates if stop amenity information will be returned (default = false)
	StopAmenities *bool `queryParam:"style=form,explode=true,name=stop_amenities"`
	// Indicates if stop contact information will be returned (default = false)
	StopContact *bool `queryParam:"style=form,explode=true,name=stop_contact"`
	// Indicates if stop disruption information will be returned (default = false)
	StopDisruptions *bool `queryParam:"style=form,explode=true,name=stop_disruptions"`
	// Identifier of stop; values returned by Stops API
	StopID int `pathParam:"style=simple,explode=false,name=stop_id"`
	// Indicates if stop location information will be returned (default = false)
	StopLocation *bool `queryParam:"style=form,explode=true,name=stop_location"`
	// Indicates if stop staffing information will be returned (default = false)
	StopStaffing *bool `queryParam:"style=form,explode=true,name=stop_staffing"`
	// Indicates if stop ticket information will be returned (default = false)
	StopTicket *bool `queryParam:"style=form,explode=true,name=stop_ticket"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type StopsStopDetailsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
	// Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).
	V3StopResponse *shared.V3StopResponse
}
