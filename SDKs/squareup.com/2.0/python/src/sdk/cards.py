"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Cards:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_card(self, request: shared.CreateCardRequest, security: operations.CreateCardSecurity) -> operations.CreateCardResponse:
        r"""CreateCard
        Adds a card on file to an existing merchant.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/cards'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCardResponse])
                res.create_card_response = out

        return res

    def disable_card(self, request: operations.DisableCardRequest, security: operations.DisableCardSecurity) -> operations.DisableCardResponse:
        r"""DisableCard
        Disables the card, preventing any further updates or charges.
        Disabling an already disabled card is allowed but has no effect.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableCardRequest, base_url, '/v2/cards/{card_id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DisableCardResponse])
                res.disable_card_response = out

        return res

    def list_cards(self, request: operations.ListCardsRequest, security: operations.ListCardsSecurity) -> operations.ListCardsResponse:
        r"""ListCards
        Retrieves a list of cards owned by the account making the request.
        A max of 25 cards will be returned.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/cards'
        
        query_params = utils.get_query_params(operations.ListCardsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCardsResponse])
                res.list_cards_response = out

        return res

    def retrieve_card(self, request: operations.RetrieveCardRequest, security: operations.RetrieveCardSecurity) -> operations.RetrieveCardResponse:
        r"""RetrieveCard
        Retrieves details for a specific Card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveCardRequest, base_url, '/v2/cards/{card_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveCardResponse])
                res.retrieve_card_response = out

        return res

    