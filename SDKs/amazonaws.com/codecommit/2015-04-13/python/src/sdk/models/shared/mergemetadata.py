"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mergeoptiontypeenum_enum as shared_mergeoptiontypeenum_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MergeMetadata:
    r"""Returns information about a merge or potential merge between a source reference and a destination reference in a pull request."""
    
    is_merged: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isMerged'), 'exclude': lambda f: f is None }})  
    merge_commit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergeCommitId'), 'exclude': lambda f: f is None }})  
    merged_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergedBy'), 'exclude': lambda f: f is None }})  
    merge_option: Optional[shared_mergeoptiontypeenum_enum.MergeOptionTypeEnumEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergeOption'), 'exclude': lambda f: f is None }})  
    