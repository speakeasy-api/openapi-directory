"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configmodel as shared_configmodel
from ..shared import configsettingvaluemodel as shared_configsettingvaluemodel
from ..shared import environmentmodel as shared_environmentmodel
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigSettingValuesModel:
    r"""When everything is ok, the setting values returned."""
    
    config: Optional[shared_configmodel.ConfigModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config'), 'exclude': lambda f: f is None }})  
    environment: Optional[shared_environmentmodel.EnvironmentModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})  
    read_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readOnly'), 'exclude': lambda f: f is None }})  
    setting_values: Optional[list[shared_configsettingvaluemodel.ConfigSettingValueModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settingValues'), 'exclude': lambda f: f is None }})  
    