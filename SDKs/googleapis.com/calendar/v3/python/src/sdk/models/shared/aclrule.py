"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ACLRuleScope:
    r"""The extent to which calendar access is granted by this ACL rule."""
    
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the scope. Possible values are:
    - \"default\" - The public scope. This is the default value. 
    - \"user\" - Limits the scope to a single user. 
    - \"group\" - Limits the scope to a group. 
    - \"domain\" - Limits the scope to a domain.  Note: The permissions granted to the \"default\", or public, scope apply to any user, authenticated or not.
    """  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type \\"default\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ACLRule:
    r"""Successful response"""
    
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""ETag of the resource."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the Access Control List (ACL) rule. See Sharing calendars."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Type of the resource (\\"calendar#aclRule\\")."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role assigned to the scope. Possible values are:
    - \"none\" - Provides no access. 
    - \"freeBusyReader\" - Provides read access to free/busy information. 
    - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
    - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
    - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
    """  
    scope: Optional[ACLRuleScope] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The extent to which calendar access is granted by this ACL rule."""  
    