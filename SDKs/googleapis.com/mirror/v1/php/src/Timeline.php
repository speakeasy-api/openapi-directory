<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Timeline 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an attachment from a timeline item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteResponse
     */
	public function mirrorTimelineAttachmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{itemId}/attachments/{attachmentId}', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves an attachment on a timeline item by item ID and attachment ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetResponse
     */
	public function mirrorTimelineAttachmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{itemId}/attachments/{attachmentId}', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Adds a new attachment to a timeline item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertResponse
     */
	public function mirrorTimelineAttachmentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{itemId}/attachments', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of attachments for a timeline item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListResponse
     */
	public function mirrorTimelineAttachmentsList(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{itemId}/attachments', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineAttachmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Deletes a timeline item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteResponse
     */
	public function mirrorTimelineDelete(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a single timeline item by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetResponse
     */
	public function mirrorTimelineGet(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new item into the timeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertResponse
     */
	public function mirrorTimelineInsert(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of timeline items for the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListResponse
     */
	public function mirrorTimelineList(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates a timeline item in place. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchResponse
     */
	public function mirrorTimelinePatch(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "timelineItem", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelinePatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates a timeline item in place.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateResponse
     */
	public function mirrorTimelineUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timeline/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorTimelineUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}