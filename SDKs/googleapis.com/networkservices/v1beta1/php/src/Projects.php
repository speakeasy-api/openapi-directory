<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new EndpointPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateResponse
     */
	public function networkservicesProjectsLocationsEndpointPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/endpointPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "endpointPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists EndpointPolicies in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListResponse
     */
	public function networkservicesProjectsLocationsEndpointPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/endpointPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsEndpointPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndpointPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEndpointPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Gateway in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateResponse
     */
	public function networkservicesProjectsLocationsGatewaysCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/gateways', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "gatewayInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Gateways in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListResponse
     */
	public function networkservicesProjectsLocationsGatewaysList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/gateways', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGatewaysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGatewaysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGatewaysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new GrpcRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateResponse
     */
	public function networkservicesProjectsLocationsGrpcRoutesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/grpcRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "grpcRouteInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists GrpcRoutes in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListResponse
     */
	public function networkservicesProjectsLocationsGrpcRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/grpcRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsGrpcRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGrpcRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGrpcRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new HttpRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateResponse
     */
	public function networkservicesProjectsLocationsHttpRoutesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/httpRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpRouteInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists HttpRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListResponse
     */
	public function networkservicesProjectsLocationsHttpRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/httpRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsHttpRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHttpRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHttpRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListResponse
     */
	public function networkservicesProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Mesh in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateResponse
     */
	public function networkservicesProjectsLocationsMeshesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/meshes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "meshInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Meshes in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListResponse
     */
	public function networkservicesProjectsLocationsMeshesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/meshes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsMeshesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMeshesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMeshesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelResponse
     */
	public function networkservicesProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListResponse
     */
	public function networkservicesProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new ServiceBinding in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateResponse
     */
	public function networkservicesProjectsLocationsServiceBindingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/serviceBindings', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceBindingInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyResponse
     */
	public function networkservicesProjectsLocationsServiceBindingsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ServiceBinding in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListResponse
     */
	public function networkservicesProjectsLocationsServiceBindingsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/serviceBindings', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServiceBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyResponse
     */
	public function networkservicesProjectsLocationsServiceBindingsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsResponse
     */
	public function networkservicesProjectsLocationsServiceBindingsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsServiceBindingsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new TcpRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateResponse
     */
	public function networkservicesProjectsLocationsTcpRoutesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tcpRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tcpRouteInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists TcpRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListResponse
     */
	public function networkservicesProjectsLocationsTcpRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tcpRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTcpRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTcpRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTcpRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new TlsRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateResponse
     */
	public function networkservicesProjectsLocationsTlsRoutesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tlsRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tlsRouteInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single TlsRoute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteResponse
     */
	public function networkservicesProjectsLocationsTlsRoutesDelete(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single TlsRoute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetResponse
     */
	public function networkservicesProjectsLocationsTlsRoutesGet(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tlsRoute = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TlsRoute', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists TlsRoute in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListResponse
     */
	public function networkservicesProjectsLocationsTlsRoutesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tlsRoutes', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTlsRoutesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTlsRoutesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single TlsRoute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchResponse
     */
	public function networkservicesProjectsLocationsTlsRoutesPatch(
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tlsRouteInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkservicesProjectsLocationsTlsRoutesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}