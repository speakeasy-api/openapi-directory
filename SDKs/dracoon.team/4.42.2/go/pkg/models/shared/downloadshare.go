// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DownloadShareClassificationEnum - &#128679; Deprecated since v4.11.0
//
// Classification ID:
//
// * `1` - public
//
// * `2` - internal
//
// * `3` - confidential
//
// * `4` - strictly confidential
//
// (default: classification from parent room)
type DownloadShareClassificationEnum string

const (
	DownloadShareClassificationEnumOne   DownloadShareClassificationEnum = "1"
	DownloadShareClassificationEnumTwo   DownloadShareClassificationEnum = "2"
	DownloadShareClassificationEnumThree DownloadShareClassificationEnum = "3"
	DownloadShareClassificationEnumFour  DownloadShareClassificationEnum = "4"
)

func (e *DownloadShareClassificationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = DownloadShareClassificationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DownloadShareClassificationEnum: %s", s)
	}
}

// DownloadShare - Download Share information
type DownloadShare struct {
	// Share access key to generate secure link
	AccessKey string `json:"accessKey"`
	// &#128679; Deprecated since v4.11.0
	//
	// Classification ID:
	//
	// * `1` - public
	//
	// * `2` - internal
	//
	// * `3` - confidential
	//
	// * `4` - strictly confidential
	//
	//
	//
	// (default: classification from parent room)
	Classification *DownloadShareClassificationEnum `json:"classification,omitempty"`
	// Downloads counter (incremented on each download)
	CntDownloads int `json:"cntDownloads"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	// User information
	CreatedBy UserInfo `json:"createdBy"`
	// Path to shared download node
	DataURL *string `json:"dataUrl,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Share ID
	ID int64 `json:"id"`
	// &#128640; Since v4.11.0
	//
	// Internal notes
	InternalNotes *string `json:"internalNotes,omitempty"`
	// Encrypted share
	//
	// (this only applies to shared files, not folders)
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// Is share protected by password
	IsProtected *bool `json:"isProtected,omitempty"`
	// Max allowed downloads
	MaxDownloads *int `json:"maxDownloads,omitempty"`
	// Alias name
	Name string `json:"name"`
	// Source node ID
	NodeID int64 `json:"nodeId"`
	// Path to shared download node
	NodePath *string `json:"nodePath,omitempty"`
	// Node type
	NodeType *string `json:"nodeType,omitempty"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// &#128679; Deprecated since v4.20.0
	//
	// Notify creator on every download.
	NotifyCreator bool `json:"notifyCreator"`
	// &#128679; Deprecated since v4.11.0
	//
	// CSV string of recipient email addresses
	Recipients *string `json:"recipients,omitempty"`
	// Show creator first and last name.
	ShowCreatorName *bool `json:"showCreatorName,omitempty"`
	// Show creator email address.
	ShowCreatorUsername *bool `json:"showCreatorUsername,omitempty"`
	// &#128679; Deprecated since v4.11.0
	//
	// CSV string of recipient MSISDNs
	SmsRecipients *string `json:"smsRecipients,omitempty"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// User information
	UpdatedBy *UserInfo `json:"updatedBy,omitempty"`
}
