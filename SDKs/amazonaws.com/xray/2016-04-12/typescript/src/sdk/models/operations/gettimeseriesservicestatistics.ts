/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class GetTimeSeriesServiceStatisticsRequestBody extends SpeakeasyBase {
  /**
   * The end of the time frame for which to aggregate statistics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime: Date;

  /**
   * A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EntitySelectorExpression" })
  entitySelectorExpression?: string;

  /**
   * The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ForecastStatistics" })
  forecastStatistics?: boolean;

  /**
   * The Amazon Resource Name (ARN) of the group for which to pull statistics from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GroupARN" })
  groupARN?: string;

  /**
   * The case-sensitive name of the group for which to pull statistics from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GroupName" })
  groupName?: string;

  /**
   * Pagination token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  /**
   * Aggregation period in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Period" })
  period?: number;

  /**
   * The start of the time frame for which to aggregate statistics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime: Date;
}

export class GetTimeSeriesServiceStatisticsRequest extends SpeakeasyBase {
  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetTimeSeriesServiceStatisticsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetTimeSeriesServiceStatisticsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getTimeSeriesServiceStatisticsResult?: shared.GetTimeSeriesServiceStatisticsResult;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottledException
   */
  @SpeakeasyMetadata()
  throttledException?: any;
}
