<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SoundEffects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Download sound effects
     * 
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadSfxRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadSfxSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadSfxResponse
     */
	public function downloadSfx(
        \OpenAPI\OpenAPI\Models\Operations\DownloadSfxRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DownloadSfxSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadSfxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sfx/licenses/{id}/downloads', \OpenAPI\OpenAPI\Models\Operations\DownloadSfxRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadSfxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sfxUrl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SfxUrl', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get details about sound effects
     * 
     * This endpoint shows information about a sound effect.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsResponse
     */
	public function getSfxDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sfx/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSfxDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sfx = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Sfx', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * List sound effects licenses
     * 
     * This endpoint lists existing licenses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListResponse
     */
	public function getSfxLicenseList(
        \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sfx/licenses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSfxLicenseListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadHistoryDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadHistoryDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List details about sound effects
     * 
     * This endpoint shows information about sound effects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsResponse
     */
	public function getSfxListDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sfx');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSfxListDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sfxDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SFXDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * License sound effects
     * 
     * This endpoint licenses sounds effect assets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LicenseSFXRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicensesSFXSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicensesSFXResponse
     */
	public function licensesSFX(
        \OpenAPI\OpenAPI\Models\Shared\LicenseSFXRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicensesSFXSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicensesSFXResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sfx/licenses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicensesSFXResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseSFXResultDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseSFXResultDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Search for sound effects
     * 
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchSFXRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchSFXSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchSFXResponse
     */
	public function searchSFX(
        \OpenAPI\OpenAPI\Models\Operations\SearchSFXRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchSFXSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchSFXResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/sfx/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchSFXRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchSFXResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sfxSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SFXSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
}