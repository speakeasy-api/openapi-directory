<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CurrentUser - User data
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CurrentUser
{
    /**
     * A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves.
     * 
     * 
     * 
     * @var ?string $aboutMe
     */
	#[\JMS\Serializer\Annotation\SerializedName('about_me')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $aboutMe = null;
    
    /**
     * A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set.
     * 
     * 
     * 
     * @var ?string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $country = null;
    
    /**
     * Whether or not photos are included in the digest emails sent to the user.
     * 
     * @var ?bool $digestPhotos
     */
	#[\JMS\Serializer\Annotation\SerializedName('digest_photos')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $digestPhotos = null;
    
    /**
     * Data related to the users' email address.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CurrentUserEmail $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CurrentUserEmail')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CurrentUserEmail $email = null;
    
    /**
     * How quickly new messages from other users are emailed to this user. One of: immediate, 30_minutes, 1_hour, 2_hours, 4_hours, 6_hours, 8_hours <br /> If set to anything other than immediate, the user will receive a digest email summarizing all of the new messages that they haven't viewed.
     * 
     * 
     * 
     * @var ?string $emailMessageDelay
     */
	#[\JMS\Serializer\Annotation\SerializedName('email_message_delay')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $emailMessageDelay = null;
    
    /**
     * Whether or not post reminder emails are enabled for this user (to remind them to update or repost their posts).
     * 
     * @var ?bool $emailPostReminders
     */
	#[\JMS\Serializer\Annotation\SerializedName('email_post_reminders')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailPostReminders = null;
    
    /**
     * How often new post email notifications are sent to the user. One of: weekly, twice_weekly, daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly <br /><br /> Will be null if new post email notifications are turned off.
     * 
     * 
     * 
     * @var ?string $emailPostsFrequency
     */
	#[\JMS\Serializer\Annotation\SerializedName('email_posts_frequency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $emailPostsFrequency = null;
    
    /**
     * Whether or not search alert emails are enabled for this user.
     * 
     * @var ?bool $emailSearchAlerts
     */
	#[\JMS\Serializer\Annotation\SerializedName('email_search_alerts')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailSearchAlerts = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('feedback')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CurrentUserFeedback')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CurrentUserFeedback $feedback = null;
    
    /**
     * The first name of the user (may be null).
     * 
     * @var ?string $firstname
     */
	#[\JMS\Serializer\Annotation\SerializedName('firstname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $firstname = null;
    
    /**
     * Whether or not the user has a password (accounts created using 3rd party providers like Facebook don't have passwords set). <br /><br /> When has_password is false, the only way to set a password on the users' account is to send the user a password reset email.
     * 
     * 
     * 
     * @var ?bool $hasPassword
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_password')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasPassword = null;
    
    /**
     * The UTC date and time when the user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page.
     * 
     * 
     * 
     * @var ?\DateTime $lastListingsView
     */
	#[\JMS\Serializer\Annotation\SerializedName('last_listings_view')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $lastListingsView = null;
    
    /**
     * The last name of the user (may be null).
     * 
     * @var ?string $lastname
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastname = null;
    
    /**
     * The users' location.  The location is used to determine which posts are shown to the user (may be null).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CurrentUserLocation $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CurrentUserLocation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CurrentUserLocation $location = null;
    
    /**
     * The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
     * 
     * @var ?string $memberSince
     */
	#[\JMS\Serializer\Annotation\SerializedName('member_since')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $memberSince = null;
    
    /**
     * A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
     * 
     * 
     * 
     * @var ?string $profileImage
     */
	#[\JMS\Serializer\Annotation\SerializedName('profile_image')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $profileImage = null;
    
    /**
     * The source of the users' profile image. One of: gravatar, facebook, google, freegle, custom
     * 
     * 
     * 
     * @var ?string $profileImageSource
     */
	#[\JMS\Serializer\Annotation\SerializedName('profile_image_source')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $profileImageSource = null;
    
    /**
     * Whether or not the user has chosen to make their first and last name public.
     * 
     * @var ?bool $publicName
     */
	#[\JMS\Serializer\Annotation\SerializedName('public_name')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $publicName = null;
    
    /**
     * A list of the public post sources the user is interested in seeing posts from (currently only 'trashnothing' is supported). If the array is empty, no sources are enabled and the user will only see posts from the groups they are a member of. <br /><br /> NOTE: Additional sources may be added in the future so clients should take care to support arbitrary sources being returned.
     * 
     * 
     * 
     * @var ?array<string> $publicPostSources
     */
	#[\JMS\Serializer\Annotation\SerializedName('public_post_sources')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $publicPostSources = null;
    
    /**
     * An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate.
     * 
     * 
     * 
     * @var ?int $replyTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('reply_time')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $replyTime = null;
    
    /**
     * If true, all group posts from the users' groups are shown to them on the main posts page and in the digests. <br /><br /> If false, only group posts in the area defined by the users' location are shown.
     * 
     * 
     * 
     * @var ?bool $showAllGroupPosts
     */
	#[\JMS\Serializer\Annotation\SerializedName('show_all_group_posts')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $showAllGroupPosts = null;
    
    /**
     * The UTC date and time when the user signed up.
     * 
     * @var ?\DateTime $signup
     */
	#[\JMS\Serializer\Annotation\SerializedName('signup')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $signup = null;
    
    /**
     * Whether or not the user wants to receive special notice emails from the groups they are a member of. Special notices are admin posts that the group moderators choose to send out by email.
     * 
     * 
     * 
     * @var ?bool $specialNotices
     */
	#[\JMS\Serializer\Annotation\SerializedName('special_notices')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $specialNotices = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('user_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userId = null;
    
    /**
     * A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
     * 
     * 
     * 
     * @var ?string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $username = null;
    
    /**
     * Whether or not the user used the Fair Offer Policy (see https://trashnothing.com/fair_offer_policy ) the last time they posted.
     * 
     * @var ?bool $usesFairOfferPolicy
     */
	#[\JMS\Serializer\Annotation\SerializedName('uses_fair_offer_policy')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $usesFairOfferPolicy = null;
    
    /**
     * Whether or not the user has verified their account. The user account will be limited (eg. they will not be able to reply to posts) until their account is verified.
     * 
     * 
     * 
     * @var ?bool $verified
     */
	#[\JMS\Serializer\Annotation\SerializedName('verified')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $verified = null;
    
	public function __construct()
	{
		$this->aboutMe = null;
		$this->country = null;
		$this->digestPhotos = null;
		$this->email = null;
		$this->emailMessageDelay = null;
		$this->emailPostReminders = null;
		$this->emailPostsFrequency = null;
		$this->emailSearchAlerts = null;
		$this->feedback = null;
		$this->firstname = null;
		$this->hasPassword = null;
		$this->lastListingsView = null;
		$this->lastname = null;
		$this->location = null;
		$this->memberSince = null;
		$this->profileImage = null;
		$this->profileImageSource = null;
		$this->publicName = null;
		$this->publicPostSources = null;
		$this->replyTime = null;
		$this->showAllGroupPosts = null;
		$this->signup = null;
		$this->specialNotices = null;
		$this->userId = null;
		$this->username = null;
		$this->usesFairOfferPolicy = null;
		$this->verified = null;
	}
}
