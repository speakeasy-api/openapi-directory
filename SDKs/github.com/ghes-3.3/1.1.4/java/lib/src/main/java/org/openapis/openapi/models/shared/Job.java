/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Job - Information of a job execution in a workflow run
 */
public class Job {
    @JsonProperty("check_run_url")
    public String checkRunUrl;
    public Job withCheckRunUrl(String checkRunUrl) {
        this.checkRunUrl = checkRunUrl;
        return this;
    }
    
    /**
     * The time that the job finished, in ISO 8601 format.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("completed_at")
    public OffsetDateTime completedAt;
    public Job withCompletedAt(OffsetDateTime completedAt) {
        this.completedAt = completedAt;
        return this;
    }
    
    /**
     * The outcome of the job.
     */
    @JsonProperty("conclusion")
    public JobConclusionEnum conclusion;
    public Job withConclusion(JobConclusionEnum conclusion) {
        this.conclusion = conclusion;
        return this;
    }
    
    /**
     * The SHA of the commit that is being run.
     */
    @JsonProperty("head_sha")
    public String headSha;
    public Job withHeadSha(String headSha) {
        this.headSha = headSha;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;
    public Job withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The id of the job.
     */
    @JsonProperty("id")
    public Long id;
    public Job withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
     */
    @JsonProperty("labels")
    public String[] labels;
    public Job withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The name of the job.
     */
    @JsonProperty("name")
    public String name;
    public Job withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;
    public Job withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_attempt")
    public Long runAttempt;
    public Job withRunAttempt(Long runAttempt) {
        this.runAttempt = runAttempt;
        return this;
    }
    
    /**
     * The id of the associated workflow run.
     */
    @JsonProperty("run_id")
    public Long runId;
    public Job withRunId(Long runId) {
        this.runId = runId;
        return this;
    }
    
    @JsonProperty("run_url")
    public String runUrl;
    public Job withRunUrl(String runUrl) {
        this.runUrl = runUrl;
        return this;
    }
    
    /**
     * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
     */
    @JsonProperty("runner_group_id")
    public Long runnerGroupId;
    public Job withRunnerGroupId(Long runnerGroupId) {
        this.runnerGroupId = runnerGroupId;
        return this;
    }
    
    /**
     * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
     */
    @JsonProperty("runner_group_name")
    public String runnerGroupName;
    public Job withRunnerGroupName(String runnerGroupName) {
        this.runnerGroupName = runnerGroupName;
        return this;
    }
    
    /**
     * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
     */
    @JsonProperty("runner_id")
    public Long runnerId;
    public Job withRunnerId(Long runnerId) {
        this.runnerId = runnerId;
        return this;
    }
    
    /**
     * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
     */
    @JsonProperty("runner_name")
    public String runnerName;
    public Job withRunnerName(String runnerName) {
        this.runnerName = runnerName;
        return this;
    }
    
    /**
     * The time that the job started, in ISO 8601 format.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("started_at")
    public OffsetDateTime startedAt;
    public Job withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    /**
     * The phase of the lifecycle that the job is currently in.
     */
    @JsonProperty("status")
    public JobStatusEnum status;
    public Job withStatus(JobStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Steps in this job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("steps")
    public JobSteps[] steps;
    public Job withSteps(JobSteps[] steps) {
        this.steps = steps;
        return this;
    }
    
    @JsonProperty("url")
    public String url;
    public Job withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
