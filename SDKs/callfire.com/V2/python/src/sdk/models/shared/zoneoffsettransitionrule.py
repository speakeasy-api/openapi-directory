"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import localtime as shared_localtime
from ..shared import zoneoffset as shared_zoneoffset
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ZoneOffsetTransitionRuleDayOfWeekEnum(str, Enum):
    r"""~"""
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'

class ZoneOffsetTransitionRuleMonthEnum(str, Enum):
    r"""~"""
    JANUARY = 'JANUARY'
    FEBRUARY = 'FEBRUARY'
    MARCH = 'MARCH'
    APRIL = 'APRIL'
    MAY = 'MAY'
    JUNE = 'JUNE'
    JULY = 'JULY'
    AUGUST = 'AUGUST'
    SEPTEMBER = 'SEPTEMBER'
    OCTOBER = 'OCTOBER'
    NOVEMBER = 'NOVEMBER'
    DECEMBER = 'DECEMBER'

class ZoneOffsetTransitionRuleTimeDefinitionEnum(str, Enum):
    r"""~"""
    UTC = 'UTC'
    WALL = 'WALL'
    STANDARD = 'STANDARD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ZoneOffsetTransitionRule:
    r"""~"""
    
    day_of_month_indicator: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfMonthIndicator'), 'exclude': lambda f: f is None }})
    r"""~"""  
    day_of_week: Optional[ZoneOffsetTransitionRuleDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is None }})
    r"""~"""  
    local_time: Optional[shared_localtime.LocalTime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localTime'), 'exclude': lambda f: f is None }})
    r"""Represents a time part of a given date"""  
    midnight_end_of_day: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('midnightEndOfDay'), 'exclude': lambda f: f is None }})
    r"""~"""  
    month: Optional[ZoneOffsetTransitionRuleMonthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('month'), 'exclude': lambda f: f is None }})
    r"""~"""  
    offset_after: Optional[shared_zoneoffset.ZoneOffset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetAfter'), 'exclude': lambda f: f is None }})
    r"""~"""  
    offset_before: Optional[shared_zoneoffset.ZoneOffset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetBefore'), 'exclude': lambda f: f is None }})
    r"""~"""  
    standard_offset: Optional[shared_zoneoffset.ZoneOffset] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standardOffset'), 'exclude': lambda f: f is None }})
    r"""~"""  
    time_definition: Optional[ZoneOffsetTransitionRuleTimeDefinitionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeDefinition'), 'exclude': lambda f: f is None }})
    r"""~"""  
    