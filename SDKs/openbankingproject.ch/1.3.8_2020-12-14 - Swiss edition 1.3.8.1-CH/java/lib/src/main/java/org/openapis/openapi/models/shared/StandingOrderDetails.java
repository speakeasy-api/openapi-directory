/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * StandingOrderDetails - Details of underlying standing orders.
 * 
 */
public class StandingOrderDetails {
    /**
     * Day of execution as string.
     * 
     * This string consists of up two characters.
     * Leading zeroes are not allowed.
     * 
     * 31 is ultimo of the month.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dayOfExecution")
    public DayOfExecutionEnum dayOfExecution;
    public StandingOrderDetails withDayOfExecution(DayOfExecutionEnum dayOfExecution) {
        this.dayOfExecution = dayOfExecution;
        return this;
    }
    
    /**
     * The last applicable day of execution.
     * If not given, it is an infinite standing order.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("endDate")
    public LocalDate endDate;
    public StandingOrderDetails withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * "following" or "preceding" supported as values.
     * This data attribute defines the behaviour when recurring payment dates falls on a weekend or bank holiday.
     * The payment is then executed either the "preceding" or "following" working day.
     * ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting
     * this execution rule.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionRule")
    public ExecutionRuleEnum executionRule;
    public StandingOrderDetails withExecutionRule(ExecutionRuleEnum executionRule) {
        this.executionRule = executionRule;
        return this;
    }
    
    /**
     * The following codes from the "EventFrequency7Code" of ISO 20022 are supported:
     * - "Daily"
     * - "Weekly"
     * - "EveryTwoWeeks"
     * - "Monthly"
     * - "EveryTwoMonths"
     * - "Quarterly"
     * - "SemiAnnual"
     * - "Annual"
     * - "MonthlyVariable"
     * 
     */
    @JsonProperty("frequency")
    public FrequencyCodeEnum frequency;
    public StandingOrderDetails withFrequency(FrequencyCodeEnum frequency) {
        this.frequency = frequency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limitAmount")
    public Amount limitAmount;
    public StandingOrderDetails withLimitAmount(Amount limitAmount) {
        this.limitAmount = limitAmount;
        return this;
    }
    
    /**
     * The format is following the regular expression \d{1,2}. 
     * The array is restricted to 11 entries. 
     * The values contained in the array entries shall all be different and the maximum value of one entry is 12.
     * This attribute is contained if and only if the frequency equals "MonthlyVariable".
     * Example: An execution on January, April and October each year is addressed by ["1", "4", "10"].
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monthsOfExecution")
    public MonthsOfExecutionEnum[] monthsOfExecution;
    public StandingOrderDetails withMonthsOfExecution(MonthsOfExecutionEnum[] monthsOfExecution) {
        this.monthsOfExecution = monthsOfExecution;
        return this;
    }
    
    /**
     * This is multiplying the given frequency resulting the exact frequency,
     * e.g. Frequency=weekly and multiplicator=3 means every 3 weeks.
     * Remark: This attribute is rarely supported in the market.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiplicator")
    public Long multiplicator;
    public StandingOrderDetails withMultiplicator(Long multiplicator) {
        this.multiplicator = multiplicator;
        return this;
    }
    
    /**
     * The first applicable day of execution starting from this date is the first payment.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("startDate")
    public LocalDate startDate;
    public StandingOrderDetails withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * This element is only used in case of frequency equals "Monthly".
     * 
     * If this element equals false it has no effect.
     * If this element equals true, then the execution rule is overruled if the day of execution would fall into a different month using the execution rule.
     * 
     * Example: executionRule equals "preceding", dayOfExecution equals "02" and the second of a month is a Sunday. 
     * In this case, the transaction date would be on the last day of the month before.
     *  This would be overruled if withinAMonthFlag equals true and the payment is processed on Monday the third of the Month.
     * Remark: This attribute is rarely supported in the market.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withinAMonthFlag")
    public Boolean withinAMonthFlag;
    public StandingOrderDetails withWithinAMonthFlag(Boolean withinAMonthFlag) {
        this.withinAMonthFlag = withinAMonthFlag;
        return this;
    }
    
}
