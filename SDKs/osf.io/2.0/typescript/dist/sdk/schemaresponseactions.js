"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaResponseActions = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
/**
 * Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.
 *
 * @remarks
 *
 * Schema Response Actions have a  few different triggers to cause state transitions:
 *
 *   - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
 *   this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
 *   Registration to either approved or reject the Schema Response.
 *
 *   - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
 *   makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
 *   are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
 *   will transition the Schema Response to `pending_moderation`.
 *
 *   - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
 *   state. This trigger is only valid for Schema Responses that are associated with a Registration that has
 *   Registration Provider a moderated workflow and only possible for a user designated as moderator of a
 *   Registration Provider.
 *
 *   - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
 *   `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.
 *
 *   - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
 *   `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
 *   that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
 *   Registration Provider.
 */
var SchemaResponseActions = /** @class */ (function () {
    function SchemaResponseActions(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * A Schema Response Action from a Schema Response
     *
     * @remarks
     * Retrieves a Schema Response Action by it's ID.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     */
    SchemaResponseActions.prototype.getSchemaResponsesSchemaResponseIdActionsSchemaResponseActionId = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "*/*")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Schema Response Action
     *
     * @remarks
     * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     */
    SchemaResponseActions.prototype.postSchemaResponsesSchemaResponseIdActions = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PostSchemaResponsesSchemaResponseIdActionsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/schema_responses/{schema_response_id}/actions/", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PostSchemaResponsesSchemaResponseIdActionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of Schema Response Actions for a Schema Response
     *
     * @remarks
     * This retrieves a paginated list of all Schema Response Actions created for a Schema Response.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     */
    SchemaResponseActions.prototype.schemaResponseActionRead = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SchemaResponseActionReadRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/schema_responses/{schema_response_id}/actions/", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SchemaResponseActionReadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "*/*")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    break;
            }
            return res;
        });
    };
    return SchemaResponseActions;
}());
exports.SchemaResponseActions = SchemaResponseActions;
