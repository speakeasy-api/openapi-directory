/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Report {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get report status by ID
   *
   * @remarks
   * Retrieves the Subscription's report status, filtering by its reportId.
   */
  getreportstatusbyID(
    req: operations.GetreportstatusbyIDRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetreportstatusbyIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetreportstatusbyIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/report/reportStatus/{reportId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetreportstatusbyIDResponse =
        new operations.GetreportstatusbyIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Subscription report by Status
   *
   * @remarks
   * Retrieves Subscriptions' reports, filtering by status. The report will be sent by email, to the address inserted in the API's path.
   */
  requestreportbyStatus(
    req: operations.RequestreportbyStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestreportbyStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestreportbyStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/report/subscriptionsByStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestreportbyStatusResponse =
        new operations.RequestreportbyStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Subscription report by date
   *
   * @remarks
   * Retrieves a report with the subscriptions created at the date interval requested
   */
  requestreportbydate(
    req: operations.RequestreportbydateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestreportbydateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestreportbydateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/report/subscriptionsByDate";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestreportbydateResponse =
        new operations.RequestreportbydateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Subscription report by order date
   *
   * @remarks
   * Retrieves a report regarding the Subscriptions created during the date interval of orders.
   */
  requestreportbyorderdate(
    req: operations.RequestreportbyorderdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestreportbyorderdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestreportbyorderdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/report/subscriptionsOrderByDate";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestreportbyorderdateResponse =
        new operations.RequestreportbyorderdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Subscription report by schedule
   *
   * @remarks
   * Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
   */
  requestreportbyschedule(
    req: operations.RequestreportbyscheduleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestreportbyscheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestreportbyscheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/report/subscriptionsScheduled";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestreportbyscheduleResponse =
        new operations.RequestreportbyscheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Request report by update
   *
   * @remarks
   * Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API's path.
   */
  requestreportbyupdate(
    req: operations.RequestreportbyupdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestreportbyupdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestreportbyupdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/report/subscriptionsUpdated";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestreportbyupdateResponse =
        new operations.RequestreportbyupdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
