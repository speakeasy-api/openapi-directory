// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchIncludeEnum string

const (
	SearchIncludeEnumTv     SearchIncludeEnum = "tv"
	SearchIncludeEnumMovies SearchIncludeEnum = "movies"
	SearchIncludeEnumPeople SearchIncludeEnum = "people"
	SearchIncludeEnumOther  SearchIncludeEnum = "other"
)

func (e *SearchIncludeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tv":
		fallthrough
	case "movies":
		fallthrough
	case "people":
		fallthrough
	case "other":
		*e = SearchIncludeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchIncludeEnum: %s", s)
	}
}

type SearchQueryParams struct {
	// The type of device the content is targeting.
	Device *string `queryParam:"style=form,explode=true,name=device"`
	// The set of opt in feature flags which cause breaking changes to responses.
	//
	// While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses
	// may need to evolve over this time.
	//
	// These feature flags allow clients to select which response formats they expect and avoid breaking
	// clients as these formats evolve under the current major version.
	//
	// ### Flags
	//
	// - `all` - Enable all flags. Useful for testing. _Don't use in production_.
	// - `idp` - Dynamic item detail pages with schedulable rows.
	// - `ldp` - Dynamic list detail pages with schedulable rows.
	// - `hb` - Hubble formatted image urls.
	// - `rpt` - Updated resume point threshold logic.
	// - `cas` - "Custom Asset Search", inlcude `customAssets` in search results.
	// - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page.
	// - `cd` - Custom Destination support.
	//
	// See the `feature-flags.md` for available flag details.
	//
	Ff []shared.FeatureFlagsEnum `queryParam:"style=form,explode=false,name=ff"`
	// When this option is set, instead of all search result items being returned
	// in a single list, they will instead be returned under two lists. One for
	// movies and another for tv (shows + programs).
	//
	// if the `cas` feature flag is set, a third `other` list will be
	// included containing `customAsset` results
	//
	// Default is undefined meaning items will be returned in a single list.
	//
	// The array of `people` results will always be separate from items.
	//
	Group *bool `queryParam:"style=form,explode=true,name=group"`
	// By default people, movies and tv (shows + programs) will be included
	// in the search results.
	//
	// If the `cas` feature flag is set, "other" items (`customAsset`s) will
	// also be included by default
	//
	// If you don't want all of these types you can specifiy the specific
	// includes you care about.
	//
	Include []SearchIncludeEnum `queryParam:"style=form,explode=false,name=include"`
	// Language code for the preferred language to be returned in the response.
	//
	// Parameter value is case-insensitive and should be
	//   - a valid 2 letter language code without region such as en, de
	//   - or with region such as en_us, en_au
	//
	// If undefined then defaults to 'en', unless the server has been configured
	// with a custom default.
	//
	// See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
	//
	Lang *string `queryParam:"style=form,explode=true,name=lang"`
	// The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
	MaxRating *string `queryParam:"style=form,explode=true,name=max_rating"`
	// The maximum number of results to return.
	MaxResults *int `queryParam:"style=form,explode=true,name=max_results"`
	// The list of segments to filter the response by.
	Segments []string `queryParam:"style=form,explode=false,name=segments"`
	// The active subscription code.
	Sub *string `queryParam:"style=form,explode=true,name=sub"`
	// The search term to query.
	Term string `queryParam:"style=form,explode=true,name=term"`
}

type SearchRequest struct {
	QueryParams SearchQueryParams
}

type SearchResponse struct {
	ContentType string
	// OK.
	SearchResults *shared.SearchResults
	// Bad request.
	ServiceError *shared.ServiceError
	StatusCode   int
	RawResponse  *http.Response
}
