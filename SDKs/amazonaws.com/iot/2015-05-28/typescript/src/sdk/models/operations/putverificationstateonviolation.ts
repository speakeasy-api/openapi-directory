/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The verification state of the violation.
 */
export enum PutVerificationStateOnViolationRequestBodyVerificationStateEnum {
  FalsePositive = "FALSE_POSITIVE",
  BenignPositive = "BENIGN_POSITIVE",
  TruePositive = "TRUE_POSITIVE",
  Unknown = "UNKNOWN",
}

export class PutVerificationStateOnViolationRequestBody extends SpeakeasyBase {
  /**
   * The verification state of the violation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verificationState" })
  verificationState: PutVerificationStateOnViolationRequestBodyVerificationStateEnum;

  /**
   * The description of the verification state of the violation (detect alarm).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verificationStateDescription" })
  verificationStateDescription?: string;
}

export class PutVerificationStateOnViolationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutVerificationStateOnViolationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The violation ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=violationId",
  })
  violationId: string;
}

export class PutVerificationStateOnViolationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putVerificationStateOnViolationResponse?: Record<string, any>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
