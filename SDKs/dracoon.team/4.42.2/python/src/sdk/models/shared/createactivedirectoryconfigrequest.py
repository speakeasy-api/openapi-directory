"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateActiveDirectoryConfigRequest:
    r"""Request model for creating an Active Directory configuration"""
    
    alias: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias') }})
    r"""Unique name for an Active Directory configuration"""  
    ldap_users_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldapUsersDomain') }})
    r"""Search scope of Active Directory; only users below this node can log on."""  
    server_admin_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverAdminName') }})
    r"""Distinguished Name (DN) of Active Directory administrative account"""  
    server_admin_password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverAdminPassword') }})
    r"""Password of Active Directory administrative account"""  
    server_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverIp') }})
    r"""IPv4 or IPv6 address or host name"""  
    server_port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverPort') }})
    r"""Port"""  
    user_filter: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userFilter') }})
    r"""Name of Active Directory attribute that is used as login name."""  
    ad_export_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adExportGroup'), 'exclude': lambda f: f is None }})
    r"""If `userImport` is set to `true`,
    
    the user must be member of this Active Directory group to receive a newly created DRACOON account.
    """  
    create_home_folder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createHomeFolder'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED, will be ignored
    
    Determines whether a room is created for each user that is created by automatic import (like a home folder).
    
    Room's name will equal the user's login name.
    """  
    home_folder_parent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeFolderParent'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED, will be ignored
    
    ID of the room in which the individual rooms for users will be created.
    """  
    sds_import_group: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sdsImportGroup'), 'exclude': lambda f: f is None }})
    r"""User group that is assigned to users who are created by automatic import.
    
    Reset with `0`
    """  
    ssl_finger_print: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslFingerPrint'), 'exclude': lambda f: f is None }})
    r"""SSL finger print of Active Directory server.
    
    Mandatory for LDAPS connections.
    
    Format: `Algorithm/Fingerprint`
    """  
    use_ldaps: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useLdaps'), 'exclude': lambda f: f is None }})
    r"""Determines whether LDAPS should be used instead of plain LDAP."""  
    user_import: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userImport'), 'exclude': lambda f: f is None }})
    r"""Determines if a DRACOON account is automatically created for a new user
    
    who successfully logs on with his / her AD / IDP account.
    """  
    