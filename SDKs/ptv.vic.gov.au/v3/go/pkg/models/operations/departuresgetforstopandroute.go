// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type DeparturesGetForStopAndRouteExpandEnum string

const (
	DeparturesGetForStopAndRouteExpandEnumAll               DeparturesGetForStopAndRouteExpandEnum = "All"
	DeparturesGetForStopAndRouteExpandEnumStop              DeparturesGetForStopAndRouteExpandEnum = "Stop"
	DeparturesGetForStopAndRouteExpandEnumRoute             DeparturesGetForStopAndRouteExpandEnum = "Route"
	DeparturesGetForStopAndRouteExpandEnumRun               DeparturesGetForStopAndRouteExpandEnum = "Run"
	DeparturesGetForStopAndRouteExpandEnumDirection         DeparturesGetForStopAndRouteExpandEnum = "Direction"
	DeparturesGetForStopAndRouteExpandEnumDisruption        DeparturesGetForStopAndRouteExpandEnum = "Disruption"
	DeparturesGetForStopAndRouteExpandEnumVehicleDescriptor DeparturesGetForStopAndRouteExpandEnum = "VehicleDescriptor"
	DeparturesGetForStopAndRouteExpandEnumVehiclePosition   DeparturesGetForStopAndRouteExpandEnum = "VehiclePosition"
	DeparturesGetForStopAndRouteExpandEnumNone              DeparturesGetForStopAndRouteExpandEnum = "None"
)

func (e DeparturesGetForStopAndRouteExpandEnum) ToPointer() *DeparturesGetForStopAndRouteExpandEnum {
	return &e
}

func (e *DeparturesGetForStopAndRouteExpandEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "All":
		fallthrough
	case "Stop":
		fallthrough
	case "Route":
		fallthrough
	case "Run":
		fallthrough
	case "Direction":
		fallthrough
	case "Disruption":
		fallthrough
	case "VehicleDescriptor":
		fallthrough
	case "VehiclePosition":
		fallthrough
	case "None":
		*e = DeparturesGetForStopAndRouteExpandEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeparturesGetForStopAndRouteExpandEnum: %v", v)
	}
}

// DeparturesGetForStopAndRouteRouteTypeEnum - Number identifying transport mode; values returned via RouteTypes API
type DeparturesGetForStopAndRouteRouteTypeEnum int

const (
	DeparturesGetForStopAndRouteRouteTypeEnumZero  DeparturesGetForStopAndRouteRouteTypeEnum = 0
	DeparturesGetForStopAndRouteRouteTypeEnumOne   DeparturesGetForStopAndRouteRouteTypeEnum = 1
	DeparturesGetForStopAndRouteRouteTypeEnumTwo   DeparturesGetForStopAndRouteRouteTypeEnum = 2
	DeparturesGetForStopAndRouteRouteTypeEnumThree DeparturesGetForStopAndRouteRouteTypeEnum = 3
	DeparturesGetForStopAndRouteRouteTypeEnumFour  DeparturesGetForStopAndRouteRouteTypeEnum = 4
)

func (e DeparturesGetForStopAndRouteRouteTypeEnum) ToPointer() *DeparturesGetForStopAndRouteRouteTypeEnum {
	return &e
}

func (e *DeparturesGetForStopAndRouteRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = DeparturesGetForStopAndRouteRouteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeparturesGetForStopAndRouteRouteTypeEnum: %v", v)
	}
}

type DeparturesGetForStopAndRouteRequest struct {
	// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
	DateUtc *time.Time `queryParam:"style=form,explode=true,name=date_utc"`
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
	DirectionID *int `queryParam:"style=form,explode=true,name=direction_id"`
	// List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.
	//             Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
	Expand []DeparturesGetForStopAndRouteExpandEnum `queryParam:"style=form,explode=true,name=expand"`
	// Indicates that stop_id parameter will accept "GTFS stop_id" data
	Gtfs *bool `queryParam:"style=form,explode=true,name=gtfs"`
	// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
	IncludeCancelled *bool `queryParam:"style=form,explode=true,name=include_cancelled"`
	// Indicates if the route geopath should be returned
	IncludeGeopath *bool `queryParam:"style=form,explode=true,name=include_geopath"`
	// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
	LookBackwards *bool `queryParam:"style=form,explode=true,name=look_backwards"`
	// Maximum number of results returned
	MaxResults *int `queryParam:"style=form,explode=true,name=max_results"`
	// Identifier of route; values returned by Routes API - v3/routes
	RouteID string `pathParam:"style=simple,explode=false,name=route_id"`
	// Number identifying transport mode; values returned via RouteTypes API
	RouteType DeparturesGetForStopAndRouteRouteTypeEnum `pathParam:"style=simple,explode=false,name=route_type"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Identifier of stop; values returned by Stops API
	StopID int `pathParam:"style=simple,explode=false,name=stop_id"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type DeparturesGetForStopAndRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable).
	V3DeparturesResponse *shared.V3DeparturesResponse
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
}
