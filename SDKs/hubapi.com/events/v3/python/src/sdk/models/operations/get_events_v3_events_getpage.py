"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import collectionresponseexternalunifiedevent as shared_collectionresponseexternalunifiedevent
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetEventsV3EventsGetPageSecurity:
    
    hapikey: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'hapikey' }})  
    oauth2_legacy: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    private_apps_legacy: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'private-app-legacy' }})  
    

@dataclasses.dataclass
class GetEventsV3EventsGetPageRequest:
    
    after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'after', 'style': 'form', 'explode': True }})
    r"""An additional parameter that may be used to get the next `limit` set of results."""  
    before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'before', 'style': 'form', 'explode': True }})  
    event_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'eventType', 'style': 'form', 'explode': True }})
    r"""Limits the response to the specified event type.  For example `&eventType=e_visited_page` returns only `e_visited_page` events.  If not present all event types are returned."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of events to return, defaults to 20."""  
    object_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objectId', 'style': 'form', 'explode': True }})
    r"""The id of the selected object. If not present, then the `objectProperty` parameter is required."""  
    object_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objectType', 'style': 'form', 'explode': True }})
    r"""The type of object being selected. Valid values are hubspot named object types (e.g. `contact`)."""  
    occurred_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurredAfter', 'style': 'form', 'explode': True }})
    r"""The starting time as an ISO 8601 timestamp."""  
    occurred_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurredBefore', 'style': 'form', 'explode': True }})
    r"""The ending time as an ISO 8601 timestamp."""  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Selects the sort field and order. Defaults to ascending, prefix with `-` for descending order. `occurredAt` is the only field supported for sorting."""  
    

@dataclasses.dataclass
class GetEventsV3EventsGetPageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    collection_response_external_unified_event: Optional[shared_collectionresponseexternalunifiedevent.CollectionResponseExternalUnifiedEvent] = dataclasses.field(default=None)
    r"""successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    