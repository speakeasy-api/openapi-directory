// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ImportCertificateAuthorityCertificateXAmzTargetEnum
type ImportCertificateAuthorityCertificateXAmzTargetEnum string

const (
	ImportCertificateAuthorityCertificateXAmzTargetEnumAcmPrivateCaImportCertificateAuthorityCertificate ImportCertificateAuthorityCertificateXAmzTargetEnum = "ACMPrivateCA.ImportCertificateAuthorityCertificate"
)

func (e *ImportCertificateAuthorityCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACMPrivateCA.ImportCertificateAuthorityCertificate":
		*e = ImportCertificateAuthorityCertificateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportCertificateAuthorityCertificateXAmzTargetEnum: %s", s)
	}
}

type ImportCertificateAuthorityCertificateRequest struct {
	ImportCertificateAuthorityCertificateRequest shared.ImportCertificateAuthorityCertificateRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                                *string                                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                            *string                                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                               *string                                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                     *string                                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                            *string                                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                                *string                                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                            *string                                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                                   ImportCertificateAuthorityCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ImportCertificateAuthorityCertificateResponse struct {
	// CertificateMismatchException
	CertificateMismatchException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	// MalformedCertificateException
	MalformedCertificateException interface{}
	// RequestFailedException
	RequestFailedException interface{}
	// RequestInProgressException
	RequestInProgressException interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
