"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceAttributes:
    
    allocated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_at') }})
    r"""Date at which the reward was allocated. (Must be after the reward program is activated and before it is deactivated or expires)"""  
    allocated_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_value') }})
    r"""Value of the reward program budget allocated for the reward. (Must not exceed the remaining budget for the reward program activation)"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the reward."""  
    thread: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_thread'), 'exclude': lambda f: f is None }})
    r"""Unique string identifying the health action with which the reward is associated."""  
    allocated_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_unit'), 'exclude': lambda f: f is None }})
    r"""Unit of the reward program. (Read-only property)"""  
    earned_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the reward was earned. (Read-only property)"""  
    earned_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_value'), 'exclude': lambda f: f is None }})
    r"""Value of the reward that has been earned. (Read-only property)"""  
    fulfilled_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the reward earning was fulfilled. (Read-only property)"""  
    fulfilled_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_value'), 'exclude': lambda f: f is None }})
    r"""Value of the earned reward that has been fulfilled. (Read-only property)"""  
    target_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the patient aspires to achieve the reward. (Must be the same or after the allocated_at date)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceRelationshipsPatientData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceRelationshipsPatient:
    
    data: Optional[RewardResourceRelationshipsPatientData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceRelationshipsRewardProgramActivationData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceRelationshipsRewardProgramActivation:
    
    data: Optional[RewardResourceRelationshipsRewardProgramActivationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceRelationships:
    
    reward_program_activation: RewardResourceRelationshipsRewardProgramActivation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward_program_activation') }})  
    patient: Optional[RewardResourceRelationshipsPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResource:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceAttributesInput:
    
    allocated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_at') }})
    r"""Date at which the reward was allocated. (Must be after the reward program is activated and before it is deactivated or expires)"""  
    allocated_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_value') }})
    r"""Value of the reward program budget allocated for the reward. (Must not exceed the remaining budget for the reward program activation)"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the reward."""  
    thread: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_thread'), 'exclude': lambda f: f is None }})
    r"""Unique string identifying the health action with which the reward is associated."""  
    target_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the patient aspires to achieve the reward. (Must be the same or after the allocated_at date)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceRelationshipsInput:
    
    reward_program_activation: RewardResourceRelationshipsRewardProgramActivation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward_program_activation') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardResourceInput:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardResourceAttributesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardResourceRelationshipsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    