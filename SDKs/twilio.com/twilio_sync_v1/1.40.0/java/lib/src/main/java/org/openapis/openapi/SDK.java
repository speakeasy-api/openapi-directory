/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://sync.twilio.com",
	};
    /**
	 * CREATE_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DOCUMENT_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_STREAM_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_STREAM_MESSAGE_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_LIST_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_LIST_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_MAP_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_MAP_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_STREAM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DOCUMENT_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DOCUMENT_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_LIST_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_LIST_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_LIST_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_MAP_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_MAP_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_MAP_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_STREAM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOCUMENT_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOCUMENT_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_LIST_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_LIST_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_LIST_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_MAP_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_MAP_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_MAP_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_STREAM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DOCUMENT_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DOCUMENT_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_LIST_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_LIST_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_LIST_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_MAP_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_MAP_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_MAP_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * LIST_SYNC_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_STREAM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DOCUMENT_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DOCUMENT_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_LIST_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_LIST_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_LIST_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_MAP_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_MAP_ITEM_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_MAP_PERMISSION_SERVERS = {
        "https://sync.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_STREAM_SERVERS = {
        "https://sync.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateDocumentResponse createDocument(org.openapis.openapi.models.operations.CreateDocumentRequest request, org.openapis.openapi.models.operations.CreateDocumentSecurity security) throws Exception {
        return this.createDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateDocumentResponse createDocument(org.openapis.openapi.models.operations.CreateDocumentRequest request, org.openapis.openapi.models.operations.CreateDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDocumentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDocumentResponse res = new org.openapis.openapi.models.operations.CreateDocumentResponse() {{
            syncV1ServiceDocument = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceDocument.class);
                res.syncV1ServiceDocument = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            syncV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1Service.class);
                res.syncV1Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new Stream Message.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateStreamMessageResponse createStreamMessage(org.openapis.openapi.models.operations.CreateStreamMessageRequest request, org.openapis.openapi.models.operations.CreateStreamMessageSecurity security) throws Exception {
        return this.createStreamMessage(request, security, null);
    }

    /**
     * Create a new Stream Message.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateStreamMessageResponse createStreamMessage(org.openapis.openapi.models.operations.CreateStreamMessageRequest request, org.openapis.openapi.models.operations.CreateStreamMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_STREAM_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateStreamMessageRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Streams/{StreamSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateStreamMessageResponse res = new org.openapis.openapi.models.operations.CreateStreamMessageResponse() {{
            syncV1ServiceSyncStreamStreamMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncStreamStreamMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncStreamStreamMessage.class);
                res.syncV1ServiceSyncStreamStreamMessage = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncListResponse createSyncList(org.openapis.openapi.models.operations.CreateSyncListRequest request, org.openapis.openapi.models.operations.CreateSyncListSecurity security) throws Exception {
        return this.createSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncListResponse createSyncList(org.openapis.openapi.models.operations.CreateSyncListRequest request, org.openapis.openapi.models.operations.CreateSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncListRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncListResponse res = new org.openapis.openapi.models.operations.CreateSyncListResponse() {{
            syncV1ServiceSyncList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncList.class);
                res.syncV1ServiceSyncList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncListItemResponse createSyncListItem(org.openapis.openapi.models.operations.CreateSyncListItemRequest request, org.openapis.openapi.models.operations.CreateSyncListItemSecurity security) throws Exception {
        return this.createSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncListItemResponse createSyncListItem(org.openapis.openapi.models.operations.CreateSyncListItemRequest request, org.openapis.openapi.models.operations.CreateSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncListItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncListItemResponse res = new org.openapis.openapi.models.operations.CreateSyncListItemResponse() {{
            syncV1ServiceSyncListSyncListItem = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListItem.class);
                res.syncV1ServiceSyncListSyncListItem = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncMapResponse createSyncMap(org.openapis.openapi.models.operations.CreateSyncMapRequest request, org.openapis.openapi.models.operations.CreateSyncMapSecurity security) throws Exception {
        return this.createSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncMapResponse createSyncMap(org.openapis.openapi.models.operations.CreateSyncMapRequest request, org.openapis.openapi.models.operations.CreateSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncMapRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncMapResponse res = new org.openapis.openapi.models.operations.CreateSyncMapResponse() {{
            syncV1ServiceSyncMap = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMap out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMap.class);
                res.syncV1ServiceSyncMap = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncMapItemResponse createSyncMapItem(org.openapis.openapi.models.operations.CreateSyncMapItemRequest request, org.openapis.openapi.models.operations.CreateSyncMapItemSecurity security) throws Exception {
        return this.createSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncMapItemResponse createSyncMapItem(org.openapis.openapi.models.operations.CreateSyncMapItemRequest request, org.openapis.openapi.models.operations.CreateSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncMapItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncMapItemResponse res = new org.openapis.openapi.models.operations.CreateSyncMapItemResponse() {{
            syncV1ServiceSyncMapSyncMapItem = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapItem.class);
                res.syncV1ServiceSyncMapSyncMapItem = out;
            }
        }

        return res;
    }

    /**
     * Create a new Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSyncStreamResponse createSyncStream(org.openapis.openapi.models.operations.CreateSyncStreamRequest request, org.openapis.openapi.models.operations.CreateSyncStreamSecurity security) throws Exception {
        return this.createSyncStream(request, security, null);
    }

    /**
     * Create a new Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSyncStreamResponse createSyncStream(org.openapis.openapi.models.operations.CreateSyncStreamRequest request, org.openapis.openapi.models.operations.CreateSyncStreamSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_STREAM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncStreamRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Streams", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncStreamResponse res = new org.openapis.openapi.models.operations.CreateSyncStreamResponse() {{
            syncV1ServiceSyncStream = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncStream out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncStream.class);
                res.syncV1ServiceSyncStream = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteDocumentResponse deleteDocument(org.openapis.openapi.models.operations.DeleteDocumentRequest request, org.openapis.openapi.models.operations.DeleteDocumentSecurity security) throws Exception {
        return this.deleteDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteDocumentResponse deleteDocument(org.openapis.openapi.models.operations.DeleteDocumentRequest request, org.openapis.openapi.models.operations.DeleteDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDocumentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDocumentResponse res = new org.openapis.openapi.models.operations.DeleteDocumentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDocumentPermissionResponse deleteDocumentPermission(org.openapis.openapi.models.operations.DeleteDocumentPermissionRequest request, org.openapis.openapi.models.operations.DeleteDocumentPermissionSecurity security) throws Exception {
        return this.deleteDocumentPermission(request, security, null);
    }

    /**
     * Delete a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDocumentPermissionResponse deleteDocumentPermission(org.openapis.openapi.models.operations.DeleteDocumentPermissionRequest request, org.openapis.openapi.models.operations.DeleteDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDocumentPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDocumentPermissionResponse res = new org.openapis.openapi.models.operations.DeleteDocumentPermissionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncListResponse deleteSyncList(org.openapis.openapi.models.operations.DeleteSyncListRequest request, org.openapis.openapi.models.operations.DeleteSyncListSecurity security) throws Exception {
        return this.deleteSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncListResponse deleteSyncList(org.openapis.openapi.models.operations.DeleteSyncListRequest request, org.openapis.openapi.models.operations.DeleteSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncListRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncListResponse res = new org.openapis.openapi.models.operations.DeleteSyncListResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncListItemResponse deleteSyncListItem(org.openapis.openapi.models.operations.DeleteSyncListItemRequest request, org.openapis.openapi.models.operations.DeleteSyncListItemSecurity security) throws Exception {
        return this.deleteSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncListItemResponse deleteSyncListItem(org.openapis.openapi.models.operations.DeleteSyncListItemRequest request, org.openapis.openapi.models.operations.DeleteSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncListItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncListItemResponse res = new org.openapis.openapi.models.operations.DeleteSyncListItemResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncListPermissionResponse deleteSyncListPermission(org.openapis.openapi.models.operations.DeleteSyncListPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncListPermissionSecurity security) throws Exception {
        return this.deleteSyncListPermission(request, security, null);
    }

    /**
     * Delete a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncListPermissionResponse deleteSyncListPermission(org.openapis.openapi.models.operations.DeleteSyncListPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncListPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncListPermissionResponse res = new org.openapis.openapi.models.operations.DeleteSyncListPermissionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncMapResponse deleteSyncMap(org.openapis.openapi.models.operations.DeleteSyncMapRequest request, org.openapis.openapi.models.operations.DeleteSyncMapSecurity security) throws Exception {
        return this.deleteSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncMapResponse deleteSyncMap(org.openapis.openapi.models.operations.DeleteSyncMapRequest request, org.openapis.openapi.models.operations.DeleteSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncMapRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncMapResponse res = new org.openapis.openapi.models.operations.DeleteSyncMapResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncMapItemResponse deleteSyncMapItem(org.openapis.openapi.models.operations.DeleteSyncMapItemRequest request, org.openapis.openapi.models.operations.DeleteSyncMapItemSecurity security) throws Exception {
        return this.deleteSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncMapItemResponse deleteSyncMapItem(org.openapis.openapi.models.operations.DeleteSyncMapItemRequest request, org.openapis.openapi.models.operations.DeleteSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncMapItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncMapItemResponse res = new org.openapis.openapi.models.operations.DeleteSyncMapItemResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncMapPermissionResponse deleteSyncMapPermission(org.openapis.openapi.models.operations.DeleteSyncMapPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncMapPermissionSecurity security) throws Exception {
        return this.deleteSyncMapPermission(request, security, null);
    }

    /**
     * Delete a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncMapPermissionResponse deleteSyncMapPermission(org.openapis.openapi.models.operations.DeleteSyncMapPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncMapPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.DeleteSyncMapPermissionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncStreamResponse deleteSyncStream(org.openapis.openapi.models.operations.DeleteSyncStreamRequest request, org.openapis.openapi.models.operations.DeleteSyncStreamSecurity security) throws Exception {
        return this.deleteSyncStream(request, security, null);
    }

    /**
     * Delete a specific Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncStreamResponse deleteSyncStream(org.openapis.openapi.models.operations.DeleteSyncStreamRequest request, org.openapis.openapi.models.operations.DeleteSyncStreamSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_STREAM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncStreamRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Streams/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncStreamResponse res = new org.openapis.openapi.models.operations.DeleteSyncStreamResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchDocumentResponse fetchDocument(org.openapis.openapi.models.operations.FetchDocumentRequest request, org.openapis.openapi.models.operations.FetchDocumentSecurity security) throws Exception {
        return this.fetchDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchDocumentResponse fetchDocument(org.openapis.openapi.models.operations.FetchDocumentRequest request, org.openapis.openapi.models.operations.FetchDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDocumentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDocumentResponse res = new org.openapis.openapi.models.operations.FetchDocumentResponse() {{
            syncV1ServiceDocument = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceDocument.class);
                res.syncV1ServiceDocument = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDocumentPermissionResponse fetchDocumentPermission(org.openapis.openapi.models.operations.FetchDocumentPermissionRequest request, org.openapis.openapi.models.operations.FetchDocumentPermissionSecurity security) throws Exception {
        return this.fetchDocumentPermission(request, security, null);
    }

    /**
     * Fetch a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDocumentPermissionResponse fetchDocumentPermission(org.openapis.openapi.models.operations.FetchDocumentPermissionRequest request, org.openapis.openapi.models.operations.FetchDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDocumentPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDocumentPermissionResponse res = new org.openapis.openapi.models.operations.FetchDocumentPermissionResponse() {{
            syncV1ServiceDocumentDocumentPermission = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceDocumentDocumentPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceDocumentDocumentPermission.class);
                res.syncV1ServiceDocumentDocumentPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            syncV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1Service.class);
                res.syncV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncListResponse fetchSyncList(org.openapis.openapi.models.operations.FetchSyncListRequest request, org.openapis.openapi.models.operations.FetchSyncListSecurity security) throws Exception {
        return this.fetchSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncListResponse fetchSyncList(org.openapis.openapi.models.operations.FetchSyncListRequest request, org.openapis.openapi.models.operations.FetchSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncListRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncListResponse res = new org.openapis.openapi.models.operations.FetchSyncListResponse() {{
            syncV1ServiceSyncList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncList.class);
                res.syncV1ServiceSyncList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncListItemResponse fetchSyncListItem(org.openapis.openapi.models.operations.FetchSyncListItemRequest request, org.openapis.openapi.models.operations.FetchSyncListItemSecurity security) throws Exception {
        return this.fetchSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncListItemResponse fetchSyncListItem(org.openapis.openapi.models.operations.FetchSyncListItemRequest request, org.openapis.openapi.models.operations.FetchSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncListItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncListItemResponse res = new org.openapis.openapi.models.operations.FetchSyncListItemResponse() {{
            syncV1ServiceSyncListSyncListItem = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListItem.class);
                res.syncV1ServiceSyncListSyncListItem = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncListPermissionResponse fetchSyncListPermission(org.openapis.openapi.models.operations.FetchSyncListPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncListPermissionSecurity security) throws Exception {
        return this.fetchSyncListPermission(request, security, null);
    }

    /**
     * Fetch a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncListPermissionResponse fetchSyncListPermission(org.openapis.openapi.models.operations.FetchSyncListPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncListPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncListPermissionResponse res = new org.openapis.openapi.models.operations.FetchSyncListPermissionResponse() {{
            syncV1ServiceSyncListSyncListPermission = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListPermission.class);
                res.syncV1ServiceSyncListSyncListPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncMapResponse fetchSyncMap(org.openapis.openapi.models.operations.FetchSyncMapRequest request, org.openapis.openapi.models.operations.FetchSyncMapSecurity security) throws Exception {
        return this.fetchSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncMapResponse fetchSyncMap(org.openapis.openapi.models.operations.FetchSyncMapRequest request, org.openapis.openapi.models.operations.FetchSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncMapRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncMapResponse res = new org.openapis.openapi.models.operations.FetchSyncMapResponse() {{
            syncV1ServiceSyncMap = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMap out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMap.class);
                res.syncV1ServiceSyncMap = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncMapItemResponse fetchSyncMapItem(org.openapis.openapi.models.operations.FetchSyncMapItemRequest request, org.openapis.openapi.models.operations.FetchSyncMapItemSecurity security) throws Exception {
        return this.fetchSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncMapItemResponse fetchSyncMapItem(org.openapis.openapi.models.operations.FetchSyncMapItemRequest request, org.openapis.openapi.models.operations.FetchSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncMapItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncMapItemResponse res = new org.openapis.openapi.models.operations.FetchSyncMapItemResponse() {{
            syncV1ServiceSyncMapSyncMapItem = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapItem.class);
                res.syncV1ServiceSyncMapSyncMapItem = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncMapPermissionResponse fetchSyncMapPermission(org.openapis.openapi.models.operations.FetchSyncMapPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncMapPermissionSecurity security) throws Exception {
        return this.fetchSyncMapPermission(request, security, null);
    }

    /**
     * Fetch a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncMapPermissionResponse fetchSyncMapPermission(org.openapis.openapi.models.operations.FetchSyncMapPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncMapPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.FetchSyncMapPermissionResponse() {{
            syncV1ServiceSyncMapSyncMapPermission = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapPermission.class);
                res.syncV1ServiceSyncMapSyncMapPermission = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncStreamResponse fetchSyncStream(org.openapis.openapi.models.operations.FetchSyncStreamRequest request, org.openapis.openapi.models.operations.FetchSyncStreamSecurity security) throws Exception {
        return this.fetchSyncStream(request, security, null);
    }

    /**
     * Fetch a specific Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncStreamResponse fetchSyncStream(org.openapis.openapi.models.operations.FetchSyncStreamRequest request, org.openapis.openapi.models.operations.FetchSyncStreamSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_STREAM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncStreamRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Streams/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncStreamResponse res = new org.openapis.openapi.models.operations.FetchSyncStreamResponse() {{
            syncV1ServiceSyncStream = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncStream out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncStream.class);
                res.syncV1ServiceSyncStream = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListDocumentResponse listDocument(org.openapis.openapi.models.operations.ListDocumentRequest request, org.openapis.openapi.models.operations.ListDocumentSecurity security) throws Exception {
        return this.listDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListDocumentResponse listDocument(org.openapis.openapi.models.operations.ListDocumentRequest request, org.openapis.openapi.models.operations.ListDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDocumentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDocumentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDocumentResponse res = new org.openapis.openapi.models.operations.ListDocumentResponse() {{
            listDocumentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDocumentListDocumentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDocumentListDocumentResponse.class);
                res.listDocumentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDocumentPermissionResponse listDocumentPermission(org.openapis.openapi.models.operations.ListDocumentPermissionRequest request, org.openapis.openapi.models.operations.ListDocumentPermissionSecurity security) throws Exception {
        return this.listDocumentPermission(request, security, null);
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDocumentPermissionResponse listDocumentPermission(org.openapis.openapi.models.operations.ListDocumentPermissionRequest request, org.openapis.openapi.models.operations.ListDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDocumentPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDocumentPermissionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDocumentPermissionResponse res = new org.openapis.openapi.models.operations.ListDocumentPermissionResponse() {{
            listDocumentPermissionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDocumentPermissionListDocumentPermissionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDocumentPermissionListDocumentPermissionResponse.class);
                res.listDocumentPermissionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncListResponse listSyncList(org.openapis.openapi.models.operations.ListSyncListRequest request, org.openapis.openapi.models.operations.ListSyncListSecurity security) throws Exception {
        return this.listSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncListResponse listSyncList(org.openapis.openapi.models.operations.ListSyncListRequest request, org.openapis.openapi.models.operations.ListSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncListRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncListResponse res = new org.openapis.openapi.models.operations.ListSyncListResponse() {{
            listSyncListResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncListListSyncListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncListListSyncListResponse.class);
                res.listSyncListResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncListItemResponse listSyncListItem(org.openapis.openapi.models.operations.ListSyncListItemRequest request, org.openapis.openapi.models.operations.ListSyncListItemSecurity security) throws Exception {
        return this.listSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncListItemResponse listSyncListItem(org.openapis.openapi.models.operations.ListSyncListItemRequest request, org.openapis.openapi.models.operations.ListSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncListItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncListItemRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncListItemResponse res = new org.openapis.openapi.models.operations.ListSyncListItemResponse() {{
            listSyncListItemResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncListItemListSyncListItemResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncListItemListSyncListItemResponse.class);
                res.listSyncListItemResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncListPermissionResponse listSyncListPermission(org.openapis.openapi.models.operations.ListSyncListPermissionRequest request, org.openapis.openapi.models.operations.ListSyncListPermissionSecurity security) throws Exception {
        return this.listSyncListPermission(request, security, null);
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncListPermissionResponse listSyncListPermission(org.openapis.openapi.models.operations.ListSyncListPermissionRequest request, org.openapis.openapi.models.operations.ListSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncListPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncListPermissionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncListPermissionResponse res = new org.openapis.openapi.models.operations.ListSyncListPermissionResponse() {{
            listSyncListPermissionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncListPermissionListSyncListPermissionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncListPermissionListSyncListPermissionResponse.class);
                res.listSyncListPermissionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncMapResponse listSyncMap(org.openapis.openapi.models.operations.ListSyncMapRequest request, org.openapis.openapi.models.operations.ListSyncMapSecurity security) throws Exception {
        return this.listSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncMapResponse listSyncMap(org.openapis.openapi.models.operations.ListSyncMapRequest request, org.openapis.openapi.models.operations.ListSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncMapRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncMapRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncMapResponse res = new org.openapis.openapi.models.operations.ListSyncMapResponse() {{
            listSyncMapResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncMapListSyncMapResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncMapListSyncMapResponse.class);
                res.listSyncMapResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncMapItemResponse listSyncMapItem(org.openapis.openapi.models.operations.ListSyncMapItemRequest request, org.openapis.openapi.models.operations.ListSyncMapItemSecurity security) throws Exception {
        return this.listSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncMapItemResponse listSyncMapItem(org.openapis.openapi.models.operations.ListSyncMapItemRequest request, org.openapis.openapi.models.operations.ListSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncMapItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncMapItemRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncMapItemResponse res = new org.openapis.openapi.models.operations.ListSyncMapItemResponse() {{
            listSyncMapItemResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncMapItemListSyncMapItemResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncMapItemListSyncMapItemResponse.class);
                res.listSyncMapItemResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncMapPermissionResponse listSyncMapPermission(org.openapis.openapi.models.operations.ListSyncMapPermissionRequest request, org.openapis.openapi.models.operations.ListSyncMapPermissionSecurity security) throws Exception {
        return this.listSyncMapPermission(request, security, null);
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncMapPermissionResponse listSyncMapPermission(org.openapis.openapi.models.operations.ListSyncMapPermissionRequest request, org.openapis.openapi.models.operations.ListSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncMapPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncMapPermissionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.ListSyncMapPermissionResponse() {{
            listSyncMapPermissionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncMapPermissionListSyncMapPermissionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncMapPermissionListSyncMapPermissionResponse.class);
                res.listSyncMapPermissionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Streams in a Service Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncStreamResponse listSyncStream(org.openapis.openapi.models.operations.ListSyncStreamRequest request, org.openapis.openapi.models.operations.ListSyncStreamSecurity security) throws Exception {
        return this.listSyncStream(request, security, null);
    }

    /**
     * Retrieve a list of all Streams in a Service Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncStreamResponse listSyncStream(org.openapis.openapi.models.operations.ListSyncStreamRequest request, org.openapis.openapi.models.operations.ListSyncStreamSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_STREAM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncStreamRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Streams", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncStreamRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncStreamResponse res = new org.openapis.openapi.models.operations.ListSyncStreamResponse() {{
            listSyncStreamResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncStreamListSyncStreamResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncStreamListSyncStreamResponse.class);
                res.listSyncStreamResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateDocumentResponse updateDocument(org.openapis.openapi.models.operations.UpdateDocumentRequest request, org.openapis.openapi.models.operations.UpdateDocumentSecurity security) throws Exception {
        return this.updateDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateDocumentResponse updateDocument(org.openapis.openapi.models.operations.UpdateDocumentRequest request, org.openapis.openapi.models.operations.UpdateDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDocumentRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDocumentResponse res = new org.openapis.openapi.models.operations.UpdateDocumentResponse() {{
            syncV1ServiceDocument = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceDocument.class);
                res.syncV1ServiceDocument = out;
            }
        }

        return res;
    }

    /**
     * Update an identity's access to a specific Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDocumentPermissionResponse updateDocumentPermission(org.openapis.openapi.models.operations.UpdateDocumentPermissionRequest request, org.openapis.openapi.models.operations.UpdateDocumentPermissionSecurity security) throws Exception {
        return this.updateDocumentPermission(request, security, null);
    }

    /**
     * Update an identity's access to a specific Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDocumentPermissionResponse updateDocumentPermission(org.openapis.openapi.models.operations.UpdateDocumentPermissionRequest request, org.openapis.openapi.models.operations.UpdateDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDocumentPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDocumentPermissionResponse res = new org.openapis.openapi.models.operations.UpdateDocumentPermissionResponse() {{
            syncV1ServiceDocumentDocumentPermission = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceDocumentDocumentPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceDocumentDocumentPermission.class);
                res.syncV1ServiceDocumentDocumentPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security) throws Exception {
        return this.updateService(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse() {{
            syncV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1Service.class);
                res.syncV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncListResponse updateSyncList(org.openapis.openapi.models.operations.UpdateSyncListRequest request, org.openapis.openapi.models.operations.UpdateSyncListSecurity security) throws Exception {
        return this.updateSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncListResponse updateSyncList(org.openapis.openapi.models.operations.UpdateSyncListRequest request, org.openapis.openapi.models.operations.UpdateSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncListRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncListResponse res = new org.openapis.openapi.models.operations.UpdateSyncListResponse() {{
            syncV1ServiceSyncList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncList.class);
                res.syncV1ServiceSyncList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncListItemResponse updateSyncListItem(org.openapis.openapi.models.operations.UpdateSyncListItemRequest request, org.openapis.openapi.models.operations.UpdateSyncListItemSecurity security) throws Exception {
        return this.updateSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncListItemResponse updateSyncListItem(org.openapis.openapi.models.operations.UpdateSyncListItemRequest request, org.openapis.openapi.models.operations.UpdateSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncListItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncListItemResponse res = new org.openapis.openapi.models.operations.UpdateSyncListItemResponse() {{
            syncV1ServiceSyncListSyncListItem = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListItem.class);
                res.syncV1ServiceSyncListSyncListItem = out;
            }
        }

        return res;
    }

    /**
     * Update an identity's access to a specific Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncListPermissionResponse updateSyncListPermission(org.openapis.openapi.models.operations.UpdateSyncListPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncListPermissionSecurity security) throws Exception {
        return this.updateSyncListPermission(request, security, null);
    }

    /**
     * Update an identity's access to a specific Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncListPermissionResponse updateSyncListPermission(org.openapis.openapi.models.operations.UpdateSyncListPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncListPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncListPermissionResponse res = new org.openapis.openapi.models.operations.UpdateSyncListPermissionResponse() {{
            syncV1ServiceSyncListSyncListPermission = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncListSyncListPermission.class);
                res.syncV1ServiceSyncListSyncListPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncMapResponse updateSyncMap(org.openapis.openapi.models.operations.UpdateSyncMapRequest request, org.openapis.openapi.models.operations.UpdateSyncMapSecurity security) throws Exception {
        return this.updateSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncMapResponse updateSyncMap(org.openapis.openapi.models.operations.UpdateSyncMapRequest request, org.openapis.openapi.models.operations.UpdateSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncMapRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncMapResponse res = new org.openapis.openapi.models.operations.UpdateSyncMapResponse() {{
            syncV1ServiceSyncMap = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMap out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMap.class);
                res.syncV1ServiceSyncMap = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncMapItemResponse updateSyncMapItem(org.openapis.openapi.models.operations.UpdateSyncMapItemRequest request, org.openapis.openapi.models.operations.UpdateSyncMapItemSecurity security) throws Exception {
        return this.updateSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncMapItemResponse updateSyncMapItem(org.openapis.openapi.models.operations.UpdateSyncMapItemRequest request, org.openapis.openapi.models.operations.UpdateSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncMapItemRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncMapItemResponse res = new org.openapis.openapi.models.operations.UpdateSyncMapItemResponse() {{
            syncV1ServiceSyncMapSyncMapItem = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapItem.class);
                res.syncV1ServiceSyncMapSyncMapItem = out;
            }
        }

        return res;
    }

    /**
     * Update an identity's access to a specific Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncMapPermissionResponse updateSyncMapPermission(org.openapis.openapi.models.operations.UpdateSyncMapPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncMapPermissionSecurity security) throws Exception {
        return this.updateSyncMapPermission(request, security, null);
    }

    /**
     * Update an identity's access to a specific Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncMapPermissionResponse updateSyncMapPermission(org.openapis.openapi.models.operations.UpdateSyncMapPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncMapPermissionRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.UpdateSyncMapPermissionResponse() {{
            syncV1ServiceSyncMapSyncMapPermission = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncMapSyncMapPermission.class);
                res.syncV1ServiceSyncMapSyncMapPermission = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncStreamResponse updateSyncStream(org.openapis.openapi.models.operations.UpdateSyncStreamRequest request, org.openapis.openapi.models.operations.UpdateSyncStreamSecurity security) throws Exception {
        return this.updateSyncStream(request, security, null);
    }

    /**
     * Update a specific Stream.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncStreamResponse updateSyncStream(org.openapis.openapi.models.operations.UpdateSyncStreamRequest request, org.openapis.openapi.models.operations.UpdateSyncStreamSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_STREAM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncStreamRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Streams/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncStreamResponse res = new org.openapis.openapi.models.operations.UpdateSyncStreamResponse() {{
            syncV1ServiceSyncStream = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyncV1ServiceSyncStream out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyncV1ServiceSyncStream.class);
                res.syncV1ServiceSyncStream = out;
            }
        }

        return res;
    }
}