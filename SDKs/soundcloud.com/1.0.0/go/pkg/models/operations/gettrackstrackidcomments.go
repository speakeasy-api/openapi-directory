// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetTracksTrackIDCommentsSecurity struct {
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=query"`
}

type GetTracksTrackIDCommentsPathParams struct {
	// SoundCloud Track id
	TrackID int64 `pathParam:"style=simple,explode=false,name=track_id"`
}

type GetTracksTrackIDCommentsQueryParams struct {
	// Number of results to return in the collection.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
	LinkedPartitioning *bool `queryParam:"style=form,explode=true,name=linked_partitioning"`
	// Offset of first result. Deprecated, use `linked_partitioning` instead.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
}

type GetTracksTrackIDCommentsRequest struct {
	PathParams  GetTracksTrackIDCommentsPathParams
	QueryParams GetTracksTrackIDCommentsQueryParams
	Security    GetTracksTrackIDCommentsSecurity
}

type GetTracksTrackIDComments200ApplicationJSONType string

const (
	GetTracksTrackIDComments200ApplicationJSONTypeComments       GetTracksTrackIDComments200ApplicationJSONType = "Comments"
	GetTracksTrackIDComments200ApplicationJSONTypeArrayOfComment GetTracksTrackIDComments200ApplicationJSONType = "arrayOfComment"
)

type GetTracksTrackIDComments200ApplicationJSON struct {
	Comments       *shared.Comments
	ArrayOfComment []shared.Comment

	Type GetTracksTrackIDComments200ApplicationJSONType
}

func CreateGetTracksTrackIDComments200ApplicationJSONComments(comments shared.Comments) GetTracksTrackIDComments200ApplicationJSON {
	typ := GetTracksTrackIDComments200ApplicationJSONTypeComments

	return GetTracksTrackIDComments200ApplicationJSON{
		Comments: &comments,
		Type:     typ,
	}
}

func CreateGetTracksTrackIDComments200ApplicationJSONArrayOfComment(arrayOfComment []shared.Comment) GetTracksTrackIDComments200ApplicationJSON {
	typ := GetTracksTrackIDComments200ApplicationJSONTypeArrayOfComment

	return GetTracksTrackIDComments200ApplicationJSON{
		ArrayOfComment: arrayOfComment,
		Type:           typ,
	}
}

func (u *GetTracksTrackIDComments200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	comments := new(shared.Comments)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&comments); err == nil {
		u.Comments = comments
		u.Type = GetTracksTrackIDComments200ApplicationJSONTypeComments
		return nil
	}

	arrayOfComment := []shared.Comment{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfComment); err == nil {
		u.ArrayOfComment = arrayOfComment
		u.Type = GetTracksTrackIDComments200ApplicationJSONTypeArrayOfComment
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTracksTrackIDComments200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Comments != nil {
		return json.Marshal(u.Comments)
	}

	if u.ArrayOfComment != nil {
		return json.Marshal(u.ArrayOfComment)
	}

	return nil, nil
}

type GetTracksTrackIDCommentsResponse struct {
	ContentType string
	// Unauthorized
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetTracksTrackIDComments200ApplicationJSONOneOf *GetTracksTrackIDComments200ApplicationJSON
}
