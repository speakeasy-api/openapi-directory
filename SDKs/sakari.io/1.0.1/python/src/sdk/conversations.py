"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Conversations:
    r"""Conversations group your message history with each contact into one thread"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def conversations_close(self, request: operations.ConversationsCloseRequest, security: operations.ConversationsCloseSecurity) -> operations.ConversationsCloseResponse:
        r"""Closes a conversation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversationsCloseRequest, base_url, '/v1/accounts/{accountId}/conversations/{conversationId}/close', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversationsCloseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversationResponse])
                res.conversation_response = out

        return res

    def conversations_fetch(self, request: operations.ConversationsFetchRequest, security: operations.ConversationsFetchSecurity) -> operations.ConversationsFetchResponse:
        r"""Fetch conversation by ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversationsFetchRequest, base_url, '/v1/accounts/{accountId}/conversations/{conversationId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversationsFetchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversationResponse])
                res.conversation_response = out

        return res

    def conversations_fetch_all(self, request: operations.ConversationsFetchAllRequest, security: operations.ConversationsFetchAllSecurity) -> operations.ConversationsFetchAllResponse:
        r"""Fetch conversations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversationsFetchAllRequest, base_url, '/v1/accounts/{accountId}/conversations', request)
        
        query_params = utils.get_query_params(operations.ConversationsFetchAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversationsFetchAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversationsResponse])
                res.conversations_response = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    