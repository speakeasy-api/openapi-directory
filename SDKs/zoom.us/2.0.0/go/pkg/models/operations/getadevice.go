// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetADeviceSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type GetADevicePathParams struct {
	// Unique Identifier of the device.
	DeviceID string `pathParam:"style=simple,explode=false,name=deviceId"`
}

type GetADeviceRequest struct {
	PathParams GetADevicePathParams
	Security   GetADeviceSecurity
}

// GetADevice200ApplicationXMLAssignee - User to whom the device has been assigned.
type GetADevice200ApplicationXMLAssignee struct {
	// Extension number of the Zoom Phone used by the user.
	ExtensionNumber *int64
	// User ID of the user to whom the device has been assigned.
	ID *string
	// Name of the user.
	Name *string
}

// GetADevice200ApplicationXMLProvisionSipAccountsSharedLineLineSubscription - Line subscription.
type GetADevice200ApplicationXMLProvisionSipAccountsSharedLineLineSubscription struct {
	// Display name.
	DisplayName *string
	// Extension number.
	ExtensionNumber *int64
	// Phone number.
	PhoneNumber *string
}

// GetADevice200ApplicationXMLProvisionSipAccountsSharedLine - Return additional provisioning information with generic device SIP credentials.
type GetADevice200ApplicationXMLProvisionSipAccountsSharedLine struct {
	// Alias.
	Alias *string
	// Line subscription.
	LineSubscription *GetADevice200ApplicationXMLProvisionSipAccountsSharedLineLineSubscription
	// Outbound caller ID.
	OutboundCallerID *string
}

type GetADevice200ApplicationXMLProvisionSipAccounts struct {
	// Authorization ID of the SIP account provided in the provisioning process.
	AuthorizationID *string
	// Outbound proxy provided in the provisioning process.
	OutboundProxy *string
	// Password entered during the  provisioning process.
	Password *string
	// Return additional provisioning information with generic device SIP credentials.
	SharedLine *GetADevice200ApplicationXMLProvisionSipAccountsSharedLine
	// SIP Domain provided in the provisioning process.<br>
	//
	SipDomain *string
	// User name of the SIP account provided in the provisioning process.
	UserName *string
}

// GetADevice200ApplicationXMLProvisionTypeEnum - [Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
//
// * `ztp` : Zero touch provisioning.
// * `assisted`: Assisted provisioning.
// * `manual`: Manual provisioning.
type GetADevice200ApplicationXMLProvisionTypeEnum string

const (
	GetADevice200ApplicationXMLProvisionTypeEnumAssisted GetADevice200ApplicationXMLProvisionTypeEnum = "assisted"
	GetADevice200ApplicationXMLProvisionTypeEnumZtp      GetADevice200ApplicationXMLProvisionTypeEnum = "ztp"
	GetADevice200ApplicationXMLProvisionTypeEnumManual   GetADevice200ApplicationXMLProvisionTypeEnum = "manual"
)

func (e *GetADevice200ApplicationXMLProvisionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "assisted":
		fallthrough
	case "ztp":
		fallthrough
	case "manual":
		*e = GetADevice200ApplicationXMLProvisionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetADevice200ApplicationXMLProvisionTypeEnum: %s", s)
	}
}

// GetADevice200ApplicationXMLProvision - Provisioning information of a device.
type GetADevice200ApplicationXMLProvision struct {
	// SIP Account details registered during the device provisioning process. This object will only be returned if manual provisioning was used for the device.
	SipAccounts []GetADevice200ApplicationXMLProvisionSipAccounts
	// [Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
	//
	// * `ztp` : Zero touch provisioning.
	// * `assisted`: Assisted provisioning.
	// * `manual`: Manual provisioning.
	//
	//
	Type *GetADevice200ApplicationXMLProvisionTypeEnum
	// Provisioning URL. This field will only be returned for devices that were provisioned via `assisted` provisioning type.
	URL *string
}

type GetADevice200ApplicationXMLSite struct {
	// The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user.
	ID *string
	// Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672).
	Name *string
}

// GetADevice200ApplicationXMLStatusEnum - Status of the device. The value is either `online` or `offline`.
type GetADevice200ApplicationXMLStatusEnum string

const (
	GetADevice200ApplicationXMLStatusEnumOnline  GetADevice200ApplicationXMLStatusEnum = "online"
	GetADevice200ApplicationXMLStatusEnumOffline GetADevice200ApplicationXMLStatusEnum = "offline"
)

func (e *GetADevice200ApplicationXMLStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "online":
		fallthrough
	case "offline":
		*e = GetADevice200ApplicationXMLStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetADevice200ApplicationXMLStatusEnum: %s", s)
	}
}

// GetADevice200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Device information retrieved successfully.
type GetADevice200ApplicationXML struct {
	// User to whom the device has been assigned.
	Assignee *GetADevice200ApplicationXMLAssignee
	// Includes manufacturer name and the model name.
	DeviceType *string
	// Display name of the device.
	DisplayName *string
	// Device ID - Unique Identifier of the Device.
	ID *string
	// MAC address or serial number of the device.
	MacAddress *string
	// Provisioning information of a device.
	Provision *GetADevice200ApplicationXMLProvision
	Site      *GetADevice200ApplicationXMLSite
	// Status of the device. The value is either `online` or `offline`.
	Status *GetADevice200ApplicationXMLStatusEnum
}

// GetADevice200ApplicationJSONAssignee - User to whom the device has been assigned.
type GetADevice200ApplicationJSONAssignee struct {
	// Extension number of the Zoom Phone used by the user.
	ExtensionNumber *int64 `json:"extension_number,omitempty"`
	// User ID of the user to whom the device has been assigned.
	ID *string `json:"id,omitempty"`
	// Name of the user.
	Name *string `json:"name,omitempty"`
}

// GetADevice200ApplicationJSONProvisionSipAccountsSharedLineLineSubscription - Line subscription.
type GetADevice200ApplicationJSONProvisionSipAccountsSharedLineLineSubscription struct {
	// Display name.
	DisplayName *string `json:"display_name,omitempty"`
	// Extension number.
	ExtensionNumber *int64 `json:"extension_number,omitempty"`
	// Phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
}

// GetADevice200ApplicationJSONProvisionSipAccountsSharedLine - Return additional provisioning information with generic device SIP credentials.
type GetADevice200ApplicationJSONProvisionSipAccountsSharedLine struct {
	// Alias.
	Alias *string `json:"alias,omitempty"`
	// Line subscription.
	LineSubscription *GetADevice200ApplicationJSONProvisionSipAccountsSharedLineLineSubscription `json:"line_subscription,omitempty"`
	// Outbound caller ID.
	OutboundCallerID *string `json:"outbound_caller_id,omitempty"`
}

type GetADevice200ApplicationJSONProvisionSipAccounts struct {
	// Authorization ID of the SIP account provided in the provisioning process.
	AuthorizationID *string `json:"authorization_id,omitempty"`
	// Outbound proxy provided in the provisioning process.
	OutboundProxy *string `json:"outbound_proxy,omitempty"`
	// Password entered during the  provisioning process.
	Password *string `json:"password,omitempty"`
	// Return additional provisioning information with generic device SIP credentials.
	SharedLine *GetADevice200ApplicationJSONProvisionSipAccountsSharedLine `json:"shared_line,omitempty"`
	// SIP Domain provided in the provisioning process.<br>
	//
	SipDomain *string `json:"sip_domain,omitempty"`
	// User name of the SIP account provided in the provisioning process.
	UserName *string `json:"user_name,omitempty"`
}

// GetADevice200ApplicationJSONProvisionTypeEnum - [Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
//
// * `ztp` : Zero touch provisioning.
// * `assisted`: Assisted provisioning.
// * `manual`: Manual provisioning.
type GetADevice200ApplicationJSONProvisionTypeEnum string

const (
	GetADevice200ApplicationJSONProvisionTypeEnumAssisted GetADevice200ApplicationJSONProvisionTypeEnum = "assisted"
	GetADevice200ApplicationJSONProvisionTypeEnumZtp      GetADevice200ApplicationJSONProvisionTypeEnum = "ztp"
	GetADevice200ApplicationJSONProvisionTypeEnumManual   GetADevice200ApplicationJSONProvisionTypeEnum = "manual"
)

func (e *GetADevice200ApplicationJSONProvisionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "assisted":
		fallthrough
	case "ztp":
		fallthrough
	case "manual":
		*e = GetADevice200ApplicationJSONProvisionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetADevice200ApplicationJSONProvisionTypeEnum: %s", s)
	}
}

// GetADevice200ApplicationJSONProvision - Provisioning information of a device.
type GetADevice200ApplicationJSONProvision struct {
	// SIP Account details registered during the device provisioning process. This object will only be returned if manual provisioning was used for the device.
	SipAccounts []GetADevice200ApplicationJSONProvisionSipAccounts `json:"sip_accounts,omitempty"`
	// [Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
	//
	// * `ztp` : Zero touch provisioning.
	// * `assisted`: Assisted provisioning.
	// * `manual`: Manual provisioning.
	//
	//
	Type *GetADevice200ApplicationJSONProvisionTypeEnum `json:"type,omitempty"`
	// Provisioning URL. This field will only be returned for devices that were provisioned via `assisted` provisioning type.
	URL *string `json:"url,omitempty"`
}

type GetADevice200ApplicationJSONSite struct {
	// The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user.
	ID *string `json:"id,omitempty"`
	// Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672).
	Name *string `json:"name,omitempty"`
}

// GetADevice200ApplicationJSONStatusEnum - Status of the device. The value is either `online` or `offline`.
type GetADevice200ApplicationJSONStatusEnum string

const (
	GetADevice200ApplicationJSONStatusEnumOnline  GetADevice200ApplicationJSONStatusEnum = "online"
	GetADevice200ApplicationJSONStatusEnumOffline GetADevice200ApplicationJSONStatusEnum = "offline"
)

func (e *GetADevice200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "online":
		fallthrough
	case "offline":
		*e = GetADevice200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetADevice200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetADevice200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Device information retrieved successfully.
type GetADevice200ApplicationJSON struct {
	// User to whom the device has been assigned.
	Assignee *GetADevice200ApplicationJSONAssignee `json:"assignee,omitempty"`
	// Includes manufacturer name and the model name.
	DeviceType *string `json:"device_type,omitempty"`
	// Display name of the device.
	DisplayName *string `json:"display_name,omitempty"`
	// Device ID - Unique Identifier of the Device.
	ID *string `json:"id,omitempty"`
	// MAC address or serial number of the device.
	MacAddress *string `json:"mac_address,omitempty"`
	// Provisioning information of a device.
	Provision *GetADevice200ApplicationJSONProvision `json:"provision,omitempty"`
	Site      *GetADevice200ApplicationJSONSite      `json:"site,omitempty"`
	// Status of the device. The value is either `online` or `offline`.
	Status *GetADevice200ApplicationJSONStatusEnum `json:"status,omitempty"`
}

type GetADeviceResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Device information retrieved successfully.
	GetADevice200ApplicationJSONObject *GetADevice200ApplicationJSON
}
