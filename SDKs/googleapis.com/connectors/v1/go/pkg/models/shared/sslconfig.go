// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SslConfigClientCertTypeEnum - Type of Client Cert (PEM/JKS/.. etc.)
type SslConfigClientCertTypeEnum string

const (
	SslConfigClientCertTypeEnumCertTypeUnspecified SslConfigClientCertTypeEnum = "CERT_TYPE_UNSPECIFIED"
	SslConfigClientCertTypeEnumPem                 SslConfigClientCertTypeEnum = "PEM"
)

func (e SslConfigClientCertTypeEnum) ToPointer() *SslConfigClientCertTypeEnum {
	return &e
}

func (e *SslConfigClientCertTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CERT_TYPE_UNSPECIFIED":
		fallthrough
	case "PEM":
		*e = SslConfigClientCertTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SslConfigClientCertTypeEnum: %v", v)
	}
}

// SslConfigServerCertTypeEnum - Type of Server Cert (PEM/JKS/.. etc.)
type SslConfigServerCertTypeEnum string

const (
	SslConfigServerCertTypeEnumCertTypeUnspecified SslConfigServerCertTypeEnum = "CERT_TYPE_UNSPECIFIED"
	SslConfigServerCertTypeEnumPem                 SslConfigServerCertTypeEnum = "PEM"
)

func (e SslConfigServerCertTypeEnum) ToPointer() *SslConfigServerCertTypeEnum {
	return &e
}

func (e *SslConfigServerCertTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CERT_TYPE_UNSPECIFIED":
		fallthrough
	case "PEM":
		*e = SslConfigServerCertTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SslConfigServerCertTypeEnum: %v", v)
	}
}

// SslConfigTrustModelEnum - Trust Model of the SSL connection
type SslConfigTrustModelEnum string

const (
	SslConfigTrustModelEnumPublic   SslConfigTrustModelEnum = "PUBLIC"
	SslConfigTrustModelEnumPrivate  SslConfigTrustModelEnum = "PRIVATE"
	SslConfigTrustModelEnumInsecure SslConfigTrustModelEnum = "INSECURE"
)

func (e SslConfigTrustModelEnum) ToPointer() *SslConfigTrustModelEnum {
	return &e
}

func (e *SslConfigTrustModelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		fallthrough
	case "INSECURE":
		*e = SslConfigTrustModelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SslConfigTrustModelEnum: %v", v)
	}
}

// SslConfigTypeEnum - Controls the ssl type for the given connector version.
type SslConfigTypeEnum string

const (
	SslConfigTypeEnumSslTypeUnspecified SslConfigTypeEnum = "SSL_TYPE_UNSPECIFIED"
	SslConfigTypeEnumTLS                SslConfigTypeEnum = "TLS"
	SslConfigTypeEnumMtls               SslConfigTypeEnum = "MTLS"
)

func (e SslConfigTypeEnum) ToPointer() *SslConfigTypeEnum {
	return &e
}

func (e *SslConfigTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSL_TYPE_UNSPECIFIED":
		fallthrough
	case "TLS":
		fallthrough
	case "MTLS":
		*e = SslConfigTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SslConfigTypeEnum: %v", v)
	}
}

// SslConfig - SSL Configuration of a connection
type SslConfig struct {
	// Additional SSL related field values
	AdditionalVariables []ConfigVariable `json:"additionalVariables,omitempty"`
	// Type of Client Cert (PEM/JKS/.. etc.)
	ClientCertType *SslConfigClientCertTypeEnum `json:"clientCertType,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	ClientCertificate *Secret `json:"clientCertificate,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	ClientPrivateKey *Secret `json:"clientPrivateKey,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	ClientPrivateKeyPass *Secret `json:"clientPrivateKeyPass,omitempty"`
	// Secret provides a reference to entries in Secret Manager.
	PrivateServerCertificate *Secret `json:"privateServerCertificate,omitempty"`
	// Type of Server Cert (PEM/JKS/.. etc.)
	ServerCertType *SslConfigServerCertTypeEnum `json:"serverCertType,omitempty"`
	// Trust Model of the SSL connection
	TrustModel *SslConfigTrustModelEnum `json:"trustModel,omitempty"`
	// Controls the ssl type for the given connector version.
	Type *SslConfigTypeEnum `json:"type,omitempty"`
	// Bool for enabling SSL
	UseSsl *bool `json:"useSsl,omitempty"`
}
