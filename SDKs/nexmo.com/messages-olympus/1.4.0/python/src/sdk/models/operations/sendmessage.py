"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorinternal as shared_errorinternal
from ..shared import errorpaymentrequired as shared_errorpaymentrequired
from ..shared import errorthrottled as shared_errorthrottled
from ..shared import security as shared_security
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class SendMessageSecurity:
    
    basic_auth: Optional[shared_security.SchemeBasicAuth] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    bearer_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    
class SendMessageRequestBody5FileChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `viber_service` in this field"""
    VIBER_SERVICE = 'viber_service'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5FileFile:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class SendMessageRequestBody5FileMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `file` in this field"""
    FILE = 'file'

class SendMessageRequestBody5FileViberServiceCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""
    TRANSACTION = 'transaction'
    PROMOTION = 'promotion'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5FileViberService:
    
    category: Optional[SendMessageRequestBody5FileViberServiceCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Viber-specific type definition. To use \\"template\\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5File:
    
    channel: SendMessageRequestBody5FileChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `viber_service` in this field"""  
    file: SendMessageRequestBody5FileFile = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file') }})  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody5FileMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `file` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    viber_service: Optional[SendMessageRequestBody5FileViberService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viber_service'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody5VideoChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `viber_service` in this field"""
    VIBER_SERVICE = 'viber_service'

class SendMessageRequestBody5VideoMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `video` in this field"""
    VIDEO = 'video'

class SendMessageRequestBody5VideoViberServiceCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""
    TRANSACTION = 'transaction'
    PROMOTION = 'promotion'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5VideoViberService:
    
    category: Optional[SendMessageRequestBody5VideoViberServiceCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The duration of the video in seconds."""  
    file_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_size'), 'exclude': lambda f: f is None }})
    r"""The file size of the video in MB."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Viber-specific type definition. To use \\"template\\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5VideoVideo:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
    > Note: Only supports video codec H.264 and audio codec AAC
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5Video:
    
    channel: SendMessageRequestBody5VideoChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `viber_service` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody5VideoMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `video` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    video: SendMessageRequestBody5VideoVideo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video') }})  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    viber_service: Optional[SendMessageRequestBody5VideoViberService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viber_service'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody5ImageChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `viber_service` in this field"""
    VIBER_SERVICE = 'viber_service'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5ImageImage:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png"""  
    
class SendMessageRequestBody5ImageMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `image` in this field"""
    IMAGE = 'image'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5ImageViberServiceAction:
    r"""Node for Viber action buttons."""
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Text which is rendered on the action button."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""A URL which is requested when the action button is clicked."""  
    
class SendMessageRequestBody5ImageViberServiceCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""
    TRANSACTION = 'transaction'
    PROMOTION = 'promotion'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5ImageViberService:
    
    action: Optional[SendMessageRequestBody5ImageViberServiceAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Node for Viber action buttons."""  
    category: Optional[SendMessageRequestBody5ImageViberServiceCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Viber-specific type definition. To use \\"template\\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5Image:
    
    channel: SendMessageRequestBody5ImageChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `viber_service` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    image: SendMessageRequestBody5ImageImage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    message_type: SendMessageRequestBody5ImageMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `image` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    viber_service: Optional[SendMessageRequestBody5ImageViberService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viber_service'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody5TextChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `viber_service` in this field"""
    VIBER_SERVICE = 'viber_service'

class SendMessageRequestBody5TextMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `text` in this field"""
    TEXT = 'text'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5TextViberServiceAction:
    r"""Node for Viber action buttons."""
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Text which is rendered on the action button."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""A URL which is requested when the action button is clicked."""  
    
class SendMessageRequestBody5TextViberServiceCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""
    TRANSACTION = 'transaction'
    PROMOTION = 'promotion'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5TextViberService:
    
    action: Optional[SendMessageRequestBody5TextViberServiceAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Node for Viber action buttons."""  
    category: Optional[SendMessageRequestBody5TextViberServiceCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Viber-specific type definition. To use \\"template\\", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody5Text:
    r"""The text of message to send."""
    
    channel: SendMessageRequestBody5TextChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `viber_service` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody5TextMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `text` in this field"""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    viber_service: Optional[SendMessageRequestBody5TextViberService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viber_service'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody4FileChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `messenger` in this field"""
    MESSENGER = 'messenger'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4FileFile:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class SendMessageRequestBody4FileMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `file` in this field"""
    FILE = 'file'

class SendMessageRequestBody4FileMessengerCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""
    RESPONSE = 'response'
    UPDATE = 'update'
    MESSAGE_TAG = 'message_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4FileMessenger:
    
    category: Optional[SendMessageRequestBody4FileMessengerCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4File:
    
    channel: SendMessageRequestBody4FileChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `messenger` in this field"""  
    file: SendMessageRequestBody4FileFile = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file') }})  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody4FileMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `file` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The ID of the message recipient"""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    messenger: Optional[SendMessageRequestBody4FileMessenger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messenger'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody4VideoChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `messenger` in this field"""
    MESSENGER = 'messenger'

class SendMessageRequestBody4VideoMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `video` in this field"""
    VIDEO = 'video'

class SendMessageRequestBody4VideoMessengerCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""
    RESPONSE = 'response'
    UPDATE = 'update'
    MESSAGE_TAG = 'message_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4VideoMessenger:
    
    category: Optional[SendMessageRequestBody4VideoMessengerCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4VideoVideo:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
    > Note: Only supports video codec H.264 and audio codec AAC
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4Video:
    
    channel: SendMessageRequestBody4VideoChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `messenger` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody4VideoMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `video` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The ID of the message recipient"""  
    video: SendMessageRequestBody4VideoVideo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video') }})  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    messenger: Optional[SendMessageRequestBody4VideoMessenger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messenger'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4AudioAudio:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class SendMessageRequestBody4AudioChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `messenger` in this field"""
    MESSENGER = 'messenger'

class SendMessageRequestBody4AudioMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `audio` in this field"""
    AUDIO = 'audio'

class SendMessageRequestBody4AudioMessengerCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""
    RESPONSE = 'response'
    UPDATE = 'update'
    MESSAGE_TAG = 'message_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4AudioMessenger:
    
    category: Optional[SendMessageRequestBody4AudioMessengerCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4Audio:
    
    audio: SendMessageRequestBody4AudioAudio = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio') }})  
    channel: SendMessageRequestBody4AudioChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `messenger` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody4AudioMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `audio` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The ID of the message recipient"""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    messenger: Optional[SendMessageRequestBody4AudioMessenger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messenger'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody4ImageChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `messenger` in this field"""
    MESSENGER = 'messenger'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4ImageImage:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png"""  
    
class SendMessageRequestBody4ImageMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `image` in this field"""
    IMAGE = 'image'

class SendMessageRequestBody4ImageMessengerCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""
    RESPONSE = 'response'
    UPDATE = 'update'
    MESSAGE_TAG = 'message_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4ImageMessenger:
    
    category: Optional[SendMessageRequestBody4ImageMessengerCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4Image:
    
    channel: SendMessageRequestBody4ImageChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `messenger` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    image: SendMessageRequestBody4ImageImage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    message_type: SendMessageRequestBody4ImageMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `image` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The ID of the message recipient"""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    messenger: Optional[SendMessageRequestBody4ImageMessenger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messenger'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody4TextChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `messenger` in this field"""
    MESSENGER = 'messenger'

class SendMessageRequestBody4TextMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `text` in this field"""
    TEXT = 'text'

class SendMessageRequestBody4TextMessengerCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""
    RESPONSE = 'response'
    UPDATE = 'update'
    MESSAGE_TAG = 'message_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4TextMessenger:
    
    category: Optional[SendMessageRequestBody4TextMessengerCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody4Text:
    r"""The text of message to send."""
    
    channel: SendMessageRequestBody4TextChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `messenger` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_type: SendMessageRequestBody4TextMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `text` in this field"""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The ID of the message recipient"""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    messenger: Optional[SendMessageRequestBody4TextMessenger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messenger'), 'exclude': lambda f: f is None }})  
    
class SendMessageRequestBody3CustomChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'

class SendMessageRequestBody3CustomMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `custom` in this field"""
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Custom:
    
    channel: SendMessageRequestBody3CustomChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody3CustomMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `custom` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    custom: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom'), 'exclude': lambda f: f is None }})
    r"""A custom payload, which is passed directly to WhatsApp for certain features such as templates and interactive messages. The schema of a custom object can vary widely. [Read more about Custom Objects](https://developer.vonage.com/messages/concepts/custom-objects)."""  
    
class SendMessageRequestBody3TemplateChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'

class SendMessageRequestBody3TemplateMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `template` in this field"""
    TEMPLATE = 'template'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3TemplateTemplate:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the template. For WhatsApp use your WhatsApp namespace (available via Facebook Business Manager), followed by a colon : and the name of the template to use."""  
    parameters: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""The parameters are an array of strings, with the first string being used for {{1}} in the template, with the second being {{2}} etc. Only required if the template specified by `name` contains parameters."""  
    
class SendMessageRequestBody3TemplateWhatsappPolicyEnum(str, Enum):
    r"""Policy for resolving what language template to use. As of right now the only valid choice is `deterministic`."""
    DETERMINISTIC = 'deterministic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3TemplateWhatsapp:
    
    locale: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale') }})
    r"""The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language of the template. See [the WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages-) for supported languages."""  
    policy: Optional[SendMessageRequestBody3TemplateWhatsappPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""Policy for resolving what language template to use. As of right now the only valid choice is `deterministic`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Template:
    
    channel: SendMessageRequestBody3TemplateChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody3TemplateMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `template` in this field"""  
    template: SendMessageRequestBody3TemplateTemplate = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template') }})  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    whatsapp: SendMessageRequestBody3TemplateWhatsapp = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whatsapp') }})  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody3FileChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3FileFile:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class SendMessageRequestBody3FileMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `file` in this field"""
    FILE = 'file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3File:
    
    channel: SendMessageRequestBody3FileChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    file: SendMessageRequestBody3FileFile = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file') }})  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody3FileMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `file` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody3VideoChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'

class SendMessageRequestBody3VideoMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `video` in this field"""
    VIDEO = 'video'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3VideoVideo:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
    > Note: Only supports video codec H.264 and audio codec AAC
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Video:
    
    channel: SendMessageRequestBody3VideoChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody3VideoMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `video` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    video: SendMessageRequestBody3VideoVideo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video') }})  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3AudioAudio:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class SendMessageRequestBody3AudioChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'

class SendMessageRequestBody3AudioMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `audio` in this field"""
    AUDIO = 'audio'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Audio:
    
    audio: SendMessageRequestBody3AudioAudio = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio') }})  
    channel: SendMessageRequestBody3AudioChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody3AudioMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `audio` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody3ImageChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3ImageImage:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png"""  
    
class SendMessageRequestBody3ImageMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `image` in this field"""
    IMAGE = 'image'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Image:
    
    channel: SendMessageRequestBody3ImageChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    image: SendMessageRequestBody3ImageImage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    message_type: SendMessageRequestBody3ImageMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `image` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody3LocationChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3LocationLocation:
    
    lat: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat') }})
    r"""Latitude of the location."""  
    long: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('long') }})
    r"""Longitude of the location."""  
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address of the location. Only displayed if `name` is present."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the location."""  
    
class SendMessageRequestBody3LocationMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `location` in this field"""
    LOCATION = 'location'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Location:
    
    channel: SendMessageRequestBody3LocationChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    location: SendMessageRequestBody3LocationLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    message_type: SendMessageRequestBody3LocationMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `location` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    text: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The location to be sent in the message."""  
    
class SendMessageRequestBody3TextChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `whatsapp` in this field"""
    WHATSAPP = 'whatsapp'

class SendMessageRequestBody3TextMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `text` in this field"""
    TEXT = 'text'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody3Text:
    r"""The text of message to send."""
    
    channel: SendMessageRequestBody3TextChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `whatsapp` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody3TextMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `text` in this field"""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody2VideoChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `mms` in this field"""
    MMS = 'mms'

class SendMessageRequestBody2VideoMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `video` in this field"""
    VIDEO = 'video'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2VideoVideo:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
    > Note: Only supports video codec H.264 and audio codec AAC
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2Video:
    
    channel: SendMessageRequestBody2VideoChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `mms` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody2VideoMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `video` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    video: SendMessageRequestBody2VideoVideo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video') }})  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2AudioAudio:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class SendMessageRequestBody2AudioChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `mms` in this field"""
    MMS = 'mms'

class SendMessageRequestBody2AudioMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `audio` in this field"""
    AUDIO = 'audio'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2Audio:
    
    audio: SendMessageRequestBody2AudioAudio = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio') }})  
    channel: SendMessageRequestBody2AudioChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `mms` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody2AudioMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `audio` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody2VCardChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `mms` in this field"""
    MMS = 'mms'

class SendMessageRequestBody2VCardMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `vcard` in this field"""
    VCARD = 'vcard'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2VCardVcard:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The publicly accessible URL of the vCard attachment. Supported types are .vcf only"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2VCard:
    
    channel: SendMessageRequestBody2VCardChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `mms` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody2VCardMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `vcard` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    vcard: SendMessageRequestBody2VCardVcard = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcard') }})  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody2ImageChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `mms` in this field"""
    MMS = 'mms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2ImageImage:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png"""  
    
class SendMessageRequestBody2ImageMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `image` in this field"""
    IMAGE = 'image'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody2Image:
    
    channel: SendMessageRequestBody2ImageChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `mms` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    image: SendMessageRequestBody2ImageImage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    message_type: SendMessageRequestBody2ImageMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `image` in this field"""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    
class SendMessageRequestBody1TextChannelEnum(str, Enum):
    r"""The channel to send to. You must provide `sms` in this field"""
    SMS = 'sms'

class SendMessageRequestBody1TextMessageTypeEnum(str, Enum):
    r"""The type of message to send. You must provide `text` in this field"""
    TEXT = 'text'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessageRequestBody1Text:
    r"""The text of message to send."""
    
    channel: SendMessageRequestBody1TextChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel to send to. You must provide `sms` in this field"""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details"""  
    message_type: SendMessageRequestBody1TextMessageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_type') }})
    r"""The type of message to send. You must provide `text` in this field"""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000."""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessage202ApplicationJSON5:
    r"""Viber"""
    
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID of the message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessage202ApplicationJSON4:
    r"""Messenger"""
    
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID of the message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessage202ApplicationJSON3:
    r"""WhatsApp"""
    
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID of the message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessage202ApplicationJSON2:
    r"""MMS"""
    
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID of the message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessage202ApplicationJSON1:
    r"""SMS"""
    
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID of the message"""  
    

@dataclasses.dataclass
class SendMessageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_internal: Optional[shared_errorinternal.ErrorInternal] = dataclasses.field(default=None)
    r"""Internal error"""  
    error_payment_required: Optional[shared_errorpaymentrequired.ErrorPaymentRequired] = dataclasses.field(default=None)
    r"""Payment Required"""  
    error_throttled: Optional[shared_errorthrottled.ErrorThrottled] = dataclasses.field(default=None)
    r"""Too Many Requests"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    send_message_202_application_json_object: Optional[Any] = dataclasses.field(default=None)
    r"""Accepted."""  
    send_message_401_application_json_one_of: Optional[Any] = dataclasses.field(default=None)
    r"""Authentication failure"""  
    send_message_422_application_json_one_of: Optional[Any] = dataclasses.field(default=None)
    r"""Unprocessable Entity"""  
    