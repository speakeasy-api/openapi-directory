// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ExchangeType string

const (
	ExchangeTypeReqRespPair ExchangeType = "reqRespPair"
	ExchangeTypeUnidirEvent ExchangeType = "unidirEvent"
)

type Exchange struct {
	RequestResponsePair *RequestResponsePair
	UnidirectionalEvent *UnidirectionalEvent

	Type ExchangeType
}

func CreateExchangeReqRespPair(reqRespPair RequestResponsePair) Exchange {
	typ := ExchangeTypeReqRespPair
	typStr := RequestResponsePairTypeEnum(typ)
	reqRespPair.Type = typStr

	return Exchange{
		RequestResponsePair: &reqRespPair,
		Type:                typ,
	}
}

func CreateExchangeUnidirEvent(unidirEvent UnidirectionalEvent) Exchange {
	typ := ExchangeTypeUnidirEvent
	typStr := UnidirectionalEventTypeEnum(typ)
	unidirEvent.Type = typStr

	return Exchange{
		UnidirectionalEvent: &unidirEvent,
		Type:                typ,
	}
}

func (u *Exchange) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "reqRespPair":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		requestResponsePair := new(RequestResponsePair)
		if err := d.Decode(&requestResponsePair); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RequestResponsePair = requestResponsePair
		u.Type = ExchangeTypeReqRespPair
		return nil
	case "unidirEvent":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		unidirectionalEvent := new(UnidirectionalEvent)
		if err := d.Decode(&unidirectionalEvent); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UnidirectionalEvent = unidirectionalEvent
		u.Type = ExchangeTypeUnidirEvent
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Exchange) MarshalJSON() ([]byte, error) {
	if u.RequestResponsePair != nil {
		return json.Marshal(u.RequestResponsePair)
	}

	if u.UnidirectionalEvent != nil {
		return json.Marshal(u.UnidirectionalEvent)
	}

	return nil, nil
}
