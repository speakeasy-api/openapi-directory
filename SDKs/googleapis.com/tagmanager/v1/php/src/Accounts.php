<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateResponse
     */
	public function tagmanagerAccountsContainersCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "container", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteResponse
     */
	public function tagmanagerAccountsContainersDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Creates a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Environments of a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateResponse
     */
	public function tagmanagerAccountsContainersEnvironmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersEnvironmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateResponse
     */
	public function tagmanagerAccountsContainersFoldersCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteResponse
     */
	public function tagmanagerAccountsContainersFoldersDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List all entities in a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListResponse
     */
	public function tagmanagerAccountsContainersFoldersEntitiesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}/entities', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersEntitiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folderEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FolderEntities', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetResponse
     */
	public function tagmanagerAccountsContainersFoldersGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Folders of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListResponse
     */
	public function tagmanagerAccountsContainersFoldersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFoldersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFoldersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateResponse
     */
	public function tagmanagerAccountsContainersFoldersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersFoldersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetResponse
     */
	public function tagmanagerAccountsContainersGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Containers that belongs to a GTM Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListResponse
     */
	public function tagmanagerAccountsContainersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContainersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListContainersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves entities to a GTM Folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateResponse
     */
	public function tagmanagerAccountsContainersMoveFoldersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/move_folders/{folderId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersMoveFoldersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Re-generates the authorization code for a GTM Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateResponse
     */
	public function tagmanagerAccountsContainersReauthorizeEnvironmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/reauthorize_environments/{environmentId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersReauthorizeEnvironmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateResponse
     */
	public function tagmanagerAccountsContainersTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a GTM Tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteResponse
     */
	public function tagmanagerAccountsContainersTagsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a GTM Tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetResponse
     */
	public function tagmanagerAccountsContainersTagsGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Tags of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListResponse
     */
	public function tagmanagerAccountsContainersTagsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GTM Tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateResponse
     */
	public function tagmanagerAccountsContainersTagsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTagsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateResponse
     */
	public function tagmanagerAccountsContainersTriggersCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "trigger", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Trigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a GTM Trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteResponse
     */
	public function tagmanagerAccountsContainersTriggersDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a GTM Trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetResponse
     */
	public function tagmanagerAccountsContainersTriggersGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Trigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Triggers of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListResponse
     */
	public function tagmanagerAccountsContainersTriggersList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTriggersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTriggersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GTM Trigger.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateResponse
     */
	public function tagmanagerAccountsContainersTriggersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "trigger", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersTriggersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Trigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateResponse
     */
	public function tagmanagerAccountsContainersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "container", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->container = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Container', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GTM Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateResponse
     */
	public function tagmanagerAccountsContainersVariablesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "variable", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a GTM Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteResponse
     */
	public function tagmanagerAccountsContainersVariablesDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a GTM Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetResponse
     */
	public function tagmanagerAccountsContainersVariablesGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Variables of a Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListResponse
     */
	public function tagmanagerAccountsContainersVariablesList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVariablesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVariablesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GTM Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateResponse
     */
	public function tagmanagerAccountsContainersVariablesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "variable", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVariablesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Variable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateResponse
     */
	public function tagmanagerAccountsContainersVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createContainerVersionRequestVersionOptions", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createContainerVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateContainerVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteResponse
     */
	public function tagmanagerAccountsContainersVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetResponse
     */
	public function tagmanagerAccountsContainersVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Container Versions of a GTM Container.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListResponse
     */
	public function tagmanagerAccountsContainersVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContainerVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListContainerVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Publishes a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishResponse
     */
	public function tagmanagerAccountsContainersVersionsPublish(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/publish', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publishContainerVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublishContainerVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores a Container Version. This will overwrite the container's current configuration (including its variables, triggers and tags). The operation will not have any effect on the version that is being served (i.e. the published version).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreResponse
     */
	public function tagmanagerAccountsContainersVersionsRestore(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/restore', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeletes a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteResponse
     */
	public function tagmanagerAccountsContainersVersionsUndelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/undelete', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Container Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateResponse
     */
	public function tagmanagerAccountsContainersVersionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "containerVersion", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsContainersVersionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a GTM Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetResponse
     */
	public function tagmanagerAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all GTM Accounts that a user has access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListResponse
     */
	public function tagmanagerAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a user's Account & Container Permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateResponse
     */
	public function tagmanagerAccountsPermissionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/permissions', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userAccess", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userAccess = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserAccess', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from the account, revoking access to it and all of its containers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteResponse
     */
	public function tagmanagerAccountsPermissionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a user's Account & Container Permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetResponse
     */
	public function tagmanagerAccountsPermissionsGet(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userAccess = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserAccess', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all users that have access to the account along with Account and Container Permissions granted to each of them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListResponse
     */
	public function tagmanagerAccountsPermissionsList(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/permissions', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountUsersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a user's Account & Container Permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateResponse
     */
	public function tagmanagerAccountsPermissionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userAccess", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsPermissionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userAccess = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserAccess', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GTM Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateResponse
     */
	public function tagmanagerAccountsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tagmanager/v1/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "account", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TagmanagerAccountsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
}