/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput - The output from the virtual agent.
 */
public class GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput {
    /**
     * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentPage")
    public GoogleCloudDialogflowCxV3beta1Page currentPage;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withCurrentPage(GoogleCloudDialogflowCxV3beta1Page currentPage) {
        this.currentPage = currentPage;
        return this;
    }
    
    /**
     * Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diagnosticInfo")
    public java.util.Map<String, Object> diagnosticInfo;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withDiagnosticInfo(java.util.Map<String, Object> diagnosticInfo) {
        this.diagnosticInfo = diagnosticInfo;
        return this;
    }
    
    /**
     * Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("differences")
    public GoogleCloudDialogflowCxV3beta1TestRunDifference[] differences;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withDifferences(GoogleCloudDialogflowCxV3beta1TestRunDifference[] differences) {
        this.differences = differences;
        return this;
    }
    
    /**
     * The session parameters available to the bot at this point.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionParameters")
    public java.util.Map<String, Object> sessionParameters;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withSessionParameters(java.util.Map<String, Object> sessionParameters) {
        this.sessionParameters = sessionParameters;
        return this;
    }
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GoogleRpcStatus status;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withStatus(GoogleRpcStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * The text responses from the agent for the turn.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textResponses")
    public GoogleCloudDialogflowCxV3beta1ResponseMessageText[] textResponses;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withTextResponses(GoogleCloudDialogflowCxV3beta1ResponseMessageText[] textResponses) {
        this.textResponses = textResponses;
        return this;
    }
    
    /**
     * An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggeredIntent")
    public GoogleCloudDialogflowCxV3beta1Intent triggeredIntent;

    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput withTriggeredIntent(GoogleCloudDialogflowCxV3beta1Intent triggeredIntent) {
        this.triggeredIntent = triggeredIntent;
        return this;
    }
    
    public GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput(){}
}
