"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import exportsummary as shared_exportsummary
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class PostExportSummaryRequest:
    
    assignment: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'assignment', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions submitted to this assignment."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code)."""  
    created_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdAfter', 'style': 'form', 'explode': True }})
    r"""Limit results to contributions created after this date time."""  
    created_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdBefore', 'style': 'form', 'explode': True }})
    r"""Limit results to contributions created before this date time."""  
    geohash: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'geohash', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)"""  
    has_location: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hasLocation', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions which have a publicly visible location."""  
    lat_long: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latLong', 'style': 'form', 'explode': True }})
    r"""Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius"""  
    media_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mediaType', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions which include a media file of the given type (ie. image / video)"""  
    owned_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ownedBy', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions which are fall under the jurisdiction by this user."""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions whose headline text matches this keyword."""  
    radius: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""When limiting result by location with the latLong parameter, specify the radius in kilometers."""  
    url_words: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'urlWords', 'style': 'form', 'explode': True }})
    r"""Locate a specific contribution by URL words"""  
    user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user', 'style': 'form', 'explode': True }})
    r"""Restrict results to contributions by this user identified by id."""  
    

@dataclasses.dataclass
class PostExportSummaryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    export_summary: Optional[shared_exportsummary.ExportSummary] = dataclasses.field(default=None)
    r"""A summary of the number of contributions, media files and approximate total size of media files."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    