// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// POSTPublicEmailTemplateRequestCcEmailTypeEnum - Email CC type:
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
type POSTPublicEmailTemplateRequestCcEmailTypeEnum string

const (
	POSTPublicEmailTemplateRequestCcEmailTypeEnumBillToContact                       POSTPublicEmailTemplateRequestCcEmailTypeEnum = "BillToContact"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumSoldToContact                       POSTPublicEmailTemplateRequestCcEmailTypeEnum = "SoldToContact"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumSpecificEmails                      POSTPublicEmailTemplateRequestCcEmailTypeEnum = "SpecificEmails"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumTenantAdmin                         POSTPublicEmailTemplateRequestCcEmailTypeEnum = "TenantAdmin"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumBillToAndSoldToContacts             POSTPublicEmailTemplateRequestCcEmailTypeEnum = "BillToAndSoldToContacts"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumRunOwner                            POSTPublicEmailTemplateRequestCcEmailTypeEnum = "RunOwner"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumAllContacts                         POSTPublicEmailTemplateRequestCcEmailTypeEnum = "AllContacts"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerBillToContact           POSTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerBillToContact"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerSoldToContact           POSTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerSoldToContact"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerBillToAndSoldToContacts POSTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerBillToAndSoldToContacts"
	POSTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerAllContacts             POSTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerAllContacts"
)

func (e *POSTPublicEmailTemplateRequestCcEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillToContact":
		fallthrough
	case "SoldToContact":
		fallthrough
	case "SpecificEmails":
		fallthrough
	case "TenantAdmin":
		fallthrough
	case "BillToAndSoldToContacts":
		fallthrough
	case "RunOwner":
		fallthrough
	case "AllContacts":
		fallthrough
	case "InvoiceOwnerBillToContact":
		fallthrough
	case "InvoiceOwnerSoldToContact":
		fallthrough
	case "InvoiceOwnerBillToAndSoldToContacts":
		fallthrough
	case "InvoiceOwnerAllContacts":
		*e = POSTPublicEmailTemplateRequestCcEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPublicEmailTemplateRequestCcEmailTypeEnum: %s", s)
	}
}

// POSTPublicEmailTemplateRequestEncodingTypeEnum - The endcode type of the email body.
type POSTPublicEmailTemplateRequestEncodingTypeEnum string

const (
	POSTPublicEmailTemplateRequestEncodingTypeEnumUTF8      POSTPublicEmailTemplateRequestEncodingTypeEnum = "UTF8"
	POSTPublicEmailTemplateRequestEncodingTypeEnumShiftJis  POSTPublicEmailTemplateRequestEncodingTypeEnum = "Shift_JIS"
	POSTPublicEmailTemplateRequestEncodingTypeEnumIso2022Jp POSTPublicEmailTemplateRequestEncodingTypeEnum = "ISO_2022_JP"
	POSTPublicEmailTemplateRequestEncodingTypeEnumEucJp     POSTPublicEmailTemplateRequestEncodingTypeEnum = "EUC_JP"
	POSTPublicEmailTemplateRequestEncodingTypeEnumXSjis0213 POSTPublicEmailTemplateRequestEncodingTypeEnum = "X_SJIS_0213"
)

func (e *POSTPublicEmailTemplateRequestEncodingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTF8":
		fallthrough
	case "Shift_JIS":
		fallthrough
	case "ISO_2022_JP":
		fallthrough
	case "EUC_JP":
		fallthrough
	case "X_SJIS_0213":
		*e = POSTPublicEmailTemplateRequestEncodingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPublicEmailTemplateRequestEncodingTypeEnum: %s", s)
	}
}

// POSTPublicEmailTemplateRequestFromEmailTypeEnum - The type of the email.
type POSTPublicEmailTemplateRequestFromEmailTypeEnum string

const (
	POSTPublicEmailTemplateRequestFromEmailTypeEnumTenantEmail   POSTPublicEmailTemplateRequestFromEmailTypeEnum = "TenantEmail"
	POSTPublicEmailTemplateRequestFromEmailTypeEnumSpecificEmail POSTPublicEmailTemplateRequestFromEmailTypeEnum = "SpecificEmail"
)

func (e *POSTPublicEmailTemplateRequestFromEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TenantEmail":
		fallthrough
	case "SpecificEmail":
		*e = POSTPublicEmailTemplateRequestFromEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPublicEmailTemplateRequestFromEmailTypeEnum: %s", s)
	}
}

// POSTPublicEmailTemplateRequestReplyToEmailTypeEnum - Type of the replyTo email.
type POSTPublicEmailTemplateRequestReplyToEmailTypeEnum string

const (
	POSTPublicEmailTemplateRequestReplyToEmailTypeEnumTenantEmail   POSTPublicEmailTemplateRequestReplyToEmailTypeEnum = "TenantEmail"
	POSTPublicEmailTemplateRequestReplyToEmailTypeEnumSpecificEmail POSTPublicEmailTemplateRequestReplyToEmailTypeEnum = "SpecificEmail"
)

func (e *POSTPublicEmailTemplateRequestReplyToEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TenantEmail":
		fallthrough
	case "SpecificEmail":
		*e = POSTPublicEmailTemplateRequestReplyToEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPublicEmailTemplateRequestReplyToEmailTypeEnum: %s", s)
	}
}

// POSTPublicEmailTemplateRequestToEmailTypeEnum - Email receive type.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
type POSTPublicEmailTemplateRequestToEmailTypeEnum string

const (
	POSTPublicEmailTemplateRequestToEmailTypeEnumBillToContact                       POSTPublicEmailTemplateRequestToEmailTypeEnum = "BillToContact"
	POSTPublicEmailTemplateRequestToEmailTypeEnumSoldToContact                       POSTPublicEmailTemplateRequestToEmailTypeEnum = "SoldToContact"
	POSTPublicEmailTemplateRequestToEmailTypeEnumSpecificEmails                      POSTPublicEmailTemplateRequestToEmailTypeEnum = "SpecificEmails"
	POSTPublicEmailTemplateRequestToEmailTypeEnumTenantAdmin                         POSTPublicEmailTemplateRequestToEmailTypeEnum = "TenantAdmin"
	POSTPublicEmailTemplateRequestToEmailTypeEnumBillToAndSoldToContacts             POSTPublicEmailTemplateRequestToEmailTypeEnum = "BillToAndSoldToContacts"
	POSTPublicEmailTemplateRequestToEmailTypeEnumRunOwner                            POSTPublicEmailTemplateRequestToEmailTypeEnum = "RunOwner"
	POSTPublicEmailTemplateRequestToEmailTypeEnumAllContacts                         POSTPublicEmailTemplateRequestToEmailTypeEnum = "AllContacts"
	POSTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerBillToContact           POSTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerBillToContact"
	POSTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerSoldToContact           POSTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerSoldToContact"
	POSTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerBillToAndSoldToContacts POSTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerBillToAndSoldToContacts"
	POSTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerAllContacts             POSTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerAllContacts"
)

func (e *POSTPublicEmailTemplateRequestToEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillToContact":
		fallthrough
	case "SoldToContact":
		fallthrough
	case "SpecificEmails":
		fallthrough
	case "TenantAdmin":
		fallthrough
	case "BillToAndSoldToContacts":
		fallthrough
	case "RunOwner":
		fallthrough
	case "AllContacts":
		fallthrough
	case "InvoiceOwnerBillToContact":
		fallthrough
	case "InvoiceOwnerSoldToContact":
		fallthrough
	case "InvoiceOwnerBillToAndSoldToContacts":
		fallthrough
	case "InvoiceOwnerAllContacts":
		*e = POSTPublicEmailTemplateRequestToEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPublicEmailTemplateRequestToEmailTypeEnum: %s", s)
	}
}

// POSTPublicEmailTemplateRequest - The request body to create an email template.
type POSTPublicEmailTemplateRequest struct {
	// The status of the email template. The default value is true.
	Active *bool `json:"active,omitempty"`
	// The email bcc address.
	BccEmailAddress *string `json:"bccEmailAddress,omitempty"`
	// The email CC address.
	CcEmailAddress *string `json:"ccEmailAddress,omitempty"`
	// Email CC type:
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	CcEmailType *POSTPublicEmailTemplateRequestCcEmailTypeEnum `json:"ccEmailType,omitempty"`
	// The description of the email template.
	Description *string `json:"description,omitempty"`
	// The email body. You can add merge fields in the email object using angle brackets.
	// You can also embed HTML tags if 'isHtml' is true.
	EmailBody string `json:"emailBody"`
	// The email subject. Users can add merge fields in the email subject using angle brackets.
	EmailSubject string `json:"emailSubject"`
	// The endcode type of the email body.
	EncodingType *POSTPublicEmailTemplateRequestEncodingTypeEnum `json:"encodingType,omitempty"`
	// The name of the event type.
	//
	EventTypeName string `json:"eventTypeName"`
	// The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.
	//
	// Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.
	//
	// For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.
	//
	EventTypeNamespace *string `json:"eventTypeNamespace,omitempty"`
	// If fromEmailType is SpecificEmail, this field is required.
	FromEmailAddress *string `json:"fromEmailAddress,omitempty"`
	// The type of the email.
	FromEmailType POSTPublicEmailTemplateRequestFromEmailTypeEnum `json:"fromEmailType"`
	// The name of the email sender.
	FromName *string `json:"fromName,omitempty"`
	// Specifies whether the style of email body is HTML. The default value is false.
	IsHTML *bool `json:"isHtml,omitempty"`
	// The name of the email template, a unique name in a tenant.
	Name string `json:"name"`
	// If replyToEmailType is SpecificEmail, this field is required.
	ReplyToEmailAddress *string `json:"replyToEmailAddress,omitempty"`
	// Type of the replyTo email.
	ReplyToEmailType *POSTPublicEmailTemplateRequestReplyToEmailTypeEnum `json:"replyToEmailType,omitempty"`
	// If toEmailType is SpecificEmail, this field is required.
	ToEmailAddress *string `json:"toEmailAddress,omitempty"`
	// Email receive type.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	ToEmailType POSTPublicEmailTemplateRequestToEmailTypeEnum `json:"toEmailType"`
}
