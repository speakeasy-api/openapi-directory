// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion - The version to be updated to
type UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade - The pending firmware upgrade if it exists
type UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade struct {
	// The time of the last successful upgrade
	Time *string `json:"time,omitempty"`
	// The version to be updated to
	ToVersion *UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance - The network device to be updated
type UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion - The version to be updated to
type UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade - The pending firmware upgrade if it exists
type UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade struct {
	// The time of the last successful upgrade
	Time *string `json:"time,omitempty"`
	// The version to be updated to
	ToVersion *UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera - The network device to be updated
type UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion - The version to be updated to
type UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade - The pending firmware upgrade if it exists
type UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade struct {
	// The time of the last successful upgrade
	Time *string `json:"time,omitempty"`
	// The version to be updated to
	ToVersion *UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway - The network device to be updated
type UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion - The version to be updated to
type UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade - The pending firmware upgrade if it exists
type UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade struct {
	// The time of the last successful upgrade
	Time *string `json:"time,omitempty"`
	// The version to be updated to
	ToVersion *UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor - The network device to be updated
type UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion - The version to be updated to
type UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade - The pending firmware upgrade if it exists
type UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade struct {
	// The time of the last successful upgrade
	Time *string `json:"time,omitempty"`
	// The version to be updated to
	ToVersion *UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch - The network device to be updated
type UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion - The version to be updated to
type UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion struct {
	// The version ID
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade - The pending firmware upgrade if it exists
type UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade struct {
	// The time of the last successful upgrade
	Time *string `json:"time,omitempty"`
	// The version to be updated to
	ToVersion *UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless - The network device to be updated
type UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless struct {
	// The pending firmware upgrade if it exists
	NextUpgrade *UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyProducts - Contains information about the network to update
type UpdateNetworkFirmwareUpgradesRequestBodyProducts struct {
	// The network device to be updated
	Appliance *UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance `json:"appliance,omitempty"`
	// The network device to be updated
	Camera *UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera `json:"camera,omitempty"`
	// The network device to be updated
	CellularGateway *UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway `json:"cellularGateway,omitempty"`
	// The network device to be updated
	Sensor *UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor `json:"sensor,omitempty"`
	// The network device to be updated
	Switch *UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch `json:"switch,omitempty"`
	// The network device to be updated
	Wireless *UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless `json:"wireless,omitempty"`
}

// UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum - Day of the week
type UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum string

const (
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumFri       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "fri"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumFriday    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "friday"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumMon       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "mon"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumMonday    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "monday"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumSat       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "sat"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumSaturday  UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "saturday"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumSun       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "sun"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumSunday    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "sunday"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumThu       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "thu"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumThursday  UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "thursday"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumTue       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "tue"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumTuesday   UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "tuesday"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumWed       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "wed"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnumWednesday UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum = "wednesday"
)

func (e *UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fri":
		fallthrough
	case "friday":
		fallthrough
	case "mon":
		fallthrough
	case "monday":
		fallthrough
	case "sat":
		fallthrough
	case "saturday":
		fallthrough
	case "sun":
		fallthrough
	case "sunday":
		fallthrough
	case "thu":
		fallthrough
	case "thursday":
		fallthrough
	case "tue":
		fallthrough
	case "tuesday":
		fallthrough
	case "wed":
		fallthrough
	case "wednesday":
		*e = UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum: %s", s)
	}
}

// UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum - Hour of the day
type UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum string

const (
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumZero00        UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "0:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTen00         UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "10:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumEleven00      UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "11:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTwelve00      UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "12:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumThirteen00    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "13:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumFourteen00    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "14:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumFifteen00     UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "15:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumSixteen00     UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "16:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumSeventeen00   UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "17:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumEighteen00    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "18:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumNineteen00    UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "19:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumOne00         UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "1:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTwenty00      UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "20:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTwentyOne00   UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "21:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTwentyTwo00   UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "22:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTwentyThree00 UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "23:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumTwo00         UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "2:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumThree00       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "3:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumFour00        UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "4:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumFive00        UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "5:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumSix00         UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "6:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumSeven00       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "7:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumEight00       UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "8:00"
	UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnumNine00        UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum = "9:00"
)

func (e *UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0:00":
		fallthrough
	case "10:00":
		fallthrough
	case "11:00":
		fallthrough
	case "12:00":
		fallthrough
	case "13:00":
		fallthrough
	case "14:00":
		fallthrough
	case "15:00":
		fallthrough
	case "16:00":
		fallthrough
	case "17:00":
		fallthrough
	case "18:00":
		fallthrough
	case "19:00":
		fallthrough
	case "1:00":
		fallthrough
	case "20:00":
		fallthrough
	case "21:00":
		fallthrough
	case "22:00":
		fallthrough
	case "23:00":
		fallthrough
	case "2:00":
		fallthrough
	case "3:00":
		fallthrough
	case "4:00":
		fallthrough
	case "5:00":
		fallthrough
	case "6:00":
		fallthrough
	case "7:00":
		fallthrough
	case "8:00":
		fallthrough
	case "9:00":
		*e = UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum: %s", s)
	}
}

// UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow - Upgrade window for devices in network
type UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow struct {
	// Day of the week
	DayOfWeek *UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Hour of the day
	HourOfDay *UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum `json:"hourOfDay,omitempty"`
}

type UpdateNetworkFirmwareUpgradesRequestBody struct {
	// Contains information about the network to update
	Products *UpdateNetworkFirmwareUpgradesRequestBodyProducts `json:"products,omitempty"`
	// The timezone for the network
	Timezone *string `json:"timezone,omitempty"`
	// Upgrade window for devices in network
	UpgradeWindow *UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow `json:"upgradeWindow,omitempty"`
}

type UpdateNetworkFirmwareUpgradesRequest struct {
	RequestBody *UpdateNetworkFirmwareUpgradesRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                    `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion - Details of the current version on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion - Details of the version the device upgraded from
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion - Details of the version the device upgraded to
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade - Details of the last firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade - Details of the next firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance - The network device to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance struct {
	// Firmware versions available for upgrade
	AvailableVersions []UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion - Details of the current version on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion - Details of the version the device upgraded from
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion - Details of the version the device upgraded to
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade - Details of the last firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade - Details of the next firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera - The network device to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera struct {
	// Firmware versions available for upgrade
	AvailableVersions []UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion - Details of the current version on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion - Details of the version the device upgraded from
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion - Details of the version the device upgraded to
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade - Details of the last firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade - Details of the next firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway - The network device to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway struct {
	// Firmware versions available for upgrade
	AvailableVersions []UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion - Details of the current version on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion - Details of the version the device upgraded from
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion - Details of the version the device upgraded to
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade - Details of the last firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade - Details of the next firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor - The network device to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor struct {
	// Firmware versions available for upgrade
	AvailableVersions []UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion - Details of the current version on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion - Details of the version the device upgraded from
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion - Details of the version the device upgraded to
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade - Details of the last firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade - Details of the next firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch - The network device to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch struct {
	// Firmware versions available for upgrade
	AvailableVersions []UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion - Details of the current version on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion - Details of the version the device upgraded from
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion - Details of the version the device upgraded to
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade - Details of the last firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade - Details of the next firmware upgrade on the device
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless - The network device to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless struct {
	// Firmware versions available for upgrade
	AvailableVersions []UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts - The network devices to be updated
type UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts struct {
	// The network device to be updated
	Appliance *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance `json:"appliance,omitempty"`
	// The network device to be updated
	Camera *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera `json:"camera,omitempty"`
	// The network device to be updated
	CellularGateway *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway `json:"cellularGateway,omitempty"`
	// The network device to be updated
	Sensor *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor `json:"sensor,omitempty"`
	// The network device to be updated
	Switch *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch `json:"switch,omitempty"`
	// The network device to be updated
	Wireless *UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless `json:"wireless,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum - Day of the week
type UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum string

const (
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumFri       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "fri"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumFriday    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "friday"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumMon       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "mon"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumMonday    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "monday"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSat       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "sat"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSaturday  UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "saturday"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSun       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "sun"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSunday    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "sunday"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumThu       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "thu"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumThursday  UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "thursday"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumTue       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "tue"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumTuesday   UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "tuesday"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumWed       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "wed"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumWednesday UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "wednesday"
)

func (e *UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fri":
		fallthrough
	case "friday":
		fallthrough
	case "mon":
		fallthrough
	case "monday":
		fallthrough
	case "sat":
		fallthrough
	case "saturday":
		fallthrough
	case "sun":
		fallthrough
	case "sunday":
		fallthrough
	case "thu":
		fallthrough
	case "thursday":
		fallthrough
	case "tue":
		fallthrough
	case "tuesday":
		fallthrough
	case "wed":
		fallthrough
	case "wednesday":
		*e = UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum: %s", s)
	}
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum - Hour of the day
type UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum string

const (
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumZero00        UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "0:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTen00         UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "10:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumEleven00      UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "11:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwelve00      UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "12:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumThirteen00    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "13:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFourteen00    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "14:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFifteen00     UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "15:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSixteen00     UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "16:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSeventeen00   UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "17:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumEighteen00    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "18:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumNineteen00    UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "19:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumOne00         UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "1:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwenty00      UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "20:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwentyOne00   UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "21:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwentyTwo00   UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "22:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwentyThree00 UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "23:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwo00         UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "2:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumThree00       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "3:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFour00        UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "4:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFive00        UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "5:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSix00         UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "6:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSeven00       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "7:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumEight00       UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "8:00"
	UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumNine00        UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "9:00"
)

func (e *UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0:00":
		fallthrough
	case "10:00":
		fallthrough
	case "11:00":
		fallthrough
	case "12:00":
		fallthrough
	case "13:00":
		fallthrough
	case "14:00":
		fallthrough
	case "15:00":
		fallthrough
	case "16:00":
		fallthrough
	case "17:00":
		fallthrough
	case "18:00":
		fallthrough
	case "19:00":
		fallthrough
	case "1:00":
		fallthrough
	case "20:00":
		fallthrough
	case "21:00":
		fallthrough
	case "22:00":
		fallthrough
	case "23:00":
		fallthrough
	case "2:00":
		fallthrough
	case "3:00":
		fallthrough
	case "4:00":
		fallthrough
	case "5:00":
		fallthrough
	case "6:00":
		fallthrough
	case "7:00":
		fallthrough
	case "8:00":
		fallthrough
	case "9:00":
		*e = UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum: %s", s)
	}
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow - Upgrade window for devices in network
type UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow struct {
	// Day of the week
	DayOfWeek *UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Hour of the day
	HourOfDay *UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum `json:"hourOfDay,omitempty"`
}

// UpdateNetworkFirmwareUpgrades200ApplicationJSON - Successful operation
type UpdateNetworkFirmwareUpgrades200ApplicationJSON struct {
	// The network devices to be updated
	Products *UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts `json:"products,omitempty"`
	// The timezone for the network
	Timezone *string `json:"timezone,omitempty"`
	// Upgrade window for devices in network
	UpgradeWindow *UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow `json:"upgradeWindow,omitempty"`
}

type UpdateNetworkFirmwareUpgradesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkFirmwareUpgrades200ApplicationJSONObject *UpdateNetworkFirmwareUpgrades200ApplicationJSON
}
