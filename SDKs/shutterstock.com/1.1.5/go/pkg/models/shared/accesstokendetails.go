// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccessTokenDetailsRealmEnum - Type of access token
type AccessTokenDetailsRealmEnum string

const (
	AccessTokenDetailsRealmEnumCustomer    AccessTokenDetailsRealmEnum = "customer"
	AccessTokenDetailsRealmEnumContributor AccessTokenDetailsRealmEnum = "contributor"
)

func (e *AccessTokenDetailsRealmEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "contributor":
		*e = AccessTokenDetailsRealmEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessTokenDetailsRealmEnum: %s", s)
	}
}

// AccessTokenDetails - Access token details that are currently associated with this user
type AccessTokenDetails struct {
	// Client ID that is associated with the user
	ClientID *string `json:"client_id,omitempty"`
	// Contributor ID that is associated with the user
	ContributorID *string `json:"contributor_id,omitempty"`
	// Customer ID that is associated with the user
	CustomerID *string `json:"customer_id,omitempty"`
	// Number of seconds until the access token expires; no expiration if this value is null
	ExpiresIn *int64 `json:"expires_in,omitempty"`
	// Organization ID that is associated with the user
	OrganizationID *string `json:"organization_id,omitempty"`
	// Type of access token
	Realm *AccessTokenDetailsRealmEnum `json:"realm,omitempty"`
	// Scopes that this access token provides when used as authentication
	Scopes []string `json:"scopes,omitempty"`
	// User ID that is associated with the user
	UserID *string `json:"user_id,omitempty"`
	// User name that is associated with the user
	Username *string `json:"username,omitempty"`
}
