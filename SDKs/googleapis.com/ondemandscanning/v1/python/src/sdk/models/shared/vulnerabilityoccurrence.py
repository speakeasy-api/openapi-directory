"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cvss as shared_cvss
from ..shared import packageissue as shared_packageissue
from ..shared import relatedurl as shared_relatedurl
from ..shared import vexassessment as shared_vexassessment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VulnerabilityOccurrenceCvssVersionEnum(str, Enum):
    r"""Output only. CVSS version used to populate cvss_score and severity."""
    CVSS_VERSION_UNSPECIFIED = 'CVSS_VERSION_UNSPECIFIED'
    CVSS_VERSION_2 = 'CVSS_VERSION_2'
    CVSS_VERSION_3 = 'CVSS_VERSION_3'

class VulnerabilityOccurrenceEffectiveSeverityEnum(str, Enum):
    r"""The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    MINIMAL = 'MINIMAL'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'

class VulnerabilityOccurrenceSeverityEnum(str, Enum):
    r"""Output only. The note provider assigned severity of this vulnerability."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    MINIMAL = 'MINIMAL'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VulnerabilityOccurrence:
    r"""An occurrence of a severity vulnerability on a resource."""
    
    cvss_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvssScore'), 'exclude': lambda f: f is None }})
    r"""Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity."""  
    cvss_v2: Optional[shared_cvss.Cvss] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvssV2'), 'exclude': lambda f: f is None }})
    r"""Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version."""  
    cvssv3: Optional[shared_cvss.Cvss] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvssv3'), 'exclude': lambda f: f is None }})
    r"""Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version."""  
    cvss_version: Optional[VulnerabilityOccurrenceCvssVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvssVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. CVSS version used to populate cvss_score and severity."""  
    effective_severity: Optional[VulnerabilityOccurrenceEffectiveSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveSeverity'), 'exclude': lambda f: f is None }})
    r"""The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues."""  
    fix_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixAvailable'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether at least one of the affected packages has a fix available."""  
    long_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longDescription'), 'exclude': lambda f: f is None }})
    r"""Output only. A detailed description of this vulnerability."""  
    package_issue: Optional[list[shared_packageissue.PackageIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageIssue'), 'exclude': lambda f: f is None }})
    r"""Required. The set of affected locations and their fixes (if available) within the associated resource."""  
    related_urls: Optional[list[shared_relatedurl.RelatedURL]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedUrls'), 'exclude': lambda f: f is None }})
    r"""Output only. URLs related to this vulnerability."""  
    severity: Optional[VulnerabilityOccurrenceSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Output only. The note provider assigned severity of this vulnerability."""  
    short_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortDescription'), 'exclude': lambda f: f is None }})
    r"""Output only. A one sentence description of this vulnerability."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.)."""  
    vex_assessment: Optional[shared_vexassessment.VexAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vexAssessment'), 'exclude': lambda f: f is None }})
    r"""VexAssessment provides all publisher provided Vex information that is related to this vulnerability."""  
    