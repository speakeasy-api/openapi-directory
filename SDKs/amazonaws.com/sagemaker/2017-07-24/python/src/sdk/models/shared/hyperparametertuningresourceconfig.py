"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hyperparametertuningallocationstrategy_enum as shared_hyperparametertuningallocationstrategy_enum
from ..shared import hyperparametertuninginstanceconfig as shared_hyperparametertuninginstanceconfig
from ..shared import traininginstancetype_enum as shared_traininginstancetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HyperParameterTuningResourceConfig:
    r"""<p>The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. <code>HyperParameterTuningResourceConfig</code> is similar to <code>ResourceConfig</code>, but has the additional <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection.</p> <note> <p> <code>HyperParameterTuningResourceConfig</code> supports the capabilities of <code>ResourceConfig</code> with the exception of <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.</p> </note>"""
    
    allocation_strategy: Optional[shared_hyperparametertuningallocationstrategy_enum.HyperParameterTuningAllocationStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocationStrategy'), 'exclude': lambda f: f is None }})  
    instance_configs: Optional[list[shared_hyperparametertuninginstanceconfig.HyperParameterTuningInstanceConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceConfigs'), 'exclude': lambda f: f is None }})  
    instance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCount'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[shared_traininginstancetype_enum.TrainingInstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    volume_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeKmsKeyId'), 'exclude': lambda f: f is None }})  
    volume_size_in_gb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeSizeInGB'), 'exclude': lambda f: f is None }})  
    