"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inputdataconfig as shared_inputdataconfig
from ..shared import outputdataconfig as shared_outputdataconfig
from ..shared import translationsettings as shared_translationsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartTextTranslationJobRequest:
    
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken') }})  
    data_access_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataAccessRoleArn') }})  
    input_data_config: shared_inputdataconfig.InputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig') }})  
    output_data_config: shared_outputdataconfig.OutputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputDataConfig') }})  
    source_language_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceLanguageCode') }})  
    target_language_codes: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetLanguageCodes') }})  
    job_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobName'), 'exclude': lambda f: f is None }})  
    parallel_data_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParallelDataNames'), 'exclude': lambda f: f is None }})  
    settings: Optional[shared_translationsettings.TranslationSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    terminology_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminologyNames'), 'exclude': lambda f: f is None }})  
    