"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SavedListViews:
    r"""Saved List Views"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_v2_saved_list_views_id_json(self, request: operations.DeleteV2SavedListViewsIDJSONRequest) -> operations.DeleteV2SavedListViewsIDJSONResponse:
        r"""Delete a saved list view
        Deletes a saved list view. This operation is not reversible without contacting support.
        This operation can be called multiple times successfully.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV2SavedListViewsIDJSONRequest, base_url, '/v2/saved_list_views/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV2SavedListViewsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_v2_saved_list_views_json(self, request: operations.GetV2SavedListViewsJSONRequest) -> operations.GetV2SavedListViewsJSONResponse:
        r"""List saved list views
        Fetches multiple saved list view records. The records can be filtered, paged, and sorted according to
        the respective parameters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/saved_list_views.json'
        
        query_params = utils.get_query_params(operations.GetV2SavedListViewsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2SavedListViewsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_saved_list_views_id_json(self, request: operations.GetV2SavedListViewsIDJSONRequest) -> operations.GetV2SavedListViewsIDJSONResponse:
        r"""Fetch a saved list view
        Fetches a saved list view, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2SavedListViewsIDJSONRequest, base_url, '/v2/saved_list_views/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2SavedListViewsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_saved_list_views_json(self, request: operations.PostV2SavedListViewsJSONRequestBody) -> operations.PostV2SavedListViewsJSONResponse:
        r"""Create a saved list view
        Creates a saved list view.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/saved_list_views.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2SavedListViewsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_saved_list_views_id_json(self, request: operations.PutV2SavedListViewsIDJSONRequest) -> operations.PutV2SavedListViewsIDJSONResponse:
        r"""Update a saved list view
        Updates a saved list view.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2SavedListViewsIDJSONRequest, base_url, '/v2/saved_list_views/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2SavedListViewsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    