// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                             `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                             `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Amount          *float32                                                                `json:"Amount,omitempty"`
	Author          *string                                                                 `json:"Author,omitempty"`
	Code            *string                                                                 `json:"Code,omitempty"`
	Comment         *string                                                                 `json:"Comment,omitempty"`
	Date            *string                                                                 `json:"Date,omitempty"`
	DeclarationDate *string                                                                 `json:"DeclarationDate,omitempty"`
	File            PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2File        `json:"File"`
	Title           string                                                                  `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 struct {
	Amount          *float32 `json:"Amount,omitempty"`
	DeclarationDate *string  `json:"DeclarationDate,omitempty"`
	DocumentID      string   `json:"DocumentId"`
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/social-declarations_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/social-declarations_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1
	PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONPostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1(postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1) PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON{
		PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1: &postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONPostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2(postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2) PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON{
		PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2: &postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 = postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 = postSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONRequest struct {
	// Social declaration to add (either (Reference,DocumentId) either (File,Name,Content64Encoded,Title,Reference) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDSocialDeclarationsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder social regime
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDSocialDeclarationsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDSocialDeclarationsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDSocialDeclarationsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDSocialDeclarationsJSON201ApplicationJSON
}
