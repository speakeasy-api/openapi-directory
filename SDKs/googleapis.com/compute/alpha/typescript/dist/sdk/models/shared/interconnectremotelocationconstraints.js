"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterconnectRemoteLocationConstraints = exports.InterconnectRemoteLocationConstraintsPortPairVlanEnum = exports.InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum = void 0;
var utils_1 = require("../../../internal/utils");
var interconnectremotelocationconstraintssubnetlengthrange_1 = require("./interconnectremotelocationconstraintssubnetlengthrange");
var class_transformer_1 = require("class-transformer");
/**
 * [Output Only] Port pair remote location constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, PORT_PAIR_MATCHING_REMOTE_LOCATION. GCP's API refers only to individual ports, but the UI uses this field when ordering a pair of ports, to prevent users from accidentally ordering something that is incompatible with their cloud provider. Specifically, when ordering a redundant pair of Cross-Cloud Interconnect ports, and one of them uses a remote location with portPairMatchingRemoteLocation set to matching, the UI will require that both ports use the same remote location.
 */
var InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum;
(function (InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum) {
    InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum["PortPairMatchingRemoteLocation"] = "PORT_PAIR_MATCHING_REMOTE_LOCATION";
    InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum["PortPairUnconstrainedRemoteLocation"] = "PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION";
})(InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum = exports.InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum || (exports.InterconnectRemoteLocationConstraintsPortPairRemoteLocationEnum = {}));
/**
 * [Output Only] Port pair VLAN constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_VLAN, PORT_PAIR_MATCHING_VLAN
 */
var InterconnectRemoteLocationConstraintsPortPairVlanEnum;
(function (InterconnectRemoteLocationConstraintsPortPairVlanEnum) {
    InterconnectRemoteLocationConstraintsPortPairVlanEnum["PortPairMatchingVlan"] = "PORT_PAIR_MATCHING_VLAN";
    InterconnectRemoteLocationConstraintsPortPairVlanEnum["PortPairUnconstrainedVlan"] = "PORT_PAIR_UNCONSTRAINED_VLAN";
})(InterconnectRemoteLocationConstraintsPortPairVlanEnum = exports.InterconnectRemoteLocationConstraintsPortPairVlanEnum || (exports.InterconnectRemoteLocationConstraintsPortPairVlanEnum = {}));
var InterconnectRemoteLocationConstraints = /** @class */ (function (_super) {
    __extends(InterconnectRemoteLocationConstraints, _super);
    function InterconnectRemoteLocationConstraints() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portPairRemoteLocation" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocationConstraints.prototype, "portPairRemoteLocation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portPairVlan" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocationConstraints.prototype, "portPairVlan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetLengthRange" }),
        (0, class_transformer_1.Type)(function () { return interconnectremotelocationconstraintssubnetlengthrange_1.InterconnectRemoteLocationConstraintsSubnetLengthRange; }),
        __metadata("design:type", interconnectremotelocationconstraintssubnetlengthrange_1.InterconnectRemoteLocationConstraintsSubnetLengthRange)
    ], InterconnectRemoteLocationConstraints.prototype, "subnetLengthRange", void 0);
    return InterconnectRemoteLocationConstraints;
}(utils_1.SpeakeasyBase));
exports.InterconnectRemoteLocationConstraints = InterconnectRemoteLocationConstraints;
