// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubjectKindEnum - Authentication type for the subject.
type SubjectKindEnum string

const (
	SubjectKindEnumAuthTypeUnspecified SubjectKindEnum = "AUTH_TYPE_UNSPECIFIED"
	SubjectKindEnumUser                SubjectKindEnum = "USER"
	SubjectKindEnumServiceaccount      SubjectKindEnum = "SERVICEACCOUNT"
	SubjectKindEnumGroup               SubjectKindEnum = "GROUP"
)

func (e SubjectKindEnum) ToPointer() *SubjectKindEnum {
	return &e
}

func (e *SubjectKindEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTH_TYPE_UNSPECIFIED":
		fallthrough
	case "USER":
		fallthrough
	case "SERVICEACCOUNT":
		fallthrough
	case "GROUP":
		*e = SubjectKindEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubjectKindEnum: %v", v)
	}
}

// Subject - Represents a Kubernetes subject.
type Subject struct {
	// Authentication type for the subject.
	Kind *SubjectKindEnum `json:"kind,omitempty"`
	// Name for the subject.
	Name *string `json:"name,omitempty"`
	// Namespace for the subject.
	Ns *string `json:"ns,omitempty"`
}
