"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import picture as shared_picture
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentMetadataConnectionsReplies:
    r"""Information about this comment's replies."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of replies on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentMetadataConnections:
    
    replies: CommentMetadataConnectionsReplies = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replies') }})
    r"""Information about this comment's replies."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentMetadata:
    
    connections: CommentMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})  
    
class CommentTypeEnum(str, Enum):
    r"""The Vimeo content to which the comment relates:
    
    Option descriptions:
     * `video` - The comment is about a video.
    """
    VIDEO = 'video'

class CommentUserAccountEnum(str, Enum):
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """
    BASIC = 'basic'
    BUSINESS = 'business'
    LIVE_BUSINESS = 'live_business'
    LIVE_PREMIUM = 'live_premium'
    LIVE_PRO = 'live_pro'
    PLUS = 'plus'
    PRO = 'pro'
    PRO_UNLIMITED = 'pro_unlimited'
    PRODUCER = 'producer'

class CommentUserContentFilterEnum(str, Enum):
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """
    DRUGS = 'drugs'
    LANGUAGE = 'language'
    NUDITY = 'nudity'
    SAFE = 'safe'
    UNRATED = 'unrated'
    VIOLENCE = 'violence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsAlbums:
    r"""Information about the albums created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of albums on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsAppearances:
    r"""Information about the appearances of this user in other videos."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of appearances on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsBlock:
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of blocked users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsCategories:
    r"""Information about this user's followed categories."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of categories on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsChannels:
    r"""Information about this user's subscribed channels."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsFeed:
    r"""Information about this user's feed."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsFolders:
    r"""Information about this user's folders."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of folders on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsFollowers:
    r"""Information about the user's followers."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of followers on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsFollowing:
    r"""Information about the users that the current user is following."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsGroups:
    r"""Information about the groups created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of groups on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsLikes:
    r"""Information about the videos that this user has liked."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsModeratedChannels:
    r"""Information about the channels that this user moderates."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsPictures:
    r"""Information about this user's portraits."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of pictures on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsPortfolios:
    r"""Information about this user's portfolios."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of portfolios on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsRecommendedChannels:
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsRecommendedUsers:
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsShared:
    r"""Information about the videos that have been shared with this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsVideos:
    r"""Information about the videos uploaded by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsWatchedVideos:
    r"""Information about the videos that this user has watched."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnectionsWatchlater:
    r"""Information about the videos that this user wants to watch later."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataConnections:
    r"""The list of resource URIs related to the user."""
    
    albums: CommentUserMetadataConnectionsAlbums = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('albums') }})
    r"""Information about the albums created by this user."""  
    appearances: CommentUserMetadataConnectionsAppearances = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appearances') }})
    r"""Information about the appearances of this user in other videos."""  
    block: CommentUserMetadataConnectionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""  
    categories: CommentUserMetadataConnectionsCategories = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""Information about this user's followed categories."""  
    channels: CommentUserMetadataConnectionsChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels') }})
    r"""Information about this user's subscribed channels."""  
    feed: CommentUserMetadataConnectionsFeed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feed') }})
    r"""Information about this user's feed."""  
    folders: CommentUserMetadataConnectionsFolders = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folders') }})
    r"""Information about this user's folders."""  
    followers: CommentUserMetadataConnectionsFollowers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers') }})
    r"""Information about the user's followers."""  
    following: CommentUserMetadataConnectionsFollowing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following') }})
    r"""Information about the users that the current user is following."""  
    groups: CommentUserMetadataConnectionsGroups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""Information about the groups created by this user."""  
    likes: CommentUserMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the videos that this user has liked."""  
    moderated_channels: CommentUserMetadataConnectionsModeratedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderated_channels') }})
    r"""Information about the channels that this user moderates."""  
    pictures: CommentUserMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this user's portraits."""  
    portfolios: CommentUserMetadataConnectionsPortfolios = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})
    r"""Information about this user's portfolios."""  
    recommended_channels: CommentUserMetadataConnectionsRecommendedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_channels') }})
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""  
    recommended_users: CommentUserMetadataConnectionsRecommendedUsers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_users') }})
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""  
    shared: CommentUserMetadataConnectionsShared = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared') }})
    r"""Information about the videos that have been shared with this user."""  
    videos: CommentUserMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos uploaded by this user."""  
    watched_videos: CommentUserMetadataConnectionsWatchedVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_videos') }})
    r"""Information about the videos that this user has watched."""  
    watchlater: CommentUserMetadataConnectionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about the videos that this user wants to watch later."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataInteractionsAddPrivacyUser:
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataInteractionsBlock:
    r"""Information related to the block status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is blocking the current user."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the block occurred, or the null value if no block exists."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to block or unblock the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataInteractionsFollow:
    r"""Information related to the followed status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is following the current user."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to follow the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataInteractionsReport:
    r"""Information regarding where and how to report a user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""List of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadataInteractions:
    
    block: CommentUserMetadataInteractionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information related to the block status of this user."""  
    follow: CommentUserMetadataInteractionsFollow = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow') }})
    r"""Information related to the followed status of this user."""  
    report: CommentUserMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information regarding where and how to report a user."""  
    add_privacy_user: Optional[CommentUserMetadataInteractionsAddPrivacyUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_privacy_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserMetadata:
    r"""The user's metadata."""
    
    connections: CommentUserMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""The list of resource URIs related to the user."""  
    interactions: CommentUserMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})  
    
class CommentUserPreferencesVideosPrivacyCommentsEnum(str, Enum):
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class CommentUserPreferencesVideosPrivacyEmbedEnum(str, Enum):
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class CommentUserPreferencesVideosPrivacyViewEnum(str, Enum):
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserPreferencesVideosPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether other users can add the user's videos."""  
    comments: Optional[CommentUserPreferencesVideosPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether other users can download the user's videos."""  
    embed: Optional[CommentUserPreferencesVideosPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """  
    view: Optional[CommentUserPreferencesVideosPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserPreferencesVideos:
    
    privacy: Optional[CommentUserPreferencesVideosPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserPreferences:
    
    videos: Optional[CommentUserPreferencesVideos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserUploadQuotaLifetime:
    r"""Information about the user's lifetime upload usage."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your lifetime maximum."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload across the lifetime of your account."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your lifetime limit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserUploadQuotaPeriodic:
    r"""Information about the user's usage for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota for the current period."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload per period."""  
    reset_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reset_date') }})
    r"""The time in ISO 8601 format when your upload quota resets."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota in the current period."""  
    
class CommentUserUploadQuotaSpaceShowingEnum(str, Enum):
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""
    LIFETIME = 'lifetime'
    PERIODIC = 'periodic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserUploadQuotaSpace:
    r"""Information about the user's upload space remaining for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The maximum number of bytes allotted to your upload quota."""  
    showing: CommentUserUploadQuotaSpaceShowingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showing') }})
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserUploadQuota:
    r"""Appears only when the user has upload access and is looking at their own user record."""
    
    lifetime: CommentUserUploadQuotaLifetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime') }})
    r"""Information about the user's lifetime upload usage."""  
    periodic: CommentUserUploadQuotaPeriodic = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodic') }})
    r"""Information about the user's usage for the current period."""  
    space: CommentUserUploadQuotaSpace = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space') }})
    r"""Information about the user's upload space remaining for the current period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUserWebsites:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The website's description."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL of the website."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the website."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentUser:
    r"""The user who posted the comment."""
    
    account: CommentUserAccountEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """  
    bio: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio') }})
    r"""The user's bio."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the user account was created."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The absolute URL of this user's profile page."""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The user's location."""  
    metadata: CommentUserMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The user's metadata."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The user's display name."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active portrait of this user."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The user's resource key string."""  
    upload_quota: CommentUserUploadQuota = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_quota') }})
    r"""Appears only when the user has upload access and is looking at their own user record."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The user's canonical relative URI."""  
    websites: list[CommentUserWebsites] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websites') }})
    r"""The user's websites."""  
    content_filter: Optional[CommentUserContentFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_filter'), 'exclude': lambda f: f is None }})
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The user's email address. This data requires a bearer token with the `email` scope."""  
    preferences: Optional[CommentUserPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferences'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Comment:
    r"""The comment was added."""
    
    created_on: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_on') }})
    r"""The time in ISO 8601 format when the comment was posted."""  
    metadata: CommentMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The resource key string for the comment."""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The content of the comment."""  
    type: CommentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The Vimeo content to which the comment relates:
    
    Option descriptions:
     * `video` - The comment is about a video.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The unique identifier to access the comment resource."""  
    user: CommentUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The user who posted the comment."""  
    