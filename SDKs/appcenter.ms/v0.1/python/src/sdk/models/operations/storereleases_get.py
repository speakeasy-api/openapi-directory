"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class StoreReleasesGetSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class StoreReleasesGetRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    release_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'release_id', 'style': 'simple', 'explode': False }})
    r"""The name of the store"""  
    store_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'store_name', 'style': 'simple', 'explode': False }})
    r"""The name of the store"""  
    
class StoreReleasesGetDefaultApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreReleasesGetDefaultApplicationJSON:
    r"""Error"""
    
    code: StoreReleasesGetDefaultApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class StoreReleasesGet200ApplicationJSONDistributionStoresTypeEnum(str, Enum):
    r"""type of the distribution store currently stores type can be intune or googleplay."""
    INTUNE = 'intune'
    GOOGLEPLAY = 'googleplay'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreReleasesGet200ApplicationJSONDistributionStores:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID identifying a unique distribution store."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution store."""  
    publishing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishing_status'), 'exclude': lambda f: f is None }})
    r"""publishing status of the release in the store."""  
    type: Optional[StoreReleasesGet200ApplicationJSONDistributionStoresTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of the distribution store currently stores type can be intune or googleplay."""  
    
class StoreReleasesGet200ApplicationJSONInstallURLEnum(str, Enum):
    r"""The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`"""
    GROUP = 'group'
    STORE = 'store'

class StoreReleasesGet200ApplicationJSONStatusEnum(str, Enum):
    r"""OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
    The release state.<br>
    <b>available</b>: The uploaded release has been distributed.<br>
    <b>unavailable</b>: The uploaded release is not visible to the user. <br>
    """
    AVAILABLE = 'available'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreReleasesGet200ApplicationJSON:
    r"""Details of an uploaded release"""
    
    android_min_api_level: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('android_min_api_level'), 'exclude': lambda f: f is None }})
    r"""The release's minimum required Android API level."""  
    app_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_display_name'), 'exclude': lambda f: f is None }})
    r"""The app's display name."""  
    app_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_name'), 'exclude': lambda f: f is None }})
    r"""The app's name (extracted from the uploaded release)."""  
    bundle_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_identifier'), 'exclude': lambda f: f is None }})
    r"""The identifier of the apps bundle."""  
    distribution_stores: Optional[list[StoreReleasesGet200ApplicationJSONDistributionStores]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution_stores'), 'exclude': lambda f: f is None }})
    r"""a list of distribution stores that are associated with this release."""  
    download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_url'), 'exclude': lambda f: f is None }})
    r"""The URL that hosts the binary for this release."""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""MD5 checksum of the release binary."""  
    id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID identifying this unique release."""  
    install_url: Optional[StoreReleasesGet200ApplicationJSONInstallURLEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('install_url'), 'exclude': lambda f: f is None }})
    r"""The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`"""  
    min_os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_os'), 'exclude': lambda f: f is None }})
    r"""The release's minimum required operating system."""  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})
    r"""The release's release notes."""  
    short_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_version'), 'exclude': lambda f: f is None }})
    r"""The release's short version.<br>
    For iOS: CFBundleShortVersionString from info.plist.
    For Android: android:versionName from AppManifest.xml.
    """  
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The release's size in bytes."""  
    status: Optional[StoreReleasesGet200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
    The release state.<br>
    <b>available</b>: The uploaded release has been distributed.<br>
    <b>unavailable</b>: The uploaded release is not visible to the user. <br>
    """  
    uploaded_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_at'), 'exclude': lambda f: f is None }})
    r"""UTC time in ISO 8601 format of the uploaded time."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The release's version.<br>
    For iOS: CFBundleVersion from info.plist.
    For Android: android:versionCode from AppManifest.xml.
    """  
    

@dataclasses.dataclass
class StoreReleasesGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    store_releases_get_200_application_json_objects: Optional[list[StoreReleasesGet200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Success"""  
    store_releases_get_default_application_json_object: Optional[StoreReleasesGetDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    