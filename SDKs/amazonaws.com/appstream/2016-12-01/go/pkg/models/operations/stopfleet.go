// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StopFleetXAmzTargetEnum
type StopFleetXAmzTargetEnum string

const (
	StopFleetXAmzTargetEnumPhotonAdminProxyServiceStopFleet StopFleetXAmzTargetEnum = "PhotonAdminProxyService.StopFleet"
)

func (e StopFleetXAmzTargetEnum) ToPointer() *StopFleetXAmzTargetEnum {
	return &e
}

func (e *StopFleetXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.StopFleet":
		*e = StopFleetXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopFleetXAmzTargetEnum: %v", v)
	}
}

type StopFleetRequest struct {
	StopFleetRequest  shared.StopFleetRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StopFleetXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StopFleetResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	StatusCode                      int
	RawResponse                     *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StopFleetResult map[string]interface{}
}
