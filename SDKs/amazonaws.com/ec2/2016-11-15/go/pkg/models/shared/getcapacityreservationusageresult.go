// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetCapacityReservationUsageResultInstanceUsages - Information about the Capacity Reservation usage.
type GetCapacityReservationUsageResultInstanceUsages struct {
	AccountID         *string
	UsedInstanceCount *int64
}

// GetCapacityReservationUsageResultStateEnum - <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p> <ul> <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li> <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li> <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li> </ul>
type GetCapacityReservationUsageResultStateEnum string

const (
	GetCapacityReservationUsageResultStateEnumActive    GetCapacityReservationUsageResultStateEnum = "active"
	GetCapacityReservationUsageResultStateEnumExpired   GetCapacityReservationUsageResultStateEnum = "expired"
	GetCapacityReservationUsageResultStateEnumCancelled GetCapacityReservationUsageResultStateEnum = "cancelled"
	GetCapacityReservationUsageResultStateEnumPending   GetCapacityReservationUsageResultStateEnum = "pending"
	GetCapacityReservationUsageResultStateEnumFailed    GetCapacityReservationUsageResultStateEnum = "failed"
)

func (e *GetCapacityReservationUsageResultStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "cancelled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		*e = GetCapacityReservationUsageResultStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCapacityReservationUsageResultStateEnum: %s", s)
	}
}

// GetCapacityReservationUsageResult - Success
type GetCapacityReservationUsageResult struct {
	AvailableInstanceCount *int64
	CapacityReservationID  *string
	InstanceType           *string
	InstanceUsages         []GetCapacityReservationUsageResultInstanceUsages
	NextToken              *string
	State                  *GetCapacityReservationUsageResultStateEnum
	TotalInstanceCount     *int64
}
