// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ProjectsListCardsArchivedStateEnum - Filters the project cards that are returned by the card's state.
type ProjectsListCardsArchivedStateEnum string

const (
	ProjectsListCardsArchivedStateEnumAll         ProjectsListCardsArchivedStateEnum = "all"
	ProjectsListCardsArchivedStateEnumArchived    ProjectsListCardsArchivedStateEnum = "archived"
	ProjectsListCardsArchivedStateEnumNotArchived ProjectsListCardsArchivedStateEnum = "not_archived"
)

func (e ProjectsListCardsArchivedStateEnum) ToPointer() *ProjectsListCardsArchivedStateEnum {
	return &e
}

func (e *ProjectsListCardsArchivedStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "archived":
		fallthrough
	case "not_archived":
		*e = ProjectsListCardsArchivedStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectsListCardsArchivedStateEnum: %v", v)
	}
}

type ProjectsListCardsRequest struct {
	// Filters the project cards that are returned by the card's state.
	ArchivedState *ProjectsListCardsArchivedStateEnum `queryParam:"style=form,explode=true,name=archived_state"`
	// The unique identifier of the column.
	ColumnID int64 `pathParam:"style=simple,explode=false,name=column_id"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
}

type ProjectsListCardsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	ProjectCards []shared.ProjectCard
}
