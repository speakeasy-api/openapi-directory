"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import eventstartcondition as shared_eventstartcondition
from ..shared import segmentcondition as shared_segmentcondition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartCondition:
    r"""Specifies the conditions for the first activity in a journey. This activity and its conditions determine which users are participants in a journey."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    event_start_condition: Optional[shared_eventstartcondition.EventStartCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventStartCondition'), 'exclude': lambda f: f is None }})
    r"""Specifies the settings for an event that causes a journey activity to start."""  
    segment_start_condition: Optional[shared_segmentcondition.SegmentCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentStartCondition'), 'exclude': lambda f: f is None }})  
    