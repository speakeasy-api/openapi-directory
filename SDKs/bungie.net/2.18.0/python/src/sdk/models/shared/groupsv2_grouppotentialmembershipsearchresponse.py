"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import groupsv2_grouppotentialmembership as shared_groupsv2_grouppotentialmembership
from ..shared import queries_pagedquery as shared_queries_pagedquery
from typing import Optional


@dataclasses.dataclass
class GroupsV2GroupPotentialMembershipSearchResponse:
    
    has_more: Optional[bool] = dataclasses.field(default=None)  
    query: Optional[shared_queries_pagedquery.QueriesPagedQuery] = dataclasses.field(default=None)  
    replacement_continuation_token: Optional[str] = dataclasses.field(default=None)  
    results: Optional[list[shared_groupsv2_grouppotentialmembership.GroupsV2GroupPotentialMembership]] = dataclasses.field(default=None)  
    total_results: Optional[int] = dataclasses.field(default=None)  
    use_total_results: Optional[bool] = dataclasses.field(default=None)
    r"""If useTotalResults is true, then totalResults represents an accurate count.
    If False, it does not, and may be estimated/only the size of the current page.
    Either way, you should probably always only trust hasMore.
    This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
    """  
    