/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestRequest - Test request is a minimalist wrapper for requesting the launch of a new test
 */
public class TestRequest {
    /**
     * A restriction on service operations to test
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filteredOperations")
    public String[] filteredOperations;

    public TestRequest withFilteredOperations(String[] filteredOperations) {
        this.filteredOperations = filteredOperations;
        return this;
    }
    
    /**
     * Specification of additional headers for a Service/API operations. Keys are operation name or "globals" (if header applies to all), values are Header objects DTO.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationHeaders")
    public java.util.Map<String, HeaderDTO[]> operationHeaders;

    public TestRequest withOperationHeaders(java.util.Map<String, HeaderDTO[]> operationHeaders) {
        this.operationHeaders = operationHeaders;
        return this;
    }
    
    /**
     * Type of test strategy (different strategies are implemented by different runners)
     */
    @JsonProperty("runnerType")
    public TestRunnerTypeEnum runnerType;

    public TestRequest withRunnerType(TestRunnerTypeEnum runnerType) {
        this.runnerType = runnerType;
        return this;
    }
    
    /**
     * The name of Secret to use for connecting the test endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretName")
    public String secretName;

    public TestRequest withSecretName(String secretName) {
        this.secretName = secretName;
        return this;
    }
    
    /**
     * Unique identifier of service to test
     */
    @JsonProperty("serviceId")
    public String serviceId;

    public TestRequest withServiceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }
    
    /**
     * Endpoint to test for this service
     */
    @JsonProperty("testEndpoint")
    public String testEndpoint;

    public TestRequest withTestEndpoint(String testEndpoint) {
        this.testEndpoint = testEndpoint;
        return this;
    }
    
    /**
     * The maximum time (in milliseconds) to wait for this test ends
     */
    @JsonProperty("timeout")
    public Long timeout;

    public TestRequest withTimeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }
    
    public TestRequest(@JsonProperty("runnerType") TestRunnerTypeEnum runnerType, @JsonProperty("serviceId") String serviceId, @JsonProperty("testEndpoint") String testEndpoint, @JsonProperty("timeout") Long timeout) {
        this.runnerType = runnerType;
        this.serviceId = serviceId;
        this.testEndpoint = testEndpoint;
        this.timeout = timeout;
  }
}
