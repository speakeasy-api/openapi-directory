// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritablePowerFeedPhaseEnum string

const (
	WritablePowerFeedPhaseEnumSinglePhase WritablePowerFeedPhaseEnum = "single-phase"
	WritablePowerFeedPhaseEnumThreePhase  WritablePowerFeedPhaseEnum = "three-phase"
)

func (e *WritablePowerFeedPhaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single-phase":
		fallthrough
	case "three-phase":
		*e = WritablePowerFeedPhaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePowerFeedPhaseEnum: %s", s)
	}
}

type WritablePowerFeedStatusEnum string

const (
	WritablePowerFeedStatusEnumOffline WritablePowerFeedStatusEnum = "offline"
	WritablePowerFeedStatusEnumActive  WritablePowerFeedStatusEnum = "active"
	WritablePowerFeedStatusEnumPlanned WritablePowerFeedStatusEnum = "planned"
	WritablePowerFeedStatusEnumFailed  WritablePowerFeedStatusEnum = "failed"
)

func (e *WritablePowerFeedStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "offline":
		fallthrough
	case "active":
		fallthrough
	case "planned":
		fallthrough
	case "failed":
		*e = WritablePowerFeedStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePowerFeedStatusEnum: %s", s)
	}
}

type WritablePowerFeedSupplyEnum string

const (
	WritablePowerFeedSupplyEnumAc WritablePowerFeedSupplyEnum = "ac"
	WritablePowerFeedSupplyEnumDc WritablePowerFeedSupplyEnum = "dc"
)

func (e *WritablePowerFeedSupplyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ac":
		fallthrough
	case "dc":
		*e = WritablePowerFeedSupplyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePowerFeedSupplyEnum: %s", s)
	}
}

type WritablePowerFeedTypeEnum string

const (
	WritablePowerFeedTypeEnumPrimary   WritablePowerFeedTypeEnum = "primary"
	WritablePowerFeedTypeEnumRedundant WritablePowerFeedTypeEnum = "redundant"
)

func (e *WritablePowerFeedTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "primary":
		fallthrough
	case "redundant":
		*e = WritablePowerFeedTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePowerFeedTypeEnum: %s", s)
	}
}

type WritablePowerFeedInput struct {
	Amperage     *int64                 `json:"amperage,omitempty"`
	Comments     *string                `json:"comments,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	// Maximum permissible draw (percentage)
	MaxUtilization *int64                       `json:"max_utilization,omitempty"`
	Name           string                       `json:"name"`
	Phase          *WritablePowerFeedPhaseEnum  `json:"phase,omitempty"`
	PowerPanel     int64                        `json:"power_panel"`
	Rack           *int64                       `json:"rack,omitempty"`
	Status         *WritablePowerFeedStatusEnum `json:"status,omitempty"`
	Supply         *WritablePowerFeedSupplyEnum `json:"supply,omitempty"`
	Tags           []string                     `json:"tags,omitempty"`
	Type           *WritablePowerFeedTypeEnum   `json:"type,omitempty"`
	Voltage        *int64                       `json:"voltage,omitempty"`
}
