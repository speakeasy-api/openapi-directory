<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class JobsClassic 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * assignFileToJobOutput
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignFileToJobOutputRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignFileToJobOutputResponse
     */
	public function assignFileToJobOutput(
        \OpenAPI\OpenAPI\Models\Operations\AssignFileToJobOutputRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignFileToJobOutputResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/files/output', \OpenAPI\OpenAPI\Models\Operations\AssignFileToJobOutputRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taskFileDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignFileToJobOutputResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * Assigns vendor to a job in a project.
     * 
     * Assigns vendor to a job in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignVendorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignVendorResponse
     */
	public function assignVendor(
        \OpenAPI\OpenAPI\Models\Operations\AssignVendorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignVendorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/vendor', \OpenAPI\OpenAPI\Models\Operations\AssignVendorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignVendorDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignVendorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Changes job status if possible (400 Bad Request is returned otherwise).
     * 
     * Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeStatusResponse
     */
	public function changeStatus(
        \OpenAPI\OpenAPI\Models\Operations\ChangeStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/status', \OpenAPI\OpenAPI\Models\Operations\ChangeStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobStatusDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns job details by jobId.
     * 
     * Returns job details by jobId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobDetailsResponse
     */
	public function getJobDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetJobDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\GetJobDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of input and output files of a job.
     * 
     * Returns list of input and output files of a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobFilesResponse
     */
	public function getJobFiles(
        \OpenAPI\OpenAPI\Models\Operations\GetJobFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/files', \OpenAPI\OpenAPI\Models\Operations\GetJobFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobFilesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobFilesDto1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns file metadata.
     * 
     * Returns file metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobFiles1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobFiles1Response
     */
	public function getJobFiles1(
        \OpenAPI\OpenAPI\Models\Operations\GetJobFiles1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobFiles1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/files/{fileId}', \OpenAPI\OpenAPI\Models\Operations\GetJobFiles1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobFiles1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileMetadataDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileMetadataDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates dates of a given job.
     * 
     * Updates dates of a given job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDatesResponse
     */
	public function updateDates(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/dates', \OpenAPI\OpenAPI\Models\Operations\UpdateDatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobDatesDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Updates instructions for a job.
     * 
     * Updates instructions for a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInstructionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInstructionsResponse
     */
	public function updateInstructions(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInstructionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInstructionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{jobId}/instructions', \OpenAPI\OpenAPI\Models\Operations\UpdateInstructionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instructionsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInstructionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}