/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`
 */
export enum ScoreTrackPointTypeEnum {
  Measure = "measure",
  End = "end",
}

/**
 * A track synchronization point
 */
export class ScoreTrackPoint extends SpeakeasyBase {
  /**
   * The measure unique identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "measureUuid" })
  measureUuid?: string;

  /**
   * The corresponding time in seconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time: number;

  /**
   * The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: ScoreTrackPointTypeEnum;
}
