/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Events {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes an event.
   */
  calendarEventsDelete(
    req: operations.CalendarEventsDeleteRequest,
    security: operations.CalendarEventsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/{eventId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsDeleteResponse =
        new operations.CalendarEventsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
   */
  calendarEventsGet(
    req: operations.CalendarEventsGetRequest,
    security: operations.CalendarEventsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/{eventId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsGetResponse =
        new operations.CalendarEventsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
   */
  calendarEventsImport(
    req: operations.CalendarEventsImportRequest,
    security: operations.CalendarEventsImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsImportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "event",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsImportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsImportResponse =
        new operations.CalendarEventsImportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an event.
   */
  calendarEventsInsert(
    req: operations.CalendarEventsInsertRequest,
    security: operations.CalendarEventsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "event",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsInsertResponse =
        new operations.CalendarEventsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns instances of the specified recurring event.
   */
  calendarEventsInstances(
    req: operations.CalendarEventsInstancesRequest,
    security: operations.CalendarEventsInstancesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsInstancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsInstancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/{eventId}/instances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsInstancesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsInstancesResponse =
        new operations.CalendarEventsInstancesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = utils.objectToClass(httpRes?.data, shared.Events);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns events on the specified calendar.
   */
  calendarEventsList(
    req: operations.CalendarEventsListRequest,
    security: operations.CalendarEventsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsListResponse =
        new operations.CalendarEventsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = utils.objectToClass(httpRes?.data, shared.Events);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves an event to another calendar, i.e. changes an event's organizer.
   */
  calendarEventsMove(
    req: operations.CalendarEventsMoveRequest,
    security: operations.CalendarEventsMoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsMoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsMoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/{eventId}/move",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsMoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsMoveResponse =
        new operations.CalendarEventsMoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an event. This method supports patch semantics.
   */
  calendarEventsPatch(
    req: operations.CalendarEventsPatchRequest,
    security: operations.CalendarEventsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/{eventId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "event",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsPatchResponse =
        new operations.CalendarEventsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an event based on a simple text string.
   */
  calendarEventsQuickAdd(
    req: operations.CalendarEventsQuickAddRequest,
    security: operations.CalendarEventsQuickAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsQuickAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsQuickAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/quickAdd",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsQuickAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsQuickAddResponse =
        new operations.CalendarEventsQuickAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an event.
   */
  calendarEventsUpdate(
    req: operations.CalendarEventsUpdateRequest,
    security: operations.CalendarEventsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/{eventId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "event",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsUpdateResponse =
        new operations.CalendarEventsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.event = utils.objectToClass(httpRes?.data, shared.Event);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Watch for changes to Events resources.
   */
  calendarEventsWatch(
    req: operations.CalendarEventsWatchRequest,
    security: operations.CalendarEventsWatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CalendarEventsWatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CalendarEventsWatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/calendars/{calendarId}/events/watch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "channel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CalendarEventsWatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CalendarEventsWatchResponse =
        new operations.CalendarEventsWatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channel = utils.objectToClass(httpRes?.data, shared.Channel);
          }
          break;
      }

      return res;
    });
  }
}
