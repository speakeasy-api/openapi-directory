// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum - The type of confidence interval to build
type PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum string

const (
	PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnumTwoSided      PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum = "twoSided"
	PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnumLowerOneSided PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum = "lowerOneSided"
	PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnumUpperOneSided PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum = "upperOneSided"
)

func (e *PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "twoSided":
		fallthrough
	case "lowerOneSided":
		fallthrough
	case "upperOneSided":
		*e = PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum: %s", s)
	}
}

type PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyPortfolios struct {
	// portfolioValues[t] is the value of the portfolio at the time t
	PortfolioValues []float64 `json:"portfolioValues"`
}

type PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBody struct {
	// The type of confidence interval to build
	ConfidenceIntervalType *PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyConfidenceIntervalTypeEnum `json:"confidenceIntervalType,omitempty"`
	// The confidence level of the confidence interval to build, in percentage
	ConfidenceLevel *float64                                                                  `json:"confidenceLevel,omitempty"`
	Portfolios      []PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBodyPortfolios `json:"portfolios"`
	// The risk free rate
	RiskFreeRate float64 `json:"riskFreeRate"`
}

type PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequest struct {
	Request PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBody `request:"mediaType=application/json"`
}

type PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSONPortfolios struct {
	// portfolioSharpeRatioConfidenceInterval[0] (resp. portfolioSharpeRatioConfidenceInterval[1]) is the lower (resp. upper) bound of the built confidence interval, possibly equal to null in case of a negative infinite (resp. positive infinite) bound
	PortfolioSharpeRatioConfidenceInterval []float64 `json:"portfolioSharpeRatioConfidenceInterval"`
}

// PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSON - OK
type PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSON struct {
	Portfolios []PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSONPortfolios `json:"portfolios"`
}

type PostPortfolioAnalysisSharpeRatioConfidenceIntervalResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSONObject *PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSON
}
