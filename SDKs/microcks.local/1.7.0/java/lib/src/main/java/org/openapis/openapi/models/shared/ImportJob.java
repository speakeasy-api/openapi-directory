/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ImportJob - An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests
 */
public class ImportJob {
    /**
     * Whether this ImportJob is active (ie. scheduled for execution)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public ImportJob withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Creation date for this ImportJob
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;

    public ImportJob withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Etag of repository URL during previous import. Is used for not re-importing if no recent changes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public ImportJob withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Reserved for future usage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    public String frequency;

    public ImportJob withFrequency(String frequency) {
        this.frequency = frequency;
        return this;
    }
    
    /**
     * Unique identifier of ImportJob
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public ImportJob withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Date last import was done
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastImportDate")
    public OffsetDateTime lastImportDate;

    public ImportJob withLastImportDate(OffsetDateTime lastImportDate) {
        this.lastImportDate = lastImportDate;
        return this;
    }
    
    /**
     * Error message of last import (if any)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastImportError")
    public String lastImportError;

    public ImportJob withLastImportError(String lastImportError) {
        this.lastImportError = lastImportError;
        return this;
    }
    
    /**
     * Flag telling if considered as primary or secondary artifact. Default to `true`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mainArtifact")
    public Boolean mainArtifact;

    public ImportJob withMainArtifact(Boolean mainArtifact) {
        this.mainArtifact = mainArtifact;
        return this;
    }
    
    /**
     * Commodity object for holding metadata on any entity. This object is inspired by Kubernetes metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public Metadata metadata;

    public ImportJob withMetadata(Metadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Unique distinct name of this ImportJob
     */
    @JsonProperty("name")
    public String name;

    public ImportJob withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Whether to disable SSL certificate verification when checking repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repositoryDisableSSLValidation")
    public Boolean repositoryDisableSSLValidation;

    public ImportJob withRepositoryDisableSSLValidation(Boolean repositoryDisableSSLValidation) {
        this.repositoryDisableSSLValidation = repositoryDisableSSLValidation;
        return this;
    }
    
    /**
     * URL of mocks and tests repository artifact
     */
    @JsonProperty("repositoryUrl")
    public String repositoryUrl;

    public ImportJob withRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
        return this;
    }
    
    /**
     * Lightweight reference for an existing Secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretRef")
    public SecretRef secretRef;

    public ImportJob withSecretRef(SecretRef secretRef) {
        this.secretRef = secretRef;
        return this;
    }
    
    /**
     * References of Services discovered when checking repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceRefs")
    public ServiceRef[] serviceRefs;

    public ImportJob withServiceRefs(ServiceRef[] serviceRefs) {
        this.serviceRefs = serviceRefs;
        return this;
    }
    
    public ImportJob(@JsonProperty("name") String name, @JsonProperty("repositoryUrl") String repositoryUrl) {
        this.name = name;
        this.repositoryUrl = repositoryUrl;
  }
}
