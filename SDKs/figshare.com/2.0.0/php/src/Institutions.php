<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Institutions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Institution Curation Review
     * 
     * Retrieve a certain curation review by its ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationResponse
     */
	public function accountInstitutionCuration(
        \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/review/{curation_id}', \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->curationDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CurationDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Institution Curation Review Comments
     * 
     * Retrieve a certain curation review's comments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsResponse
     */
	public function accountInstitutionCurationComments(
        \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/review/{curation_id}/comments', \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->curationComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CurationComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Institution Curation Reviews
     * 
     * Retrieve a list of curation reviews for this institution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsResponse
     */
	public function accountInstitutionCurations(
        \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/reviews');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccountInstitutionCurationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->curation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Curation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private account institution group custom fields
     * 
     * Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListResponse
     */
	public function customFieldsList(
        \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/custom_fields');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomFieldsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomFieldsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shortCustomFields = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ShortCustomField>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Custom fields values files upload
     * 
     * Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href="#custom_fields">Custom Fields section</a>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadResponse
     */
	public function customFieldsUpload(
        \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/custom_fields/{custom_field_id}/items/upload', \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomFieldsUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsUpload200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Public Licenses
     * 
     * Returns a list of articles belonging to the institution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesResponse
     */
	public function institutionArticles(
        \OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/institutions/{institution_string_id}/articles/filter-by', \OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InstitutionArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Private Institution HRfeed Upload
     * 
     * More info in the <a href="#hr_feed">HR Feed section</a>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadResponse
     */
	public function institutionHrfeedUpload(
        \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/institution/hrfeed/upload');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InstitutionHrfeedUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * POST Institution Curation Review Comment
     * 
     * Add a new comment to the review.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsResponse
     */
	public function postAccountInstitutionReviewCurationIdComments(
        \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/review/{curation_id}/comments', \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "curationCommentCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAccountInstitutionReviewCurationIdCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution User
     * 
     * Retrieve institution user information using the account_id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserResponse
     */
	public function privateAccountInstitutionUser(
        \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/users/{account_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateAccountInstitutionUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Categories
     * 
     * List institution categories (including parent Categories)
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateCategoriesListResponse
     */
	public function privateCategoriesList(
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateCategoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/categories');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateCategoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Category>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution Group Embargo Options
     * 
     * Account institution group embargo options details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsResponse
     */
	public function privateGroupEmbargoOptionsDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/groups/{group_id}/embargo_options', \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateGroupEmbargoOptionsDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupEmbargoOptions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupEmbargoOptions>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Institution Account Group Role
     * 
     * Delete Institution Account Group Role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteResponse
     */
	public function privateInstitutionAccountGroupRoleDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/roles/{account_id}/{group_id}/{role_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRoleDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Institution Account Group Roles
     * 
     * List Institution Account Group Roles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesResponse
     */
	public function privateInstitutionAccountGroupRoles(
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/roles/{account_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountGroupRoles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add Institution Account Group Roles
     * 
     * Add Institution Account Group Roles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateResponse
     */
	public function privateInstitutionAccountGroupRolesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/roles/{account_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountGroupRolesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Institution Account
     * 
     * Create a new Account by sending account information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AccountCreate $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsCreateResponse
     */
	public function privateInstitutionAccountsCreate(
        \OpenAPI\OpenAPI\Models\Shared\AccountCreate $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/accounts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution Accounts
     * 
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListResponse
     */
	public function privateInstitutionAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shortAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ShortAccount>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution Accounts Search
     * 
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\InstitutionAccountsSearch $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsSearchResponse
     */
	public function privateInstitutionAccountsSearch(
        \OpenAPI\OpenAPI\Models\Shared\InstitutionAccountsSearch $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/accounts/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shortAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ShortAccount>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Institution Account
     * 
     * Update Institution Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateResponse
     */
	public function privateInstitutionAccountsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/accounts/{account_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionAccountsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Institution Articles
     * 
     * Get Articles from own institution. User must be administrator of the institution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesResponse
     */
	public function privateInstitutionArticles(
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/articles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institutions
     * 
     * Account institution details
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionDetailsResponse
     */
	public function privateInstitutionDetails(
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->institution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Institution', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution embargo options
     * 
     * Account institution embargo options details
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionEmbargoOptionsDetailsResponse
     */
	public function privateInstitutionEmbargoOptionsDetails(
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionEmbargoOptionsDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/embargo_options');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionEmbargoOptionsDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupEmbargoOptions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GroupEmbargoOptions>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution Groups
     * 
     * Returns the groups for which the account has administrative privileges (assigned and inherited).
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionGroupsListResponse
     */
	public function privateInstitutionGroupsList(
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/groups');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groups = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Group>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Account Institution Roles
     * 
     * Returns the roles available for groups and the institution group.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionRolesListResponse
     */
	public function privateInstitutionRolesList(
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionRolesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/institution/roles');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateInstitutionRolesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Role>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
}