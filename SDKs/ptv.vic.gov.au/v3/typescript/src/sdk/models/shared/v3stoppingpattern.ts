/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { V3Direction } from "./v3direction";
import { V3Disruption } from "./v3disruption";
import { V3PatternDeparture } from "./v3patterndeparture";
import { V3Run } from "./v3run";
import { V3Status } from "./v3status";
import { V3StoppingPatternStop } from "./v3stoppingpatternstop";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)
 */
export class V3StoppingPattern extends SpeakeasyBase {
  /**
   * Timetabled and real-time service departures
   */
  @SpeakeasyMetadata({ elemType: V3PatternDeparture })
  @Expose({ name: "departures" })
  @Type(() => V3PatternDeparture)
  departures?: V3PatternDeparture[];

  /**
   * Directions of travel of route
   */
  @SpeakeasyMetadata({ elemType: V3Direction })
  @Expose({ name: "directions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, V3Direction> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], V3Direction);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  directions?: Record<string, V3Direction>;

  /**
   * Disruption information applicable to relevant routes or stops
   */
  @SpeakeasyMetadata({ elemType: V3Disruption })
  @Expose({ name: "disruptions" })
  @Type(() => V3Disruption)
  disruptions?: V3Disruption[];

  /**
   * Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routes" })
  routes?: Record<string, Record<string, any>>;

  /**
   * Individual trips/services of a route
   */
  @SpeakeasyMetadata({ elemType: V3Run })
  @Expose({ name: "runs" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, V3Run> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], V3Run);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  runs?: Record<string, V3Run>;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => V3Status)
  status?: V3Status;

  /**
   * A train station, tram stop, bus stop, regional coach stop or Night Bus stop
   */
  @SpeakeasyMetadata({ elemType: V3StoppingPatternStop })
  @Expose({ name: "stops" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, V3StoppingPatternStop> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], V3StoppingPatternStop);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  stops?: Record<string, V3StoppingPatternStop>;
}
