"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Aggregated:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def aggregated_get_conversions_summary(self, request: operations.AggregatedGetConversionsSummaryRequest) -> operations.AggregatedGetConversionsSummaryResponse:
        r"""Retrieve statistics about a subset of conversions for a timeframe with conversions data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aggregated/summary/conversions'
        
        query_params = utils.get_query_params(operations.AggregatedGetConversionsSummaryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AggregatedGetConversionsSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def aggregated_get_datapoints_summary(self, request: operations.AggregatedGetDatapointsSummaryRequest) -> operations.AggregatedGetDatapointsSummaryResponse:
        r"""Retrieve statistics about a subset of datapoints for a timeframe with datapoints data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aggregated/summary/datapoints'
        
        query_params = utils.get_query_params(operations.AggregatedGetDatapointsSummaryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AggregatedGetDatapointsSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def aggregated_get_groups_summary(self, request: operations.AggregatedGetGroupsSummaryRequest) -> operations.AggregatedGetGroupsSummaryResponse:
        r"""Retrieve statistics about a subset of groups for a timeframe with groups data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aggregated/summary/groups'
        
        query_params = utils.get_query_params(operations.AggregatedGetGroupsSummaryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AggregatedGetGroupsSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def aggregated_get_statistics_list(self, request: operations.AggregatedGetStatisticsListRequest) -> operations.AggregatedGetStatisticsListResponse:
        r"""Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aggregated/list'
        
        query_params = utils.get_query_params(operations.AggregatedGetStatisticsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AggregatedGetStatisticsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def aggregated_get_statistics_single(self, request: operations.AggregatedGetStatisticsSingleRequest) -> operations.AggregatedGetStatisticsSingleResponse:
        r"""Retrieve statistics about this customer for a timeframe"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aggregated'
        
        query_params = utils.get_query_params(operations.AggregatedGetStatisticsSingleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AggregatedGetStatisticsSingleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    