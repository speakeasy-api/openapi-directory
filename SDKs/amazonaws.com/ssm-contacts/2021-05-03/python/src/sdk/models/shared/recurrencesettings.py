"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import coveragetime as shared_coveragetime
from ..shared import handofftime as shared_handofftime
from ..shared import monthlysetting as shared_monthlysetting
from ..shared import weeklysetting as shared_weeklysetting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecurrenceSettings:
    r"""Information about when an on-call rotation is in effect and how long the rotation period lasts."""
    
    number_of_on_calls: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfOnCalls') }})  
    recurrence_multiplier: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurrenceMultiplier') }})  
    daily_settings: Optional[list[shared_handofftime.HandOffTime]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DailySettings'), 'exclude': lambda f: f is None }})  
    monthly_settings: Optional[list[shared_monthlysetting.MonthlySetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonthlySettings'), 'exclude': lambda f: f is None }})  
    shift_coverages: Optional[dict[str, list[shared_coveragetime.CoverageTime]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShiftCoverages'), 'exclude': lambda f: f is None }})  
    weekly_settings: Optional[list[shared_weeklysetting.WeeklySetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WeeklySettings'), 'exclude': lambda f: f is None }})  
    