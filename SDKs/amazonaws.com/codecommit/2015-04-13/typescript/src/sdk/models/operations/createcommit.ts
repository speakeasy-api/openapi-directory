/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateCommitXAmzTargetEnum {
  CodeCommit20150413CreateCommit = "CodeCommit_20150413.CreateCommit",
}

export class CreateCommitRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createCommitInput: shared.CreateCommitInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateCommitXAmzTargetEnum;
}

export class CreateCommitResponse extends SpeakeasyBase {
  /**
   * BranchDoesNotExistException
   */
  @SpeakeasyMetadata()
  branchDoesNotExistException?: any;

  /**
   * BranchNameIsTagNameException
   */
  @SpeakeasyMetadata()
  branchNameIsTagNameException?: any;

  /**
   * BranchNameRequiredException
   */
  @SpeakeasyMetadata()
  branchNameRequiredException?: any;

  /**
   * CommitMessageLengthExceededException
   */
  @SpeakeasyMetadata()
  commitMessageLengthExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createCommitOutput?: shared.CreateCommitOutput;

  /**
   * DirectoryNameConflictsWithFileNameException
   */
  @SpeakeasyMetadata()
  directoryNameConflictsWithFileNameException?: any;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * FileContentAndSourceFileSpecifiedException
   */
  @SpeakeasyMetadata()
  fileContentAndSourceFileSpecifiedException?: any;

  /**
   * FileContentSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  fileContentSizeLimitExceededException?: any;

  /**
   * FileDoesNotExistException
   */
  @SpeakeasyMetadata()
  fileDoesNotExistException?: any;

  /**
   * FileEntryRequiredException
   */
  @SpeakeasyMetadata()
  fileEntryRequiredException?: any;

  /**
   * FileModeRequiredException
   */
  @SpeakeasyMetadata()
  fileModeRequiredException?: any;

  /**
   * FileNameConflictsWithDirectoryNameException
   */
  @SpeakeasyMetadata()
  fileNameConflictsWithDirectoryNameException?: any;

  /**
   * FilePathConflictsWithSubmodulePathException
   */
  @SpeakeasyMetadata()
  filePathConflictsWithSubmodulePathException?: any;

  /**
   * FolderContentSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  folderContentSizeLimitExceededException?: any;

  /**
   * InvalidBranchNameException
   */
  @SpeakeasyMetadata()
  invalidBranchNameException?: any;

  /**
   * InvalidDeletionParameterException
   */
  @SpeakeasyMetadata()
  invalidDeletionParameterException?: any;

  /**
   * InvalidEmailException
   */
  @SpeakeasyMetadata()
  invalidEmailException?: any;

  /**
   * InvalidFileModeException
   */
  @SpeakeasyMetadata()
  invalidFileModeException?: any;

  /**
   * InvalidParentCommitIdException
   */
  @SpeakeasyMetadata()
  invalidParentCommitIdException?: any;

  /**
   * InvalidPathException
   */
  @SpeakeasyMetadata()
  invalidPathException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * MaximumFileEntriesExceededException
   */
  @SpeakeasyMetadata()
  maximumFileEntriesExceededException?: any;

  /**
   * NameLengthExceededException
   */
  @SpeakeasyMetadata()
  nameLengthExceededException?: any;

  /**
   * NoChangeException
   */
  @SpeakeasyMetadata()
  noChangeException?: any;

  /**
   * ParentCommitDoesNotExistException
   */
  @SpeakeasyMetadata()
  parentCommitDoesNotExistException?: any;

  /**
   * ParentCommitIdOutdatedException
   */
  @SpeakeasyMetadata()
  parentCommitIdOutdatedException?: any;

  /**
   * ParentCommitIdRequiredException
   */
  @SpeakeasyMetadata()
  parentCommitIdRequiredException?: any;

  /**
   * PathRequiredException
   */
  @SpeakeasyMetadata()
  pathRequiredException?: any;

  /**
   * PutFileEntryConflictException
   */
  @SpeakeasyMetadata()
  putFileEntryConflictException?: any;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  /**
   * RestrictedSourceFileException
   */
  @SpeakeasyMetadata()
  restrictedSourceFileException?: any;

  /**
   * SamePathRequestException
   */
  @SpeakeasyMetadata()
  samePathRequestException?: any;

  /**
   * SourceFileOrContentRequiredException
   */
  @SpeakeasyMetadata()
  sourceFileOrContentRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
