"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TaxRatesByIPAddressRequest:
    
    domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'domain', 'style': 'form', 'explode': True }})
    r"""Domain name: api.taxrates.io"""  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""For US sales tax you can filter the tax type"""  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ip', 'style': 'form', 'explode': True }})
    r"""Customer's IP address"""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'product_code', 'style': 'form', 'explode': True }})
    r"""Your can filter your taxes by product code"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""For US sales tax a Zipcode must be proivded"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxRatesByIPAddress500ApplicationJSON:
    r"""Unexpected error"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxRatesByIPAddress200ApplicationJSONTaxes:
    
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})  
    data_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_name'), 'exclude': lambda f: f is None }})  
    data_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_value'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxRatesByIPAddress200ApplicationJSON:
    
    country_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_name'), 'exclude': lambda f: f is None }})  
    taxes: Optional[list[TaxRatesByIPAddress200ApplicationJSONTaxes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxes'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class TaxRatesByIPAddressResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tax_rates_by_ip_address_200_application_json_objects: Optional[list[TaxRatesByIPAddress200ApplicationJSON]] = dataclasses.field(default=None)
    r"""An array of tax rates for VAT, GST & TAX"""  
    tax_rates_by_ip_address_500_application_json_object: Optional[TaxRatesByIPAddress500ApplicationJSON] = dataclasses.field(default=None)
    r"""Unexpected error"""  
    