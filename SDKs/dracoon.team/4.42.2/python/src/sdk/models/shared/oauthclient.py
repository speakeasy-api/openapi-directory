"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OAuthClientClientTypeEnum(str, Enum):
    r"""Determines whether client is a confidential or public client."""
    CONFIDENTIAL = 'confidential'
    PUBLIC = 'public'

class OAuthClientGrantTypesEnum(str, Enum):
    r"""Authorized grant types
    
    * `authorization_code`
    
    * `implicit`
    
    * `password`
    
    * `client_credentials`
    
    * `refresh_token`
    
    
    
    cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
    """
    AUTHORIZATION_CODE = 'authorization_code'
    CLIENT_CREDENTIALS = 'client_credentials'
    IMPLICIT = 'implicit'
    PASSWORD = 'password'
    REFRESH_TOKEN = 'refresh_token'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OAuthClient:
    r"""OAuth client information"""
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId') }})
    r"""ID of the OAuth client"""  
    grant_types: OAuthClientGrantTypesEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantTypes') }})
    r"""Authorized grant types
    
    * `authorization_code`
    
    * `implicit`
    
    * `password`
    
    * `client_credentials`
    
    * `refresh_token`
    
    
    
    cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
    """  
    access_token_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessTokenValidity'), 'exclude': lambda f: f is None }})
    r"""Validity of the access token in seconds."""  
    approval_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approvalValidity'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Validity of the approval interval in seconds.
    """  
    client_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientName'), 'exclude': lambda f: f is None }})
    r"""Name, which is shown at the client configuration and authorization."""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret'), 'exclude': lambda f: f is None }})
    r"""Secret, which client uses at authentication."""  
    client_type: Optional[OAuthClientClientTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientType'), 'exclude': lambda f: f is None }})
    r"""Determines whether client is a confidential or public client."""  
    is_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines whether client is enabled."""  
    is_external: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isExternal'), 'exclude': lambda f: f is None }})
    r"""Determines whether client is an external client."""  
    is_standard: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isStandard'), 'exclude': lambda f: f is None }})
    r"""Determines whether client is a standard client."""  
    redirect_uris: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectUris'), 'exclude': lambda f: f is None }})
    r"""URIs, to which a user is redirected after authorization."""  
    refresh_token_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshTokenValidity'), 'exclude': lambda f: f is None }})
    r"""Validity of the refresh token in seconds."""  
    