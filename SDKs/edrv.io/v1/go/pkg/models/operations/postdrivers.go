// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostDriversRequestBodyAddress struct {
	City            *string `json:"city,omitempty"`
	Country         *string `json:"country,omitempty"`
	PostalCode      *string `json:"postalCode,omitempty"`
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
}

type PostDriversRequestBodyPhone struct {
	Home   *string `json:"home,omitempty"`
	Mobile *string `json:"mobile,omitempty"`
	Work   *string `json:"work,omitempty"`
}

type PostDriversRequestBodySourceEnum string

const (
	PostDriversRequestBodySourceEnumPhysical PostDriversRequestBodySourceEnum = "physical"
	PostDriversRequestBodySourceEnumSlack    PostDriversRequestBodySourceEnum = "slack"
	PostDriversRequestBodySourceEnumTelegram PostDriversRequestBodySourceEnum = "telegram"
	PostDriversRequestBodySourceEnumSms      PostDriversRequestBodySourceEnum = "sms"
)

func (e *PostDriversRequestBodySourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "physical":
		fallthrough
	case "slack":
		fallthrough
	case "telegram":
		fallthrough
	case "sms":
		*e = PostDriversRequestBodySourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostDriversRequestBodySourceEnum: %s", s)
	}
}

// PostDriversRequestBody - Include driver properties to create here
type PostDriversRequestBody struct {
	Active    *bool                            `json:"active,omitempty"`
	Address   *PostDriversRequestBodyAddress   `json:"address,omitempty"`
	Email     *string                          `json:"email,omitempty"`
	Firstname string                           `json:"firstname"`
	Lastname  string                           `json:"lastname"`
	Phone     *PostDriversRequestBodyPhone     `json:"phone,omitempty"`
	Source    PostDriversRequestBodySourceEnum `json:"source"`
}

type PostDriversRequest struct {
	// Include driver properties to create here
	Request PostDriversRequestBody `request:"mediaType=application/json"`
}

// PostDrivers200ApplicationJSON - Returns the newly created driver object
type PostDrivers200ApplicationJSON struct {
	Message *string                `json:"message,omitempty"`
	Ok      *bool                  `json:"ok,omitempty"`
	Result  map[string]interface{} `json:"result,omitempty"`
}

type PostDriversResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returns the newly created driver object
	PostDrivers200ApplicationJSONObject *PostDrivers200ApplicationJSON
}
