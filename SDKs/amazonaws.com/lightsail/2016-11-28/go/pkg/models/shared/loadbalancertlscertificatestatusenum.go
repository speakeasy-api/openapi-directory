// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LoadBalancerTLSCertificateStatusEnum string

const (
	LoadBalancerTLSCertificateStatusEnumPendingValidation  LoadBalancerTLSCertificateStatusEnum = "PENDING_VALIDATION"
	LoadBalancerTLSCertificateStatusEnumIssued             LoadBalancerTLSCertificateStatusEnum = "ISSUED"
	LoadBalancerTLSCertificateStatusEnumInactive           LoadBalancerTLSCertificateStatusEnum = "INACTIVE"
	LoadBalancerTLSCertificateStatusEnumExpired            LoadBalancerTLSCertificateStatusEnum = "EXPIRED"
	LoadBalancerTLSCertificateStatusEnumValidationTimedOut LoadBalancerTLSCertificateStatusEnum = "VALIDATION_TIMED_OUT"
	LoadBalancerTLSCertificateStatusEnumRevoked            LoadBalancerTLSCertificateStatusEnum = "REVOKED"
	LoadBalancerTLSCertificateStatusEnumFailed             LoadBalancerTLSCertificateStatusEnum = "FAILED"
	LoadBalancerTLSCertificateStatusEnumUnknown            LoadBalancerTLSCertificateStatusEnum = "UNKNOWN"
)

func (e LoadBalancerTLSCertificateStatusEnum) ToPointer() *LoadBalancerTLSCertificateStatusEnum {
	return &e
}

func (e *LoadBalancerTLSCertificateStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING_VALIDATION":
		fallthrough
	case "ISSUED":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "EXPIRED":
		fallthrough
	case "VALIDATION_TIMED_OUT":
		fallthrough
	case "REVOKED":
		fallthrough
	case "FAILED":
		fallthrough
	case "UNKNOWN":
		*e = LoadBalancerTLSCertificateStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoadBalancerTLSCertificateStatusEnum: %v", v)
	}
}
