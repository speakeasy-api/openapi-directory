"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudretailv2betaexperimentinfo as shared_googlecloudretailv2betaexperimentinfo
from ..shared import googlecloudretailv2betasearchrequestboostspecconditionboostspec as shared_googlecloudretailv2betasearchrequestboostspecconditionboostspec
from ..shared import googlecloudretailv2betasearchresponsefacet as shared_googlecloudretailv2betasearchresponsefacet
from ..shared import googlecloudretailv2betasearchresponsequeryexpansioninfo as shared_googlecloudretailv2betasearchresponsequeryexpansioninfo
from ..shared import googlecloudretailv2betasearchresponsesearchresult as shared_googlecloudretailv2betasearchresponsesearchresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRetailV2betaSearchResponse:
    r"""Response message for SearchService.Search method."""
    
    applied_controls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedControls'), 'exclude': lambda f: f is None }})
    r"""The fully qualified resource name of applied [controls](https://cloud.google.com/retail/docs/serving-control-rules)."""  
    attribution_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributionToken'), 'exclude': lambda f: f is None }})
    r"""A unique search token. This should be included in the UserEvent logs resulting from this search, which enables accurate attribution of search model performance."""  
    corrected_query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correctedQuery'), 'exclude': lambda f: f is None }})
    r"""Contains the spell corrected query, if found. If the spell correction type is AUTOMATIC, then the search results are based on corrected_query. Otherwise the original query is used for search."""  
    experiment_info: Optional[list[shared_googlecloudretailv2betaexperimentinfo.GoogleCloudRetailV2betaExperimentInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('experimentInfo'), 'exclude': lambda f: f is None }})
    r"""Metadata related to A/B testing Experiment associated with this response. Only exists when an experiment is triggered."""  
    facets: Optional[list[shared_googlecloudretailv2betasearchresponsefacet.GoogleCloudRetailV2betaSearchResponseFacet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facets'), 'exclude': lambda f: f is None }})
    r"""Results of facets requested by user."""  
    invalid_condition_boost_specs: Optional[list[shared_googlecloudretailv2betasearchrequestboostspecconditionboostspec.GoogleCloudRetailV2betaSearchRequestBoostSpecConditionBoostSpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidConditionBoostSpecs'), 'exclude': lambda f: f is None }})
    r"""The invalid SearchRequest.BoostSpec.condition_boost_specs that are not applied during serving."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPageToken'), 'exclude': lambda f: f is None }})
    r"""A token that can be sent as SearchRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages."""  
    query_expansion_info: Optional[shared_googlecloudretailv2betasearchresponsequeryexpansioninfo.GoogleCloudRetailV2betaSearchResponseQueryExpansionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryExpansionInfo'), 'exclude': lambda f: f is None }})
    r"""Information describing query expansion including whether expansion has occurred."""  
    redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectUri'), 'exclude': lambda f: f is None }})
    r"""The URI of a customer-defined redirect page. If redirect action is triggered, no search is performed, and only redirect_uri and attribution_token are set in the response."""  
    results: Optional[list[shared_googlecloudretailv2betasearchresponsesearchresult.GoogleCloudRetailV2betaSearchResponseSearchResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""A list of matched items. The order represents the ranking."""  
    total_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSize'), 'exclude': lambda f: f is None }})
    r"""The estimated total count of matched items irrespective of pagination. The count of results returned by pagination may be less than the total_size that matches."""  
    