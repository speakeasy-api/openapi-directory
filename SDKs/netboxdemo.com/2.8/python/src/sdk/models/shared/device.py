"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nestedcluster as shared_nestedcluster
from ..shared import nesteddevice as shared_nesteddevice
from ..shared import nesteddevicerole as shared_nesteddevicerole
from ..shared import nesteddevicetype as shared_nesteddevicetype
from ..shared import nestedipaddress as shared_nestedipaddress
from ..shared import nestedplatform as shared_nestedplatform
from ..shared import nestedrack as shared_nestedrack
from ..shared import nestedsite as shared_nestedsite
from ..shared import nestedtenant as shared_nestedtenant
from ..shared import nestedvirtualchassis as shared_nestedvirtualchassis
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class DeviceFaceLabelEnum(str, Enum):
    FRONT = 'Front'
    REAR = 'Rear'

class DeviceFaceValueEnum(str, Enum):
    FRONT = 'front'
    REAR = 'rear'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeviceFace:
    
    label: DeviceFaceLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: DeviceFaceValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class DeviceStatusLabelEnum(str, Enum):
    OFFLINE = 'Offline'
    ACTIVE = 'Active'
    PLANNED = 'Planned'
    STAGED = 'Staged'
    FAILED = 'Failed'
    INVENTORY = 'Inventory'
    DECOMMISSIONING = 'Decommissioning'

class DeviceStatusValueEnum(str, Enum):
    OFFLINE = 'offline'
    ACTIVE = 'active'
    PLANNED = 'planned'
    STAGED = 'staged'
    FAILED = 'failed'
    INVENTORY = 'inventory'
    DECOMMISSIONING = 'decommissioning'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeviceStatus:
    
    label: DeviceStatusLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: DeviceStatusValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Device:
    
    device_role: shared_nesteddevicerole.NestedDeviceRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_role') }})  
    device_type: shared_nesteddevicetype.NestedDeviceType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type') }})  
    site: shared_nestedsite.NestedSite = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site') }})  
    asset_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asset_tag'), 'exclude': lambda f: f is None }})
    r"""A unique tag used to identify this device"""  
    cluster: Optional[shared_nestedcluster.NestedCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cluster'), 'exclude': lambda f: f is None }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    created: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})  
    face: Optional[DeviceFace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('face'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    local_context_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local_context_data'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    parent_device: Optional[shared_nesteddevice.NestedDevice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_device'), 'exclude': lambda f: f is None }})  
    platform: Optional[shared_nestedplatform.NestedPlatform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})  
    position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""The lowest-numbered unit occupied by the device"""  
    primary_ip: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip'), 'exclude': lambda f: f is None }})  
    primary_ip4: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip4'), 'exclude': lambda f: f is None }})  
    primary_ip6: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip6'), 'exclude': lambda f: f is None }})  
    rack: Optional[shared_nestedrack.NestedRack] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rack'), 'exclude': lambda f: f is None }})  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})  
    status: Optional[DeviceStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tenant: Optional[shared_nestedtenant.NestedTenant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})  
    vc_position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vc_position'), 'exclude': lambda f: f is None }})  
    vc_priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vc_priority'), 'exclude': lambda f: f is None }})  
    virtual_chassis: Optional[shared_nestedvirtualchassis.NestedVirtualChassis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtual_chassis'), 'exclude': lambda f: f is None }})  
    