// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SchedulePlayParametersLegsEnum - Call leg(s) for which the media will be played; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
type SchedulePlayParametersLegsEnum string

const (
	SchedulePlayParametersLegsEnumAleg SchedulePlayParametersLegsEnum = "aleg"
	SchedulePlayParametersLegsEnumBleg SchedulePlayParametersLegsEnum = "bleg"
	SchedulePlayParametersLegsEnumBoth SchedulePlayParametersLegsEnum = "both"
)

func (e SchedulePlayParametersLegsEnum) ToPointer() *SchedulePlayParametersLegsEnum {
	return &e
}

func (e *SchedulePlayParametersLegsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aleg":
		fallthrough
	case "bleg":
		fallthrough
	case "both":
		*e = SchedulePlayParametersLegsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchedulePlayParametersLegsEnum: %v", v)
	}
}

// SchedulePlayParameters - POST parameters
type SchedulePlayParameters struct {
	// Unique identifier of the call to play media into
	CallUUID string `form:"name=CallUUID"`
	// Call leg(s) for which the media will be played; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
	Legs *SchedulePlayParametersLegsEnum `form:"name=Legs"`
	// Maximum amount of time (in seconds) to playback the media
	Length *int64 `form:"name=Length"`
	// Loops the media file(s) indefinitely
	Loop *bool `form:"name=Loop"`
	// Whether the media should be mixed with the call's audio stream
	Mix *bool `form:"name=Mix"`
	// Comma separated list of file paths/URIs to be played
	Sounds string `form:"name=Sounds"`
	// Time (in seconds) after which the media will be playedback
	Time int64 `form:"name=Time"`
}
