/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GeneratePresignedPutRequestBodyMetadata extends SpeakeasyBase {
  /**
   * The SHA1 checksum of the upload binary blob. Optionally
   *
   * @remarks
   * be provided and serves as an additional security check when
   * later processing the file in complete-external-upload endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sha1-checksum" })
  sha1Checksum?: string;
}

export enum GeneratePresignedPutRequestBodyTypeEnum {
  Avatar = "avatar",
  ProfileBackground = "profile_background",
  CardBackground = "card_background",
  CustomEmoji = "custom_emoji",
  Composer = "composer",
}

export class GeneratePresignedPutRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "file_name" })
  fileName: string;

  /**
   * File size should be represented in bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_size" })
  fileSize: number;

  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => GeneratePresignedPutRequestBodyMetadata)
  metadata?: GeneratePresignedPutRequestBodyMetadata;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GeneratePresignedPutRequestBodyTypeEnum;
}

/**
 * external upload initialized
 */
export class GeneratePresignedPut200ApplicationJSON extends SpeakeasyBase {
  /**
   * The path of the temporary file on the external storage
   *
   * @remarks
   * service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * A unique string that identifies the external upload.
   *
   * @remarks
   * This must be stored and then sent in the /complete-external-upload
   * endpoint to complete the direct upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unique_identifier" })
  uniqueIdentifier?: string;

  /**
   * A presigned PUT URL which must be used to upload
   *
   * @remarks
   * the file binary blob to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GeneratePresignedPutResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * external upload initialized
   */
  @SpeakeasyMetadata()
  generatePresignedPut200ApplicationJSONObject?: GeneratePresignedPut200ApplicationJSON;
}
