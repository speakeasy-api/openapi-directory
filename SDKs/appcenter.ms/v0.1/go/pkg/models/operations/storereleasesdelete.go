// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoreReleasesDeleteSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type StoreReleasesDeleteRequest struct {
	RequestBody *string `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The id of the release
	ReleaseID string `pathParam:"style=simple,explode=false,name=release_id"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoreReleasesDeleteDefaultApplicationJSONCodeEnum string

const (
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumBadRequest          StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumConflict            StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "Conflict"
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumNotAcceptable       StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumNotFound            StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "NotFound"
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumInternalServerError StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumUnauthorized        StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreReleasesDeleteDefaultApplicationJSONCodeEnumTooManyRequests     StoreReleasesDeleteDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e StoreReleasesDeleteDefaultApplicationJSONCodeEnum) ToPointer() *StoreReleasesDeleteDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *StoreReleasesDeleteDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreReleasesDeleteDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesDeleteDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// StoreReleasesDeleteDefaultApplicationJSON - Error
type StoreReleasesDeleteDefaultApplicationJSON struct {
	Code    StoreReleasesDeleteDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

type StoreReleasesDeleteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	StoreReleasesDeleteDefaultApplicationJSONObject *StoreReleasesDeleteDefaultApplicationJSON
}
