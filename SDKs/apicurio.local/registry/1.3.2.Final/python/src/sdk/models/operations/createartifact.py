"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import artifactmetadata as shared_artifactmetadata
from ..shared import error as shared_error
from enum import Enum
from typing import Optional

class CreateArtifactXRegistryArtifactTypeEnum(str, Enum):
    r"""Specifies the type of the artifact being added. Possible values include:
    
    * Avro (`AVRO`)
    * Protobuf (`PROTOBUF`)
    * Protobuf File Descriptor (`PROTOBUF_FD`)
    * JSON Schema (`JSON`)
    * Kafka Connect (`KCONNECT`)
    * OpenAPI (`OPENAPI`)
    * AsyncAPI (`ASYNCAPI`)
    * GraphQL (`GRAPHQL`)
    * Web Services Description Language (`WSDL`)
    * XML Schema (`XSD`)
    """
    AVRO = 'AVRO'
    PROTOBUF = 'PROTOBUF'
    PROTOBUF_FD = 'PROTOBUF_FD'
    JSON = 'JSON'
    OPENAPI = 'OPENAPI'
    ASYNCAPI = 'ASYNCAPI'
    GRAPHQL = 'GRAPHQL'
    KCONNECT = 'KCONNECT'
    WSDL = 'WSDL'
    XSD = 'XSD'
    XML = 'XML'

class CreateArtifactIfExistsEnum(str, Enum):
    r"""Set this option to instruct the server on what to do if the artifact already exists."""
    FAIL = 'FAIL'
    UPDATE = 'UPDATE'
    RETURN = 'RETURN'
    RETURN_OR_UPDATE = 'RETURN_OR_UPDATE'


@dataclasses.dataclass
class CreateArtifactRequest:
    
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': '*/*' }})
    r"""The content of the artifact being created. This is often, but not always, JSON data
    representing one of the supported artifact types:
    
    * Avro (`AVRO`)
    * Protobuf (`PROTOBUF`)
    * Protobuf File Descriptor (`PROTOBUF_FD`)
    * JSON Schema (`JSON`)
    * Kafka Connect (`KCONNECT`)
    * OpenAPI (`OPENAPI`)
    * AsyncAPI (`ASYNCAPI`)
    * GraphQL (`GRAPHQL`)
    * Web Services Description Language (`WSDL`)
    * XML Schema (`XSD`)
    """  
    if_exists: Optional[CreateArtifactIfExistsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ifExists', 'style': 'form', 'explode': True }})
    r"""Set this option to instruct the server on what to do if the artifact already exists."""  
    x_registry_artifact_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-ArtifactId', 'style': 'simple', 'explode': False }})
    r"""A client-provided, globally unique identifier for the new artifact."""  
    x_registry_artifact_type: Optional[CreateArtifactXRegistryArtifactTypeEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Registry-ArtifactType', 'style': 'simple', 'explode': False }})
    r"""Specifies the type of the artifact being added. Possible values include:
    
    * Avro (`AVRO`)
    * Protobuf (`PROTOBUF`)
    * Protobuf File Descriptor (`PROTOBUF_FD`)
    * JSON Schema (`JSON`)
    * Kafka Connect (`KCONNECT`)
    * OpenAPI (`OPENAPI`)
    * AsyncAPI (`ASYNCAPI`)
    * GraphQL (`GRAPHQL`)
    * Web Services Description Language (`WSDL`)
    * XML Schema (`XSD`)
    """  
    

@dataclasses.dataclass
class CreateArtifactResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    artifact_meta_data: Optional[shared_artifactmetadata.ArtifactMetaData] = dataclasses.field(default=None)
    r"""Artifact was successfully created."""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Common response for all operations that can return a `400` error."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    