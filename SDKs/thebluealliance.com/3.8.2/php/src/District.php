<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class District 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a list of events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse
     */
	public function getDistrictEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of event keys for events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse
     */
	public function getDistrictEventsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events/keys', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDistrictEventsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse
     */
	public function getDistrictEventsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events/simple', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of team district rankings for the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse
     */
	public function getDistrictRankings(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/rankings', \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtRankings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DistrictRanking>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse
     */
	public function getDistrictTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse
     */
	public function getDistrictTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams/keys', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDistrictTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse
     */
	public function getDistrictTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams/simple', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of districts and their corresponding district key, for the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearResponse
     */
	public function getDistrictsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/districts/{year}', \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtLists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DistrictList>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of team rankings for the Event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsResponse
     */
	public function getEventDistrictPoints(
        \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/district_points', \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventDistrictPointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventDistrictPoints = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventDistrictPoints', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsResponse
     */
	public function getTeamDistricts(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/districts', \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtLists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DistrictList>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}