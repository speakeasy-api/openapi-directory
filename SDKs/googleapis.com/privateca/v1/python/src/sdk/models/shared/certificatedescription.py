"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificatefingerprint as shared_certificatefingerprint
from ..shared import keyid as shared_keyid
from ..shared import publickey as shared_publickey
from ..shared import subjectdescription as shared_subjectdescription
from ..shared import x509parameters as shared_x509parameters
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateDescription:
    r"""A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509."""
    
    aia_issuing_certificate_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aiaIssuingCertificateUrls'), 'exclude': lambda f: f is None }})
    r"""Describes lists of issuer CA certificate URLs that appear in the \\"Authority Information Access\\" extension in the certificate."""  
    authority_key_id: Optional[shared_keyid.KeyID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorityKeyId'), 'exclude': lambda f: f is None }})
    r"""A KeyId identifies a specific public key, usually by hashing the public key."""  
    cert_fingerprint: Optional[shared_certificatefingerprint.CertificateFingerprint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certFingerprint'), 'exclude': lambda f: f is None }})
    r"""A group of fingerprints for the x509 certificate."""  
    crl_distribution_points: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crlDistributionPoints'), 'exclude': lambda f: f is None }})
    r"""Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13"""  
    public_key: Optional[shared_publickey.PublicKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicKey'), 'exclude': lambda f: f is None }})
    r"""A PublicKey describes a public key."""  
    subject_description: Optional[shared_subjectdescription.SubjectDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectDescription'), 'exclude': lambda f: f is None }})
    r"""These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime."""  
    subject_key_id: Optional[shared_keyid.KeyID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectKeyId'), 'exclude': lambda f: f is None }})
    r"""A KeyId identifies a specific public key, usually by hashing the public key."""  
    x509_description: Optional[shared_x509parameters.X509Parameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x509Description'), 'exclude': lambda f: f is None }})
    r"""An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions."""  
    