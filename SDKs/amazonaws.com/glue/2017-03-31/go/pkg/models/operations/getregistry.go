// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetRegistryXAmzTargetEnum
type GetRegistryXAmzTargetEnum string

const (
	GetRegistryXAmzTargetEnumAwsGlueGetRegistry GetRegistryXAmzTargetEnum = "AWSGlue.GetRegistry"
)

func (e GetRegistryXAmzTargetEnum) ToPointer() *GetRegistryXAmzTargetEnum {
	return &e
}

func (e *GetRegistryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.GetRegistry":
		*e = GetRegistryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRegistryXAmzTargetEnum: %v", v)
	}
}

type GetRegistryRequest struct {
	GetRegistryInput  shared.GetRegistryInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetRegistryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetRegistryResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// Success
	GetRegistryResponse *shared.GetRegistryResponse
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
}
