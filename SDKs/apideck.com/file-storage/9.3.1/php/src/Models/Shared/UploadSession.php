<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class UploadSession
{
	#[\JMS\Serializer\Annotation\SerializedName('expires_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $expiresAt = null;
    
    /**
     * A unique identifier for an object.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Indicates if parts of the file can uploaded in parallel.
     * 
     * @var ?bool $parallelUploadSupported
     */
	#[\JMS\Serializer\Annotation\SerializedName('parallel_upload_supported')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $parallelUploadSupported = null;
    
    /**
     * Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
     * 
     * @var ?float $partSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('part_size')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $partSize = null;
    
    /**
     * Indicates if the upload session was completed successfully.
     * 
     * @var ?bool $success
     */
	#[\JMS\Serializer\Annotation\SerializedName('success')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $success = null;
    
    /**
     * The range of bytes that was successfully uploaded.
     * 
     * @var ?string $uploadedByteRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('uploaded_byte_range')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uploadedByteRange = null;
    
	public function __construct()
	{
		$this->expiresAt = null;
		$this->id = null;
		$this->parallelUploadSupported = null;
		$this->partSize = null;
		$this->success = null;
		$this->uploadedByteRange = null;
	}
}
