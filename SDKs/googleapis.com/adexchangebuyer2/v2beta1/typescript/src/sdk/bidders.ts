/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Bidders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists all metrics that are measured in terms of number of bids.
   */
  adexchangebuyer2BiddersFilterSetsBidMetricsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/bidMetrics",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBidMetricsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListBidMetricsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all errors that occurred in bid responses, with the number of bid responses affected for each reason.
   */
  adexchangebuyer2BiddersFilterSetsBidResponseErrorsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/bidResponseErrors",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBidResponseErrorsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListBidResponseErrorsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.
   */
  adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/bidResponsesWithoutBids",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBidResponsesWithoutBidsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListBidResponsesWithoutBidsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates the specified filter set for the account with the given account ID.
   */
  adexchangebuyer2BiddersFilterSetsCreate(
    req: operations.Adexchangebuyer2BiddersFilterSetsCreateRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Adexchangebuyer2BiddersFilterSetsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{ownerName}/filterSets",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "filterSet",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Adexchangebuyer2BiddersFilterSetsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsCreateResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filterSet = utils.objectToClass(
              httpRes?.data,
              shared.FilterSet
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the requested filter set from the account with the given account ID.
   */
  adexchangebuyer2BiddersFilterSetsDelete(
    req: operations.Adexchangebuyer2BiddersFilterSetsDeleteRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Adexchangebuyer2BiddersFilterSetsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Adexchangebuyer2BiddersFilterSetsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsDeleteResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.
   */
  adexchangebuyer2BiddersFilterSetsFilteredBidRequestsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/filteredBidRequests",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFilteredBidRequestsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFilteredBidRequestsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.
   */
  adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesList(
    req: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCreativeStatusBreakdownByCreativeResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.ListCreativeStatusBreakdownByCreativeResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.
   */
  adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCreativeStatusBreakdownByDetailResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.ListCreativeStatusBreakdownByDetailResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all reasons for which bids were filtered, with the number of bids filtered for each reason.
   */
  adexchangebuyer2BiddersFilterSetsFilteredBidsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/filteredBids",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFilteredBidsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFilteredBidsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the requested filter set for the account with the given account ID.
   */
  adexchangebuyer2BiddersFilterSetsGet(
    req: operations.Adexchangebuyer2BiddersFilterSetsGetRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Adexchangebuyer2BiddersFilterSetsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Adexchangebuyer2BiddersFilterSetsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsGetResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filterSet = utils.objectToClass(
              httpRes?.data,
              shared.FilterSet
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all metrics that are measured in terms of number of impressions.
   */
  adexchangebuyer2BiddersFilterSetsImpressionMetricsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/impressionMetrics",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listImpressionMetricsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListImpressionMetricsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all filter sets for the account with the given account ID.
   */
  adexchangebuyer2BiddersFilterSetsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Adexchangebuyer2BiddersFilterSetsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{ownerName}/filterSets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Adexchangebuyer2BiddersFilterSetsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFilterSetsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFilterSetsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.
   */
  adexchangebuyer2BiddersFilterSetsLosingBidsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/losingBids",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLosingBidsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLosingBidsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.
   */
  adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsList(
    req: operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest,
    security: operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2beta1/{filterSetName}/nonBillableWinningBids",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse =
        new operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listNonBillableWinningBidsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListNonBillableWinningBidsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
