"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import endpointmetadata as shared_endpointmetadata
from ..shared import inferenceexperimentdatastorageconfig as shared_inferenceexperimentdatastorageconfig
from ..shared import inferenceexperimentschedule as shared_inferenceexperimentschedule
from ..shared import inferenceexperimentstatus_enum as shared_inferenceexperimentstatus_enum
from ..shared import inferenceexperimenttype_enum as shared_inferenceexperimenttype_enum
from ..shared import modelvariantconfigsummary as shared_modelvariantconfigsummary
from ..shared import shadowmodeconfig as shared_shadowmodeconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeInferenceExperimentResponse:
    r"""Success"""
    
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn') }})  
    endpoint_metadata: shared_endpointmetadata.EndpointMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointMetadata') }})  
    model_variants: list[shared_modelvariantconfigsummary.ModelVariantConfigSummary] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelVariants') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    status: shared_inferenceexperimentstatus_enum.InferenceExperimentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})  
    type: shared_inferenceexperimenttype_enum.InferenceExperimentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    completion_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    data_storage_config: Optional[shared_inferenceexperimentdatastorageconfig.InferenceExperimentDataStorageConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataStorageConfig'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    kms_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKey'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    schedule: Optional[shared_inferenceexperimentschedule.InferenceExperimentSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedule'), 'exclude': lambda f: f is None }})  
    shadow_mode_config: Optional[shared_shadowmodeconfig.ShadowModeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShadowModeConfig'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusReason'), 'exclude': lambda f: f is None }})  
    