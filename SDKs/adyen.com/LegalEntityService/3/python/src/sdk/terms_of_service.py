"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TermsOfService:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_legal_entities_id_terms_of_service_acceptance_infos(self, request: operations.GetLegalEntitiesIDTermsOfServiceAcceptanceInfosRequest, security: operations.GetLegalEntitiesIDTermsOfServiceAcceptanceInfosSecurity) -> operations.GetLegalEntitiesIDTermsOfServiceAcceptanceInfosResponse:
        r"""Get Terms of Service information for a legal entity
        Returns Terms of Service information for a legal entity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLegalEntitiesIDTermsOfServiceAcceptanceInfosRequest, base_url, '/legalEntities/{id}/termsOfServiceAcceptanceInfos', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLegalEntitiesIDTermsOfServiceAcceptanceInfosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTermsOfServiceAcceptanceInfosResponse])
                res.get_terms_of_service_acceptance_infos_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_legal_entities_id_terms_of_service_status(self, request: operations.GetLegalEntitiesIDTermsOfServiceStatusRequest, security: operations.GetLegalEntitiesIDTermsOfServiceStatusSecurity) -> operations.GetLegalEntitiesIDTermsOfServiceStatusResponse:
        r"""Get Terms of Service status
        Returns the required types of Terms of Service that need to be accepted by a legal entity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLegalEntitiesIDTermsOfServiceStatusRequest, base_url, '/legalEntities/{id}/termsOfServiceStatus', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLegalEntitiesIDTermsOfServiceStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalculateTermsOfServiceStatusResponse])
                res.calculate_terms_of_service_status_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def patch_legal_entities_id_terms_of_service_termsofservicedocumentid(self, request: operations.PatchLegalEntitiesIDTermsOfServiceTermsofservicedocumentidRequest, security: operations.PatchLegalEntitiesIDTermsOfServiceTermsofservicedocumentidSecurity) -> operations.PatchLegalEntitiesIDTermsOfServiceTermsofservicedocumentidResponse:
        r"""Accept Terms of Service
        Accepts Terms of Service.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchLegalEntitiesIDTermsOfServiceTermsofservicedocumentidRequest, base_url, '/legalEntities/{id}/termsOfService/{termsofservicedocumentid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "accept_terms_of_service_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchLegalEntitiesIDTermsOfServiceTermsofservicedocumentidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AcceptTermsOfServiceResponse])
                res.accept_terms_of_service_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def post_legal_entities_id_terms_of_service(self, request: operations.PostLegalEntitiesIDTermsOfServiceRequest, security: operations.PostLegalEntitiesIDTermsOfServiceSecurity) -> operations.PostLegalEntitiesIDTermsOfServiceResponse:
        r"""Get Terms of Service document
        Returns the Terms of Service document for a legal entity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostLegalEntitiesIDTermsOfServiceRequest, base_url, '/legalEntities/{id}/termsOfService', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_terms_of_service_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostLegalEntitiesIDTermsOfServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTermsOfServiceDocumentResponse])
                res.get_terms_of_service_document_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    