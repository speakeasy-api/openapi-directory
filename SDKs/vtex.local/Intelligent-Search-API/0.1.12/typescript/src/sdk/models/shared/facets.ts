/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class FacetsBreadcrumb extends SpeakeasyBase {
  /**
   * Query link.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * Human-readable format of the facet key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Facet type
 *
 * @remarks
 *  - `TEXT` - The value is a simple text.
 *  - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query.
 *
 */
export enum FacetsFacetsTypeEnum {
  Text = "TEXT",
  Pricerange = "PRICERANGE",
}

export class FacetsFacetsValues extends SpeakeasyBase {
  /**
   * Value id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Facet key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Human-readable format of the facet value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Number of resulting products.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  /**
   * Whether the value is selected (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selected" })
  selected?: boolean;

  /**
   * Facet value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class FacetsFacets extends SpeakeasyBase {
  /**
   * Whether the client-side should hide the facet (`true`) or not (`false`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hidden" })
  hidden?: boolean;

  /**
   * Human-readable format of the facet key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Number of possible values.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  /**
   * Facet type
   *
   * @remarks
   *  - `TEXT` - The value is a simple text.
   *  - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: FacetsFacetsTypeEnum;

  /**
   * Possible values.
   */
  @SpeakeasyMetadata({ elemType: FacetsFacetsValues })
  @Expose({ name: "values" })
  @Type(() => FacetsFacetsValues)
  values?: FacetsFacetsValues[];
}

export class FacetsQueryArgsSelectedFacets extends SpeakeasyBase {
  /**
   * facet key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * facet value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Term and facets used in the query
 */
export class FacetsQueryArgs extends SpeakeasyBase {
  /**
   * Search term used in the query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  query?: string;

  /**
   * Facets used in the query.
   */
  @SpeakeasyMetadata({ elemType: FacetsQueryArgsSelectedFacets })
  @Expose({ name: "selectedFacets" })
  @Type(() => FacetsQueryArgsSelectedFacets)
  selectedFacets?: FacetsQueryArgsSelectedFacets[];
}

/**
 * List of facets for the given query.
 */
export class Facets extends SpeakeasyBase {
  /**
   * Generated breadcrumb for the given query.
   */
  @SpeakeasyMetadata({ elemType: FacetsBreadcrumb })
  @Expose({ name: "breadcrumb" })
  @Type(() => FacetsBreadcrumb)
  breadcrumb?: FacetsBreadcrumb[];

  /**
   * List of facets
   */
  @SpeakeasyMetadata({ elemType: FacetsFacets })
  @Expose({ name: "facets" })
  @Type(() => FacetsFacets)
  facets?: FacetsFacets[];

  /**
   * Term and facets used in the query
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryArgs" })
  @Type(() => FacetsQueryArgs)
  queryArgs?: FacetsQueryArgs;

  /**
   * Indicates whether there was sampling in the aggregation of facets or not. In search results that have many products, only the first 30000 will be aggregated to avoid performance issues.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sampling" })
  sampling?: boolean;
}
