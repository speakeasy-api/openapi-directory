"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Routines:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bigquery_routines_delete(self, request: operations.BigqueryRoutinesDeleteRequest, security: operations.BigqueryRoutinesDeleteSecurity) -> operations.BigqueryRoutinesDeleteResponse:
        r"""Deletes the routine specified by routineId from the dataset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryRoutinesDeleteRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/routines/{routineId}', request)
        
        query_params = utils.get_query_params(operations.BigqueryRoutinesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryRoutinesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def bigquery_routines_get(self, request: operations.BigqueryRoutinesGetRequest, security: operations.BigqueryRoutinesGetSecurity) -> operations.BigqueryRoutinesGetResponse:
        r"""Gets the specified routine resource by routine ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryRoutinesGetRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/routines/{routineId}', request)
        
        query_params = utils.get_query_params(operations.BigqueryRoutinesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryRoutinesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Routine])
                res.routine = out

        return res

    def bigquery_routines_insert(self, request: operations.BigqueryRoutinesInsertRequest, security: operations.BigqueryRoutinesInsertSecurity) -> operations.BigqueryRoutinesInsertResponse:
        r"""Creates a new routine in the dataset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryRoutinesInsertRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/routines', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "routine_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryRoutinesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryRoutinesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Routine])
                res.routine = out

        return res

    def bigquery_routines_list(self, request: operations.BigqueryRoutinesListRequest, security: operations.BigqueryRoutinesListSecurity) -> operations.BigqueryRoutinesListResponse:
        r"""Lists all routines in the specified dataset. Requires the READER dataset role."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryRoutinesListRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/routines', request)
        
        query_params = utils.get_query_params(operations.BigqueryRoutinesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryRoutinesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRoutinesResponse])
                res.list_routines_response = out

        return res

    def bigquery_routines_update(self, request: operations.BigqueryRoutinesUpdateRequest, security: operations.BigqueryRoutinesUpdateSecurity) -> operations.BigqueryRoutinesUpdateResponse:
        r"""Updates information in an existing routine. The update method replaces the entire Routine resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryRoutinesUpdateRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/routines/{routineId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "routine_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryRoutinesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryRoutinesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Routine])
                res.routine = out

        return res

    