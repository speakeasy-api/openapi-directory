/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * System overview
 */
export class V1System {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns the health information for the official business registers based on usage.
   *
   * @remarks
   * Returns the health information for the official business registers based on usage.
   */
  healthCheck(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthCheckResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/system/health";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthCheckResponse =
        new operations.HealthCheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.healthCheck200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.healthCheck200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.HealthCheck200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.healthCheckDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.HealthCheckDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of countries
   *
   * @remarks
   * Retrieve the list of all currently enabled countries
   */
  systemCountries(
    config?: AxiosRequestConfig
  ): Promise<operations.SystemCountriesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/system/countries";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SystemCountriesResponse =
        new operations.SystemCountriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemCountries200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.systemCountries200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.SystemCountries200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemCountriesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SystemCountriesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of products with prices
   *
   * @remarks
   * Retrieve pricing rules for your subscription plan
   */
  systemPricelist(
    config?: AxiosRequestConfig
  ): Promise<operations.SystemPricelistResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/system/pricelist";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SystemPricelistResponse =
        new operations.SystemPricelistResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemPricelist200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.systemPricelist200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.SystemPricelist200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemPricelistDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SystemPricelistDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
