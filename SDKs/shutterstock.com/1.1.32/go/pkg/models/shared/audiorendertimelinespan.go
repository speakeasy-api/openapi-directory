// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AudioRenderTimelineSpanSpanTypeEnum - Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
type AudioRenderTimelineSpanSpanTypeEnum string

const (
	AudioRenderTimelineSpanSpanTypeEnumMetered   AudioRenderTimelineSpanSpanTypeEnum = "metered"
	AudioRenderTimelineSpanSpanTypeEnumUnmetered AudioRenderTimelineSpanSpanTypeEnum = "unmetered"
)

func (e *AudioRenderTimelineSpanSpanTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "metered":
		fallthrough
	case "unmetered":
		*e = AudioRenderTimelineSpanSpanTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanSpanTypeEnum: %s", s)
	}
}

// AudioRenderTimelineSpan - The beginning of a non-overlapping period of absolute time
type AudioRenderTimelineSpan struct {
	// An identifier which must be unique within the parent span
	ID *float64 `json:"id,omitempty"`
	// An array of instrument_group objects that are used in this span
	InstrumentGroups []AudioRenderTimelineSpanInstrumentGroup `json:"instrument_groups,omitempty"`
	// An array of region objects within the span
	Regions []AudioRenderTimelineSpanRegion `json:"regions,omitempty"`
	// Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
	SpanType AudioRenderTimelineSpanSpanTypeEnum `json:"span_type"`
	// The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo
	Tempo *int64 `json:"tempo,omitempty"`
	// Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change
	TempoChanges []AudioRenderTimelineSpanTempoChanges `json:"tempo_changes,omitempty"`
	// The absolute time, in seconds, at which the span starts
	Time int64 `json:"time"`
}
