<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class QosRules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a quality of service rule
     * 
     * Add a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse
     */
	public function createNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchQosRule201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a quality of service rule
     * 
     * Delete a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse
     */
	public function deleteNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return a quality of service rule
     * 
     * Return a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse
     */
	public function getNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List quality of service rules
     * 
     * List quality of service rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse
     */
	public function getNetworkSwitchQosRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse
     */
	public function getNetworkSwitchQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a quality of service rule
     * 
     * Update a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse
     */
	public function updateNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the order in which the rules should be processed by the switch
     * 
     * Update the order in which the rules should be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse
     */
	public function updateNetworkSwitchQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}