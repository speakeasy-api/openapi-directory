"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillableMACOSJobRuns:
    
    duration_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_ms') }})  
    job_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillableMACOS:
    
    jobs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobs') }})  
    total_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_ms') }})  
    job_runs: Optional[list[WorkflowRunUsageBillableMACOSJobRuns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_runs'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillableUBUNTUJobRuns:
    
    duration_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_ms') }})  
    job_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillableUBUNTU:
    
    jobs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobs') }})  
    total_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_ms') }})  
    job_runs: Optional[list[WorkflowRunUsageBillableUBUNTUJobRuns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_runs'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillableWINDOWSJobRuns:
    
    duration_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_ms') }})  
    job_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillableWINDOWS:
    
    jobs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobs') }})  
    total_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_ms') }})  
    job_runs: Optional[list[WorkflowRunUsageBillableWINDOWSJobRuns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_runs'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsageBillable:
    
    macos: Optional[WorkflowRunUsageBillableMACOS] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MACOS'), 'exclude': lambda f: f is None }})  
    ubuntu: Optional[WorkflowRunUsageBillableUBUNTU] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UBUNTU'), 'exclude': lambda f: f is None }})  
    windows: Optional[WorkflowRunUsageBillableWINDOWS] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WINDOWS'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowRunUsage:
    r"""Workflow Run Usage"""
    
    billable: WorkflowRunUsageBillable = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billable') }})  
    run_duration_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_duration_ms'), 'exclude': lambda f: f is None }})  
    