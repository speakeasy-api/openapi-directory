"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scoringdetail as shared_scoringdetail
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayerSeason:
    
    activated: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Activated'), 'exclude': lambda f: f is None }})  
    assisted_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistedTackles'), 'exclude': lambda f: f is None }})  
    auction_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuctionValue'), 'exclude': lambda f: f is None }})  
    auction_value_ppr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuctionValuePPR'), 'exclude': lambda f: f is None }})  
    average_draft_position: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPosition'), 'exclude': lambda f: f is None }})  
    average_draft_position2_qb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPosition2QB'), 'exclude': lambda f: f is None }})  
    average_draft_position_dynasty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPositionDynasty'), 'exclude': lambda f: f is None }})  
    average_draft_position_ppr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPositionPPR'), 'exclude': lambda f: f is None }})  
    average_draft_position_rookie: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageDraftPositionRookie'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnYards'), 'exclude': lambda f: f is None }})  
    blocked_kicks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKicks'), 'exclude': lambda f: f is None }})  
    defensive_snaps_played: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefensiveSnapsPlayed'), 'exclude': lambda f: f is None }})  
    defensive_team_snaps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefensiveTeamSnaps'), 'exclude': lambda f: f is None }})  
    defensive_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefensiveTouchdowns'), 'exclude': lambda f: f is None }})  
    extra_points_attempted: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsAttempted'), 'exclude': lambda f: f is None }})  
    extra_points_had_blocked: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsHadBlocked'), 'exclude': lambda f: f is None }})  
    extra_points_made: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsMade'), 'exclude': lambda f: f is None }})  
    fantasy_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPoints'), 'exclude': lambda f: f is None }})  
    fantasy_points_draft_kings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsDraftKings'), 'exclude': lambda f: f is None }})  
    fantasy_points_fan_duel: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFanDuel'), 'exclude': lambda f: f is None }})  
    fantasy_points_fantasy_draft: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFantasyDraft'), 'exclude': lambda f: f is None }})  
    fantasy_points_ppr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsPPR'), 'exclude': lambda f: f is None }})  
    fantasy_points_yahoo: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsYahoo'), 'exclude': lambda f: f is None }})  
    fantasy_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPosition'), 'exclude': lambda f: f is None }})  
    field_goal_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalPercentage'), 'exclude': lambda f: f is None }})  
    field_goal_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    field_goal_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnYards'), 'exclude': lambda f: f is None }})  
    field_goals_attempted: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsAttempted'), 'exclude': lambda f: f is None }})  
    field_goals_had_blocked: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsHadBlocked'), 'exclude': lambda f: f is None }})  
    field_goals_longest_made: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsLongestMade'), 'exclude': lambda f: f is None }})  
    field_goals_made: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade'), 'exclude': lambda f: f is None }})  
    field_goals_made0to19: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade0to19'), 'exclude': lambda f: f is None }})  
    field_goals_made20to29: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade20to29'), 'exclude': lambda f: f is None }})  
    field_goals_made30to39: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade30to39'), 'exclude': lambda f: f is None }})  
    field_goals_made40to49: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade40to49'), 'exclude': lambda f: f is None }})  
    field_goals_made50_plus: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade50Plus'), 'exclude': lambda f: f is None }})  
    fumble_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    fumble_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnYards'), 'exclude': lambda f: f is None }})  
    fumbles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Fumbles'), 'exclude': lambda f: f is None }})  
    fumbles_forced: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesForced'), 'exclude': lambda f: f is None }})  
    fumbles_lost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesLost'), 'exclude': lambda f: f is None }})  
    fumbles_out_of_bounds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesOutOfBounds'), 'exclude': lambda f: f is None }})  
    fumbles_own_recoveries: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesOwnRecoveries'), 'exclude': lambda f: f is None }})  
    fumbles_recovered: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesRecovered'), 'exclude': lambda f: f is None }})  
    global_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalTeamID'), 'exclude': lambda f: f is None }})  
    humidity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Humidity'), 'exclude': lambda f: f is None }})  
    interception_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    interception_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnYards'), 'exclude': lambda f: f is None }})  
    interceptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Interceptions'), 'exclude': lambda f: f is None }})  
    kick_return_fair_catches: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnFairCatches'), 'exclude': lambda f: f is None }})  
    kick_return_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnLong'), 'exclude': lambda f: f is None }})  
    kick_returns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturns'), 'exclude': lambda f: f is None }})  
    kick_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    kick_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnYards'), 'exclude': lambda f: f is None }})  
    kick_return_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    misc_assisted_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiscAssistedTackles'), 'exclude': lambda f: f is None }})  
    misc_fumbles_forced: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiscFumblesForced'), 'exclude': lambda f: f is None }})  
    misc_fumbles_recovered: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiscFumblesRecovered'), 'exclude': lambda f: f is None }})  
    misc_solo_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiscSoloTackles'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})  
    offensive_fumble_recovery_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveFumbleRecoveryTouchdowns'), 'exclude': lambda f: f is None }})  
    offensive_snaps_played: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveSnapsPlayed'), 'exclude': lambda f: f is None }})  
    offensive_team_snaps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveTeamSnaps'), 'exclude': lambda f: f is None }})  
    offensive_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffensiveTouchdowns'), 'exclude': lambda f: f is None }})  
    passes_defended: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassesDefended'), 'exclude': lambda f: f is None }})  
    passing_attempts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingAttempts'), 'exclude': lambda f: f is None }})  
    passing_completion_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingCompletionPercentage'), 'exclude': lambda f: f is None }})  
    passing_completions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingCompletions'), 'exclude': lambda f: f is None }})  
    passing_interceptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingInterceptions'), 'exclude': lambda f: f is None }})  
    passing_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingLong'), 'exclude': lambda f: f is None }})  
    passing_rating: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingRating'), 'exclude': lambda f: f is None }})  
    passing_sacks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingSacks'), 'exclude': lambda f: f is None }})  
    passing_sack_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingSackYards'), 'exclude': lambda f: f is None }})  
    passing_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingTouchdowns'), 'exclude': lambda f: f is None }})  
    passing_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYards'), 'exclude': lambda f: f is None }})  
    passing_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    passing_yards_per_completion: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYardsPerCompletion'), 'exclude': lambda f: f is None }})  
    played: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Played'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    player_season_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerSeasonID'), 'exclude': lambda f: f is None }})  
    position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position'), 'exclude': lambda f: f is None }})  
    position_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PositionCategory'), 'exclude': lambda f: f is None }})  
    punt_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntAverage'), 'exclude': lambda f: f is None }})  
    punt_inside20: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntInside20'), 'exclude': lambda f: f is None }})  
    punt_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntLong'), 'exclude': lambda f: f is None }})  
    punt_net_average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntNetAverage'), 'exclude': lambda f: f is None }})  
    punt_net_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntNetYards'), 'exclude': lambda f: f is None }})  
    punt_return_fair_catches: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnFairCatches'), 'exclude': lambda f: f is None }})  
    punt_return_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnLong'), 'exclude': lambda f: f is None }})  
    punt_returns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturns'), 'exclude': lambda f: f is None }})  
    punt_return_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    punt_return_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnYards'), 'exclude': lambda f: f is None }})  
    punt_return_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    punts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Punts'), 'exclude': lambda f: f is None }})  
    punts_had_blocked: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntsHadBlocked'), 'exclude': lambda f: f is None }})  
    punt_touchbacks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntTouchbacks'), 'exclude': lambda f: f is None }})  
    punt_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntYards'), 'exclude': lambda f: f is None }})  
    quarterback_hits: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterbackHits'), 'exclude': lambda f: f is None }})  
    receiving_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingLong'), 'exclude': lambda f: f is None }})  
    receiving_targets: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingTargets'), 'exclude': lambda f: f is None }})  
    receiving_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingTouchdowns'), 'exclude': lambda f: f is None }})  
    receiving_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingYards'), 'exclude': lambda f: f is None }})  
    receiving_yards_per_reception: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingYardsPerReception'), 'exclude': lambda f: f is None }})  
    receiving_yards_per_target: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingYardsPerTarget'), 'exclude': lambda f: f is None }})  
    reception_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceptionPercentage'), 'exclude': lambda f: f is None }})  
    receptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Receptions'), 'exclude': lambda f: f is None }})  
    rushing_attempts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingAttempts'), 'exclude': lambda f: f is None }})  
    rushing_long: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingLong'), 'exclude': lambda f: f is None }})  
    rushing_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingTouchdowns'), 'exclude': lambda f: f is None }})  
    rushing_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingYards'), 'exclude': lambda f: f is None }})  
    rushing_yards_per_attempt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingYardsPerAttempt'), 'exclude': lambda f: f is None }})  
    sacks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sacks'), 'exclude': lambda f: f is None }})  
    sack_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SackYards'), 'exclude': lambda f: f is None }})  
    safeties: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Safeties'), 'exclude': lambda f: f is None }})  
    safeties_allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SafetiesAllowed'), 'exclude': lambda f: f is None }})  
    scoring_details: Optional[list[shared_scoringdetail.ScoringDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScoringDetails'), 'exclude': lambda f: f is None }})  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Season'), 'exclude': lambda f: f is None }})  
    season_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SeasonType'), 'exclude': lambda f: f is None }})  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShortName'), 'exclude': lambda f: f is None }})  
    solo_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoloTackles'), 'exclude': lambda f: f is None }})  
    special_teams_assisted_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsAssistedTackles'), 'exclude': lambda f: f is None }})  
    special_teams_fumbles_forced: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsFumblesForced'), 'exclude': lambda f: f is None }})  
    special_teams_fumbles_recovered: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsFumblesRecovered'), 'exclude': lambda f: f is None }})  
    special_teams_snaps_played: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsSnapsPlayed'), 'exclude': lambda f: f is None }})  
    special_teams_solo_tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsSoloTackles'), 'exclude': lambda f: f is None }})  
    special_teams_team_snaps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsTeamSnaps'), 'exclude': lambda f: f is None }})  
    special_teams_touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecialTeamsTouchdowns'), 'exclude': lambda f: f is None }})  
    started: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Started'), 'exclude': lambda f: f is None }})  
    tackles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tackles'), 'exclude': lambda f: f is None }})  
    tackles_for_loss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TacklesForLoss'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamID'), 'exclude': lambda f: f is None }})  
    temperature: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Temperature'), 'exclude': lambda f: f is None }})  
    touchdowns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Touchdowns'), 'exclude': lambda f: f is None }})  
    two_point_conversion_passes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionPasses'), 'exclude': lambda f: f is None }})  
    two_point_conversion_receptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionReceptions'), 'exclude': lambda f: f is None }})  
    two_point_conversion_returns: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionReturns'), 'exclude': lambda f: f is None }})  
    two_point_conversion_runs: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionRuns'), 'exclude': lambda f: f is None }})  
    wind_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindSpeed'), 'exclude': lambda f: f is None }})  
    