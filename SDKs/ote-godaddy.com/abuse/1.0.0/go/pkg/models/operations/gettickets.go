// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetTicketsTypeEnum - The type of abuse.
type GetTicketsTypeEnum string

const (
	GetTicketsTypeEnumARecord      GetTicketsTypeEnum = "A_RECORD"
	GetTicketsTypeEnumChildAbuse   GetTicketsTypeEnum = "CHILD_ABUSE"
	GetTicketsTypeEnumContent      GetTicketsTypeEnum = "CONTENT"
	GetTicketsTypeEnumFraudWire    GetTicketsTypeEnum = "FRAUD_WIRE"
	GetTicketsTypeEnumIPBlock      GetTicketsTypeEnum = "IP_BLOCK"
	GetTicketsTypeEnumMalware      GetTicketsTypeEnum = "MALWARE"
	GetTicketsTypeEnumNetworkAbuse GetTicketsTypeEnum = "NETWORK_ABUSE"
	GetTicketsTypeEnumPhishing     GetTicketsTypeEnum = "PHISHING"
	GetTicketsTypeEnumSpam         GetTicketsTypeEnum = "SPAM"
)

func (e *GetTicketsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "A_RECORD":
		fallthrough
	case "CHILD_ABUSE":
		fallthrough
	case "CONTENT":
		fallthrough
	case "FRAUD_WIRE":
		fallthrough
	case "IP_BLOCK":
		fallthrough
	case "MALWARE":
		fallthrough
	case "NETWORK_ABUSE":
		fallthrough
	case "PHISHING":
		fallthrough
	case "SPAM":
		*e = GetTicketsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTicketsTypeEnum: %s", s)
	}
}

type GetTicketsQueryParams struct {
	// Is this abuse ticket closed?
	Closed *bool `queryParam:"style=form,explode=true,name=closed"`
	// The latest abuse ticket creation date to pull abuse tickets for
	CreatedEnd *string `queryParam:"style=form,explode=true,name=createdEnd"`
	// The earliest abuse ticket creation date to pull abuse tickets for
	CreatedStart *string `queryParam:"style=form,explode=true,name=createdStart"`
	// Number of abuse ticket numbers to return.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// The earliest result set record number to pull abuse tickets for
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// The domain name or ip address the abuse originated from
	SourceDomainOrIP *string `queryParam:"style=form,explode=true,name=sourceDomainOrIp"`
	// The brand/company the abuse is targeting. ie: brand name/bank name
	Target *string `queryParam:"style=form,explode=true,name=target"`
	// The type of abuse.
	Type *GetTicketsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetTicketsRequest struct {
	QueryParams GetTicketsQueryParams
}

type GetTicketsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
