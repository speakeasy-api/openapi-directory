/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * About - An item with user information and settings.
 */
public class About {
    /**
     * Information about supported additional roles per file type. The most specific type takes precedence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalRoleInfo")
    public AboutAdditionalRoleInfo[] additionalRoleInfo;

    public About withAdditionalRoleInfo(AboutAdditionalRoleInfo[] additionalRoleInfo) {
        this.additionalRoleInfo = additionalRoleInfo;
        return this;
    }
    
    /**
     * Whether the user can create shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canCreateDrives")
    public Boolean canCreateDrives;

    public About withCanCreateDrives(Boolean canCreateDrives) {
        this.canCreateDrives = canCreateDrives;
        return this;
    }
    
    /**
     * Deprecated - use canCreateDrives instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canCreateTeamDrives")
    public Boolean canCreateTeamDrives;

    public About withCanCreateTeamDrives(Boolean canCreateTeamDrives) {
        this.canCreateTeamDrives = canCreateTeamDrives;
        return this;
    }
    
    /**
     * The domain sharing policy for the current user. Possible values are:  
     * - allowed 
     * - allowedWithWarning 
     * - incomingOnly 
     * - disallowed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainSharingPolicy")
    public String domainSharingPolicy;

    public About withDomainSharingPolicy(String domainSharingPolicy) {
        this.domainSharingPolicy = domainSharingPolicy;
        return this;
    }
    
    /**
     * A list of themes that are supported for shared drives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driveThemes")
    public AboutDriveThemes[] driveThemes;

    public About withDriveThemes(AboutDriveThemes[] driveThemes) {
        this.driveThemes = driveThemes;
        return this;
    }
    
    /**
     * The ETag of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public About withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The allowable export formats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exportFormats")
    public AboutExportFormats[] exportFormats;

    public About withExportFormats(AboutExportFormats[] exportFormats) {
        this.exportFormats = exportFormats;
        return this;
    }
    
    /**
     * List of additional features enabled on this account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public AboutFeatures[] features;

    public About withFeatures(AboutFeatures[] features) {
        this.features = features;
        return this;
    }
    
    /**
     * The palette of allowable folder colors as RGB hex strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folderColorPalette")
    public String[] folderColorPalette;

    public About withFolderColorPalette(String[] folderColorPalette) {
        this.folderColorPalette = folderColorPalette;
        return this;
    }
    
    /**
     * The allowable import formats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importFormats")
    public AboutImportFormats[] importFormats;

    public About withImportFormats(AboutImportFormats[] importFormats) {
        this.importFormats = importFormats;
        return this;
    }
    
    /**
     * A boolean indicating whether the authenticated app is installed by the authenticated user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCurrentAppInstalled")
    public Boolean isCurrentAppInstalled;

    public About withIsCurrentAppInstalled(Boolean isCurrentAppInstalled) {
        this.isCurrentAppInstalled = isCurrentAppInstalled;
        return this;
    }
    
    /**
     * This is always drive#about.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public About withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;

    public About withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The largest change id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("largestChangeId")
    public String largestChangeId;

    public About withLargestChangeId(String largestChangeId) {
        this.largestChangeId = largestChangeId;
        return this;
    }
    
    /**
     * List of max upload sizes for each file type. The most specific type takes precedence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUploadSizes")
    public AboutMaxUploadSizes[] maxUploadSizes;

    public About withMaxUploadSizes(AboutMaxUploadSizes[] maxUploadSizes) {
        this.maxUploadSizes = maxUploadSizes;
        return this;
    }
    
    /**
     * The name of the current user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public About withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The current user's ID as visible in the permissions collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionId")
    public String permissionId;

    public About withPermissionId(String permissionId) {
        this.permissionId = permissionId;
        return this;
    }
    
    /**
     * The amount of storage quota used by different Google services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaBytesByService")
    public AboutQuotaBytesByService[] quotaBytesByService;

    public About withQuotaBytesByService(AboutQuotaBytesByService[] quotaBytesByService) {
        this.quotaBytesByService = quotaBytesByService;
        return this;
    }
    
    /**
     * The total number of quota bytes. This is only relevant when quotaType is LIMITED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaBytesTotal")
    public String quotaBytesTotal;

    public About withQuotaBytesTotal(String quotaBytesTotal) {
        this.quotaBytesTotal = quotaBytesTotal;
        return this;
    }
    
    /**
     * The number of quota bytes used by Google Drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaBytesUsed")
    public String quotaBytesUsed;

    public About withQuotaBytesUsed(String quotaBytesUsed) {
        this.quotaBytesUsed = quotaBytesUsed;
        return this;
    }
    
    /**
     * The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaBytesUsedAggregate")
    public String quotaBytesUsedAggregate;

    public About withQuotaBytesUsedAggregate(String quotaBytesUsedAggregate) {
        this.quotaBytesUsedAggregate = quotaBytesUsedAggregate;
        return this;
    }
    
    /**
     * The number of quota bytes used by trashed items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaBytesUsedInTrash")
    public String quotaBytesUsedInTrash;

    public About withQuotaBytesUsedInTrash(String quotaBytesUsedInTrash) {
        this.quotaBytesUsedInTrash = quotaBytesUsedInTrash;
        return this;
    }
    
    /**
     * The type of the user's storage quota. Possible values are:  
     * - LIMITED 
     * - UNLIMITED
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaType")
    public String quotaType;

    public About withQuotaType(String quotaType) {
        this.quotaType = quotaType;
        return this;
    }
    
    /**
     * The number of remaining change ids, limited to no more than 2500.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingChangeIds")
    public String remainingChangeIds;

    public About withRemainingChangeIds(String remainingChangeIds) {
        this.remainingChangeIds = remainingChangeIds;
        return this;
    }
    
    /**
     * The id of the root folder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootFolderId")
    public String rootFolderId;

    public About withRootFolderId(String rootFolderId) {
        this.rootFolderId = rootFolderId;
        return this;
    }
    
    /**
     * A link back to this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public About withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Deprecated - use driveThemes instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teamDriveThemes")
    public AboutTeamDriveThemes[] teamDriveThemes;

    public About withTeamDriveThemes(AboutTeamDriveThemes[] teamDriveThemes) {
        this.teamDriveThemes = teamDriveThemes;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;

    public About withUser(User user) {
        this.user = user;
        return this;
    }
    
    public About(){}
}
