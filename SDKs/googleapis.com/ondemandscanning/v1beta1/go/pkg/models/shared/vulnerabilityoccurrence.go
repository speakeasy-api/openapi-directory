// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VulnerabilityOccurrenceCvssVersionEnum - Output only. CVSS version used to populate cvss_score and severity.
type VulnerabilityOccurrenceCvssVersionEnum string

const (
	VulnerabilityOccurrenceCvssVersionEnumCvssVersionUnspecified VulnerabilityOccurrenceCvssVersionEnum = "CVSS_VERSION_UNSPECIFIED"
	VulnerabilityOccurrenceCvssVersionEnumCvssVersion2           VulnerabilityOccurrenceCvssVersionEnum = "CVSS_VERSION_2"
	VulnerabilityOccurrenceCvssVersionEnumCvssVersion3           VulnerabilityOccurrenceCvssVersionEnum = "CVSS_VERSION_3"
)

func (e *VulnerabilityOccurrenceCvssVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CVSS_VERSION_UNSPECIFIED":
		fallthrough
	case "CVSS_VERSION_2":
		fallthrough
	case "CVSS_VERSION_3":
		*e = VulnerabilityOccurrenceCvssVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VulnerabilityOccurrenceCvssVersionEnum: %s", s)
	}
}

// VulnerabilityOccurrenceEffectiveSeverityEnum - The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
type VulnerabilityOccurrenceEffectiveSeverityEnum string

const (
	VulnerabilityOccurrenceEffectiveSeverityEnumSeverityUnspecified VulnerabilityOccurrenceEffectiveSeverityEnum = "SEVERITY_UNSPECIFIED"
	VulnerabilityOccurrenceEffectiveSeverityEnumMinimal             VulnerabilityOccurrenceEffectiveSeverityEnum = "MINIMAL"
	VulnerabilityOccurrenceEffectiveSeverityEnumLow                 VulnerabilityOccurrenceEffectiveSeverityEnum = "LOW"
	VulnerabilityOccurrenceEffectiveSeverityEnumMedium              VulnerabilityOccurrenceEffectiveSeverityEnum = "MEDIUM"
	VulnerabilityOccurrenceEffectiveSeverityEnumHigh                VulnerabilityOccurrenceEffectiveSeverityEnum = "HIGH"
	VulnerabilityOccurrenceEffectiveSeverityEnumCritical            VulnerabilityOccurrenceEffectiveSeverityEnum = "CRITICAL"
)

func (e *VulnerabilityOccurrenceEffectiveSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "MINIMAL":
		fallthrough
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = VulnerabilityOccurrenceEffectiveSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VulnerabilityOccurrenceEffectiveSeverityEnum: %s", s)
	}
}

// VulnerabilityOccurrenceSeverityEnum - Output only. The note provider assigned severity of this vulnerability.
type VulnerabilityOccurrenceSeverityEnum string

const (
	VulnerabilityOccurrenceSeverityEnumSeverityUnspecified VulnerabilityOccurrenceSeverityEnum = "SEVERITY_UNSPECIFIED"
	VulnerabilityOccurrenceSeverityEnumMinimal             VulnerabilityOccurrenceSeverityEnum = "MINIMAL"
	VulnerabilityOccurrenceSeverityEnumLow                 VulnerabilityOccurrenceSeverityEnum = "LOW"
	VulnerabilityOccurrenceSeverityEnumMedium              VulnerabilityOccurrenceSeverityEnum = "MEDIUM"
	VulnerabilityOccurrenceSeverityEnumHigh                VulnerabilityOccurrenceSeverityEnum = "HIGH"
	VulnerabilityOccurrenceSeverityEnumCritical            VulnerabilityOccurrenceSeverityEnum = "CRITICAL"
)

func (e *VulnerabilityOccurrenceSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "MINIMAL":
		fallthrough
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = VulnerabilityOccurrenceSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VulnerabilityOccurrenceSeverityEnum: %s", s)
	}
}

// VulnerabilityOccurrence - An occurrence of a severity vulnerability on a resource.
type VulnerabilityOccurrence struct {
	// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
	CvssScore *float32 `json:"cvssScore,omitempty"`
	// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
	CvssV2 *Cvss `json:"cvssV2,omitempty"`
	// Output only. CVSS version used to populate cvss_score and severity.
	CvssVersion *VulnerabilityOccurrenceCvssVersionEnum `json:"cvssVersion,omitempty"`
	// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
	Cvssv3 *Cvss `json:"cvssv3,omitempty"`
	// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
	EffectiveSeverity *VulnerabilityOccurrenceEffectiveSeverityEnum `json:"effectiveSeverity,omitempty"`
	// Output only. Whether at least one of the affected packages has a fix available.
	FixAvailable *bool `json:"fixAvailable,omitempty"`
	// Output only. A detailed description of this vulnerability.
	LongDescription *string `json:"longDescription,omitempty"`
	// Required. The set of affected locations and their fixes (if available) within the associated resource.
	PackageIssue []PackageIssue `json:"packageIssue,omitempty"`
	// Output only. URLs related to this vulnerability.
	RelatedUrls []RelatedURL `json:"relatedUrls,omitempty"`
	// Output only. The note provider assigned severity of this vulnerability.
	Severity *VulnerabilityOccurrenceSeverityEnum `json:"severity,omitempty"`
	// Output only. A one sentence description of this vulnerability.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	Type *string `json:"type,omitempty"`
	// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
	VexAssessment *VexAssessment `json:"vexAssessment,omitempty"`
}
