"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def networkconnectivity_projects_locations_global_hubs_create(self, request: operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest, security: operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateSecurity) -> operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse:
        r"""Creates a new Network Connectivity Center hub in the specified project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest, base_url, '/v1/{parent}/hubs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "hub_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def networkconnectivity_projects_locations_global_hubs_list(self, request: operations.NetworkconnectivityProjectsLocationsGlobalHubsListRequest, security: operations.NetworkconnectivityProjectsLocationsGlobalHubsListSecurity) -> operations.NetworkconnectivityProjectsLocationsGlobalHubsListResponse:
        r"""Lists the Network Connectivity Center hubs associated with a given project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsGlobalHubsListRequest, base_url, '/v1/{parent}/hubs', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsGlobalHubsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsGlobalHubsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListHubsResponse])
                res.list_hubs_response = out

        return res

    def networkconnectivity_projects_locations_internal_ranges_create(self, request: operations.NetworkconnectivityProjectsLocationsInternalRangesCreateRequest, security: operations.NetworkconnectivityProjectsLocationsInternalRangesCreateSecurity) -> operations.NetworkconnectivityProjectsLocationsInternalRangesCreateResponse:
        r"""Creates a new internal range in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsInternalRangesCreateRequest, base_url, '/v1/{parent}/internalRanges', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "internal_range_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsInternalRangesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsInternalRangesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def networkconnectivity_projects_locations_internal_ranges_list(self, request: operations.NetworkconnectivityProjectsLocationsInternalRangesListRequest, security: operations.NetworkconnectivityProjectsLocationsInternalRangesListSecurity) -> operations.NetworkconnectivityProjectsLocationsInternalRangesListResponse:
        r"""Lists internal ranges in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsInternalRangesListRequest, base_url, '/v1/{parent}/internalRanges', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsInternalRangesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsInternalRangesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListInternalRangesResponse])
                res.list_internal_ranges_response = out

        return res

    def networkconnectivity_projects_locations_list(self, request: operations.NetworkconnectivityProjectsLocationsListRequest, security: operations.NetworkconnectivityProjectsLocationsListSecurity) -> operations.NetworkconnectivityProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def networkconnectivity_projects_locations_operations_cancel(self, request: operations.NetworkconnectivityProjectsLocationsOperationsCancelRequest, security: operations.NetworkconnectivityProjectsLocationsOperationsCancelSecurity) -> operations.NetworkconnectivityProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def networkconnectivity_projects_locations_operations_list(self, request: operations.NetworkconnectivityProjectsLocationsOperationsListRequest, security: operations.NetworkconnectivityProjectsLocationsOperationsListSecurity) -> operations.NetworkconnectivityProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def networkconnectivity_projects_locations_spokes_create(self, request: operations.NetworkconnectivityProjectsLocationsSpokesCreateRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesCreateSecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesCreateResponse:
        r"""Creates a Network Connectivity Center spoke."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesCreateRequest, base_url, '/v1/{parent}/spokes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "spoke_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def networkconnectivity_projects_locations_spokes_delete(self, request: operations.NetworkconnectivityProjectsLocationsSpokesDeleteRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesDeleteSecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesDeleteResponse:
        r"""Deletes a Network Connectivity Center spoke."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def networkconnectivity_projects_locations_spokes_get(self, request: operations.NetworkconnectivityProjectsLocationsSpokesGetRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesGetSecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesGetResponse:
        r"""Gets details about a Network Connectivity Center spoke."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Spoke])
                res.spoke = out

        return res

    def networkconnectivity_projects_locations_spokes_get_iam_policy(self, request: operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicySecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest, base_url, '/v1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def networkconnectivity_projects_locations_spokes_list(self, request: operations.NetworkconnectivityProjectsLocationsSpokesListRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesListSecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesListResponse:
        r"""Lists the Network Connectivity Center spokes in a specified project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesListRequest, base_url, '/v1/{parent}/spokes', request)
        
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSpokesResponse])
                res.list_spokes_response = out

        return res

    def networkconnectivity_projects_locations_spokes_patch(self, request: operations.NetworkconnectivityProjectsLocationsSpokesPatchRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesPatchSecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesPatchResponse:
        r"""Updates the parameters of a Network Connectivity Center spoke."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "spoke_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def networkconnectivity_projects_locations_spokes_set_iam_policy(self, request: operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicySecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest, base_url, '/v1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def networkconnectivity_projects_locations_spokes_test_iam_permissions(self, request: operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest, security: operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsSecurity) -> operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest, base_url, '/v1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    