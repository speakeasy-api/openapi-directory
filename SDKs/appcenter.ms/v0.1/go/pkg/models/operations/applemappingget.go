// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppleMappingGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppleMappingGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppleMappingGetDefaultApplicationJSONCodeEnum string

const (
	AppleMappingGetDefaultApplicationJSONCodeEnumBadRequest          AppleMappingGetDefaultApplicationJSONCodeEnum = "BadRequest"
	AppleMappingGetDefaultApplicationJSONCodeEnumConflict            AppleMappingGetDefaultApplicationJSONCodeEnum = "Conflict"
	AppleMappingGetDefaultApplicationJSONCodeEnumNotAcceptable       AppleMappingGetDefaultApplicationJSONCodeEnum = "NotAcceptable"
	AppleMappingGetDefaultApplicationJSONCodeEnumNotFound            AppleMappingGetDefaultApplicationJSONCodeEnum = "NotFound"
	AppleMappingGetDefaultApplicationJSONCodeEnumInternalServerError AppleMappingGetDefaultApplicationJSONCodeEnum = "InternalServerError"
	AppleMappingGetDefaultApplicationJSONCodeEnumUnauthorized        AppleMappingGetDefaultApplicationJSONCodeEnum = "Unauthorized"
	AppleMappingGetDefaultApplicationJSONCodeEnumTooManyRequests     AppleMappingGetDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *AppleMappingGetDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppleMappingGetDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppleMappingGetDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// AppleMappingGetDefaultApplicationJSON - Error
type AppleMappingGetDefaultApplicationJSON struct {
	Code    AppleMappingGetDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                        `json:"message"`
}

// AppleMappingGet200ApplicationJSON - Apple Mapping Request Type
type AppleMappingGet200ApplicationJSON struct {
	// ID of the apple application in Mobile Center
	AppID *string `json:"app_id,omitempty"`
	// ID of the apple application in apple store
	AppleID *string `json:"apple_id,omitempty"`
	// Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.
	ServiceConnectionID *string `json:"service_connection_id,omitempty"`
	// ID of the Team associated with the app in apple store
	TeamIdentifier *string `json:"team_identifier,omitempty"`
}

type AppleMappingGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppleMappingGet200ApplicationJSONObject *AppleMappingGet200ApplicationJSON
	// Error
	AppleMappingGetDefaultApplicationJSONObject *AppleMappingGetDefaultApplicationJSON
}
