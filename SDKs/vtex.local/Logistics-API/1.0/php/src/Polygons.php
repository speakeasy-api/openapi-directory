<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Polygons 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create/update polygon
     * 
     * Creates or updates your store's polygons by geoshape coordinates and polygon name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePolygonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePolygonResponse
     */
	public function createUpdatePolygon(
        \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePolygonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePolygonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/geoshape');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePolygonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete polygon
     * 
     * Deletes polygon set up in your store, by polygon name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePolygonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePolygonResponse
     */
	public function deletePolygon(
        \OpenAPI\OpenAPI\Models\Operations\DeletePolygonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePolygonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/geoshape/{polygonName}', \OpenAPI\OpenAPI\Models\Operations\DeletePolygonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePolygonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List paged polygons
     * 
     * Lists stored polygons.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PagedPolygonsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PagedPolygonsResponse
     */
	public function pagedPolygons(
        \OpenAPI\OpenAPI\Models\Operations\PagedPolygonsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PagedPolygonsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/geoshape');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PagedPolygonsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PagedPolygonsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List polygon by ID
     * 
     * Lists your store's polygons by searching through polygon name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PolygonbyIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PolygonbyIdResponse
     */
	public function polygonbyId(
        \OpenAPI\OpenAPI\Models\Operations\PolygonbyIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PolygonbyIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/geoshape/{polygonName}', \OpenAPI\OpenAPI\Models\Operations\PolygonbyIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PolygonbyIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}