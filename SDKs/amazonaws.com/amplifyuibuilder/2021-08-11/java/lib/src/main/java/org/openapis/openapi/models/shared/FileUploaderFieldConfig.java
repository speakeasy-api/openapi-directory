/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FileUploaderFieldConfig - Describes the configuration for the file uploader field.
 */
public class FileUploaderFieldConfig {
    @JsonProperty("acceptedFileTypes")
    public String[] acceptedFileTypes;

    public FileUploaderFieldConfig withAcceptedFileTypes(String[] acceptedFileTypes) {
        this.acceptedFileTypes = acceptedFileTypes;
        return this;
    }
    
    @JsonProperty("accessLevel")
    public StorageAccessLevelEnum accessLevel;

    public FileUploaderFieldConfig withAccessLevel(StorageAccessLevelEnum accessLevel) {
        this.accessLevel = accessLevel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isResumable")
    public Boolean isResumable;

    public FileUploaderFieldConfig withIsResumable(Boolean isResumable) {
        this.isResumable = isResumable;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxFileCount")
    public Long maxFileCount;

    public FileUploaderFieldConfig withMaxFileCount(Long maxFileCount) {
        this.maxFileCount = maxFileCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSize")
    public Long maxSize;

    public FileUploaderFieldConfig withMaxSize(Long maxSize) {
        this.maxSize = maxSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showThumbnails")
    public Boolean showThumbnails;

    public FileUploaderFieldConfig withShowThumbnails(Boolean showThumbnails) {
        this.showThumbnails = showThumbnails;
        return this;
    }
    
    public FileUploaderFieldConfig(@JsonProperty("acceptedFileTypes") String[] acceptedFileTypes, @JsonProperty("accessLevel") StorageAccessLevelEnum accessLevel) {
        this.acceptedFileTypes = acceptedFileTypes;
        this.accessLevel = accessLevel;
  }
}
