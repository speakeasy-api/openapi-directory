// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDeploymentGroupXAmzTargetEnum
type CreateDeploymentGroupXAmzTargetEnum string

const (
	CreateDeploymentGroupXAmzTargetEnumCodeDeploy20141006CreateDeploymentGroup CreateDeploymentGroupXAmzTargetEnum = "CodeDeploy_20141006.CreateDeploymentGroup"
)

func (e *CreateDeploymentGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.CreateDeploymentGroup":
		*e = CreateDeploymentGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentGroupXAmzTargetEnum: %s", s)
	}
}

type CreateDeploymentGroupHeaders struct {
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateDeploymentGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateDeploymentGroupRequest struct {
	Headers CreateDeploymentGroupHeaders
	Request shared.CreateDeploymentGroupInput `request:"mediaType=application/json"`
}

type CreateDeploymentGroupResponse struct {
	// AlarmsLimitExceededException
	AlarmsLimitExceededException interface{}
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// Success
	CreateDeploymentGroupOutput *shared.CreateDeploymentGroupOutput
	// DeploymentConfigDoesNotExistException
	DeploymentConfigDoesNotExistException interface{}
	// DeploymentGroupAlreadyExistsException
	DeploymentGroupAlreadyExistsException interface{}
	// DeploymentGroupLimitExceededException
	DeploymentGroupLimitExceededException interface{}
	// DeploymentGroupNameRequiredException
	DeploymentGroupNameRequiredException interface{}
	// ECSServiceMappingLimitExceededException
	ECSServiceMappingLimitExceededException interface{}
	// InvalidAlarmConfigException
	InvalidAlarmConfigException interface{}
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidAutoRollbackConfigException
	InvalidAutoRollbackConfigException interface{}
	// InvalidAutoScalingGroupException
	InvalidAutoScalingGroupException interface{}
	// InvalidBlueGreenDeploymentConfigurationException
	InvalidBlueGreenDeploymentConfigurationException interface{}
	// InvalidDeploymentConfigNameException
	InvalidDeploymentConfigNameException interface{}
	// InvalidDeploymentGroupNameException
	InvalidDeploymentGroupNameException interface{}
	// InvalidDeploymentStyleException
	InvalidDeploymentStyleException interface{}
	// InvalidEC2TagCombinationException
	InvalidEc2TagCombinationException interface{}
	// InvalidEC2TagException
	InvalidEc2TagException interface{}
	// InvalidECSServiceException
	InvalidECSServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// InvalidLoadBalancerInfoException
	InvalidLoadBalancerInfoException interface{}
	// InvalidOnPremisesTagCombinationException
	InvalidOnPremisesTagCombinationException interface{}
	// InvalidRoleException
	InvalidRoleException interface{}
	// InvalidTagException
	InvalidTagException interface{}
	// InvalidTagsToAddException
	InvalidTagsToAddException interface{}
	// InvalidTargetGroupPairException
	InvalidTargetGroupPairException interface{}
	// InvalidTrafficRoutingConfigurationException
	InvalidTrafficRoutingConfigurationException interface{}
	// InvalidTriggerConfigException
	InvalidTriggerConfigException interface{}
	// LifecycleHookLimitExceededException
	LifecycleHookLimitExceededException interface{}
	// RoleRequiredException
	RoleRequiredException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// TagSetListLimitExceededException
	TagSetListLimitExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// TriggerTargetsLimitExceededException
	TriggerTargetsLimitExceededException interface{}
}
