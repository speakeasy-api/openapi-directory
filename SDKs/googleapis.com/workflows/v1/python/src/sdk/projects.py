"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def workflows_projects_locations_list(self, request: operations.WorkflowsProjectsLocationsListRequest, security: operations.WorkflowsProjectsLocationsListSecurity) -> operations.WorkflowsProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def workflows_projects_locations_operations_list(self, request: operations.WorkflowsProjectsLocationsOperationsListRequest, security: operations.WorkflowsProjectsLocationsOperationsListSecurity) -> operations.WorkflowsProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def workflows_projects_locations_workflows_create(self, request: operations.WorkflowsProjectsLocationsWorkflowsCreateRequest, security: operations.WorkflowsProjectsLocationsWorkflowsCreateSecurity) -> operations.WorkflowsProjectsLocationsWorkflowsCreateResponse:
        r"""Creates a new workflow. If a workflow with the specified name already exists in the specified project and location, the long running operation returns a ALREADY_EXISTS error."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsWorkflowsCreateRequest, base_url, '/v1/{parent}/workflows', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workflow_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsWorkflowsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsWorkflowsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workflows_projects_locations_workflows_delete(self, request: operations.WorkflowsProjectsLocationsWorkflowsDeleteRequest, security: operations.WorkflowsProjectsLocationsWorkflowsDeleteSecurity) -> operations.WorkflowsProjectsLocationsWorkflowsDeleteResponse:
        r"""Deletes a workflow with the specified name. This method also cancels and deletes all running executions of the workflow."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsWorkflowsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsWorkflowsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsWorkflowsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workflows_projects_locations_workflows_get(self, request: operations.WorkflowsProjectsLocationsWorkflowsGetRequest, security: operations.WorkflowsProjectsLocationsWorkflowsGetSecurity) -> operations.WorkflowsProjectsLocationsWorkflowsGetResponse:
        r"""Gets details of a single workflow."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsWorkflowsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsWorkflowsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsWorkflowsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Workflow])
                res.workflow = out

        return res

    def workflows_projects_locations_workflows_list(self, request: operations.WorkflowsProjectsLocationsWorkflowsListRequest, security: operations.WorkflowsProjectsLocationsWorkflowsListSecurity) -> operations.WorkflowsProjectsLocationsWorkflowsListResponse:
        r"""Lists workflows in a given project and location. The default order is not specified."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsWorkflowsListRequest, base_url, '/v1/{parent}/workflows', request)
        
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsWorkflowsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsWorkflowsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkflowsResponse])
                res.list_workflows_response = out

        return res

    def workflows_projects_locations_workflows_patch(self, request: operations.WorkflowsProjectsLocationsWorkflowsPatchRequest, security: operations.WorkflowsProjectsLocationsWorkflowsPatchSecurity) -> operations.WorkflowsProjectsLocationsWorkflowsPatchResponse:
        r"""Updates an existing workflow. Running this method has no impact on already running executions of the workflow. A new revision of the workflow might be created as a result of a successful update operation. In that case, the new revision is used in new workflow executions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkflowsProjectsLocationsWorkflowsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workflow_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkflowsProjectsLocationsWorkflowsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkflowsProjectsLocationsWorkflowsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    