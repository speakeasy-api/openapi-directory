// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPermissionsRequest struct {
	// Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// If set, return records where the specified field is equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
	Filter map[string]interface{} `queryParam:"style=form,explode=true,name=filter"`
	// If set, return records where the specified field is greater than the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
	FilterGt map[string]interface{} `queryParam:"style=form,explode=true,name=filter_gt"`
	// If set, return records where the specified field is greater than or equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
	FilterGteq map[string]interface{} `queryParam:"style=form,explode=true,name=filter_gteq"`
	// If set, return records where the specified field is equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
	FilterLike map[string]interface{} `queryParam:"style=form,explode=true,name=filter_like"`
	// If set, return records where the specified field is less than the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
	FilterLt map[string]interface{} `queryParam:"style=form,explode=true,name=filter_lt"`
	// If set, return records where the specified field is less than or equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
	FilterLteq map[string]interface{} `queryParam:"style=form,explode=true,name=filter_lteq"`
	// DEPRECATED: Group ID.  If provided, will scope permissions to this group. Use `filter[group_id]` instead.`
	GroupID *string `queryParam:"style=form,explode=true,name=group_id"`
	// If searching by user or group, also include user's permissions that are inherited from its groups?
	IncludeGroups *bool `queryParam:"style=form,explode=true,name=include_groups"`
	// DEPRECATED: Permission path.  If provided, will scope permissions to this path. Use `filter[path]` instead.
	Path *string `queryParam:"style=form,explode=true,name=path"`
	// Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[group_id]=desc`). Valid fields are `group_id`, `path`, `user_id` or `permission`.
	SortBy map[string]interface{} `queryParam:"style=form,explode=true,name=sort_by"`
	// DEPRECATED: User ID.  If provided, will scope permissions to this user. Use `filter[user_id]` instead.`
	UserID *string `queryParam:"style=form,explode=true,name=user_id"`
}

type GetPermissionsResponse struct {
	ContentType string
	// A list of Permissions objects.
	PermissionEntities []shared.PermissionEntity
	StatusCode         int
	RawResponse        *http.Response
}
