"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import earningsratecalculationtype_enum as shared_earningsratecalculationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EarningsLine:
    
    earnings_rate_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EarningsRateID') }})
    r"""Xero unique id for earnings rate"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""Earnings rate amount"""  
    annual_salary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnualSalary'), 'exclude': lambda f: f is None }})
    r"""Annual salary for earnings line"""  
    calculation_type: Optional[shared_earningsratecalculationtype_enum.EarningsRateCalculationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalculationType'), 'exclude': lambda f: f is None }})  
    fixed_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedAmount'), 'exclude': lambda f: f is None }})
    r"""Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed"""  
    normal_number_of_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NormalNumberOfUnits'), 'exclude': lambda f: f is None }})
    r"""Normal number of units for EarningsLine. Applicable when RateType is \\"MULTIPLE\\" """  
    number_of_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfUnits'), 'exclude': lambda f: f is None }})
    r"""Earnings rate number of units."""  
    number_of_units_per_week: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfUnitsPerWeek'), 'exclude': lambda f: f is None }})
    r"""number of units for earning line"""  
    rate_per_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RatePerUnit'), 'exclude': lambda f: f is None }})
    r"""Rate per unit of the EarningsLine."""  
    