"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import classificationsummary as shared_classificationsummary
from ..shared import exclusionrule as shared_exclusionrule
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class EntitlementDeliveryTypeEnum(str, Enum):
    STREAM = 'Stream'
    DOWNLOAD = 'Download'
    STREAM_OR_DOWNLOAD = 'StreamOrDownload'
    PROGRESSIVE_DOWNLOAD = 'ProgressiveDownload'
    NONE = 'None'

class EntitlementItemTypeEnum(str, Enum):
    r"""The type of item this entitlement is for."""
    MOVIE = 'movie'
    SHOW = 'show'
    SEASON = 'season'
    EPISODE = 'episode'
    PROGRAM = 'program'
    LINK = 'link'
    TRAILER = 'trailer'
    CHANNEL = 'channel'
    CUSTOM_ASSET = 'customAsset'

class EntitlementOwnershipEnum(str, Enum):
    SUBSCRIPTION = 'Subscription'
    FREE = 'Free'
    RENT = 'Rent'
    OWN = 'Own'
    NONE = 'None'

class EntitlementResolutionEnum(str, Enum):
    SD = 'SD'
    HD_720 = 'HD-720'
    HD_1080 = 'HD-1080'
    HD_4_K = 'HD-4K'
    EXTERNAL = 'External'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Entitlement:
    r"""The base type for both Offer and Entitlement."""
    
    delivery_type: EntitlementDeliveryTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryType') }})  
    ownership: EntitlementOwnershipEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownership') }})  
    resolution: EntitlementResolutionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolution') }})  
    scopes: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes') }})  
    activation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date of activation. If no date is defined the entitlement has not be activated."""  
    classification: Optional[shared_classificationsummary.ClassificationSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the entitlement was created."""  
    exclusion_rules: Optional[list[shared_exclusionrule.ExclusionRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclusionRules'), 'exclude': lambda f: f is None }})
    r"""Any specific playback exclusion rules."""  
    expiration_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the entitlement expires."""  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""The id of the item this entitlement is for."""  
    item_type: Optional[EntitlementItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemType'), 'exclude': lambda f: f is None }})
    r"""The type of item this entitlement is for."""  
    max_downloads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxDownloads'), 'exclude': lambda f: f is None }})
    r"""The maximum number of allowed downloads."""  
    max_plays: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPlays'), 'exclude': lambda f: f is None }})
    r"""The maximum number of allowed plays."""  
    media_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaDuration'), 'exclude': lambda f: f is None }})
    r"""The duration of the entitled media."""  
    plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('planId'), 'exclude': lambda f: f is None }})
    r"""The id of the plan this entitlement is for."""  
    play_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playCount'), 'exclude': lambda f: f is None }})
    r"""How many times the media has been played."""  
    play_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playPeriod'), 'exclude': lambda f: f is None }})
    r"""The length of time in minutes which the rental will last once played for the first time."""  
    remaining_downloads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingDownloads'), 'exclude': lambda f: f is None }})
    r"""How many more downloads of this media are available."""  
    rental_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rentalPeriod'), 'exclude': lambda f: f is None }})
    r"""The length of time in minutes which the rental will last once purchased."""  
    