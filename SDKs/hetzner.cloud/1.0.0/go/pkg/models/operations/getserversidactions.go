// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetServersIDActionsPathParams struct {
	// ID of the Resource
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// GetServersIDActionsSortParameterSortEnum - Can be used multiple times.
type GetServersIDActionsSortParameterSortEnum string

const (
	GetServersIDActionsSortParameterSortEnumID           GetServersIDActionsSortParameterSortEnum = "id"
	GetServersIDActionsSortParameterSortEnumIDAsc        GetServersIDActionsSortParameterSortEnum = "id:asc"
	GetServersIDActionsSortParameterSortEnumIDDesc       GetServersIDActionsSortParameterSortEnum = "id:desc"
	GetServersIDActionsSortParameterSortEnumCommand      GetServersIDActionsSortParameterSortEnum = "command"
	GetServersIDActionsSortParameterSortEnumCommandAsc   GetServersIDActionsSortParameterSortEnum = "command:asc"
	GetServersIDActionsSortParameterSortEnumCommandDesc  GetServersIDActionsSortParameterSortEnum = "command:desc"
	GetServersIDActionsSortParameterSortEnumStatus       GetServersIDActionsSortParameterSortEnum = "status"
	GetServersIDActionsSortParameterSortEnumStatusAsc    GetServersIDActionsSortParameterSortEnum = "status:asc"
	GetServersIDActionsSortParameterSortEnumStatusDesc   GetServersIDActionsSortParameterSortEnum = "status:desc"
	GetServersIDActionsSortParameterSortEnumProgress     GetServersIDActionsSortParameterSortEnum = "progress"
	GetServersIDActionsSortParameterSortEnumProgressAsc  GetServersIDActionsSortParameterSortEnum = "progress:asc"
	GetServersIDActionsSortParameterSortEnumProgressDesc GetServersIDActionsSortParameterSortEnum = "progress:desc"
	GetServersIDActionsSortParameterSortEnumStarted      GetServersIDActionsSortParameterSortEnum = "started"
	GetServersIDActionsSortParameterSortEnumStartedAsc   GetServersIDActionsSortParameterSortEnum = "started:asc"
	GetServersIDActionsSortParameterSortEnumStartedDesc  GetServersIDActionsSortParameterSortEnum = "started:desc"
	GetServersIDActionsSortParameterSortEnumFinished     GetServersIDActionsSortParameterSortEnum = "finished"
	GetServersIDActionsSortParameterSortEnumFinishedAsc  GetServersIDActionsSortParameterSortEnum = "finished:asc"
	GetServersIDActionsSortParameterSortEnumFinishedDesc GetServersIDActionsSortParameterSortEnum = "finished:desc"
)

func (e *GetServersIDActionsSortParameterSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "command":
		fallthrough
	case "command:asc":
		fallthrough
	case "command:desc":
		fallthrough
	case "status":
		fallthrough
	case "status:asc":
		fallthrough
	case "status:desc":
		fallthrough
	case "progress":
		fallthrough
	case "progress:asc":
		fallthrough
	case "progress:desc":
		fallthrough
	case "started":
		fallthrough
	case "started:asc":
		fallthrough
	case "started:desc":
		fallthrough
	case "finished":
		fallthrough
	case "finished:asc":
		fallthrough
	case "finished:desc":
		*e = GetServersIDActionsSortParameterSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServersIDActionsSortParameterSortEnum: %s", s)
	}
}

// GetServersIDActionsStatusParameterStatusEnum - Can be used multiple times, the response will contain only Actions with specified statuses
type GetServersIDActionsStatusParameterStatusEnum string

const (
	GetServersIDActionsStatusParameterStatusEnumRunning GetServersIDActionsStatusParameterStatusEnum = "running"
	GetServersIDActionsStatusParameterStatusEnumSuccess GetServersIDActionsStatusParameterStatusEnum = "success"
	GetServersIDActionsStatusParameterStatusEnumError   GetServersIDActionsStatusParameterStatusEnum = "error"
)

func (e *GetServersIDActionsStatusParameterStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "running":
		fallthrough
	case "success":
		fallthrough
	case "error":
		*e = GetServersIDActionsStatusParameterStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServersIDActionsStatusParameterStatusEnum: %s", s)
	}
}

type GetServersIDActionsQueryParams struct {
	// Can be used multiple times.
	Sort *GetServersIDActionsSortParameterSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times, the response will contain only Actions with specified statuses
	Status *GetServersIDActionsStatusParameterStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type GetServersIDActionsRequest struct {
	PathParams  GetServersIDActionsPathParams
	QueryParams GetServersIDActionsQueryParams
}

// GetServersIDActionsActionsResponseActionError - Error message for the Action if error occurred, otherwise null
type GetServersIDActionsActionsResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type GetServersIDActionsActionsResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// GetServersIDActionsActionsResponseActionStatusEnum - Status of the Action
type GetServersIDActionsActionsResponseActionStatusEnum string

const (
	GetServersIDActionsActionsResponseActionStatusEnumSuccess GetServersIDActionsActionsResponseActionStatusEnum = "success"
	GetServersIDActionsActionsResponseActionStatusEnumRunning GetServersIDActionsActionsResponseActionStatusEnum = "running"
	GetServersIDActionsActionsResponseActionStatusEnumError   GetServersIDActionsActionsResponseActionStatusEnum = "error"
)

func (e *GetServersIDActionsActionsResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = GetServersIDActionsActionsResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServersIDActionsActionsResponseActionStatusEnum: %s", s)
	}
}

type GetServersIDActionsActionsResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error GetServersIDActionsActionsResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []GetServersIDActionsActionsResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status GetServersIDActionsActionsResponseActionStatusEnum `json:"status"`
}

type GetServersIDActionsActionsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetServersIDActionsActionsResponseMeta struct {
	Pagination GetServersIDActionsActionsResponseMetaPagination `json:"pagination"`
}

// GetServersIDActionsActionsResponse - The `actions` key contains a list of Actions
type GetServersIDActionsActionsResponse struct {
	Actions []GetServersIDActionsActionsResponseAction `json:"actions"`
	Meta    *GetServersIDActionsActionsResponseMeta    `json:"meta,omitempty"`
}

type GetServersIDActionsResponse struct {
	// The `actions` key contains a list of Actions
	ActionsResponse *GetServersIDActionsActionsResponse
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}
