<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DefaultT 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return children from a given SHA1.  A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChildrenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChildrenResponse
     */
	public function getChildren(
        \OpenAPI\OpenAPI\Models\Operations\GetChildrenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChildrenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/children/{sha1}/{count}/{cursor}', \OpenAPI\OpenAPI\Models\Operations\GetChildrenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChildrenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Info about the hashlookup database
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInfoResponse
     */
	public function getInfo(
    ): \OpenAPI\OpenAPI\Models\Operations\GetInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lookup MD5.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLookupMd5Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLookupMd5Response
     */
	public function getLookupMd5(
        \OpenAPI\OpenAPI\Models\Operations\GetLookupMd5Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLookupMd5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/md5/{md5}', \OpenAPI\OpenAPI\Models\Operations\GetLookupMd5Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLookupMd5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Lookup SHA-1.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLookupSha1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLookupSha1Response
     */
	public function getLookupSha1(
        \OpenAPI\OpenAPI\Models\Operations\GetLookupSha1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLookupSha1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/sha1/{sha1}', \OpenAPI\OpenAPI\Models\Operations\GetLookupSha1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLookupSha1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Lookup SHA-256.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLookupSha256Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLookupSha256Response
     */
	public function getLookupSha256(
        \OpenAPI\OpenAPI\Models\Operations\GetLookupSha256Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLookupSha256Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/sha256/{sha256}', \OpenAPI\OpenAPI\Models\Operations\GetLookupSha256Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLookupSha256Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return parents from a given SHA1. A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetParentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetParentsResponse
     */
	public function getParents(
        \OpenAPI\OpenAPI\Models\Operations\GetParentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetParentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/parents/{sha1}/{count}/{cursor}', \OpenAPI\OpenAPI\Models\Operations\GetParentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetParentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a session key to keep search context. The session is attached to a name. After the session is created, the header `hashlookup_session` can be set to the session name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSessionCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSessionCreateResponse
     */
	public function getSessionCreate(
        \OpenAPI\OpenAPI\Models\Operations\GetSessionCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSessionCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/session/create/{name}', \OpenAPI\OpenAPI\Models\Operations\GetSessionCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSessionCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Return set of matching and non-matching hashes from a session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSessionMatchesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSessionMatchesResponse
     */
	public function getSessionMatches(
        \OpenAPI\OpenAPI\Models\Operations\GetSessionMatchesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSessionMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/session/get/{name}', \OpenAPI\OpenAPI\Models\Operations\GetSessionMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSessionMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Return the top 100 of most queried values.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStattopResponse
     */
	public function getStattop(
    ): \OpenAPI\OpenAPI\Models\Operations\GetStattopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stats/top');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStattopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Bulk search of MD5 hashes in a JSON array with the key 'hashes'.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBulkmd5Response
     */
	public function postBulkmd5(
    ): \OpenAPI\OpenAPI\Models\Operations\PostBulkmd5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bulk/md5');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBulkmd5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Bulk search of SHA1 hashes in a JSON array with the 'hashes'.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBulksha1Response
     */
	public function postBulksha1(
    ): \OpenAPI\OpenAPI\Models\Operations\PostBulksha1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bulk/sha1');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBulksha1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}