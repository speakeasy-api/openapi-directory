/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PlacedBetPart {
    /**
     * Human-friendly description of the bet
     */
    @JsonProperty("description")
    public String description;
    public PlacedBetPart withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eachWayDen")
    public Long eachWayDen;
    public PlacedBetPart withEachWayDen(Long eachWayDen) {
        this.eachWayDen = eachWayDen;
        return this;
    }
    
    /**
     * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eachWayNum")
    public Long eachWayNum;
    public PlacedBetPart withEachWayNum(Long eachWayNum) {
        this.eachWayNum = eachWayNum;
        return this;
    }
    
    /**
     * The Each-way places available for the bet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eachWayPlaces")
    public Long eachWayPlaces;
    public PlacedBetPart withEachWayPlaces(Long eachWayPlaces) {
        this.eachWayPlaces = eachWayPlaces;
        return this;
    }
    
    /**
     * The description of the event
     */
    @JsonProperty("eventDescription")
    public String eventDescription;
    public PlacedBetPart withEventDescription(String eventDescription) {
        this.eventDescription = eventDescription;
        return this;
    }
    
    /**
     * Unique identifier of the event
     */
    @JsonProperty("eventId")
    public String eventId;
    public PlacedBetPart withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * The description of the market within an event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventMarketDescription")
    public String eventMarketDescription;
    public PlacedBetPart withEventMarketDescription(String eventMarketDescription) {
        this.eventMarketDescription = eventMarketDescription;
        return this;
    }
    
    /**
     * The description of type of the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypeDescription")
    public String eventTypeDescription;
    public PlacedBetPart withEventTypeDescription(String eventTypeDescription) {
        this.eventTypeDescription = eventTypeDescription;
        return this;
    }
    
    /**
     * Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("handicap")
    public Double handicap;
    public PlacedBetPart withHandicap(Double handicap) {
        this.handicap = handicap;
        return this;
    }
    
    /**
     * The number of the bet
     */
    @JsonProperty("number")
    public Long number;
    public PlacedBetPart withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    /**
     * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
     */
    @JsonProperty("priceDen")
    public Long priceDen;
    public PlacedBetPart withPriceDen(Long priceDen) {
        this.priceDen = priceDen;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceFormatted")
    public PriceFormatted priceFormatted;
    public PlacedBetPart withPriceFormatted(PriceFormatted priceFormatted) {
        this.priceFormatted = priceFormatted;
        return this;
    }
    
    /**
     * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
     */
    @JsonProperty("priceNum")
    public Long priceNum;
    public PlacedBetPart withPriceNum(Long priceNum) {
        this.priceNum = priceNum;
        return this;
    }
    
    /**
     * The price type chosen when the bet was placed. For example: L (Win)
     */
    @JsonProperty("priceType")
    public String priceType;
    public PlacedBetPart withPriceType(String priceType) {
        this.priceType = priceType;
        return this;
    }
    
    /**
     * The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available
     */
    @JsonProperty("result")
    public String result;
    public PlacedBetPart withResult(String result) {
        this.result = result;
        return this;
    }
    
    /**
     * The official scale of deductions that apply when a runner is withdrawn
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rule4Deductions")
    public Double rule4Deductions;
    public PlacedBetPart withRule4Deductions(Double rule4Deductions) {
        this.rule4Deductions = rule4Deductions;
        return this;
    }
    
    /**
     * Unique identifier of the selection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectionId")
    public String selectionId;
    public PlacedBetPart withSelectionId(String selectionId) {
        this.selectionId = selectionId;
        return this;
    }
    
    /**
     * Time the event will start. For example: 2013-01-30 11:01:01
     */
    @JsonProperty("startDateTime")
    public String startDateTime;
    public PlacedBetPart withStartDateTime(String startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }
    
}
