"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import linkedpropertiesmodel as shared_linkedpropertiesmodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DiaryAppointmentModelRemindBeforeEnum(str, Enum):
    r"""The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind."""
    MIN = 'Min'
    MIN2 = 'Min2'
    MIN5 = 'Min5'
    MIN10 = 'Min10'
    MIN15 = 'Min15'
    MIN30 = 'Min30'
    MIN45 = 'Min45'
    HOUR = 'Hour'
    HOUR2 = 'Hour2'
    HOUR3 = 'Hour3'
    HOUR6 = 'Hour6'
    HOUR12 = 'Hour12'
    DAY = 'Day'
    DAY2 = 'Day2'
    DAY3 = 'Day3'
    WEEK = 'Week'
    NO_REMINDER = 'NoReminder'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DiaryAppointmentModel:
    r"""Represents a single diary appointment for a staff member."""
    
    appointment_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppointmentType'), 'exclude': lambda f: f is None }})
    r"""The diary appointment type."""  
    cancelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cancelled'), 'exclude': lambda f: f is None }})
    r"""Whether the appointment has been cancelled."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})
    r"""The appointment comments text."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date/time this appointment was created."""  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedBy'), 'exclude': lambda f: f is None }})
    r"""The staff member that created this appointment."""  
    end: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('End'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date/time of this appointment."""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ETag'), 'exclude': lambda f: f is None }})
    r"""A unique identifier defining the object and change revision."""  
    linked_properties: Optional[list[shared_linkedpropertiesmodel.LinkedPropertiesModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinkedProperties'), 'exclude': lambda f: f is None }})
    r"""A collection of properties linked to the appointment:-"""  
    next_recurring_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRecurringDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date appointment next repeats:-"""  
    oid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OID'), 'exclude': lambda f: f is None }})
    r"""The unique Object ID (OID)."""  
    recurrence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Recurrence'), 'exclude': lambda f: f is None }})
    r"""The reccurrence interval for the appointment:-"""  
    recurrence_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurrenceType'), 'exclude': lambda f: f is None }})
    r"""The type of recurrence:-"""  
    remind_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemindAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date/time to remind the staff member of this appointment."""  
    remind_before: Optional[DiaryAppointmentModelRemindBeforeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemindBefore'), 'exclude': lambda f: f is None }})
    r"""The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind."""  
    staff: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Staff'), 'exclude': lambda f: f is None }})
    r"""The staff member holding this appointment."""  
    start: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Start'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date/time of this appointment."""  
    subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subject'), 'exclude': lambda f: f is None }})
    r"""The appointment subject text."""  
    