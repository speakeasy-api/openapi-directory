"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthCheck:
    r"""Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment."""
    
    check_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkInterval'), 'exclude': lambda f: f is None }})
    r"""Interval between health checks."""  
    disable_health_check: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableHealthCheck'), 'exclude': lambda f: f is None }})
    r"""Whether to explicitly disable health checks for this instance."""  
    healthy_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthyThreshold'), 'exclude': lambda f: f is None }})
    r"""Number of consecutive successful health checks required before receiving traffic."""  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""Host header to send when performing an HTTP health check. Example: \\"myapp.appspot.com\\" """  
    restart_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restartThreshold'), 'exclude': lambda f: f is None }})
    r"""Number of consecutive failed health checks required before an instance is restarted."""  
    timeout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})
    r"""Time before the health check is considered failed."""  
    unhealthy_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unhealthyThreshold'), 'exclude': lambda f: f is None }})
    r"""Number of consecutive failed health checks required before removing traffic."""  
    