"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Project:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_project_analyses(self, request: operations.GetProjectAnalysesRequest) -> operations.GetProjectAnalysesResponse:
        r"""List all analyses for a project
        List all analyses for a project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectAnalysesRequest, base_url, '/analyses/{username}/{project_slug}', request)
        
        query_params = utils.get_query_params(operations.GetProjectAnalysesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectAnalysesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectAnalyses200ApplicationJSON])
                res.get_project_analyses_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultPayload])
                res.default_payload = out

        return res

    def get_project_urls_aggs(self, request: operations.GetProjectUrlsAggsRequest) -> operations.GetProjectUrlsAggsResponse:
        r"""Project Query aggregator
        Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectUrlsAggsRequest, base_url, '/projects/{username}/{project_slug}/urls/aggs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GetProjectUrlsAggsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectUrlsAggsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.default = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultPayload])
                res.default_payload = out

        return res

    def get_saved_filter(self, request: operations.GetSavedFilterRequest) -> operations.GetSavedFilterResponse:
        r"""Retrieves a specific saved filter's name, ID and filter value
        Retrieves a specific saved filter's name, ID and filter value
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSavedFilterRequest, base_url, '/projects/{username}/{project_slug}/filters/{identifier}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSavedFilterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectSavedFilter])
                res.project_saved_filter = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultPayload])
                res.default_payload = out

        return res

    def get_saved_filters(self, request: operations.GetSavedFiltersRequest) -> operations.GetSavedFiltersResponse:
        r"""List all the project's saved filters (each filter's name, ID and filter value)
        List all the project's saved filters (each filter's name, ID and filter value)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSavedFiltersRequest, base_url, '/projects/{username}/{project_slug}/filters', request)
        
        query_params = utils.get_query_params(operations.GetSavedFiltersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSavedFiltersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSavedFilters200ApplicationJSON])
                res.get_saved_filters_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultPayload])
                res.default_payload = out

        return res

    def test_url_rewriting_rules(self, request: operations.TestURLRewritingRulesRequest) -> operations.TestURLRewritingRulesResponse:
        r"""Match and replace parts of a URL based on rules passed in POST data
        Match and replace parts of a URL based on rules passed in POST data.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestURLRewritingRulesRequest, base_url, '/projects/{username}/{project_slug}/features/url_rewriting/rules_validator', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestURLRewritingRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.URLRewritingRulesSerializer])
                res.url_rewriting_rules_serializer = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DefaultPayload])
                res.default_payload = out

        return res

    