// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DefaultTweetAttachments - Specifies the type of attachments (if any) present in this Tweet.
type DefaultTweetAttachments struct {
	// A list of Media Keys for each one of the media attachments (if media are attached).
	MediaKeys []string `json:"media_keys,omitempty"`
	// A list of poll IDs (if polls are attached).
	PollIds []string `json:"poll_ids,omitempty"`
}

// DefaultTweetGeo - The location tagged on the Tweet, if the user provided one.
type DefaultTweetGeo struct {
	// A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.
	Coordinates *Point `json:"coordinates,omitempty"`
	// The identifier for this place
	PlaceID *string `json:"place_id,omitempty"`
}

type DefaultTweetReferencedTweetsTypeEnum string

const (
	DefaultTweetReferencedTweetsTypeEnumRetweeted DefaultTweetReferencedTweetsTypeEnum = "retweeted"
	DefaultTweetReferencedTweetsTypeEnumQuoted    DefaultTweetReferencedTweetsTypeEnum = "quoted"
	DefaultTweetReferencedTweetsTypeEnumRepliedTo DefaultTweetReferencedTweetsTypeEnum = "replied_to"
)

func (e *DefaultTweetReferencedTweetsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "retweeted":
		fallthrough
	case "quoted":
		fallthrough
	case "replied_to":
		*e = DefaultTweetReferencedTweetsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultTweetReferencedTweetsTypeEnum: %s", s)
	}
}

type DefaultTweetReferencedTweets struct {
	// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	ID   string                               `json:"id"`
	Type DefaultTweetReferencedTweetsTypeEnum `json:"type"`
}

// DefaultTweet - This is the list of fields returned by default for a Tweet object, for example when `format` or `tweet.format` are omitted, or when they are set to `default`.
type DefaultTweet struct {
	// Specifies the type of attachments (if any) present in this Tweet.
	Attachments *DefaultTweetAttachments `json:"attachments,omitempty"`
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	AuthorID string `json:"author_id"`
	// Creation time of the Tweet.
	CreatedAt time.Time         `json:"created_at"`
	Entities  *FullTextEntities `json:"entities,omitempty"`
	Format    string            `json:"format"`
	// The location tagged on the Tweet, if the user provided one.
	Geo *DefaultTweetGeo `json:"geo,omitempty"`
	// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	ID string `json:"id"`
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	InReplyToUserID *string `json:"in_reply_to_user_id,omitempty"`
	// A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
	ReferencedTweets []DefaultTweetReferencedTweets `json:"referenced_tweets,omitempty"`
	// The content of the Tweet.
	Text string `json:"text"`
	// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
	Withheld *TweetWithheld `json:"withheld,omitempty"`
}
