"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NameAndKindKindEnum(str, Enum):
    r"""Counter aggregation kind."""
    INVALID = 'INVALID'
    SUM = 'SUM'
    MAX = 'MAX'
    MIN = 'MIN'
    MEAN = 'MEAN'
    OR = 'OR'
    AND = 'AND'
    SET = 'SET'
    DISTRIBUTION = 'DISTRIBUTION'
    LATEST_VALUE = 'LATEST_VALUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NameAndKind:
    r"""Basic metadata about a counter."""
    
    kind: Optional[NameAndKindKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Counter aggregation kind."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the counter."""  
    