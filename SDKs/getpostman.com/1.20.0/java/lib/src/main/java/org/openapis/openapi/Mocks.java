/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Mocks {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Mocks(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * All Mocks
     * This endpoint fetches all the mocks that you have created.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AllMocksResponse allMocks() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/mocks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AllMocksResponse res = new org.openapis.openapi.models.operations.AllMocksResponse(contentType, httpRes.statusCode()) {{
            allMocks200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AllMocks200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AllMocks200ApplicationJSON.class);
                res.allMocks200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create Mock
     * This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.
     * 
     * You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMockResponse createMock(org.openapis.openapi.models.operations.CreateMockRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/mocks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMockResponse res = new org.openapis.openapi.models.operations.CreateMockResponse(contentType, httpRes.statusCode()) {{
            createMock200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateMock200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateMock200ApplicationJSON.class);
                res.createMock200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete Mock
     * This endpoint allows you to delete an existing mock using its `uid`.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMockResponse deleteMock(org.openapis.openapi.models.operations.DeleteMockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMockRequest.class, baseUrl, "/mocks/{mock_uid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMockResponse res = new org.openapis.openapi.models.operations.DeleteMockResponse(contentType, httpRes.statusCode()) {{
            deleteMock200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteMock200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteMock200ApplicationJSON.class);
                res.deleteMock200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Publish Mock
     * This endpoint publishes the mock you have created using its `uid`
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key ` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PublishMockResponse publishMock(org.openapis.openapi.models.operations.PublishMockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PublishMockRequest.class, baseUrl, "/mocks/{mock_uid}/publish", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PublishMockResponse res = new org.openapis.openapi.models.operations.PublishMockResponse(contentType, httpRes.statusCode()) {{
            publishMock200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PublishMock200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PublishMock200ApplicationJSON.class);
                res.publishMock200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Single Mock
     * This endpoint fetches you the basic information about a single mock using its `uid`.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SingleMockResponse singleMock(org.openapis.openapi.models.operations.SingleMockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SingleMockRequest.class, baseUrl, "/mocks/{mock_uid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SingleMockResponse res = new org.openapis.openapi.models.operations.SingleMockResponse(contentType, httpRes.statusCode()) {{
            singleMock200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SingleMock200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SingleMock200ApplicationJSON.class);
                res.singleMock200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Unpublish Mock
     * This endpoint unpublishes the mock you have created using its `uid`
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key ` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UnpublishMockResponse unpublishMock(org.openapis.openapi.models.operations.UnpublishMockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UnpublishMockRequest.class, baseUrl, "/mocks/{mock_uid}/unpublish", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UnpublishMockResponse res = new org.openapis.openapi.models.operations.UnpublishMockResponse(contentType, httpRes.statusCode()) {{
            unpublishMock200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UnpublishMock200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UnpublishMock200ApplicationJSON.class);
                res.unpublishMock200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update Mock
     * This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,
     * * name
     * * environment
     * * description
     * * private
     * * versionTag
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMockResponse updateMock(org.openapis.openapi.models.operations.UpdateMockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMockRequest.class, baseUrl, "/mocks/{mock_uid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMockResponse res = new org.openapis.openapi.models.operations.UpdateMockResponse(contentType, httpRes.statusCode()) {{
            updateMock200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateMock200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateMock200ApplicationJSON.class);
                res.updateMock200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}