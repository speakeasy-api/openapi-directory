"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class PushNotificationTest:
    r"""Push Notification Test Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def test_push_amazon_notifications_using_post(self, request: operations.TestPushAmazonNotificationsUsingPOSTRequest) -> operations.TestPushAmazonNotificationsUsingPOSTResponse:
        r"""testPushAmazonNotifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestPushAmazonNotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/amazon', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestPushAmazonNotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_push_apple_dev_notifications_using_post(self, request: operations.TestPushAppleDevNotificationsUsingPOSTRequest) -> operations.TestPushAppleDevNotificationsUsingPOSTResponse:
        r"""testPushAppleDevNotifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestPushAppleDevNotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/development', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestPushAppleDevNotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_push_apple_prod_notifications_using_post(self, request: operations.TestPushAppleProdNotificationsUsingPOSTRequest) -> operations.TestPushAppleProdNotificationsUsingPOSTResponse:
        r"""testPushAppleProdNotifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestPushAppleProdNotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/production', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestPushAppleProdNotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_push_google_notifications_using_post(self, request: operations.TestPushGoogleNotificationsUsingPOSTRequest) -> operations.TestPushGoogleNotificationsUsingPOSTResponse:
        r"""testPushGoogleNotifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestPushGoogleNotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/google', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestPushGoogleNotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_viber_integration_notifications_using_post(self, request: operations.TestViberIntegrationNotificationsUsingPOSTRequest) -> operations.TestViberIntegrationNotificationsUsingPOSTResponse:
        r"""testViberIntegrationNotifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestViberIntegrationNotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/integration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestViberIntegrationNotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_viber_production_notifications_using_post(self, request: operations.TestViberProductionNotificationsUsingPOSTRequest) -> operations.TestViberProductionNotificationsUsingPOSTResponse:
        r"""testViberProductionNotifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestViberProductionNotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/production', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestViberProductionNotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_windows8_notifications_using_post(self, request: operations.TestWindows8NotificationsUsingPOSTRequest) -> operations.TestWindows8NotificationsUsingPOSTResponse:
        r"""testWindows8Notifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestWindows8NotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windows8', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestWindows8NotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def test_windows_phone8_notifications_using_post(self, request: operations.TestWindowsPhone8NotificationsUsingPOSTRequest) -> operations.TestWindowsPhone8NotificationsUsingPOSTResponse:
        r"""testWindowsPhone8Notifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestWindowsPhone8NotificationsUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windowsPhone8', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "push_notification_test_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestWindowsPhone8NotificationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    