/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

public class GetVolumesId200ApplicationJSONVolume {
    /**
     * Point in time when the Resource was created (in ISO-8601 format)
     */
    @JsonProperty("created")
    public String created;

    public GetVolumesId200ApplicationJSONVolume withCreated(String created) {
        this.created = created;
        return this;
    }
    
    /**
     * Filesystem of the Volume if formatted on creation, null if not formatted on creation
     */
    @JsonProperty("format")
    public String format;

    public GetVolumesId200ApplicationJSONVolume withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * ID of the Resource
     */
    @JsonProperty("id")
    public Long id;

    public GetVolumesId200ApplicationJSONVolume withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * User-defined labels (key-value pairs)
     */
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public GetVolumesId200ApplicationJSONVolume withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Device path on the file system for the Volume
     */
    @JsonProperty("linux_device")
    public String linuxDevice;

    public GetVolumesId200ApplicationJSONVolume withLinuxDevice(String linuxDevice) {
        this.linuxDevice = linuxDevice;
        return this;
    }
    
    /**
     * Location of the Volume. Volume can only be attached to Servers in the same Location.
     */
    @JsonProperty("location")
    public GetVolumesId200ApplicationJSONVolumeLocation location;

    public GetVolumesId200ApplicationJSONVolume withLocation(GetVolumesId200ApplicationJSONVolumeLocation location) {
        this.location = location;
        return this;
    }
    
    /**
     * Name of the Resource. Must be unique per Project.
     */
    @JsonProperty("name")
    public String name;

    public GetVolumesId200ApplicationJSONVolume withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Protection configuration for the Resource
     */
    @JsonProperty("protection")
    public GetVolumesId200ApplicationJSONVolumeProtection protection;

    public GetVolumesId200ApplicationJSONVolume withProtection(GetVolumesId200ApplicationJSONVolumeProtection protection) {
        this.protection = protection;
        return this;
    }
    
    /**
     * ID of the Server the Volume is attached to, null if it is not attached at all
     */
    @JsonProperty("server")
    public Long server;

    public GetVolumesId200ApplicationJSONVolume withServer(Long server) {
        this.server = server;
        return this;
    }
    
    /**
     * Size in GB of the Volume
     */
    @JsonProperty("size")
    public Double size;

    public GetVolumesId200ApplicationJSONVolume withSize(Double size) {
        this.size = size;
        return this;
    }
    
    /**
     * Current status of the Volume
     */
    @JsonProperty("status")
    public GetVolumesId200ApplicationJSONVolumeStatusEnum status;

    public GetVolumesId200ApplicationJSONVolume withStatus(GetVolumesId200ApplicationJSONVolumeStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public GetVolumesId200ApplicationJSONVolume(@JsonProperty("created") String created, @JsonProperty("format") String format, @JsonProperty("id") Long id, @JsonProperty("labels") java.util.Map<String, String> labels, @JsonProperty("linux_device") String linuxDevice, @JsonProperty("location") GetVolumesId200ApplicationJSONVolumeLocation location, @JsonProperty("name") String name, @JsonProperty("protection") GetVolumesId200ApplicationJSONVolumeProtection protection, @JsonProperty("server") Long server, @JsonProperty("size") Double size, @JsonProperty("status") GetVolumesId200ApplicationJSONVolumeStatusEnum status) {
        this.created = created;
        this.format = format;
        this.id = id;
        this.labels = labels;
        this.linuxDevice = linuxDevice;
        this.location = location;
        this.name = name;
        this.protection = protection;
        this.server = server;
        this.size = size;
        this.status = status;
  }
}
