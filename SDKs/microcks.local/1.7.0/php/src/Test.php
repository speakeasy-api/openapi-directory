<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Test 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new Test
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTestResponse
     */
	public function createTest(
        \OpenAPI\OpenAPI\Models\Shared\TestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get events for TestCase
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByTestCaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByTestCaseResponse
     */
	public function getEventsByTestCase(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByTestCaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByTestCaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests/{id}/events/{testCaseId}', \OpenAPI\OpenAPI\Models\Operations\GetEventsByTestCaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByTestCaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unidirectionalEvents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UnidirectionalEvent>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get messages for TestCase
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseResponse
     */
	public function getMessagesByTestCase(
        \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests/{id}/messages/{testCaseId}', \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMessagesByTestCaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestResponsePairs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RequestResponsePair>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get TestResult
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTestResultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTestResultSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTestResultResponse
     */
	public function getTestResult(
        \OpenAPI\OpenAPI\Models\Operations\GetTestResultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTestResultSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTestResultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTestResultRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTestResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get TestResults by Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceResponse
     */
	public function getTestResultsByService(
        \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests/service/{serviceId}', \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TestResult>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the TestResults for Service counter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterResponse
     */
	public function getTestResultsByServiceCounter(
        \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests/service/{serviceId}/count', \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTestResultsByServiceCounterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->counter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Counter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report and create a new TestCaseResult
     * 
     * Report a TestCaseResult (typically used by a Test runner)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportTestCaseResultRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReportTestCaseResultResponse
     */
	public function reportTestCaseResult(
        \OpenAPI\OpenAPI\Models\Operations\ReportTestCaseResultRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReportTestCaseResultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tests/{id}/testCaseResult', \OpenAPI\OpenAPI\Models\Operations\ReportTestCaseResultRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testCaseReturnDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReportTestCaseResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testCaseResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestCaseResult', 'json');
            }
        }

        return $response;
    }
}