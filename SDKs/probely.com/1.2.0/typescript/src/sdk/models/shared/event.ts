/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventObjectTypeEnum } from "./eventobjecttypeenum";
import { EventTypeEnum } from "./eventtypeenum";
import { Webhook } from "./webhook";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A Probely event
 */
export class Event extends SpeakeasyBase {
  /**
   * Event object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: any;

  /**
   * Event type:
   *
   * @remarks
   * - `user_created` new user added to account
   * - `user_deleted` user deleted from account
   * - `target_created` new target added to account
   * - `target_deleted` target deleted from account
   * - `target_verified` target ownership verified
   * - `target_verification_failed` target ownership verification failed
   * - `scan_started` scan started on target
   * - `scan_canceled` scan on target canceled
   * - `scan_completed` scan finished with successfuly
   * - `scan_failed` scan finished unsuccessfuly
   * - `finding_detected` new finding detected (not found before)
   * - `finding_fixed` finding was fixed
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_type" })
  eventType?: EventTypeEnum;

  /**
   * Object id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of object in the event content.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "object_type" })
  objectType?: EventObjectTypeEnum;

  /**
   * Date time of when the event occurred
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ocurred_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  ocurredAt?: Date;

  @SpeakeasyMetadata({ elemType: Webhook })
  @Expose({ name: "webhooks" })
  @Type(() => Webhook)
  webhooks?: Webhook[];
}
