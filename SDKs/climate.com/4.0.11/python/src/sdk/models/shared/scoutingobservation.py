"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import geometry as shared_geometry
from ..shared import scoutingtag as shared_scoutingtag
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils

class ScoutingObservationLocationDisplayColorEnum(str, Enum):
    r"""Color of scouting pin assigned in the Climate FieldView app.
    Limited in the Ux to a set of RGB values.
    * #307af7
    * #38d753
    * #b037e4
    * #ef3e3e
    * #f7ec41
    * #ff8439
    * #808080
    """
    NUMBER_307AF7 = '#307af7'
    NUMBER_38D753 = '#38d753'
    NUMBER_B037E4 = '#b037e4'
    NUMBER_EF3E3E = '#ef3e3e'
    NUMBER_F7EC41 = '#f7ec41'
    NUMBER_FF8439 = '#ff8439'
    NUMBER_808080 = '#808080'

class ScoutingObservationStatusEnum(str, Enum):
    r"""The status of the scouting observation For example : ACTIVE, DELETED"""
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'

class ScoutingObservationTimespanEnum(str, Enum):
    r"""Permanent or seasonal"""
    PERMANENT = 'PERMANENT'
    SEASONAL = 'SEASONAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScoutingObservation:
    r"""Returns the requested scouting observation."""
    
    end_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339)."""  
    field_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldIds') }})
    r"""Array of field ids associated with this observation."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The id of a scouting observation."""  
    location: shared_geometry.Geometry = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""GeoJSON"""  
    location_display_color: ScoutingObservationLocationDisplayColorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationDisplayColor') }})
    r"""Color of scouting pin assigned in the Climate FieldView app.
    Limited in the Ux to a set of RGB values.
    * #307af7
    * #38d753
    * #b037e4
    * #ef3e3e
    * #f7ec41
    * #ff8439
    * #808080
    """  
    note: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note') }})
    r"""The text of the scouting observation. Maximum of 4000 characters."""  
    start_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339)."""  
    status: ScoutingObservationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the scouting observation For example : ACTIVE, DELETED"""  
    tags: list[shared_scoutingtag.ScoutingTag] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag."""  
    timespan: ScoutingObservationTimespanEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timespan') }})
    r"""Permanent or seasonal"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed."""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339)."""  
    