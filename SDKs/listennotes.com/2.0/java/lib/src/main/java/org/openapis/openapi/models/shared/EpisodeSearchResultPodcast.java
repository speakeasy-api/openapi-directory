/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EpisodeSearchResultPodcast - The podcast that this episode belongs to.
 */
public class EpisodeSearchResultPodcast {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genre_ids")
    public Long[] genreIds;

    public EpisodeSearchResultPodcast withGenreIds(Long[] genreIds) {
        this.genreIds = genreIds;
        return this;
    }
    
    /**
     * Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public EpisodeSearchResultPodcast withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's
     * a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
     * low resolution image (300x300).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public EpisodeSearchResultPodcast withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100.
     * If the score is not available, it'll be null. Learn more at listennotes.com/listen-score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listen_score")
    public Long listenScore;

    public EpisodeSearchResultPodcast withListenScore(Long listenScore) {
        this.listenScore = listenScore;
        return this;
    }
    
    /**
     * The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world.
     * For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score.
     * If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listen_score_global_rank")
    public String listenScoreGlobalRank;

    public EpisodeSearchResultPodcast withListenScoreGlobalRank(String listenScoreGlobalRank) {
        this.listenScoreGlobalRank = listenScoreGlobalRank;
        return this;
    }
    
    /**
     * The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listennotes_url")
    public String listennotesUrl;

    public EpisodeSearchResultPodcast withListennotesUrl(String listennotesUrl) {
        this.listennotesUrl = listennotesUrl;
        return this;
    }
    
    /**
     * Highlighted segment of this podcast's publisher name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisher_highlighted")
    public String publisherHighlighted;

    public EpisodeSearchResultPodcast withPublisherHighlighted(String publisherHighlighted) {
        this.publisherHighlighted = publisherHighlighted;
        return this;
    }
    
    /**
     * Plain text of this podcast's publisher name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisher_original")
    public String publisherOriginal;

    public EpisodeSearchResultPodcast withPublisherOriginal(String publisherOriginal) {
        this.publisherOriginal = publisherOriginal;
        return this;
    }
    
    /**
     * Thumbnail image url for this podcast's artwork (300x300).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    public String thumbnail;

    public EpisodeSearchResultPodcast withThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
        return this;
    }
    
    /**
     * Highlighted segment of podcast name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title_highlighted")
    public String titleHighlighted;

    public EpisodeSearchResultPodcast withTitleHighlighted(String titleHighlighted) {
        this.titleHighlighted = titleHighlighted;
        return this;
    }
    
    /**
     * Plain text of podcast name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title_original")
    public String titleOriginal;

    public EpisodeSearchResultPodcast withTitleOriginal(String titleOriginal) {
        this.titleOriginal = titleOriginal;
        return this;
    }
    
    public EpisodeSearchResultPodcast(){}
}
