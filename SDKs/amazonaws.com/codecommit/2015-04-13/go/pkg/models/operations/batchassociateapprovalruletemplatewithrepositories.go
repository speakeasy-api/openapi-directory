// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum
type BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum string

const (
	BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnumCodeCommit20150413BatchAssociateApprovalRuleTemplateWithRepositories BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum = "CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories"
)

func (e *BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories":
		*e = BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum: %s", s)
	}
}

type BatchAssociateApprovalRuleTemplateWithRepositoriesRequest struct {
	BatchAssociateApprovalRuleTemplateWithRepositoriesInput shared.BatchAssociateApprovalRuleTemplateWithRepositoriesInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                                           *string                                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                                       *string                                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                                          *string                                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                                *string                                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                                       *string                                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                                           *string                                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                                       *string                                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                                              BatchAssociateApprovalRuleTemplateWithRepositoriesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchAssociateApprovalRuleTemplateWithRepositoriesResponse struct {
	// ApprovalRuleTemplateDoesNotExistException
	ApprovalRuleTemplateDoesNotExistException interface{}
	// ApprovalRuleTemplateNameRequiredException
	ApprovalRuleTemplateNameRequiredException interface{}
	// Success
	BatchAssociateApprovalRuleTemplateWithRepositoriesOutput *shared.BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	ContentType                                              string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidApprovalRuleTemplateNameException
	InvalidApprovalRuleTemplateNameException interface{}
	// MaximumRepositoryNamesExceededException
	MaximumRepositoryNamesExceededException interface{}
	// RepositoryNamesRequiredException
	RepositoryNamesRequiredException interface{}
	StatusCode                       int
	RawResponse                      *http.Response
}
