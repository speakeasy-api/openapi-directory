// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExecutorStateEnum string

const (
	ExecutorStateEnumCreating    ExecutorStateEnum = "CREATING"
	ExecutorStateEnumCreated     ExecutorStateEnum = "CREATED"
	ExecutorStateEnumRegistered  ExecutorStateEnum = "REGISTERED"
	ExecutorStateEnumTerminating ExecutorStateEnum = "TERMINATING"
	ExecutorStateEnumTerminated  ExecutorStateEnum = "TERMINATED"
	ExecutorStateEnumFailed      ExecutorStateEnum = "FAILED"
)

func (e ExecutorStateEnum) ToPointer() *ExecutorStateEnum {
	return &e
}

func (e *ExecutorStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "CREATED":
		fallthrough
	case "REGISTERED":
		fallthrough
	case "TERMINATING":
		fallthrough
	case "TERMINATED":
		fallthrough
	case "FAILED":
		*e = ExecutorStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutorStateEnum: %v", v)
	}
}
