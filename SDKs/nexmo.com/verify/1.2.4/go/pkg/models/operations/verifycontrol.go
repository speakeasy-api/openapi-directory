// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type VerifyControlRequest struct {
	ControlRequest shared.ControlRequest `request:"mediaType=application/x-www-form-urlencoded"`
	// The response format.
	Format shared.FormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type VerifyControl200TextXMLType string

const (
	VerifyControl200TextXMLTypeControlResponse      VerifyControl200TextXMLType = "controlResponse"
	VerifyControl200TextXMLTypeControlErrorResponse VerifyControl200TextXMLType = "controlErrorResponse"
)

type VerifyControl200TextXML struct {
	ControlResponse      *shared.ControlResponse
	ControlErrorResponse *shared.ControlErrorResponse

	Type VerifyControl200TextXMLType
}

func CreateVerifyControl200TextXMLControlResponse(controlResponse shared.ControlResponse) VerifyControl200TextXML {
	typ := VerifyControl200TextXMLTypeControlResponse

	return VerifyControl200TextXML{
		ControlResponse: &controlResponse,
		Type:            typ,
	}
}

func CreateVerifyControl200TextXMLControlErrorResponse(controlErrorResponse shared.ControlErrorResponse) VerifyControl200TextXML {
	typ := VerifyControl200TextXMLTypeControlErrorResponse

	return VerifyControl200TextXML{
		ControlErrorResponse: &controlErrorResponse,
		Type:                 typ,
	}
}

func (u *VerifyControl200TextXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	controlResponse := new(shared.ControlResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&controlResponse); err == nil {
		u.ControlResponse = controlResponse
		u.Type = VerifyControl200TextXMLTypeControlResponse
		return nil
	}

	controlErrorResponse := new(shared.ControlErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&controlErrorResponse); err == nil {
		u.ControlErrorResponse = controlErrorResponse
		u.Type = VerifyControl200TextXMLTypeControlErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VerifyControl200TextXML) MarshalJSON() ([]byte, error) {
	if u.ControlResponse != nil {
		return json.Marshal(u.ControlResponse)
	}

	if u.ControlErrorResponse != nil {
		return json.Marshal(u.ControlErrorResponse)
	}

	return nil, nil
}

type VerifyControl200ApplicationJSONType string

const (
	VerifyControl200ApplicationJSONTypeControlResponse      VerifyControl200ApplicationJSONType = "controlResponse"
	VerifyControl200ApplicationJSONTypeControlErrorResponse VerifyControl200ApplicationJSONType = "controlErrorResponse"
)

type VerifyControl200ApplicationJSON struct {
	ControlResponse      *shared.ControlResponse
	ControlErrorResponse *shared.ControlErrorResponse

	Type VerifyControl200ApplicationJSONType
}

func CreateVerifyControl200ApplicationJSONControlResponse(controlResponse shared.ControlResponse) VerifyControl200ApplicationJSON {
	typ := VerifyControl200ApplicationJSONTypeControlResponse

	return VerifyControl200ApplicationJSON{
		ControlResponse: &controlResponse,
		Type:            typ,
	}
}

func CreateVerifyControl200ApplicationJSONControlErrorResponse(controlErrorResponse shared.ControlErrorResponse) VerifyControl200ApplicationJSON {
	typ := VerifyControl200ApplicationJSONTypeControlErrorResponse

	return VerifyControl200ApplicationJSON{
		ControlErrorResponse: &controlErrorResponse,
		Type:                 typ,
	}
}

func (u *VerifyControl200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	controlResponse := new(shared.ControlResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&controlResponse); err == nil {
		u.ControlResponse = controlResponse
		u.Type = VerifyControl200ApplicationJSONTypeControlResponse
		return nil
	}

	controlErrorResponse := new(shared.ControlErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&controlErrorResponse); err == nil {
		u.ControlErrorResponse = controlErrorResponse
		u.Type = VerifyControl200ApplicationJSONTypeControlErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VerifyControl200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ControlResponse != nil {
		return json.Marshal(u.ControlResponse)
	}

	if u.ControlErrorResponse != nil {
		return json.Marshal(u.ControlErrorResponse)
	}

	return nil, nil
}

type VerifyControlResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	VerifyControl200ApplicationJSONOneOf *VerifyControl200ApplicationJSON
}
