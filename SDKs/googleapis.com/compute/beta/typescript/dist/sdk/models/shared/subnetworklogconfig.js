"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetworkLogConfig = exports.SubnetworkLogConfigMetadataEnum = exports.SubnetworkLogConfigAggregationIntervalEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
 */
var SubnetworkLogConfigAggregationIntervalEnum;
(function (SubnetworkLogConfigAggregationIntervalEnum) {
    SubnetworkLogConfigAggregationIntervalEnum["Interval10Min"] = "INTERVAL_10_MIN";
    SubnetworkLogConfigAggregationIntervalEnum["Interval15Min"] = "INTERVAL_15_MIN";
    SubnetworkLogConfigAggregationIntervalEnum["Interval1Min"] = "INTERVAL_1_MIN";
    SubnetworkLogConfigAggregationIntervalEnum["Interval30Sec"] = "INTERVAL_30_SEC";
    SubnetworkLogConfigAggregationIntervalEnum["Interval5Min"] = "INTERVAL_5_MIN";
    SubnetworkLogConfigAggregationIntervalEnum["Interval5Sec"] = "INTERVAL_5_SEC";
})(SubnetworkLogConfigAggregationIntervalEnum = exports.SubnetworkLogConfigAggregationIntervalEnum || (exports.SubnetworkLogConfigAggregationIntervalEnum = {}));
/**
 * Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
 */
var SubnetworkLogConfigMetadataEnum;
(function (SubnetworkLogConfigMetadataEnum) {
    SubnetworkLogConfigMetadataEnum["CustomMetadata"] = "CUSTOM_METADATA";
    SubnetworkLogConfigMetadataEnum["ExcludeAllMetadata"] = "EXCLUDE_ALL_METADATA";
    SubnetworkLogConfigMetadataEnum["IncludeAllMetadata"] = "INCLUDE_ALL_METADATA";
})(SubnetworkLogConfigMetadataEnum = exports.SubnetworkLogConfigMetadataEnum || (exports.SubnetworkLogConfigMetadataEnum = {}));
/**
 * The available logging options for this subnetwork.
 */
var SubnetworkLogConfig = /** @class */ (function (_super) {
    __extends(SubnetworkLogConfig, _super);
    function SubnetworkLogConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "aggregationInterval" }),
        __metadata("design:type", String)
    ], SubnetworkLogConfig.prototype, "aggregationInterval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enable" }),
        __metadata("design:type", Boolean)
    ], SubnetworkLogConfig.prototype, "enable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "filterExpr" }),
        __metadata("design:type", String)
    ], SubnetworkLogConfig.prototype, "filterExpr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "flowSampling" }),
        __metadata("design:type", Number)
    ], SubnetworkLogConfig.prototype, "flowSampling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        __metadata("design:type", String)
    ], SubnetworkLogConfig.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadataFields" }),
        __metadata("design:type", Array)
    ], SubnetworkLogConfig.prototype, "metadataFields", void 0);
    return SubnetworkLogConfig;
}(utils_1.SpeakeasyBase));
exports.SubnetworkLogConfig = SubnetworkLogConfig;
