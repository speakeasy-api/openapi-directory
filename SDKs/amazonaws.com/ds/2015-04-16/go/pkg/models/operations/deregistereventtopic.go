// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeregisterEventTopicXAmzTargetEnum
type DeregisterEventTopicXAmzTargetEnum string

const (
	DeregisterEventTopicXAmzTargetEnumDirectoryService20150416DeregisterEventTopic DeregisterEventTopicXAmzTargetEnum = "DirectoryService_20150416.DeregisterEventTopic"
)

func (e *DeregisterEventTopicXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DirectoryService_20150416.DeregisterEventTopic":
		*e = DeregisterEventTopicXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeregisterEventTopicXAmzTargetEnum: %s", s)
	}
}

type DeregisterEventTopicHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeregisterEventTopicXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeregisterEventTopicRequest struct {
	Headers DeregisterEventTopicHeaders
	Request shared.DeregisterEventTopicRequest `request:"mediaType=application/json"`
}

type DeregisterEventTopicResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	DeregisterEventTopicResult map[string]interface{}
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
}
