/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateRecordingSettingsServerList = [
  "https://video.twilio.com",
] as const;

export class CreateRecordingSettingsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateRecordingSettingsCreateRecordingSettingsRequest extends SpeakeasyBase {
  /**
   * The SID of the stored Credential resource.
   */
  @SpeakeasyMetadata({ data: "form, name=AwsCredentialsSid" })
  awsCredentialsSid?: string;

  /**
   * The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.
   */
  @SpeakeasyMetadata({ data: "form, name=AwsS3Url" })
  awsS3Url?: string;

  /**
   * Whether all recordings should be written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud.
   */
  @SpeakeasyMetadata({ data: "form, name=AwsStorageEnabled" })
  awsStorageEnabled?: boolean;

  /**
   * Whether all recordings should be stored in an encrypted form. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=EncryptionEnabled" })
  encryptionEnabled?: boolean;

  /**
   * The SID of the Public Key resource to use for encryption.
   */
  @SpeakeasyMetadata({ data: "form, name=EncryptionKeySid" })
  encryptionKeySid?: string;

  /**
   * A descriptive string that you create to describe the resource and be shown to users in the console
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName: string;
}

export class CreateRecordingSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  videoV1RecordingSettings?: shared.VideoV1RecordingSettings;
}
