/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContextRule - A context rule provides information about the context for an individual API element.
 */
public class ContextRule {
    /**
     * A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedRequestExtensions")
    public String[] allowedRequestExtensions;

    public ContextRule withAllowedRequestExtensions(String[] allowedRequestExtensions) {
        this.allowedRequestExtensions = allowedRequestExtensions;
        return this;
    }
    
    /**
     * A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedResponseExtensions")
    public String[] allowedResponseExtensions;

    public ContextRule withAllowedResponseExtensions(String[] allowedResponseExtensions) {
        this.allowedResponseExtensions = allowedResponseExtensions;
        return this;
    }
    
    /**
     * A list of full type names of provided contexts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provided")
    public String[] provided;

    public ContextRule withProvided(String[] provided) {
        this.provided = provided;
        return this;
    }
    
    /**
     * A list of full type names of requested contexts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requested")
    public String[] requested;

    public ContextRule withRequested(String[] requested) {
        this.requested = requested;
        return this;
    }
    
    /**
     * Selects the methods to which this rule applies. Refer to selector for syntax details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selector")
    public String selector;

    public ContextRule withSelector(String selector) {
        this.selector = selector;
        return this;
    }
    
    public ContextRule(){}
}
