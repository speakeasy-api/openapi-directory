"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetCallQueueRecordingsRequest:
    
    call_queue_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'callQueueId', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the Call Queue."""  
    from_: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date (within a 6 month range)."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date (within a 6 month range)."""  
    

@dataclasses.dataclass
class GetCallQueueRecordings200ApplicationXMLRecordings:
    
    callee_name: Optional[str] = dataclasses.field(default=None)
    r"""Contact name of the callee."""  
    callee_number: Optional[str] = dataclasses.field(default=None)
    r"""Name of the callee."""  
    callee_number_type: Optional[str] = dataclasses.field(default=None)
    r"""Phone number type of the callee.<br>`1`- Internal<br>`2`- External"""  
    caller_name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the caller."""  
    caller_number: Optional[str] = dataclasses.field(default=None)
    r"""Phone number of the caller."""  
    caller_number_type: Optional[str] = dataclasses.field(default=None)
    r"""Phone number type of the caller.<br>`1`- Internal<br>`2`- External"""  
    date_time: Optional[date] = dataclasses.field(default=None)
    r"""Date of the recording."""  
    direction: Optional[str] = dataclasses.field(default=None)
    r"""Direction of call. The value of this field can be either `outbound` or `inbound`."""  
    download_url: Optional[str] = dataclasses.field(default=None)
    r"""URL using which the recording can be downloaded."""  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Duration of the call."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique Identifier of the recording."""  
    

@dataclasses.dataclass
class GetCallQueueRecordings200ApplicationXML:
    
    from_: Optional[str] = dataclasses.field(default=None)
    r"""Start date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    recordings: Optional[list[GetCallQueueRecordings200ApplicationXMLRecordings]] = dataclasses.field(default=None)  
    to: Optional[str] = dataclasses.field(default=None)
    r"""End date."""  
    total_records: Optional[str] = dataclasses.field(default=None)
    r"""The total number of records returned for this API call."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCallQueueRecordings200ApplicationJSONRecordings:
    
    callee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_name'), 'exclude': lambda f: f is None }})
    r"""Contact name of the callee."""  
    callee_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number'), 'exclude': lambda f: f is None }})
    r"""Name of the callee."""  
    callee_number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number_type'), 'exclude': lambda f: f is None }})
    r"""Phone number type of the callee.<br>`1`- Internal<br>`2`- External"""  
    caller_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_name'), 'exclude': lambda f: f is None }})
    r"""Name of the caller."""  
    caller_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number'), 'exclude': lambda f: f is None }})
    r"""Phone number of the caller."""  
    caller_number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number_type'), 'exclude': lambda f: f is None }})
    r"""Phone number type of the caller.<br>`1`- Internal<br>`2`- External"""  
    date_time: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of the recording."""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""Direction of call. The value of this field can be either `outbound` or `inbound`."""  
    download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_url'), 'exclude': lambda f: f is None }})
    r"""URL using which the recording can be downloaded."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of the call."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique Identifier of the recording."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCallQueueRecordings200ApplicationJSON:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Start date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    recordings: Optional[list[GetCallQueueRecordings200ApplicationJSONRecordings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordings'), 'exclude': lambda f: f is None }})  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""End date."""  
    total_records: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records returned for this API call."""  
    

@dataclasses.dataclass
class GetCallQueueRecordingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_call_queue_recordings_200_application_json_object: Optional[GetCallQueueRecordings200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    