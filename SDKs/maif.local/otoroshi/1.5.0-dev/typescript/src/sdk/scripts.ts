/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about Otoroshi request transformer scripts
 */
export class Scripts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Compile a script
   *
   * @remarks
   * Compile a script
   */
  compileScript(
    req: shared.Script,
    security: operations.CompileScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CompileScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Script(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/scripts/_compile";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CompileScriptSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompileScriptResponse =
        new operations.CompileScriptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scriptCompilationResult = utils.objectToClass(
              httpRes?.data,
              shared.ScriptCompilationResult
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new script
   *
   * @remarks
   * Create a new script
   */
  createScript(
    req: shared.Script,
    security: operations.CreateScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Script(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/scripts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateScriptSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateScriptResponse =
        new operations.CreateScriptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.script = utils.objectToClass(httpRes?.data, shared.Script);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a script
   *
   * @remarks
   * Delete a script
   */
  deleteScript(
    req: operations.DeleteScriptRequest,
    security: operations.DeleteScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteScriptRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/scripts/{scriptId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteScriptSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteScriptResponse =
        new operations.DeleteScriptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all scripts
   *
   * @remarks
   * Get all scripts
   */
  findAllScripts(
    config?: AxiosRequestConfig
  ): Promise<operations.FindAllScriptsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/scripts";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindAllScriptsResponse =
        new operations.FindAllScriptsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scripts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.scripts = utils.objectToClass(
              httpRes?.data,
              shared.Script,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a script
   *
   * @remarks
   * Get a script
   */
  findScriptById(
    req: operations.FindScriptByIdRequest,
    security: operations.FindScriptByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FindScriptByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindScriptByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/scripts/{scriptId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FindScriptByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindScriptByIdResponse =
        new operations.FindScriptByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.script = utils.objectToClass(httpRes?.data, shared.Script);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a script with a diff
   *
   * @remarks
   * Update a script with a diff
   */
  patchScript(
    req: operations.PatchScriptRequest,
    security: operations.PatchScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchScriptRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/scripts/{scriptId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchScriptSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchScriptResponse =
        new operations.PatchScriptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.script = utils.objectToClass(httpRes?.data, shared.Script);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a script
   *
   * @remarks
   * Update a script
   */
  updateScript(
    req: operations.UpdateScriptRequest,
    security: operations.UpdateScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateScriptRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/scripts/{scriptId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "script",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateScriptSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateScriptResponse =
        new operations.UpdateScriptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.script = utils.objectToClass(httpRes?.data, shared.Script);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
