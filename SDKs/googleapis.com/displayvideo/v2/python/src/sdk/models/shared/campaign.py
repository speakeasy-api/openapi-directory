"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import campaignbudget as shared_campaignbudget
from ..shared import campaignflight as shared_campaignflight
from ..shared import campaigngoal as shared_campaigngoal
from ..shared import frequencycap as shared_frequencycap
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CampaignEntityStatusEnum(str, Enum):
    r"""Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed."""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CampaignInput:
    r"""A single campaign."""
    
    campaign_budgets: Optional[list[shared_campaignbudget.CampaignBudget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignBudgets'), 'exclude': lambda f: f is None }})
    r"""The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget."""  
    campaign_flight: Optional[shared_campaignflight.CampaignFlight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignFlight'), 'exclude': lambda f: f is None }})
    r"""Settings that track the planned spend and duration of a campaign."""  
    campaign_goal: Optional[shared_campaigngoal.CampaignGoal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignGoal'), 'exclude': lambda f: f is None }})
    r"""Settings that control the goal of a campaign."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[CampaignEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed."""  
    frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Campaign:
    r"""A single campaign."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the advertiser the campaign belongs to."""  
    campaign_budgets: Optional[list[shared_campaignbudget.CampaignBudget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignBudgets'), 'exclude': lambda f: f is None }})
    r"""The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget."""  
    campaign_flight: Optional[shared_campaignflight.CampaignFlight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignFlight'), 'exclude': lambda f: f is None }})
    r"""Settings that track the planned spend and duration of a campaign."""  
    campaign_goal: Optional[shared_campaigngoal.CampaignGoal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignGoal'), 'exclude': lambda f: f is None }})
    r"""Settings that control the goal of a campaign."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the campaign. Assigned by the system."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[CampaignEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed."""  
    frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the campaign."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the campaign was last updated. Assigned by the system."""  
    