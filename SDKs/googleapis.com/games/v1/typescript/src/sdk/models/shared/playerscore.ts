/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The time span for this player score.
 */
export enum PlayerScoreTimeSpanEnum {
  ScoreTimeSpanUnspecified = "SCORE_TIME_SPAN_UNSPECIFIED",
  AllTime = "ALL_TIME",
  Weekly = "WEEKLY",
  Daily = "DAILY",
}

/**
 * A player score.
 */
export class PlayerScore extends SpeakeasyBase {
  /**
   * The formatted score for this player score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedScore" })
  formattedScore?: string;

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The numerical value for this player score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score?: string;

  /**
   * Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scoreTag" })
  scoreTag?: string;

  /**
   * The time span for this player score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeSpan" })
  timeSpan?: PlayerScoreTimeSpanEnum;
}
