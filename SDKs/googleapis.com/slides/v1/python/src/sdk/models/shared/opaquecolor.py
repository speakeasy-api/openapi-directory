"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rgbcolor as shared_rgbcolor
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OpaqueColorThemeColorEnum(str, Enum):
    r"""An opaque theme color."""
    THEME_COLOR_TYPE_UNSPECIFIED = 'THEME_COLOR_TYPE_UNSPECIFIED'
    DARK1 = 'DARK1'
    LIGHT1 = 'LIGHT1'
    DARK2 = 'DARK2'
    LIGHT2 = 'LIGHT2'
    ACCENT1 = 'ACCENT1'
    ACCENT2 = 'ACCENT2'
    ACCENT3 = 'ACCENT3'
    ACCENT4 = 'ACCENT4'
    ACCENT5 = 'ACCENT5'
    ACCENT6 = 'ACCENT6'
    HYPERLINK = 'HYPERLINK'
    FOLLOWED_HYPERLINK = 'FOLLOWED_HYPERLINK'
    TEXT1 = 'TEXT1'
    BACKGROUND1 = 'BACKGROUND1'
    TEXT2 = 'TEXT2'
    BACKGROUND2 = 'BACKGROUND2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OpaqueColor:
    r"""A themeable solid color value."""
    
    rgb_color: Optional[shared_rgbcolor.RgbColor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rgbColor'), 'exclude': lambda f: f is None }})
    r"""An RGB color."""  
    theme_color: Optional[OpaqueColorThemeColorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('themeColor'), 'exclude': lambda f: f is None }})
    r"""An opaque theme color."""  
    