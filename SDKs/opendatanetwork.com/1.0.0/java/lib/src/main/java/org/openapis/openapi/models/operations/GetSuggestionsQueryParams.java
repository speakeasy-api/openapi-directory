/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSuggestionsQueryParams {
    /**
     * The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
     * used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=app_token")
    public String appToken;
    public GetSuggestionsQueryParams withAppToken(String appToken) {
        this.appToken = appToken;
        return this;
    }
    
    /**
     * Maximum number of results to return.
     * Must be an integer from 0 to 100.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Double limit;
    public GetSuggestionsQueryParams withLimit(Double limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Query to match.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;
    public GetSuggestionsQueryParams withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * This parameter is only available when suggesting entities with `type=entity`.
     * If it is provided, suggestions will be filtered to include
     * only entities that have data for the given variable.
     * 
     * If the variable provided is invalid, no entities will be returned.
     * 
     * Note that this filtering will increase response time significantly,
     * so it should only be used when necessary.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=variable_id")
    public String variableId;
    public GetSuggestionsQueryParams withVariableId(String variableId) {
        this.variableId = variableId;
        return this;
    }
    
}
