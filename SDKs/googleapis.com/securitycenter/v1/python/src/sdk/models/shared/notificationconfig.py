"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import streamingconfig as shared_streamingconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationConfig:
    r"""Cloud Security Command Center (Cloud SCC) notification configs. A notification config is a Cloud SCC resource that contains the configuration to send notifications for create/update events of findings, assets and etc."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the notification config (max of 1024 characters)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: \\"organizations/{organization_id}/notificationConfigs/notify_public_bucket\\", \\"folders/{folder_id}/notificationConfigs/notify_public_bucket\\", or \\"projects/{project_id}/notificationConfigs/notify_public_bucket\\"."""  
    pubsub_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pubsubTopic'), 'exclude': lambda f: f is None }})
    r"""The Pub/Sub topic to send notifications to. Its format is \\"projects/[project_id]/topics/[topic]\\"."""  
    service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccount'), 'exclude': lambda f: f is None }})
    r"""Output only. The service account that needs \\"pubsub.topics.publish\\" permission to publish to the Pub/Sub topic."""  
    streaming_config: Optional[shared_streamingconfig.StreamingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingConfig'), 'exclude': lambda f: f is None }})
    r"""The config for streaming-based notifications, which send each event as soon as it is detected."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationConfigInput:
    r"""Cloud Security Command Center (Cloud SCC) notification configs. A notification config is a Cloud SCC resource that contains the configuration to send notifications for create/update events of findings, assets and etc."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the notification config (max of 1024 characters)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: \\"organizations/{organization_id}/notificationConfigs/notify_public_bucket\\", \\"folders/{folder_id}/notificationConfigs/notify_public_bucket\\", or \\"projects/{project_id}/notificationConfigs/notify_public_bucket\\"."""  
    pubsub_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pubsubTopic'), 'exclude': lambda f: f is None }})
    r"""The Pub/Sub topic to send notifications to. Its format is \\"projects/[project_id]/topics/[topic]\\"."""  
    streaming_config: Optional[shared_streamingconfig.StreamingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingConfig'), 'exclude': lambda f: f is None }})
    r"""The config for streaming-based notifications, which send each event as soon as it is detected."""  
    