"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import action as shared_action
from ..shared import eventsource as shared_eventsource
from ..shared import parameters as shared_parameters
from ..shared import policytypevalues_enum as shared_policytypevalues_enum
from ..shared import resourcelocationvalues_enum as shared_resourcelocationvalues_enum
from ..shared import resourcetypevalues_enum as shared_resourcetypevalues_enum
from ..shared import schedule as shared_schedule
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PolicyDetails:
    r"""<b>[All policy types]</b> Specifies the configuration of a lifecycle policy."""
    
    actions: Optional[list[shared_action.Action]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Actions'), 'exclude': lambda f: f is None }})  
    event_source: Optional[shared_eventsource.EventSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventSource'), 'exclude': lambda f: f is None }})  
    parameters: Optional[shared_parameters.Parameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters'), 'exclude': lambda f: f is None }})  
    policy_type: Optional[shared_policytypevalues_enum.PolicyTypeValuesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyType'), 'exclude': lambda f: f is None }})  
    resource_locations: Optional[list[shared_resourcelocationvalues_enum.ResourceLocationValuesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceLocations'), 'exclude': lambda f: f is None }})  
    resource_types: Optional[list[shared_resourcetypevalues_enum.ResourceTypeValuesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTypes'), 'exclude': lambda f: f is None }})  
    schedules: Optional[list[shared_schedule.Schedule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedules'), 'exclude': lambda f: f is None }})  
    target_tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetTags'), 'exclude': lambda f: f is None }})  
    