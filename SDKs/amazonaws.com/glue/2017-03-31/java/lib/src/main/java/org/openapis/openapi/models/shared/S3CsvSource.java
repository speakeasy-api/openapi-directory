/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * S3CsvSource - Specifies a command-separated value (CSV) data store stored in Amazon S3.
 */
public class S3CsvSource {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdditionalOptions")
    public S3DirectSourceAdditionalOptions additionalOptions;

    public S3CsvSource withAdditionalOptions(S3DirectSourceAdditionalOptions additionalOptions) {
        this.additionalOptions = additionalOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CompressionType")
    public CompressionTypeEnum compressionType;

    public S3CsvSource withCompressionType(CompressionTypeEnum compressionType) {
        this.compressionType = compressionType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Escaper")
    public String escaper;

    public S3CsvSource withEscaper(String escaper) {
        this.escaper = escaper;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Exclusions")
    public String[] exclusions;

    public S3CsvSource withExclusions(String[] exclusions) {
        this.exclusions = exclusions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GroupFiles")
    public String groupFiles;

    public S3CsvSource withGroupFiles(String groupFiles) {
        this.groupFiles = groupFiles;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GroupSize")
    public String groupSize;

    public S3CsvSource withGroupSize(String groupSize) {
        this.groupSize = groupSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxBand")
    public Long maxBand;

    public S3CsvSource withMaxBand(Long maxBand) {
        this.maxBand = maxBand;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxFilesInBand")
    public Long maxFilesInBand;

    public S3CsvSource withMaxFilesInBand(Long maxFilesInBand) {
        this.maxFilesInBand = maxFilesInBand;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Multiline")
    public Boolean multiline;

    public S3CsvSource withMultiline(Boolean multiline) {
        this.multiline = multiline;
        return this;
    }
    
    @JsonProperty("Name")
    public String name;

    public S3CsvSource withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OptimizePerformance")
    public Boolean optimizePerformance;

    public S3CsvSource withOptimizePerformance(Boolean optimizePerformance) {
        this.optimizePerformance = optimizePerformance;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OutputSchemas")
    public GlueSchema[] outputSchemas;

    public S3CsvSource withOutputSchemas(GlueSchema[] outputSchemas) {
        this.outputSchemas = outputSchemas;
        return this;
    }
    
    @JsonProperty("Paths")
    public String[] paths;

    public S3CsvSource withPaths(String[] paths) {
        this.paths = paths;
        return this;
    }
    
    @JsonProperty("QuoteChar")
    public QuoteCharEnum quoteChar;

    public S3CsvSource withQuoteChar(QuoteCharEnum quoteChar) {
        this.quoteChar = quoteChar;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Recurse")
    public Boolean recurse;

    public S3CsvSource withRecurse(Boolean recurse) {
        this.recurse = recurse;
        return this;
    }
    
    @JsonProperty("Separator")
    public SeparatorEnum separator;

    public S3CsvSource withSeparator(SeparatorEnum separator) {
        this.separator = separator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SkipFirst")
    public Boolean skipFirst;

    public S3CsvSource withSkipFirst(Boolean skipFirst) {
        this.skipFirst = skipFirst;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WithHeader")
    public Boolean withHeader;

    public S3CsvSource withWithHeader(Boolean withHeader) {
        this.withHeader = withHeader;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WriteHeader")
    public Boolean writeHeader;

    public S3CsvSource withWriteHeader(Boolean writeHeader) {
        this.writeHeader = writeHeader;
        return this;
    }
    
    public S3CsvSource(@JsonProperty("Name") String name, @JsonProperty("Paths") String[] paths, @JsonProperty("QuoteChar") QuoteCharEnum quoteChar, @JsonProperty("Separator") SeparatorEnum separator) {
        this.name = name;
        this.paths = paths;
        this.quoteChar = quoteChar;
        this.separator = separator;
  }
}
