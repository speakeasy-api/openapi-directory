// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ValueNullValueEnum - A null value.
type ValueNullValueEnum string

const (
	ValueNullValueEnumNullValue ValueNullValueEnum = "NULL_VALUE"
)

func (e ValueNullValueEnum) ToPointer() *ValueNullValueEnum {
	return &e
}

func (e *ValueNullValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NULL_VALUE":
		*e = ValueNullValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueNullValueEnum: %v", v)
	}
}

// Value - A message that can hold any of the supported value types.
type Value struct {
	// An array value.
	ArrayValue *ArrayValue `json:"arrayValue,omitempty"`
	// A boolean value.
	BooleanValue *bool `json:"booleanValue,omitempty"`
	// A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.
	BytesValue *string `json:"bytesValue,omitempty"`
	// A double value.
	DoubleValue *float64 `json:"doubleValue,omitempty"`
	// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	GeoPointValue *LatLng `json:"geoPointValue,omitempty"`
	// An integer value.
	IntegerValue *string `json:"integerValue,omitempty"`
	// A map value.
	MapValue *MapValue `json:"mapValue,omitempty"`
	// A null value.
	NullValue *ValueNullValueEnum `json:"nullValue,omitempty"`
	// A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
	ReferenceValue *string `json:"referenceValue,omitempty"`
	// A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.
	StringValue *string `json:"stringValue,omitempty"`
	// A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.
	TimestampValue *string `json:"timestampValue,omitempty"`
}
