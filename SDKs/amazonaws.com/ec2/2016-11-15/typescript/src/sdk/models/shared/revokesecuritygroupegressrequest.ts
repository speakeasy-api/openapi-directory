/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes an IPv4 range.
 */
export class RevokeSecurityGroupEgressRequestIpPermissionsIpRanges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrIp?: string;

  @SpeakeasyMetadata()
  description?: string;
}

/**
 * [EC2-VPC only] Describes an IPv6 range.
 */
export class RevokeSecurityGroupEgressRequestIpPermissionsIpv6Ranges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrIpv6?: string;

  @SpeakeasyMetadata()
  description?: string;
}

/**
 * Describes a prefix list ID.
 */
export class RevokeSecurityGroupEgressRequestIpPermissionsPrefixListIds extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  prefixListId?: string;
}

/**
 * <p>Describes a security group and Amazon Web Services account ID pair.</p> <note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note>
 */
export class RevokeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  groupId?: string;

  @SpeakeasyMetadata()
  groupName?: string;

  @SpeakeasyMetadata()
  peeringStatus?: string;

  @SpeakeasyMetadata()
  userId?: string;

  @SpeakeasyMetadata()
  vpcId?: string;

  @SpeakeasyMetadata()
  vpcPeeringConnectionId?: string;
}

/**
 * Describes a set of permissions for a security group rule.
 */
export class RevokeSecurityGroupEgressRequestIpPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  ipProtocol?: string;

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupEgressRequestIpPermissionsIpRanges,
  })
  ipRanges?: RevokeSecurityGroupEgressRequestIpPermissionsIpRanges[];

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupEgressRequestIpPermissionsIpv6Ranges,
  })
  ipv6Ranges?: RevokeSecurityGroupEgressRequestIpPermissionsIpv6Ranges[];

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupEgressRequestIpPermissionsPrefixListIds,
  })
  prefixListIds?: RevokeSecurityGroupEgressRequestIpPermissionsPrefixListIds[];

  @SpeakeasyMetadata()
  toPort?: number;

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs,
  })
  userIdGroupPairs?: RevokeSecurityGroupEgressRequestIpPermissionsUserIdGroupPairs[];
}

export class RevokeSecurityGroupEgressRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrIp?: string;

  @SpeakeasyMetadata()
  dryRun?: boolean;

  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  groupId: string;

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupEgressRequestIpPermissions,
  })
  ipPermissions?: RevokeSecurityGroupEgressRequestIpPermissions[];

  @SpeakeasyMetadata()
  ipProtocol?: string;

  @SpeakeasyMetadata()
  securityGroupRuleIds?: string[];

  @SpeakeasyMetadata()
  sourceSecurityGroupName?: string;

  @SpeakeasyMetadata()
  sourceSecurityGroupOwnerId?: string;

  @SpeakeasyMetadata()
  toPort?: number;
}
