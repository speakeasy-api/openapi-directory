<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GETSetIdentityHeadersInNotificationsEnabledRequest
{
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Action')]
    public GETSetIdentityHeadersInNotificationsEnabledActionEnum $action;
    
    /**
     * <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
     * 
     * @var bool $enabled
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Enabled')]
    public bool $enabled;
    
    /**
     * The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
     * 
     * @var string $identity
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Identity')]
    public string $identity;
    
    /**
     * The notification type for which to enable or disable headers in notifications. 
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum $notificationType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=NotificationType')]
    public GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum $notificationType;
    
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Version')]
    public GETSetIdentityHeadersInNotificationsEnabledVersionEnum $version;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\GETSetIdentityHeadersInNotificationsEnabledActionEnum::SET_IDENTITY_HEADERS_IN_NOTIFICATIONS_ENABLED;
		$this->enabled = false;
		$this->identity = "";
		$this->notificationType = \OpenAPI\OpenAPI\Models\Operations\GETSetIdentityHeadersInNotificationsEnabledNotificationTypeEnum::BOUNCE;
		$this->version = \OpenAPI\OpenAPI\Models\Operations\GETSetIdentityHeadersInNotificationsEnabledVersionEnum::TWO_THOUSAND_AND_TEN1201;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
