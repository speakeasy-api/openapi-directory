import { SpeakeasyBase } from "../../../internal/utils";
import { InvoiceGatewayApiModel } from "./invoicegatewayapimodel";
import { InvoiceRecurringApiModel } from "./invoicerecurringapimodel";
import { InvoiceUpdateAttachmentApiModel } from "./invoiceupdateattachmentapimodel";
import { InvoiceUpdateItemApiModel } from "./invoiceupdateitemapimodel";
/**
 * Indicate the status of the invoice (paid/unpaid/overdue)
 */
export declare enum InvoiceUpdateApiModelStatusEnum {
    Draft = "Draft",
    Paid = "Paid",
    Unpaid = "Unpaid",
    Overdue = "Overdue",
    Void = "Void"
}
export declare class InvoiceUpdateApiModel extends SpeakeasyBase {
    /**
     * List of invoice attachments
     */
    attachments?: InvoiceUpdateAttachmentApiModel[];
    /**
     * The client to whom this invoice is assigned
     */
    clientId?: number;
    /**
     * Indicate from which invoice this invoice has been cloned from
     */
    clonedFromId?: number;
    /**
     * Id of the currency for the invoice amounts
     */
    currencyId?: number;
    /**
     * Indicates when the invoice will be proclamed as due
     */
    duedate?: Date;
    /**
     * Invoice id
     */
    id?: number;
    /**
     * Hold the id of the invoice category
     */
    invoiceCategoryId?: number;
    /**
     * Indicates when the invoice was issued
     */
    issuedOn?: Date;
    /**
     * List of invoice items
     */
    items?: InvoiceUpdateItemApiModel[];
    /**
     * Internal note regarding the invoice
     */
    notes?: string;
    /**
     * Unique invoice number
     */
    number?: string;
    /**
     * List of enabled payment gateways for this invoice
     */
    paymentGateways?: InvoiceGatewayApiModel[];
    /**
     * Unique number generated by the buyer
     */
    poNumber?: string;
    /**
     * Definition of invoice recurring profile
     */
    recurringProfile?: InvoiceRecurringApiModel;
    /**
     * Hold the id of the recurring profile
     */
    recurringProfileId?: number;
    /**
     * Should send email reminders to client?
     */
    shouldSendReminders?: boolean;
    /**
     * Indicate the status of the invoice (paid/unpaid/overdue)
     */
    status?: InvoiceUpdateApiModelStatusEnum;
    /**
     * Terms of agreement
     */
    terms?: string;
}
