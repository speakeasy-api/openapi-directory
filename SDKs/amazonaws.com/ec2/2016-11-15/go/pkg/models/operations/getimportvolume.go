// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETImportVolumeActionEnum
type GETImportVolumeActionEnum string

const (
	GETImportVolumeActionEnumImportVolume GETImportVolumeActionEnum = "ImportVolume"
)

func (e GETImportVolumeActionEnum) ToPointer() *GETImportVolumeActionEnum {
	return &e
}

func (e *GETImportVolumeActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ImportVolume":
		*e = GETImportVolumeActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETImportVolumeActionEnum: %v", v)
	}
}

// GETImportVolumeImageFormatEnum - The disk image format.
type GETImportVolumeImageFormatEnum string

const (
	GETImportVolumeImageFormatEnumVmdk GETImportVolumeImageFormatEnum = "VMDK"
	GETImportVolumeImageFormatEnumRaw  GETImportVolumeImageFormatEnum = "RAW"
	GETImportVolumeImageFormatEnumVhd  GETImportVolumeImageFormatEnum = "VHD"
)

func (e GETImportVolumeImageFormatEnum) ToPointer() *GETImportVolumeImageFormatEnum {
	return &e
}

func (e *GETImportVolumeImageFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VMDK":
		fallthrough
	case "RAW":
		fallthrough
	case "VHD":
		*e = GETImportVolumeImageFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETImportVolumeImageFormatEnum: %v", v)
	}
}

// GETImportVolumeImage - Describes a disk image.
type GETImportVolumeImage struct {
	Bytes             int64                          `queryParam:"name=Bytes"`
	Format            GETImportVolumeImageFormatEnum `queryParam:"name=Format"`
	ImportManifestURL string                         `queryParam:"name=ImportManifestUrl"`
}

// GETImportVolumeVersionEnum
type GETImportVolumeVersionEnum string

const (
	GETImportVolumeVersionEnumTwoThousandAndSixteen1115 GETImportVolumeVersionEnum = "2016-11-15"
)

func (e GETImportVolumeVersionEnum) ToPointer() *GETImportVolumeVersionEnum {
	return &e
}

func (e *GETImportVolumeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETImportVolumeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETImportVolumeVersionEnum: %v", v)
	}
}

// GETImportVolumeVolume - Describes an EBS volume.
type GETImportVolumeVolume struct {
	Size int64 `queryParam:"name=Size"`
}

type GETImportVolumeRequest struct {
	Action GETImportVolumeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The Availability Zone for the resulting EBS volume.
	AvailabilityZone string `queryParam:"style=form,explode=true,name=AvailabilityZone"`
	// A description of the volume.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The disk image.
	Image   GETImportVolumeImage       `queryParam:"style=form,explode=true,name=Image"`
	Version GETImportVolumeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The volume size.
	Volume            GETImportVolumeVolume `queryParam:"style=form,explode=true,name=Volume"`
	XAmzAlgorithm     *string               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETImportVolumeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
