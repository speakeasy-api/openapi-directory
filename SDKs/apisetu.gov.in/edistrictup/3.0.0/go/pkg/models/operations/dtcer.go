// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DtcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type DtcerRequestBodyCertificateParameters struct {
	// ApplicationNo
	ApplicationNo string `json:"ApplicationNo"`
	// CertificateID
	CertificateID string `json:"CertificateID"`
}

// DtcerRequestBodyFormatEnum - The format of the certificate in response.
type DtcerRequestBodyFormatEnum string

const (
	DtcerRequestBodyFormatEnumPdf DtcerRequestBodyFormatEnum = "pdf"
)

func (e *DtcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = DtcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DtcerRequestBodyFormatEnum: %s", s)
	}
}

// DtcerRequestBody - Request format
type DtcerRequestBody struct {
	CertificateParameters *DtcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DtcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type DtcerRequest struct {
	// Request format
	Request  *DtcerRequestBody `request:"mediaType=application/json"`
	Security DtcerSecurity
}

type Dtcer504ApplicationJSONErrorEnum string

const (
	Dtcer504ApplicationJSONErrorEnumGatewayTimeout Dtcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Dtcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Dtcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer504ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dtcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Dtcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Dtcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer504ApplicationJSON - Gateway timeout
type Dtcer504ApplicationJSON struct {
	Error            *Dtcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dtcer503ApplicationJSONErrorEnum string

const (
	Dtcer503ApplicationJSONErrorEnumServiceUnavailable Dtcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Dtcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Dtcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer503ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dtcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Dtcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Dtcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer503ApplicationJSON - Service unavailable
type Dtcer503ApplicationJSON struct {
	Error            *Dtcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dtcer502ApplicationJSONErrorEnum string

const (
	Dtcer502ApplicationJSONErrorEnumBadGatewy Dtcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Dtcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Dtcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer502ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dtcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Dtcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Dtcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer502ApplicationJSON - Bad gateway
type Dtcer502ApplicationJSON struct {
	Error            *Dtcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dtcer500ApplicationJSONErrorEnum string

const (
	Dtcer500ApplicationJSONErrorEnumInternalServerError Dtcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Dtcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Dtcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer500ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer500ApplicationJSONErrorDescriptionEnumInternalServerError Dtcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Dtcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Dtcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer500ApplicationJSON - Internal server error
type Dtcer500ApplicationJSON struct {
	Error            *Dtcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dtcer404ApplicationJSONErrorEnum string

const (
	Dtcer404ApplicationJSONErrorEnumRecordNotFound Dtcer404ApplicationJSONErrorEnum = "record_not_found"
	Dtcer404ApplicationJSONErrorEnumURLNotFound    Dtcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Dtcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dtcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer404ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dtcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dtcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dtcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Dtcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dtcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer404ApplicationJSON - No record found
type Dtcer404ApplicationJSON struct {
	Error            *Dtcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dtcer401ApplicationJSONErrorEnum string

const (
	Dtcer401ApplicationJSONErrorEnumInvalidAuthentication Dtcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dtcer401ApplicationJSONErrorEnumInvalidAuthorization  Dtcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Dtcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dtcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer401ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dtcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dtcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dtcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Dtcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dtcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer401ApplicationJSON - Unauthorized access
type Dtcer401ApplicationJSON struct {
	Error            *Dtcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dtcer400ApplicationJSONErrorEnum string

const (
	Dtcer400ApplicationJSONErrorEnumMissingParameter Dtcer400ApplicationJSONErrorEnum = "missing_parameter"
	Dtcer400ApplicationJSONErrorEnumInvalidParameter Dtcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dtcer400ApplicationJSONErrorEnumInvalidFormat    Dtcer400ApplicationJSONErrorEnum = "invalid_format"
	Dtcer400ApplicationJSONErrorEnumInvalidTxnid     Dtcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dtcer400ApplicationJSONErrorEnumInvalidConsentid Dtcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Dtcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dtcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Dtcer400ApplicationJSONErrorDescriptionEnum string

const (
	Dtcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dtcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dtcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dtcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dtcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dtcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dtcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dtcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dtcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dtcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Dtcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dtcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dtcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dtcer400ApplicationJSON - Bad request
type Dtcer400ApplicationJSON struct {
	Error            *Dtcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dtcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DtcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dtcer400ApplicationJSONObject *Dtcer400ApplicationJSON
	// Unauthorized access
	Dtcer401ApplicationJSONObject *Dtcer401ApplicationJSON
	// No record found
	Dtcer404ApplicationJSONObject *Dtcer404ApplicationJSON
	// Internal server error
	Dtcer500ApplicationJSONObject *Dtcer500ApplicationJSON
	// Bad gateway
	Dtcer502ApplicationJSONObject *Dtcer502ApplicationJSON
	// Service unavailable
	Dtcer503ApplicationJSONObject *Dtcer503ApplicationJSON
	// Gateway timeout
	Dtcer504ApplicationJSONObject *Dtcer504ApplicationJSON
}
