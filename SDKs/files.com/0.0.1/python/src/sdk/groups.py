"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    r"""Operations about groups"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_groups_group_id_memberships_user_id(self, request: operations.DeleteGroupsGroupIDMembershipsUserIDRequest) -> operations.DeleteGroupsGroupIDMembershipsUserIDResponse:
        r"""Delete Group User
        Delete Group User
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGroupsGroupIDMembershipsUserIDRequest, base_url, '/groups/{group_id}/memberships/{user_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupsGroupIDMembershipsUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_groups_id(self, request: operations.DeleteGroupsIDRequest) -> operations.DeleteGroupsIDResponse:
        r"""Delete Group
        Delete Group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGroupsIDRequest, base_url, '/groups/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_groups(self, request: operations.GetGroupsRequest) -> operations.GetGroupsResponse:
        r"""List Groups
        List Groups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        query_params = utils.get_query_params(operations.GetGroupsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GroupEntity]])
                res.group_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_groups_group_id_permissions(self, request: operations.GetGroupsGroupIDPermissionsRequest) -> operations.GetGroupsGroupIDPermissionsResponse:
        r"""List Permissions
        List Permissions
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupsGroupIDPermissionsRequest, base_url, '/groups/{group_id}/permissions', request)
        
        query_params = utils.get_query_params(operations.GetGroupsGroupIDPermissionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsGroupIDPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PermissionEntity]])
                res.permission_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_groups_group_id_users(self, request: operations.GetGroupsGroupIDUsersRequest) -> operations.GetGroupsGroupIDUsersResponse:
        r"""List Group Users
        List Group Users
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupsGroupIDUsersRequest, base_url, '/groups/{group_id}/users', request)
        
        query_params = utils.get_query_params(operations.GetGroupsGroupIDUsersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsGroupIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GroupUserEntity]])
                res.group_user_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_groups_id(self, request: operations.GetGroupsIDRequest) -> operations.GetGroupsIDResponse:
        r"""Show Group
        Show Group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupsIDRequest, base_url, '/groups/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupEntity])
                res.group_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_groups_group_id_memberships_user_id(self, request: operations.PatchGroupsGroupIDMembershipsUserIDRequest) -> operations.PatchGroupsGroupIDMembershipsUserIDResponse:
        r"""Update Group User
        Update Group User
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchGroupsGroupIDMembershipsUserIDRequest, base_url, '/groups/{group_id}/memberships/{user_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchGroupsGroupIDMembershipsUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupUserEntity])
                res.group_user_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_groups_id(self, request: operations.PatchGroupsIDRequest) -> operations.PatchGroupsIDResponse:
        r"""Update Group
        Update Group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchGroupsIDRequest, base_url, '/groups/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupEntity])
                res.group_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_groups(self, request: operations.PostGroupsRequestBody) -> operations.PostGroupsResponse:
        r"""Create Group
        Create Group
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupEntity])
                res.group_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_groups_group_id_users(self, request: operations.PostGroupsGroupIDUsersRequest) -> operations.PostGroupsGroupIDUsersResponse:
        r"""Create User
        Create User
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostGroupsGroupIDUsersRequest, base_url, '/groups/{group_id}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostGroupsGroupIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserEntity])
                res.user_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    