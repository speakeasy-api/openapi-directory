// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWebhookXAmzTargetEnum
type CreateWebhookXAmzTargetEnum string

const (
	CreateWebhookXAmzTargetEnumCodeBuild20161006CreateWebhook CreateWebhookXAmzTargetEnum = "CodeBuild_20161006.CreateWebhook"
)

func (e *CreateWebhookXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeBuild_20161006.CreateWebhook":
		*e = CreateWebhookXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebhookXAmzTargetEnum: %s", s)
	}
}

type CreateWebhookHeaders struct {
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateWebhookXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateWebhookRequest struct {
	Headers CreateWebhookHeaders
	Request shared.CreateWebhookInput `request:"mediaType=application/json"`
}

type CreateWebhookResponse struct {
	ContentType string
	// Success
	CreateWebhookOutput *shared.CreateWebhookOutput
	// InvalidInputException
	InvalidInputException interface{}
	// OAuthProviderException
	OAuthProviderException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
