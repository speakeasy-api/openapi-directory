/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetCommercialCreditCardsRequest extends SpeakeasyBase {
  /**
   * Used for conditional request, to retrieve data only if modified since a given date
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Modified-Since",
  })
  ifModifiedSince?: string;

  /**
   * Used for conditional request, to retrieve data only if the given Etag value does not match
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-None-Match",
  })
  ifNoneMatch?: string;
}

/**
 * A standard error response.
 */
export class GetCommercialCreditCardsErrorObject extends SpeakeasyBase {
  /**
   * Further details describing the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * This corresponds to the HTTP status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * A short title of the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}

export enum GetCommercialCreditCards503ErrorObjectDescriptionEnum {
  TheServiceIsTemporarilyUnavailable = "The service is temporarily unavailable.",
}

export enum GetCommercialCreditCards503ErrorObjectStatusEnum {
  FiveHundredAndThree = "503",
}

export enum GetCommercialCreditCards503ErrorObjectTitleEnum {
  ServiceTemporarilyUnavailable = "Service temporarily unavailable",
}

/**
 * The service is temporarily unavailable.
 */
export class GetCommercialCreditCards503ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetCommercialCreditCards503ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetCommercialCreditCards503ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetCommercialCreditCards503ErrorObjectTitleEnum;
}

export enum GetCommercialCreditCards500ErrorObjectDescriptionEnum {
  AnErrorOccurredOnTheServerNoFurtherInformationIsAvailable = "An error occurred on the server. No further information is available.",
}

export enum GetCommercialCreditCards500ErrorObjectStatusEnum {
  FiveHundred = "500",
}

export enum GetCommercialCreditCards500ErrorObjectTitleEnum {
  InternalServerError = "Internal server error",
}

/**
 * An error occurred on the server. No further information is available.
 */
export class GetCommercialCreditCards500ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetCommercialCreditCards500ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetCommercialCreditCards500ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetCommercialCreditCards500ErrorObjectTitleEnum;
}

export enum GetCommercialCreditCards429ErrorObjectDescriptionEnum {
  YouHaveRequestedThisResourceTooOftenSlowDown = "You have requested this resource too often. Slow down.",
}

export enum GetCommercialCreditCards429ErrorObjectStatusEnum {
  FourHundredAndTwentyNine = "429",
}

export enum GetCommercialCreditCards429ErrorObjectTitleEnum {
  TooManyRequests = "Too many requests",
}

/**
 * You have requested this resource too often. Slow down.
 */
export class GetCommercialCreditCards429ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetCommercialCreditCards429ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetCommercialCreditCards429ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetCommercialCreditCards429ErrorObjectTitleEnum;
}

export enum GetCommercialCreditCards408ErrorObjectDescriptionEnum {
  YourClientHasFailedToSubmitARequestAndATimeoutHasOccurred = "Your client has failed to submit a request, and a timeout has occurred.",
}

export enum GetCommercialCreditCards408ErrorObjectStatusEnum {
  FourHundredAndEight = "408",
}

export enum GetCommercialCreditCards408ErrorObjectTitleEnum {
  ClientTimeout = "Client timeout",
}

/**
 * Your client has failed to submit a request, and a timeout has occurred.
 */
export class GetCommercialCreditCards408ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetCommercialCreditCards408ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetCommercialCreditCards408ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetCommercialCreditCards408ErrorObjectTitleEnum;
}

export enum GetCommercialCreditCards400ErrorObjectDescriptionEnum {
  YouHaveSentARequestWhichCouldNotBeUnderstood = "You have sent a request which could not be understood.",
}

export enum GetCommercialCreditCards400ErrorObjectStatusEnum {
  FourHundred = "400",
}

export enum GetCommercialCreditCards400ErrorObjectTitleEnum {
  BadRequest = "Bad request",
}

/**
 * You have sent a request which could not be understood.
 */
export class GetCommercialCreditCards400ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetCommercialCreditCards400ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetCommercialCreditCards400ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetCommercialCreditCards400ErrorObjectTitleEnum;
}

/**
 * Criteria that is required in order to be eligible for the Benefit
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum {
  CashDeposit = "CashDeposit",
  Deposit = "Deposit",
  DirectDebit = "DirectDebit",
  InitialDeposit = "InitialDeposit",
  InternetLogon = "InternetLogon",
  MobileLogon = "MobileLogon",
  RegularDeposit = "RegularDeposit",
}

/**
 * Benefit detail
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail extends SpeakeasyBase {
  /**
   * A textual explanation of what the benefit is
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitDescription" })
  benefitDescription?: string;

  /**
   * Unique benefit identifier per organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitID" })
  benefitID?: string;

  /**
   * The name of the benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitName" })
  benefitName?: string;

  /**
   * Type that represents the nature of the benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitType" })
  benefitType?: string;

  /**
   * The value or values permissible for a specific benefit for an individual product representing a product characteristic
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitValue" })
  benefitValue?: string;

  /**
   * Counter for the criteria (e.g. number of DD)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Counter" })
  counter?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "CriteriaType" })
  criteriaType?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum[];

  /**
   * Is the benefit part of the default account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DefaultToAccounts" })
  defaultToAccounts?: boolean;

  /**
   * Maximum amount for the criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumCriteria" })
  maximumCriteria?: string;

  /**
   * Minimum amount for the criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumCriteria" })
  minimumCriteria?: string;

  /**
   * If the benefit is temporal the end date is when the benefit is no longer applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PromotionEndDate" })
  promotionEndDate?: string;

  /**
   * If the benefit is temporal the start date is when the benefit comes into effect
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PromotionStartDate" })
  promotionStartDate?: string;
}

/**
 * Benefit Item
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItem extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail,
  })
  @Expose({ name: "BenefitDetail" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail
  )
  benefitDetail?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail[];

  /**
   * Date of the change if it refers to future terms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfChange" })
  dateOfChange?: string;

  /**
   * Describes the length if only a duration is given instead of a date in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LengthPromotionalInDays" })
  lengthPromotionalInDays?: number;

  /**
   * Describes the start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartPromotionOrFutureTerms" })
  startPromotionOrFutureTerms?: string;

  /**
   * Describes the end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopPromotionOrFutureTerms" })
  stopPromotionOrFutureTerms?: string;
}

/**
 * Benefit Subtype Code
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitSubTypeEnum {
  FutureMultipleTerms = "FutureMultipleTerms",
  Promotional = "Promotional",
  Regular = "Regular",
}

/**
 * Benefit Interest Group
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup extends SpeakeasyBase {
  /**
   * Benefit Item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitItem" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItem
  )
  benefitItem: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItem;

  /**
   * Benefit Subtype Code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitSubType" })
  benefitSubType?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitSubTypeEnum;
}

/**
 * Benefit
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefits extends SpeakeasyBase {
  /**
   * Describe  one or more benefits if they exist
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Benefit" })
  benefit: boolean;

  @SpeakeasyMetadata({
    elemType:
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup,
  })
  @Expose({ name: "BenefitGroup" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup
  )
  benefitGroup?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup[];
}

/**
 * CCC Subtype Code
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCCSubTypeEnum {
  FutureMultipleTerms = "FutureMultipleTerms",
  Promotional = "Promotional",
  Regular = "Regular",
}

/**
 * The period used to define the specific interest rate for balance transfers
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum {
  Annual = "Annual",
  Monthly = "Monthly",
}

/**
 * Card Scheme Code
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemCardSchemeEnum {
  Cashcard = "Cashcard",
  CreditMastercard = "CreditMastercard",
  CreditVisa = "CreditVisa",
}

/**
 * Repayment frequency
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum {
  Daily = "Daily",
  Flexible = "Flexible",
  Fortnightly = "Fortnightly",
  HalfYearly = "HalfYearly",
  Monthly = "Monthly",
  Quarterly = "Quarterly",
  Weekly = "Weekly",
  Yearly = "Yearly",
}

/**
 * Commercial Credit Card Item
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem extends SpeakeasyBase {
  /**
   * Annual Percentage Rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "APRRate" })
  aprRate: string;

  /**
   * The ability to set separate limts on different cards in one account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AbilityToSetIndividualLimits" })
  abilityToSetIndividualLimits?: boolean;

  /**
   * Describes whether the account have access to an online tool for reprting on expenditure
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessToOnlineDataReportingTool" })
  accessToOnlineDataReportingTool: boolean;

  /**
   * Allocation rules for repayment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AllocationofRepayment" })
  allocationofRepayment?: string;

  /**
   * Details on annual account fee, such as non payable when there is a turnover above a certain sum
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnnualAccountFeeType" })
  annualAccountFeeType?: string;

  /**
   * Standard fee on the card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnnualFeeAmount" })
  annualFeeAmount: string;

  /**
   * The period used to define the specific interest rate for balance transfers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BalanceTransferInterestRatePeriod" })
  balanceTransferInterestRatePeriod?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum;

  /**
   * Balance transfer rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BalanceTransferRate" })
  balanceTransferRate?: string;

  /**
   * Card Scheme Code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CardScheme" })
  cardScheme: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemCardSchemeEnum;

  /**
   * Cash advance rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CashAdvanceRate" })
  cashAdvanceRate: string;

  /**
   * Describes whether cash withdrawals are allowed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CashWithdrawalsAllowed" })
  cashWithdrawalsAllowed: boolean;

  /**
   * Percent of cashback on amount spend
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CashbackPercent" })
  cashbackPercent?: string;

  /**
   * Percentage fee on convenience cheques
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChequeFeePercent" })
  chequeFeePercent?: string;

  /**
   * Describes whether the card account allow convenience cheques
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConvenienceCheque" })
  convenienceCheque: boolean;

  /**
   * Date of the change if it refers to future terms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfChange" })
  dateOfChange?: string;

  /**
   * Describes how many interest free days are given if the card is fully paid at each term
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DaysInterestFreeCreditIfPaymentFull" })
  daysInterestFreeCreditIfPaymentFull: number;

  /**
   * The margin added, by certain card issuers, to the scheme rate in order to arrive at the exchange rate qouted as the reference exchange rate to the cardholder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExchangeRateAdjustment" })
  exchangeRateAdjustment: string;

  /**
   * Percentage fee on a convenince cheques
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeesOnCheque" })
  feesOnCheque?: string;

  /**
   * Additional card fee applied to sterling cash withdrawal made abroad
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ForeignCashFee" })
  foreignCashFee?: string;

  /**
   * Additional card fee rate applied to sterling cash withdrawal made abroad
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ForeignCashFeeRate" })
  foreignCashFeeRate?: string;

  /**
   * Additional card fee applied to sterling retail transactions made abroad
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ForeignPurchaseFee" })
  foreignPurchaseFee?: string;

  /**
   * Additional card fee rate applied to sterling retail transactions made abroad
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ForeignPurchaseFeeRate" })
  foreignPurchaseFeeRate?: string;

  /**
   * Amount payable for issuing an emergency card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IssuingEmergencyCardsFees" })
  issuingEmergencyCardsFees: string;

  /**
   * Describes the length if only a duration is given instead of a date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LengthPromotionalInDays" })
  lengthPromotionalInDays?: number;

  /**
   * The maximum numbers of cards per account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumNumberOfCardsPermitted" })
  maximumNumberOfCardsPermitted?: number;

  /**
   * Minimum £500, maximum subject to status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumCreditLimit" })
  minimumCreditLimit: string;

  /**
   * The minimum lending available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumLendingAmount" })
  minimumLendingAmount?: string;

  /**
   * Minimum repayment amount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumRepaymentAmount" })
  minimumRepaymentAmount?: string;

  /**
   * Minimum repayment as percentage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumRepaymentPercentage" })
  minimumRepaymentPercentage?: string;

  /**
   * An additional fee applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonSterlingCashFee" })
  nonSterlingCashFee?: string;

  /**
   * An additional fee rate applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonSterlingCashFeeRate" })
  nonSterlingCashFeeRate?: string;

  /**
   * An additional fee applied to certain card retail transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonSterlingPurchaseFee" })
  nonSterlingPurchaseFee?: string;

  /**
   * An additional fee rate applied to certain card retail transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonSterlingPurchaseFeeRate" })
  nonSterlingPurchaseFeeRate?: string;

  /**
   * A fee applied to all non-Sterling card transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonSterlingTransactionFee" })
  nonSterlingTransactionFee?: string;

  /**
   * A fee rate applied to all non-Sterling card transactions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonSterlingTransactionFeeRate" })
  nonSterlingTransactionFeeRate?: string;

  /**
   * Fee applicable if the card was credited over its limit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OverLimitFee" })
  overLimitFee?: string;

  /**
   * How many days after statement is the payment expected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentDaysAfterStatement" })
  paymentDaysAfterStatement: number;

  /**
   * Any payment network fee applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentSchemeExchangeFee" })
  paymentSchemeExchangeFee?: string;

  /**
   * Any payment network fee rate applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentSchemeExchangeFeeRate" })
  paymentSchemeExchangeFeeRate?: string;

  /**
   * The base exchange rate used in settlement of the transaction between issuer and scheme
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentSchemeExchangeRate" })
  paymentSchemeExchangeRate?: string;

  /**
   * Purchase rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PurchaseRate" })
  purchaseRate: string;

  /**
   * Repayment frequency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RepaymentFrequency" })
  repaymentFrequency: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum;

  /**
   * Additional notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RepaymentNotes" })
  repaymentNotes?: string;

  /**
   * Describes the start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartPromotionOrFutureTerms" })
  startPromotionOrFutureTerms?: string;

  /**
   * Describes whether there is a statement at account level
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatementAtAccountLevel" })
  statementAtAccountLevel: boolean;

  /**
   * Describes whether there is a statement at card level
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatementAtPersonalLevel" })
  statementAtPersonalLevel: boolean;

  /**
   * Describes the end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopPromotionOrFutureTerms" })
  stopPromotionOrFutureTerms?: string;
}

/**
 * Commercial Credit Card Group
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetails extends SpeakeasyBase {
  /**
   * CCC Subtype Code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CCSubType" })
  ccSubType: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCCSubTypeEnum;

  /**
   * Commercial Credit Card Item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CommercialCreditCardItem" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem
  )
  commercialCreditCardItem: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem;
}

/**
 * Eligibility type
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityEligibilityTypeEnum {
  AnyBusinessCustomer = "AnyBusinessCustomer",
  BusinessOnly = "BusinessOnly",
  CreditCard = "CreditCard",
  CreditScoring = "CreditScoring",
  EmailAddress = "EmailAddress",
  ExistingCustomers = "ExistingCustomers",
  IdAndV = "IdAndV",
  Mortgage = "Mortgage",
  NoArrearsOnLoan = "NoArrearsOnLoan",
  NoCustomerInArrears = "NoCustomerInArrears",
  NoOverOverdraftThirtyDays = "NoOverOverdraftThirtyDays",
  NoSoleUkAccountOrBankrupt = "NoSoleUkAccountOrBankrupt",
  Ntb = "NTB",
  NTBBusiness = "NTBBusiness",
  SoleStudentAccount = "SoleStudentAccount",
  SoleUkAccount = "SoleUkAccount",
  StudentsOnly = "StudentsOnly",
  TwoMonthsOfCourseStart = "TwoMonthsOfCourseStart",
  UCASFulltimeTwoYears = "UCASFulltimeTwoYears",
}

/**
 * Specific eligibility for marketing
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMarketingEligibilityEnum {
  ExistingCustomers = "ExistingCustomers",
  NewCustomersOnly = "NewCustomersOnly",
  SwitchersOnly = "SwitchersOnly",
  StartUp = "StartUp",
}

/**
 * The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMinimumIncomeFrequencyEnum {
  AcademicTerm = "AcademicTerm",
  HalfYearly = "HalfYearly",
  Monthly = "Monthly",
  Quarterly = "Quarterly",
  Weekly = "Weekly",
  Yearly = "Yearly",
}

/**
 * Indicates a customer must be current resident of a geographic area/country
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityResidencyRestrictedRegionEnum {
  Uk = "UK",
  Eea = "EEA",
  Eu = "EU",
  Efta = "EFTA",
  GbEng = "GB - ENG",
  GbNir = "GB - NIR",
  GbSct = "GB - SCT",
  GbWls = "GB - WLS",
  Irl = "IRL",
}

/**
 * Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilitySingleJointIncomeEnum {
  Joint = "Joint",
  SoleIncome = "SoleIncome",
  SoleOrJoint = "SoleOrJoint",
  Turnover = "Turnover",
}

/**
 * Eligibility
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibility extends SpeakeasyBase {
  /**
   * Indicates a customer's age is part of eligibility criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AgeRestricted" })
  ageRestricted: boolean;

  /**
   * Annual Business Turnover
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnnualBusinessTurnover" })
  annualBusinessTurnover?: string;

  /**
   * Annual Business Turnover Currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnnualBusinessTurnoverCurrency" })
  annualBusinessTurnoverCurrency?: string;

  /**
   * One paragraph detailing the eligibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description: string;

  /**
   * Free text description, denotes non standard eligibilities not included in the code list
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EligibilityName" })
  eligibilityName?: string;

  /**
   * Optional additional notes to supplement the eligibility conditions. Only used for very specific conditions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EligibilityNotes" })
  eligibilityNotes?: string;

  /**
   * Eligibility type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EligibilityType" })
  eligibilityType?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityEligibilityTypeEnum;

  /**
   * Stipulates any particular definition of income that applies to the income eligibility and/or method by which income must paid into the account (eg Salary DD)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IncomeCondition" })
  incomeCondition?: string;

  /**
   * Indicates if eligibility linked to income
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IncomeTurnoverRelated" })
  incomeTurnoverRelated: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "MarketingEligibility" })
  marketingEligibility?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMarketingEligibilityEnum[];

  /**
   * Maximum number of the same prodcut the customer may hold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxNumberOfAccounts" })
  maxNumberOfAccounts?: string;

  /**
   * Maximum age, in years, allowed to hold the account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumAge" })
  maximumAge?: number;

  /**
   * Maximum age, in years, to open an account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumAgeToOpen" })
  maximumAgeToOpen?: number;

  /**
   * A maximum amount to be deposited at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumOpeningAmount" })
  maximumOpeningAmount?: boolean;

  /**
   * Minimum Income Amount required to paid into the account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinIncomeTurnoverPaidIntoAccount" })
  minIncomeTurnoverPaidIntoAccount?: number;

  /**
   * Minimum age, in years, required to hold an account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumAge" })
  minimumAge?: number;

  /**
   * A minimum deposit required to hold this account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumDeposit" })
  minimumDeposit?: boolean;

  /**
   * The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumIncomeFrequency" })
  minimumIncomeFrequency?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMinimumIncomeFrequencyEnum;

  /**
   * Minimum income / Turnover required to hold the product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumIncomeTurnoverAmount" })
  minimumIncomeTurnoverAmount?: string;

  /**
   * Minimum income / Turnover Currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumIncomeTurnoverCurrency" })
  minimumIncomeTurnoverCurrency?: string;

  /**
   * Minimum Operating Balance
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumOperatingBalance" })
  minimumOperatingBalance?: string;

  /**
   * Minimum Operating Balance currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumOperatingBalanceCurrency" })
  minimumOperatingBalanceCurrency?: string;

  /**
   * Is there a Minimum Operating Balance?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumOperatingBalanceExists" })
  minimumOperatingBalanceExists?: boolean;

  /**
   * Maximum Amount to be depositing at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMaximumAmount" })
  openingDepositMaximumAmount?: string;

  /**
   * The currency of the Minimum Amount to be depositing at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMaximumCurrency" })
  openingDepositMaximumCurrency?: string;

  /**
   * Minimum Amount to be held on account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMinimum" })
  openingDepositMinimum?: string;

  /**
   * The currency of the Minimum Amount to be depositing at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMinimumCurrency" })
  openingDepositMinimumCurrency?: string;

  /**
   * Indicates that it is necessary to hold another product with the bank in order to be eligible for this product or feature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OtherFinancialHoldingRequired" })
  otherFinancialHoldingRequired: boolean;

  /**
   * Describes if a previous bankruptcy / insolvency disqualfies for this account Details in ELI-280
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PreviousBankruptcy" })
  previousBankruptcy: boolean;

  /**
   * Indicates a customer's residency forms part of the eligibility criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ResidencyRestricted" })
  residencyRestricted: boolean;

  /**
   * Indicates a customer must be current resident of a geographic area/country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ResidencyRestrictedRegion" })
  residencyRestrictedRegion?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityResidencyRestrictedRegionEnum;

  /**
   * Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SingleJointIncome" })
  singleJointIncome?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilitySingleJointIncomeEnum;

  /**
   * Is the product available to operate as a Clubs or Societies account?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ThirdSectorOrganisations" })
  thirdSectorOrganisations: boolean;
}

/**
 * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrandTrademarkIPOCodeEnum {
  Uk = "UK",
  Eu = "EU",
}

/**
 * Brand
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrand extends SpeakeasyBase {
  /**
   * The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkID" })
  trademarkID: string;

  /**
   * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkIPOCode" })
  trademarkIPOCode: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrandTrademarkIPOCodeEnum;
}

/**
 * Organisation Name
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisationOrganisationName extends SpeakeasyBase {
  /**
   * Legal Name of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LegalName" })
  legalName: string;
}

/**
 * Parent organisation
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisation extends SpeakeasyBase {
  /**
   * The BIC from the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BIC" })
  bic?: string;

  /**
   * The LEI ID of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LEI" })
  lei?: string;

  /**
   * Organisation Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OrganisationName" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisationOrganisationName
  )
  organisationName: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisationOrganisationName;
}

/**
 * Organisation
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisation extends SpeakeasyBase {
  /**
   * Brand
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Brand" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrand
  )
  brand: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrand;

  /**
   * Parent organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ParentOrganisation" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisation
  )
  parentOrganisation: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisation;
}

/**
 * Marketing or industry segment that the product is designed for
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductSegmentEnum {
  Cashback = "Cashback",
  Corporate = "Corporate",
  General = "General",
  Reward = "Reward",
  Sme = "SME",
}

/**
 * Descriptive code for the product category
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductTypeEnum {
  CommercialCreditCards = "CommercialCreditCards",
}

/**
 * Commercial Credit Card
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonData extends SpeakeasyBase {
  /**
   * Benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Benefits" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefits
  )
  benefits: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefits;

  /**
   * Product description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description: string;

  /**
   * Commercial Credit Card Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Details" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetails
  )
  details: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetails;

  /**
   * Eligibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Eligibility" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibility
  )
  eligibility: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibility;

  /**
   * Product key features
   */
  @SpeakeasyMetadata()
  @Expose({ name: "KeyFeatures" })
  keyFeatures: string;

  /**
   * Organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Organisation" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisation
  )
  organisation: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisation;

  /**
   * Additional Features of the card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OtherKeyFeatures" })
  otherKeyFeatures?: string;

  /**
   * Indicates whether a payment holiday is possible
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentHoliday" })
  paymentHoliday: boolean;

  /**
   * Detailed description on the payment holiday if available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentHolidayDescription" })
  paymentHolidayDescription?: string;

  /**
   * Identifier within the parent organisation for the product. Must be unique in the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductIdentifier" })
  productIdentifier: string;

  /**
   * Name of the Commercial Credit Card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductName" })
  productName: string;

  /**
   * Marketing or industry segment that the product is designed for
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductSegment" })
  productSegment?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductSegmentEnum[];

  /**
   * Descriptive code for the product category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductType" })
  productType: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductTypeEnum;

  /**
   * URL provided by the organisation which redirects to the product (on live products only). There might be more than one product at a given URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductURL" })
  productURL: string[];

  /**
   * URL provided by the parent organisation which redirects to the current T&Cs. Only applies on live products
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TsandCs" })
  tsandCs: string[];
}

export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum {
  UseOfTheAPIsAndAnyRelatedDataWillBeSubjectToTheTermsOfTheOpenLicenceAndSubjectToTermsAndConditions = "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions",
}

/**
 * Open Banking License
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum {
  HttpsWwwOpenbankingOrgUkOpenLicence = "https://www.openbanking.org.uk/open-licence",
}

/**
 * Open Banking Terms of Use
 */
export enum GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum {
  HttpsWwwOpenbankingOrgUkTerms = "https://www.openbanking.org.uk/terms",
}

export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Agreement" })
  agreement: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated: Date;

  /**
   * Open Banking License
   */
  @SpeakeasyMetadata()
  @Expose({ name: "License" })
  license: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum;

  /**
   * Open Banking Terms of Use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TermsOfUse" })
  termsOfUse: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TotalResults" })
  totalResults: number;
}

/**
 * Successful response with a list of `Commercial Credit Card` data
 */
export class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJson extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonData,
  })
  @Expose({ name: "data" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonData
  )
  data: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonData[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(
    () =>
      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData
  )
  meta: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData;
}

export class GetCommercialCreditCardsResponse extends SpeakeasyBase {
  /**
   * You have sent a request which could not be understood.
   */
  @SpeakeasyMetadata()
  fourHundredErrorObject?: GetCommercialCreditCards400ErrorObject;

  /**
   * Your client has failed to submit a request, and a timeout has occurred.
   */
  @SpeakeasyMetadata()
  fourHundredAndEightErrorObject?: GetCommercialCreditCards408ErrorObject;

  /**
   * You have requested this resource too often. Slow down.
   */
  @SpeakeasyMetadata()
  fourHundredAndTwentyNineErrorObject?: GetCommercialCreditCards429ErrorObject;

  /**
   * An error occurred on the server. No further information is available.
   */
  @SpeakeasyMetadata()
  fiveHundredErrorObject?: GetCommercialCreditCards500ErrorObject;

  /**
   * The service is temporarily unavailable.
   */
  @SpeakeasyMetadata()
  fiveHundredAndThreeErrorObject?: GetCommercialCreditCards503ErrorObject;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A standard error response.
   */
  @SpeakeasyMetadata()
  errorObject?: GetCommercialCreditCardsErrorObject;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response with a list of `Commercial Credit Card` data
   */
  @SpeakeasyMetadata()
  getCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonObject?: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJson;
}
