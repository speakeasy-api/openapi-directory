// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// isochroneAPI - Everything about isochrones
type isochroneAPI struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newIsochroneAPI(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *isochroneAPI {
	return &isochroneAPI{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// GetIsochrone - Isochrone Endpoint
// ### Example
// You can get an example response via:
//
// ```
// curl "https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=[YOUR_KEY]"
// ```
//
// Don't forget to replace the placeholder with your own key.
//
// ### Introduction
// ![Isochrone screenshot](./img/isochrone-example.png)
//
// An isochrone of a location is ”a line connecting points at which a vehicle arrives at the same time”, see Wikipedia.
// With the same API you can also calculate isodistances, just use the parameter distance_limit instead of time_limit`.
//
// ### Use Cases
// Some possible areas in which this API may be useful to you:
//
// - real estate analysis
// - realtors
// - vehicle scheduling
// - geomarketing
// - reach of electric vehicles
// - transport planning
// - logistics (distribution and retail network planning)
//
// ### API Clients and Examples
// See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#isochrone).
func (s *isochroneAPI) GetIsochrone(ctx context.Context, request operations.GetIsochroneRequest) (*operations.GetIsochroneResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/isochrone"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetIsochroneResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.IsochroneResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.IsochroneResponse = out
		}
	default:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.GHError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GHError = out
		}
	}

	return res, nil
}
