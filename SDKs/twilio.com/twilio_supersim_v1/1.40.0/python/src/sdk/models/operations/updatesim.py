"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import sim_enum_status_update_enum as shared_sim_enum_status_update_enum
from ..shared import supersim_v1_sim as shared_supersim_v1_sim
from enum import Enum
from typing import Optional

UPDATE_SIM_SERVERS = [
	"https://supersim.twilio.com",
]


@dataclasses.dataclass
class UpdateSimSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateSimUpdateSimRequestCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateSimUpdateSimRequest:
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AccountSid' }})
    r"""The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource's status is new."""  
    callback_method: Optional[UpdateSimUpdateSimRequestCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackMethod' }})
    r"""The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST."""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackUrl' }})
    r"""The URL we should call using the `callback_method` after an asynchronous update has finished."""  
    fleet: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Fleet' }})
    r"""The SID or unique name of the Fleet to which the SIM resource should be assigned."""  
    status: Optional[shared_sim_enum_status_update_enum.SimEnumStatusUpdateEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Status' }})  
    unique_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'UniqueName' }})
    r"""An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource."""  
    

@dataclasses.dataclass
class UpdateSimRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Sim resource to update."""  
    request_body: Optional[UpdateSimUpdateSimRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateSimResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    supersim_v1_sim: Optional[shared_supersim_v1_sim.SupersimV1Sim] = dataclasses.field(default=None)
    r"""OK"""  
    