// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
type InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnumCad InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnumChf InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnumEur InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnumGbp InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnumJpy InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnumUsd InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum - Why the ACH transfer was declined.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumAchRouteCanceled             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "ach_route_canceled"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumAchRouteDisabled             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "ach_route_disabled"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumBreachesLimit                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "breaches_limit"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumCreditEntryRefusedByReceiver InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "credit_entry_refused_by_receiver"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumDuplicateReturn              InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "duplicate_return"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumEntityNotActive              InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "entity_not_active"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumTransactionNotAllowed        InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "transaction_not_allowed"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumGroupLocked                  InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "group_locked"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumInsufficientFunds            InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "insufficient_funds"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumNoAchRoute                   InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "no_ach_route"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnumOriginatorRequest            InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum = "originator_request"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ach_route_canceled":
		fallthrough
	case "ach_route_disabled":
		fallthrough
	case "breaches_limit":
		fallthrough
	case "credit_entry_refused_by_receiver":
		fallthrough
	case "duplicate_return":
		fallthrough
	case "entity_not_active":
		fallthrough
	case "transaction_not_allowed":
		fallthrough
	case "group_locked":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "no_ach_route":
		fallthrough
	case "originator_request":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDecline - A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDecline struct {
	// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	OriginatorCompanyDescriptiveDate   string `json:"originator_company_descriptive_date"`
	OriginatorCompanyDiscretionaryData string `json:"originator_company_discretionary_data"`
	OriginatorCompanyID                string `json:"originator_company_id"`
	OriginatorCompanyName              string `json:"originator_company_name"`
	// Why the ACH transfer was declined.
	Reason           InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum `json:"reason"`
	ReceiverIDNumber string                                                                                                   `json:"receiver_id_number"`
	ReceiverName     string                                                                                                   `json:"receiver_name"`
	TraceNumber      string                                                                                                   `json:"trace_number"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnumCad InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnumChf InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnumEur InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnumGbp InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnumJpy InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnumUsd InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum - The payment network used to process this card authorization
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnumVisa InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum = "visa"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "visa":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum - For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumMailPhoneOrder                                          InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "mail_phone_order"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumRecurring                                               InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "recurring"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumInstallment                                             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "installment"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumUnknownMailPhoneOrder                                   InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "unknown_mail_phone_order"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumSecureElectronicCommerce                                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "secure_electronic_commerce"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransactionAt3dsCapableMerchant InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction_at_3ds_capable_merchant"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransaction                     InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnumNonSecureTransaction                                    InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_secure_transaction"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mail_phone_order":
		fallthrough
	case "recurring":
		fallthrough
	case "installment":
		fallthrough
	case "unknown_mail_phone_order":
		fallthrough
	case "secure_electronic_commerce":
		fallthrough
	case "non_authenticated_security_transaction_at_3ds_capable_merchant":
		fallthrough
	case "non_authenticated_security_transaction":
		fallthrough
	case "non_secure_transaction":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum - The method used to enter the cardholder's primary account number and card expiration date
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumManual                     InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "manual"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripeNoCvv        InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe_no_cvv"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumOpticalCode                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "optical_code"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCard      InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumContactless                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumCredentialOnFile           InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "credential_on_file"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripe             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumContactlessMagneticStripe  InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless_magnetic_stripe"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCardNoCvv InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card_no_cvv"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manual":
		fallthrough
	case "magnetic_stripe_no_cvv":
		fallthrough
	case "optical_code":
		fallthrough
	case "integrated_circuit_card":
		fallthrough
	case "contactless":
		fallthrough
	case "credential_on_file":
		fallthrough
	case "magnetic_stripe":
		fallthrough
	case "contactless_magnetic_stripe":
		fallthrough
	case "integrated_circuit_card_no_cvv":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisa - Fields specific to the `visa` network
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisa struct {
	// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
	ElectronicCommerceIndicator InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum `json:"electronic_commerce_indicator"`
	// The method used to enter the cardholder's primary account number and card expiration date
	PointOfServiceEntryMode InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum `json:"point_of_service_entry_mode"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetails - Fields specific to the `network`
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetails struct {
	// Fields specific to the `visa` network
	Visa InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisa `json:"visa"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum - Why the transaction was declined.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumCardNotActive               InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "card_not_active"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumEntityNotActive             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "entity_not_active"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumGroupLocked                 InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "group_locked"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumInsufficientFunds           InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "insufficient_funds"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumCvv2Mismatch                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "cvv2_mismatch"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumTransactionNotAllowed       InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "transaction_not_allowed"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumBreachesLimit               InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "breaches_limit"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumWebhookDeclined             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "webhook_declined"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumWebhookTimedOut             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "webhook_timed_out"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnumDeclinedByStandInProcessing InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum = "declined_by_stand_in_processing"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "card_not_active":
		fallthrough
	case "entity_not_active":
		fallthrough
	case "group_locked":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "cvv2_mismatch":
		fallthrough
	case "transaction_not_allowed":
		fallthrough
	case "breaches_limit":
		fallthrough
	case "webhook_declined":
		fallthrough
	case "webhook_timed_out":
		fallthrough
	case "declined_by_stand_in_processing":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDecline - A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDecline struct {
	// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum `json:"currency"`
	// If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
	DigitalWalletTokenID string `json:"digital_wallet_token_id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The merchant descriptor of the merchant the card is transacting with.
	MerchantDescriptor string `json:"merchant_descriptor"`
	// The state the merchant resides in.
	MerchantState string `json:"merchant_state"`
	// The payment network used to process this card authorization
	Network InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum `json:"network"`
	// Fields specific to the `network`
	NetworkDetails InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetails `json:"network_details"`
	// The identifier of the Real-Time Decision sent to approve or decline this transaction.
	RealTimeDecisionID string `json:"real_time_decision_id"`
	// Why the transaction was declined.
	Reason InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum `json:"reason"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnumCad InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnumChf InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnumEur InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnumGbp InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnumJpy InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnumUsd InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDecline - A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDecline struct {
	// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                                                                `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                                                                `json:"merchant_category_code"`
	MerchantCity         string                                                                                                                `json:"merchant_city"`
	MerchantCountry      string                                                                                                                `json:"merchant_country"`
	MerchantDescriptor   string                                                                                                                `json:"merchant_descriptor"`
	MerchantState        string                                                                                                                `json:"merchant_state"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum - The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumAchDecline                             InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "ach_decline"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumCardDecline                            InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "card_decline"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumCheckDecline                           InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "check_decline"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumInboundRealTimePaymentsTransferDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "inbound_real_time_payments_transfer_decline"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumInternationalAchDecline                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "international_ach_decline"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumCardRouteDecline                       InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "card_route_decline"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnumOther                                  InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum = "other"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ach_decline":
		fallthrough
	case "card_decline":
		fallthrough
	case "check_decline":
		fallthrough
	case "inbound_real_time_payments_transfer_decline":
		fallthrough
	case "international_ach_decline":
		fallthrough
	case "card_route_decline":
		fallthrough
	case "other":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum - Why the check was declined.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumAchRouteCanceled      InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "ach_route_canceled"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumAchRouteDisabled      InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "ach_route_disabled"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumBreachesLimit         InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "breaches_limit"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumEntityNotActive       InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "entity_not_active"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumGroupLocked           InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "group_locked"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumInsufficientFunds     InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "insufficient_funds"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumUnableToLocateAccount InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "unable_to_locate_account"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumUnableToProcess       InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "unable_to_process"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumReferToImage          InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "refer_to_image"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumStopPaymentRequested  InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "stop_payment_requested"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnumReturned              InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum = "returned"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ach_route_canceled":
		fallthrough
	case "ach_route_disabled":
		fallthrough
	case "breaches_limit":
		fallthrough
	case "entity_not_active":
		fallthrough
	case "group_locked":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "unable_to_locate_account":
		fallthrough
	case "unable_to_process":
		fallthrough
	case "refer_to_image":
		fallthrough
	case "stop_payment_requested":
		fallthrough
	case "returned":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDecline - A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDecline struct {
	// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount        int64  `json:"amount"`
	AuxiliaryOnUs string `json:"auxiliary_on_us"`
	// Why the check was declined.
	Reason InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum `json:"reason"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnumCad InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnumChf InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnumEur InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnumGbp InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnumJpy InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnumUsd InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum - Why the transfer was declined.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnumAccountNumberCanceled      InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum = "account_number_canceled"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnumAccountNumberDisabled      InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum = "account_number_disabled"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnumGroupLocked                InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum = "group_locked"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnumEntityNotActive            InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum = "entity_not_active"
	InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnumRealTimePaymentsNotEnabled InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum = "real_time_payments_not_enabled"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account_number_canceled":
		fallthrough
	case "account_number_disabled":
		fallthrough
	case "group_locked":
		fallthrough
	case "entity_not_active":
		fallthrough
	case "real_time_payments_not_enabled":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDecline - A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDecline struct {
	// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The name the sender of the transfer specified as the recipient of the transfer.
	CreditorName string `json:"creditor_name"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
	Currency InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum `json:"currency"`
	// The account number of the account that sent the transfer.
	DebtorAccountNumber string `json:"debtor_account_number"`
	// The name provided by the sender of the transfer.
	DebtorName string `json:"debtor_name"`
	// The routing number of the account that sent the transfer.
	DebtorRoutingNumber string `json:"debtor_routing_number"`
	// Why the transfer was declined.
	Reason InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum `json:"reason"`
	// Additional information included with the transfer.
	RemittanceInformation string `json:"remittance_information"`
	// The Real Time Payments network identification of the declined transfer.
	TransactionIdentification string `json:"transaction_identification"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInternationalACHDecline - A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInternationalACHDecline struct {
	// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                                                 int64  `json:"amount"`
	DestinationCountryCode                                 string `json:"destination_country_code"`
	DestinationCurrencyCode                                string `json:"destination_currency_code"`
	ForeignExchangeIndicator                               string `json:"foreign_exchange_indicator"`
	ForeignExchangeReference                               string `json:"foreign_exchange_reference"`
	ForeignExchangeReferenceIndicator                      string `json:"foreign_exchange_reference_indicator"`
	ForeignPaymentAmount                                   int64  `json:"foreign_payment_amount"`
	ForeignTraceNumber                                     string `json:"foreign_trace_number"`
	InternationalTransactionTypeCode                       string `json:"international_transaction_type_code"`
	OriginatingCurrencyCode                                string `json:"originating_currency_code"`
	OriginatingDepositoryFinancialInstitutionBranchCountry string `json:"originating_depository_financial_institution_branch_country"`
	OriginatingDepositoryFinancialInstitutionID            string `json:"originating_depository_financial_institution_id"`
	OriginatingDepositoryFinancialInstitutionIDQualifier   string `json:"originating_depository_financial_institution_id_qualifier"`
	OriginatingDepositoryFinancialInstitutionName          string `json:"originating_depository_financial_institution_name"`
	OriginatorCity                                         string `json:"originator_city"`
	OriginatorCompanyEntryDescription                      string `json:"originator_company_entry_description"`
	OriginatorCountry                                      string `json:"originator_country"`
	OriginatorIdentification                               string `json:"originator_identification"`
	OriginatorName                                         string `json:"originator_name"`
	OriginatorPostalCode                                   string `json:"originator_postal_code"`
	OriginatorStateOrProvince                              string `json:"originator_state_or_province"`
	OriginatorStreetAddress                                string `json:"originator_street_address"`
	PaymentRelatedInformation                              string `json:"payment_related_information"`
	PaymentRelatedInformation2                             string `json:"payment_related_information2"`
	ReceiverCity                                           string `json:"receiver_city"`
	ReceiverCountry                                        string `json:"receiver_country"`
	ReceiverIdentificationNumber                           string `json:"receiver_identification_number"`
	ReceiverPostalCode                                     string `json:"receiver_postal_code"`
	ReceiverStateOrProvince                                string `json:"receiver_state_or_province"`
	ReceiverStreetAddress                                  string `json:"receiver_street_address"`
	ReceivingCompanyOrIndividualName                       string `json:"receiving_company_or_individual_name"`
	ReceivingDepositoryFinancialInstitutionCountry         string `json:"receiving_depository_financial_institution_country"`
	ReceivingDepositoryFinancialInstitutionID              string `json:"receiving_depository_financial_institution_id"`
	ReceivingDepositoryFinancialInstitutionIDQualifier     string `json:"receiving_depository_financial_institution_id_qualifier"`
	ReceivingDepositoryFinancialInstitutionName            string `json:"receiving_depository_financial_institution_name"`
	TraceNumber                                            string `json:"trace_number"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSource - This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
type InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSource struct {
	// A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
	AchDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDecline `json:"ach_decline"`
	// A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
	CardDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDecline `json:"card_decline"`
	// A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
	CardRouteDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDecline `json:"card_route_decline"`
	// The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Category InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum `json:"category"`
	// A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
	CheckDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDecline `json:"check_decline"`
	// A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
	InboundRealTimePaymentsTransferDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDecline `json:"inbound_real_time_payments_transfer_decline"`
	// A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
	InternationalAchDecline InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSourceInternationalACHDecline `json:"international_ach_decline"`
}

// InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum - A constant representing the object's type. For this resource it will always be `declined_transaction`.
type InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum string

const (
	InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnumDeclinedTransaction InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum = "declined_transaction"
)

func (e *InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "declined_transaction":
		*e = InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultDeclinedTransaction - If the authorization attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: card_decline`.
type InboundCardAuthorizationSimulationResultDeclinedTransaction struct {
	// The identifier for the Account the Declined Transaction belongs to.
	AccountID string `json:"account_id"`
	// The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
	Currency InboundCardAuthorizationSimulationResultDeclinedTransactionCurrencyEnum `json:"currency"`
	// This is the description the vendor provides.
	Description string `json:"description"`
	// The Declined Transaction identifier.
	ID string `json:"id"`
	// The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
	RouteID string `json:"route_id"`
	// The type of the route this Declined Transaction came through.
	RouteType string `json:"route_type"`
	// This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
	Source InboundCardAuthorizationSimulationResultDeclinedTransactionDeclinedTransactionSource `json:"source"`
	// A constant representing the object's type. For this resource it will always be `declined_transaction`.
	Type InboundCardAuthorizationSimulationResultDeclinedTransactionTypeEnum `json:"type"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
type InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstruction - A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstructionCurrencyEnum `json:"currency"`
	// The identifier of the Account Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceACHTransferInstruction - A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceACHTransferInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the ACH Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum - The payment network used to process this card authorization
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnumVisa InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum = "visa"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "visa":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum - For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumMailPhoneOrder                                          InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "mail_phone_order"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumRecurring                                               InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "recurring"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumInstallment                                             InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "installment"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumUnknownMailPhoneOrder                                   InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "unknown_mail_phone_order"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumSecureElectronicCommerce                                InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "secure_electronic_commerce"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransactionAt3dsCapableMerchant InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction_at_3ds_capable_merchant"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransaction                     InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonSecureTransaction                                    InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_secure_transaction"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mail_phone_order":
		fallthrough
	case "recurring":
		fallthrough
	case "installment":
		fallthrough
	case "unknown_mail_phone_order":
		fallthrough
	case "secure_electronic_commerce":
		fallthrough
	case "non_authenticated_security_transaction_at_3ds_capable_merchant":
		fallthrough
	case "non_authenticated_security_transaction":
		fallthrough
	case "non_secure_transaction":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum - The method used to enter the cardholder's primary account number and card expiration date
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumManual                     InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "manual"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripeNoCvv        InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe_no_cvv"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumOpticalCode                InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "optical_code"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCard      InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumContactless                InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumCredentialOnFile           InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "credential_on_file"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripe             InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumContactlessMagneticStripe  InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless_magnetic_stripe"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCardNoCvv InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card_no_cvv"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manual":
		fallthrough
	case "magnetic_stripe_no_cvv":
		fallthrough
	case "optical_code":
		fallthrough
	case "integrated_circuit_card":
		fallthrough
	case "contactless":
		fallthrough
	case "credential_on_file":
		fallthrough
	case "magnetic_stripe":
		fallthrough
	case "contactless_magnetic_stripe":
		fallthrough
	case "integrated_circuit_card_no_cvv":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa - Fields specific to the `visa` network
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa struct {
	// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
	ElectronicCommerceIndicator InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum `json:"electronic_commerce_indicator"`
	// The method used to enter the cardholder's primary account number and card expiration date
	PointOfServiceEntryMode InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum `json:"point_of_service_entry_mode"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails - Fields specific to the `network`
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails struct {
	// Fields specific to the `visa` network
	Visa InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetailsVisa `json:"visa"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorization - A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorization struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationCurrencyEnum `json:"currency"`
	// If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
	DigitalWalletTokenID string `json:"digital_wallet_token_id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The merchant descriptor of the merchant the card is transacting with.
	MerchantDescriptor string `json:"merchant_descriptor"`
	// The payment network used to process this card authorization
	Network InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkEnum `json:"network"`
	// Fields specific to the `network`
	NetworkDetails InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorizationNetworkDetails `json:"network_details"`
	// The identifier of the Real-Time Decision sent to approve or decline this transaction.
	RealTimeDecisionID string `json:"real_time_decision_id"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorization - A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorization struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency             InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorizationCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                                                                    `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                                                                    `json:"merchant_category_code"`
	MerchantCity         string                                                                                                                    `json:"merchant_city"`
	MerchantCountry      string                                                                                                                    `json:"merchant_country"`
	MerchantDescriptor   string                                                                                                                    `json:"merchant_descriptor"`
	MerchantState        string                                                                                                                    `json:"merchant_state"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum - The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumAccountTransferInstruction          InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "account_transfer_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumAchTransferInstruction              InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "ach_transfer_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumCardAuthorization                   InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "card_authorization"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumCheckDepositInstruction             InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "check_deposit_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumCheckTransferInstruction            InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "check_transfer_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumInboundFundsHold                    InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "inbound_funds_hold"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumCardRouteAuthorization              InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "card_route_authorization"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumRealTimePaymentsTransferInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "real_time_payments_transfer_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumWireDrawdownPaymentInstruction      InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "wire_drawdown_payment_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumWireTransferInstruction             InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "wire_transfer_instruction"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnumOther                               InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum = "other"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account_transfer_instruction":
		fallthrough
	case "ach_transfer_instruction":
		fallthrough
	case "card_authorization":
		fallthrough
	case "check_deposit_instruction":
		fallthrough
	case "check_transfer_instruction":
		fallthrough
	case "inbound_funds_hold":
		fallthrough
	case "card_route_authorization":
		fallthrough
	case "real_time_payments_transfer_instruction":
		fallthrough
	case "wire_drawdown_payment_instruction":
		fallthrough
	case "wire_transfer_instruction":
		fallthrough
	case "other":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstruction - A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the File containing the image of the back of the check that was deposited.
	BackImageFileID string `json:"back_image_file_id"`
	// The identifier of the Check Deposit.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstructionCurrencyEnum `json:"currency"`
	// The identifier of the File containing the image of the front of the check that was deposited.
	FrontImageFileID string `json:"front_image_file_id"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstruction - A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstruction struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstructionCurrencyEnum `json:"currency"`
	// The identifier of the Check Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumCad InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "CAD"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumChf InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "CHF"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumEur InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "EUR"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumGbp InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "GBP"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumJpy InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "JPY"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnumUsd InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum = "USD"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum - The status of the hold.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnumHeld     InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = "held"
	InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnumComplete InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum = "complete"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "held":
		fallthrough
	case "complete":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold - A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold struct {
	// The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// When the hold will be released automatically. Certain conditions may cause it to be released before this time.
	AutomaticallyReleasesAt time.Time `json:"automatically_releases_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
	Currency InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum `json:"currency"`
	// The ID of the Transaction for which funds were held.
	HeldTransactionID string `json:"held_transaction_id"`
	// When the hold was released (if it has been released).
	ReleasedAt time.Time `json:"released_at"`
	// The status of the hold.
	Status InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum `json:"status"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction - A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction struct {
	AccountNumber string `json:"account_number"`
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceWireTransferInstruction - A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceWireTransferInstruction struct {
	AccountNumber string `json:"account_number"`
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
	TransferID         string `json:"transfer_id"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource - This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
type InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource struct {
	// A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
	AccountTransferInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceAccountTransferInstruction `json:"account_transfer_instruction"`
	// A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
	AchTransferInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceACHTransferInstruction `json:"ach_transfer_instruction"`
	// A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
	CardAuthorization InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCardAuthorization `json:"card_authorization"`
	// A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
	CardRouteAuthorization InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceDeprecatedCardAuthorization `json:"card_route_authorization"`
	// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Category InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCategoryEnum `json:"category"`
	// A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
	CheckDepositInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckDepositInstruction `json:"check_deposit_instruction"`
	// A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
	CheckTransferInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceCheckTransferInstruction `json:"check_transfer_instruction"`
	// A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
	InboundFundsHold InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold `json:"inbound_funds_hold"`
	// A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
	WireDrawdownPaymentInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceWireDrawdownPaymentInstruction `json:"wire_drawdown_payment_instruction"`
	// A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
	WireTransferInstruction InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceWireTransferInstruction `json:"wire_transfer_instruction"`
}

// InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum - Whether the Pending Transaction has been confirmed and has an associated Transaction.
type InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionStatusEnumPending  InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum = "pending"
	InboundCardAuthorizationSimulationResultPendingTransactionStatusEnumComplete InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum = "complete"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "complete":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum - A constant representing the object's type. For this resource it will always be `pending_transaction`.
type InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum string

const (
	InboundCardAuthorizationSimulationResultPendingTransactionTypeEnumPendingTransaction InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum = "pending_transaction"
)

func (e *InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending_transaction":
		*e = InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResultPendingTransaction - If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`.
type InboundCardAuthorizationSimulationResultPendingTransaction struct {
	// The identifier for the account this Pending Transaction belongs to.
	AccountID string `json:"account_id"`
	// The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
	Currency InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum `json:"currency"`
	// For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
	Description string `json:"description"`
	// The Pending Transaction identifier.
	ID string `json:"id"`
	// The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
	RouteID string `json:"route_id"`
	// The type of the route this Pending Transaction came through.
	RouteType string `json:"route_type"`
	// This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
	Source InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource `json:"source"`
	// Whether the Pending Transaction has been confirmed and has an associated Transaction.
	Status InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum `json:"status"`
	// A constant representing the object's type. For this resource it will always be `pending_transaction`.
	Type InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum `json:"type"`
}

// InboundCardAuthorizationSimulationResultTypeEnum - A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.
type InboundCardAuthorizationSimulationResultTypeEnum string

const (
	InboundCardAuthorizationSimulationResultTypeEnumInboundCardAuthorizationSimulationResult InboundCardAuthorizationSimulationResultTypeEnum = "inbound_card_authorization_simulation_result"
)

func (e *InboundCardAuthorizationSimulationResultTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound_card_authorization_simulation_result":
		*e = InboundCardAuthorizationSimulationResultTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundCardAuthorizationSimulationResultTypeEnum: %s", s)
	}
}

// InboundCardAuthorizationSimulationResult - The results of a Card Authorization simulation.
type InboundCardAuthorizationSimulationResult struct {
	// If the authorization attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: card_decline`.
	DeclinedTransaction InboundCardAuthorizationSimulationResultDeclinedTransaction `json:"declined_transaction"`
	// If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`.
	PendingTransaction InboundCardAuthorizationSimulationResultPendingTransaction `json:"pending_transaction"`
	// A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.
	Type InboundCardAuthorizationSimulationResultTypeEnum `json:"type"`
}
