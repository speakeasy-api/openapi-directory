// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// DependentResultPersonContactEmailAddressTypeEnum - Type of email address
type DependentResultPersonContactEmailAddressTypeEnum string

const (
	DependentResultPersonContactEmailAddressTypeEnumHome DependentResultPersonContactEmailAddressTypeEnum = "home"
	DependentResultPersonContactEmailAddressTypeEnumWork DependentResultPersonContactEmailAddressTypeEnum = "work"
)

func (e *DependentResultPersonContactEmailAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "home":
		fallthrough
	case "work":
		*e = DependentResultPersonContactEmailAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonContactEmailAddressTypeEnum: %s", s)
	}
}

// DependentResultPersonContactPreferredMethodEnum - Preferred method of contact for the person
type DependentResultPersonContactPreferredMethodEnum string

const (
	DependentResultPersonContactPreferredMethodEnumEmail     DependentResultPersonContactPreferredMethodEnum = "email"
	DependentResultPersonContactPreferredMethodEnumHomePhone DependentResultPersonContactPreferredMethodEnum = "home-phone"
	DependentResultPersonContactPreferredMethodEnumMail      DependentResultPersonContactPreferredMethodEnum = "mail"
	DependentResultPersonContactPreferredMethodEnumOther     DependentResultPersonContactPreferredMethodEnum = "other"
	DependentResultPersonContactPreferredMethodEnumWorkPhone DependentResultPersonContactPreferredMethodEnum = "work-phone"
)

func (e *DependentResultPersonContactPreferredMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "email":
		fallthrough
	case "home-phone":
		fallthrough
	case "mail":
		fallthrough
	case "other":
		fallthrough
	case "work-phone":
		*e = DependentResultPersonContactPreferredMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonContactPreferredMethodEnum: %s", s)
	}
}

// DependentResultPersonContact - Contact information for the person
type DependentResultPersonContact struct {
	// Email address of the person
	EmailAddress *string `json:"email_address,omitempty"`
	// Type of email address
	EmailAddressType *DependentResultPersonContactEmailAddressTypeEnum `json:"email_address_type,omitempty"`
	// Home phone number in E.164 format
	HomePhone *string `json:"home_phone,omitempty"`
	// Preferred written or spoken language of the person
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// Preferred method of contact for the person
	PreferredMethod *DependentResultPersonContactPreferredMethodEnum `json:"preferred_method,omitempty"`
	// True if the person can speak or communicate in English
	SpeaksEnglish *bool `json:"speaks_english,omitempty"`
	// Work phone number in E.164 format
	WorkPhone *string `json:"work_phone,omitempty"`
}

// DependentResultPersonDetailsAmericanIndianStateEnum - Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable
type DependentResultPersonDetailsAmericanIndianStateEnum string

const (
	DependentResultPersonDetailsAmericanIndianStateEnumAk DependentResultPersonDetailsAmericanIndianStateEnum = "AK"
	DependentResultPersonDetailsAmericanIndianStateEnumAl DependentResultPersonDetailsAmericanIndianStateEnum = "AL"
	DependentResultPersonDetailsAmericanIndianStateEnumAr DependentResultPersonDetailsAmericanIndianStateEnum = "AR"
	DependentResultPersonDetailsAmericanIndianStateEnumAs DependentResultPersonDetailsAmericanIndianStateEnum = "AS"
	DependentResultPersonDetailsAmericanIndianStateEnumAz DependentResultPersonDetailsAmericanIndianStateEnum = "AZ"
	DependentResultPersonDetailsAmericanIndianStateEnumCa DependentResultPersonDetailsAmericanIndianStateEnum = "CA"
	DependentResultPersonDetailsAmericanIndianStateEnumCo DependentResultPersonDetailsAmericanIndianStateEnum = "CO"
	DependentResultPersonDetailsAmericanIndianStateEnumCt DependentResultPersonDetailsAmericanIndianStateEnum = "CT"
	DependentResultPersonDetailsAmericanIndianStateEnumDc DependentResultPersonDetailsAmericanIndianStateEnum = "DC"
	DependentResultPersonDetailsAmericanIndianStateEnumDe DependentResultPersonDetailsAmericanIndianStateEnum = "DE"
	DependentResultPersonDetailsAmericanIndianStateEnumFl DependentResultPersonDetailsAmericanIndianStateEnum = "FL"
	DependentResultPersonDetailsAmericanIndianStateEnumFm DependentResultPersonDetailsAmericanIndianStateEnum = "FM"
	DependentResultPersonDetailsAmericanIndianStateEnumGa DependentResultPersonDetailsAmericanIndianStateEnum = "GA"
	DependentResultPersonDetailsAmericanIndianStateEnumGu DependentResultPersonDetailsAmericanIndianStateEnum = "GU"
	DependentResultPersonDetailsAmericanIndianStateEnumHi DependentResultPersonDetailsAmericanIndianStateEnum = "HI"
	DependentResultPersonDetailsAmericanIndianStateEnumIa DependentResultPersonDetailsAmericanIndianStateEnum = "IA"
	DependentResultPersonDetailsAmericanIndianStateEnumID DependentResultPersonDetailsAmericanIndianStateEnum = "ID"
	DependentResultPersonDetailsAmericanIndianStateEnumIl DependentResultPersonDetailsAmericanIndianStateEnum = "IL"
	DependentResultPersonDetailsAmericanIndianStateEnumIn DependentResultPersonDetailsAmericanIndianStateEnum = "IN"
	DependentResultPersonDetailsAmericanIndianStateEnumKs DependentResultPersonDetailsAmericanIndianStateEnum = "KS"
	DependentResultPersonDetailsAmericanIndianStateEnumKy DependentResultPersonDetailsAmericanIndianStateEnum = "KY"
	DependentResultPersonDetailsAmericanIndianStateEnumLa DependentResultPersonDetailsAmericanIndianStateEnum = "LA"
	DependentResultPersonDetailsAmericanIndianStateEnumMa DependentResultPersonDetailsAmericanIndianStateEnum = "MA"
	DependentResultPersonDetailsAmericanIndianStateEnumMd DependentResultPersonDetailsAmericanIndianStateEnum = "MD"
	DependentResultPersonDetailsAmericanIndianStateEnumMe DependentResultPersonDetailsAmericanIndianStateEnum = "ME"
	DependentResultPersonDetailsAmericanIndianStateEnumMh DependentResultPersonDetailsAmericanIndianStateEnum = "MH"
	DependentResultPersonDetailsAmericanIndianStateEnumMi DependentResultPersonDetailsAmericanIndianStateEnum = "MI"
	DependentResultPersonDetailsAmericanIndianStateEnumMn DependentResultPersonDetailsAmericanIndianStateEnum = "MN"
	DependentResultPersonDetailsAmericanIndianStateEnumMo DependentResultPersonDetailsAmericanIndianStateEnum = "MO"
	DependentResultPersonDetailsAmericanIndianStateEnumMp DependentResultPersonDetailsAmericanIndianStateEnum = "MP"
	DependentResultPersonDetailsAmericanIndianStateEnumMs DependentResultPersonDetailsAmericanIndianStateEnum = "MS"
	DependentResultPersonDetailsAmericanIndianStateEnumMt DependentResultPersonDetailsAmericanIndianStateEnum = "MT"
	DependentResultPersonDetailsAmericanIndianStateEnumNc DependentResultPersonDetailsAmericanIndianStateEnum = "NC"
	DependentResultPersonDetailsAmericanIndianStateEnumNd DependentResultPersonDetailsAmericanIndianStateEnum = "ND"
	DependentResultPersonDetailsAmericanIndianStateEnumNe DependentResultPersonDetailsAmericanIndianStateEnum = "NE"
	DependentResultPersonDetailsAmericanIndianStateEnumNh DependentResultPersonDetailsAmericanIndianStateEnum = "NH"
	DependentResultPersonDetailsAmericanIndianStateEnumNj DependentResultPersonDetailsAmericanIndianStateEnum = "NJ"
	DependentResultPersonDetailsAmericanIndianStateEnumNm DependentResultPersonDetailsAmericanIndianStateEnum = "NM"
	DependentResultPersonDetailsAmericanIndianStateEnumNv DependentResultPersonDetailsAmericanIndianStateEnum = "NV"
	DependentResultPersonDetailsAmericanIndianStateEnumNy DependentResultPersonDetailsAmericanIndianStateEnum = "NY"
	DependentResultPersonDetailsAmericanIndianStateEnumOh DependentResultPersonDetailsAmericanIndianStateEnum = "OH"
	DependentResultPersonDetailsAmericanIndianStateEnumOk DependentResultPersonDetailsAmericanIndianStateEnum = "OK"
	DependentResultPersonDetailsAmericanIndianStateEnumOr DependentResultPersonDetailsAmericanIndianStateEnum = "OR"
	DependentResultPersonDetailsAmericanIndianStateEnumPa DependentResultPersonDetailsAmericanIndianStateEnum = "PA"
	DependentResultPersonDetailsAmericanIndianStateEnumPr DependentResultPersonDetailsAmericanIndianStateEnum = "PR"
	DependentResultPersonDetailsAmericanIndianStateEnumPw DependentResultPersonDetailsAmericanIndianStateEnum = "PW"
	DependentResultPersonDetailsAmericanIndianStateEnumRi DependentResultPersonDetailsAmericanIndianStateEnum = "RI"
	DependentResultPersonDetailsAmericanIndianStateEnumSc DependentResultPersonDetailsAmericanIndianStateEnum = "SC"
	DependentResultPersonDetailsAmericanIndianStateEnumSd DependentResultPersonDetailsAmericanIndianStateEnum = "SD"
	DependentResultPersonDetailsAmericanIndianStateEnumTn DependentResultPersonDetailsAmericanIndianStateEnum = "TN"
	DependentResultPersonDetailsAmericanIndianStateEnumTx DependentResultPersonDetailsAmericanIndianStateEnum = "TX"
	DependentResultPersonDetailsAmericanIndianStateEnumUm DependentResultPersonDetailsAmericanIndianStateEnum = "UM"
	DependentResultPersonDetailsAmericanIndianStateEnumUt DependentResultPersonDetailsAmericanIndianStateEnum = "UT"
	DependentResultPersonDetailsAmericanIndianStateEnumVa DependentResultPersonDetailsAmericanIndianStateEnum = "VA"
	DependentResultPersonDetailsAmericanIndianStateEnumVi DependentResultPersonDetailsAmericanIndianStateEnum = "VI"
	DependentResultPersonDetailsAmericanIndianStateEnumVt DependentResultPersonDetailsAmericanIndianStateEnum = "VT"
	DependentResultPersonDetailsAmericanIndianStateEnumWa DependentResultPersonDetailsAmericanIndianStateEnum = "WA"
	DependentResultPersonDetailsAmericanIndianStateEnumWi DependentResultPersonDetailsAmericanIndianStateEnum = "WI"
	DependentResultPersonDetailsAmericanIndianStateEnumWv DependentResultPersonDetailsAmericanIndianStateEnum = "WV"
	DependentResultPersonDetailsAmericanIndianStateEnumWy DependentResultPersonDetailsAmericanIndianStateEnum = "WY"
)

func (e *DependentResultPersonDetailsAmericanIndianStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AZ":
		fallthrough
	case "CA":
		fallthrough
	case "CO":
		fallthrough
	case "CT":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "FM":
		fallthrough
	case "GA":
		fallthrough
	case "GU":
		fallthrough
	case "HI":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KS":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MA":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MH":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MP":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NV":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PW":
		fallthrough
	case "RI":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "UM":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		*e = DependentResultPersonDetailsAmericanIndianStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonDetailsAmericanIndianStateEnum: %s", s)
	}
}

// DependentResultPersonDetailsAmericanIndian - American Indian status details (if applicable)
type DependentResultPersonDetailsAmericanIndian struct {
	// Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable
	State *DependentResultPersonDetailsAmericanIndianStateEnum `json:"state,omitempty"`
	// Name of the federally-recognized American Indian or Alaska Native tribe, if applicable
	Tribe *string `json:"tribe,omitempty"`
}

// DependentResultPersonDetailsDisability - Disability details (if applicable)
type DependentResultPersonDetailsDisability struct {
	// True if the disability impacts the ability to communicate or read
	Communication *bool `json:"communication,omitempty"`
	// True if the member has a disability
	Disabled *bool `json:"disabled,omitempty"`
	// Description of the disability
	Reason *string `json:"reason,omitempty"`
}

// DependentResultPersonDetailsTobaccoTypesEnum - Type of tobacco use
type DependentResultPersonDetailsTobaccoTypesEnum string

const (
	DependentResultPersonDetailsTobaccoTypesEnumChewingTobacco DependentResultPersonDetailsTobaccoTypesEnum = "chewing-tobacco"
	DependentResultPersonDetailsTobaccoTypesEnumCigarettes     DependentResultPersonDetailsTobaccoTypesEnum = "cigarettes"
	DependentResultPersonDetailsTobaccoTypesEnumPipe           DependentResultPersonDetailsTobaccoTypesEnum = "pipe"
)

func (e *DependentResultPersonDetailsTobaccoTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "chewing-tobacco":
		fallthrough
	case "cigarettes":
		fallthrough
	case "pipe":
		*e = DependentResultPersonDetailsTobaccoTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonDetailsTobaccoTypesEnum: %s", s)
	}
}

// DependentResultPersonDetailsTobacco - Tobacco usage details (if applicable)
type DependentResultPersonDetailsTobacco struct {
	// Duration of tobacco use
	Duration *string `json:"duration,omitempty"`
	// Frequency of tobacco use
	Frequency *string `json:"frequency,omitempty"`
	// List of types of tobacco use
	Types []DependentResultPersonDetailsTobaccoTypesEnum `json:"types,omitempty"`
	// True if the person uses tobacco of any kind
	User *bool `json:"user,omitempty"`
}

// DependentResultPersonDetails - Additional personal details of the person
type DependentResultPersonDetails struct {
	// American Indian status details (if applicable)
	AmericanIndian *DependentResultPersonDetailsAmericanIndian `json:"american_indian,omitempty"`
	// Disability details (if applicable)
	Disability *DependentResultPersonDetailsDisability `json:"disability,omitempty"`
	// True if the person is in the military
	IsMilitary *bool `json:"is_military,omitempty"`
	// True if the person is a student
	IsStudent *bool `json:"is_student,omitempty"`
	// Tobacco usage details (if applicable)
	Tobacco *DependentResultPersonDetailsTobacco `json:"tobacco,omitempty"`
}

// DependentResultPersonHomeAddressStateEnum - State postal code of the address
type DependentResultPersonHomeAddressStateEnum string

const (
	DependentResultPersonHomeAddressStateEnumAk DependentResultPersonHomeAddressStateEnum = "AK"
	DependentResultPersonHomeAddressStateEnumAl DependentResultPersonHomeAddressStateEnum = "AL"
	DependentResultPersonHomeAddressStateEnumAr DependentResultPersonHomeAddressStateEnum = "AR"
	DependentResultPersonHomeAddressStateEnumAs DependentResultPersonHomeAddressStateEnum = "AS"
	DependentResultPersonHomeAddressStateEnumAz DependentResultPersonHomeAddressStateEnum = "AZ"
	DependentResultPersonHomeAddressStateEnumCa DependentResultPersonHomeAddressStateEnum = "CA"
	DependentResultPersonHomeAddressStateEnumCo DependentResultPersonHomeAddressStateEnum = "CO"
	DependentResultPersonHomeAddressStateEnumCt DependentResultPersonHomeAddressStateEnum = "CT"
	DependentResultPersonHomeAddressStateEnumDc DependentResultPersonHomeAddressStateEnum = "DC"
	DependentResultPersonHomeAddressStateEnumDe DependentResultPersonHomeAddressStateEnum = "DE"
	DependentResultPersonHomeAddressStateEnumFl DependentResultPersonHomeAddressStateEnum = "FL"
	DependentResultPersonHomeAddressStateEnumFm DependentResultPersonHomeAddressStateEnum = "FM"
	DependentResultPersonHomeAddressStateEnumGa DependentResultPersonHomeAddressStateEnum = "GA"
	DependentResultPersonHomeAddressStateEnumGu DependentResultPersonHomeAddressStateEnum = "GU"
	DependentResultPersonHomeAddressStateEnumHi DependentResultPersonHomeAddressStateEnum = "HI"
	DependentResultPersonHomeAddressStateEnumIa DependentResultPersonHomeAddressStateEnum = "IA"
	DependentResultPersonHomeAddressStateEnumID DependentResultPersonHomeAddressStateEnum = "ID"
	DependentResultPersonHomeAddressStateEnumIl DependentResultPersonHomeAddressStateEnum = "IL"
	DependentResultPersonHomeAddressStateEnumIn DependentResultPersonHomeAddressStateEnum = "IN"
	DependentResultPersonHomeAddressStateEnumKs DependentResultPersonHomeAddressStateEnum = "KS"
	DependentResultPersonHomeAddressStateEnumKy DependentResultPersonHomeAddressStateEnum = "KY"
	DependentResultPersonHomeAddressStateEnumLa DependentResultPersonHomeAddressStateEnum = "LA"
	DependentResultPersonHomeAddressStateEnumMa DependentResultPersonHomeAddressStateEnum = "MA"
	DependentResultPersonHomeAddressStateEnumMd DependentResultPersonHomeAddressStateEnum = "MD"
	DependentResultPersonHomeAddressStateEnumMe DependentResultPersonHomeAddressStateEnum = "ME"
	DependentResultPersonHomeAddressStateEnumMh DependentResultPersonHomeAddressStateEnum = "MH"
	DependentResultPersonHomeAddressStateEnumMi DependentResultPersonHomeAddressStateEnum = "MI"
	DependentResultPersonHomeAddressStateEnumMn DependentResultPersonHomeAddressStateEnum = "MN"
	DependentResultPersonHomeAddressStateEnumMo DependentResultPersonHomeAddressStateEnum = "MO"
	DependentResultPersonHomeAddressStateEnumMp DependentResultPersonHomeAddressStateEnum = "MP"
	DependentResultPersonHomeAddressStateEnumMs DependentResultPersonHomeAddressStateEnum = "MS"
	DependentResultPersonHomeAddressStateEnumMt DependentResultPersonHomeAddressStateEnum = "MT"
	DependentResultPersonHomeAddressStateEnumNc DependentResultPersonHomeAddressStateEnum = "NC"
	DependentResultPersonHomeAddressStateEnumNd DependentResultPersonHomeAddressStateEnum = "ND"
	DependentResultPersonHomeAddressStateEnumNe DependentResultPersonHomeAddressStateEnum = "NE"
	DependentResultPersonHomeAddressStateEnumNh DependentResultPersonHomeAddressStateEnum = "NH"
	DependentResultPersonHomeAddressStateEnumNj DependentResultPersonHomeAddressStateEnum = "NJ"
	DependentResultPersonHomeAddressStateEnumNm DependentResultPersonHomeAddressStateEnum = "NM"
	DependentResultPersonHomeAddressStateEnumNv DependentResultPersonHomeAddressStateEnum = "NV"
	DependentResultPersonHomeAddressStateEnumNy DependentResultPersonHomeAddressStateEnum = "NY"
	DependentResultPersonHomeAddressStateEnumOh DependentResultPersonHomeAddressStateEnum = "OH"
	DependentResultPersonHomeAddressStateEnumOk DependentResultPersonHomeAddressStateEnum = "OK"
	DependentResultPersonHomeAddressStateEnumOr DependentResultPersonHomeAddressStateEnum = "OR"
	DependentResultPersonHomeAddressStateEnumPa DependentResultPersonHomeAddressStateEnum = "PA"
	DependentResultPersonHomeAddressStateEnumPr DependentResultPersonHomeAddressStateEnum = "PR"
	DependentResultPersonHomeAddressStateEnumPw DependentResultPersonHomeAddressStateEnum = "PW"
	DependentResultPersonHomeAddressStateEnumRi DependentResultPersonHomeAddressStateEnum = "RI"
	DependentResultPersonHomeAddressStateEnumSc DependentResultPersonHomeAddressStateEnum = "SC"
	DependentResultPersonHomeAddressStateEnumSd DependentResultPersonHomeAddressStateEnum = "SD"
	DependentResultPersonHomeAddressStateEnumTn DependentResultPersonHomeAddressStateEnum = "TN"
	DependentResultPersonHomeAddressStateEnumTx DependentResultPersonHomeAddressStateEnum = "TX"
	DependentResultPersonHomeAddressStateEnumUm DependentResultPersonHomeAddressStateEnum = "UM"
	DependentResultPersonHomeAddressStateEnumUt DependentResultPersonHomeAddressStateEnum = "UT"
	DependentResultPersonHomeAddressStateEnumVa DependentResultPersonHomeAddressStateEnum = "VA"
	DependentResultPersonHomeAddressStateEnumVi DependentResultPersonHomeAddressStateEnum = "VI"
	DependentResultPersonHomeAddressStateEnumVt DependentResultPersonHomeAddressStateEnum = "VT"
	DependentResultPersonHomeAddressStateEnumWa DependentResultPersonHomeAddressStateEnum = "WA"
	DependentResultPersonHomeAddressStateEnumWi DependentResultPersonHomeAddressStateEnum = "WI"
	DependentResultPersonHomeAddressStateEnumWv DependentResultPersonHomeAddressStateEnum = "WV"
	DependentResultPersonHomeAddressStateEnumWy DependentResultPersonHomeAddressStateEnum = "WY"
)

func (e *DependentResultPersonHomeAddressStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AZ":
		fallthrough
	case "CA":
		fallthrough
	case "CO":
		fallthrough
	case "CT":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "FM":
		fallthrough
	case "GA":
		fallthrough
	case "GU":
		fallthrough
	case "HI":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KS":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MA":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MH":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MP":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NV":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PW":
		fallthrough
	case "RI":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "UM":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		*e = DependentResultPersonHomeAddressStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonHomeAddressStateEnum: %s", s)
	}
}

// DependentResultPersonHomeAddress - Home address of the person
type DependentResultPersonHomeAddress struct {
	// City of the address
	City string `json:"city"`
	// County of the address
	County *string `json:"county,omitempty"`
	// State postal code of the address
	State DependentResultPersonHomeAddressStateEnum `json:"state"`
	// Line one of the address
	StreetOne string `json:"street_one"`
	// Line two of the address
	StreetTwo *string `json:"street_two,omitempty"`
	// Zip code of the address
	ZipCode string `json:"zip_code"`
}

// DependentResultPersonMailingAddressStateEnum - State postal code of the address
type DependentResultPersonMailingAddressStateEnum string

const (
	DependentResultPersonMailingAddressStateEnumAk DependentResultPersonMailingAddressStateEnum = "AK"
	DependentResultPersonMailingAddressStateEnumAl DependentResultPersonMailingAddressStateEnum = "AL"
	DependentResultPersonMailingAddressStateEnumAr DependentResultPersonMailingAddressStateEnum = "AR"
	DependentResultPersonMailingAddressStateEnumAs DependentResultPersonMailingAddressStateEnum = "AS"
	DependentResultPersonMailingAddressStateEnumAz DependentResultPersonMailingAddressStateEnum = "AZ"
	DependentResultPersonMailingAddressStateEnumCa DependentResultPersonMailingAddressStateEnum = "CA"
	DependentResultPersonMailingAddressStateEnumCo DependentResultPersonMailingAddressStateEnum = "CO"
	DependentResultPersonMailingAddressStateEnumCt DependentResultPersonMailingAddressStateEnum = "CT"
	DependentResultPersonMailingAddressStateEnumDc DependentResultPersonMailingAddressStateEnum = "DC"
	DependentResultPersonMailingAddressStateEnumDe DependentResultPersonMailingAddressStateEnum = "DE"
	DependentResultPersonMailingAddressStateEnumFl DependentResultPersonMailingAddressStateEnum = "FL"
	DependentResultPersonMailingAddressStateEnumFm DependentResultPersonMailingAddressStateEnum = "FM"
	DependentResultPersonMailingAddressStateEnumGa DependentResultPersonMailingAddressStateEnum = "GA"
	DependentResultPersonMailingAddressStateEnumGu DependentResultPersonMailingAddressStateEnum = "GU"
	DependentResultPersonMailingAddressStateEnumHi DependentResultPersonMailingAddressStateEnum = "HI"
	DependentResultPersonMailingAddressStateEnumIa DependentResultPersonMailingAddressStateEnum = "IA"
	DependentResultPersonMailingAddressStateEnumID DependentResultPersonMailingAddressStateEnum = "ID"
	DependentResultPersonMailingAddressStateEnumIl DependentResultPersonMailingAddressStateEnum = "IL"
	DependentResultPersonMailingAddressStateEnumIn DependentResultPersonMailingAddressStateEnum = "IN"
	DependentResultPersonMailingAddressStateEnumKs DependentResultPersonMailingAddressStateEnum = "KS"
	DependentResultPersonMailingAddressStateEnumKy DependentResultPersonMailingAddressStateEnum = "KY"
	DependentResultPersonMailingAddressStateEnumLa DependentResultPersonMailingAddressStateEnum = "LA"
	DependentResultPersonMailingAddressStateEnumMa DependentResultPersonMailingAddressStateEnum = "MA"
	DependentResultPersonMailingAddressStateEnumMd DependentResultPersonMailingAddressStateEnum = "MD"
	DependentResultPersonMailingAddressStateEnumMe DependentResultPersonMailingAddressStateEnum = "ME"
	DependentResultPersonMailingAddressStateEnumMh DependentResultPersonMailingAddressStateEnum = "MH"
	DependentResultPersonMailingAddressStateEnumMi DependentResultPersonMailingAddressStateEnum = "MI"
	DependentResultPersonMailingAddressStateEnumMn DependentResultPersonMailingAddressStateEnum = "MN"
	DependentResultPersonMailingAddressStateEnumMo DependentResultPersonMailingAddressStateEnum = "MO"
	DependentResultPersonMailingAddressStateEnumMp DependentResultPersonMailingAddressStateEnum = "MP"
	DependentResultPersonMailingAddressStateEnumMs DependentResultPersonMailingAddressStateEnum = "MS"
	DependentResultPersonMailingAddressStateEnumMt DependentResultPersonMailingAddressStateEnum = "MT"
	DependentResultPersonMailingAddressStateEnumNc DependentResultPersonMailingAddressStateEnum = "NC"
	DependentResultPersonMailingAddressStateEnumNd DependentResultPersonMailingAddressStateEnum = "ND"
	DependentResultPersonMailingAddressStateEnumNe DependentResultPersonMailingAddressStateEnum = "NE"
	DependentResultPersonMailingAddressStateEnumNh DependentResultPersonMailingAddressStateEnum = "NH"
	DependentResultPersonMailingAddressStateEnumNj DependentResultPersonMailingAddressStateEnum = "NJ"
	DependentResultPersonMailingAddressStateEnumNm DependentResultPersonMailingAddressStateEnum = "NM"
	DependentResultPersonMailingAddressStateEnumNv DependentResultPersonMailingAddressStateEnum = "NV"
	DependentResultPersonMailingAddressStateEnumNy DependentResultPersonMailingAddressStateEnum = "NY"
	DependentResultPersonMailingAddressStateEnumOh DependentResultPersonMailingAddressStateEnum = "OH"
	DependentResultPersonMailingAddressStateEnumOk DependentResultPersonMailingAddressStateEnum = "OK"
	DependentResultPersonMailingAddressStateEnumOr DependentResultPersonMailingAddressStateEnum = "OR"
	DependentResultPersonMailingAddressStateEnumPa DependentResultPersonMailingAddressStateEnum = "PA"
	DependentResultPersonMailingAddressStateEnumPr DependentResultPersonMailingAddressStateEnum = "PR"
	DependentResultPersonMailingAddressStateEnumPw DependentResultPersonMailingAddressStateEnum = "PW"
	DependentResultPersonMailingAddressStateEnumRi DependentResultPersonMailingAddressStateEnum = "RI"
	DependentResultPersonMailingAddressStateEnumSc DependentResultPersonMailingAddressStateEnum = "SC"
	DependentResultPersonMailingAddressStateEnumSd DependentResultPersonMailingAddressStateEnum = "SD"
	DependentResultPersonMailingAddressStateEnumTn DependentResultPersonMailingAddressStateEnum = "TN"
	DependentResultPersonMailingAddressStateEnumTx DependentResultPersonMailingAddressStateEnum = "TX"
	DependentResultPersonMailingAddressStateEnumUm DependentResultPersonMailingAddressStateEnum = "UM"
	DependentResultPersonMailingAddressStateEnumUt DependentResultPersonMailingAddressStateEnum = "UT"
	DependentResultPersonMailingAddressStateEnumVa DependentResultPersonMailingAddressStateEnum = "VA"
	DependentResultPersonMailingAddressStateEnumVi DependentResultPersonMailingAddressStateEnum = "VI"
	DependentResultPersonMailingAddressStateEnumVt DependentResultPersonMailingAddressStateEnum = "VT"
	DependentResultPersonMailingAddressStateEnumWa DependentResultPersonMailingAddressStateEnum = "WA"
	DependentResultPersonMailingAddressStateEnumWi DependentResultPersonMailingAddressStateEnum = "WI"
	DependentResultPersonMailingAddressStateEnumWv DependentResultPersonMailingAddressStateEnum = "WV"
	DependentResultPersonMailingAddressStateEnumWy DependentResultPersonMailingAddressStateEnum = "WY"
)

func (e *DependentResultPersonMailingAddressStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AK":
		fallthrough
	case "AL":
		fallthrough
	case "AR":
		fallthrough
	case "AS":
		fallthrough
	case "AZ":
		fallthrough
	case "CA":
		fallthrough
	case "CO":
		fallthrough
	case "CT":
		fallthrough
	case "DC":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "FM":
		fallthrough
	case "GA":
		fallthrough
	case "GU":
		fallthrough
	case "HI":
		fallthrough
	case "IA":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KS":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MA":
		fallthrough
	case "MD":
		fallthrough
	case "ME":
		fallthrough
	case "MH":
		fallthrough
	case "MI":
		fallthrough
	case "MN":
		fallthrough
	case "MO":
		fallthrough
	case "MP":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "NC":
		fallthrough
	case "ND":
		fallthrough
	case "NE":
		fallthrough
	case "NH":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NV":
		fallthrough
	case "NY":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PW":
		fallthrough
	case "RI":
		fallthrough
	case "SC":
		fallthrough
	case "SD":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "UM":
		fallthrough
	case "UT":
		fallthrough
	case "VA":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WV":
		fallthrough
	case "WY":
		*e = DependentResultPersonMailingAddressStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonMailingAddressStateEnum: %s", s)
	}
}

// DependentResultPersonMailingAddress - Mailing address of the person
type DependentResultPersonMailingAddress struct {
	// City of the address
	City string `json:"city"`
	// County of the address
	County *string `json:"county,omitempty"`
	// State postal code of the address
	State DependentResultPersonMailingAddressStateEnum `json:"state"`
	// Line one of the address
	StreetOne string `json:"street_one"`
	// Line two of the address
	StreetTwo *string `json:"street_two,omitempty"`
	// Zip code of the address
	ZipCode string `json:"zip_code"`
}

// DependentResultPersonMaritalStatusEnum - Marital status of the person
type DependentResultPersonMaritalStatusEnum string

const (
	DependentResultPersonMaritalStatusEnumDivorced         DependentResultPersonMaritalStatusEnum = "divorced"
	DependentResultPersonMaritalStatusEnumDomesticPartner  DependentResultPersonMaritalStatusEnum = "domestic-partner"
	DependentResultPersonMaritalStatusEnumLegallySeparated DependentResultPersonMaritalStatusEnum = "legally-separated"
	DependentResultPersonMaritalStatusEnumMarried          DependentResultPersonMaritalStatusEnum = "married"
	DependentResultPersonMaritalStatusEnumSingle           DependentResultPersonMaritalStatusEnum = "single"
	DependentResultPersonMaritalStatusEnumWidowed          DependentResultPersonMaritalStatusEnum = "widowed"
)

func (e *DependentResultPersonMaritalStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "divorced":
		fallthrough
	case "domestic-partner":
		fallthrough
	case "legally-separated":
		fallthrough
	case "married":
		fallthrough
	case "single":
		fallthrough
	case "widowed":
		*e = DependentResultPersonMaritalStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonMaritalStatusEnum: %s", s)
	}
}

// DependentResultPersonSexEnum - Sex of the person
type DependentResultPersonSexEnum string

const (
	DependentResultPersonSexEnumF DependentResultPersonSexEnum = "F"
	DependentResultPersonSexEnumM DependentResultPersonSexEnum = "M"
	DependentResultPersonSexEnumU DependentResultPersonSexEnum = "U"
	DependentResultPersonSexEnumX DependentResultPersonSexEnum = "X"
)

func (e *DependentResultPersonSexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "F":
		fallthrough
	case "M":
		fallthrough
	case "U":
		fallthrough
	case "X":
		*e = DependentResultPersonSexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultPersonSexEnum: %s", s)
	}
}

// DependentResultPerson - Personal information for the dependent
type DependentResultPerson struct {
	// Contact information for the person
	Contact *DependentResultPersonContact `json:"contact,omitempty"`
	// ISO-8601 date string for the date of birth of the person
	DateOfBirth types.Date `json:"date_of_birth"`
	// Additional personal details of the person
	Details *DependentResultPersonDetails `json:"details,omitempty"`
	// First name of the person
	FirstName string `json:"first_name"`
	// Home address of the person
	HomeAddress *DependentResultPersonHomeAddress `json:"home_address,omitempty"`
	// Last name of the person
	LastName string `json:"last_name"`
	// Mailing address of the person
	MailingAddress *DependentResultPersonMailingAddress `json:"mailing_address,omitempty"`
	// Marital status of the person
	MaritalStatus *DependentResultPersonMaritalStatusEnum `json:"marital_status,omitempty"`
	// Middle name of the person
	MiddleName *string `json:"middle_name,omitempty"`
	// Sex of the person
	Sex DependentResultPersonSexEnum `json:"sex"`
	// Social Security Number of the person
	Ssn *string `json:"ssn,omitempty"`
	// Suffix of the person
	Suffix *string `json:"suffix,omitempty"`
}

// DependentResultRelationshipEnum - Relationship of the dependent to the employee
type DependentResultRelationshipEnum string

const (
	DependentResultRelationshipEnumAdoptedChild      DependentResultRelationshipEnum = "adopted-child"
	DependentResultRelationshipEnumChild             DependentResultRelationshipEnum = "child"
	DependentResultRelationshipEnumCivilUnion        DependentResultRelationshipEnum = "civil-union"
	DependentResultRelationshipEnumDomesticPartner   DependentResultRelationshipEnum = "domestic-partner"
	DependentResultRelationshipEnumExSpouse          DependentResultRelationshipEnum = "ex-spouse"
	DependentResultRelationshipEnumFosterChild       DependentResultRelationshipEnum = "foster-child"
	DependentResultRelationshipEnumGrandchild        DependentResultRelationshipEnum = "grandchild"
	DependentResultRelationshipEnumLegalGuardianship DependentResultRelationshipEnum = "legal-guardianship"
	DependentResultRelationshipEnumOther             DependentResultRelationshipEnum = "other"
	DependentResultRelationshipEnumSpouse            DependentResultRelationshipEnum = "spouse"
	DependentResultRelationshipEnumStepChild         DependentResultRelationshipEnum = "step-child"
)

func (e *DependentResultRelationshipEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "adopted-child":
		fallthrough
	case "child":
		fallthrough
	case "civil-union":
		fallthrough
	case "domestic-partner":
		fallthrough
	case "ex-spouse":
		fallthrough
	case "foster-child":
		fallthrough
	case "grandchild":
		fallthrough
	case "legal-guardianship":
		fallthrough
	case "other":
		fallthrough
	case "spouse":
		fallthrough
	case "step-child":
		*e = DependentResultRelationshipEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependentResultRelationshipEnum: %s", s)
	}
}

// DependentResult - Successful Response - Returns a single Dependent
type DependentResult struct {
	// The date the record was created
	Created int64 `json:"created"`
	// Unique identifier of the employee in Noyo
	EmployeeID string `json:"employee_id"`
	// Unique identifier of the record in Noyo
	ID string `json:"id"`
	// The date the record was last updated
	Modified int64 `json:"modified"`
	// Personal information for the dependent
	Person DependentResultPerson `json:"person"`
	// Relationship of the dependent to the employee
	Relationship DependentResultRelationshipEnum `json:"relationship"`
	// Current version of the record
	Version string `json:"version"`
}
