// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DirectoryUsersListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DirectoryUsersListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DirectoryUsersListSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DirectoryUsersListSecurity struct {
	Option1 *DirectoryUsersListSecurityOption1 `security:"option"`
	Option2 *DirectoryUsersListSecurityOption2 `security:"option"`
	Option3 *DirectoryUsersListSecurityOption3 `security:"option"`
}

// DirectoryUsersListEventEnum - Event on which subscription is intended (if subscribing)
type DirectoryUsersListEventEnum string

const (
	DirectoryUsersListEventEnumAdd       DirectoryUsersListEventEnum = "add"
	DirectoryUsersListEventEnumDelete    DirectoryUsersListEventEnum = "delete"
	DirectoryUsersListEventEnumMakeAdmin DirectoryUsersListEventEnum = "makeAdmin"
	DirectoryUsersListEventEnumUndelete  DirectoryUsersListEventEnum = "undelete"
	DirectoryUsersListEventEnumUpdate    DirectoryUsersListEventEnum = "update"
)

func (e DirectoryUsersListEventEnum) ToPointer() *DirectoryUsersListEventEnum {
	return &e
}

func (e *DirectoryUsersListEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "delete":
		fallthrough
	case "makeAdmin":
		fallthrough
	case "undelete":
		fallthrough
	case "update":
		*e = DirectoryUsersListEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersListEventEnum: %v", v)
	}
}

// DirectoryUsersListOrderByEnum - Property to use for sorting results.
type DirectoryUsersListOrderByEnum string

const (
	DirectoryUsersListOrderByEnumEmail      DirectoryUsersListOrderByEnum = "email"
	DirectoryUsersListOrderByEnumFamilyName DirectoryUsersListOrderByEnum = "familyName"
	DirectoryUsersListOrderByEnumGivenName  DirectoryUsersListOrderByEnum = "givenName"
)

func (e DirectoryUsersListOrderByEnum) ToPointer() *DirectoryUsersListOrderByEnum {
	return &e
}

func (e *DirectoryUsersListOrderByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		fallthrough
	case "familyName":
		fallthrough
	case "givenName":
		*e = DirectoryUsersListOrderByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersListOrderByEnum: %v", v)
	}
}

// DirectoryUsersListProjectionEnum - What subset of fields to fetch for this user.
type DirectoryUsersListProjectionEnum string

const (
	DirectoryUsersListProjectionEnumBasic  DirectoryUsersListProjectionEnum = "basic"
	DirectoryUsersListProjectionEnumCustom DirectoryUsersListProjectionEnum = "custom"
	DirectoryUsersListProjectionEnumFull   DirectoryUsersListProjectionEnum = "full"
)

func (e DirectoryUsersListProjectionEnum) ToPointer() *DirectoryUsersListProjectionEnum {
	return &e
}

func (e *DirectoryUsersListProjectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "custom":
		fallthrough
	case "full":
		*e = DirectoryUsersListProjectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersListProjectionEnum: %v", v)
	}
}

// DirectoryUsersListSortOrderEnum - Whether to return results in ascending or descending order, ignoring case.
type DirectoryUsersListSortOrderEnum string

const (
	DirectoryUsersListSortOrderEnumAscending  DirectoryUsersListSortOrderEnum = "ASCENDING"
	DirectoryUsersListSortOrderEnumDescending DirectoryUsersListSortOrderEnum = "DESCENDING"
)

func (e DirectoryUsersListSortOrderEnum) ToPointer() *DirectoryUsersListSortOrderEnum {
	return &e
}

func (e *DirectoryUsersListSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASCENDING":
		fallthrough
	case "DESCENDING":
		*e = DirectoryUsersListSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersListSortOrderEnum: %v", v)
	}
}

// DirectoryUsersListViewTypeEnum - Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
type DirectoryUsersListViewTypeEnum string

const (
	DirectoryUsersListViewTypeEnumAdminView    DirectoryUsersListViewTypeEnum = "admin_view"
	DirectoryUsersListViewTypeEnumDomainPublic DirectoryUsersListViewTypeEnum = "domain_public"
)

func (e DirectoryUsersListViewTypeEnum) ToPointer() *DirectoryUsersListViewTypeEnum {
	return &e
}

func (e *DirectoryUsersListViewTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_view":
		fallthrough
	case "domain_public":
		*e = DirectoryUsersListViewTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryUsersListViewTypeEnum: %v", v)
	}
}

type DirectoryUsersListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.
	CustomFieldMask *string `queryParam:"style=form,explode=true,name=customFieldMask"`
	// The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.
	Customer *string `queryParam:"style=form,explode=true,name=customer"`
	// The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided.
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// Event on which subscription is intended (if subscribing)
	Event *DirectoryUsersListEventEnum `queryParam:"style=form,explode=true,name=event"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Property to use for sorting results.
	OrderBy *DirectoryUsersListOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
	// Token to specify next page in the list
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// What subset of fields to fetch for this user.
	Projection *DirectoryUsersListProjectionEnum `queryParam:"style=form,explode=true,name=projection"`
	// Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// If set to `true`, retrieves the list of deleted users. (Default: `false`)
	ShowDeleted *string `queryParam:"style=form,explode=true,name=showDeleted"`
	// Whether to return results in ascending or descending order, ignoring case.
	SortOrder *DirectoryUsersListSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
	ViewType *DirectoryUsersListViewTypeEnum `queryParam:"style=form,explode=true,name=viewType"`
}

type DirectoryUsersListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response
	Users *shared.Users
}
