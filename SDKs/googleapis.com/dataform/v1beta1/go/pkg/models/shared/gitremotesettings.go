// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GitRemoteSettingsTokenStatusEnum - Output only. Indicates the status of the Git access token.
type GitRemoteSettingsTokenStatusEnum string

const (
	GitRemoteSettingsTokenStatusEnumTokenStatusUnspecified GitRemoteSettingsTokenStatusEnum = "TOKEN_STATUS_UNSPECIFIED"
	GitRemoteSettingsTokenStatusEnumNotFound               GitRemoteSettingsTokenStatusEnum = "NOT_FOUND"
	GitRemoteSettingsTokenStatusEnumInvalid                GitRemoteSettingsTokenStatusEnum = "INVALID"
	GitRemoteSettingsTokenStatusEnumValid                  GitRemoteSettingsTokenStatusEnum = "VALID"
)

func (e *GitRemoteSettingsTokenStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TOKEN_STATUS_UNSPECIFIED":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "INVALID":
		fallthrough
	case "VALID":
		*e = GitRemoteSettingsTokenStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GitRemoteSettingsTokenStatusEnum: %s", s)
	}
}

// GitRemoteSettings - Controls Git remote configuration for a repository.
type GitRemoteSettings struct {
	// Required. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.
	AuthenticationTokenSecretVersion *string `json:"authenticationTokenSecretVersion,omitempty"`
	// Required. The Git remote's default branch name.
	DefaultBranch *string `json:"defaultBranch,omitempty"`
	// Output only. Indicates the status of the Git access token.
	TokenStatus *GitRemoteSettingsTokenStatusEnum `json:"tokenStatus,omitempty"`
	// Required. The Git remote's URL.
	URL *string `json:"url,omitempty"`
}

// GitRemoteSettingsInput - Controls Git remote configuration for a repository.
type GitRemoteSettingsInput struct {
	// Required. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.
	AuthenticationTokenSecretVersion *string `json:"authenticationTokenSecretVersion,omitempty"`
	// Required. The Git remote's default branch name.
	DefaultBranch *string `json:"defaultBranch,omitempty"`
	// Required. The Git remote's URL.
	URL *string `json:"url,omitempty"`
}
