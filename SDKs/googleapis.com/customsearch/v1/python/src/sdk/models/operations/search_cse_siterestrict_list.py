"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import search as shared_search
from enum import Enum
from typing import Optional

class SearchCseSiterestrictListImgColorTypeEnum(str, Enum):
    r"""Returns black and white, grayscale, transparent, or color images. Acceptable values are: * `\\"color\\"` * `\\"gray\\"` * `\\"mono\\"`: black and white * `\\"trans\\"`: transparent background"""
    IMG_COLOR_TYPE_UNDEFINED = 'imgColorTypeUndefined'
    MONO = 'mono'
    GRAY = 'gray'
    COLOR = 'color'
    TRANS = 'trans'

class SearchCseSiterestrictListImgDominantColorEnum(str, Enum):
    r"""Returns images of a specific dominant color. Acceptable values are: * `\\"black\\"` * `\\"blue\\"` * `\\"brown\\"` * `\\"gray\\"` * `\\"green\\"` * `\\"orange\\"` * `\\"pink\\"` * `\\"purple\\"` * `\\"red\\"` * `\\"teal\\"` * `\\"white\\"` * `\\"yellow\\"`"""
    IMG_DOMINANT_COLOR_UNDEFINED = 'imgDominantColorUndefined'
    BLACK = 'black'
    BLUE = 'blue'
    BROWN = 'brown'
    GRAY = 'gray'
    GREEN = 'green'
    ORANGE = 'orange'
    PINK = 'pink'
    PURPLE = 'purple'
    RED = 'red'
    TEAL = 'teal'
    WHITE = 'white'
    YELLOW = 'yellow'

class SearchCseSiterestrictListImgSizeEnum(str, Enum):
    r"""Returns images of a specified size. Acceptable values are: * `\\"huge\\"` * `\\"icon\\"` * `\\"large\\"` * `\\"medium\\"` * `\\"small\\"` * `\\"xlarge\\"` * `\\"xxlarge\\"`"""
    IMG_SIZE_UNDEFINED = 'imgSizeUndefined'
    HUGE = 'HUGE'
    ICON = 'ICON'
    LARGE = 'LARGE'
    MEDIUM = 'MEDIUM'
    SMALL = 'SMALL'
    XLARGE = 'XLARGE'
    XXLARGE = 'XXLARGE'

class SearchCseSiterestrictListImgTypeEnum(str, Enum):
    r"""Returns images of a type. Acceptable values are: * `\\"clipart\\"` * `\\"face\\"` * `\\"lineart\\"` * `\\"stock\\"` * `\\"photo\\"` * `\\"animated\\"`"""
    IMG_TYPE_UNDEFINED = 'imgTypeUndefined'
    CLIPART = 'clipart'
    FACE = 'face'
    LINEART = 'lineart'
    STOCK = 'stock'
    PHOTO = 'photo'
    ANIMATED = 'animated'

class SearchCseSiterestrictListSafeEnum(str, Enum):
    r"""Search safety level. Acceptable values are: * `\\"active\\"`: Enables SafeSearch filtering. * `\\"off\\"`: Disables SafeSearch filtering. (default)"""
    SAFE_UNDEFINED = 'safeUndefined'
    ACTIVE = 'active'
    HIGH = 'high'
    MEDIUM = 'medium'
    OFF = 'off'

class SearchCseSiterestrictListSearchTypeEnum(str, Enum):
    r"""Specifies the search type: `image`. If unspecified, results are limited to webpages. Acceptable values are: * `\\"image\\"`: custom image search."""
    SEARCH_TYPE_UNDEFINED = 'searchTypeUndefined'
    IMAGE = 'image'

class SearchCseSiterestrictListSiteSearchFilterEnum(str, Enum):
    r"""Controls whether to include or exclude results from the site named in the `siteSearch` parameter. Acceptable values are: * `\\"e\\"`: exclude * `\\"i\\"`: include"""
    SITE_SEARCH_FILTER_UNDEFINED = 'siteSearchFilterUndefined'
    E = 'e'
    I = 'i'


@dataclasses.dataclass
class SearchCseSiterestrictListRequest:
    
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    c2coff: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'c2coff', 'style': 'form', 'explode': True }})
    r"""Enables or disables [Simplified and Traditional Chinese Search](https://developers.google.com/custom-search/docs/json_api_reference#chineseSearch). The default value for this parameter is 0 (zero), meaning that the feature is enabled. Supported values are: * `1`: Disabled * `0`: Enabled (default)"""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    cr: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cr', 'style': 'form', 'explode': True }})
    r"""Restricts search results to documents originating in a particular country. You may use [Boolean operators](https://developers.google.com/custom-search/docs/json_api_reference#booleanOperators) in the cr parameter's value. Google Search determines the country of a document by analyzing: * the top-level domain (TLD) of the document's URL * the geographic location of the Web server's IP address See the [Country Parameter Values](https://developers.google.com/custom-search/docs/json_api_reference#countryCollections) page for a list of valid values for this parameter."""  
    cx: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cx', 'style': 'form', 'explode': True }})
    r"""The Programmable Search Engine ID to use for this request."""  
    date_restrict: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateRestrict', 'style': 'form', 'explode': True }})
    r"""Restricts results to URLs based on date. Supported values include: * `d[number]`: requests results from the specified number of past days. * `w[number]`: requests results from the specified number of past weeks. * `m[number]`: requests results from the specified number of past months. * `y[number]`: requests results from the specified number of past years."""  
    exact_terms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exactTerms', 'style': 'form', 'explode': True }})
    r"""Identifies a phrase that all documents in the search results must contain."""  
    exclude_terms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludeTerms', 'style': 'form', 'explode': True }})
    r"""Identifies a word or phrase that should not appear in any documents in the search results."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    file_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fileType', 'style': 'form', 'explode': True }})
    r"""Restricts results to files of a specified extension. A list of file types indexable by Google can be found in Search Console [Help Center](https://support.google.com/webmasters/answer/35287)."""  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Controls turning on or off the duplicate content filter. * See [Automatic Filtering](https://developers.google.com/custom-search/docs/json_api_reference#automaticFiltering) for more information about Google's search results filters. Note that host crowding filtering applies only to multi-site searches. * By default, Google applies filtering to all search results to improve the quality of those results. Acceptable values are: * `0`: Turns off duplicate content filter. * `1`: Turns on duplicate content filter."""  
    gl: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gl', 'style': 'form', 'explode': True }})
    r"""Geolocation of end user. * The `gl` parameter value is a two-letter country code. The `gl` parameter boosts search results whose country of origin matches the parameter value. See the [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) page for a list of valid values. * Specifying a `gl` parameter value should lead to more relevant results. This is particularly true for international customers and, even more specifically, for customers in English- speaking countries other than the United States."""  
    googlehost: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'googlehost', 'style': 'form', 'explode': True }})
    r"""**Deprecated**. Use the `gl` parameter for a similar effect. The local Google domain (for example, google.com, google.de, or google.fr) to use to perform the search."""  
    high_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'highRange', 'style': 'form', 'explode': True }})
    r"""Specifies the ending value for a search range. * Use `lowRange` and `highRange` to append an inclusive search range of `lowRange...highRange` to the query."""  
    hl: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hl', 'style': 'form', 'explode': True }})
    r"""Sets the user interface language. * Explicitly setting this parameter improves the performance and the quality of your search results. * See the [Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#wsInterfaceLanguages) section of [Internationalizing Queries and Results Presentation](https://developers.google.com/custom-search/docs/json_api_reference#wsInternationalizing) for more information, and [Supported Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#interfaceLanguages) for a list of supported languages."""  
    hq: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hq', 'style': 'form', 'explode': True }})
    r"""Appends the specified query terms to the query, as if they were combined with a logical AND operator."""  
    img_color_type: Optional[SearchCseSiterestrictListImgColorTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imgColorType', 'style': 'form', 'explode': True }})
    r"""Returns black and white, grayscale, transparent, or color images. Acceptable values are: * `\\"color\\"` * `\\"gray\\"` * `\\"mono\\"`: black and white * `\\"trans\\"`: transparent background"""  
    img_dominant_color: Optional[SearchCseSiterestrictListImgDominantColorEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imgDominantColor', 'style': 'form', 'explode': True }})
    r"""Returns images of a specific dominant color. Acceptable values are: * `\\"black\\"` * `\\"blue\\"` * `\\"brown\\"` * `\\"gray\\"` * `\\"green\\"` * `\\"orange\\"` * `\\"pink\\"` * `\\"purple\\"` * `\\"red\\"` * `\\"teal\\"` * `\\"white\\"` * `\\"yellow\\"`"""  
    img_size: Optional[SearchCseSiterestrictListImgSizeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imgSize', 'style': 'form', 'explode': True }})
    r"""Returns images of a specified size. Acceptable values are: * `\\"huge\\"` * `\\"icon\\"` * `\\"large\\"` * `\\"medium\\"` * `\\"small\\"` * `\\"xlarge\\"` * `\\"xxlarge\\"`"""  
    img_type: Optional[SearchCseSiterestrictListImgTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imgType', 'style': 'form', 'explode': True }})
    r"""Returns images of a type. Acceptable values are: * `\\"clipart\\"` * `\\"face\\"` * `\\"lineart\\"` * `\\"stock\\"` * `\\"photo\\"` * `\\"animated\\"`"""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    link_site: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'linkSite', 'style': 'form', 'explode': True }})
    r"""Specifies that all search results should contain a link to a particular URL."""  
    low_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lowRange', 'style': 'form', 'explode': True }})
    r"""Specifies the starting value for a search range. Use `lowRange` and `highRange` to append an inclusive search range of `lowRange...highRange` to the query."""  
    lr: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lr', 'style': 'form', 'explode': True }})
    r"""Restricts the search to documents written in a particular language (e.g., `lr=lang_ja`). Acceptable values are: * `\\"lang_ar\\"`: Arabic * `\\"lang_bg\\"`: Bulgarian * `\\"lang_ca\\"`: Catalan * `\\"lang_cs\\"`: Czech * `\\"lang_da\\"`: Danish * `\\"lang_de\\"`: German * `\\"lang_el\\"`: Greek * `\\"lang_en\\"`: English * `\\"lang_es\\"`: Spanish * `\\"lang_et\\"`: Estonian * `\\"lang_fi\\"`: Finnish * `\\"lang_fr\\"`: French * `\\"lang_hr\\"`: Croatian * `\\"lang_hu\\"`: Hungarian * `\\"lang_id\\"`: Indonesian * `\\"lang_is\\"`: Icelandic * `\\"lang_it\\"`: Italian * `\\"lang_iw\\"`: Hebrew * `\\"lang_ja\\"`: Japanese * `\\"lang_ko\\"`: Korean * `\\"lang_lt\\"`: Lithuanian * `\\"lang_lv\\"`: Latvian * `\\"lang_nl\\"`: Dutch * `\\"lang_no\\"`: Norwegian * `\\"lang_pl\\"`: Polish * `\\"lang_pt\\"`: Portuguese * `\\"lang_ro\\"`: Romanian * `\\"lang_ru\\"`: Russian * `\\"lang_sk\\"`: Slovak * `\\"lang_sl\\"`: Slovenian * `\\"lang_sr\\"`: Serbian * `\\"lang_sv\\"`: Swedish * `\\"lang_tr\\"`: Turkish * `\\"lang_zh-CN\\"`: Chinese (Simplified) * `\\"lang_zh-TW\\"`: Chinese (Traditional)"""  
    num: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'num', 'style': 'form', 'explode': True }})
    r"""Number of search results to return. * Valid values are integers between 1 and 10, inclusive."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    or_terms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orTerms', 'style': 'form', 'explode': True }})
    r"""Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Query"""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    related_site: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relatedSite', 'style': 'form', 'explode': True }})
    r"""Specifies that all search results should be pages that are related to the specified URL."""  
    rights: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rights', 'style': 'form', 'explode': True }})
    r"""Filters based on licensing. Supported values include: `cc_publicdomain`, `cc_attribute`, `cc_sharealike`, `cc_noncommercial`, `cc_nonderived` and combinations of these. See [typical combinations](https://wiki.creativecommons.org/wiki/CC_Search_integration)."""  
    safe: Optional[SearchCseSiterestrictListSafeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'safe', 'style': 'form', 'explode': True }})
    r"""Search safety level. Acceptable values are: * `\\"active\\"`: Enables SafeSearch filtering. * `\\"off\\"`: Disables SafeSearch filtering. (default)"""  
    search_type: Optional[SearchCseSiterestrictListSearchTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'searchType', 'style': 'form', 'explode': True }})
    r"""Specifies the search type: `image`. If unspecified, results are limited to webpages. Acceptable values are: * `\\"image\\"`: custom image search."""  
    site_search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'siteSearch', 'style': 'form', 'explode': True }})
    r"""Specifies a given site which should always be included or excluded from results (see `siteSearchFilter` parameter, below)."""  
    site_search_filter: Optional[SearchCseSiterestrictListSiteSearchFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'siteSearchFilter', 'style': 'form', 'explode': True }})
    r"""Controls whether to include or exclude results from the site named in the `siteSearch` parameter. Acceptable values are: * `\\"e\\"`: exclude * `\\"i\\"`: include"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The sort expression to apply to the results. The sort parameter specifies that the results be sorted according to the specified expression i.e. sort by date. [Example: sort=date](https://developers.google.com/custom-search/docs/structured_search#sort-by-attribute)."""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""The index of the first result to return. The default number of results per page is 10, so `&start=11` would start at the top of the second page of results. **Note**: The JSON API will never return more than 100 results, even if more than 100 documents match the query, so setting the sum of `start + num` to a number greater than 100 will produce an error. Also note that the maximum value for `num` is 10."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class SearchCseSiterestrictListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search: Optional[shared_search.Search] = dataclasses.field(default=None)
    r"""Successful response"""  
    