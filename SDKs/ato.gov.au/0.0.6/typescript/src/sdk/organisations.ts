/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * An organisation usually consists of a number of individuals or groups bound by a common purpose about whom the
 *
 * @remarks
 * registry wishes to maintain information.
 *
 *   For example, the organisation's legal entity type (e.g., Incorporated Entity, Unincorporated Entity,
 *   Partnership or Joint Venture).
 *
 */
export class Organisations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete an organisation
   *
   * @remarks
   * Delete an organisation with the specified identifier
   *
   */
  deleteOrganisationsPartyId(
    req: operations.DeleteOrganisationsPartyIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrganisationsPartyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteOrganisationsPartyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOrganisationsPartyIdResponse =
        new operations.DeleteOrganisationsPartyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.failedPrecondition = utils.objectToClass(
              httpRes?.data,
              shared.FailedPrecondition
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of organisations
   *
   * @remarks
   * Retrieve a list of organisations
   *
   */
  getOrganisations(
    req: operations.GetOrganisationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganisationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganisationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/organisations";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganisationsResponse =
        new operations.GetOrganisationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organisations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.organisations = utils.objectToClass(
              httpRes?.data,
              shared.Organisation,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an organisation
   *
   * @remarks
   * Retrieve an organisation with the specified identifier
   *
   */
  getOrganisationsPartyId(
    req: operations.GetOrganisationsPartyIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganisationsPartyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganisationsPartyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganisationsPartyIdResponse =
        new operations.GetOrganisationsPartyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organisation = utils.objectToClass(
              httpRes?.data,
              shared.Organisation
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an organisation
   *
   * @remarks
   * Create an organisation
   *
   */
  postOrganisations(
    req: operations.PostOrganisationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOrganisationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOrganisationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/organisations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "organisationInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOrganisationsResponse =
        new operations.PostOrganisationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organisation = utils.objectToClass(
              httpRes?.data,
              shared.Organisation
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArgument = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArgument
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an organisation
   *
   * @remarks
   * Update an organisation
   *
   */
  putOrganisationsPartyId(
    req: operations.PutOrganisationsPartyIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutOrganisationsPartyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutOrganisationsPartyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "organisationInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutOrganisationsPartyIdResponse =
        new operations.PutOrganisationsPartyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organisation = utils.objectToClass(
              httpRes?.data,
              shared.Organisation
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArgument = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArgument
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }
}
