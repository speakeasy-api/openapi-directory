// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type HmipcSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type HmipcRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Policy Number
	Policyno string `json:"policyno"`
}

// HmipcRequestBodyFormatEnum - The format of the certificate in response.
type HmipcRequestBodyFormatEnum string

const (
	HmipcRequestBodyFormatEnumPdf HmipcRequestBodyFormatEnum = "pdf"
)

func (e *HmipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = HmipcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HmipcRequestBodyFormatEnum: %s", s)
	}
}

// HmipcRequestBody - Request format
type HmipcRequestBody struct {
	CertificateParameters *HmipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format HmipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type HmipcRequest struct {
	// Request format
	Request  *HmipcRequestBody `request:"mediaType=application/json"`
	Security HmipcSecurity
}

type Hmipc504ApplicationJSONErrorEnum string

const (
	Hmipc504ApplicationJSONErrorEnumGatewayTimeout Hmipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Hmipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Hmipc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc504ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Hmipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Hmipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Hmipc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc504ApplicationJSON - Gateway timeout
type Hmipc504ApplicationJSON struct {
	Error            *Hmipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hmipc503ApplicationJSONErrorEnum string

const (
	Hmipc503ApplicationJSONErrorEnumServiceUnavailable Hmipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Hmipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Hmipc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc503ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Hmipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Hmipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Hmipc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc503ApplicationJSON - Service unavailable
type Hmipc503ApplicationJSON struct {
	Error            *Hmipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hmipc502ApplicationJSONErrorEnum string

const (
	Hmipc502ApplicationJSONErrorEnumBadGatewy Hmipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Hmipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Hmipc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc502ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Hmipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Hmipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Hmipc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc502ApplicationJSON - Bad gateway
type Hmipc502ApplicationJSON struct {
	Error            *Hmipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hmipc500ApplicationJSONErrorEnum string

const (
	Hmipc500ApplicationJSONErrorEnumInternalServerError Hmipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Hmipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Hmipc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc500ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc500ApplicationJSONErrorDescriptionEnumInternalServerError Hmipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Hmipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Hmipc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc500ApplicationJSON - Internal server error
type Hmipc500ApplicationJSON struct {
	Error            *Hmipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hmipc404ApplicationJSONErrorEnum string

const (
	Hmipc404ApplicationJSONErrorEnumRecordNotFound Hmipc404ApplicationJSONErrorEnum = "record_not_found"
	Hmipc404ApplicationJSONErrorEnumURLNotFound    Hmipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Hmipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Hmipc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc404ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Hmipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Hmipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Hmipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Hmipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Hmipc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc404ApplicationJSON - No record found
type Hmipc404ApplicationJSON struct {
	Error            *Hmipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hmipc401ApplicationJSONErrorEnum string

const (
	Hmipc401ApplicationJSONErrorEnumInvalidAuthentication Hmipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Hmipc401ApplicationJSONErrorEnumInvalidAuthorization  Hmipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Hmipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Hmipc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc401ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Hmipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Hmipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Hmipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Hmipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Hmipc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc401ApplicationJSON - Unauthorized access
type Hmipc401ApplicationJSON struct {
	Error            *Hmipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hmipc400ApplicationJSONErrorEnum string

const (
	Hmipc400ApplicationJSONErrorEnumMissingParameter Hmipc400ApplicationJSONErrorEnum = "missing_parameter"
	Hmipc400ApplicationJSONErrorEnumInvalidParameter Hmipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Hmipc400ApplicationJSONErrorEnumInvalidFormat    Hmipc400ApplicationJSONErrorEnum = "invalid_format"
	Hmipc400ApplicationJSONErrorEnumInvalidTxnid     Hmipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Hmipc400ApplicationJSONErrorEnumInvalidConsentid Hmipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Hmipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Hmipc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Hmipc400ApplicationJSONErrorDescriptionEnum string

const (
	Hmipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Hmipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Hmipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Hmipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Hmipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Hmipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Hmipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Hmipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Hmipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Hmipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Hmipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Hmipc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hmipc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hmipc400ApplicationJSON - Bad request
type Hmipc400ApplicationJSON struct {
	Error            *Hmipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hmipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type HmipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Hmipc400ApplicationJSONObject *Hmipc400ApplicationJSON
	// Unauthorized access
	Hmipc401ApplicationJSONObject *Hmipc401ApplicationJSON
	// No record found
	Hmipc404ApplicationJSONObject *Hmipc404ApplicationJSON
	// Internal server error
	Hmipc500ApplicationJSONObject *Hmipc500ApplicationJSON
	// Bad gateway
	Hmipc502ApplicationJSONObject *Hmipc502ApplicationJSON
	// Service unavailable
	Hmipc503ApplicationJSONObject *Hmipc503ApplicationJSON
	// Gateway timeout
	Hmipc504ApplicationJSONObject *Hmipc504ApplicationJSON
}
