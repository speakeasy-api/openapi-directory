/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Execute {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * DELETE
   *
   * @remarks
   * Proxies a downstream DELETE request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
   * **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
   *
   */
  deleteProxy(
    req: operations.DeleteProxyRequest,
    security: operations.DeleteProxySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProxyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteProxyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proxy";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteProxySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProxyResponse =
        new operations.DeleteProxyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProxy200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProxy401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteProxy401ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProxyDefaultApplicationJSONAny = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * GET
   *
   * @remarks
   * Proxies a downstream GET request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
   * **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
   *
   */
  getProxy(
    req: operations.GetProxyRequest,
    security: operations.GetProxySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProxyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProxyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proxy";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetProxySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProxyResponse = new operations.GetProxyResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getProxy200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getProxy401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetProxy401ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getProxyDefaultApplicationJSONAny = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * OPTIONS
   *
   * @remarks
   * Proxies a downstream OPTION request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
   * **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
   *
   */
  optionsProxy(
    req: operations.OptionsProxyRequest,
    security: operations.OptionsProxySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OptionsProxyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OptionsProxyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proxy";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OptionsProxySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "options",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OptionsProxyResponse =
        new operations.OptionsProxyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.optionsProxy200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.optionsProxy401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.OptionsProxy401ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.optionsProxyDefaultApplicationJSONAny = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * PATCH
   *
   * @remarks
   * Proxies a downstream PATCH request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
   * **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
   *
   */
  patchProxy(
    req: operations.PatchProxyRequest,
    security: operations.PatchProxySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchProxyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchProxyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proxy";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchProxySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchProxyResponse =
        new operations.PatchProxyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchProxy200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchProxy401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchProxy401ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchProxyDefaultApplicationJSONAny = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * POST
   *
   * @remarks
   * Proxies a downstream POST request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
   * **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
   *
   */
  postProxy(
    req: operations.PostProxyRequest,
    security: operations.PostProxySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProxyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProxyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proxy";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostProxySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProxyResponse =
        new operations.PostProxyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postProxy200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postProxy401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostProxy401ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postProxyDefaultApplicationJSONAny = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * PUT
   *
   * @remarks
   * Proxies a downstream PUT request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
   * **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
   *
   */
  putProxy(
    req: operations.PutProxyRequest,
    security: operations.PutProxySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutProxyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutProxyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/proxy";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutProxySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutProxyResponse = new operations.PutProxyResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putProxy200ApplicationJSONAny = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putProxy401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutProxy401ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putProxyDefaultApplicationJSONAny = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }
}
