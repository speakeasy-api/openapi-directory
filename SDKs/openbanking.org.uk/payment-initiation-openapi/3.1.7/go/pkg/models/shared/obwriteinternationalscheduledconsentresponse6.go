// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum - Type of authorisation flow requested.
type OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnumAny    OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum = "Any"
	OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnumSingle OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum = "Single"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Any":
		fallthrough
	case "Single":
		*e = OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum: %s", s)
	}
}

// OBWriteInternationalScheduledConsentResponse6DataAuthorisation - The authorisation type request from the TPP.
type OBWriteInternationalScheduledConsentResponse6DataAuthorisation struct {
	// Type of authorisation flow requested.
	AuthorisationType OBWriteInternationalScheduledConsentResponse6DataAuthorisationAuthorisationTypeEnum `json:"AuthorisationType"`
	// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CompletionDateTime *time.Time `json:"CompletionDateTime,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataCharges - Set of elements used to provide details of a charge for the payment initiation.
type OBWriteInternationalScheduledConsentResponse6DataCharges struct {
	// Amount of money associated with the charge type.
	Amount OBActiveOrHistoricCurrencyAndAmount `json:"Amount"`
	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer OBChargeBearerType1CodeEnum `json:"ChargeBearer"`
	// Charge type, in a coded form.
	Type string `json:"Type"`
}

// OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum - Specifies the type used to complete the currency exchange.
type OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnumActual     OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum = "Actual"
	OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnumAgreed     OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum = "Agreed"
	OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnumIndicative OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum = "Indicative"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Actual":
		fallthrough
	case "Agreed":
		fallthrough
	case "Indicative":
		*e = OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum: %s", s)
	}
}

// OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation - Further detailed information on the exchange rate that has been used in the payment transaction.
type OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation struct {
	// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
	ContractIdentification *string `json:"ContractIdentification,omitempty"`
	// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
	ExchangeRate float64 `json:"ExchangeRate"`
	// Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpirationDateTime *time.Time `json:"ExpirationDateTime,omitempty"`
	// Specifies the type used to complete the currency exchange.
	RateType OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformationRateTypeEnum `json:"RateType"`
	// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
	UnitCurrency string `json:"UnitCurrency"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor - Party to which an amount of money is due.
type OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor struct {
	// Name by which a party is known and which is usually used to identify that party.
	Name *string `json:"Name,omitempty"`
	// Information that locates and identifies a specific address, as defined by postal services.
	PostalAddress *OBPostalAddress6 `json:"PostalAddress,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount - Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
type OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level.
	// Note, the account name is not the product name or the nickname of the account.
	// OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
	Name string `json:"Name"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent - Financial institution servicing an account for the creditor.
type OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent struct {
	// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
	Identification *string `json:"Identification,omitempty"`
	// Name by which an agent is known and which is usually used to identify that agent.
	Name *string `json:"Name,omitempty"`
	// Information that locates and identifies a specific address, as defined by postal services.
	PostalAddress *OBPostalAddress6 `json:"PostalAddress,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName *string `json:"SchemeName,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
type OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
	// Note, the account name is not the product name or the nickname of the account.
	Name *string `json:"Name,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum - Specifies the type used to complete the currency exchange.
type OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnumActual     OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum = "Actual"
	OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnumAgreed     OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum = "Agreed"
	OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnumIndicative OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum = "Indicative"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Actual":
		fallthrough
	case "Agreed":
		fallthrough
	case "Indicative":
		*e = OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum: %s", s)
	}
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation - Provides details on the currency exchange rate and contract.
type OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation struct {
	// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
	ContractIdentification *string `json:"ContractIdentification,omitempty"`
	// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
	ExchangeRate *float64 `json:"ExchangeRate,omitempty"`
	// Specifies the type used to complete the currency exchange.
	RateType OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformationRateTypeEnum `json:"RateType"`
	// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
	UnitCurrency string `json:"UnitCurrency"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount - Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
// Usage: This amount has to be transported unchanged through the transaction chain.
type OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum - Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
type OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnumNormal OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum = "Normal"
	OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnumUrgent OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum = "Urgent"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Normal":
		fallthrough
	case "Urgent":
		*e = OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum: %s", s)
	}
}

// OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation - Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
type OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation struct {
	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
	// Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
	// If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
	// OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
	Reference *string `json:"Reference,omitempty"`
	// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
	Unstructured *string `json:"Unstructured,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
type OBWriteInternationalScheduledConsentResponse6DataInitiation struct {
	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer *OBChargeBearerType1CodeEnum `json:"ChargeBearer,omitempty"`
	// Party to which an amount of money is due.
	Creditor *OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor `json:"Creditor,omitempty"`
	// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
	CreditorAccount OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount `json:"CreditorAccount"`
	// Financial institution servicing an account for the creditor.
	CreditorAgent *OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent `json:"CreditorAgent,omitempty"`
	// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
	CurrencyOfTransfer string `json:"CurrencyOfTransfer"`
	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount `json:"DebtorAccount,omitempty"`
	// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
	DestinationCountryCode *string `json:"DestinationCountryCode,omitempty"`
	// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
	// Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
	// OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
	EndToEndIdentification *string `json:"EndToEndIdentification,omitempty"`
	// Provides details on the currency exchange rate and contract.
	ExchangeRateInformation *OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation `json:"ExchangeRateInformation,omitempty"`
	// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
	ExtendedPurpose *string `json:"ExtendedPurpose,omitempty"`
	// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
	// Usage: This amount has to be transported unchanged through the transaction chain.
	InstructedAmount OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount `json:"InstructedAmount"`
	// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
	// Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
	InstructionIdentification string `json:"InstructionIdentification"`
	// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
	InstructionPriority *OBWriteInternationalScheduledConsentResponse6DataInitiationInstructionPriorityEnum `json:"InstructionPriority,omitempty"`
	// User community specific instrument.
	// Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
	LocalInstrument *string `json:"LocalInstrument,omitempty"`
	// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
	// The list of valid codes is an external code list published separately.
	// External code sets can be downloaded from www.iso20022.org.
	Purpose *string `json:"Purpose,omitempty"`
	// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
	RemittanceInformation *OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation `json:"RemittanceInformation,omitempty"`
	// Date at which the initiating party requests the clearing agent to process the payment.
	// Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	RequestedExecutionDateTime time.Time `json:"RequestedExecutionDateTime"`
	// Additional information that can not be captured in the structured fields and/or any other specific block.
	SupplementaryData map[string]interface{} `json:"SupplementaryData,omitempty"`
}

// OBWriteInternationalScheduledConsentResponse6DataPermissionEnum - Specifies the Open Banking service request types.
type OBWriteInternationalScheduledConsentResponse6DataPermissionEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataPermissionEnumCreate OBWriteInternationalScheduledConsentResponse6DataPermissionEnum = "Create"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Create":
		*e = OBWriteInternationalScheduledConsentResponse6DataPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataPermissionEnum: %s", s)
	}
}

// OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum - Specifies to share the refund account details with PISP
type OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnumNo  OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum = "No"
	OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnumYes OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum = "Yes"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No":
		fallthrough
	case "Yes":
		*e = OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum: %s", s)
	}
}

// OBWriteInternationalScheduledConsentResponse6DataStatusEnum - Specifies the status of consent resource in code form.
type OBWriteInternationalScheduledConsentResponse6DataStatusEnum string

const (
	OBWriteInternationalScheduledConsentResponse6DataStatusEnumAuthorised            OBWriteInternationalScheduledConsentResponse6DataStatusEnum = "Authorised"
	OBWriteInternationalScheduledConsentResponse6DataStatusEnumAwaitingAuthorisation OBWriteInternationalScheduledConsentResponse6DataStatusEnum = "AwaitingAuthorisation"
	OBWriteInternationalScheduledConsentResponse6DataStatusEnumConsumed              OBWriteInternationalScheduledConsentResponse6DataStatusEnum = "Consumed"
	OBWriteInternationalScheduledConsentResponse6DataStatusEnumRejected              OBWriteInternationalScheduledConsentResponse6DataStatusEnum = "Rejected"
)

func (e *OBWriteInternationalScheduledConsentResponse6DataStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authorised":
		fallthrough
	case "AwaitingAuthorisation":
		fallthrough
	case "Consumed":
		fallthrough
	case "Rejected":
		*e = OBWriteInternationalScheduledConsentResponse6DataStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteInternationalScheduledConsentResponse6DataStatusEnum: %s", s)
	}
}

type OBWriteInternationalScheduledConsentResponse6Data struct {
	// The authorisation type request from the TPP.
	Authorisation *OBWriteInternationalScheduledConsentResponse6DataAuthorisation `json:"Authorisation,omitempty"`
	Charges       []OBWriteInternationalScheduledConsentResponse6DataCharges      `json:"Charges,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
	ConsentID string `json:"ConsentId"`
	// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CreationDateTime time.Time `json:"CreationDateTime"`
	// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CutOffDateTime *time.Time `json:"CutOffDateTime,omitempty"`
	// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
	Debtor *OBCashAccountDebtor4 `json:"Debtor,omitempty"`
	// Further detailed information on the exchange rate that has been used in the payment transaction.
	ExchangeRateInformation *OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation `json:"ExchangeRateInformation,omitempty"`
	// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpectedExecutionDateTime *time.Time `json:"ExpectedExecutionDateTime,omitempty"`
	// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpectedSettlementDateTime *time.Time `json:"ExpectedSettlementDateTime,omitempty"`
	// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
	Initiation OBWriteInternationalScheduledConsentResponse6DataInitiation `json:"Initiation"`
	// Specifies the Open Banking service request types.
	Permission OBWriteInternationalScheduledConsentResponse6DataPermissionEnum `json:"Permission"`
	// Specifies to share the refund account details with PISP
	ReadRefundAccount *OBWriteInternationalScheduledConsentResponse6DataReadRefundAccountEnum `json:"ReadRefundAccount,omitempty"`
	// Supporting Data provided by TPP, when requesting SCA Exemption.
	SCASupportData *OBSCASupportData1 `json:"SCASupportData,omitempty"`
	// Specifies the status of consent resource in code form.
	Status OBWriteInternationalScheduledConsentResponse6DataStatusEnum `json:"Status"`
	// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	StatusUpdateDateTime time.Time `json:"StatusUpdateDateTime"`
}

// OBWriteInternationalScheduledConsentResponse6 - International Scheduled Payment Consents Created
type OBWriteInternationalScheduledConsentResponse6 struct {
	Data OBWriteInternationalScheduledConsentResponse6Data `json:"Data"`
	// Links relevant to the payload
	Links *Links `json:"Links,omitempty"`
	// Meta Data relevant to the payload
	Meta *Meta `json:"Meta,omitempty"`
	// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
	Risk OBRisk1 `json:"Risk"`
}
