/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class QueryEventV1Request {
    /**
     * Filter the events occurring before the specified date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=after_date")
    public OffsetDateTime afterDate;

    public QueryEventV1Request withAfterDate(OffsetDateTime afterDate) {
        this.afterDate = afterDate;
        return this;
    }
    
    /**
     * An (event_id, time) tuple. When specified, returns all events with timestamps that come after the time value of after_id based on the sort order defined by the order_by_time parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=after_id")
    public String afterId;

    public QueryEventV1Request withAfterId(String afterId) {
        this.afterId = afterId;
        return this;
    }
    
    /**
     * Filter the events occurring after the specified date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=before_date")
    public OffsetDateTime beforeDate;

    public QueryEventV1Request withBeforeDate(OffsetDateTime beforeDate) {
        this.beforeDate = beforeDate;
        return this;
    }
    
    /**
     * Maximum number of events retrieved.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;

    public QueryEventV1Request withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The events are ordered by timestamp. Specify desc to show the latest entries first. Specify asc to show the oldest entries first. The default behavior is asc.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by_time")
    public QueryEventV1OrderByTimeEnum orderByTime;

    public QueryEventV1Request withOrderByTime(QueryEventV1OrderByTimeEnum orderByTime) {
        this.orderByTime = orderByTime;
        return this;
    }
    
    /**
     * A Boolean value that determines whether to include event series summary for every event. If set to 'true', a list of event series summary will be returned and each summary has an empty list of events. If set to 'false', an empty list of event series summary will be returned. The default value is 'false'. Setting it to 'true' will increase the response time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=should_include_event_series")
    public Boolean shouldIncludeEventSeries;

    public QueryEventV1Request withShouldIncludeEventSeries(Boolean shouldIncludeEventSeries) {
        this.shouldIncludeEventSeries = shouldIncludeEventSeries;
        return this;
    }
    
    public QueryEventV1Request(){}
}
