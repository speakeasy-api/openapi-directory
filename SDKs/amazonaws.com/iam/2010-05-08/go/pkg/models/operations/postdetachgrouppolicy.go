// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDetachGroupPolicyActionEnum
type POSTDetachGroupPolicyActionEnum string

const (
	POSTDetachGroupPolicyActionEnumDetachGroupPolicy POSTDetachGroupPolicyActionEnum = "DetachGroupPolicy"
)

func (e *POSTDetachGroupPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DetachGroupPolicy":
		*e = POSTDetachGroupPolicyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDetachGroupPolicyActionEnum: %s", s)
	}
}

// POSTDetachGroupPolicyVersionEnum
type POSTDetachGroupPolicyVersionEnum string

const (
	POSTDetachGroupPolicyVersionEnumTwoThousandAndTen0508 POSTDetachGroupPolicyVersionEnum = "2010-05-08"
)

func (e *POSTDetachGroupPolicyVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = POSTDetachGroupPolicyVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDetachGroupPolicyVersionEnum: %s", s)
	}
}

type POSTDetachGroupPolicyQueryParams struct {
	Action  POSTDetachGroupPolicyActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTDetachGroupPolicyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDetachGroupPolicyHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDetachGroupPolicyRequest struct {
	QueryParams POSTDetachGroupPolicyQueryParams
	Headers     POSTDetachGroupPolicyHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDetachGroupPolicyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
