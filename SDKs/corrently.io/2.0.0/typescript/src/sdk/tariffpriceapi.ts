/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Tariff information for the German market region. Provides base price and energy price information for private households (Standardlastprofil H0, SLP H0 Tarifinformation).
 */
export class TariffPriceAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Energy Tariff information
   *
   * @remarks
   * Provides pricing data for private households with standard load profiles (Standardlastprofil H0).
   *
   */
  tariffSlph0(
    req: operations.TariffSlph0Request,
    config?: AxiosRequestConfig
  ): Promise<operations.TariffSlph0Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TariffSlph0Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tariff/slph0";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TariffSlph0Response =
        new operations.TariffSlph0Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tariffh0s = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tariffh0s = utils.objectToClass(
              httpRes?.data,
              shared.Tariffh0,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Energy Tariff price components
   *
   * @remarks
   * Provides insides into the different cost components of energy for a private household.
   * Sample Request: https://api.corrently.io/v2.0/tariff/components?email=demo%40corrently.io&zip=69168&kwha=3300
   *
   */
  tariffcomponents(
    req: operations.TariffcomponentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TariffcomponentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TariffcomponentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tariff/components";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TariffcomponentsResponse =
        new operations.TariffcomponentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.componentsh0 = utils.objectToClass(
              httpRes?.data,
              shared.Componentsh0
            );
          }
          break;
      }

      return res;
    });
  }
}
