/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostServersCreateServerRequestFirewalls extends SpeakeasyBase {
  /**
   * ID of the Firewall
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firewall" })
  firewall?: number;
}

/**
 * Public Network options
 */
export class PostServersCreateServerRequestPublicNet extends SpeakeasyBase {
  /**
   * Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached. Defaults to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable_ipv4" })
  enableIpv4?: boolean;

  /**
   * Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached. Defaults to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable_ipv6" })
  enableIpv6?: boolean;

  /**
   * ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv4" })
  ipv4?: number;

  /**
   * ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  ipv6?: number;
}

/**
 * Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).
 *
 * @remarks
 *
 * For `server_type` you can either use the ID as listed in `/server_types` or its name.
 *
 * For `image` you can either use the ID as listed in `/images` or its name.
 *
 * If you want to create the Server in a Location, you must set `location` to the ID or name as listed in `/locations`. This is the recommended way. You can be even more specific by setting `datacenter` to the ID or name as listed in `/datacenters`. However we only recommend this if you want to assign a specific Primary IP to the Server which is located in the specified Datacenter.
 *
 * Some properties like `start_after_create` or `automount` will trigger Actions after the Server is created. Those Actions are listed in the `next_actions` field in the response.
 *
 * For accessing your Server we strongly recommend to use SSH keys by passing the respective key IDs in `ssh_keys`. If you do not specify any `ssh_keys` we will generate a root password for you and return it in the response.
 *
 * Please note that provided user-data is stored in our systems. While we take measures to protect it we highly recommend that you donâ€™t use it to store passwords or other sensitive information.
 *
 * #### Call specific error codes
 *
 * | Code                             | Description                                                |
 * |----------------------------------|------------------------------------------------------------|
 * | `placement_error`                | An error during the placement occurred                     |
 * | `primary_ip_assigned`            | The specified Primary IP is already assigned to a server   |
 * | `primary_ip_datacenter_mismatch` | The specified Primary IP is in a different datacenter      |
 * | `primary_ip_version_mismatch`    | The specified Primary IP has the wrong IP Version          |
 *
 */
export class PostServersCreateServerRequest extends SpeakeasyBase {
  /**
   * Auto-mount Volumes after attach
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automount" })
  automount?: boolean;

  /**
   * ID or name of Datacenter to create Server in (must not be used together with location)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  datacenter?: string;

  /**
   * Firewalls which should be applied on the Server's public network interface at creation time
   */
  @SpeakeasyMetadata({ elemType: PostServersCreateServerRequestFirewalls })
  @Expose({ name: "firewalls" })
  @Type(() => PostServersCreateServerRequestFirewalls)
  firewalls?: PostServersCreateServerRequestFirewalls[];

  /**
   * ID or name of the Image the Server is created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  image: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  /**
   * ID or name of Location to create Server in (must not be used together with datacenter)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Network IDs which should be attached to the Server private network interface at the creation time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networks" })
  networks?: number[];

  /**
   * ID of the Placement Group the server should be in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "placement_group" })
  placementGroup?: number;

  /**
   * Public Network options
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_net" })
  @Type(() => PostServersCreateServerRequestPublicNet)
  publicNet?: PostServersCreateServerRequestPublicNet;

  /**
   * ID or name of the Server type this Server should be created with
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_type" })
  serverType: string;

  /**
   * SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssh_keys" })
  sshKeys?: string[];

  /**
   * Start Server right after creation. Defaults to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_after_create" })
  startAfterCreate?: boolean;

  /**
   * Cloud-Init user data to use during Server creation. This field is limited to 32KiB.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_data" })
  userData?: string;

  /**
   * Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumes" })
  volumes?: number[];
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostServersCreateServerResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostServersCreateServerResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostServersCreateServerResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostServersCreateServerResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostServersCreateServerResponseActionError)
  error: PostServersCreateServerResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostServersCreateServerResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostServersCreateServerResponseActionResources)
  resources: PostServersCreateServerResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostServersCreateServerResponseActionStatusEnum;
}

export class PostServersCreateServerResponseServerDatacenterLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * The Server types the Datacenter can handle
 */
export class PostServersCreateServerResponseServerDatacenterServerTypes extends SpeakeasyBase {
  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available: number[];

  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available_for_migration" })
  availableForMigration: number[];

  /**
   * IDs of Server types that are supported in the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supported" })
  supported: number[];
}

/**
 * Datacenter this Resource is located at
 */
export class PostServersCreateServerResponseServerDatacenter extends SpeakeasyBase {
  /**
   * Description of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => PostServersCreateServerResponseServerDatacenterLocation)
  location: PostServersCreateServerResponseServerDatacenterLocation;

  /**
   * Unique identifier of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Server types the Datacenter can handle
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_types" })
  @Type(() => PostServersCreateServerResponseServerDatacenterServerTypes)
  serverTypes: PostServersCreateServerResponseServerDatacenterServerTypes;
}

/**
 * Information about the Server the Image was created from
 */
export class PostServersCreateServerResponseServerImageCreatedFrom extends SpeakeasyBase {
  /**
   * ID of the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Server name at the time the Image was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Flavor of operating system contained in the Image
 */
export enum PostServersCreateServerResponseServerImageOsFlavorEnum {
  Ubuntu = "ubuntu",
  Centos = "centos",
  Debian = "debian",
  Fedora = "fedora",
  Unknown = "unknown",
}

/**
 * Protection configuration for the Resource
 */
export class PostServersCreateServerResponseServerImageProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Whether the Image can be used or if it's still being created or unavailable
 */
export enum PostServersCreateServerResponseServerImageStatusEnum {
  Available = "available",
  Creating = "creating",
  Unavailable = "unavailable",
}

/**
 * Type of the Image
 */
export enum PostServersCreateServerResponseServerImageTypeEnum {
  System = "system",
  App = "app",
  Snapshot = "snapshot",
  Backup = "backup",
  Temporary = "temporary",
}

export class PostServersCreateServerResponseServerImage extends SpeakeasyBase {
  /**
   * ID of Server the Image is bound to. Only set for Images of type `backup`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bound_to" })
  boundTo: number;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Information about the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_from" })
  @Type(() => PostServersCreateServerResponseServerImageCreatedFrom)
  createdFrom: PostServersCreateServerResponseServerImageCreatedFrom;

  /**
   * Point in time where the Image was deleted (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: string;

  /**
   * Point in time when the Image is considered to be deprecated (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Size of the disk contained in the Image in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk_size" })
  diskSize: number;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_size" })
  imageSize: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Unique identifier of the Image. This value is only set for system Images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Flavor of operating system contained in the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_flavor" })
  osFlavor: PostServersCreateServerResponseServerImageOsFlavorEnum;

  /**
   * Operating system version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_version" })
  osVersion: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => PostServersCreateServerResponseServerImageProtection)
  protection: PostServersCreateServerResponseServerImageProtection;

  /**
   * Indicates that rapid deploy of the Image is available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rapid_deploy" })
  rapidDeploy?: boolean;

  /**
   * Whether the Image can be used or if it's still being created or unavailable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostServersCreateServerResponseServerImageStatusEnum;

  /**
   * Type of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostServersCreateServerResponseServerImageTypeEnum;
}

/**
 * Type of the ISO
 */
export enum PostServersCreateServerResponseServerIsoTypeEnum {
  Public = "public",
  Private = "private",
}

/**
 * ISO Image that is attached to this Server. Null if no ISO is attached.
 */
export class PostServersCreateServerResponseServerIso extends SpeakeasyBase {
  /**
   * ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Unique identifier of the ISO. Only set for public ISOs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Type of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostServersCreateServerResponseServerIsoTypeEnum;
}

/**
 * Type of the Placement Group
 */
export enum PostServersCreateServerResponseServerPlacementGroupNullableTypeEnum {
  Spread = "spread",
}

export class PostServersCreateServerResponseServerPlacementGroupNullable extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Array of IDs of Servers that are part of this Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servers" })
  servers: number[];

  /**
   * Type of the Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostServersCreateServerResponseServerPlacementGroupNullableTypeEnum;
}

export class PostServersCreateServerResponseServerPrivateNet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alias_ips" })
  aliasIps?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mac_address" })
  macAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: number;
}

/**
 * Protection configuration for the Server
 */
export class PostServersCreateServerResponseServerProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Server from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;

  /**
   * If true, prevents the Server from being rebuilt
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rebuild" })
  rebuild: boolean;
}

/**
 * Status of the Firewall on the Server
 */
export enum PostServersCreateServerResponseServerPublicNetServerPublicNetFirewallStatusEnum {
  Applied = "applied",
  Pending = "pending",
}

export class PostServersCreateServerResponseServerPublicNetServerPublicNetFirewall extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Status of the Firewall on the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PostServersCreateServerResponseServerPublicNetServerPublicNetFirewallStatusEnum;
}

/**
 * IP address (v4) and its reverse DNS entry of this Server
 */
export class PostServersCreateServerResponseServerPublicNetIpv4 extends SpeakeasyBase {
  /**
   * If the IP is blocked by our anti abuse dept
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Reverse DNS PTR entry for the IPv4 addresses of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP address (v4) of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

export class PostServersCreateServerResponseServerPublicNetIpv6DnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv6 address of this Server for which the reverse DNS entry has been set up
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * IPv6 network assigned to this Server and its reverse DNS entry
 */
export class PostServersCreateServerResponseServerPublicNetIpv6 extends SpeakeasyBase {
  /**
   * If the IP is blocked by our anti abuse dept
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default
   */
  @SpeakeasyMetadata({
    elemType: PostServersCreateServerResponseServerPublicNetIpv6DnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => PostServersCreateServerResponseServerPublicNetIpv6DnsPtr)
  dnsPtr: PostServersCreateServerResponseServerPublicNetIpv6DnsPtr[];

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP address (v6) of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
 */
export class PostServersCreateServerResponseServerPublicNet extends SpeakeasyBase {
  /**
   * Firewalls applied to the public network interface of this Server
   */
  @SpeakeasyMetadata({
    elemType:
      PostServersCreateServerResponseServerPublicNetServerPublicNetFirewall,
  })
  @Expose({ name: "firewalls" })
  @Type(
    () => PostServersCreateServerResponseServerPublicNetServerPublicNetFirewall
  )
  firewalls?: PostServersCreateServerResponseServerPublicNetServerPublicNetFirewall[];

  /**
   * IDs of Floating IPs assigned to this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "floating_ips" })
  floatingIps: number[];

  /**
   * IP address (v4) and its reverse DNS entry of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv4" })
  @Type(() => PostServersCreateServerResponseServerPublicNetIpv4)
  ipv4: PostServersCreateServerResponseServerPublicNetIpv4;

  /**
   * IPv6 network assigned to this Server and its reverse DNS entry
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => PostServersCreateServerResponseServerPublicNetIpv6)
  ipv6: PostServersCreateServerResponseServerPublicNetIpv6;
}

/**
 * Type of cpu
 */
export enum PostServersCreateServerResponseServerServerTypeCpuTypeEnum {
  Shared = "shared",
  Dedicated = "dedicated",
}

/**
 * Hourly costs for a Server type in this Location
 */
export class PostServersCreateServerResponseServerServerTypePricesPriceHourly extends SpeakeasyBase {
  /**
   * Price with VAT added
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross" })
  gross: string;

  /**
   * Price without VAT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net" })
  net: string;
}

/**
 * Monthly costs for a Server type in this Location
 */
export class PostServersCreateServerResponseServerServerTypePricesPriceMonthly extends SpeakeasyBase {
  /**
   * Price with VAT added
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross" })
  gross: string;

  /**
   * Price without VAT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net" })
  net: string;
}

export class PostServersCreateServerResponseServerServerTypePrices extends SpeakeasyBase {
  /**
   * Name of the Location the price is for
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * Hourly costs for a Server type in this Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_hourly" })
  @Type(() => PostServersCreateServerResponseServerServerTypePricesPriceHourly)
  priceHourly: PostServersCreateServerResponseServerServerTypePricesPriceHourly;

  /**
   * Monthly costs for a Server type in this Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_monthly" })
  @Type(() => PostServersCreateServerResponseServerServerTypePricesPriceMonthly)
  priceMonthly: PostServersCreateServerResponseServerServerTypePricesPriceMonthly;
}

/**
 * Type of Server boot drive. Local has higher speed. Network has better availability.
 */
export enum PostServersCreateServerResponseServerServerTypeStorageTypeEnum {
  Local = "local",
  Network = "network",
}

/**
 * Type of Server - determines how much ram, disk and cpu a Server has
 */
export class PostServersCreateServerResponseServerServerType extends SpeakeasyBase {
  /**
   * Number of cpu cores a Server of this type will have
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cores" })
  cores: number;

  /**
   * Type of cpu
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpu_type" })
  cpuType: PostServersCreateServerResponseServerServerTypeCpuTypeEnum;

  /**
   * True if Server type is deprecated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: boolean;

  /**
   * Description of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Disk size a Server of this type will have in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk" })
  disk: number;

  /**
   * ID of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Memory a Server of this type will have in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory: number;

  /**
   * Unique identifier of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Prices in different Locations
   */
  @SpeakeasyMetadata({
    elemType: PostServersCreateServerResponseServerServerTypePrices,
  })
  @Expose({ name: "prices" })
  @Type(() => PostServersCreateServerResponseServerServerTypePrices)
  prices: PostServersCreateServerResponseServerServerTypePrices[];

  /**
   * Type of Server boot drive. Local has higher speed. Network has better availability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storage_type" })
  storageType: PostServersCreateServerResponseServerServerTypeStorageTypeEnum;
}

/**
 * Status of the Server
 */
export enum PostServersCreateServerResponseServerStatusEnum {
  Running = "running",
  Initializing = "initializing",
  Starting = "starting",
  Stopping = "stopping",
  Off = "off",
  Deleting = "deleting",
  Migrating = "migrating",
  Rebuilding = "rebuilding",
  Unknown = "unknown",
}

export class PostServersCreateServerResponseServer extends SpeakeasyBase {
  /**
   * Time window (UTC) in which the backup will run, or null if the backups are not enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backup_window" })
  backupWindow: string;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Datacenter this Resource is located at
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  @Type(() => PostServersCreateServerResponseServerDatacenter)
  datacenter: PostServersCreateServerResponseServerDatacenter;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => PostServersCreateServerResponseServerImage)
  image: PostServersCreateServerResponseServerImage;

  /**
   * Free Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "included_traffic" })
  includedTraffic: number;

  /**
   * Inbound Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingoing_traffic" })
  ingoingTraffic: number;

  /**
   * ISO Image that is attached to this Server. Null if no ISO is attached.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iso" })
  @Type(() => PostServersCreateServerResponseServerIso)
  iso: PostServersCreateServerResponseServerIso;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "load_balancers" })
  loadBalancers?: number[];

  /**
   * True if Server has been locked and is not available to user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked: boolean;

  /**
   * Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Outbound Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outgoing_traffic" })
  outgoingTraffic: number;

  @SpeakeasyMetadata()
  @Expose({ name: "placement_group" })
  @Type(() => PostServersCreateServerResponseServerPlacementGroupNullable)
  placementGroup?: PostServersCreateServerResponseServerPlacementGroupNullable;

  /**
   * Size of the primary Disk
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary_disk_size" })
  primaryDiskSize: number;

  /**
   * Private networks information
   */
  @SpeakeasyMetadata({
    elemType: PostServersCreateServerResponseServerPrivateNet,
  })
  @Expose({ name: "private_net" })
  @Type(() => PostServersCreateServerResponseServerPrivateNet)
  privateNet: PostServersCreateServerResponseServerPrivateNet[];

  /**
   * Protection configuration for the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => PostServersCreateServerResponseServerProtection)
  protection: PostServersCreateServerResponseServerProtection;

  /**
   * Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_net" })
  @Type(() => PostServersCreateServerResponseServerPublicNet)
  publicNet: PostServersCreateServerResponseServerPublicNet;

  /**
   * True if rescue mode is enabled. Server will then boot into rescue system on next reboot
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rescue_enabled" })
  rescueEnabled: boolean;

  /**
   * Type of Server - determines how much ram, disk and cpu a Server has
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_type" })
  @Type(() => PostServersCreateServerResponseServerServerType)
  serverType: PostServersCreateServerResponseServerServerType;

  /**
   * Status of the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostServersCreateServerResponseServerStatusEnum;

  /**
   * IDs of Volumes assigned to this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumes" })
  volumes?: number[];
}

/**
 * The `server` key in the reply contains a Server object with this structure
 */
export class PostServersCreateServerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostServersCreateServerResponseAction)
  action: PostServersCreateServerResponseAction;

  @SpeakeasyMetadata({ elemType: PostServersCreateServerResponseAction })
  @Expose({ name: "next_actions" })
  @Type(() => PostServersCreateServerResponseAction)
  nextActions: PostServersCreateServerResponseAction[];

  /**
   * Root password when no SSH keys have been specified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "root_password" })
  rootPassword: string;

  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(() => PostServersCreateServerResponseServer)
  server: PostServersCreateServerResponseServer;
}

export class PostServersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `server` key in the reply contains a Server object with this structure
   */
  @SpeakeasyMetadata()
  createServerResponse?: PostServersCreateServerResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
