/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * DeviceSummary - Successful operation
 */
public class DeviceSummary {
    /**
     * The ID of the PATROL Agent the device is attached to.
     */
    
    public Integer agentId;

    public DeviceSummary withAgentId(Integer agentId) {
        this.agentId = agentId;
        return this;
    }
    
    /**
     * The name of the PATROL Agent the device is attached to.
     */
    
    public String agentName;

    public DeviceSummary withAgentName(String agentName) {
        this.agentName = agentName;
        return this;
    }
    
    /**
     * The ambient temperature of the device.
     */
    
    public Double ambientTemperature;

    public DeviceSummary withAmbientTemperature(Double ambientTemperature) {
        this.ambientTemperature = ambientTemperature;
        return this;
    }
    
    /**
     * The collection time of the heating margin (as an Epoch time, in seconds).&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String collectTime;

    public DeviceSummary withCollectTime(String collectTime) {
        this.collectTime = collectTime;
        return this;
    }
    
    /**
     * The TSMOKey of the device.
     */
    
    public String deviceTSMOKey;

    public DeviceSummary withDeviceTSMOKey(String deviceTSMOKey) {
        this.deviceTSMOKey = deviceTSMOKey;
        return this;
    }
    
    /**
     * The link to the device details.
     */
    
    public String deviceUrl;

    public DeviceSummary withDeviceUrl(String deviceUrl) {
        this.deviceUrl = deviceUrl;
        return this;
    }
    
    /**
     * The heating margin of the device.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMargin;

    public DeviceSummary withHeatingMargin(Double heatingMargin) {
        this.heatingMargin = heatingMargin;
        return this;
    }
    
    /**
     * The unit in which the heating margin of the device is being expressed.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginUnit;

    public DeviceSummary withHeatingMarginUnit(String heatingMarginUnit) {
        this.heatingMarginUnit = heatingMarginUnit;
        return this;
    }
    
    /**
     * The ID of the device.
     */
    
    public Integer id;

    public DeviceSummary withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the device.
     */
    
    public String name;

    public DeviceSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The power consumption of the device.
     */
    
    public Double powerConsumption;

    public DeviceSummary withPowerConsumption(Double powerConsumption) {
        this.powerConsumption = powerConsumption;
        return this;
    }
    
    /**
     * The unit in which the power consumption of the device is being expressed.
     */
    
    public String powerConsumptionUnit;

    public DeviceSummary withPowerConsumptionUnit(String powerConsumptionUnit) {
        this.powerConsumptionUnit = powerConsumptionUnit;
        return this;
    }
    
    /**
     * The Hardware Sentry KM version of the device's Monitor.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String productVersion;

    public DeviceSummary withProductVersion(String productVersion) {
        this.productVersion = productVersion;
        return this;
    }
    
    /**
     * The ID of the server the device is attached to.
     */
    
    public Integer serverId;

    public DeviceSummary withServerId(Integer serverId) {
        this.serverId = serverId;
        return this;
    }
    
    /**
     * The name of the server the device is attached to.
     */
    
    public String serverName;

    public DeviceSummary withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }
    
    /**
     * The SID of the device.
     */
    
    public String sid;

    public DeviceSummary withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    
    public DeviceSummaryTypeEnum type;

    public DeviceSummary withType(DeviceSummaryTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The data collection time (as an Epoch time, in seconds).
     */
    
    public Long updateTimestamp;

    public DeviceSummary withUpdateTimestamp(Long updateTimestamp) {
        this.updateTimestamp = updateTimestamp;
        return this;
    }
    
    public DeviceSummary(){}
}
