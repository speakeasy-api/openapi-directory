"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitteeHistoryProfileJfcCommittee:
    
    joint_committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joint_committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    joint_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joint_committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitteeHistoryProfile:
    
    committee_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id') }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    cycle: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycle') }})
    r"""A two year election cycle that the committee was active- (after original registration
    date but before expiration date in Form 1s) The cycle begins with
    an odd year and is named for its ending, even year.
    """  
    affiliated_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliated_committee_name'), 'exclude': lambda f: f is None }})
    r"""Affiliated committee or connected organization"""  
    candidate_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_ids'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of committee as reported on the Form 1"""  
    committee_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_label'), 'exclude': lambda f: f is None }})
    r"""Display the label of committee based on committee type, designation and organization type"""  
    committee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    committee_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    convert_to_pac_flag: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('convert_to_pac_flag'), 'exclude': lambda f: f is None }})
    r"""True indicates that a candidate committee had been converted to a PAC"""  
    cycles: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycles'), 'exclude': lambda f: f is None }})
    r"""A two year election cycle that the committee was active- (after original registration
    date but before expiration date in Form 1s) The cycle begins with
    an odd year and is named for its ending, even year.
    """  
    cycles_has_activity: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycles_has_activity'), 'exclude': lambda f: f is None }})
    r"""A two year election cycle that the committee was active- (after original registration
    date but before expiration date in Form 1), and the committee has filling activity during the cycle
    """  
    cycles_has_financial: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycles_has_financial'), 'exclude': lambda f: f is None }})
    r"""A two year election cycle that the committee was active- (after original registration
    date but before expiration date in Form 1s), and the committee files the financial reports
    ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
    """  
    designation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('designation'), 'exclude': lambda f: f is None }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    designation_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('designation_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    filing_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filing_frequency'), 'exclude': lambda f: f is None }})
    r"""The one-letter
        code of the filing frequency:
             - A Administratively terminated
             - D Debt
             - M Monthly filer
             - Q Quarterly filer
             - T Terminated
             - W Waived
    """  
    first_f1_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_f1_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's first Form 1"""  
    first_file_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_file_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's first filing. This is usually a Form 1 committee registration."""  
    former_candidate_election_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('former_candidate_election_year'), 'exclude': lambda f: f is None }})
    r"""Year a candidate runs for federal office."""  
    former_candidate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('former_candidate_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    former_candidate_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('former_candidate_name'), 'exclude': lambda f: f is None }})
    r"""Name of candidate running for office"""  
    former_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('former_committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_active'), 'exclude': lambda f: f is None }})
    r"""True indicates that a committee is active."""  
    jfc_committee: Optional[list[CommitteeHistoryProfileJfcCommittee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jfc_committee'), 'exclude': lambda f: f is None }})  
    last_cycle_has_activity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_cycle_has_activity'), 'exclude': lambda f: f is None }})
    r"""The latest two year election cycle that the committee has filings"""  
    last_cycle_has_financial: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_cycle_has_financial'), 'exclude': lambda f: f is None }})
    r"""The latest two year election cycle that the committee files the financial reports
    ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
    """  
    last_f1_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_f1_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's most recent Form 1"""  
    last_file_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_file_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's most recent filing"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    organization_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    organization_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_type_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    party: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party'), 'exclude': lambda f: f is None }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    party_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party_full'), 'exclude': lambda f: f is None }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    sponsor_candidate_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sponsor_candidate_ids'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
    """  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the committee's address as filed on the Form 1"""  
    state_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_full'), 'exclude': lambda f: f is None }})
    r"""State of committee as reported on the Form 1"""  
    street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_1'), 'exclude': lambda f: f is None }})
    r"""Street address of committee as reported on the Form 1"""  
    street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_2'), 'exclude': lambda f: f is None }})
    r"""Second line of street address of committee as reported on the Form 1"""  
    treasurer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name'), 'exclude': lambda f: f is None }})
    r"""Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown."""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip'), 'exclude': lambda f: f is None }})
    r"""Zip code of committee as reported on the Form 1"""  
    