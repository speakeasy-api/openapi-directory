"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import factor_enum_totp_algorithms_enum as shared_factor_enum_totp_algorithms_enum
from ..shared import verify_v2_service_entity_factor as shared_verify_v2_service_entity_factor
from typing import Optional

UPDATE_FACTOR_SERVERS = [
	"https://verify.twilio.com",
]


@dataclasses.dataclass
class UpdateFactorSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateFactorUpdateFactorRequest:
    
    auth_payload: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AuthPayload' }})
    r"""The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code."""  
    config_alg: Optional[shared_factor_enum_totp_algorithms_enum.FactorEnumTotpAlgorithmsEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.Alg' }})  
    config_code_length: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.CodeLength' }})
    r"""Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive"""  
    config_notification_platform: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.NotificationPlatform' }})
    r"""The transport technology used to generate the Notification Token. Can be `apn`, `fcm` or `none`.
    
    Required when `factor_type` is `push`.
    """  
    config_notification_token: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.NotificationToken' }})
    r"""For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when `factor_type` is `push`. If specified, this value must be between 32 and 255 characters long."""  
    config_sdk_version: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.SdkVersion' }})
    r"""The Verify Push SDK version used to configure the factor"""  
    config_skew: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.Skew' }})
    r"""The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive"""  
    config_time_step: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.TimeStep' }})
    r"""Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive"""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""The new friendly name of this Factor. It can be up to 64 characters."""  
    

@dataclasses.dataclass
class UpdateFactorRequest:
    
    identity: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Identity', 'style': 'simple', 'explode': False }})
    r"""Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters."""  
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})
    r"""The unique SID identifier of the Service."""  
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""A 34 character string that uniquely identifies this Factor."""  
    request_body: Optional[UpdateFactorUpdateFactorRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateFactorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    verify_v2_service_entity_factor: Optional[shared_verify_v2_service_entity_factor.VerifyV2ServiceEntityFactor] = dataclasses.field(default=None)
    r"""OK"""  
    