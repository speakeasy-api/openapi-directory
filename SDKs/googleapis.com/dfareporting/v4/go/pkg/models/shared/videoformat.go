// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoFormatFileTypeEnum - File type of the video format.
type VideoFormatFileTypeEnum string

const (
	VideoFormatFileTypeEnumFlv      VideoFormatFileTypeEnum = "FLV"
	VideoFormatFileTypeEnumThreegpp VideoFormatFileTypeEnum = "THREEGPP"
	VideoFormatFileTypeEnumMp4      VideoFormatFileTypeEnum = "MP4"
	VideoFormatFileTypeEnumWebm     VideoFormatFileTypeEnum = "WEBM"
	VideoFormatFileTypeEnumM3U8     VideoFormatFileTypeEnum = "M3U8"
)

func (e VideoFormatFileTypeEnum) ToPointer() *VideoFormatFileTypeEnum {
	return &e
}

func (e *VideoFormatFileTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLV":
		fallthrough
	case "THREEGPP":
		fallthrough
	case "MP4":
		fallthrough
	case "WEBM":
		fallthrough
	case "M3U8":
		*e = VideoFormatFileTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoFormatFileTypeEnum: %v", v)
	}
}

// VideoFormat - Contains information about supported video formats.
type VideoFormat struct {
	// File type of the video format.
	FileType *VideoFormatFileTypeEnum `json:"fileType,omitempty"`
	// ID of the video format.
	ID *int `json:"id,omitempty"`
	// Identifies what kind of resource this is. Value: the fixed string "dfareporting#videoFormat".
	Kind *string `json:"kind,omitempty"`
	// Represents the dimensions of ads, placements, creatives, or creative assets.
	Resolution *Size `json:"resolution,omitempty"`
	// The target bit rate of this video format.
	TargetBitRate *int `json:"targetBitRate,omitempty"`
}
