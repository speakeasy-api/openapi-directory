// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum - The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
type ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnumLegacy   ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum = "legacy"
	ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnumWorkflow ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum = "workflow"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
type ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnumRoot     ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum = "/"
	ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnumRootDocs ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum = "/docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody5Source2 - Update the source for the repository. Must include the branch name and path.
type ReposUpdateInformationAboutPagesSiteRequestBody5Source2 struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
	Path ReposUpdateInformationAboutPagesSiteRequestBody5Source2PathEnum `json:"path"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum - Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
type ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody5Source1EnumGhPages    ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum = "gh-pages"
	ReposUpdateInformationAboutPagesSiteRequestBody5Source1EnumMaster     ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum = "master"
	ReposUpdateInformationAboutPagesSiteRequestBody5Source1EnumMasterDocs ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum = "master /docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gh-pages":
		fallthrough
	case "master":
		fallthrough
	case "master /docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody5Source1Enum: %v", v)
	}
}

type ReposUpdateInformationAboutPagesSiteRequestBody5 struct {
	// The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
	BuildType *ReposUpdateInformationAboutPagesSiteRequestBody5BuildTypeEnum `json:"build_type,omitempty"`
	// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-cloud@latest//articles/using-a-custom-domain-with-github-pages/)."
	Cname *string `json:"cname,omitempty"`
	// Specify whether HTTPS should be enforced for the repository.
	HTTPSEnforced bool `json:"https_enforced"`
	// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility.
	Public *bool       `json:"public,omitempty"`
	Source interface{} `json:"source,omitempty"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum - The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
type ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnumLegacy   ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum = "legacy"
	ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnumWorkflow ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum = "workflow"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
type ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnumRoot     ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum = "/"
	ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnumRootDocs ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum = "/docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody4Source2 - Update the source for the repository. Must include the branch name and path.
type ReposUpdateInformationAboutPagesSiteRequestBody4Source2 struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
	Path ReposUpdateInformationAboutPagesSiteRequestBody4Source2PathEnum `json:"path"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum - Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
type ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody4Source1EnumGhPages    ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum = "gh-pages"
	ReposUpdateInformationAboutPagesSiteRequestBody4Source1EnumMaster     ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum = "master"
	ReposUpdateInformationAboutPagesSiteRequestBody4Source1EnumMasterDocs ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum = "master /docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gh-pages":
		fallthrough
	case "master":
		fallthrough
	case "master /docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody4Source1Enum: %v", v)
	}
}

type ReposUpdateInformationAboutPagesSiteRequestBody4 struct {
	// The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
	BuildType *ReposUpdateInformationAboutPagesSiteRequestBody4BuildTypeEnum `json:"build_type,omitempty"`
	// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-cloud@latest//articles/using-a-custom-domain-with-github-pages/)."
	Cname *string `json:"cname,omitempty"`
	// Specify whether HTTPS should be enforced for the repository.
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`
	// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility.
	Public bool        `json:"public"`
	Source interface{} `json:"source,omitempty"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum - The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
type ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnumLegacy   ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum = "legacy"
	ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnumWorkflow ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum = "workflow"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
type ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnumRoot     ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum = "/"
	ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnumRootDocs ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum = "/docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody3Source2 - Update the source for the repository. Must include the branch name and path.
type ReposUpdateInformationAboutPagesSiteRequestBody3Source2 struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
	Path ReposUpdateInformationAboutPagesSiteRequestBody3Source2PathEnum `json:"path"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum - Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
type ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody3Source1EnumGhPages    ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum = "gh-pages"
	ReposUpdateInformationAboutPagesSiteRequestBody3Source1EnumMaster     ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum = "master"
	ReposUpdateInformationAboutPagesSiteRequestBody3Source1EnumMasterDocs ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum = "master /docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gh-pages":
		fallthrough
	case "master":
		fallthrough
	case "master /docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody3Source1Enum: %v", v)
	}
}

type ReposUpdateInformationAboutPagesSiteRequestBody3 struct {
	// The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
	BuildType *ReposUpdateInformationAboutPagesSiteRequestBody3BuildTypeEnum `json:"build_type,omitempty"`
	// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-cloud@latest//articles/using-a-custom-domain-with-github-pages/)."
	Cname string `json:"cname"`
	// Specify whether HTTPS should be enforced for the repository.
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`
	// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility.
	Public *bool       `json:"public,omitempty"`
	Source interface{} `json:"source,omitempty"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum - The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
type ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnumLegacy   ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum = "legacy"
	ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnumWorkflow ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum = "workflow"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
type ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnumRoot     ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum = "/"
	ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnumRootDocs ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum = "/docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody2Source2 - Update the source for the repository. Must include the branch name and path.
type ReposUpdateInformationAboutPagesSiteRequestBody2Source2 struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
	Path ReposUpdateInformationAboutPagesSiteRequestBody2Source2PathEnum `json:"path"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum - Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
type ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody2Source1EnumGhPages    ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum = "gh-pages"
	ReposUpdateInformationAboutPagesSiteRequestBody2Source1EnumMaster     ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum = "master"
	ReposUpdateInformationAboutPagesSiteRequestBody2Source1EnumMasterDocs ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum = "master /docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gh-pages":
		fallthrough
	case "master":
		fallthrough
	case "master /docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody2Source1Enum: %v", v)
	}
}

type ReposUpdateInformationAboutPagesSiteRequestBody2 struct {
	// The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
	BuildType *ReposUpdateInformationAboutPagesSiteRequestBody2BuildTypeEnum `json:"build_type,omitempty"`
	// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-cloud@latest//articles/using-a-custom-domain-with-github-pages/)."
	Cname *string `json:"cname,omitempty"`
	// Specify whether HTTPS should be enforced for the repository.
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`
	// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility.
	Public *bool       `json:"public,omitempty"`
	Source interface{} `json:"source"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum - The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
type ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnumLegacy   ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum = "legacy"
	ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnumWorkflow ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum = "workflow"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
type ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnumRoot     ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum = "/"
	ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnumRootDocs ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum = "/docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum: %v", v)
	}
}

// ReposUpdateInformationAboutPagesSiteRequestBody1Source2 - Update the source for the repository. Must include the branch name and path.
type ReposUpdateInformationAboutPagesSiteRequestBody1Source2 struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
	Path ReposUpdateInformationAboutPagesSiteRequestBody1Source2PathEnum `json:"path"`
}

// ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum - Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
type ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum string

const (
	ReposUpdateInformationAboutPagesSiteRequestBody1Source1EnumGhPages    ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum = "gh-pages"
	ReposUpdateInformationAboutPagesSiteRequestBody1Source1EnumMaster     ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum = "master"
	ReposUpdateInformationAboutPagesSiteRequestBody1Source1EnumMasterDocs ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum = "master /docs"
)

func (e ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum) ToPointer() *ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum {
	return &e
}

func (e *ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gh-pages":
		fallthrough
	case "master":
		fallthrough
	case "master /docs":
		*e = ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposUpdateInformationAboutPagesSiteRequestBody1Source1Enum: %v", v)
	}
}

type ReposUpdateInformationAboutPagesSiteRequestBody1 struct {
	// The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
	BuildType ReposUpdateInformationAboutPagesSiteRequestBody1BuildTypeEnum `json:"build_type"`
	// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-cloud@latest//articles/using-a-custom-domain-with-github-pages/)."
	Cname *string `json:"cname,omitempty"`
	// Specify whether HTTPS should be enforced for the repository.
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`
	// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility.
	Public *bool       `json:"public,omitempty"`
	Source interface{} `json:"source,omitempty"`
}

type ReposUpdateInformationAboutPagesSiteRequest struct {
	RequestBody interface{} `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposUpdateInformationAboutPagesSiteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad Request
	BasicError *shared.BasicError
	// Bad Request
	ScimError *shared.ScimError
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
