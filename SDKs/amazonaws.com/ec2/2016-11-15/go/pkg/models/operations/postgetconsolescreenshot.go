// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTGetConsoleScreenshotActionEnum
type POSTGetConsoleScreenshotActionEnum string

const (
	POSTGetConsoleScreenshotActionEnumGetConsoleScreenshot POSTGetConsoleScreenshotActionEnum = "GetConsoleScreenshot"
)

func (e *POSTGetConsoleScreenshotActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetConsoleScreenshot":
		*e = POSTGetConsoleScreenshotActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetConsoleScreenshotActionEnum: %s", s)
	}
}

// POSTGetConsoleScreenshotVersionEnum
type POSTGetConsoleScreenshotVersionEnum string

const (
	POSTGetConsoleScreenshotVersionEnumTwoThousandAndSixteen1115 POSTGetConsoleScreenshotVersionEnum = "2016-11-15"
)

func (e *POSTGetConsoleScreenshotVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTGetConsoleScreenshotVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetConsoleScreenshotVersionEnum: %s", s)
	}
}

type POSTGetConsoleScreenshotQueryParams struct {
	Action  POSTGetConsoleScreenshotActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTGetConsoleScreenshotVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTGetConsoleScreenshotHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTGetConsoleScreenshotRequest struct {
	QueryParams POSTGetConsoleScreenshotQueryParams
	Headers     POSTGetConsoleScreenshotHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTGetConsoleScreenshotResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
