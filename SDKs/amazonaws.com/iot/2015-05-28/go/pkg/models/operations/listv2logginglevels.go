// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListV2LoggingLevelsTargetTypeEnum - The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
type ListV2LoggingLevelsTargetTypeEnum string

const (
	ListV2LoggingLevelsTargetTypeEnumDefault     ListV2LoggingLevelsTargetTypeEnum = "DEFAULT"
	ListV2LoggingLevelsTargetTypeEnumThingGroup  ListV2LoggingLevelsTargetTypeEnum = "THING_GROUP"
	ListV2LoggingLevelsTargetTypeEnumClientID    ListV2LoggingLevelsTargetTypeEnum = "CLIENT_ID"
	ListV2LoggingLevelsTargetTypeEnumSourceIP    ListV2LoggingLevelsTargetTypeEnum = "SOURCE_IP"
	ListV2LoggingLevelsTargetTypeEnumPrincipalID ListV2LoggingLevelsTargetTypeEnum = "PRINCIPAL_ID"
)

func (e ListV2LoggingLevelsTargetTypeEnum) ToPointer() *ListV2LoggingLevelsTargetTypeEnum {
	return &e
}

func (e *ListV2LoggingLevelsTargetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "THING_GROUP":
		fallthrough
	case "CLIENT_ID":
		fallthrough
	case "SOURCE_IP":
		fallthrough
	case "PRINCIPAL_ID":
		*e = ListV2LoggingLevelsTargetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListV2LoggingLevelsTargetTypeEnum: %v", v)
	}
}

type ListV2LoggingLevelsRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The maximum number of results to return at one time.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.
	TargetType *ListV2LoggingLevelsTargetTypeEnum `queryParam:"style=form,explode=true,name=targetType"`
}

type ListV2LoggingLevelsResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListV2LoggingLevelsResponse *shared.ListV2LoggingLevelsResponse
	// NotConfiguredException
	NotConfiguredException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
}
