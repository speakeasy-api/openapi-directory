/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Liasettings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves and/or updates the LIA settings of multiple accounts in a single request.
   */
  contentLiasettingsCustombatch(
    req: operations.ContentLiasettingsCustombatchRequest,
    security: operations.ContentLiasettingsCustombatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsCustombatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsCustombatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/liasettings/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "liasettingsCustomBatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsCustombatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsCustombatchResponse =
        new operations.ContentLiasettingsCustombatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsCustomBatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.LiasettingsCustomBatchResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the LIA settings of the account.
   */
  contentLiasettingsGet(
    req: operations.ContentLiasettingsGetRequest,
    security: operations.ContentLiasettingsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsGetResponse =
        new operations.ContentLiasettingsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liaSettings = utils.objectToClass(
              httpRes?.data,
              shared.LiaSettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the list of accessible Google My Business accounts.
   */
  contentLiasettingsGetaccessiblegmbaccounts(
    req: operations.ContentLiasettingsGetaccessiblegmbaccountsRequest,
    security: operations.ContentLiasettingsGetaccessiblegmbaccountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsGetaccessiblegmbaccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsGetaccessiblegmbaccountsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContentLiasettingsGetaccessiblegmbaccountsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsGetaccessiblegmbaccountsResponse =
        new operations.ContentLiasettingsGetaccessiblegmbaccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsGetAccessibleGmbAccountsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.LiasettingsGetAccessibleGmbAccountsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the LIA settings of the sub-accounts in your Merchant Center account.
   */
  contentLiasettingsList(
    req: operations.ContentLiasettingsListRequest,
    security: operations.ContentLiasettingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsListResponse =
        new operations.ContentLiasettingsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.LiasettingsListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the list of POS data providers that have active settings for the all eiligible countries.
   */
  contentLiasettingsListposdataproviders(
    req: operations.ContentLiasettingsListposdataprovidersRequest,
    security: operations.ContentLiasettingsListposdataprovidersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsListposdataprovidersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsListposdataprovidersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/liasettings/posdataproviders";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsListposdataprovidersSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsListposdataprovidersResponse =
        new operations.ContentLiasettingsListposdataprovidersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsListPosDataProvidersResponse = utils.objectToClass(
              httpRes?.data,
              shared.LiasettingsListPosDataProvidersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Requests access to a specified Google My Business account.
   */
  contentLiasettingsRequestgmbaccess(
    req: operations.ContentLiasettingsRequestgmbaccessRequest,
    security: operations.ContentLiasettingsRequestgmbaccessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsRequestgmbaccessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsRequestgmbaccessRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}/requestgmbaccess",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsRequestgmbaccessSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsRequestgmbaccessResponse =
        new operations.ContentLiasettingsRequestgmbaccessResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsRequestGmbAccessResponse = utils.objectToClass(
              httpRes?.data,
              shared.LiasettingsRequestGmbAccessResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Requests inventory validation for the specified country.
   */
  contentLiasettingsRequestinventoryverification(
    req: operations.ContentLiasettingsRequestinventoryverificationRequest,
    security: operations.ContentLiasettingsRequestinventoryverificationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsRequestinventoryverificationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContentLiasettingsRequestinventoryverificationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContentLiasettingsRequestinventoryverificationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsRequestinventoryverificationResponse =
        new operations.ContentLiasettingsRequestinventoryverificationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsRequestInventoryVerificationResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.LiasettingsRequestInventoryVerificationResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the inventory verification contract for the specified country.
   */
  contentLiasettingsSetinventoryverificationcontact(
    req: operations.ContentLiasettingsSetinventoryverificationcontactRequest,
    security: operations.ContentLiasettingsSetinventoryverificationcontactSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsSetinventoryverificationcontactResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ContentLiasettingsSetinventoryverificationcontactRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ContentLiasettingsSetinventoryverificationcontactSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsSetinventoryverificationcontactResponse =
        new operations.ContentLiasettingsSetinventoryverificationcontactResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsSetInventoryVerificationContactResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.LiasettingsSetInventoryVerificationContactResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the POS data provider for the specified country.
   */
  contentLiasettingsSetposdataprovider(
    req: operations.ContentLiasettingsSetposdataproviderRequest,
    security: operations.ContentLiasettingsSetposdataproviderSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsSetposdataproviderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsSetposdataproviderRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}/setposdataprovider",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsSetposdataproviderSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsSetposdataproviderResponse =
        new operations.ContentLiasettingsSetposdataproviderResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liasettingsSetPosDataProviderResponse = utils.objectToClass(
              httpRes?.data,
              shared.LiasettingsSetPosDataProviderResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.
   */
  contentLiasettingsUpdate(
    req: operations.ContentLiasettingsUpdateRequest,
    security: operations.ContentLiasettingsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentLiasettingsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentLiasettingsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/liasettings/{accountId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "liaSettings",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentLiasettingsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentLiasettingsUpdateResponse =
        new operations.ContentLiasettingsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liaSettings = utils.objectToClass(
              httpRes?.data,
              shared.LiaSettings
            );
          }
          break;
      }

      return res;
    });
  }
}
