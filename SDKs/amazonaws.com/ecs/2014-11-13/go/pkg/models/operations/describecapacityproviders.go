// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeCapacityProvidersXAmzTargetEnum
type DescribeCapacityProvidersXAmzTargetEnum string

const (
	DescribeCapacityProvidersXAmzTargetEnumAmazonEc2ContainerServiceV20141113DescribeCapacityProviders DescribeCapacityProvidersXAmzTargetEnum = "AmazonEC2ContainerServiceV20141113.DescribeCapacityProviders"
)

func (e *DescribeCapacityProvidersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerServiceV20141113.DescribeCapacityProviders":
		*e = DescribeCapacityProvidersXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityProvidersXAmzTargetEnum: %s", s)
	}
}

type DescribeCapacityProvidersHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeCapacityProvidersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeCapacityProvidersRequest struct {
	Headers DescribeCapacityProvidersHeaders
	Request shared.DescribeCapacityProvidersRequest `request:"mediaType=application/json"`
}

type DescribeCapacityProvidersResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	DescribeCapacityProvidersResponse *shared.DescribeCapacityProvidersResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
}
