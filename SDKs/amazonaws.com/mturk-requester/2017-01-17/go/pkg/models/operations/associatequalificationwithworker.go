// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateQualificationWithWorkerXAmzTargetEnum
type AssociateQualificationWithWorkerXAmzTargetEnum string

const (
	AssociateQualificationWithWorkerXAmzTargetEnumMTurkRequesterServiceV20170117AssociateQualificationWithWorker AssociateQualificationWithWorkerXAmzTargetEnum = "MTurkRequesterServiceV20170117.AssociateQualificationWithWorker"
)

func (e AssociateQualificationWithWorkerXAmzTargetEnum) ToPointer() *AssociateQualificationWithWorkerXAmzTargetEnum {
	return &e
}

func (e *AssociateQualificationWithWorkerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MTurkRequesterServiceV20170117.AssociateQualificationWithWorker":
		*e = AssociateQualificationWithWorkerXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateQualificationWithWorkerXAmzTargetEnum: %v", v)
	}
}

type AssociateQualificationWithWorkerRequest struct {
	AssociateQualificationWithWorkerRequest shared.AssociateQualificationWithWorkerRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                           *string                                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                       *string                                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                          *string                                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                *string                                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                       *string                                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                           *string                                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                       *string                                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                              AssociateQualificationWithWorkerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AssociateQualificationWithWorkerResponse struct {
	// Success
	AssociateQualificationWithWorkerResponse map[string]interface{}
	ContentType                              string
	// RequestError
	RequestError interface{}
	// ServiceFault
	ServiceFault interface{}
	StatusCode   int
	RawResponse  *http.Response
}
