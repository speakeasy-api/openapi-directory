<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Products 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an existing Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonResponse
     */
	public function deleteProductsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProductsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteProductsIdJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all Products.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsJsonResponse
     */
	public function getProductsJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->products = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Product>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves Products after the given id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonResponse
     */
	public function getProductsAfterIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/after/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsAfterIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->products = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Product>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Products filtered by category.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonResponse
     */
	public function getProductsCategoryCategoryIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/category/{category_id}.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->products = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Product>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count Products filtered by category.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonResponse
     */
	public function getProductsCategoryCategoryIdCountJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/category/{category_id}/count.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsCategoryCategoryIdCountJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->count = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Count', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count all Products.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsCountJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsCountJsonResponse
     */
	public function getProductsCountJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsCountJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsCountJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/count.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsCountJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsCountJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->count = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Count', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Product List from a query.
     * 
     * Endpoint example: 
     * 
     * ```text
     * https://api.jumpseller.com/v1/products/search.json?login=XXXXXX&authtoken=XXXXX&query=test&fields=name,description 
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsSearchJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsSearchJsonResponse
     */
	public function getProductsSearchJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsSearchJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsSearchJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/search.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsSearchJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsSearchJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->products = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Product>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Products filtered by status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonResponse
     */
	public function getProductsStatusStatusJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/status/{status}.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->products = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Product>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statusInvalid = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StatusInvalid', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count Products filtered by status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonResponse
     */
	public function getProductsStatusStatusCountJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/status/{status}/count.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsStatusStatusCountJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->count = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Count', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statusInvalid = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StatusInvalid', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonResponse
     */
	public function getProductsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProductsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProductsJsonResponse
     */
	public function postProductsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostProductsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProductsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "productEdit", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostProductsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProductsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify an existing Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonResponse
     */
	public function putProductsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{id}.json', \OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "productEdit", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutProductsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
}