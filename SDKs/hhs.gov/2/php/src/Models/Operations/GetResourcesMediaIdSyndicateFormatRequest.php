<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetResourcesMediaIdSyndicateFormatRequest
{
    /**
     * If content is a video, the embeded video will auto play when loaded.
     * 
     * @var ?bool $autoplay
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=autoplay')]
    public ?bool $autoplay = null;
    
    /**
     * The css class to target for extraction.
     * 
     * @var ?string $cssClass
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=cssClass')]
    public ?string $cssClass = null;
    
    /**
     * Set font size (in points) of p, div, and span tags.
     * 
     * @var ?int $fontSize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=font-size')]
    public ?int $fontSize = null;
    
    /**
     * Automatically added
     * 
     * @var string $format
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=format')]
    public string $format;
    
    /**
     * The id of the media to show embed code for.
     * 
     * @var int $id
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=id')]
    public int $id;
    
    /**
     * Accepts valid CSS float options, such as 'left' or 'right'. Will inject a style into the content before rendering.
     * 
     * @var ?string $imageFloat
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=imageFloat')]
    public ?string $imageFloat = null;
    
    /**
     * Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is 'north,east,south,west' - for example '0,10,10,0' would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering.
     * 
     * @var ?string $imageMargin
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=imageMargin')]
    public ?string $imageMargin = null;
    
    /**
     * If content is a video, related items will be shown at the end of playback.
     * 
     * @var ?bool $rel
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=rel')]
    public ?bool $rel = null;
    
    /**
     * Remove break tags from content.
     * 
     * @var ?bool $stripBreaks
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=stripBreaks')]
    public ?bool $stripBreaks = null;
    
    /**
     * Remove class attributes from content (except 'syndicate').
     * 
     * @var ?bool $stripClasses
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=stripClasses')]
    public ?bool $stripClasses = null;
    
    /**
     * Remove image tags from content.
     * 
     * @var ?bool $stripImages
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=stripImages')]
    public ?bool $stripImages = null;
    
    /**
     * Remove script tags from content.
     * 
     * @var ?bool $stripScripts
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=stripScripts')]
    public ?bool $stripScripts = null;
    
    /**
     * Remove in-line styles from content.
     * 
     * @var ?bool $stripStyles
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=false,name=stripStyles')]
    public ?bool $stripStyles = null;
    
	public function __construct()
	{
		$this->autoplay = null;
		$this->cssClass = null;
		$this->fontSize = null;
		$this->format = "";
		$this->id = 0;
		$this->imageFloat = null;
		$this->imageMargin = null;
		$this->rel = null;
		$this->stripBreaks = null;
		$this->stripClasses = null;
		$this->stripImages = null;
		$this->stripScripts = null;
		$this->stripStyles = null;
	}
}
