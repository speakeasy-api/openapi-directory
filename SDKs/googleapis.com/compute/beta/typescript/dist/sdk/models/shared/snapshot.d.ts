import { SpeakeasyBase } from "../../../internal/utils";
import { CustomerEncryptionKey } from "./customerencryptionkey";
/**
 * [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
 */
export declare enum SnapshotArchitectureEnum {
    ArchitectureUnspecified = "ARCHITECTURE_UNSPECIFIED",
    Arm64 = "ARM64",
    X8664 = "X86_64"
}
/**
 * Indicates the type of the snapshot.
 */
export declare enum SnapshotSnapshotTypeEnum {
    Archive = "ARCHIVE",
    Standard = "STANDARD"
}
/**
 * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
 */
export declare enum SnapshotStatusEnum {
    Creating = "CREATING",
    Deleting = "DELETING",
    Failed = "FAILED",
    Ready = "READY",
    Uploading = "UPLOADING"
}
/**
 * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
 */
export declare enum SnapshotStorageBytesStatusEnum {
    Updating = "UPDATING",
    UpToDate = "UP_TO_DATE"
}
/**
 * Represents a Persistent Disk Snapshot resource. You can use snapshots to back up data on a regular interval. For more information, read Creating persistent disk snapshots.
 */
export declare class Snapshot extends SpeakeasyBase {
    /**
     * [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
     */
    architecture?: SnapshotArchitectureEnum;
    /**
     * [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
     */
    autoCreated?: boolean;
    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
     */
    chainName?: string;
    /**
     * [Output Only] Size in bytes of the snapshot at creation time.
     */
    creationSizeBytes?: string;
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description?: string;
    /**
     * [Output Only] Size of the source disk, specified in GB.
     */
    diskSizeGb?: string;
    /**
     * [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
     */
    downloadBytes?: string;
    /**
     * [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
     */
    guestFlush?: boolean;
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    id?: string;
    /**
     * [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
     */
    kind?: string;
    /**
     * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
     */
    labelFingerprint?: string;
    /**
     * Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
     */
    labels?: Record<string, string>;
    /**
     * [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
     */
    licenseCodes?: string[];
    /**
     * [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
     */
    licenses?: string[];
    /**
     * An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
     */
    locationHint?: string;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: string;
    /**
     * [Output Only] Reserved for future use.
     */
    satisfiesPzs?: boolean;
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    selfLink?: string;
    snapshotEncryptionKey?: CustomerEncryptionKey;
    /**
     * Indicates the type of the snapshot.
     */
    snapshotType?: SnapshotSnapshotTypeEnum;
    /**
     * The source disk used to create this snapshot.
     */
    sourceDisk?: string;
    sourceDiskEncryptionKey?: CustomerEncryptionKey;
    /**
     * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
     */
    sourceDiskId?: string;
    /**
     * [Output Only] URL of the resource policy which created this scheduled snapshot.
     */
    sourceSnapshotSchedulePolicy?: string;
    /**
     * [Output Only] ID of the resource policy which created this scheduled snapshot.
     */
    sourceSnapshotSchedulePolicyId?: string;
    /**
     * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
     */
    status?: SnapshotStatusEnum;
    /**
     * [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
     */
    storageBytes?: string;
    /**
     * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    storageBytesStatus?: SnapshotStorageBytesStatusEnum;
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    storageLocations?: string[];
    /**
     * [Output Only] A list of user provided licenses represented by a list of URLs to the license resource.
     */
    userLicenses?: string[];
}
