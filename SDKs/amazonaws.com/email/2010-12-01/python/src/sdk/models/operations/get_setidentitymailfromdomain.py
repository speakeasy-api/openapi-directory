"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETSetIdentityMailFromDomainActionEnum(str, Enum):
    SET_IDENTITY_MAIL_FROM_DOMAIN = 'SetIdentityMailFromDomain'

class GETSetIdentityMailFromDomainBehaviorOnMxFailureEnum(str, Enum):
    r"""<p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>"""
    USE_DEFAULT_VALUE = 'UseDefaultValue'
    REJECT_MESSAGE = 'RejectMessage'

class GETSetIdentityMailFromDomainVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_12_01 = '2010-12-01'


@dataclasses.dataclass
class GETSetIdentityMailFromDomainRequest:
    
    action: GETSetIdentityMailFromDomainActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    identity: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Identity', 'style': 'form', 'explode': True }})
    r"""The verified identity for which you want to enable or disable the specified custom MAIL FROM domain."""  
    version: GETSetIdentityMailFromDomainVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    behavior_on_mx_failure: Optional[GETSetIdentityMailFromDomainBehaviorOnMxFailureEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'BehaviorOnMXFailure', 'style': 'form', 'explode': True }})
    r"""<p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>"""  
    mail_from_domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MailFromDomain', 'style': 'form', 'explode': True }})
    r"""The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a \\"From\\" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a href=\\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html\\">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETSetIdentityMailFromDomainResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    