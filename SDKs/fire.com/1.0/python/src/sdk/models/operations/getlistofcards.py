"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GetListofCardsCardsCardProviderEnum(str, Enum):
    r"""card provider"""
    MASTERCARD = 'MASTERCARD'

class GetListofCardsCardsCardStatusEnum(str, Enum):
    r"""card status"""
    LIVE = 'LIVE'
    CREATED_ACTIVE = 'CREATED_ACTIVE'
    CREATED_INACTIVE = 'CREATED_INACTIVE'
    DEACTIVATED = 'DEACTIVATED'

class GetListofCardsCardsCardStatusReasonEnum(str, Enum):
    r"""reason for card status"""
    LOST_CARD = 'LOST_CARD'
    STOLEN_CARD = 'STOLEN_CARD'
    CARD_DESTROYED = 'CARD_DESTROYED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListofCardsCardsCard:
    
    blocked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked'), 'exclude': lambda f: f is None }})
    r"""Whether the card is blocked or not"""  
    card_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardId'), 'exclude': lambda f: f is None }})
    r"""card id assigned by fire.com"""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date-time the card was created"""  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""card user email address"""  
    eur_ican: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eurIcan'), 'exclude': lambda f: f is None }})
    r"""identifier for the eur fire.com account (assigned by fire.com)"""  
    expiry_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""card expiry date"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""card user first name"""  
    gbp_ican: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbpIcan'), 'exclude': lambda f: f is None }})
    r"""identifier for the gbp fire.com account (assigned by fire.com)"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""card user last name"""  
    masked_pan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maskedPan'), 'exclude': lambda f: f is None }})
    r"""card number (masked)"""  
    provider: Optional[GetListofCardsCardsCardProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""card provider"""  
    status: Optional[GetListofCardsCardsCardStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""card status"""  
    status_reason: Optional[GetListofCardsCardsCardStatusReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusReason'), 'exclude': lambda f: f is None }})
    r"""reason for card status"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""card user id assigned by fire.com"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListofCardsCards:
    r"""Successful response"""
    
    cards: Optional[list[GetListofCardsCardsCard]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetListofCardsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    cards: Optional[GetListofCardsCards] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    