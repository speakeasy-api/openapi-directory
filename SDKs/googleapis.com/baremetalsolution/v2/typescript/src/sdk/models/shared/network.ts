/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NetworkAddressReservation } from "./networkaddressreservation";
import { NetworkMountPoint } from "./networkmountpoint";
import { Vrf } from "./vrf";
import { Expose, Type } from "class-transformer";

/**
 * The Network state.
 */
export enum NetworkStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Provisioning = "PROVISIONING",
  Provisioned = "PROVISIONED",
  Deprovisioning = "DEPROVISIONING",
  Updating = "UPDATING",
}

/**
 * The type of this network.
 */
export enum NetworkTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  Client = "CLIENT",
  Private = "PRIVATE",
}

/**
 * A Network.
 */
export class Network extends SpeakeasyBase {
  /**
   * The cidr of the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Output only. Gateway ip address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayIp" })
  gatewayIp?: string;

  /**
   * An identifier for the `Network`, generated by the backend.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * IP address configured.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipAddress" })
  ipAddress?: string;

  /**
   * Whether network uses standard frames or jumbo ones.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jumboFramesEnabled" })
  jumboFramesEnabled?: boolean;

  /**
   * Labels as key value pairs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * List of physical interfaces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "macAddress" })
  macAddress?: string[];

  /**
   * Input only. List of mount points to attach the network to.
   */
  @SpeakeasyMetadata({ elemType: NetworkMountPoint })
  @Expose({ name: "mountPoints" })
  @Type(() => NetworkMountPoint)
  mountPoints?: NetworkMountPoint[];

  /**
   * Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. Pod name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pod" })
  pod?: string;

  /**
   * List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
   */
  @SpeakeasyMetadata({ elemType: NetworkAddressReservation })
  @Expose({ name: "reservations" })
  @Type(() => NetworkAddressReservation)
  reservations?: NetworkAddressReservation[];

  /**
   * IP range for reserved for services (e.g. NFS).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servicesCidr" })
  servicesCidr?: string;

  /**
   * The Network state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: NetworkStateEnum;

  /**
   * The type of this network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: NetworkTypeEnum;

  /**
   * The vlan id of the Network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlanId" })
  vlanId?: string;

  /**
   * A network VRF.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vrf" })
  @Type(() => Vrf)
  vrf?: Vrf;
}
