"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DashboardWebinarsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class DashboardWebinarsTypeEnum(str, Enum):
    r"""The webinar type."""
    PAST = 'past'
    LIVE = 'live'


@dataclasses.dataclass
class DashboardWebinarsRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[DashboardWebinarsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The webinar type."""  
    

@dataclasses.dataclass
class DashboardWebinars200ApplicationXMLWebinarMetricsCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None)
    r"""Custom key associated with the Webinar."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Value of the custom key associated with the Webinar."""  
    

@dataclasses.dataclass
class DashboardWebinars200ApplicationXMLWebinarMetrics:
    r"""Webinar metric details."""
    
    custom_keys: Optional[list[DashboardWebinars200ApplicationXMLWebinarMetricsCustomKeys]] = dataclasses.field(default=None)
    r"""Custom keys and values assigned to the Webinar."""  
    dept: Optional[str] = dataclasses.field(default=None)
    r"""Department of the host."""  
    duration: Optional[str] = dataclasses.field(default=None)
    r"""Webinar duration, formatted as hh:mm:ss, for example: `10:00` for ten minutes."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    end_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Webinar end time."""  
    has_3rd_party_audio: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not TSP was used for the Webinar."""  
    has_pstn: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not PSTN was used for the Webinar."""  
    has_recording: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not recording was used for the Webinar."""  
    has_screen_share: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not screen sharing was used for the Webinar."""  
    has_sip: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not SIP was used for the Webinar."""  
    has_video: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not video was used for the Webinar."""  
    has_voip: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not VoIP was used for the Webinar."""  
    host: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    id: Optional[int] = dataclasses.field(default=None)
    r"""Webinar ID in \\"**long**\\" format(represented as int64 data type in JSON), also known as the webinar number."""  
    participants: Optional[int] = dataclasses.field(default=None)
    r"""Webinar participant count."""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Webinar start time."""  
    topic: Optional[str] = dataclasses.field(default=None)
    r"""Webinar topic."""  
    user_type: Optional[str] = dataclasses.field(default=None)
    r"""User type."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Webinar UUID."""  
    

@dataclasses.dataclass
class DashboardWebinars200ApplicationXML:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report in 'yyyy-mm-dd' format."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report in 'yyyy-mm-dd' format."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The number of all records available across pages."""  
    webinars: Optional[list[DashboardWebinars200ApplicationXMLWebinarMetrics]] = dataclasses.field(default=None)
    r"""Array of webinar objects."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardWebinars200ApplicationJSONWebinarMetricsCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Custom key associated with the Webinar."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom key associated with the Webinar."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardWebinars200ApplicationJSONWebinarMetrics:
    r"""Webinar metric details."""
    
    custom_keys: Optional[list[DashboardWebinars200ApplicationJSONWebinarMetricsCustomKeys]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_keys'), 'exclude': lambda f: f is None }})
    r"""Custom keys and values assigned to the Webinar."""  
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""Department of the host."""  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Webinar duration, formatted as hh:mm:ss, for example: `10:00` for ten minutes."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Webinar end time."""  
    has_3rd_party_audio: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_3rd_party_audio'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not TSP was used for the Webinar."""  
    has_pstn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_pstn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not PSTN was used for the Webinar."""  
    has_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_recording'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not recording was used for the Webinar."""  
    has_screen_share: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_screen_share'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not screen sharing was used for the Webinar."""  
    has_sip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_sip'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not SIP was used for the Webinar."""  
    has_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_video'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not video was used for the Webinar."""  
    has_voip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_voip'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not VoIP was used for the Webinar."""  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Webinar ID in \\"**long**\\" format(represented as int64 data type in JSON), also known as the webinar number."""  
    participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})
    r"""Webinar participant count."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Webinar start time."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Webinar topic."""  
    user_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_type'), 'exclude': lambda f: f is None }})
    r"""User type."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Webinar UUID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardWebinars200ApplicationJSON:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report in 'yyyy-mm-dd' format."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report in 'yyyy-mm-dd' format."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The number of all records available across pages."""  
    webinars: Optional[list[DashboardWebinars200ApplicationJSONWebinarMetrics]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webinars'), 'exclude': lambda f: f is None }})
    r"""Array of webinar objects."""  
    

@dataclasses.dataclass
class DashboardWebinarsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    dashboard_webinars_200_application_json_object: Optional[DashboardWebinars200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Meetings returned.<br>
    Only available for paid accounts that have enabled the Dashboard feature.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    