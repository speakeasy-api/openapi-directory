"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IntegralAdScienceDisplayViewabilityEnum(str, Enum):
    r"""Display Viewability section (applicable to display line items only)."""
    PERFORMANCE_VIEWABILITY_UNSPECIFIED = 'PERFORMANCE_VIEWABILITY_UNSPECIFIED'
    PERFORMANCE_VIEWABILITY_40 = 'PERFORMANCE_VIEWABILITY_40'
    PERFORMANCE_VIEWABILITY_50 = 'PERFORMANCE_VIEWABILITY_50'
    PERFORMANCE_VIEWABILITY_60 = 'PERFORMANCE_VIEWABILITY_60'
    PERFORMANCE_VIEWABILITY_70 = 'PERFORMANCE_VIEWABILITY_70'

class IntegralAdScienceExcludedAdFraudRiskEnum(str, Enum):
    r"""Ad Fraud settings."""
    SUSPICIOUS_ACTIVITY_UNSPECIFIED = 'SUSPICIOUS_ACTIVITY_UNSPECIFIED'
    SUSPICIOUS_ACTIVITY_HR = 'SUSPICIOUS_ACTIVITY_HR'
    SUSPICIOUS_ACTIVITY_HMR = 'SUSPICIOUS_ACTIVITY_HMR'

class IntegralAdScienceExcludedAdultRiskEnum(str, Enum):
    r"""Brand Safety - **Adult content**."""
    ADULT_UNSPECIFIED = 'ADULT_UNSPECIFIED'
    ADULT_HR = 'ADULT_HR'
    ADULT_HMR = 'ADULT_HMR'

class IntegralAdScienceExcludedAlcoholRiskEnum(str, Enum):
    r"""Brand Safety - **Alcohol**."""
    ALCOHOL_UNSPECIFIED = 'ALCOHOL_UNSPECIFIED'
    ALCOHOL_HR = 'ALCOHOL_HR'
    ALCOHOL_HMR = 'ALCOHOL_HMR'

class IntegralAdScienceExcludedDrugsRiskEnum(str, Enum):
    r"""Brand Safety - **Drugs**."""
    DRUGS_UNSPECIFIED = 'DRUGS_UNSPECIFIED'
    DRUGS_HR = 'DRUGS_HR'
    DRUGS_HMR = 'DRUGS_HMR'

class IntegralAdScienceExcludedGamblingRiskEnum(str, Enum):
    r"""Brand Safety - **Gambling**."""
    GAMBLING_UNSPECIFIED = 'GAMBLING_UNSPECIFIED'
    GAMBLING_HR = 'GAMBLING_HR'
    GAMBLING_HMR = 'GAMBLING_HMR'

class IntegralAdScienceExcludedHateSpeechRiskEnum(str, Enum):
    r"""Brand Safety - **Hate speech**."""
    HATE_SPEECH_UNSPECIFIED = 'HATE_SPEECH_UNSPECIFIED'
    HATE_SPEECH_HR = 'HATE_SPEECH_HR'
    HATE_SPEECH_HMR = 'HATE_SPEECH_HMR'

class IntegralAdScienceExcludedIllegalDownloadsRiskEnum(str, Enum):
    r"""Brand Safety - **Illegal downloads**."""
    ILLEGAL_DOWNLOADS_UNSPECIFIED = 'ILLEGAL_DOWNLOADS_UNSPECIFIED'
    ILLEGAL_DOWNLOADS_HR = 'ILLEGAL_DOWNLOADS_HR'
    ILLEGAL_DOWNLOADS_HMR = 'ILLEGAL_DOWNLOADS_HMR'

class IntegralAdScienceExcludedOffensiveLanguageRiskEnum(str, Enum):
    r"""Brand Safety - **Offensive language**."""
    OFFENSIVE_LANGUAGE_UNSPECIFIED = 'OFFENSIVE_LANGUAGE_UNSPECIFIED'
    OFFENSIVE_LANGUAGE_HR = 'OFFENSIVE_LANGUAGE_HR'
    OFFENSIVE_LANGUAGE_HMR = 'OFFENSIVE_LANGUAGE_HMR'

class IntegralAdScienceExcludedViolenceRiskEnum(str, Enum):
    r"""Brand Safety - **Violence**."""
    VIOLENCE_UNSPECIFIED = 'VIOLENCE_UNSPECIFIED'
    VIOLENCE_HR = 'VIOLENCE_HR'
    VIOLENCE_HMR = 'VIOLENCE_HMR'

class IntegralAdScienceTraqScoreOptionEnum(str, Enum):
    r"""True advertising quality (applicable to Display line items only)."""
    TRAQ_UNSPECIFIED = 'TRAQ_UNSPECIFIED'
    TRAQ_250 = 'TRAQ_250'
    TRAQ_500 = 'TRAQ_500'
    TRAQ_600 = 'TRAQ_600'
    TRAQ_700 = 'TRAQ_700'
    TRAQ_750 = 'TRAQ_750'
    TRAQ_875 = 'TRAQ_875'
    TRAQ_1000 = 'TRAQ_1000'

class IntegralAdScienceVideoViewabilityEnum(str, Enum):
    r"""Video Viewability Section (applicable to video line items only)."""
    VIDEO_VIEWABILITY_UNSPECIFIED = 'VIDEO_VIEWABILITY_UNSPECIFIED'
    VIDEO_VIEWABILITY_40 = 'VIDEO_VIEWABILITY_40'
    VIDEO_VIEWABILITY_50 = 'VIDEO_VIEWABILITY_50'
    VIDEO_VIEWABILITY_60 = 'VIDEO_VIEWABILITY_60'
    VIDEO_VIEWABILITY_70 = 'VIDEO_VIEWABILITY_70'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IntegralAdScience:
    r"""Details of Integral Ad Science settings."""
    
    custom_segment_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customSegmentId'), 'exclude': lambda f: f is None }})
    r"""The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive."""  
    display_viewability: Optional[IntegralAdScienceDisplayViewabilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayViewability'), 'exclude': lambda f: f is None }})
    r"""Display Viewability section (applicable to display line items only)."""  
    excluded_ad_fraud_risk: Optional[IntegralAdScienceExcludedAdFraudRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedAdFraudRisk'), 'exclude': lambda f: f is None }})
    r"""Ad Fraud settings."""  
    excluded_adult_risk: Optional[IntegralAdScienceExcludedAdultRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedAdultRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Adult content**."""  
    excluded_alcohol_risk: Optional[IntegralAdScienceExcludedAlcoholRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedAlcoholRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Alcohol**."""  
    excluded_drugs_risk: Optional[IntegralAdScienceExcludedDrugsRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedDrugsRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Drugs**."""  
    excluded_gambling_risk: Optional[IntegralAdScienceExcludedGamblingRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedGamblingRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Gambling**."""  
    excluded_hate_speech_risk: Optional[IntegralAdScienceExcludedHateSpeechRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedHateSpeechRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Hate speech**."""  
    excluded_illegal_downloads_risk: Optional[IntegralAdScienceExcludedIllegalDownloadsRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedIllegalDownloadsRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Illegal downloads**."""  
    excluded_offensive_language_risk: Optional[IntegralAdScienceExcludedOffensiveLanguageRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedOffensiveLanguageRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Offensive language**."""  
    excluded_violence_risk: Optional[IntegralAdScienceExcludedViolenceRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedViolenceRisk'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Violence**."""  
    exclude_unrateable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeUnrateable'), 'exclude': lambda f: f is None }})
    r"""Brand Safety - **Unrateable**."""  
    traq_score_option: Optional[IntegralAdScienceTraqScoreOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traqScoreOption'), 'exclude': lambda f: f is None }})
    r"""True advertising quality (applicable to Display line items only)."""  
    video_viewability: Optional[IntegralAdScienceVideoViewabilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoViewability'), 'exclude': lambda f: f is None }})
    r"""Video Viewability Section (applicable to video line items only)."""  
    