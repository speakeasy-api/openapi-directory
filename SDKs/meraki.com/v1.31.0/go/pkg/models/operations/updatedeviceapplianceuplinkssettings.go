// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateDeviceApplianceUplinksSettingsPathParams struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1PppoeAuthentication - Settings for PPPoE Authentication.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1PppoeAuthentication struct {
	// Whether PPPoE authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Password for PPPoE authentication. This parameter is not returned.
	Password *string `json:"password,omitempty"`
	// Username for PPPoE authentication.
	Username *string `json:"username,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1Pppoe - Configuration options for PPPoE.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1Pppoe struct {
	// Settings for PPPoE Authentication.
	Authentication *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1PppoeAuthentication `json:"authentication,omitempty"`
	// Whether PPPoE is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4 - IPv4 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4 struct {
	// IP address and subnet mask when in static mode.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Gateway IP address when in static mode.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6 - IPv6 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6 struct {
	// Static address that will override the one(s) received by SLAAC.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Static gateway that will override the one received by autoconf.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1Svis - SVI settings by protocol.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1Svis struct {
	// IPv4 settings for static/dynamic mode.
	Ipv4 *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv4 `json:"ipv4,omitempty"`
	// IPv6 settings for static/dynamic mode.
	Ipv6 *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1SvisIpv6 `json:"ipv6,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1VlanTagging - VLAN tagging settings.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1VlanTagging struct {
	// Whether VLAN tagging is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the VLAN to use for VLAN tagging.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1 - WAN 1 settings.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1 struct {
	// Enable or disable the interface.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration options for PPPoE.
	Pppoe *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1Pppoe `json:"pppoe,omitempty"`
	// SVI settings by protocol.
	Svis *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1Svis `json:"svis,omitempty"`
	// VLAN tagging settings.
	VlanTagging *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1VlanTagging `json:"vlanTagging,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2PppoeAuthentication - Settings for PPPoE Authentication.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2PppoeAuthentication struct {
	// Whether PPPoE authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Password for PPPoE authentication. This parameter is not returned.
	Password *string `json:"password,omitempty"`
	// Username for PPPoE authentication.
	Username *string `json:"username,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2Pppoe - Configuration options for PPPoE.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2Pppoe struct {
	// Settings for PPPoE Authentication.
	Authentication *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2PppoeAuthentication `json:"authentication,omitempty"`
	// Whether PPPoE is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4 - IPv4 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4 struct {
	// IP address and subnet mask when in static mode.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Gateway IP address when in static mode.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6 - IPv6 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6 struct {
	// Static address that will override the one(s) received by SLAAC.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Static gateway that will override the one received by autoconf.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2Svis - SVI settings by protocol.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2Svis struct {
	// IPv4 settings for static/dynamic mode.
	Ipv4 *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv4 `json:"ipv4,omitempty"`
	// IPv6 settings for static/dynamic mode.
	Ipv6 *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2SvisIpv6 `json:"ipv6,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2VlanTagging - VLAN tagging settings.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2VlanTagging struct {
	// Whether VLAN tagging is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the VLAN to use for VLAN tagging.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2 - WAN 2 settings.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2 struct {
	// Enable or disable the interface.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration options for PPPoE.
	Pppoe *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2Pppoe `json:"pppoe,omitempty"`
	// SVI settings by protocol.
	Svis *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2Svis `json:"svis,omitempty"`
	// VLAN tagging settings.
	VlanTagging *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2VlanTagging `json:"vlanTagging,omitempty"`
}

// UpdateDeviceApplianceUplinksSettingsRequestBodyInterfaces - Interface settings.
type UpdateDeviceApplianceUplinksSettingsRequestBodyInterfaces struct {
	// WAN 1 settings.
	Wan1 *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan1 `json:"wan1,omitempty"`
	// WAN 2 settings.
	Wan2 *UpdateDeviceApplianceUplinksSettingsRequestBodyInterfacesWan2 `json:"wan2,omitempty"`
}

type UpdateDeviceApplianceUplinksSettingsRequestBody struct {
	// Interface settings.
	Interfaces UpdateDeviceApplianceUplinksSettingsRequestBodyInterfaces `json:"interfaces"`
}

type UpdateDeviceApplianceUplinksSettingsRequest struct {
	PathParams UpdateDeviceApplianceUplinksSettingsPathParams
	Request    UpdateDeviceApplianceUplinksSettingsRequestBody `request:"mediaType=application/json"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication - Settings for PPPoE Authentication.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication struct {
	// Whether PPPoE authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Username for PPPoE authentication.
	Username *string `json:"username,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe - Configuration options for PPPoE.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe struct {
	// Settings for PPPoE Authentication.
	Authentication *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication `json:"authentication,omitempty"`
	// Whether PPPoE is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4 - IPv4 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4 struct {
	// IP address and subnet mask when in static mode.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Gateway IP address when in static mode.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6 - IPv6 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6 struct {
	// Static address that will override the one(s) received by SLAAC.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Static gateway that will override the one received by autoconf.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis - SVI settings by protocol.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis struct {
	// IPv4 settings for static/dynamic mode.
	Ipv4 *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4 `json:"ipv4,omitempty"`
	// IPv6 settings for static/dynamic mode.
	Ipv6 *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6 `json:"ipv6,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging - VLAN tagging settings.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging struct {
	// Whether VLAN tagging is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the VLAN to use for VLAN tagging.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1 - WAN 1 settings.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1 struct {
	// Enable or disable the interface.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration options for PPPoE.
	Pppoe *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe `json:"pppoe,omitempty"`
	// SVI settings by protocol.
	Svis *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis `json:"svis,omitempty"`
	// VLAN tagging settings.
	VlanTagging *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging `json:"vlanTagging,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication - Settings for PPPoE Authentication.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication struct {
	// Whether PPPoE authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Username for PPPoE authentication.
	Username *string `json:"username,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe - Configuration options for PPPoE.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe struct {
	// Settings for PPPoE Authentication.
	Authentication *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication `json:"authentication,omitempty"`
	// Whether PPPoE is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4 - IPv4 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4 struct {
	// IP address and subnet mask when in static mode.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Gateway IP address when in static mode.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum string

const (
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnumDynamic UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum = "dynamic"
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnumStatic  UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum = "static"
)

func (e *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum: %s", s)
	}
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers - The nameserver settings for this SVI.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6 - IPv6 settings for static/dynamic mode.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6 struct {
	// Static address that will override the one(s) received by SLAAC.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Static gateway that will override the one received by autoconf.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers `json:"nameservers,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis - SVI settings by protocol.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis struct {
	// IPv4 settings for static/dynamic mode.
	Ipv4 *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4 `json:"ipv4,omitempty"`
	// IPv6 settings for static/dynamic mode.
	Ipv6 *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6 `json:"ipv6,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging - VLAN tagging settings.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging struct {
	// Whether VLAN tagging is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the VLAN to use for VLAN tagging.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2 - WAN 2 settings.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2 struct {
	// Enable or disable the interface.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration options for PPPoE.
	Pppoe *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe `json:"pppoe,omitempty"`
	// SVI settings by protocol.
	Svis *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis `json:"svis,omitempty"`
	// VLAN tagging settings.
	VlanTagging *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging `json:"vlanTagging,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfaces - Interface settings.
type UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfaces struct {
	// WAN 1 settings.
	Wan1 *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1 `json:"wan1,omitempty"`
	// WAN 2 settings.
	Wan2 *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2 `json:"wan2,omitempty"`
}

// UpdateDeviceApplianceUplinksSettings200ApplicationJSON - Successful operation
type UpdateDeviceApplianceUplinksSettings200ApplicationJSON struct {
	// Interface settings.
	Interfaces *UpdateDeviceApplianceUplinksSettings200ApplicationJSONInterfaces `json:"interfaces,omitempty"`
}

type UpdateDeviceApplianceUplinksSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateDeviceApplianceUplinksSettings200ApplicationJSONObject *UpdateDeviceApplianceUplinksSettings200ApplicationJSON
}
