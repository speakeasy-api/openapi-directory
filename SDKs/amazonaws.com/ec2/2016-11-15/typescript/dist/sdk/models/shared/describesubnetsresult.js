"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeSubnetsResult = exports.DescribeSubnetsResultSubnets = exports.DescribeSubnetsResultSubnetsTags = exports.DescribeSubnetsResultSubnetsStateEnum = exports.DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch = exports.DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet = exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState = exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The state of a CIDR block.
 */
var DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum;
(function (DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) {
    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Associating"] = "associating";
    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Associated"] = "associated";
    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Disassociating"] = "disassociating";
    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Disassociated"] = "disassociated";
    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Failing"] = "failing";
    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Failed"] = "failed";
})(DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum || (exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = {}));
/**
 * The state of the CIDR block.
 */
var DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState = /** @class */ (function (_super) {
    __extends(DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState, _super);
    function DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState.prototype, "statusMessage", void 0);
    return DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState;
}(utils_1.SpeakeasyBase));
exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState = DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState;
/**
 * Describes an association between a subnet and an IPv6 CIDR block.
 */
var DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet = /** @class */ (function (_super) {
    __extends(DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet, _super);
    function DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet.prototype, "associationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet.prototype, "ipv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState)
    ], DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet.prototype, "ipv6CidrBlockState", void 0);
    return DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet;
}(utils_1.SpeakeasyBase));
exports.DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet = DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet;
/**
 * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
 */
var DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum;
(function (DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum) {
    DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum["IpName"] = "ip-name";
    DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum["ResourceName"] = "resource-name";
})(DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = exports.DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum || (exports.DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = {}));
/**
 * The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
 */
var DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch = /** @class */ (function (_super) {
    __extends(DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch, _super);
    function DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch.prototype, "enableResourceNameDnsAAAARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch.prototype, "enableResourceNameDnsARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch.prototype, "hostnameType", void 0);
    return DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch;
}(utils_1.SpeakeasyBase));
exports.DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch = DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch;
/**
 * The current state of the subnet.
 */
var DescribeSubnetsResultSubnetsStateEnum;
(function (DescribeSubnetsResultSubnetsStateEnum) {
    DescribeSubnetsResultSubnetsStateEnum["Pending"] = "pending";
    DescribeSubnetsResultSubnetsStateEnum["Available"] = "available";
})(DescribeSubnetsResultSubnetsStateEnum = exports.DescribeSubnetsResultSubnetsStateEnum || (exports.DescribeSubnetsResultSubnetsStateEnum = {}));
/**
 * Describes a tag.
 */
var DescribeSubnetsResultSubnetsTags = /** @class */ (function (_super) {
    __extends(DescribeSubnetsResultSubnetsTags, _super);
    function DescribeSubnetsResultSubnetsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnetsTags.prototype, "value", void 0);
    return DescribeSubnetsResultSubnetsTags;
}(utils_1.SpeakeasyBase));
exports.DescribeSubnetsResultSubnetsTags = DescribeSubnetsResultSubnetsTags;
/**
 * Describes a subnet.
 */
var DescribeSubnetsResultSubnets = /** @class */ (function (_super) {
    __extends(DescribeSubnetsResultSubnets, _super);
    function DescribeSubnetsResultSubnets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnets.prototype, "assignIpv6AddressOnCreation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "availabilityZone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "availabilityZoneId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeSubnetsResultSubnets.prototype, "availableIpAddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "customerOwnedIpv4Pool", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnets.prototype, "defaultForAz", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnets.prototype, "enableDns64", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeSubnetsResultSubnets.prototype, "enableLniAtDeviceIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet,
        }),
        __metadata("design:type", Array)
    ], DescribeSubnetsResultSubnets.prototype, "ipv6CidrBlockAssociationSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnets.prototype, "ipv6Native", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnets.prototype, "mapCustomerOwnedIpOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeSubnetsResultSubnets.prototype, "mapPublicIpOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "outpostArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeSubnetsResultSubnetsPrivateDnsNameOptionsOnLaunch)
    ], DescribeSubnetsResultSubnets.prototype, "privateDnsNameOptionsOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "subnetArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "subnetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeSubnetsResultSubnetsTags }),
        __metadata("design:type", Array)
    ], DescribeSubnetsResultSubnets.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResultSubnets.prototype, "vpcId", void 0);
    return DescribeSubnetsResultSubnets;
}(utils_1.SpeakeasyBase));
exports.DescribeSubnetsResultSubnets = DescribeSubnetsResultSubnets;
/**
 * Success
 */
var DescribeSubnetsResult = /** @class */ (function (_super) {
    __extends(DescribeSubnetsResult, _super);
    function DescribeSubnetsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeSubnetsResult.prototype, "nextToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeSubnetsResultSubnets }),
        __metadata("design:type", Array)
    ], DescribeSubnetsResult.prototype, "subnets", void 0);
    return DescribeSubnetsResult;
}(utils_1.SpeakeasyBase));
exports.DescribeSubnetsResult = DescribeSubnetsResult;
