"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Destiny2:
    r"""destiny2"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def destiny2_awa_get_action_token(self, request: operations.Destiny2AwaGetActionTokenRequest, security: operations.Destiny2AwaGetActionTokenSecurity) -> operations.Destiny2AwaGetActionTokenResponse:
        r"""Returns the action token if user approves the request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2AwaGetActionTokenRequest, base_url, '/Destiny2/Awa/GetActionToken/{correlationId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2AwaGetActionTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_awa_initialize_request(self) -> operations.Destiny2AwaInitializeRequestResponse:
        r"""Initialize a request to perform an advanced write action."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Awa/Initialize/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2AwaInitializeRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_awa_provide_authorization_result(self) -> operations.Destiny2AwaProvideAuthorizationResultResponse:
        r"""Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Awa/AwaProvideAuthorizationResult/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2AwaProvideAuthorizationResultResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_clear_loadout(self) -> operations.Destiny2ClearLoadoutResponse:
        r"""Clear the identifiers and items of a loadout."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Loadouts/ClearLoadout/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2ClearLoadoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_equip_item(self) -> operations.Destiny2EquipItemResponse:
        r"""Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/EquipItem/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2EquipItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_equip_items(self) -> operations.Destiny2EquipItemsResponse:
        r"""Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/EquipItems/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2EquipItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_equip_loadout(self) -> operations.Destiny2EquipLoadoutResponse:
        r"""Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Loadouts/EquipLoadout/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2EquipLoadoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_activity_history(self, request: operations.Destiny2GetActivityHistoryRequest) -> operations.Destiny2GetActivityHistoryResponse:
        r"""Gets activity history stats for indicated character."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetActivityHistoryRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetActivityHistoryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetActivityHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_character(self, request: operations.Destiny2GetCharacterRequest) -> operations.Destiny2GetCharacterResponse:
        r"""Returns character information for the supplied character."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetCharacterRequest, base_url, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetCharacterRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetCharacterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_clan_aggregate_stats(self, request: operations.Destiny2GetClanAggregateStatsRequest) -> operations.Destiny2GetClanAggregateStatsResponse:
        r"""Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetClanAggregateStatsRequest, base_url, '/Destiny2/Stats/AggregateClanStats/{groupId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetClanAggregateStatsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetClanAggregateStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_clan_banner_source(self) -> operations.Destiny2GetClanBannerSourceResponse:
        r"""Returns the dictionary of values for the Clan Banner"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Clan/ClanBannerDictionary/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetClanBannerSourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_clan_leaderboards(self, request: operations.Destiny2GetClanLeaderboardsRequest) -> operations.Destiny2GetClanLeaderboardsResponse:
        r"""Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetClanLeaderboardsRequest, base_url, '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetClanLeaderboardsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetClanLeaderboardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_clan_weekly_reward_state(self, request: operations.Destiny2GetClanWeeklyRewardStateRequest) -> operations.Destiny2GetClanWeeklyRewardStateResponse:
        r"""Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetClanWeeklyRewardStateRequest, base_url, '/Destiny2/Clan/{groupId}/WeeklyRewardState/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetClanWeeklyRewardStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_collectible_node_details(self, request: operations.Destiny2GetCollectibleNodeDetailsRequest) -> operations.Destiny2GetCollectibleNodeDetailsResponse:
        r"""Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetCollectibleNodeDetailsRequest, base_url, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetCollectibleNodeDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetCollectibleNodeDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_destiny_aggregate_activity_stats(self, request: operations.Destiny2GetDestinyAggregateActivityStatsRequest) -> operations.Destiny2GetDestinyAggregateActivityStatsResponse:
        r"""Gets all activities the character has participated in together with aggregate statistics for those activities."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetDestinyAggregateActivityStatsRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetDestinyAggregateActivityStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_destiny_entity_definition(self, request: operations.Destiny2GetDestinyEntityDefinitionRequest) -> operations.Destiny2GetDestinyEntityDefinitionResponse:
        r"""Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetDestinyEntityDefinitionRequest, base_url, '/Destiny2/Manifest/{entityType}/{hashIdentifier}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetDestinyEntityDefinitionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_destiny_manifest(self) -> operations.Destiny2GetDestinyManifestResponse:
        r"""Returns the current version of the manifest as a json object."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Manifest/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetDestinyManifestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_historical_stats(self, request: operations.Destiny2GetHistoricalStatsRequest) -> operations.Destiny2GetHistoricalStatsResponse:
        r"""Gets historical stats for indicated character."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetHistoricalStatsRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetHistoricalStatsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetHistoricalStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_historical_stats_definition(self) -> operations.Destiny2GetHistoricalStatsDefinitionResponse:
        r"""Gets historical stats definitions."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Stats/Definition/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetHistoricalStatsDefinitionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_historical_stats_for_account(self, request: operations.Destiny2GetHistoricalStatsForAccountRequest) -> operations.Destiny2GetHistoricalStatsForAccountResponse:
        r"""Gets aggregate historical stats organized around each character for a given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetHistoricalStatsForAccountRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetHistoricalStatsForAccountRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetHistoricalStatsForAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_item(self, request: operations.Destiny2GetItemRequest) -> operations.Destiny2GetItemResponse:
        r"""Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetItemRequest, base_url, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetItemRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_leaderboards(self, request: operations.Destiny2GetLeaderboardsRequest) -> operations.Destiny2GetLeaderboardsResponse:
        r"""Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetLeaderboardsRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetLeaderboardsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetLeaderboardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_leaderboards_for_character(self, request: operations.Destiny2GetLeaderboardsForCharacterRequest) -> operations.Destiny2GetLeaderboardsForCharacterResponse:
        r"""Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetLeaderboardsForCharacterRequest, base_url, '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetLeaderboardsForCharacterRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetLeaderboardsForCharacterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_linked_profiles(self, request: operations.Destiny2GetLinkedProfilesRequest) -> operations.Destiny2GetLinkedProfilesResponse:
        r"""Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetLinkedProfilesRequest, base_url, '/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetLinkedProfilesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetLinkedProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_post_game_carnage_report(self, request: operations.Destiny2GetPostGameCarnageReportRequest) -> operations.Destiny2GetPostGameCarnageReportResponse:
        r"""Gets the available post game carnage report for the activity ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetPostGameCarnageReportRequest, base_url, '/Destiny2/Stats/PostGameCarnageReport/{activityId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetPostGameCarnageReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_profile(self, request: operations.Destiny2GetProfileRequest) -> operations.Destiny2GetProfileResponse:
        r"""Returns Destiny Profile information for the supplied membership."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetProfileRequest, base_url, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetProfileRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_public_milestone_content(self, request: operations.Destiny2GetPublicMilestoneContentRequest) -> operations.Destiny2GetPublicMilestoneContentResponse:
        r"""Gets custom localized content for the milestone of the given hash, if it exists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetPublicMilestoneContentRequest, base_url, '/Destiny2/Milestones/{milestoneHash}/Content/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetPublicMilestoneContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_public_milestones(self) -> operations.Destiny2GetPublicMilestonesResponse:
        r"""Gets public information about currently available Milestones."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Milestones/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetPublicMilestonesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_public_vendors(self, request: operations.Destiny2GetPublicVendorsRequest) -> operations.Destiny2GetPublicVendorsResponse:
        r"""Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Vendors/'
        
        query_params = utils.get_query_params(operations.Destiny2GetPublicVendorsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetPublicVendorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_unique_weapon_history(self, request: operations.Destiny2GetUniqueWeaponHistoryRequest) -> operations.Destiny2GetUniqueWeaponHistoryResponse:
        r"""Gets details about unique weapon usage, including all exotic weapons."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetUniqueWeaponHistoryRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetUniqueWeaponHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_vendor(self, request: operations.Destiny2GetVendorRequest) -> operations.Destiny2GetVendorResponse:
        r"""Get the details of a specific Vendor."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetVendorRequest, base_url, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetVendorRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetVendorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_vendors(self, request: operations.Destiny2GetVendorsRequest) -> operations.Destiny2GetVendorsResponse:
        r"""Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetVendorsRequest, base_url, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetVendorsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetVendorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_insert_socket_plug(self) -> operations.Destiny2InsertSocketPlugResponse:
        r"""Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/InsertSocketPlug/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2InsertSocketPlugResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_insert_socket_plug_free(self) -> operations.Destiny2InsertSocketPlugFreeResponse:
        r"""Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/InsertSocketPlugFree/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2InsertSocketPlugFreeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_pull_from_postmaster(self) -> operations.Destiny2PullFromPostmasterResponse:
        r"""Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/PullFromPostmaster/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2PullFromPostmasterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_report_offensive_post_game_carnage_report_player(self, request: operations.Destiny2ReportOffensivePostGameCarnageReportPlayerRequest, security: operations.Destiny2ReportOffensivePostGameCarnageReportPlayerSecurity) -> operations.Destiny2ReportOffensivePostGameCarnageReportPlayerResponse:
        r"""Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2ReportOffensivePostGameCarnageReportPlayerRequest, base_url, '/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2ReportOffensivePostGameCarnageReportPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_search_destiny_entities(self, request: operations.Destiny2SearchDestinyEntitiesRequest) -> operations.Destiny2SearchDestinyEntitiesResponse:
        r"""Gets a page list of Destiny items."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2SearchDestinyEntitiesRequest, base_url, '/Destiny2/Armory/Search/{type}/{searchTerm}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2SearchDestinyEntitiesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2SearchDestinyEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_search_destiny_player_by_bungie_name(self, request: operations.Destiny2SearchDestinyPlayerByBungieNameRequest) -> operations.Destiny2SearchDestinyPlayerByBungieNameResponse:
        r"""Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2SearchDestinyPlayerByBungieNameRequest, base_url, '/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2SearchDestinyPlayerByBungieNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_set_item_lock_state(self) -> operations.Destiny2SetItemLockStateResponse:
        r"""Set the Lock State for an instanced item. You must have a valid Destiny Account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/SetLockState/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2SetItemLockStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_set_quest_tracked_state(self) -> operations.Destiny2SetQuestTrackedStateResponse:
        r"""Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it's an item."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/SetTrackedState/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2SetQuestTrackedStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_snapshot_loadout(self) -> operations.Destiny2SnapshotLoadoutResponse:
        r"""Snapshot a loadout with the currently equipped items."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Loadouts/SnapshotLoadout/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2SnapshotLoadoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_transfer_item(self) -> operations.Destiny2TransferItemResponse:
        r"""Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/TransferItem/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2TransferItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_update_loadout_identifiers(self) -> operations.Destiny2UpdateLoadoutIdentifiersResponse:
        r"""Update the color, icon, and name of a loadout."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2UpdateLoadoutIdentifiersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    