"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class EditChatbotMessageSecurity:
    
    client_credentials: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditChatbotMessageApplicationJSON:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages)."""  
    content: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""JSON template describing how the edited message should be displayed for the user. For more information please see our [\\"Send Message\\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request)."""  
    robot_jid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robot_jid') }})
    r"""Robot JID created when enabling chatbot features on your marketplace app."""  
    is_markdown_support: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_markdown_support'), 'exclude': lambda f: f is None }})
    r"""**Optional**<br>
    Enable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
    """  
    user_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_jid'), 'exclude': lambda f: f is None }})
    r"""**Optional**<br>
    The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
    """  
    

@dataclasses.dataclass
class EditChatbotMessageRequest:
    
    message_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'message_id', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot)."""  
    request_body: Optional[EditChatbotMessageApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class EditChatbotMessage200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK**<br>
    Message updated.
    """
    
    message_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique Identifier of the updated message,"""  
    robot_jid: Optional[str] = dataclasses.field(default=None)
    r"""The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard."""  
    sent_time: Optional[datetime] = dataclasses.field(default=None)
    r"""The date and time at which the message was sent."""  
    to_jid: Optional[str] = dataclasses.field(default=None)
    r"""The JID of the Channel or User to whom the message was sent."""  
    user_jid: Optional[str] = dataclasses.field(default=None)
    r"""The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditChatbotMessage200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK**<br>
    Message updated.
    """
    
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id'), 'exclude': lambda f: f is None }})
    r"""Unique Identifier of the updated message,"""  
    robot_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robot_jid'), 'exclude': lambda f: f is None }})
    r"""The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard."""  
    sent_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sent_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time at which the message was sent."""  
    to_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to_jid'), 'exclude': lambda f: f is None }})
    r"""The JID of the Channel or User to whom the message was sent."""  
    user_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_jid'), 'exclude': lambda f: f is None }})
    r"""The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel."""  
    

@dataclasses.dataclass
class EditChatbotMessageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    edit_chatbot_message_200_application_json_object: Optional[EditChatbotMessage200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK**<br>
    Message updated.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    