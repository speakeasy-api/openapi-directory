"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SubscriptionResponseEventTypeEnum(str, Enum):
    r"""Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`."""
    CONTACT_PROPERTY_CHANGE = 'contact.propertyChange'
    COMPANY_PROPERTY_CHANGE = 'company.propertyChange'
    DEAL_PROPERTY_CHANGE = 'deal.propertyChange'
    TICKET_PROPERTY_CHANGE = 'ticket.propertyChange'
    PRODUCT_PROPERTY_CHANGE = 'product.propertyChange'
    LINE_ITEM_PROPERTY_CHANGE = 'line_item.propertyChange'
    CONTACT_CREATION = 'contact.creation'
    CONTACT_DELETION = 'contact.deletion'
    CONTACT_PRIVACY_DELETION = 'contact.privacyDeletion'
    COMPANY_CREATION = 'company.creation'
    COMPANY_DELETION = 'company.deletion'
    DEAL_CREATION = 'deal.creation'
    DEAL_DELETION = 'deal.deletion'
    TICKET_CREATION = 'ticket.creation'
    TICKET_DELETION = 'ticket.deletion'
    PRODUCT_CREATION = 'product.creation'
    PRODUCT_DELETION = 'product.deletion'
    LINE_ITEM_CREATION = 'line_item.creation'
    LINE_ITEM_DELETION = 'line_item.deletion'
    CONVERSATION_CREATION = 'conversation.creation'
    CONVERSATION_DELETION = 'conversation.deletion'
    CONVERSATION_NEW_MESSAGE = 'conversation.newMessage'
    CONVERSATION_PRIVACY_DELETION = 'conversation.privacyDeletion'
    CONVERSATION_PROPERTY_CHANGE = 'conversation.propertyChange'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubscriptionResponse:
    r"""Complete details for an event subscription."""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Determines if the subscription is active or paused."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""When this subscription was created. Formatted as milliseconds from the [Unix epoch](#)."""  
    event_type: SubscriptionResponseEventTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType') }})
    r"""Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of the subscription."""  
    property_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyName'), 'exclude': lambda f: f is None }})
    r"""The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`."""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#)."""  
    