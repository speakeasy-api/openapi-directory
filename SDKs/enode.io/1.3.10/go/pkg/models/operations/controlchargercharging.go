// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ControlChargerChargingSecurity struct {
	UserAccessToken  *string `security:"scheme,type=oauth2,name=Authorization"`
	UserAccessToken1 *string `security:"scheme,type=oauth2,name=Authorization"`
}

// ControlChargerChargingRequestBodyActionEnum - Charging action to perform
type ControlChargerChargingRequestBodyActionEnum string

const (
	ControlChargerChargingRequestBodyActionEnumStart ControlChargerChargingRequestBodyActionEnum = "START"
	ControlChargerChargingRequestBodyActionEnumStop  ControlChargerChargingRequestBodyActionEnum = "STOP"
)

func (e *ControlChargerChargingRequestBodyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "START":
		fallthrough
	case "STOP":
		*e = ControlChargerChargingRequestBodyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ControlChargerChargingRequestBodyActionEnum: %s", s)
	}
}

type ControlChargerChargingRequestBody struct {
	// Charging action to perform
	Action ControlChargerChargingRequestBodyActionEnum `json:"action"`
}

type ControlChargerChargingRequest struct {
	RequestBody *ControlChargerChargingRequestBody `request:"mediaType=application/json"`
	// ID of the Charger
	ChargerID string `pathParam:"style=simple,explode=false,name=chargerId"`
}

type ControlChargerChargingResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
