/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Scenario {
    /**
     * For goals, the date that they should be achieved by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("achieve_date")
    public String achieveDate;
    public Scenario withAchieveDate(String achieveDate) {
        this.achieveDate = achieveDate;
        return this;
    }
    
    /**
     * The closing balance of the scenario.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_balance")
    public Double closingBalance;
    public Scenario withClosingBalance(Double closingBalance) {
        this.closingBalance = closingBalance;
        return this;
    }
    
    /**
     * The date of the closing balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_balance_date")
    public String closingBalanceDate;
    public Scenario withClosingBalanceDate(String closingBalanceDate) {
        this.closingBalanceDate = closingBalanceDate;
        return this;
    }
    
    /**
     * When the scenario was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Scenario withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The current balance of the scenario.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    public Double currentBalance;
    public Scenario withCurrentBalance(Double currentBalance) {
        this.currentBalance = currentBalance;
        return this;
    }
    
    /**
     * The date of the current balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_date")
    public String currentBalanceDate;
    public Scenario withCurrentBalanceDate(String currentBalanceDate) {
        this.currentBalanceDate = currentBalanceDate;
        return this;
    }
    
    /**
     * The exchange rate between the scenario's currency and the user's base currency, when different. If the currencies are the same, null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_exchange_rate")
    public Double currentBalanceExchangeRate;
    public Scenario withCurrentBalanceExchangeRate(Double currentBalanceExchangeRate) {
        this.currentBalanceExchangeRate = currentBalanceExchangeRate;
        return this;
    }
    
    /**
     * The current balance of the scenario in the user's base currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_in_base_currency")
    public Double currentBalanceInBaseCurrency;
    public Scenario withCurrentBalanceInBaseCurrency(Double currentBalanceInBaseCurrency) {
        this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
        return this;
    }
    
    /**
     * A short description of what the scenario is modelling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Scenario withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The unique identifier of the scenario.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Scenario withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The amount of interest to apply to the balance. Will apply periodically depending on what `interest_rate_repeat_id` is set to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interest_rate")
    public Double interestRate;
    public Scenario withInterestRate(Double interestRate) {
        this.interestRate = interestRate;
        return this;
    }
    
    /**
     * A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interest_rate_repeat_id")
    public Long interestRateRepeatId;
    public Scenario withInterestRateRepeatId(Long interestRateRepeatId) {
        this.interestRateRepeatId = interestRateRepeatId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximum-value")
    public Double maximumValue;
    public Scenario withMaximumValue(Double maximumValue) {
        this.maximumValue = maximumValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum-value")
    public Double minimumValue;
    public Scenario withMinimumValue(Double minimumValue) {
        this.minimumValue = minimumValue;
        return this;
    }
    
    /**
     * The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe_balance")
    public Double safeBalance;
    public Scenario withSafeBalance(Double safeBalance) {
        this.safeBalance = safeBalance;
        return this;
    }
    
    /**
     * The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe_balance_in_base_currency")
    public Double safeBalanceInBaseCurrency;
    public Scenario withSafeBalanceInBaseCurrency(Double safeBalanceInBaseCurrency) {
        this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
        return this;
    }
    
    /**
     * The starting balance of the scenario.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starting_balance")
    public Double startingBalance;
    public Scenario withStartingBalance(Double startingBalance) {
        this.startingBalance = startingBalance;
        return this;
    }
    
    /**
     * The date of the starting balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starting_balance_date")
    public String startingBalanceDate;
    public Scenario withStartingBalanceDate(String startingBalanceDate) {
        this.startingBalanceDate = startingBalanceDate;
        return this;
    }
    
    /**
     * The title of the scenario.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Scenario withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of the scenario.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ScenarioTypeEnum type;
    public Scenario withType(ScenarioTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * When the scenario was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public Scenario withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
