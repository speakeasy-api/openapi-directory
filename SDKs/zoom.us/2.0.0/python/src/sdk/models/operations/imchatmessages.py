"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ImChatMessagesRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    session_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'sessionId', 'style': 'simple', 'explode': False }})
    r"""IM chat session ID."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class ImChatMessages200ApplicationXMLMessages:
    
    action: Optional[str] = dataclasses.field(default=None)
    r"""IM chat message action."""  
    action_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Action time."""  
    date_time: Optional[datetime] = dataclasses.field(default=None)
    r"""IM chat message sent time."""  
    message: Optional[str] = dataclasses.field(default=None)
    r"""IM chat message content."""  
    sender: Optional[str] = dataclasses.field(default=None)
    r"""IM chat message sender."""  
    

@dataclasses.dataclass
class ImChatMessages200ApplicationXML:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date."""  
    messages: Optional[list[ImChatMessages200ApplicationXMLMessages]] = dataclasses.field(default=None)
    r"""Array of session objects."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The amount of records returns within a single API call."""  
    session_id: Optional[str] = dataclasses.field(default=None)
    r"""IM chat session ID."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImChatMessages200ApplicationJSONMessages:
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""IM chat message action."""  
    action_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Action time."""  
    date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""IM chat message sent time."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""IM chat message content."""  
    sender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sender'), 'exclude': lambda f: f is None }})
    r"""IM chat message sender."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImChatMessages200ApplicationJSON:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date."""  
    messages: Optional[list[ImChatMessages200ApplicationJSONMessages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Array of session objects."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The amount of records returns within a single API call."""  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session_id'), 'exclude': lambda f: f is None }})
    r"""IM chat session ID."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date."""  
    

@dataclasses.dataclass
class ImChatMessagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    im_chat_messages_200_application_json_object: Optional[ImChatMessages200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` <br>
    Archived IM chat messages returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    