// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WasteReductionCompostableFoodContainersAndCutleryExceptionEnum - Compostable food containers and cutlery exception.
type WasteReductionCompostableFoodContainersAndCutleryExceptionEnum string

const (
	WasteReductionCompostableFoodContainersAndCutleryExceptionEnumExceptionUnspecified WasteReductionCompostableFoodContainersAndCutleryExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionCompostableFoodContainersAndCutleryExceptionEnumUnderConstruction    WasteReductionCompostableFoodContainersAndCutleryExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionCompostableFoodContainersAndCutleryExceptionEnumDependentOnSeason    WasteReductionCompostableFoodContainersAndCutleryExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionCompostableFoodContainersAndCutleryExceptionEnumDependentOnDayOfWeek WasteReductionCompostableFoodContainersAndCutleryExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionCompostableFoodContainersAndCutleryExceptionEnum) ToPointer() *WasteReductionCompostableFoodContainersAndCutleryExceptionEnum {
	return &e
}

func (e *WasteReductionCompostableFoodContainersAndCutleryExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionCompostableFoodContainersAndCutleryExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionCompostableFoodContainersAndCutleryExceptionEnum: %v", v)
	}
}

// WasteReductionCompostsExcessFoodExceptionEnum - Composts excess food exception.
type WasteReductionCompostsExcessFoodExceptionEnum string

const (
	WasteReductionCompostsExcessFoodExceptionEnumExceptionUnspecified WasteReductionCompostsExcessFoodExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionCompostsExcessFoodExceptionEnumUnderConstruction    WasteReductionCompostsExcessFoodExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionCompostsExcessFoodExceptionEnumDependentOnSeason    WasteReductionCompostsExcessFoodExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionCompostsExcessFoodExceptionEnumDependentOnDayOfWeek WasteReductionCompostsExcessFoodExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionCompostsExcessFoodExceptionEnum) ToPointer() *WasteReductionCompostsExcessFoodExceptionEnum {
	return &e
}

func (e *WasteReductionCompostsExcessFoodExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionCompostsExcessFoodExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionCompostsExcessFoodExceptionEnum: %v", v)
	}
}

// WasteReductionDonatesExcessFoodExceptionEnum - Donates excess food exception.
type WasteReductionDonatesExcessFoodExceptionEnum string

const (
	WasteReductionDonatesExcessFoodExceptionEnumExceptionUnspecified WasteReductionDonatesExcessFoodExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionDonatesExcessFoodExceptionEnumUnderConstruction    WasteReductionDonatesExcessFoodExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionDonatesExcessFoodExceptionEnumDependentOnSeason    WasteReductionDonatesExcessFoodExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionDonatesExcessFoodExceptionEnumDependentOnDayOfWeek WasteReductionDonatesExcessFoodExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionDonatesExcessFoodExceptionEnum) ToPointer() *WasteReductionDonatesExcessFoodExceptionEnum {
	return &e
}

func (e *WasteReductionDonatesExcessFoodExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionDonatesExcessFoodExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionDonatesExcessFoodExceptionEnum: %v", v)
	}
}

// WasteReductionFoodWasteReductionProgramExceptionEnum - Food waste reduction program exception.
type WasteReductionFoodWasteReductionProgramExceptionEnum string

const (
	WasteReductionFoodWasteReductionProgramExceptionEnumExceptionUnspecified WasteReductionFoodWasteReductionProgramExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionFoodWasteReductionProgramExceptionEnumUnderConstruction    WasteReductionFoodWasteReductionProgramExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionFoodWasteReductionProgramExceptionEnumDependentOnSeason    WasteReductionFoodWasteReductionProgramExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionFoodWasteReductionProgramExceptionEnumDependentOnDayOfWeek WasteReductionFoodWasteReductionProgramExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionFoodWasteReductionProgramExceptionEnum) ToPointer() *WasteReductionFoodWasteReductionProgramExceptionEnum {
	return &e
}

func (e *WasteReductionFoodWasteReductionProgramExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionFoodWasteReductionProgramExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionFoodWasteReductionProgramExceptionEnum: %v", v)
	}
}

// WasteReductionNoSingleUsePlasticStrawsExceptionEnum - No single use plastic straws exception.
type WasteReductionNoSingleUsePlasticStrawsExceptionEnum string

const (
	WasteReductionNoSingleUsePlasticStrawsExceptionEnumExceptionUnspecified WasteReductionNoSingleUsePlasticStrawsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionNoSingleUsePlasticStrawsExceptionEnumUnderConstruction    WasteReductionNoSingleUsePlasticStrawsExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionNoSingleUsePlasticStrawsExceptionEnumDependentOnSeason    WasteReductionNoSingleUsePlasticStrawsExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionNoSingleUsePlasticStrawsExceptionEnumDependentOnDayOfWeek WasteReductionNoSingleUsePlasticStrawsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionNoSingleUsePlasticStrawsExceptionEnum) ToPointer() *WasteReductionNoSingleUsePlasticStrawsExceptionEnum {
	return &e
}

func (e *WasteReductionNoSingleUsePlasticStrawsExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionNoSingleUsePlasticStrawsExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionNoSingleUsePlasticStrawsExceptionEnum: %v", v)
	}
}

// WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum - No single use plastic water bottles exception.
type WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum string

const (
	WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnumExceptionUnspecified WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnumUnderConstruction    WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnumDependentOnSeason    WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnumDependentOnDayOfWeek WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum) ToPointer() *WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum {
	return &e
}

func (e *WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum: %v", v)
	}
}

// WasteReductionNoStyrofoamFoodContainersExceptionEnum - No styrofoam food containers exception.
type WasteReductionNoStyrofoamFoodContainersExceptionEnum string

const (
	WasteReductionNoStyrofoamFoodContainersExceptionEnumExceptionUnspecified WasteReductionNoStyrofoamFoodContainersExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionNoStyrofoamFoodContainersExceptionEnumUnderConstruction    WasteReductionNoStyrofoamFoodContainersExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionNoStyrofoamFoodContainersExceptionEnumDependentOnSeason    WasteReductionNoStyrofoamFoodContainersExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionNoStyrofoamFoodContainersExceptionEnumDependentOnDayOfWeek WasteReductionNoStyrofoamFoodContainersExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionNoStyrofoamFoodContainersExceptionEnum) ToPointer() *WasteReductionNoStyrofoamFoodContainersExceptionEnum {
	return &e
}

func (e *WasteReductionNoStyrofoamFoodContainersExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionNoStyrofoamFoodContainersExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionNoStyrofoamFoodContainersExceptionEnum: %v", v)
	}
}

// WasteReductionRecyclingProgramExceptionEnum - Recycling program exception.
type WasteReductionRecyclingProgramExceptionEnum string

const (
	WasteReductionRecyclingProgramExceptionEnumExceptionUnspecified WasteReductionRecyclingProgramExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionRecyclingProgramExceptionEnumUnderConstruction    WasteReductionRecyclingProgramExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionRecyclingProgramExceptionEnumDependentOnSeason    WasteReductionRecyclingProgramExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionRecyclingProgramExceptionEnumDependentOnDayOfWeek WasteReductionRecyclingProgramExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionRecyclingProgramExceptionEnum) ToPointer() *WasteReductionRecyclingProgramExceptionEnum {
	return &e
}

func (e *WasteReductionRecyclingProgramExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionRecyclingProgramExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionRecyclingProgramExceptionEnum: %v", v)
	}
}

// WasteReductionRefillableToiletryContainersExceptionEnum - Refillable toiletry containers exception.
type WasteReductionRefillableToiletryContainersExceptionEnum string

const (
	WasteReductionRefillableToiletryContainersExceptionEnumExceptionUnspecified WasteReductionRefillableToiletryContainersExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionRefillableToiletryContainersExceptionEnumUnderConstruction    WasteReductionRefillableToiletryContainersExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionRefillableToiletryContainersExceptionEnumDependentOnSeason    WasteReductionRefillableToiletryContainersExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionRefillableToiletryContainersExceptionEnumDependentOnDayOfWeek WasteReductionRefillableToiletryContainersExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionRefillableToiletryContainersExceptionEnum) ToPointer() *WasteReductionRefillableToiletryContainersExceptionEnum {
	return &e
}

func (e *WasteReductionRefillableToiletryContainersExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionRefillableToiletryContainersExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionRefillableToiletryContainersExceptionEnum: %v", v)
	}
}

// WasteReductionSafelyDisposesBatteriesExceptionEnum - Safely disposes batteries exception.
type WasteReductionSafelyDisposesBatteriesExceptionEnum string

const (
	WasteReductionSafelyDisposesBatteriesExceptionEnumExceptionUnspecified WasteReductionSafelyDisposesBatteriesExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionSafelyDisposesBatteriesExceptionEnumUnderConstruction    WasteReductionSafelyDisposesBatteriesExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionSafelyDisposesBatteriesExceptionEnumDependentOnSeason    WasteReductionSafelyDisposesBatteriesExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionSafelyDisposesBatteriesExceptionEnumDependentOnDayOfWeek WasteReductionSafelyDisposesBatteriesExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionSafelyDisposesBatteriesExceptionEnum) ToPointer() *WasteReductionSafelyDisposesBatteriesExceptionEnum {
	return &e
}

func (e *WasteReductionSafelyDisposesBatteriesExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionSafelyDisposesBatteriesExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionSafelyDisposesBatteriesExceptionEnum: %v", v)
	}
}

// WasteReductionSafelyDisposesElectronicsExceptionEnum - Safely disposes electronics exception.
type WasteReductionSafelyDisposesElectronicsExceptionEnum string

const (
	WasteReductionSafelyDisposesElectronicsExceptionEnumExceptionUnspecified WasteReductionSafelyDisposesElectronicsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionSafelyDisposesElectronicsExceptionEnumUnderConstruction    WasteReductionSafelyDisposesElectronicsExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionSafelyDisposesElectronicsExceptionEnumDependentOnSeason    WasteReductionSafelyDisposesElectronicsExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionSafelyDisposesElectronicsExceptionEnumDependentOnDayOfWeek WasteReductionSafelyDisposesElectronicsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionSafelyDisposesElectronicsExceptionEnum) ToPointer() *WasteReductionSafelyDisposesElectronicsExceptionEnum {
	return &e
}

func (e *WasteReductionSafelyDisposesElectronicsExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionSafelyDisposesElectronicsExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionSafelyDisposesElectronicsExceptionEnum: %v", v)
	}
}

// WasteReductionSafelyDisposesLightbulbsExceptionEnum - Safely disposes lightbulbs exception.
type WasteReductionSafelyDisposesLightbulbsExceptionEnum string

const (
	WasteReductionSafelyDisposesLightbulbsExceptionEnumExceptionUnspecified WasteReductionSafelyDisposesLightbulbsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionSafelyDisposesLightbulbsExceptionEnumUnderConstruction    WasteReductionSafelyDisposesLightbulbsExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionSafelyDisposesLightbulbsExceptionEnumDependentOnSeason    WasteReductionSafelyDisposesLightbulbsExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionSafelyDisposesLightbulbsExceptionEnumDependentOnDayOfWeek WasteReductionSafelyDisposesLightbulbsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionSafelyDisposesLightbulbsExceptionEnum) ToPointer() *WasteReductionSafelyDisposesLightbulbsExceptionEnum {
	return &e
}

func (e *WasteReductionSafelyDisposesLightbulbsExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionSafelyDisposesLightbulbsExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionSafelyDisposesLightbulbsExceptionEnum: %v", v)
	}
}

// WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum - Safely handles hazardous substances exception.
type WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum string

const (
	WasteReductionSafelyHandlesHazardousSubstancesExceptionEnumExceptionUnspecified WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionSafelyHandlesHazardousSubstancesExceptionEnumUnderConstruction    WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionSafelyHandlesHazardousSubstancesExceptionEnumDependentOnSeason    WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionSafelyHandlesHazardousSubstancesExceptionEnumDependentOnDayOfWeek WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum) ToPointer() *WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum {
	return &e
}

func (e *WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum: %v", v)
	}
}

// WasteReductionSoapDonationProgramExceptionEnum - Soap donation program exception.
type WasteReductionSoapDonationProgramExceptionEnum string

const (
	WasteReductionSoapDonationProgramExceptionEnumExceptionUnspecified WasteReductionSoapDonationProgramExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionSoapDonationProgramExceptionEnumUnderConstruction    WasteReductionSoapDonationProgramExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionSoapDonationProgramExceptionEnumDependentOnSeason    WasteReductionSoapDonationProgramExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionSoapDonationProgramExceptionEnumDependentOnDayOfWeek WasteReductionSoapDonationProgramExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionSoapDonationProgramExceptionEnum) ToPointer() *WasteReductionSoapDonationProgramExceptionEnum {
	return &e
}

func (e *WasteReductionSoapDonationProgramExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionSoapDonationProgramExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionSoapDonationProgramExceptionEnum: %v", v)
	}
}

// WasteReductionToiletryDonationProgramExceptionEnum - Toiletry donation program exception.
type WasteReductionToiletryDonationProgramExceptionEnum string

const (
	WasteReductionToiletryDonationProgramExceptionEnumExceptionUnspecified WasteReductionToiletryDonationProgramExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionToiletryDonationProgramExceptionEnumUnderConstruction    WasteReductionToiletryDonationProgramExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionToiletryDonationProgramExceptionEnumDependentOnSeason    WasteReductionToiletryDonationProgramExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionToiletryDonationProgramExceptionEnumDependentOnDayOfWeek WasteReductionToiletryDonationProgramExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionToiletryDonationProgramExceptionEnum) ToPointer() *WasteReductionToiletryDonationProgramExceptionEnum {
	return &e
}

func (e *WasteReductionToiletryDonationProgramExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionToiletryDonationProgramExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionToiletryDonationProgramExceptionEnum: %v", v)
	}
}

// WasteReductionWaterBottleFillingStationsExceptionEnum - Water bottle filling stations exception.
type WasteReductionWaterBottleFillingStationsExceptionEnum string

const (
	WasteReductionWaterBottleFillingStationsExceptionEnumExceptionUnspecified WasteReductionWaterBottleFillingStationsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	WasteReductionWaterBottleFillingStationsExceptionEnumUnderConstruction    WasteReductionWaterBottleFillingStationsExceptionEnum = "UNDER_CONSTRUCTION"
	WasteReductionWaterBottleFillingStationsExceptionEnumDependentOnSeason    WasteReductionWaterBottleFillingStationsExceptionEnum = "DEPENDENT_ON_SEASON"
	WasteReductionWaterBottleFillingStationsExceptionEnumDependentOnDayOfWeek WasteReductionWaterBottleFillingStationsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e WasteReductionWaterBottleFillingStationsExceptionEnum) ToPointer() *WasteReductionWaterBottleFillingStationsExceptionEnum {
	return &e
}

func (e *WasteReductionWaterBottleFillingStationsExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = WasteReductionWaterBottleFillingStationsExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WasteReductionWaterBottleFillingStationsExceptionEnum: %v", v)
	}
}

// WasteReduction - Waste reduction practices implemented at the hotel.
type WasteReduction struct {
	// Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are compostable, and reusable utensils are offered wherever possible. Compostable materials are capable of undergoing biological decomposition in a compost site, such that material is not visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and biomass.
	CompostableFoodContainersAndCutlery *bool `json:"compostableFoodContainersAndCutlery,omitempty"`
	// Compostable food containers and cutlery exception.
	CompostableFoodContainersAndCutleryException *WasteReductionCompostableFoodContainersAndCutleryExceptionEnum `json:"compostableFoodContainersAndCutleryException,omitempty"`
	// Composts excess food. The property has a program and/or policy for diverting waste from landfill by composting food and yard waste, either through compost collection and off-site processing or on-site compost processing.
	CompostsExcessFood *bool `json:"compostsExcessFood,omitempty"`
	// Composts excess food exception.
	CompostsExcessFoodException *WasteReductionCompostsExcessFoodExceptionEnum `json:"compostsExcessFoodException,omitempty"`
	// Donates excess food. The property has a program and/or policy for diverting waste from landfill that may include efforts to donate for human consumption or divert food for animal feed.
	DonatesExcessFood *bool `json:"donatesExcessFood,omitempty"`
	// Donates excess food exception.
	DonatesExcessFoodException *WasteReductionDonatesExcessFoodExceptionEnum `json:"donatesExcessFoodException,omitempty"`
	// Food waste reduction program. The property has established a food waste reduction and donation program, aiming to reduce food waste by half. These programs typically use tools such as the Hotel Kitchen Toolkit and others to track waste and measure progress.
	FoodWasteReductionProgram *bool `json:"foodWasteReductionProgram,omitempty"`
	// Food waste reduction program exception.
	FoodWasteReductionProgramException *WasteReductionFoodWasteReductionProgramExceptionEnum `json:"foodWasteReductionProgramException,omitempty"`
	// No single use plastic straws. The property bans single-use plastic straws.
	NoSingleUsePlasticStraws *bool `json:"noSingleUsePlasticStraws,omitempty"`
	// No single use plastic straws exception.
	NoSingleUsePlasticStrawsException *WasteReductionNoSingleUsePlasticStrawsExceptionEnum `json:"noSingleUsePlasticStrawsException,omitempty"`
	// No single use plastic water bottles. The property bans single-use plastic water bottles.
	NoSingleUsePlasticWaterBottles *bool `json:"noSingleUsePlasticWaterBottles,omitempty"`
	// No single use plastic water bottles exception.
	NoSingleUsePlasticWaterBottlesException *WasteReductionNoSingleUsePlasticWaterBottlesExceptionEnum `json:"noSingleUsePlasticWaterBottlesException,omitempty"`
	// No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food service items.
	NoStyrofoamFoodContainers *bool `json:"noStyrofoamFoodContainers,omitempty"`
	// No styrofoam food containers exception.
	NoStyrofoamFoodContainersException *WasteReductionNoStyrofoamFoodContainersExceptionEnum `json:"noStyrofoamFoodContainersException,omitempty"`
	// Recycling program. The property has a recycling program, aligned with LEED waste requirements, and a policy outlining efforts to send less than 50% of waste to landfill. The recycling program includes storage locations for recyclable materials, including mixed paper, corrugated cardboard, glass, plastics, and metals.
	RecyclingProgram *bool `json:"recyclingProgram,omitempty"`
	// Recycling program exception.
	RecyclingProgramException *WasteReductionRecyclingProgramExceptionEnum `json:"recyclingProgramException,omitempty"`
	// Refillable toiletry containers. The property has replaced miniature individual containers with refillable amenity dispensers for shampoo, conditioner, soap, and lotion.
	RefillableToiletryContainers *bool `json:"refillableToiletryContainers,omitempty"`
	// Refillable toiletry containers exception.
	RefillableToiletryContainersException *WasteReductionRefillableToiletryContainersExceptionEnum `json:"refillableToiletryContainersException,omitempty"`
	// Safely disposes batteries. The property safely stores and disposes batteries.
	SafelyDisposesBatteries *bool `json:"safelyDisposesBatteries,omitempty"`
	// Safely disposes batteries exception.
	SafelyDisposesBatteriesException *WasteReductionSafelyDisposesBatteriesExceptionEnum `json:"safelyDisposesBatteriesException,omitempty"`
	// Safely disposes electronics. The property has a reputable recycling program that keeps hazardous electronic parts and chemical compounds out of landfills, dumps and other unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified electronics recyclers).
	SafelyDisposesElectronics *bool `json:"safelyDisposesElectronics,omitempty"`
	// Safely disposes electronics exception.
	SafelyDisposesElectronicsException *WasteReductionSafelyDisposesElectronicsExceptionEnum `json:"safelyDisposesElectronicsException,omitempty"`
	// Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.
	SafelyDisposesLightbulbs *bool `json:"safelyDisposesLightbulbs,omitempty"`
	// Safely disposes lightbulbs exception.
	SafelyDisposesLightbulbsException *WasteReductionSafelyDisposesLightbulbsExceptionEnum `json:"safelyDisposesLightbulbsException,omitempty"`
	// Safely handles hazardous substances. The property has a hazardous waste management program aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for hazardous waste disposal and recycling. Hazardous means substances that are classified as "hazardous" by an authoritative body (such as OSHA or DOT), are labeled with signal words such as "Danger," "Caution," "Warning," or are flammable, corrosive, or ignitable. Requirements include: - The property shall maintain records of the efforts it has made to replace the hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool maintenance shall be stored in clearly labeled containers. These containers shall be checked regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed to collect spills, drips, or leaching of chemicals.
	SafelyHandlesHazardousSubstances *bool `json:"safelyHandlesHazardousSubstances,omitempty"`
	// Safely handles hazardous substances exception.
	SafelyHandlesHazardousSubstancesException *WasteReductionSafelyHandlesHazardousSubstancesExceptionEnum `json:"safelyHandlesHazardousSubstancesException,omitempty"`
	// Soap donation program. The property participates in a soap donation program such as Clean the World or something similar.
	SoapDonationProgram *bool `json:"soapDonationProgram,omitempty"`
	// Soap donation program exception.
	SoapDonationProgramException *WasteReductionSoapDonationProgramExceptionEnum `json:"soapDonationProgramException,omitempty"`
	// Toiletry donation program. The property participates in a toiletry donation program such as Clean the World or something similar.
	ToiletryDonationProgram *bool `json:"toiletryDonationProgram,omitempty"`
	// Toiletry donation program exception.
	ToiletryDonationProgramException *WasteReductionToiletryDonationProgramExceptionEnum `json:"toiletryDonationProgramException,omitempty"`
	// Water bottle filling stations. The property offers water stations throughout the building for guest use.
	WaterBottleFillingStations *bool `json:"waterBottleFillingStations,omitempty"`
	// Water bottle filling stations exception.
	WaterBottleFillingStationsException *WasteReductionWaterBottleFillingStationsExceptionEnum `json:"waterBottleFillingStationsException,omitempty"`
}
