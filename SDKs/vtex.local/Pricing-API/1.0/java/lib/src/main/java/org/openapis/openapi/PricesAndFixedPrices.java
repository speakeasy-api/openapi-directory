/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class PricesAndFixedPrices {
	
    /**
	 * GET_COMPUTED_PRICEBYPRICETABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] GET_COMPUTED_PRICEBYPRICETABLE_SERVERS = {
        "https://api.vtex.com/{account}/pricing",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PricesAndFixedPrices(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create or Update Base Price or Fixed Prices
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.
     * 
     *  &lt;p&gt; You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula &lt;code&gt;costPrice * (1 + markup) = basePrice&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Request body example&lt;/h2&gt;
     * 
     * ```json
     * {
     *     "markup": 30,
     *     "basePrice": 100,
     *     "listPrice": 35,
     *     "fixedPrices": [
     *         {
     *             "tradePolicyId": "1",
     *             "value": 31,
     *             "listPrice": 32,
     *             "minQuantity": 1,
     *             "dateRange": {
     *                 "from": "2022-05-21T22:00:00Z",
     *                 "to": "2023-05-28T22:00:00Z"
     *             }
     *         },
     *         {
     *             "tradePolicyId": "1",
     *             "value": 31.5,
     *             "listPrice": 33,
     *             "minQuantity": 2
     *         }
     *     ]
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUpdatePriceOrFixedPriceResponse createUpdatePriceOrFixedPrice(org.openapis.openapi.models.operations.CreateUpdatePriceOrFixedPriceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUpdatePriceOrFixedPriceRequest.class, baseUrl, "/pricing/prices/{itemId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUpdatePriceOrFixedPriceResponse res = new org.openapis.openapi.models.operations.CreateUpdatePriceOrFixedPriceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Delete Price
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeletePriceResponse deletePrice(org.openapis.openapi.models.operations.DeletePriceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeletePriceRequest.class, baseUrl, "/pricing/prices/{itemId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeletePriceResponse res = new org.openapis.openapi.models.operations.DeletePriceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Delete Fixed Prices on a price table or trade policy
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeletefixedpricesonapricetableortradepolicyResponse deletefixedpricesonapricetableortradepolicy(org.openapis.openapi.models.operations.DeletefixedpricesonapricetableortradepolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeletefixedpricesonapricetableortradepolicyRequest.class, baseUrl, "/pricing/prices/{itemId}/fixed/{priceTableId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeletefixedpricesonapricetableortradepolicyResponse res = new org.openapis.openapi.models.operations.DeletefixedpricesonapricetableortradepolicyResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Get Computed Price by price table or trade policy
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy. 
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "tradePolicyId": "1",
     *     "listPrice": 30,
     *     "costPrice": 76.92,
     *     "sellingPrice": 18.9,
     *     "priceValidUntil": "2018-12-20T18:12:14Z"
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetComputedPricebypricetableResponse getComputedPricebypricetable(org.openapis.openapi.models.operations.GetComputedPricebypricetableRequest request) throws Exception {
        return this.getComputedPricebypricetable(request, null);
    }

    /**
     * Get Computed Price by price table or trade policy
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy. 
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "tradePolicyId": "1",
     *     "listPrice": 30,
     *     "costPrice": 76.92,
     *     "sellingPrice": 18.9,
     *     "priceValidUntil": "2018-12-20T18:12:14Z"
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetComputedPricebypricetableResponse getComputedPricebypricetable(org.openapis.openapi.models.operations.GetComputedPricebypricetableRequest request, String serverURL) throws Exception {
        String baseUrl = GET_COMPUTED_PRICEBYPRICETABLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetComputedPricebypricetableRequest.class, baseUrl, "/pricing/prices/{itemId}/computed/{priceTableId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetComputedPricebypricetableRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetComputedPricebypricetableResponse res = new org.openapis.openapi.models.operations.GetComputedPricebypricetableResponse(contentType, httpRes.statusCode()) {{
            getcomputedprice = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json; charset=utf-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Getcomputedprice out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Getcomputedprice.class);
                res.getcomputedprice = out;
            }
        }

        return res;
    }

    /**
     * Get Fixed Prices
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.
     * 
     *  The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.
     * 
     *  Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).
     * 
     *  Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).
     * 
     *  ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "6",
     *         "value": 20.9,
     *         "listPrice": 22.9,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-03:00"
     *         }
     *     },
     *     {
     *         "tradePolicyId": "1",
     *         "value": 18.9,
     *         "listPrice": null,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-03:00"
     *         }
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFixedPricesResponse getFixedPrices(org.openapis.openapi.models.operations.GetFixedPricesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFixedPricesRequest.class, baseUrl, "/pricing/prices/{itemId}/fixed", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFixedPricesResponse res = new org.openapis.openapi.models.operations.GetFixedPricesResponse(contentType, httpRes.statusCode()) {{
            fixedPrices = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json; charset=utf-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FixedPrice[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FixedPrice[].class);
                res.fixedPrices = out;
            }
        }

        return res;
    }

    /**
     * Get Fixed Prices on a price table or trade policy
     * Retrieves all Fixed Prices on a price table or trade policy. 
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "6",
     *         "value": 20.9,
     *         "listPrice": 22.9,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-04:00"
     *         }
     *     },
     *     {
     *         "tradePolicyId": "1",
     *         "value": 18.9,
     *         "listPrice": null,
     *         "minQuantity": 1
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFixedPricesonapricetableResponse getFixedPricesonapricetable(org.openapis.openapi.models.operations.GetFixedPricesonapricetableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFixedPricesonapricetableRequest.class, baseUrl, "/pricing/prices/{itemId}/fixed/{priceTableId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFixedPricesonapricetableResponse res = new org.openapis.openapi.models.operations.GetFixedPricesonapricetableResponse(contentType, httpRes.statusCode()) {{
            fixedPrices = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json; charset=utf-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FixedPrice[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FixedPrice[].class);
                res.fixedPrices = out;
            }
        }

        return res;
    }

    /**
     * Get Price
     * Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.
     * 
     *  ## Response body example
     * 
     * ```json
     * {
     *     "itemId": "1",
     *     "listPrice": 50,
     *     "costPrice": 90,
     *     "markup": 30,
     *     "basePrice": 117,
     *     "fixedPrices": [
     *         {
     *             "tradePolicyId": "1",
     *             "value": 50.5,
     *             "listPrice": 50.5,
     *             "minQuantity": 2,
     *             "dateRange": {
     *                 "from": "2021-12-31T01:00:00Z",
     *                 "to": "2022-12-31T01:00:00Z"
     *             }
     *         },
     *         {
     *             "tradePolicyId": "2",
     *             "value": 30,
     *             "listPrice": 50,
     *             "minQuantity": 2
     *         }
     *     ]
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetPriceResponse getPrice(org.openapis.openapi.models.operations.GetPriceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetPriceRequest.class, baseUrl, "/pricing/prices/{itemId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetPriceResponse res = new org.openapis.openapi.models.operations.GetPriceResponse(contentType, httpRes.statusCode()) {{
            getprice = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Getprice out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Getprice.class);
                res.getprice = out;
            }
        }

        return res;
    }

    /**
     * Create or Update Fixed Prices on a price table or trade policy
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.
     * 
     *  ## Request body example
     * 
     * ```json
     * [
     *   {
     *     "value": 50.5,
     *     "listPrice": 50.5,
     *     "minQuantity": 2,
     *     "dateRange": {
     *       "from": "2021-12-30T22:00:00-03:00",
     *       "to": "2021-12-30T22:00:00-04:00"
     *     }
     *   }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse createorupdatefixedpricesonpricetableortradepolicy(org.openapis.openapi.models.operations.CreateorupdatefixedpricesonpricetableortradepolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateorupdatefixedpricesonpricetableortradepolicyRequest.class, baseUrl, "/pricing/prices/{itemId}/fixed/{priceTableId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse res = new org.openapis.openapi.models.operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}