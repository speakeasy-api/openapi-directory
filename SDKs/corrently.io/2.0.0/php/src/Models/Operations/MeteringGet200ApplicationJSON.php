<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * MeteringGet200ApplicationJSON - Success
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class MeteringGet200ApplicationJSON
{
    /**
     * Reading as provided as input in Wh
     * 
     * @var ?int $one80
     */
	#[\JMS\Serializer\Annotation\SerializedName('1.8.0')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $one80 = null;
    
    /**
     * Green energy calculated using Green Power Index (GrünstromIndex) in Wh
     * 
     * @var ?int $one81
     */
	#[\JMS\Serializer\Annotation\SerializedName('1.8.1')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $one81 = null;
    
    /**
     * Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
     * 
     * @var ?int $one82
     */
	#[\JMS\Serializer\Annotation\SerializedName('1.8.2')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $one82 = null;
    
    /**
     * Time this reading got imported into consensus (e.q. signed timestamp).
     * 
     * @var ?int $processingTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('_processingTime')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $processingTime = null;
    
    /**
     * Stromkonto/Metering address allocated (this is not the MELOID!)
     * 
     * @var ?string $account
     */
	#[\JMS\Serializer\Annotation\SerializedName('account')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $account = null;
    
    /**
     * CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
     * 
     * @var ?int $co2GOekostrom
     */
	#[\JMS\Serializer\Annotation\SerializedName('co2_g_oekostrom')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $co2GOekostrom = null;
    
    /**
     * CO2 Emission of metered energy in a standard mix
     * 
     * @var ?int $co2GStandard
     */
	#[\JMS\Serializer\Annotation\SerializedName('co2_g_standard')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $co2GStandard = null;
    
    /**
     * Update credits this meter has. Gets refilled automtically to prevent too frequent updates
     * 
     * @var mixed $credits
     */
	#[\JMS\Serializer\Annotation\SerializedName('credits')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $credits = null;
    
    /**
     * API Consensus time this reading was fully received
     * 
     * @var ?int $timeStamp
     */
	#[\JMS\Serializer\Annotation\SerializedName('timeStamp')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $timeStamp = null;
    
    /**
     * Time to Live for this reader. If no update is provided it gets decommissioned.
     * 
     * @var ?int $ttl
     */
	#[\JMS\Serializer\Annotation\SerializedName('ttl')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $ttl = null;
    
	public function __construct()
	{
		$this->one80 = null;
		$this->one81 = null;
		$this->one82 = null;
		$this->processingTime = null;
		$this->account = null;
		$this->co2GOekostrom = null;
		$this->co2GStandard = null;
		$this->credits = null;
		$this->timeStamp = null;
		$this->ttl = null;
	}
}
