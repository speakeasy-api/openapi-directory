// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCommitXAmzTargetEnum
type CreateCommitXAmzTargetEnum string

const (
	CreateCommitXAmzTargetEnumCodeCommit20150413CreateCommit CreateCommitXAmzTargetEnum = "CodeCommit_20150413.CreateCommit"
)

func (e *CreateCommitXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.CreateCommit":
		*e = CreateCommitXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCommitXAmzTargetEnum: %s", s)
	}
}

type CreateCommitRequest struct {
	CreateCommitInput shared.CreateCommitInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateCommitXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateCommitResponse struct {
	// BranchDoesNotExistException
	BranchDoesNotExistException interface{}
	// BranchNameIsTagNameException
	BranchNameIsTagNameException interface{}
	// BranchNameRequiredException
	BranchNameRequiredException interface{}
	// CommitMessageLengthExceededException
	CommitMessageLengthExceededException interface{}
	ContentType                          string
	// Success
	CreateCommitOutput *shared.CreateCommitOutput
	// DirectoryNameConflictsWithFileNameException
	DirectoryNameConflictsWithFileNameException interface{}
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// FileContentAndSourceFileSpecifiedException
	FileContentAndSourceFileSpecifiedException interface{}
	// FileContentSizeLimitExceededException
	FileContentSizeLimitExceededException interface{}
	// FileDoesNotExistException
	FileDoesNotExistException interface{}
	// FileEntryRequiredException
	FileEntryRequiredException interface{}
	// FileModeRequiredException
	FileModeRequiredException interface{}
	// FileNameConflictsWithDirectoryNameException
	FileNameConflictsWithDirectoryNameException interface{}
	// FilePathConflictsWithSubmodulePathException
	FilePathConflictsWithSubmodulePathException interface{}
	// FolderContentSizeLimitExceededException
	FolderContentSizeLimitExceededException interface{}
	// InvalidBranchNameException
	InvalidBranchNameException interface{}
	// InvalidDeletionParameterException
	InvalidDeletionParameterException interface{}
	// InvalidEmailException
	InvalidEmailException interface{}
	// InvalidFileModeException
	InvalidFileModeException interface{}
	// InvalidParentCommitIdException
	InvalidParentCommitIDException interface{}
	// InvalidPathException
	InvalidPathException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// MaximumFileEntriesExceededException
	MaximumFileEntriesExceededException interface{}
	// NameLengthExceededException
	NameLengthExceededException interface{}
	// NoChangeException
	NoChangeException interface{}
	// ParentCommitDoesNotExistException
	ParentCommitDoesNotExistException interface{}
	// ParentCommitIdOutdatedException
	ParentCommitIDOutdatedException interface{}
	// ParentCommitIdRequiredException
	ParentCommitIDRequiredException interface{}
	// PathRequiredException
	PathRequiredException interface{}
	// PutFileEntryConflictException
	PutFileEntryConflictException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	// RestrictedSourceFileException
	RestrictedSourceFileException interface{}
	// SamePathRequestException
	SamePathRequestException interface{}
	// SourceFileOrContentRequiredException
	SourceFileOrContentRequiredException interface{}
	StatusCode                           int
	RawResponse                          *http.Response
}
