<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Image
{
    /**
     * Allows to define a color (or a range of colors) that will be converted to transparent
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImageChromaKey $chromaKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('chroma-key')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ImageChromaKey')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImageChromaKey $chromaKey = null;
    
    /**
     * Crops the element
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImageCrop $crop
     */
	#[\JMS\Serializer\Annotation\SerializedName('crop')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ImageCrop')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImageCrop $crop = null;
    
    /**
     * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImagePanEnum $pan
     */
	#[\JMS\Serializer\Annotation\SerializedName('pan')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ImagePanEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImagePanEnum $pan = null;
    
    /**
     * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImagePositionEnum $position
     */
	#[\JMS\Serializer\Annotation\SerializedName('position')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ImagePositionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImagePositionEnum $position = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('rotate')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ImageRotate')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImageRotate $rotate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('scale')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ImageScale')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImageScale $scale = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('src')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $src = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ImageTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImageTypeEnum $type = null;
    
    /**
     * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
     * 
     * @var ?float $x
     */
	#[\JMS\Serializer\Annotation\SerializedName('x')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $x = null;
    
    /**
     * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
     * 
     * @var ?float $y
     */
	#[\JMS\Serializer\Annotation\SerializedName('y')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $y = null;
    
    /**
     * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
     * 
     * @var ?int $zoom
     */
	#[\JMS\Serializer\Annotation\SerializedName('zoom')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $zoom = null;
    
	public function __construct()
	{
		$this->chromaKey = null;
		$this->crop = null;
		$this->pan = null;
		$this->position = null;
		$this->rotate = null;
		$this->scale = null;
		$this->src = null;
		$this->type = null;
		$this->x = null;
		$this->y = null;
		$this->zoom = null;
	}
}
