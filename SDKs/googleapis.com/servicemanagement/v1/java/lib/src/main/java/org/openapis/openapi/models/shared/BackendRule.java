/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BackendRule - A backend rule provides configuration for an individual API element.
 */
public class BackendRule {
    /**
     * The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public BackendRule withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deadline")
    public Double deadline;

    public BackendRule withDeadline(Double deadline) {
        this.deadline = deadline;
        return this;
    }
    
    /**
     * When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableAuth")
    public Boolean disableAuth;

    public BackendRule withDisableAuth(Boolean disableAuth) {
        this.disableAuth = disableAuth;
        return this;
    }
    
    /**
     * The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAudience")
    public String jwtAudience;

    public BackendRule withJwtAudience(String jwtAudience) {
        this.jwtAudience = jwtAudience;
        return this;
    }
    
    /**
     * Deprecated, do not use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minDeadline")
    public Double minDeadline;

    public BackendRule withMinDeadline(Double minDeadline) {
        this.minDeadline = minDeadline;
        return this;
    }
    
    /**
     * The number of seconds to wait for the completion of a long running operation. The default is no deadline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationDeadline")
    public Double operationDeadline;

    public BackendRule withOperationDeadline(Double operationDeadline) {
        this.operationDeadline = operationDeadline;
        return this;
    }
    
    /**
     * The map between request protocol and the backend address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overridesByRequestProtocol")
    public java.util.Map<String, BackendRule> overridesByRequestProtocol;

    public BackendRule withOverridesByRequestProtocol(java.util.Map<String, BackendRule> overridesByRequestProtocol) {
        this.overridesByRequestProtocol = overridesByRequestProtocol;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pathTranslation")
    public BackendRulePathTranslationEnum pathTranslation;

    public BackendRule withPathTranslation(BackendRulePathTranslationEnum pathTranslation) {
        this.pathTranslation = pathTranslation;
        return this;
    }
    
    /**
     * The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;

    public BackendRule withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * Selects the methods to which this rule applies. Refer to selector for syntax details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selector")
    public String selector;

    public BackendRule withSelector(String selector) {
        this.selector = selector;
        return this;
    }
    
    public BackendRule(){}
}
