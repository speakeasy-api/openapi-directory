"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Any, Optional

class InvitationClientManagementEnum(str, Enum):
    NO = 'no'
    MANAGER = 'manager'
    ADN = 'adn'

class InvitationCodeMethod3TypeEnum(str, Enum):
    SMS = 'SMS'


@dataclasses.dataclass
class InvitationCodeMethod3:
    
    type: Optional[InvitationCodeMethod3TypeEnum] = dataclasses.field(default=None)  
    
class InvitationCodeMethod2TypeEnum(str, Enum):
    PAYSLIP = 'payslip'


@dataclasses.dataclass
class InvitationCodeMethod2:
    
    month: Optional[str] = dataclasses.field(default=None)  
    type: Optional[InvitationCodeMethod2TypeEnum] = dataclasses.field(default=None)  
    
class InvitationCodeMethod1TypeEnum(str, Enum):
    MANUAL = 'manual'


@dataclasses.dataclass
class InvitationCodeMethod1:
    
    code: Optional[str] = dataclasses.field(default=None)  
    type: Optional[InvitationCodeMethod1TypeEnum] = dataclasses.field(default=None)  
    
class InvitationFoldersRightEnum(str, Enum):
    READ = 'read'
    WRITE = 'write'


@dataclasses.dataclass
class InvitationFolders:
    
    id: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    right: Optional[InvitationFoldersRightEnum] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class InvitationGroups:
    
    end_date: Optional[str] = dataclasses.field(default=None)  
    id: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    
class InvitationLinkMethodTypeEnum(str, Enum):
    POSTAL = 'Postal'
    EMAIL = 'Email'


@dataclasses.dataclass
class InvitationLinkMethod:
    
    type: Optional[InvitationLinkMethodTypeEnum] = dataclasses.field(default=None)  
    
class InvitationPlayerEnum(str, Enum):
    GUEST = 'guest'
    OWNER = 'owner'
    MANAGER = 'manager'
    ASSISTANT = 'assistant'
    COLLABORATOR = 'collaborator'

class InvitationStatusEnum(str, Enum):
    SENT = 'sent'
    ACCEPTED = 'accepted'
    REFUSED = 'refused'
    EXPIRED = 'expired'
    FINISHED = 'finished'
    WAITING_FOR_VALIDATION = 'waiting for validation'
    WAITING_FOR_PASSWORD_AND_USERID = 'waiting for password and userid'
    WAITING_FOR_LOGIN = 'waiting for login'
    NOT_SENT = 'not sent'
    WAITING_FOR_INVITATION = 'waiting for invitation'


@dataclasses.dataclass
class Invitation:
    r"""Automatically created"""
    
    client_management: Optional[InvitationClientManagementEnum] = dataclasses.field(default=None)  
    code_method: Optional[Any] = dataclasses.field(default=None)  
    employee_access: Optional[bool] = dataclasses.field(default=None)  
    folders: Optional[list[InvitationFolders]] = dataclasses.field(default=None)  
    group_ids: Optional[list[str]] = dataclasses.field(default=None)  
    groups: Optional[list[InvitationGroups]] = dataclasses.field(default=None)  
    is_admin: Optional[bool] = dataclasses.field(default=None)  
    link_method: Optional[InvitationLinkMethod] = dataclasses.field(default=None)  
    player: Optional[InvitationPlayerEnum] = dataclasses.field(default=None)  
    player_end: Optional[str] = dataclasses.field(default=None)  
    status: Optional[InvitationStatusEnum] = dataclasses.field(default=None)  
    