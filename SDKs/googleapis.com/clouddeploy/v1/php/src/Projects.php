<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new DeliveryPipeline in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/deliveryPipelines', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deliveryPipelineInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DeliveryPipelines in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/deliveryPipelines', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeliveryPipelinesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeliveryPipelinesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Abandons a Release in the Delivery Pipeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesAbandon(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:abandon', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->abandonReleaseResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Release in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/releases', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "releaseInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Releases in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/releases', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReleasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReleasesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Advances a Rollout in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvance(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:advance', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "advanceRolloutRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->advanceRolloutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Approves a Rollout.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApprove(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:approve', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "approveRolloutRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->approveRolloutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Rollout in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/rollouts', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rolloutInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ignores the specified Job in a Rollout.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJob(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{rollout}:ignoreJob', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ignoreJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ignoreJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists JobRuns in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobRuns', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobRunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Terminates a Job Run in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminate(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:terminate', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->terminateJobRunResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Rollouts in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/rollouts', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRolloutsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRolloutsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retries the specified Job in a Rollout.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse
     */
	public function clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJob(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{rollout}:retryJob', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "retryJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retryJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListResponse
     */
	public function clouddeployProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelResponse
     */
	public function clouddeployProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListResponse
     */
	public function clouddeployProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Target in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateResponse
     */
	public function clouddeployProjectsLocationsTargetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/targets', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single Target.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteResponse
     */
	public function clouddeployProjectsLocationsTargetsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single Target.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetResponse
     */
	public function clouddeployProjectsLocationsTargetsGet(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->target = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Target', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyResponse
     */
	public function clouddeployProjectsLocationsTargetsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Targets in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListResponse
     */
	public function clouddeployProjectsLocationsTargetsList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/targets', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTargetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTargetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single Target.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchResponse
     */
	public function clouddeployProjectsLocationsTargetsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyResponse
     */
	public function clouddeployProjectsLocationsTargetsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse
     */
	public function clouddeployProjectsLocationsTargetsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}