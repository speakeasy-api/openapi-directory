/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Money } from "./money";
import { OrderLineItemAppliedDiscount } from "./orderlineitemapplieddiscount";
import { OrderLineItemAppliedTax } from "./orderlineitemappliedtax";
import { OrderLineItemModifier } from "./orderlineitemmodifier";
import { OrderLineItemPricingBlocklists } from "./orderlineitempricingblocklists";
import { OrderQuantityUnit } from "./orderquantityunit";
import { Expose, Type } from "class-transformer";

/**
 * Represents a line item in an order. Each line item describes a different
 *
 * @remarks
 * product to purchase, with its own quantity and price details.
 */
export class OrderLineItem extends SpeakeasyBase {
  /**
   * The list of references to discounts applied to this line item. Each
   *
   * @remarks
   * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
   * `OrderLineItemDiscounts` applied to the line item. On reads, the amount
   * applied is populated.
   *
   * An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
   * `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
   * for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
   * line items.
   *
   * To change the amount of a discount, modify the referenced top-level discount.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItemAppliedDiscount })
  @Expose({ name: "applied_discounts" })
  @Type(() => OrderLineItemAppliedDiscount)
  appliedDiscounts?: OrderLineItemAppliedDiscount[];

  /**
   * The list of references to taxes applied to this line item. Each
   *
   * @remarks
   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
   * top-level `OrderLineItemTax` applied to the line item. On reads, the
   * amount applied is populated.
   *
   * An `OrderLineItemAppliedTax` is automatically created on every line
   * item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
   * records for `LINE_ITEM` scoped taxes must be added in requests for the tax
   * to apply to any line items.
   *
   * To change the amount of a tax, modify the referenced top-level tax.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItemAppliedTax })
  @Expose({ name: "applied_taxes" })
  @Type(() => OrderLineItemAppliedTax)
  appliedTaxes?: OrderLineItemAppliedTax[];

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "base_price_money" })
  @Type(() => Money)
  basePriceMoney?: Money;

  /**
   * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "catalog_object_id" })
  catalogObjectId?: string;

  /**
   * The version of the catalog object that this line item references.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "catalog_version" })
  catalogVersion?: number;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross_sales_money" })
  @Type(() => Money)
  grossSalesMoney?: Money;

  /**
   * The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
   *
   * @remarks
   * activation or reloading of a gift card.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "item_type" })
  itemType?: string;

  /**
   * Application-defined data attached to this line item. Metadata fields are intended
   *
   * @remarks
   * to store descriptive references or associations with an entity in another system or store brief
   * information about the object. Square does not process this field; it only stores and returns it
   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
   * identifiable information or card details).
   *
   * Keys written by applications must be 60 characters or less and must be in the character set
   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
   * with a namespace, separated from the key with a ':' character.
   *
   * Values have a maximum length of 255 characters.
   *
   * An application can have up to 10 entries per metadata field.
   *
   * Entries written by applications are private and can only be read or modified by the same
   * application.
   *
   * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, string>;

  /**
   * The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItemModifier })
  @Expose({ name: "modifiers" })
  @Type(() => OrderLineItemModifier)
  modifiers?: OrderLineItemModifier[];

  /**
   * The name of the line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The note of the line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * Describes pricing adjustments that are blocked from manual and
   *
   * @remarks
   * automatic application to a line item. For more information, see
   * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pricing_blocklists" })
  @Type(() => OrderLineItemPricingBlocklists)
  pricingBlocklists?: OrderLineItemPricingBlocklists;

  /**
   * The quantity purchased, formatted as a decimal number.
   *
   * @remarks
   * For example, `"3"`.
   *
   * Line items with a quantity of `"0"` are automatically removed
   * when paying for or otherwise completing the order.
   *
   * Line items with a `quantity_unit` can have non-integer quantities.
   * For example, `"1.70000"`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity: string;

  /**
   * Contains the measurement unit for a quantity and a precision that
   *
   * @remarks
   * specifies the number of digits after the decimal point for decimal quantities.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity_unit" })
  @Type(() => OrderQuantityUnit)
  quantityUnit?: OrderQuantityUnit;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_discount_money" })
  @Type(() => Money)
  totalDiscountMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_money" })
  @Type(() => Money)
  totalMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_tax_money" })
  @Type(() => Money)
  totalTaxMoney?: Money;

  /**
   * A unique ID that identifies the line item only within this order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;

  /**
   * The name of the variation applied to this line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "variation_name" })
  variationName?: string;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "variation_total_price_money" })
  @Type(() => Money)
  variationTotalPriceMoney?: Money;
}
