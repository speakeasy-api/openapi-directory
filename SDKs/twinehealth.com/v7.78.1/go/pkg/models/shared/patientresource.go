// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type PatientResourceAttributesGenderEnum string

const (
	PatientResourceAttributesGenderEnumMale   PatientResourceAttributesGenderEnum = "male"
	PatientResourceAttributesGenderEnumFemale PatientResourceAttributesGenderEnum = "female"
	PatientResourceAttributesGenderEnumOther  PatientResourceAttributesGenderEnum = "other"
)

func (e *PatientResourceAttributesGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "other":
		*e = PatientResourceAttributesGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientResourceAttributesGenderEnum: %s", s)
	}
}

type PatientResourceAttributesInput struct {
	Addresses      []Address                            `json:"addresses,omitempty"`
	ArchiveHistory []ArchiveHistory                     `json:"archive_history,omitempty"`
	BirthDate      *types.Date                          `json:"birth_date,omitempty"`
	EmailAddress   *string                              `json:"email_address,omitempty"`
	FirstName      *string                              `json:"first_name,omitempty"`
	Gender         *PatientResourceAttributesGenderEnum `json:"gender,omitempty"`
	Identifiers    []PatientIdentifier                  `json:"identifiers,omitempty"`
	LastName       *string                              `json:"last_name,omitempty"`
	// Coach's note about the patient. Not visible to the patient.
	Note         *string       `json:"note,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
}

type PatientResourceRelationshipsCoachesDataMeta struct {
	Primary *bool `json:"primary,omitempty"`
}

type PatientResourceRelationshipsCoachesDataTypeEnum string

const (
	PatientResourceRelationshipsCoachesDataTypeEnumCoach PatientResourceRelationshipsCoachesDataTypeEnum = "coach"
)

func (e *PatientResourceRelationshipsCoachesDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "coach":
		*e = PatientResourceRelationshipsCoachesDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientResourceRelationshipsCoachesDataTypeEnum: %s", s)
	}
}

type PatientResourceRelationshipsCoachesData struct {
	ID   string                                          `json:"id"`
	Meta *PatientResourceRelationshipsCoachesDataMeta    `json:"meta,omitempty"`
	Type PatientResourceRelationshipsCoachesDataTypeEnum `json:"type"`
}

type PatientResourceRelationshipsCoachesInput struct {
	Data []PatientResourceRelationshipsCoachesData `json:"data"`
}

type PatientResourceRelationshipsGroupsDataTypeEnum string

const (
	PatientResourceRelationshipsGroupsDataTypeEnumGroup PatientResourceRelationshipsGroupsDataTypeEnum = "group"
)

func (e *PatientResourceRelationshipsGroupsDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		*e = PatientResourceRelationshipsGroupsDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientResourceRelationshipsGroupsDataTypeEnum: %s", s)
	}
}

type PatientResourceRelationshipsGroupsData struct {
	ID   *string                                        `json:"id,omitempty"`
	Type PatientResourceRelationshipsGroupsDataTypeEnum `json:"type"`
}

type PatientResourceRelationshipsGroups struct {
	Data []PatientResourceRelationshipsGroupsData `json:"data"`
}

type PatientResourceRelationshipsInput struct {
	Coaches *PatientResourceRelationshipsCoachesInput `json:"coaches,omitempty"`
	Groups  PatientResourceRelationshipsGroups        `json:"groups"`
}

type PatientResourceTypeEnum string

const (
	PatientResourceTypeEnumPatient PatientResourceTypeEnum = "patient"
)

func (e *PatientResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "patient":
		*e = PatientResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientResourceTypeEnum: %s", s)
	}
}

type PatientResourceInput struct {
	Attributes    PatientResourceAttributesInput     `json:"attributes"`
	ID            *string                            `json:"id,omitempty"`
	Relationships *PatientResourceRelationshipsInput `json:"relationships,omitempty"`
	Type          PatientResourceTypeEnum            `json:"type"`
}

// PatientResourceAttributesStatement - A patient's motivation statement.
type PatientResourceAttributesStatement struct {
	UpdatedAt *string `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
	Value     *string `json:"value,omitempty"`
}

type PatientResourceAttributes struct {
	Addresses      []Address                            `json:"addresses,omitempty"`
	ArchiveHistory []ArchiveHistory                     `json:"archive_history,omitempty"`
	Archived       *bool                                `json:"archived,omitempty"`
	BirthDate      *types.Date                          `json:"birth_date,omitempty"`
	EmailAddress   *string                              `json:"email_address,omitempty"`
	EnrolledAt     *string                              `json:"enrolled_at,omitempty"`
	FirstAccessAt  *string                              `json:"first_access_at,omitempty"`
	FirstName      *string                              `json:"first_name,omitempty"`
	Gender         *PatientResourceAttributesGenderEnum `json:"gender,omitempty"`
	Identifiers    []PatientIdentifier                  `json:"identifiers,omitempty"`
	InvitedAt      *string                              `json:"invited_at,omitempty"`
	LastAccessAt   *string                              `json:"last_access_at,omitempty"`
	LastName       *string                              `json:"last_name,omitempty"`
	// Coach's note about the patient. Not visible to the patient.
	Note         *string       `json:"note,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
	// A patient's motivation statement.
	Statement *PatientResourceAttributesStatement `json:"statement,omitempty"`
	UpdatedAt *string                             `json:"updated_at,omitempty"`
}

type PatientResourceLinks struct {
	Self *string `json:"self,omitempty"`
	// A link to the patient record in the Fitbit Plus web application.
	TwineWebApp *string `json:"twine_web_app,omitempty"`
}

type PatientResourceRelationshipsCoachesLinks struct {
	Related *string `json:"related,omitempty"`
}

type PatientResourceRelationshipsCoaches struct {
	Data  []PatientResourceRelationshipsCoachesData `json:"data"`
	Links *PatientResourceRelationshipsCoachesLinks `json:"links,omitempty"`
}

type PatientResourceRelationships struct {
	Coaches *PatientResourceRelationshipsCoaches `json:"coaches,omitempty"`
	Groups  PatientResourceRelationshipsGroups   `json:"groups"`
}

type PatientResource struct {
	Attributes    PatientResourceAttributes     `json:"attributes"`
	ID            *string                       `json:"id,omitempty"`
	Links         *PatientResourceLinks         `json:"links,omitempty"`
	Relationships *PatientResourceRelationships `json:"relationships,omitempty"`
	Type          PatientResourceTypeEnum       `json:"type"`
}
