"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum(str, Enum):
    r"""Per switch exception (combined, redundant, useNetworkSetting)"""
    COMBINED = 'combined'
    REDUNDANT = 'redundant'
    USE_NETWORK_SETTING = 'useNetworkSetting'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettingsRequestBodyPowerExceptions:
    
    power_type: UpdateNetworkSwitchSettingsRequestBodyPowerExceptionsPowerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerType') }})
    r"""Per switch exception (combined, redundant, useNetworkSetting)"""  
    serial: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial') }})
    r"""Serial number of the switch"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettingsRequestBody:
    
    power_exceptions: Optional[list[UpdateNetworkSwitchSettingsRequestBodyPowerExceptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerExceptions'), 'exclude': lambda f: f is None }})
    r"""Exceptions on a per switch basis to \\"useCombinedPower\\" """  
    use_combined_power: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useCombinedPower'), 'exclude': lambda f: f is None }})
    r"""The use Combined Power as the default behavior of secondary power supplies on supported devices."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Management VLAN"""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchSettingsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    
class UpdateNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum(str, Enum):
    r"""Per switch exception (combined, redundant, useNetworkSetting)"""
    COMBINED = 'combined'
    REDUNDANT = 'redundant'
    USE_NETWORK_SETTING = 'useNetworkSetting'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettings200ApplicationJSONPowerExceptions:
    
    power_type: Optional[UpdateNetworkSwitchSettings200ApplicationJSONPowerExceptionsPowerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerType'), 'exclude': lambda f: f is None }})
    r"""Per switch exception (combined, redundant, useNetworkSetting)"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Serial number of the switch"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchSettings200ApplicationJSON:
    r"""Successful operation"""
    
    power_exceptions: Optional[list[UpdateNetworkSwitchSettings200ApplicationJSONPowerExceptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerExceptions'), 'exclude': lambda f: f is None }})
    r"""Exceptions on a per switch basis to \\"useCombinedPower\\" """  
    use_combined_power: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useCombinedPower'), 'exclude': lambda f: f is None }})
    r"""The use Combined Power as the default behavior of secondary power supplies on supported devices."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Management VLAN"""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_settings_200_application_json_object: Optional[UpdateNetworkSwitchSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    