"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstancesCount:
    r"""Describes how many instances a stack has for each status."""
    
    assigning: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Assigning'), 'exclude': lambda f: f is None }})  
    booting: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Booting'), 'exclude': lambda f: f is None }})  
    connection_lost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionLost'), 'exclude': lambda f: f is None }})  
    deregistering: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deregistering'), 'exclude': lambda f: f is None }})  
    online: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Online'), 'exclude': lambda f: f is None }})  
    pending: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pending'), 'exclude': lambda f: f is None }})  
    rebooting: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rebooting'), 'exclude': lambda f: f is None }})  
    registered: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Registered'), 'exclude': lambda f: f is None }})  
    registering: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Registering'), 'exclude': lambda f: f is None }})  
    requested: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Requested'), 'exclude': lambda f: f is None }})  
    running_setup: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunningSetup'), 'exclude': lambda f: f is None }})  
    setup_failed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SetupFailed'), 'exclude': lambda f: f is None }})  
    shutting_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShuttingDown'), 'exclude': lambda f: f is None }})  
    start_failed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartFailed'), 'exclude': lambda f: f is None }})  
    stop_failed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StopFailed'), 'exclude': lambda f: f is None }})  
    stopped: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stopped'), 'exclude': lambda f: f is None }})  
    stopping: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stopping'), 'exclude': lambda f: f is None }})  
    terminated: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Terminated'), 'exclude': lambda f: f is None }})  
    terminating: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Terminating'), 'exclude': lambda f: f is None }})  
    unassigning: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unassigning'), 'exclude': lambda f: f is None }})  
    