/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class UsersSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * User statuses:<br>`active` - Users with an active status.<br>`inactive` - Users who are deactivated.<br>`pending` - Users with a pending status.
 */
export enum UsersStatusEnum {
  Active = "active",
  Inactive = "inactive",
  Pending = "pending",
}

export class UsersRequest extends SpeakeasyBase {
  /**
   * Provide a value for this field if you would like to see the following attribute in the response of this API call:<br>
   *
   * @remarks
   *
   * `custom_attributes`: Returns custom attributes that are associated with the user.<br>`host_key`: Returns [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_fields",
  })
  includeFields?: string;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The page number of the current page in the returned records.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_number",
  })
  pageNumber?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Unique identifier of the role. Provide this parameter if you would like to filter the response by a specific role. You can retrieve Role IDs from [List Roles](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=role_id",
  })
  roleId?: string;

  /**
   * User statuses:<br>`active` - Users with an active status.<br>`inactive` - Users who are deactivated.<br>`pending` - Users with a pending status.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: UsersStatusEnum;
}

export class Users200ApplicationXMLUsersCustomAttributes extends SpeakeasyBase {
  /**
   * Unique identifier of the custom attribute.
   */
  @SpeakeasyMetadata()
  key?: string;

  /**
   * Name of the custom attribute.
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Value of the custom attribute.
   */
  @SpeakeasyMetadata()
  value?: string;
}

export class Users200ApplicationXMLUsers extends SpeakeasyBase {
  /**
   * The time when user's account was created.
   */
  @SpeakeasyMetadata()
  createdAt?: Date;

  /**
   * Custom attributes. This field is only returned if users have been assigned custom attributes and if you provided `custom_attributes` as the value of `include_fields` query parameter in the API request.
   */
  @SpeakeasyMetadata({ elemType: Users200ApplicationXMLUsersCustomAttributes })
  customAttributes?: Users200ApplicationXMLUsersCustomAttributes[];

  /**
   * Department, if provided by the user.
   */
  @SpeakeasyMetadata()
  dept?: string;

  /**
   * User's email address.
   */
  @SpeakeasyMetadata()
  email: string;

  /**
   * User's first name.
   */
  @SpeakeasyMetadata()
  firstName?: string;

  /**
   * IDs of groups where the user is a member.
   */
  @SpeakeasyMetadata()
  groupIds?: string[];

  /**
   * The [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user. This field is only returned if users have been assigned a host key and if you provided `host_key` as the value of `include_fields` query parameter in the API request.
   */
  @SpeakeasyMetadata()
  hostKey?: string;

  /**
   * User ID.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * IDs of IM directory groups where the user is a member.
   */
  @SpeakeasyMetadata()
  imGroupIds?: string[];

  /**
   * The last client version that user used to login.
   */
  @SpeakeasyMetadata()
  lastClientVersion?: string;

  /**
   * User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.
   */
  @SpeakeasyMetadata()
  lastLoginTime?: Date;

  /**
   * User's last name.
   */
  @SpeakeasyMetadata()
  lastName?: string;

  /**
   * This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
   */
  @SpeakeasyMetadata()
  planUnitedType?: string;

  /**
   * Personal meeting ID of the user.
   */
  @SpeakeasyMetadata()
  pmi?: number;

  /**
   * Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
   */
  @SpeakeasyMetadata()
  roleId?: string;

  /**
   * User's status
   */
  @SpeakeasyMetadata()
  status?: string;

  /**
   * The time zone of the user.
   */
  @SpeakeasyMetadata()
  timezone?: string;

  /**
   * User's plan type.<br>
   *
   * @remarks
   * `1` - Basic.<br>
   * `2` - Licensed.<br>
   * `3` - On-prem.<br>
   * `99` - None (this can only be set with `ssoCreate`).
   *
   */
  @SpeakeasyMetadata()
  type: number;

  /**
   * Display whether the user's email address for the Zoom account is verified or not. <br>
   *
   * @remarks
   * `1` - Verified user email.<br>
   * `0` - User's email not verified.
   */
  @SpeakeasyMetadata()
  verified?: number;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * User list returned.
 */
export class Users200ApplicationXML extends SpeakeasyBase {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  pageCount?: number;

  /**
   * The page number of the current results.
   */
  @SpeakeasyMetadata()
  pageNumber?: number;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;

  /**
   * The total number of all the records available across pages.
   */
  @SpeakeasyMetadata()
  totalRecords?: number;

  /**
   * List of user objects.
   */
  @SpeakeasyMetadata({ elemType: Users200ApplicationXMLUsers })
  users?: Users200ApplicationXMLUsers[];
}

export class Users200ApplicationJSONUsersCustomAttributes extends SpeakeasyBase {
  /**
   * Unique identifier of the custom attribute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Name of the custom attribute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Value of the custom attribute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class Users200ApplicationJSONUsers extends SpeakeasyBase {
  /**
   * The time when user's account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Custom attributes. This field is only returned if users have been assigned custom attributes and if you provided `custom_attributes` as the value of `include_fields` query parameter in the API request.
   */
  @SpeakeasyMetadata({ elemType: Users200ApplicationJSONUsersCustomAttributes })
  @Expose({ name: "custom_attributes" })
  @Type(() => Users200ApplicationJSONUsersCustomAttributes)
  customAttributes?: Users200ApplicationJSONUsersCustomAttributes[];

  /**
   * Department, if provided by the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * User's email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * User's first name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * IDs of groups where the user is a member.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group_ids" })
  groupIds?: string[];

  /**
   * The [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user. This field is only returned if users have been assigned a host key and if you provided `host_key` as the value of `include_fields` query parameter in the API request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_key" })
  hostKey?: string;

  /**
   * User ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * IDs of IM directory groups where the user is a member.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "im_group_ids" })
  imGroupIds?: string[];

  /**
   * The last client version that user used to login.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_client_version" })
  lastClientVersion?: string;

  /**
   * User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_login_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastLoginTime?: Date;

  /**
   * User's last name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plan_united_type" })
  planUnitedType?: string;

  /**
   * Personal meeting ID of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pmi" })
  pmi?: number;

  /**
   * Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role_id" })
  roleId?: string;

  /**
   * User's status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * The time zone of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * User's plan type.<br>
   *
   * @remarks
   * `1` - Basic.<br>
   * `2` - Licensed.<br>
   * `3` - On-prem.<br>
   * `99` - None (this can only be set with `ssoCreate`).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: number;

  /**
   * Display whether the user's email address for the Zoom account is verified or not. <br>
   *
   * @remarks
   * `1` - Verified user email.<br>
   * `0` - User's email not verified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verified" })
  verified?: number;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * User list returned.
 */
export class Users200ApplicationJSON extends SpeakeasyBase {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_count" })
  pageCount?: number;

  /**
   * The page number of the current results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_number" })
  pageNumber?: number;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  /**
   * The total number of all the records available across pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;

  /**
   * List of user objects.
   */
  @SpeakeasyMetadata({ elemType: Users200ApplicationJSONUsers })
  @Expose({ name: "users" })
  @Type(() => Users200ApplicationJSONUsers)
  users?: Users200ApplicationJSONUsers[];
}

export class UsersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * User list returned.
   */
  @SpeakeasyMetadata()
  users200ApplicationJSONObject?: Users200ApplicationJSON;
}
