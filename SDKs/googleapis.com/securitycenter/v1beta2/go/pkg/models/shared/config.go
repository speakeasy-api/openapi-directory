// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConfigModuleEnablementStateEnum - The state of enablement for the module at its level of the resource hierarchy.
type ConfigModuleEnablementStateEnum string

const (
	ConfigModuleEnablementStateEnumEnablementStateUnspecified ConfigModuleEnablementStateEnum = "ENABLEMENT_STATE_UNSPECIFIED"
	ConfigModuleEnablementStateEnumInherited                  ConfigModuleEnablementStateEnum = "INHERITED"
	ConfigModuleEnablementStateEnumEnabled                    ConfigModuleEnablementStateEnum = "ENABLED"
	ConfigModuleEnablementStateEnumDisabled                   ConfigModuleEnablementStateEnum = "DISABLED"
)

func (e *ConfigModuleEnablementStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLEMENT_STATE_UNSPECIFIED":
		fallthrough
	case "INHERITED":
		fallthrough
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = ConfigModuleEnablementStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigModuleEnablementStateEnum: %s", s)
	}
}

// Config - Configuration of a module.
type Config struct {
	// The state of enablement for the module at its level of the resource hierarchy.
	ModuleEnablementState *ConfigModuleEnablementStateEnum `json:"moduleEnablementState,omitempty"`
	// The configuration value for the module. The absence of this field implies its inheritance from the parent.
	Value map[string]interface{} `json:"value,omitempty"`
}
