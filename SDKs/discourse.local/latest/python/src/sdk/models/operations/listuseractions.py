"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListUserActionsRequest:
    
    filter: str = dataclasses.field(metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})  
    offset: int = dataclasses.field(metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    username: str = dataclasses.field(metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserActions200ApplicationJSONUserActions:
    
    acting_avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acting_avatar_template') }})  
    acting_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acting_name') }})  
    acting_user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acting_user_id') }})  
    acting_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acting_username') }})  
    action_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action_code') }})  
    action_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action_type') }})  
    archived: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    category_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id') }})  
    closed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted') }})  
    excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excerpt') }})  
    hidden: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    post_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_id') }})  
    post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_number') }})  
    post_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_type') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    target_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_name') }})  
    target_user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_user_id') }})  
    target_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_username') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    topic_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_id') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListUserActions200ApplicationJSON:
    r"""response"""
    
    user_actions: list[ListUserActions200ApplicationJSONUserActions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_actions') }})  
    

@dataclasses.dataclass
class ListUserActionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_user_actions_200_application_json_object: Optional[ListUserActions200ApplicationJSON] = dataclasses.field(default=None)
    r"""response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    