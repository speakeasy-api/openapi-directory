// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SchemaExtensionStatusEnum string

const (
	SchemaExtensionStatusEnumInitializing       SchemaExtensionStatusEnum = "Initializing"
	SchemaExtensionStatusEnumCreatingSnapshot   SchemaExtensionStatusEnum = "CreatingSnapshot"
	SchemaExtensionStatusEnumUpdatingSchema     SchemaExtensionStatusEnum = "UpdatingSchema"
	SchemaExtensionStatusEnumReplicating        SchemaExtensionStatusEnum = "Replicating"
	SchemaExtensionStatusEnumCancelInProgress   SchemaExtensionStatusEnum = "CancelInProgress"
	SchemaExtensionStatusEnumRollbackInProgress SchemaExtensionStatusEnum = "RollbackInProgress"
	SchemaExtensionStatusEnumCancelled          SchemaExtensionStatusEnum = "Cancelled"
	SchemaExtensionStatusEnumFailed             SchemaExtensionStatusEnum = "Failed"
	SchemaExtensionStatusEnumCompleted          SchemaExtensionStatusEnum = "Completed"
)

func (e SchemaExtensionStatusEnum) ToPointer() *SchemaExtensionStatusEnum {
	return &e
}

func (e *SchemaExtensionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Initializing":
		fallthrough
	case "CreatingSnapshot":
		fallthrough
	case "UpdatingSchema":
		fallthrough
	case "Replicating":
		fallthrough
	case "CancelInProgress":
		fallthrough
	case "RollbackInProgress":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Failed":
		fallthrough
	case "Completed":
		*e = SchemaExtensionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaExtensionStatusEnum: %v", v)
	}
}
