/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The type of training to use to train the project (default: Regular).
 */
export enum TrainProjectRawTrainingTypeEnum {
  Regular = "Regular",
  Advanced = "Advanced",
}

export class TrainProjectRawRequest extends SpeakeasyBase {
  /**
   * Additional training parameters passed in to control how the project is trained.
   */
  @SpeakeasyMetadata({ data: "request, media_type=text/xml" })
  requestBody?: Uint8Array;

  /**
   * Whether to force train even if dataset and configuration does not change (default: false).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=forceTrain",
  })
  forceTrain?: boolean;

  /**
   * The email address to send notification to when training finishes (default: null).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=notificationEmailAddress",
  })
  notificationEmailAddress?: string;

  /**
   * The project id.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=projectId",
  })
  projectId: string;

  /**
   * The number of hours reserved as budget for training (if applicable).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=reservedBudgetInHours",
  })
  reservedBudgetInHours?: number;

  /**
   * The type of training to use to train the project (default: Regular).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=trainingType",
  })
  trainingType?: TrainProjectRawTrainingTypeEnum;
}

export class TrainProjectRawResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error response
   */
  @SpeakeasyMetadata()
  customVisionError?: shared.CustomVisionError;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  iteration?: shared.Iteration;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
