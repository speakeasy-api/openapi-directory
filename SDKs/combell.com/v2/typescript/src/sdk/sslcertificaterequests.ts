/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Create new SSL certificates. In the provisioning documentation you can find more info on the flow that should be followed.
 */
export class SSLCertificateRequests {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a SSL certificate request
   *
   * @remarks
   * Executing this method causes the purchase of a paying product.<br />
   * Log on to our website to see your current (renewal) prices or contact our Sales department.<br />
   * Please note that promotional pricing does not apply for purchases made through our API.
   */
  addSslCertificateRequest(
    req: shared.CreateSslCertificateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddSslCertificateRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateSslCertificateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sslcertificaterequests";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddSslCertificateRequestResponse =
        new operations.AddSslCertificateRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
      }

      return res;
    });
  }

  /**
   * Detail of a SSL certificate request
   */
  getSslCertificateRequest(
    req: operations.GetSslCertificateRequestRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSslCertificateRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSslCertificateRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sslcertificaterequests/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSslCertificateRequestResponse =
        new operations.GetSslCertificateRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslCertificateRequestDetail = utils.objectToClass(
              httpRes?.data,
              shared.SslCertificateRequestDetail
            );
          }
          break;
        case httpRes?.status == 303:
          break;
        case httpRes?.status == 410:
          break;
      }

      return res;
    });
  }

  /**
   * Overview of SSL certificate requests
   */
  getSslCertificateRequests(
    req: operations.GetSslCertificateRequestsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSslCertificateRequestsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSslCertificateRequestsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sslcertificaterequests";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSslCertificateRequestsResponse =
        new operations.GetSslCertificateRequestsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sslCertificateRequests = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.sslCertificateRequests = utils.objectToClass(
              httpRes?.data,
              shared.SslCertificateRequest,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verify the SSL certificate request domain validations
   */
  verifySslCertificateRequestDomainValidations(
    req: operations.VerifySslCertificateRequestDomainValidationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VerifySslCertificateRequestDomainValidationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VerifySslCertificateRequestDomainValidationsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sslcertificaterequests/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VerifySslCertificateRequestDomainValidationsResponse =
        new operations.VerifySslCertificateRequestDomainValidationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case [202, 410].includes(httpRes?.status):
          break;
        case httpRes?.status == 303:
          break;
      }

      return res;
    });
  }
}
