// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type BookingHotelsRequest struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
	// **unique numeric identifier** of the destination
	DestID *int64 `queryParam:"style=form,explode=true,name=destId"`
	// **unique alphanumeric identifier** of the product
	ProductCode *string `queryParam:"style=form,explode=true,name=productCode"`
}

type BookingHotels200ApplicationJSONData struct {
	// **natural-language address** of hotel pick-up point
	Address *string `json:"address,omitempty"`
	// ignore (Viator only)
	Brand *string `json:"brand,omitempty"`
	// **natural-language name** of the destination that *this* hotel pick-up point pertains to
	City *string `json:"city,omitempty"`
	// **unique numeric identifer** of the destination that *this* hotel pick-up point pertains to
	DestinationID *int64 `json:"destinationId,omitempty"`
	// ignore (Viator only)
	HotelString *string `json:"hotelString,omitempty"`
	// **identifier** of *this* hotel pick-up point`
	ID *string `json:"id,omitempty"`
	// **numeric latitude component** of *this* hotel pick-up point's geolocation
	Latitude *float64 `json:"latitude,omitempty"`
	// **numeric longitude component** of *this* hotel pick-up point's geolocation
	Longitude *float64 `json:"longitude,omitempty"`
	// **natural-language name** of hotel pick-up point
	Name *string `json:"name,omitempty"`
	// **natural-language notes** about *this* hotel pick-up point
	Notes *string `json:"notes,omitempty"`
	// **phone number** of *this* hotel pick-up point
	Phone *string `json:"phone,omitempty"`
	// **post code** of *this* hotel pick-up point
	Postcode *string `json:"postcode,omitempty"`
	// **array** of product codes pertaining to *this* hotel pick-up point
	ProductCodes []string `json:"productCodes,omitempty"`
	// **sort-order** of *this* hotel pick-up point
	SortOrder *int64 `json:"sortOrder,omitempty"`
}

// BookingHotels200ApplicationJSON - Success
type BookingHotels200ApplicationJSON struct {
	// **array** of hotel pick-up objects
	Data []BookingHotels200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingHotelsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingHotels200ApplicationJSONObject *BookingHotels200ApplicationJSON
}
