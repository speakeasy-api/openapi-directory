/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { UniqueProblem } from "./uniqueproblem";
import { Expose, Transform } from "class-transformer";

/**
 * Represents the result of a list unique problems request.
 */
export class ListUniqueProblemsResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: UniqueProblem, elemDepth: 2 })
  @Expose({ name: "uniqueProblems" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, UniqueProblem[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], UniqueProblem);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  uniqueProblems?: Record<string, UniqueProblem[]>;
}
