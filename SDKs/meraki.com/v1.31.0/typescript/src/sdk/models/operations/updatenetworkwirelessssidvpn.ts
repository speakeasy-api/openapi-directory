/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The VPN concentrator settings for this SSID.
 */
export class UpdateNetworkWirelessSsidVpnRequestBodyConcentrator extends SpeakeasyBase {
  /**
   * The NAT ID of the concentrator that should be set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkId" })
  networkId?: string;

  /**
   * The VLAN that should be tagged for the concentrator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlanId" })
  vlanId?: number;
}

/**
 * Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
 */
export class UpdateNetworkWirelessSsidVpnRequestBodyFailover extends SpeakeasyBase {
  /**
   * Idle timer interval in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "heartbeatInterval" })
  heartbeatInterval?: number;

  /**
   * Idle timer timeout in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idleTimeout" })
  idleTimeout?: number;

  /**
   * IP addressed reserved on DHCP server where SSID will terminate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestIp" })
  requestIp?: string;
}

/**
 * Protocol for this split tunnel rule.
 */
export enum UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum {
  Any = "Any",
  Tcp = "TCP",
  Udp = "UDP",
}

export class UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules extends SpeakeasyBase {
  /**
   * Description for this split tunnel rule (optional).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destCidr" })
  destCidr: string;

  /**
   * Destination port for this split tunnel rule, (integer in the range 1-65535), or 'any'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destPort" })
  destPort?: string;

  /**
   * Traffic policy specified for this split tunnel rule, 'allow' or 'deny'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  policy: string;

  /**
   * Protocol for this split tunnel rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum;
}

/**
 * The VPN split tunnel settings for this SSID.
 */
export class UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel extends SpeakeasyBase {
  /**
   * If true, VPN split tunnel is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * List of VPN split tunnel rules.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules,
  })
  @Expose({ name: "rules" })
  @Type(() => UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules)
  rules?: UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules[];
}

export class UpdateNetworkWirelessSsidVpnRequestBody extends SpeakeasyBase {
  /**
   * The VPN concentrator settings for this SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concentrator" })
  @Type(() => UpdateNetworkWirelessSsidVpnRequestBodyConcentrator)
  concentrator?: UpdateNetworkWirelessSsidVpnRequestBodyConcentrator;

  /**
   * Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failover" })
  @Type(() => UpdateNetworkWirelessSsidVpnRequestBodyFailover)
  failover?: UpdateNetworkWirelessSsidVpnRequestBodyFailover;

  /**
   * The VPN split tunnel settings for this SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splitTunnel" })
  @Type(() => UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel)
  splitTunnel?: UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel;
}

export class UpdateNetworkWirelessSsidVpnRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkWirelessSsidVpnRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=number",
  })
  number: string;
}

export class UpdateNetworkWirelessSsidVpnResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkWirelessSsidVpn200ApplicationJSONObject?: Record<string, any>;
}
