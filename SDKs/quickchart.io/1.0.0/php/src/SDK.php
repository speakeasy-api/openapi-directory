<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - An API to generate charts and QR codes using QuickChart services.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://quickchart.io',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Generate a chart (GET)
     * 
     * Generate a chart based on the provided parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChartRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChartResponse
     */
	public function getChart(
        \OpenAPI\OpenAPI\Models\Operations\GetChartRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chart');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChartRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/jpeg')) {
                $response->getChart200ImageJpegBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->getChart200ImagePngBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/svg+xml')) {
                $response->getChart200ImageSvgPlusXmlBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/webp')) {
                $response->getChart200ImageWebpBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate a QR code (GET)
     * 
     * Generate a QR code based on the provided parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQrRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQrResponse
     */
	public function getQr(
        \OpenAPI\OpenAPI\Models\Operations\GetQrRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qr');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQrRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->getQr200ImagePngBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/svg+xml')) {
                $response->getQr200ImageSvgPlusXmlBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate a chart (POST)
     * 
     * Generate a chart based on the provided configuration in the request body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostChartRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostChartResponse
     */
	public function postChart(
        \OpenAPI\OpenAPI\Models\Operations\PostChartRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostChartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chart');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostChartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/jpeg')) {
                $response->postChart200ImageJpegBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->postChart200ImagePngBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/svg+xml')) {
                $response->postChart200ImageSvgPlusXmlBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/webp')) {
                $response->postChart200ImageWebpBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate a QR code (POST)
     * 
     * Generate a QR code based on the provided configuration in the request body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQrRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQrResponse
     */
	public function postQr(
        \OpenAPI\OpenAPI\Models\Operations\PostQrRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/qr');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->postQr200ImagePngBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/svg+xml')) {
                $response->postQr200ImageSvgPlusXmlBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}