/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Volume - A storage volume.
 */
public class Volume {
    /**
     * Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attached")
    public Boolean attached;
    public Volume withAttached(Boolean attached) {
        this.attached = attached;
        return this;
    }
    
    /**
     * The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoGrownSizeGib")
    public String autoGrownSizeGib;
    public Volume withAutoGrownSizeGib(String autoGrownSizeGib) {
        this.autoGrownSizeGib = autoGrownSizeGib;
        return this;
    }
    
    /**
     * Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootVolume")
    public Boolean bootVolume;
    public Volume withBootVolume(Boolean bootVolume) {
        this.bootVolume = bootVolume;
        return this;
    }
    
    /**
     * The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentSizeGib")
    public String currentSizeGib;
    public Volume withCurrentSizeGib(String currentSizeGib) {
        this.currentSizeGib = currentSizeGib;
        return this;
    }
    
    /**
     * Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emergencySizeGib")
    public String emergencySizeGib;
    public Volume withEmergencySizeGib(String emergencySizeGib) {
        this.emergencySizeGib = emergencySizeGib;
        return this;
    }
    
    /**
     * Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;
    public Volume withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * An identifier for the `Volume`, generated by the backend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Volume withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Output only. Instances this Volume is attached to. This field is set only in Get requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instances")
    public String[] instances;
    public Volume withInstances(String[] instances) {
        this.instances = instances;
        return this;
    }
    
    /**
     * Labels as key value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Volume withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Maximum size volume can be expanded to in case of evergency, in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSizeGib")
    public String maxSizeGib;
    public Volume withMaxSizeGib(String maxSizeGib) {
        this.maxSizeGib = maxSizeGib;
        return this;
    }
    
    /**
     * Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Volume withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public Volume withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Originally requested size, in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyRequestedSizeGib")
    public String originallyRequestedSizeGib;
    public Volume withOriginallyRequestedSizeGib(String originallyRequestedSizeGib) {
        this.originallyRequestedSizeGib = originallyRequestedSizeGib;
        return this;
    }
    
    /**
     * Immutable. Performance tier of the Volume. Default is SHARED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("performanceTier")
    public VolumePerformanceTierEnum performanceTier;
    public Volume withPerformanceTier(VolumePerformanceTierEnum performanceTier) {
        this.performanceTier = performanceTier;
        return this;
    }
    
    /**
     * Immutable. Pod name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pod")
    public String pod;
    public Volume withPod(String pod) {
        this.pod = pod;
        return this;
    }
    
    /**
     * Output only. Storage protocol for the Volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public VolumeProtocolEnum protocol;
    public Volume withProtocol(VolumeProtocolEnum protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingSpaceGib")
    public String remainingSpaceGib;
    public Volume withRemainingSpaceGib(String remainingSpaceGib) {
        this.remainingSpaceGib = remainingSpaceGib;
        return this;
    }
    
    /**
     * The requested size of this storage volume, in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedSizeGib")
    public String requestedSizeGib;
    public Volume withRequestedSizeGib(String requestedSizeGib) {
        this.requestedSizeGib = requestedSizeGib;
        return this;
    }
    
    /**
     * The behavior to use when snapshot reserved space is full.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotAutoDeleteBehavior")
    public VolumeSnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior;
    public Volume withSnapshotAutoDeleteBehavior(VolumeSnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior) {
        this.snapshotAutoDeleteBehavior = snapshotAutoDeleteBehavior;
        return this;
    }
    
    /**
     * Whether snapshots are enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotEnabled")
    public Boolean snapshotEnabled;
    public Volume withSnapshotEnabled(Boolean snapshotEnabled) {
        this.snapshotEnabled = snapshotEnabled;
        return this;
    }
    
    /**
     * Details about snapshot space reservation and usage on the storage volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotReservationDetail")
    public SnapshotReservationDetail snapshotReservationDetail;
    public Volume withSnapshotReservationDetail(SnapshotReservationDetail snapshotReservationDetail) {
        this.snapshotReservationDetail = snapshotReservationDetail;
        return this;
    }
    
    /**
     * The name of the snapshot schedule policy in use for this volume, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotSchedulePolicy")
    public String snapshotSchedulePolicy;
    public Volume withSnapshotSchedulePolicy(String snapshotSchedulePolicy) {
        this.snapshotSchedulePolicy = snapshotSchedulePolicy;
        return this;
    }
    
    /**
     * The state of this storage volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public VolumeStateEnum state;
    public Volume withState(VolumeStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageAggregatePool")
    public String storageAggregatePool;
    public Volume withStorageAggregatePool(String storageAggregatePool) {
        this.storageAggregatePool = storageAggregatePool;
        return this;
    }
    
    /**
     * The storage type for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageType")
    public VolumeStorageTypeEnum storageType;
    public Volume withStorageType(VolumeStorageTypeEnum storageType) {
        this.storageType = storageType;
        return this;
    }
    
    /**
     * The workload profile for the volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workloadProfile")
    public VolumeWorkloadProfileEnum workloadProfile;
    public Volume withWorkloadProfile(VolumeWorkloadProfileEnum workloadProfile) {
        this.workloadProfile = workloadProfile;
        return this;
    }
    
}
