/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * HistoryExportEntity - Show History Export
 */
public class HistoryExportEntity {
    /**
     * End date/time of export range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_at")
    public OffsetDateTime endAt;
    public HistoryExportEntity withEndAt(OffsetDateTime endAt) {
        this.endAt = endAt;
        return this;
    }
    
    /**
     * Version of the history for the export.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("history_version")
    public String historyVersion;
    public HistoryExportEntity withHistoryVersion(String historyVersion) {
        this.historyVersion = historyVersion;
        return this;
    }
    
    /**
     * History Export ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public HistoryExportEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_action")
    public String queryAction;
    public HistoryExportEntity withQueryAction(String queryAction) {
        this.queryAction = queryAction;
        return this;
    }
    
    /**
     * Return results that are file moves with this path as destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_destination")
    public String queryDestination;
    public HistoryExportEntity withQueryDestination(String queryDestination) {
        this.queryDestination = queryDestination;
        return this;
    }
    
    /**
     * If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_failure_type")
    public String queryFailureType;
    public HistoryExportEntity withQueryFailureType(String queryFailureType) {
        this.queryFailureType = queryFailureType;
        return this;
    }
    
    /**
     * Return results that are file actions related to the file indicated by this File ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_file_id")
    public String queryFileId;
    public HistoryExportEntity withQueryFileId(String queryFileId) {
        this.queryFileId = queryFileId;
        return this;
    }
    
    /**
     * Return results that are file actions related to files or folders inside this folder path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_folder")
    public String queryFolder;
    public HistoryExportEntity withQueryFolder(String queryFolder) {
        this.queryFolder = queryFolder;
        return this;
    }
    
    /**
     * Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_interface")
    public String queryInterface;
    public HistoryExportEntity withQueryInterface(String queryInterface) {
        this.queryInterface = queryInterface;
        return this;
    }
    
    /**
     * Filter results by this IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_ip")
    public String queryIp;
    public HistoryExportEntity withQueryIp(String queryIp) {
        this.queryIp = queryIp;
        return this;
    }
    
    /**
     * Return results that are file actions inside the parent folder specified by this folder ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_parent_id")
    public String queryParentId;
    public HistoryExportEntity withQueryParentId(String queryParentId) {
        this.queryParentId = queryParentId;
        return this;
    }
    
    /**
     * Return results that are file actions related to this path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_path")
    public String queryPath;
    public HistoryExportEntity withQueryPath(String queryPath) {
        this.queryPath = queryPath;
        return this;
    }
    
    /**
     * Return results that are file moves originating from this path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_src")
    public String querySrc;
    public HistoryExportEntity withQuerySrc(String querySrc) {
        this.querySrc = querySrc;
        return this;
    }
    
    /**
     * If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_id")
    public String queryTargetId;
    public HistoryExportEntity withQueryTargetId(String queryTargetId) {
        this.queryTargetId = queryTargetId;
        return this;
    }
    
    /**
     * If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_name")
    public String queryTargetName;
    public HistoryExportEntity withQueryTargetName(String queryTargetName) {
        this.queryTargetName = queryTargetName;
        return this;
    }
    
    /**
     * If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_permission")
    public String queryTargetPermission;
    public HistoryExportEntity withQueryTargetPermission(String queryTargetPermission) {
        this.queryTargetPermission = queryTargetPermission;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_permission_set")
    public String queryTargetPermissionSet;
    public HistoryExportEntity withQueryTargetPermissionSet(String queryTargetPermissionSet) {
        this.queryTargetPermissionSet = queryTargetPermissionSet;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_platform")
    public String queryTargetPlatform;
    public HistoryExportEntity withQueryTargetPlatform(String queryTargetPlatform) {
        this.queryTargetPlatform = queryTargetPlatform;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_user_id")
    public String queryTargetUserId;
    public HistoryExportEntity withQueryTargetUserId(String queryTargetUserId) {
        this.queryTargetUserId = queryTargetUserId;
        return this;
    }
    
    /**
     * If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_target_username")
    public String queryTargetUsername;
    public HistoryExportEntity withQueryTargetUsername(String queryTargetUsername) {
        this.queryTargetUsername = queryTargetUsername;
        return this;
    }
    
    /**
     * Return results that are actions performed by the user indiciated by this User ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_user_id")
    public String queryUserId;
    public HistoryExportEntity withQueryUserId(String queryUserId) {
        this.queryUserId = queryUserId;
        return this;
    }
    
    /**
     * Filter results by this username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_username")
    public String queryUsername;
    public HistoryExportEntity withQueryUsername(String queryUsername) {
        this.queryUsername = queryUsername;
        return this;
    }
    
    /**
     * If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results_url")
    public String resultsUrl;
    public HistoryExportEntity withResultsUrl(String resultsUrl) {
        this.resultsUrl = resultsUrl;
        return this;
    }
    
    /**
     * Start date/time of export range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_at")
    public OffsetDateTime startAt;
    public HistoryExportEntity withStartAt(OffsetDateTime startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * Status of export.  Will be: `building`, `ready`, or `failed`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public HistoryExportEntity withStatus(String status) {
        this.status = status;
        return this;
    }
    
}
