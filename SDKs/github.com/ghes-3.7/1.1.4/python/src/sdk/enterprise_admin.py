"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EnterpriseAdmin:
    r"""Enterprise Administration"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def enterprise_admin_add_authorized_ssh_key(self, request: operations.EnterpriseAdminAddAuthorizedSSHKeyRequestBody, server_url: Optional[str] = None) -> operations.EnterpriseAdminAddAuthorizedSSHKeyResponse:
        r"""Add an authorized SSH key
        **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#add-an-authorized-ssh-key - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_ADD_AUTHORIZED_SSH_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/settings/authorized-keys'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddAuthorizedSSHKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SSHKey]])
                res.ssh_keys = out

        return res

    def enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseResponse:
        r"""Add custom labels to a self-hosted runner for an enterprise
        Add custom labels to a self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""Add organization access to a self-hosted runner group in an enterprise
        Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_add_self_hosted_runner_to_group_for_enterprise(self, request: operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest) -> operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse:
        r"""Add a self-hosted runner to a group for an enterprise
        Adds a self-hosted runner to a runner group configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise`
        scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_create_enterprise_server_license(self, request: operations.EnterpriseAdminCreateEnterpriseServerLicenseRequestBody, server_url: Optional[str] = None) -> operations.EnterpriseAdminCreateEnterpriseServerLicenseResponse:
        r"""Create a GitHub license
        When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
        
        Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
        
        When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
        
        1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
        2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
        
        **Note:** The request body for this operation must be submitted as `multipart/form-data` data. You can can reference the license file by prefixing the filename with the `@` symbol using `curl`. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#-F).
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-a-github-enterprise-server-license - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_CREATE_ENTERPRISE_SERVER_LICENSE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/start'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateEnterpriseServerLicenseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_create_global_webhook(self, request: operations.EnterpriseAdminCreateGlobalWebhookRequestBody) -> operations.EnterpriseAdminCreateGlobalWebhookResponse:
        r"""Create a global webhook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/hooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalHook])
                res.global_hook = out

        return res

    def enterprise_admin_create_impersonation_o_auth_token(self, request: operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest) -> operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse:
        r"""Create an impersonation OAuth token
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-an-impersonation-oauth-token - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest, base_url, '/admin/users/{username}/authorizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Authorization])
                res.authorization = out

        return res

    def enterprise_admin_create_org(self, request: operations.EnterpriseAdminCreateOrgRequestBody) -> operations.EnterpriseAdminCreateOrgResponse:
        r"""Create an organization
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/organizations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationSimple])
                res.organization_simple = out

        return res

    def enterprise_admin_create_pre_receive_environment(self, request: operations.EnterpriseAdminCreatePreReceiveEnvironmentRequestBody) -> operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse:
        r"""Create a pre-receive environment
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/pre-receive-environments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironment])
                res.pre_receive_environment = out

        return res

    def enterprise_admin_create_pre_receive_hook(self, request: operations.EnterpriseAdminCreatePreReceiveHookRequestBody) -> operations.EnterpriseAdminCreatePreReceiveHookResponse:
        r"""Create a pre-receive hook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-a-pre-receive-hook - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/pre-receive-hooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreatePreReceiveHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveHook])
                res.pre_receive_hook = out

        return res

    def enterprise_admin_create_registration_token_for_enterprise(self, request: operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest) -> operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse:
        r"""Create a registration token for an enterprise
        Returns a token that you can pass to the `config` script. The token expires after one hour.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        
        #### Example using registration token
        
        Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        
        ```
        ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
        ```
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#create-a-registration-token-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/registration-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def enterprise_admin_create_remove_token_for_enterprise(self, request: operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest) -> operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse:
        r"""Create a remove token for an enterprise
        Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        
        #### Example using remove token
        
        To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
        endpoint.
        
        ```
        ./config.sh remove --token TOKEN
        ```
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#create-a-remove-token-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/remove-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def enterprise_admin_create_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Create a self-hosted runner group for an enterprise
        Creates a new self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_create_user(self, request: operations.EnterpriseAdminCreateUserRequestBody) -> operations.EnterpriseAdminCreateUserResponse:
        r"""Create a user
        If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
        
        The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `\"octo_cat\"` as the login, a user named `\"octo-cat\"` will be created.
        
        If the login name or email address is already associated with an account, the server will return a `422` response.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#create-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SimpleUser])
                res.simple_user = out

        return res

    def enterprise_admin_delete_global_webhook(self, request: operations.EnterpriseAdminDeleteGlobalWebhookRequest) -> operations.EnterpriseAdminDeleteGlobalWebhookResponse:
        r"""Delete a global webhook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_impersonation_o_auth_token(self, request: operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest) -> operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse:
        r"""Delete an impersonation OAuth token
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest, base_url, '/admin/users/{username}/authorizations', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_personal_access_token(self, request: operations.EnterpriseAdminDeletePersonalAccessTokenRequest) -> operations.EnterpriseAdminDeletePersonalAccessTokenResponse:
        r"""Delete a personal access token
        Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-personal-access-token - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePersonalAccessTokenRequest, base_url, '/admin/tokens/{token_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePersonalAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_pre_receive_environment(self, request: operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest) -> operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse:
        r"""Delete a pre-receive environment
        If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
        
        The possible error messages are:
        
        *   _Cannot modify or delete the default environment_
        *   _Cannot delete environment that has hooks_
        *   _Cannot delete environment when download is in progress_
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminDeletePreReceiveEnvironment422ApplicationJSON])
                res.enterprise_admin_delete_pre_receive_environment_422_application_json_object = out

        return res

    def enterprise_admin_delete_pre_receive_hook(self, request: operations.EnterpriseAdminDeletePreReceiveHookRequest) -> operations.EnterpriseAdminDeletePreReceiveHookResponse:
        r"""Delete a pre-receive hook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-pre-receive-hook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePreReceiveHookRequest, base_url, '/admin/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePreReceiveHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_public_key(self, request: operations.EnterpriseAdminDeletePublicKeyRequest) -> operations.EnterpriseAdminDeletePublicKeyResponse:
        r"""Delete a public key
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePublicKeyRequest, base_url, '/admin/keys/{key_ids}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_scim_group_from_enterprise(self, request: operations.EnterpriseAdminDeleteScimGroupFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteScimGroupFromEnterpriseResponse:
        r"""Delete a SCIM group from an enterprise
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
         Deletes a SCIM group from an enterprise.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteScimGroupFromEnterpriseRequest, base_url, '/scim/v2/Groups/{scim_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteScimGroupFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 401, 403]:
            pass
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_delete_self_hosted_runner_from_enterprise(self, request: operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse:
        r"""Delete a self-hosted runner from an enterprise
        Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_self_hosted_runner_group_from_enterprise(self, request: operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse:
        r"""Delete a self-hosted runner group from an enterprise
        Deletes a self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_user(self, request: operations.EnterpriseAdminDeleteUserRequest) -> operations.EnterpriseAdminDeleteUserResponse:
        r"""Delete a user
        Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
        
        You can delete any user account except your own.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteUserRequest, base_url, '/admin/users/{username}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_user_from_enterprise(self, request: operations.EnterpriseAdminDeleteUserFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteUserFromEnterpriseResponse:
        r"""Delete a SCIM user from an enterprise
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Permanently suspends a SCIM user from an enterprise, removes all data for the user, obfuscates the login, email, and display name of the user, removes all external-identity SCIM attributes, and deletes the emails, avatar, PATs, SSH keys, OAuth authorizations credentials, GPG keys, and SAML mappings for the user. You will not be able to undo this action.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteUserFromEnterpriseRequest, base_url, '/scim/v2/Users/{scim_user_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteUserFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 401, 403]:
            pass
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_demote_site_administrator(self, request: operations.EnterpriseAdminDemoteSiteAdministratorRequest) -> operations.EnterpriseAdminDemoteSiteAdministratorResponse:
        r"""Demote a site administrator
        You can demote any user account except your own.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#demote-a-site-administrator - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDemoteSiteAdministratorRequest, base_url, '/users/{username}/site_admin', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDemoteSiteAdministratorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_disable_selected_organization_github_actions_enterprise(self, request: operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse:
        r"""Disable a selected organization for GitHub Actions in an enterprise
        Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_enable_or_disable_maintenance_mode(self, request: operations.EnterpriseAdminEnableOrDisableMaintenanceModeRequestBody, server_url: Optional[str] = None) -> operations.EnterpriseAdminEnableOrDisableMaintenanceModeResponse:
        r"""Enable or disable maintenance mode
        **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_ENABLE_OR_DISABLE_MAINTENANCE_MODE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/maintenance'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminEnableOrDisableMaintenanceModeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MaintenanceStatus])
                res.maintenance_status = out

        return res

    def enterprise_admin_enable_selected_organization_github_actions_enterprise(self, request: operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse:
        r"""Enable a selected organization for GitHub Actions in an enterprise
        Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_get_all_authorized_ssh_keys(self, server_url: Optional[str] = None) -> operations.EnterpriseAdminGetAllAuthorizedSSHKeysResponse:
        r"""Get all authorized SSH keys
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-all-authorized-ssh-keys - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_GET_ALL_AUTHORIZED_SSH_KEYS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/settings/authorized-keys'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAllAuthorizedSSHKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SSHKey]])
                res.ssh_keys = out

        return res

    def enterprise_admin_get_all_stats(self) -> operations.EnterpriseAdminGetAllStatsResponse:
        r"""Get all statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/all'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAllStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseOverview])
                res.enterprise_overview = out

        return res

    def enterprise_admin_get_allowed_actions_enterprise(self, request: operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest) -> operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse:
        r"""Get allowed actions for an enterprise
        Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#get-allowed-actions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/selected-actions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SelectedActions])
                res.selected_actions = out

        return res

    def enterprise_admin_get_announcement(self) -> operations.EnterpriseAdminGetAnnouncementResponse:
        r"""Get the global announcement banner
        Gets the current message and expiration date of the global announcement banner in your enterprise.
        https://docs.github.com/enterprise-server@3.7/rest/enterprise-admin/announcement#get-the-global-announcement-banner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/announcement'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Announcement])
                res.announcement = out

        return res

    def enterprise_admin_get_audit_log(self, request: operations.EnterpriseAdminGetAuditLogRequest) -> operations.EnterpriseAdminGetAuditLogResponse:
        r"""Get the audit log for an enterprise
        Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetAuditLogRequest, base_url, '/enterprises/{enterprise}/audit-log', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminGetAuditLogRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAuditLogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogEvent]])
                res.audit_log_events = out

        return res

    def enterprise_admin_get_comment_stats(self) -> operations.EnterpriseAdminGetCommentStatsResponse:
        r"""Get comment statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-comment-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/comments'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetCommentStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseCommentOverview])
                res.enterprise_comment_overview = out

        return res

    def enterprise_admin_get_configuration_status(self, server_url: Optional[str] = None) -> operations.EnterpriseAdminGetConfigurationStatusResponse:
        r"""Get the configuration status
        This endpoint allows you to check the status of the most recent configuration process:
        
        Note that you may need to wait several seconds after you start a process before you can check its status.
        
        The different statuses are:
        
        | Status        | Description                       |
        | ------------- | --------------------------------- |
        | `PENDING`     | The job has not started yet       |
        | `CONFIGURING` | The job is running                |
        | `DONE`        | The job has finished correctly    |
        | `FAILED`      | The job has finished unexpectedly |
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-the-configuration-status - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_GET_CONFIGURATION_STATUS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/configcheck'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetConfigurationStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigurationStatus])
                res.configuration_status = out

        return res

    def enterprise_admin_get_download_status_for_pre_receive_environment(self, request: operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest) -> operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse:
        r"""Get the download status for a pre-receive environment
        In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironmentDownloadStatus])
                res.pre_receive_environment_download_status = out

        return res

    def enterprise_admin_get_gist_stats(self) -> operations.EnterpriseAdminGetGistStatsResponse:
        r"""Get gist statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-gist-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/gists'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGistStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseGistOverview])
                res.enterprise_gist_overview = out

        return res

    def enterprise_admin_get_github_actions_permissions_enterprise(self, request: operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest) -> operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse:
        r"""Get GitHub Actions permissions for an enterprise
        Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#get-github-actions-permissions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsEnterprisePermissions])
                res.actions_enterprise_permissions = out

        return res

    def enterprise_admin_get_global_webhook(self, request: operations.EnterpriseAdminGetGlobalWebhookRequest) -> operations.EnterpriseAdminGetGlobalWebhookResponse:
        r"""Get a global webhook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalHook])
                res.global_hook = out

        return res

    def enterprise_admin_get_hooks_stats(self) -> operations.EnterpriseAdminGetHooksStatsResponse:
        r"""Get hooks statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-hooks-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/hooks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetHooksStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseHookOverview])
                res.enterprise_hook_overview = out

        return res

    def enterprise_admin_get_issue_stats(self) -> operations.EnterpriseAdminGetIssueStatsResponse:
        r"""Get issue statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-issues-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/issues'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetIssueStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseIssueOverview])
                res.enterprise_issue_overview = out

        return res

    def enterprise_admin_get_license_information(self) -> operations.EnterpriseAdminGetLicenseInformationResponse:
        r"""Get license information
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-license-information - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/settings/license'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetLicenseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseInfo])
                res.license_info = out

        return res

    def enterprise_admin_get_maintenance_status(self, server_url: Optional[str] = None) -> operations.EnterpriseAdminGetMaintenanceStatusResponse:
        r"""Get the maintenance status
        Check your installation's maintenance status:
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-the-maintenance-status - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_GET_MAINTENANCE_STATUS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/maintenance'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetMaintenanceStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MaintenanceStatus])
                res.maintenance_status = out

        return res

    def enterprise_admin_get_milestone_stats(self) -> operations.EnterpriseAdminGetMilestoneStatsResponse:
        r"""Get milestone statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-milestone-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/milestones'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetMilestoneStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseMilestoneOverview])
                res.enterprise_milestone_overview = out

        return res

    def enterprise_admin_get_org_stats(self) -> operations.EnterpriseAdminGetOrgStatsResponse:
        r"""Get organization statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-organization-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/orgs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetOrgStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseOrganizationOverview])
                res.enterprise_organization_overview = out

        return res

    def enterprise_admin_get_pages_stats(self) -> operations.EnterpriseAdminGetPagesStatsResponse:
        r"""Get pages statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-pages-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/pages'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPagesStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterprisePageOverview])
                res.enterprise_page_overview = out

        return res

    def enterprise_admin_get_pre_receive_environment(self, request: operations.EnterpriseAdminGetPreReceiveEnvironmentRequest) -> operations.EnterpriseAdminGetPreReceiveEnvironmentResponse:
        r"""Get a pre-receive environment
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetPreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironment])
                res.pre_receive_environment = out

        return res

    def enterprise_admin_get_pre_receive_hook(self, request: operations.EnterpriseAdminGetPreReceiveHookRequest) -> operations.EnterpriseAdminGetPreReceiveHookResponse:
        r"""Get a pre-receive hook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-a-pre-receive-hook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetPreReceiveHookRequest, base_url, '/admin/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPreReceiveHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveHook])
                res.pre_receive_hook = out

        return res

    def enterprise_admin_get_pre_receive_hook_for_org(self, request: operations.EnterpriseAdminGetPreReceiveHookForOrgRequest) -> operations.EnterpriseAdminGetPreReceiveHookForOrgResponse:
        r"""Get a pre-receive hook for an organization
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetPreReceiveHookForOrgRequest, base_url, '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPreReceiveHookForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgPreReceiveHook])
                res.org_pre_receive_hook = out

        return res

    def enterprise_admin_get_pre_receive_hook_for_repo(self, request: operations.EnterpriseAdminGetPreReceiveHookForRepoRequest) -> operations.EnterpriseAdminGetPreReceiveHookForRepoResponse:
        r"""Get a pre-receive hook for a repository
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetPreReceiveHookForRepoRequest, base_url, '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPreReceiveHookForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RepositoryPreReceiveHook])
                res.repository_pre_receive_hook = out

        return res

    def enterprise_admin_get_provisioning_information_for_enterprise_group(self, request: operations.EnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest) -> operations.EnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse:
        r"""Get SCIM provisioning information for an enterprise group
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Gets information about a SCIM group.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest, base_url, '/scim/v2/Groups/{scim_group_id}', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseGroupResponse])
                res.scim_enterprise_group_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_get_provisioning_information_for_enterprise_user(self, request: operations.EnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest) -> operations.EnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse:
        r"""Get SCIM provisioning information for an enterprise user
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Gets information about a SCIM user.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest, base_url, '/scim/v2/Users/{scim_user_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseUserResponse])
                res.scim_enterprise_user_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_get_pull_request_stats(self) -> operations.EnterpriseAdminGetPullRequestStatsResponse:
        r"""Get pull request statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-pull-requests-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/pulls'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPullRequestStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterprisePullRequestOverview])
                res.enterprise_pull_request_overview = out

        return res

    def enterprise_admin_get_repo_stats(self) -> operations.EnterpriseAdminGetRepoStatsResponse:
        r"""Get repository statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-repository-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/repos'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetRepoStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseRepositoryOverview])
                res.enterprise_repository_overview = out

        return res

    def enterprise_admin_get_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse:
        r"""Get a self-hosted runner for an enterprise
        Gets a specific self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Runner])
                res.runner = out

        return res

    def enterprise_admin_get_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Get a self-hosted runner group for an enterprise
        Gets a specific self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_get_settings(self, server_url: Optional[str] = None) -> operations.EnterpriseAdminGetSettingsResponse:
        r"""Get settings
        Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#set-settings).
        
        **Note:** You cannot retrieve the management console password with the Enterprise administration API.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-settings - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_GET_SETTINGS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/settings'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseSettings])
                res.enterprise_settings = out

        return res

    def enterprise_admin_get_user_stats(self) -> operations.EnterpriseAdminGetUserStatsResponse:
        r"""Get users statistics
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-users-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/users'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetUserStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseUserOverview])
                res.enterprise_user_overview = out

        return res

    def enterprise_admin_list_global_webhooks(self, request: operations.EnterpriseAdminListGlobalWebhooksRequest) -> operations.EnterpriseAdminListGlobalWebhooksResponse:
        r"""List global webhooks
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-global-webhooks - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/hooks'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListGlobalWebhooksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListGlobalWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GlobalHook]])
                res.global_hooks = out

        return res

    def enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseResponse:
        r"""List labels for a self-hosted runner for an enterprise
        Lists all labels for a self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""List organization access to a self-hosted runner group in an enterprise
        Lists the organizations with access to a self-hosted runner group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise200ApplicationJSON])
                res.enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_personal_access_tokens(self, request: operations.EnterpriseAdminListPersonalAccessTokensRequest) -> operations.EnterpriseAdminListPersonalAccessTokensResponse:
        r"""List personal access tokens
        Lists personal access tokens for all users, including admin users.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-personal-access-tokens - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/tokens'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPersonalAccessTokensRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPersonalAccessTokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Authorization]])
                res.authorizations = out

        return res

    def enterprise_admin_list_pre_receive_environments(self, request: operations.EnterpriseAdminListPreReceiveEnvironmentsRequest) -> operations.EnterpriseAdminListPreReceiveEnvironmentsResponse:
        r"""List pre-receive environments
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-pre-receive-environments - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/pre-receive-environments'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPreReceiveEnvironmentsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPreReceiveEnvironmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PreReceiveEnvironment]])
                res.pre_receive_environments = out

        return res

    def enterprise_admin_list_pre_receive_hooks(self, request: operations.EnterpriseAdminListPreReceiveHooksRequest) -> operations.EnterpriseAdminListPreReceiveHooksResponse:
        r"""List pre-receive hooks
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-pre-receive-hooks - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/pre-receive-hooks'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPreReceiveHooksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPreReceiveHooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PreReceiveHook]])
                res.pre_receive_hooks = out

        return res

    def enterprise_admin_list_pre_receive_hooks_for_org(self, request: operations.EnterpriseAdminListPreReceiveHooksForOrgRequest) -> operations.EnterpriseAdminListPreReceiveHooksForOrgResponse:
        r"""List pre-receive hooks for an organization
        List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListPreReceiveHooksForOrgRequest, base_url, '/orgs/{org}/pre-receive-hooks', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPreReceiveHooksForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPreReceiveHooksForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrgPreReceiveHook]])
                res.org_pre_receive_hooks = out

        return res

    def enterprise_admin_list_pre_receive_hooks_for_repo(self, request: operations.EnterpriseAdminListPreReceiveHooksForRepoRequest) -> operations.EnterpriseAdminListPreReceiveHooksForRepoResponse:
        r"""List pre-receive hooks for a repository
        List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListPreReceiveHooksForRepoRequest, base_url, '/repos/{owner}/{repo}/pre-receive-hooks', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPreReceiveHooksForRepoRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPreReceiveHooksForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RepositoryPreReceiveHook]])
                res.repository_pre_receive_hooks = out

        return res

    def enterprise_admin_list_provisioned_groups_enterprise(self, request: operations.EnterpriseAdminListProvisionedGroupsEnterpriseRequest) -> operations.EnterpriseAdminListProvisionedGroupsEnterpriseResponse:
        r"""List provisioned SCIM groups for an enterprise
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Lists provisioned SCIM groups in an enterprise.
        
        You can improve query search time by using the `excludedAttributes` query parameter with a value of `members` to exclude members from the response.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scim/v2/Groups'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListProvisionedGroupsEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListProvisionedGroupsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseGroupList])
                res.scim_enterprise_group_list = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def enterprise_admin_list_provisioned_identities_enterprise(self, request: operations.EnterpriseAdminListProvisionedIdentitiesEnterpriseRequest) -> operations.EnterpriseAdminListProvisionedIdentitiesEnterpriseResponse:
        r"""List SCIM provisioned identities for an enterprise
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Lists provisioned SCIM enterprise members.
        
        When a user with a SCIM-provisioned external identity is removed from an enterprise through a `patch` with `active` flag set to `false`, the account's metadata is preserved to allow the user to re-join the enterprise in the future. However, the user's account will be suspended and the user will not be able to sign-in. In order to permanently suspend the users account with no ability to re-join the enterprise in the future, use the `delete` request. Users that were not permanently deleted will be visible in the returned results.
        
        You can improve query search time by using the `excludedAttributes` query parameter with a value of `groups` to exclude groups from the response.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scim/v2/Users'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListProvisionedIdentitiesEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListProvisionedIdentitiesEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseUserList])
                res.scim_enterprise_user_list = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def enterprise_admin_list_public_keys(self, request: operations.EnterpriseAdminListPublicKeysRequest) -> operations.EnterpriseAdminListPublicKeysResponse:
        r"""List public keys
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#list-public-keys - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/keys'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPublicKeysRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPublicKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PublicKeyFull]])
                res.public_key_fulls = out

        return res

    def enterprise_admin_list_runner_applications_for_enterprise(self, request: operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest) -> operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse:
        r"""List runner applications for an enterprise
        Lists binaries for the runner application that you can download and run.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-runner-applications-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RunnerApplication]])
                res.runner_applications = out

        return res

    def enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise(self, request: operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse:
        r"""List selected organizations enabled for GitHub Actions in an enterprise
        Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSON])
                res.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runner_groups_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse:
        r"""List self-hosted runner groups for an enterprise
        Lists all self-hosted runner groups for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runners_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse:
        r"""List self-hosted runners for an enterprise
        Lists all self-hosted runners configured for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-self-hosted-runners-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runners_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runners_in_group_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse:
        r"""List self-hosted runners in a group for an enterprise
        Lists the self-hosted runners that are in a specific enterprise group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_ping_global_webhook(self, request: operations.EnterpriseAdminPingGlobalWebhookRequest) -> operations.EnterpriseAdminPingGlobalWebhookResponse:
        r"""Ping a global webhook
        This will trigger a [ping event](https://docs.github.com/enterprise-server@3.7/webhooks/#ping-event) to be sent to the webhook.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#ping-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminPingGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}/pings', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminPingGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_promote_user_to_be_site_administrator(self, request: operations.EnterpriseAdminPromoteUserToBeSiteAdministratorRequest) -> operations.EnterpriseAdminPromoteUserToBeSiteAdministratorResponse:
        r"""Promote a user to be a site administrator
        Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.7/rest/overview/resources-in-the-rest-api#http-verbs).\" 
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminPromoteUserToBeSiteAdministratorRequest, base_url, '/users/{username}/site_admin', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminPromoteUserToBeSiteAdministratorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_provision_enterprise_group(self, request: shared.Group) -> operations.EnterpriseAdminProvisionEnterpriseGroupResponse:
        r"""Provision a SCIM enterprise group
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Creates a SCIM group for an enterprise.
        
        If members are included as part of the group provisioning payload, they will be created as external group members. It is up to a provider to store a mapping between the `externalId` and `id` of each user.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#provision-a-scim-enterprise-group - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scim/v2/Groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminProvisionEnterpriseGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseGroupResponse])
                res.scim_enterprise_group_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 409]:
            pass

        return res

    def enterprise_admin_provision_enterprise_user(self, request: shared.User) -> operations.EnterpriseAdminProvisionEnterpriseUserResponse:
        r"""Provision a SCIM enterprise user
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Creates an external identity for a new SCIM enterprise user.
        
        SCIM does not authenticate users, it only provisions them. The authentication of users is done by SAML. However, when SCIM is enabled, all users need to be provisioned through SCIM before a user can sign in through SAML. The matching of a user to a SCIM provisioned user is done when the SAML assertion is consumed. The user will be matched on SAML response `NameID` to SCIM `userName`.
        
        When converting existing enterprise to use SCIM, the user handle (`userName`) from the SCIM payload will be used to match the provisioned user to an already existing user in the enterprise. Since the new identity record is created for newly provisioned users the matching for those records is done using a user's handle. Currently the matching will be performed to all of the users no matter if they were SAML JIT provisioned or created as local users.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#provision-a-scim-enterprise-user - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scim/v2/Users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminProvisionEnterpriseUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseUserResponse])
                res.scim_enterprise_user_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 409]:
            pass

        return res

    def enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseResponse:
        r"""Remove all custom labels from a self-hosted runner for an enterprise
        Remove all custom labels from a self-hosted runner configured in an
        enterprise. Returns the remaining read-only labels from the runner.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_remove_announcement(self) -> operations.EnterpriseAdminRemoveAnnouncementResponse:
        r"""Remove the global announcement banner
        Removes the global announcement banner in your enterprise.
        https://docs.github.com/enterprise-server@3.7/rest/enterprise-admin/announcement#remove-the-global-announcement-banner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/announcement'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_remove_authorized_ssh_key(self, request: operations.EnterpriseAdminRemoveAuthorizedSSHKeyRequestBody, server_url: Optional[str] = None) -> operations.EnterpriseAdminRemoveAuthorizedSSHKeyResponse:
        r"""Remove an authorized SSH key
        **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#remove-an-authorized-ssh-key - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_REMOVE_AUTHORIZED_SSH_KEY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/settings/authorized-keys'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveAuthorizedSSHKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SSHKey]])
                res.ssh_keys = out

        return res

    def enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseResponse:
        r"""Remove a custom label from a self-hosted runner for an enterprise
        Remove a custom label from a self-hosted runner configured
        in an enterprise. Returns the remaining labels from the runner.
        
        This endpoint returns a `404 Not Found` status if the custom label is not
        present on the runner.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""Remove organization access to a self-hosted runner group in an enterprise
        Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_remove_pre_receive_hook_enforcement_for_org(self, request: operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest) -> operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse:
        r"""Remove pre-receive hook enforcement for an organization
        Removes any overrides for this hook at the org level for this org.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgRequest, base_url, '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemovePreReceiveHookEnforcementForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgPreReceiveHook])
                res.org_pre_receive_hook = out

        return res

    def enterprise_admin_remove_pre_receive_hook_enforcement_for_repo(self, request: operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest) -> operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse:
        r"""Remove pre-receive hook enforcement for a repository
        Deletes any overridden enforcement on this repository for the specified hook.
        
        Responds with effective values inherited from owner and/or global level.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoRequest, base_url, '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemovePreReceiveHookEnforcementForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RepositoryPreReceiveHook])
                res.repository_pre_receive_hook = out

        return res

    def enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise(self, request: operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest) -> operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse:
        r"""Remove a self-hosted runner from a group for an enterprise
        Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_allowed_actions_enterprise(self, request: operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest) -> operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse:
        r"""Set allowed actions for an enterprise
        Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#set-allowed-actions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/selected-actions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "selected_actions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_announcement(self, request: shared.Announcement) -> operations.EnterpriseAdminSetAnnouncementResponse:
        r"""Set the global announcement banner
        Sets the message and expiration time for the global announcement banner in your enterprise.
        https://docs.github.com/enterprise-server@3.7/rest/enterprise-admin/announcement#set-the-global-announcement-banner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/announcement'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Announcement])
                res.announcement = out

        return res

    def enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseResponse:
        r"""Set custom labels for a self-hosted runner for an enterprise
        Remove all previous custom labels and set the new custom labels for a specific
        self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_set_github_actions_permissions_enterprise(self, request: operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) -> operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse:
        r"""Set GitHub Actions permissions for an enterprise
        Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#set-github-actions-permissions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_information_for_provisioned_enterprise_group(self, request: operations.EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest) -> operations.EnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse:
        r"""Set SCIM information for a provisioned enterprise group
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Replaces an existing provisioned group’s information.
        
        You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest, base_url, '/scim/v2/Groups/{scim_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseGroupResponse])
                res.scim_enterprise_group_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 409]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_set_information_for_provisioned_enterprise_user(self, request: operations.EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest) -> operations.EnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse:
        r"""Set SCIM information for a provisioned enterprise user
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Replaces an existing provisioned user's information.
        
        You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-a-scim-enterprise-user) endpoint instead.
        
        **Warning:** Setting `active: false` will suspend a user and obfuscate the user handle and user email. Since the implementation is a generic SCIM implementation and does not differentiate yet between different IdP providers, for Okta, the user GDPR data will not be purged and the credentials will not be removed.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest, base_url, '/scim/v2/Users/{scim_user_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseUserResponse])
                res.scim_enterprise_user_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 409]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""Set organization access for a self-hosted runner group in an enterprise
        Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise(self, request: operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse:
        r"""Set selected organizations enabled for GitHub Actions in an enterprise
        Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_self_hosted_runners_in_group_for_enterprise(self, request: operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) -> operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse:
        r"""Set self-hosted runners in a group for an enterprise
        Replaces the list of self-hosted runners that are part of an enterprise runner group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_settings(self, request: operations.EnterpriseAdminSetSettingsRequestBody, server_url: Optional[str] = None) -> operations.EnterpriseAdminSetSettingsResponse:
        r"""Set settings
        Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#get-settings).
        
        **Notes:**
        
        - The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
        - You cannot set the management console password with the Enterprise administration API. Use the `ghe-set-password` utility to change the management console password. For more information, see \"[Command-line utilities](https://docs.github.com/enterprise-server@3.7/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password).\" 
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#set-settings - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_SET_SETTINGS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/settings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_start_configuration_process(self, server_url: Optional[str] = None) -> operations.EnterpriseAdminStartConfigurationProcessResponse:
        r"""Start a configuration process
        This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#start-a-configuration-process - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_START_CONFIGURATION_PROCESS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/configure'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminStartConfigurationProcessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_start_pre_receive_environment_download(self, request: operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest) -> operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse:
        r"""Start a pre-receive environment download
        Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
        
        If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
        
        The possible error messages are:
        
        * _Cannot modify or delete the default environment_
        * _Can not start a new download when a download is in progress_
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#start-a-pre-receive-environment-download - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironmentDownloadStatus])
                res.pre_receive_environment_download_status = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSON])
                res.enterprise_admin_start_pre_receive_environment_download_422_application_json_object = out

        return res

    def enterprise_admin_suspend_user(self, request: operations.EnterpriseAdminSuspendUserRequest) -> operations.EnterpriseAdminSuspendUserResponse:
        r"""Suspend a user
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.7/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
        
        You can suspend any user account except your own.
        
        Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.7/rest/overview/resources-in-the-rest-api#http-verbs).\" 
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#suspend-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSuspendUserRequest, base_url, '/users/{username}/suspended', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_sync_ldap_mapping_for_team(self, request: operations.EnterpriseAdminSyncLdapMappingForTeamRequest) -> operations.EnterpriseAdminSyncLdapMappingForTeamResponse:
        r"""Sync LDAP mapping for a team
        Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSyncLdapMappingForTeamRequest, base_url, '/admin/ldap/teams/{team_id}/sync', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSyncLdapMappingForTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminSyncLdapMappingForTeam201ApplicationJSON])
                res.enterprise_admin_sync_ldap_mapping_for_team_201_application_json_object = out

        return res

    def enterprise_admin_sync_ldap_mapping_for_user(self, request: operations.EnterpriseAdminSyncLdapMappingForUserRequest) -> operations.EnterpriseAdminSyncLdapMappingForUserResponse:
        r"""Sync LDAP mapping for a user
        Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSyncLdapMappingForUserRequest, base_url, '/admin/ldap/users/{username}/sync', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSyncLdapMappingForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminSyncLdapMappingForUser201ApplicationJSON])
                res.enterprise_admin_sync_ldap_mapping_for_user_201_application_json_object = out

        return res

    def enterprise_admin_unsuspend_user(self, request: operations.EnterpriseAdminUnsuspendUserRequest) -> operations.EnterpriseAdminUnsuspendUserResponse:
        r"""Unsuspend a user
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.7/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#unsuspend-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUnsuspendUserRequest, base_url, '/users/{username}/suspended', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUnsuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_update_attribute_for_enterprise_group(self, request: operations.EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest) -> operations.EnterpriseAdminUpdateAttributeForEnterpriseGroupResponse:
        r"""Update an attribute for a SCIM enterprise group
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Update a provisioned group’s individual attributes.
        
        To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).  Update can also be used to add group memberships.
        
        Group memberships can be sent one at a time or in batches for faster performance. **Note**: The memberships are referenced through a local user `id`, and the user will need to be created before they are referenced here.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest, base_url, '/scim/v2/Groups/{scim_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_schema", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateAttributeForEnterpriseGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseGroupResponse])
                res.scim_enterprise_group_response = out
        elif http_res.status_code in [204, 401, 403, 409]:
            pass
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_update_attribute_for_enterprise_user(self, request: operations.EnterpriseAdminUpdateAttributeForEnterpriseUserRequest) -> operations.EnterpriseAdminUpdateAttributeForEnterpriseUserResponse:
        r"""Update an attribute for a SCIM enterprise user
        **Note:** The SCIM API endpoints for enterprise accounts are currently in *private* beta and are subject to change.
        
        Update a provisioned user's individual attributes.
        
        To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        
        **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\"work\\"]\"` will not work.
        
        **Warning:** Setting `active: false` will suspend a user and obfuscate the user handle and user email. Since the implementation is a generic SCIM implementation and does not differentiate yet between different IdP providers, for Okta, the user GDPR data will not be purged and the credentials will not be removed.
        ```
        {
          \"Operations\":[{
            \"op\":\"replace\",
            \"value\":{
              \"active\":false
            }
          }]
        }
        ```
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateAttributeForEnterpriseUserRequest, base_url, '/scim/v2/Users/{scim_user_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_schema", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateAttributeForEnterpriseUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimEnterpriseUserResponse])
                res.scim_enterprise_user_response = out
        elif http_res.status_code in [400, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 409]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_update_global_webhook(self, request: operations.EnterpriseAdminUpdateGlobalWebhookRequest) -> operations.EnterpriseAdminUpdateGlobalWebhookResponse:
        r"""Update a global webhook
        Parameters that are not provided will be overwritten with the default value or removed if no default exists.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalHook2])
                res.global_hook_2 = out

        return res

    def enterprise_admin_update_ldap_mapping_for_team(self, request: operations.EnterpriseAdminUpdateLdapMappingForTeamRequest) -> operations.EnterpriseAdminUpdateLdapMappingForTeamResponse:
        r"""Update LDAP mapping for a team
        Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.7/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.7/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateLdapMappingForTeamRequest, base_url, '/admin/ldap/teams/{team_id}/mapping', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateLdapMappingForTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LdapMappingTeam])
                res.ldap_mapping_team = out

        return res

    def enterprise_admin_update_ldap_mapping_for_user(self, request: operations.EnterpriseAdminUpdateLdapMappingForUserRequest) -> operations.EnterpriseAdminUpdateLdapMappingForUserResponse:
        r"""Update LDAP mapping for a user
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateLdapMappingForUserRequest, base_url, '/admin/ldap/users/{username}/mapping', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateLdapMappingForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LdapMappingUser])
                res.ldap_mapping_user = out

        return res

    def enterprise_admin_update_org_name(self, request: operations.EnterpriseAdminUpdateOrgNameRequest) -> operations.EnterpriseAdminUpdateOrgNameResponse:
        r"""Update an organization name
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-an-organization-name - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateOrgNameRequest, base_url, '/admin/organizations/{org}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateOrgNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminUpdateOrgName202ApplicationJSON])
                res.enterprise_admin_update_org_name_202_application_json_object = out

        return res

    def enterprise_admin_update_pre_receive_environment(self, request: operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest) -> operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse:
        r"""Update a pre-receive environment
        You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironment])
                res.pre_receive_environment = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSON])
                res.enterprise_admin_update_pre_receive_environment_422_application_json_object = out

        return res

    def enterprise_admin_update_pre_receive_hook(self, request: operations.EnterpriseAdminUpdatePreReceiveHookRequest) -> operations.EnterpriseAdminUpdatePreReceiveHookResponse:
        r"""Update a pre-receive hook
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-a-pre-receive-hook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdatePreReceiveHookRequest, base_url, '/admin/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdatePreReceiveHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveHook])
                res.pre_receive_hook = out

        return res

    def enterprise_admin_update_pre_receive_hook_enforcement_for_org(self, request: operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest) -> operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse:
        r"""Update pre-receive hook enforcement for an organization
        For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, base_url, '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgPreReceiveHook])
                res.org_pre_receive_hook = out

        return res

    def enterprise_admin_update_pre_receive_hook_enforcement_for_repo(self, request: operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest) -> operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse:
        r"""Update pre-receive hook enforcement for a repository
        For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, base_url, '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RepositoryPreReceiveHook])
                res.repository_pre_receive_hook = out

        return res

    def enterprise_admin_update_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Update a self-hosted runner group for an enterprise
        Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-server@3.7/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_update_username_for_user(self, request: operations.EnterpriseAdminUpdateUsernameForUserRequest) -> operations.EnterpriseAdminUpdateUsernameForUserResponse:
        r"""Update the username for a user
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#update-the-username-for-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateUsernameForUserRequest, base_url, '/admin/users/{username}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateUsernameForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminUpdateUsernameForUser202ApplicationJSON])
                res.enterprise_admin_update_username_for_user_202_application_json_object = out

        return res

    def enterprise_admin_upgrade_license(self, request: operations.EnterpriseAdminUpgradeLicenseRequestBody, server_url: Optional[str] = None) -> operations.EnterpriseAdminUpgradeLicenseResponse:
        r"""Upgrade a license
        This API upgrades your license and also triggers the configuration process.
        
        **Note:** The request body for this operation must be submitted as `multipart/form-data` data. You can can reference the license file by prefixing the filename with the `@` symbol using `curl`. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#-F).
        https://docs.github.com/enterprise-server@3.7/rest/reference/enterprise-admin#upgrade-a-license - API method documentation
        """
        base_url = operations.ENTERPRISE_ADMIN_UPGRADE_LICENSE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/setup/api/upgrade'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpgradeLicenseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    