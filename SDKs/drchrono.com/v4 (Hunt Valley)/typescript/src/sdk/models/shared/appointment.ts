/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Structure of a billing note
 */
export class AppointmentClaimBillingNotes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appointment" })
  appointment?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  /**
   * ID of the billing note
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Content of the note
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;
}

/**
 * Associated clinical note object
 */
export class AppointmentClinicalNote extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pdf" })
  pdf?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;
}

export class AppointmentCustomAppointmentFieldValue extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "field_type" })
  fieldType?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "field_value" })
  fieldValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;
}

export class AppointmentCustomVitalValue extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vital_type" })
  vitalType?: number;
}

/**
 * Billing status of primary insurer
 */
export enum AppointmentIns1StatusEnum {
  Unknown = "",
  IncompleteInformation = "Incomplete Information",
  InProcessEmdeon = "In Process Emdeon",
  RejectedEmdeon = "Rejected Emdeon",
  RejectedJopari = "Rejected Jopari",
  InProcessPayor = "In Process Payor",
  RejectedWaystarProfessional = "Rejected Waystar Professional",
  RejectedWaystarInstitutional = "Rejected Waystar Institutional",
  InProcessPayer = "In Process Payer",
  PayerAcknowledged = "Payer Acknowledged",
  RejectedPayor = "Rejected Payor",
  RejectedPayer = "Rejected Payer",
  PaidInFull = "Paid in Full",
  PartiallyPaid = "Partially Paid",
  CoordinationOfBenefits = "Coordination of Benefits",
  ERAReceived = "ERA Received",
  ERADenied = "ERA Denied",
  HCFAFormFaxed = "HCFA Form Faxed",
}

/**
 * Billing status of secondary insurer
 */
export enum AppointmentIns2StatusEnum {
  Unknown = "",
  IncompleteInformation = "Incomplete Information",
  InProcessEmdeon = "In Process Emdeon",
  RejectedEmdeon = "Rejected Emdeon",
  RejectedJopari = "Rejected Jopari",
  InProcessPayor = "In Process Payor",
  RejectedWaystarProfessional = "Rejected Waystar Professional",
  RejectedWaystarInstitutional = "Rejected Waystar Institutional",
  InProcessPayer = "In Process Payer",
  PayerAcknowledged = "Payer Acknowledged",
  RejectedPayor = "Rejected Payor",
  RejectedPayer = "Rejected Payer",
  PaidInFull = "Paid in Full",
  PartiallyPaid = "Partially Paid",
  CoordinationOfBenefits = "Coordination of Benefits",
  ERAReceived = "ERA Received",
  ERADenied = "ERA Denied",
  HCFAFormFaxed = "HCFA Form Faxed",
}

export enum AppointmentSimpleReminderTypeEnum {
  Email = "email",
  Sms = "sms",
  Phone = "phone",
  AutoCall = "auto_call",
}

export class AppointmentSimpleReminder extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "scheduled_time" })
  scheduledTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AppointmentSimpleReminderTypeEnum;
}

/**
 * One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses.
 */
export enum AppointmentStatusEnum {
  Unknown = "",
  Arrived = "Arrived",
  CheckedIn = "Checked In",
  CheckedInOnline = "Checked In Online",
  InRoom = "In Room",
  InSession = "In Session",
  Complete = "Complete",
  Confirmed = "Confirmed",
  NotConfirmed = "Not Confirmed",
  Rescheduled = "Rescheduled",
  Cancelled = "Cancelled",
  NoShow = "No Show",
}

export class AppointmentAppointmentStatusTransition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appointment" })
  appointment?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "datetime" })
  datetime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "from_status" })
  fromStatus?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "to_status" })
  toStatus?: string;
}

export enum AppointmentSystemVitalsSmokingStatusEnum {
  Blank = "blank",
  FourHundredAndFortyNineMillionEightHundredAndSixtyEightThousandAndTwo = "449868002",
  FourHundredAndTwentyEightTrillionFortyOneBillionOneHundredAndTwentyFourThousandOneHundredAndSix = "428041000124106",
  EightMillionFiveHundredAndSeventeenThousandAndSix = "8517006",
  TwoHundredAndSixtySixMillionNineHundredAndNineteenThousandAndFive = "266919005",
  SeventySevenMillionOneHundredAndSeventySixThousandAndTwo = "77176002",
  TwoHundredAndSixtySixMillionNineHundredAndTwentySevenThousandAndOne = "266927001",
  FourHundredAndTwentyEightTrillionSeventyOneBillionOneHundredAndTwentyFourThousandOneHundredAndThree = "428071000124103",
  FourHundredAndTwentyEightTrillionSixtyOneBillionOneHundredAndTwentyFourThousandOneHundredAndFive = "428061000124105",
}

/**
 * Clinical vitals associated with the appointment
 */
export class AppointmentSystemVitals extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "blood_pressure_1" })
  bloodPressure1?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "blood_pressure_2" })
  bloodPressure2?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "bmi" })
  bmi?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "head_circumference" })
  headCircumference?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "head_circumference_units" })
  headCircumferenceUnits?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "height_units" })
  heightUnits?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "oxygen_saturation" })
  oxygenSaturation?: number;

  /**
   * 1-10 pain scale.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pain" })
  pain?: string;

  /**
   * Beats per minute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pulse" })
  pulse?: number;

  /**
   * Breathes per minute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "respiratory_rate" })
  respiratoryRate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "smoking_status" })
  smokingStatus?: AppointmentSystemVitalsSmokingStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "temperature" })
  temperature?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "temperature_units" })
  temperatureUnits?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "weight" })
  weight?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "weight_units" })
  weightUnits?: string;
}

/**
 * Created
 */
export class Appointment extends SpeakeasyBase {
  /**
   * Bypass overlap check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_overlapping" })
  allowOverlapping?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "appt_is_break" })
  apptIsBreak?: boolean;

  /**
   * ID of base appointment of a recurrign series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "base_recurring_appointment" })
  baseRecurringAppointment?: string;

  /**
   * Billing notes of the appointment. For writing, check `/api/claim_billing_notes`
   */
  @SpeakeasyMetadata({ elemType: AppointmentClaimBillingNotes })
  @Expose({ name: "billing_notes" })
  @Type(() => AppointmentClaimBillingNotes)
  billingNotes?: AppointmentClaimBillingNotes[];

  @SpeakeasyMetadata()
  @Expose({ name: "billing_provider" })
  billingProvider?: string;

  /**
   * Should be one of `Auto Accident Claim`, `Balance Due`, `Bill Insurance`, `Bill Secondary Insurance`, `Durable Medical Equipment Claim`, `Internal Review`, `Paid In Full`, `Settled`, `Worker's Comp Claim` or one of the custom billing status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billing_status" })
  billingStatus?: string;

  /**
   * Associated clinical note object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clinical_note" })
  @Type(() => AppointmentClinicalNote)
  clinicalNote?: AppointmentClinicalNote;

  /**
   * ID of the original appointment which this appointment cloned from. Will be null if the appointment is not cloned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloned_from" })
  clonedFrom?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * Custom appointment fields
   */
  @SpeakeasyMetadata({ elemType: AppointmentCustomAppointmentFieldValue })
  @Expose({ name: "custom_fields" })
  @Type(() => AppointmentCustomAppointmentFieldValue)
  customFields?: AppointmentCustomAppointmentFieldValue[];

  /**
   * Custom vitals associated with this appointment.
   */
  @SpeakeasyMetadata({ elemType: AppointmentCustomVitalValue })
  @Expose({ name: "custom_vitals" })
  @Type(() => AppointmentCustomVitalValue)
  customVitals?: AppointmentCustomVitalValue[];

  /**
   * Whether the appointmetn is deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted_flag" })
  deletedFlag?: boolean;

  /**
   * Doctor ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "doctor" })
  doctor: number;

  /**
   * Length of the appointment in minutes. Optional if `profile` is provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * Index of the exam room that this appointment occurs in. See `/api/offices`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exam_room" })
  examRoom: number;

  /**
   * The most recent update time among appointment itself, its vitals and its custom vitals
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extended_updated_at" })
  extendedUpdatedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_billed_date" })
  firstBilledDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "icd10_codes" })
  icd10Codes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "icd9_codes" })
  icd9Codes?: string[];

  /**
   * Unique identifier. Usually numeric, but not always
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Billing status of primary insurer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ins1_status" })
  ins1Status?: AppointmentIns1StatusEnum;

  /**
   * Billing status of secondary insurer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ins2_status" })
  ins2Status?: AppointmentIns2StatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "is_virtual_base" })
  isVirtualBase?: boolean;

  /**
   * Whether the appointment is a walk-in appointment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_walk_in" })
  isWalkIn?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "last_billed_date" })
  lastBilledDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Office ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "office" })
  office: number;

  /**
   * ID of this appointment's patient. Breaks have a null patient field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  patient: number;

  @SpeakeasyMetadata()
  @Expose({ name: "primary_insurance_id_number" })
  primaryInsuranceIdNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "primary_insurer_name" })
  primaryInsurerName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "primary_insurer_payer_id" })
  primaryInsurerPayerId?: string;

  /**
   * ID of an `/api/appointment_profiles` instance. The profile sets default values for `color`, `duration`, and `reason` on creation, which can be overriden by setting these values explicitly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "profile" })
  profile?: number;

  /**
   * Default to `""`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;

  /**
   * Whether the appointment is a recurring appointment or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurring_appointment" })
  recurringAppointment?: boolean;

  /**
   * Write-only. ID of an `/api/reminder_profiles` instance. Set this to apply a reminder profile to the appointment. Cannot be applied to an appointment with reminders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reminder_profile" })
  reminderProfile?: string;

  /**
   * Scheduled reminders of the appointment
   */
  @SpeakeasyMetadata({ elemType: AppointmentSimpleReminder })
  @Expose({ name: "reminders" })
  @Type(() => AppointmentSimpleReminder)
  reminders?: AppointmentSimpleReminder[];

  /**
   * The starting time of the appointment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduled_time" })
  scheduledTime: string;

  @SpeakeasyMetadata()
  @Expose({ name: "secondary_insurance_id_number" })
  secondaryInsuranceIdNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "secondary_insurer_name" })
  secondaryInsurerName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "secondary_insurer_payer_id" })
  secondaryInsurerPayerId?: string;

  /**
   * One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: AppointmentStatusEnum;

  @SpeakeasyMetadata({ elemType: AppointmentAppointmentStatusTransition })
  @Expose({ name: "status_transitions" })
  @Type(() => AppointmentAppointmentStatusTransition)
  statusTransitions?: AppointmentAppointmentStatusTransition[];

  /**
   * Supervising provider of appointment if set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supervising_provider" })
  supervisingProvider?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  /**
   * Clinical vitals associated with the appointment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vitals" })
  @Type(() => AppointmentSystemVitals)
  vitals?: AppointmentSystemVitals;
}
