// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type DashboardMeetingParticipantsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// DashboardMeetingParticipantsIncludeFieldsEnum - Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants). This is not supported for `live` meeting types.
type DashboardMeetingParticipantsIncludeFieldsEnum string

const (
	DashboardMeetingParticipantsIncludeFieldsEnumRegistrantID DashboardMeetingParticipantsIncludeFieldsEnum = "registrant_id"
)

func (e *DashboardMeetingParticipantsIncludeFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "registrant_id":
		*e = DashboardMeetingParticipantsIncludeFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipantsIncludeFieldsEnum: %s", s)
	}
}

// DashboardMeetingParticipantsTypeEnum - The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
type DashboardMeetingParticipantsTypeEnum string

const (
	DashboardMeetingParticipantsTypeEnumPast    DashboardMeetingParticipantsTypeEnum = "past"
	DashboardMeetingParticipantsTypeEnumPastOne DashboardMeetingParticipantsTypeEnum = "pastOne"
	DashboardMeetingParticipantsTypeEnumLive    DashboardMeetingParticipantsTypeEnum = "live"
)

func (e *DashboardMeetingParticipantsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		fallthrough
	case "live":
		*e = DashboardMeetingParticipantsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipantsTypeEnum: %s", s)
	}
}

type DashboardMeetingParticipantsRequest struct {
	// Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants). This is not supported for `live` meeting types.
	IncludeFields *DashboardMeetingParticipantsIncludeFieldsEnum `queryParam:"style=form,explode=true,name=include_fields"`
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
	Type *DashboardMeetingParticipantsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

// DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum - Audio quality of the participant.
type DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum string

const (
	DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnumUnknown DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum = " "
	DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnumGood    DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum = "good"
	DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnumFair    DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum = "fair"
	DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnumPoor    DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum = "poor"
	DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnumBad     DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum = "bad"
)

func (e *DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum - Participant's network type.
type DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum string

const (
	DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnumWired           DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum = "Wired"
	DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnumWifi            DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum = "Wifi"
	DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnumPpp             DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum = "PPP"
	DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnumCellular3GAnd4G DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum = "Cellular (3G and 4G)"
	DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnumOthers          DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum = "Others"
)

func (e *DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Wired":
		fallthrough
	case "Wifi":
		fallthrough
	case "PPP":
		fallthrough
	case "Cellular (3G and 4G)":
		fallthrough
	case "Others":
		*e = DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum - Screen share quality of the participant.
type DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum string

const (
	DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnumUnknown DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = " "
	DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnumGood    DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "good"
	DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnumFair    DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "fair"
	DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnumPoor    DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "poor"
	DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnumBad     DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum = "bad"
)

func (e *DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum - Indicates whether the participant is in the waiting room or in the meeting.
//
// The value of this field can be `in_meeting` or `in_waiting_room`.
type DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum string

const (
	DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnumInMeeting     DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum = "in_meeting"
	DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnumInWaitingRoom DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum = "in_waiting_room"
)

func (e *DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in_meeting":
		fallthrough
	case "in_waiting_room":
		*e = DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum - Video quality of the participant.
type DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum string

const (
	DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnumUnknown DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum = " "
	DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnumGood    DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum = "good"
	DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnumFair    DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum = "fair"
	DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnumPoor    DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum = "poor"
	DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnumBad     DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum = "bad"
)

func (e *DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum: %s", s)
	}
}

type DashboardMeetingParticipants200ApplicationXMLParticipants struct {
	// Audio quality of the participant.
	AudioQuality *DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum
	// The type of camera used by participant during the meeting.
	Camera *string
	// Participant connection type.
	ConnectionType *string
	// Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
	CustomerKey *string
	// Data Center where participant's meeting data is stored.
	DataCenter *string
	// The type of device using which the participant joined the meeting. The possible values for this field are:
	// * `Phone`: Participant joined via PSTN.
	// * `H.323/SIP`: Participant joined via an H.323 or SIP device.
	// * `Windows`: Participant joined via VoIP using a Windows device.
	// * `Mac`: Participant joined via VoIP using a Mac device.
	// * `iOS`: Participant joined via VoIP using an iOS device.
	// * `Android`: Participant joined via VoIP using an Android device.
	Device *string
	// Participant's PC domain.
	Domain *string
	// Email address of the participant.
	Email *string
	// Participant's hard disk ID.
	HarddiskID *string
	// Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
	ID *string
	// The number of participants who joined via Zoom Room.
	InRoomParticipants *int64
	// Participant's IP address.
	IPAddress *string
	// The time at which participant joined the meeting.
	JoinTime *time.Time
	// Possible reasons for why participant left the meeting.
	LeaveReason *string
	// The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting.
	LeaveTime *time.Time
	// Participant's location.
	Location *string
	// Participant's MAC address.
	MacAddr *string
	// The type of Microphone that participant used during the meeting.
	Microphone *string
	// Participant's network type.
	NetworkType *DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum
	// Name of Participant's PC.
	PcName *string
	// Indicates whether or not recording was used during the meeting.
	Recording *bool
	// Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter. This is not supported for `live` meeting types.
	RegistrantID *string
	// Screen share quality of the participant.
	ScreenShareQuality *DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum
	// Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare.
	ShareApplication *bool
	// Indicates whether or not a user selected to share their desktop during the screenshare.
	ShareDesktop *bool
	// Indicates whether or not a user selected to share their whiteboard during the screenshare.
	ShareWhiteboard *bool
	// The type of speaker participant used during the meeting.
	Speaker *string
	// Indicates whether the participant is in the waiting room or in the meeting.
	//
	// The value of this field can be `in_meeting` or `in_waiting_room`.
	Status *DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum
	// Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
	UserID *string
	// Participant display name.
	UserName *string
	// Participant's Zoom Client version.
	Version *string
	// Video quality of the participant.
	VideoQuality *DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum
}

// DashboardMeetingParticipants200ApplicationXML - Pagination object.
type DashboardMeetingParticipants200ApplicationXML struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The number of records returned within a single API call.
	PageSize *int64
	// Array of participant session objects. If a participant left a meeting and rejoined the same meeting, their information will appear multiple times (as many times as they joined the meeting).
	Participants []DashboardMeetingParticipants200ApplicationXMLParticipants
	// The number of all records available across pages.
	TotalRecords *int64
}

// DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum - Audio quality of the participant.
type DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum string

const (
	DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnumUnknown DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum = " "
	DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnumGood    DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum = "good"
	DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnumFair    DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum = "fair"
	DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnumPoor    DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum = "poor"
	DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnumBad     DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum = "bad"
)

func (e *DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum - Participant's network type.
type DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum string

const (
	DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnumWired           DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum = "Wired"
	DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnumWifi            DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum = "Wifi"
	DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnumPpp             DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum = "PPP"
	DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnumCellular3GAnd4G DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum = "Cellular (3G and 4G)"
	DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnumOthers          DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum = "Others"
)

func (e *DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Wired":
		fallthrough
	case "Wifi":
		fallthrough
	case "PPP":
		fallthrough
	case "Cellular (3G and 4G)":
		fallthrough
	case "Others":
		*e = DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum - Screen share quality of the participant.
type DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum string

const (
	DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnumUnknown DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = " "
	DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnumGood    DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "good"
	DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnumFair    DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "fair"
	DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnumPoor    DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "poor"
	DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnumBad     DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum = "bad"
)

func (e *DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum - Indicates whether the participant is in the waiting room or in the meeting.
//
// The value of this field can be `in_meeting` or `in_waiting_room`.
type DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum string

const (
	DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnumInMeeting     DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum = "in_meeting"
	DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnumInWaitingRoom DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum = "in_waiting_room"
)

func (e *DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in_meeting":
		fallthrough
	case "in_waiting_room":
		*e = DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum: %s", s)
	}
}

// DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum - Video quality of the participant.
type DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum string

const (
	DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnumUnknown DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum = " "
	DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnumGood    DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum = "good"
	DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnumFair    DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum = "fair"
	DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnumPoor    DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum = "poor"
	DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnumBad     DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum = "bad"
)

func (e *DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case " ":
		fallthrough
	case "good":
		fallthrough
	case "fair":
		fallthrough
	case "poor":
		fallthrough
	case "bad":
		*e = DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum: %s", s)
	}
}

type DashboardMeetingParticipants200ApplicationJSONParticipants struct {
	// Audio quality of the participant.
	AudioQuality *DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum `json:"audio_quality,omitempty"`
	// The type of camera used by participant during the meeting.
	Camera *string `json:"camera,omitempty"`
	// Participant connection type.
	ConnectionType *string `json:"connection_type,omitempty"`
	// Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
	CustomerKey *string `json:"customer_key,omitempty"`
	// Data Center where participant's meeting data is stored.
	DataCenter *string `json:"data_center,omitempty"`
	// The type of device using which the participant joined the meeting. The possible values for this field are:
	// * `Phone`: Participant joined via PSTN.
	// * `H.323/SIP`: Participant joined via an H.323 or SIP device.
	// * `Windows`: Participant joined via VoIP using a Windows device.
	// * `Mac`: Participant joined via VoIP using a Mac device.
	// * `iOS`: Participant joined via VoIP using an iOS device.
	// * `Android`: Participant joined via VoIP using an Android device.
	Device *string `json:"device,omitempty"`
	// Participant's PC domain.
	Domain *string `json:"domain,omitempty"`
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Participant's hard disk ID.
	HarddiskID *string `json:"harddisk_id,omitempty"`
	// Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
	ID *string `json:"id,omitempty"`
	// The number of participants who joined via Zoom Room.
	InRoomParticipants *int64 `json:"in_room_participants,omitempty"`
	// Participant's IP address.
	IPAddress *string `json:"ip_address,omitempty"`
	// The time at which participant joined the meeting.
	JoinTime *time.Time `json:"join_time,omitempty"`
	// Possible reasons for why participant left the meeting.
	LeaveReason *string `json:"leave_reason,omitempty"`
	// The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting.
	LeaveTime *time.Time `json:"leave_time,omitempty"`
	// Participant's location.
	Location *string `json:"location,omitempty"`
	// Participant's MAC address.
	MacAddr *string `json:"mac_addr,omitempty"`
	// The type of Microphone that participant used during the meeting.
	Microphone *string `json:"microphone,omitempty"`
	// Participant's network type.
	NetworkType *DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum `json:"network_type,omitempty"`
	// Name of Participant's PC.
	PcName *string `json:"pc_name,omitempty"`
	// Indicates whether or not recording was used during the meeting.
	Recording *bool `json:"recording,omitempty"`
	// Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter. This is not supported for `live` meeting types.
	RegistrantID *string `json:"registrant_id,omitempty"`
	// Screen share quality of the participant.
	ScreenShareQuality *DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum `json:"screen_share_quality,omitempty"`
	// Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare.
	ShareApplication *bool `json:"share_application,omitempty"`
	// Indicates whether or not a user selected to share their desktop during the screenshare.
	ShareDesktop *bool `json:"share_desktop,omitempty"`
	// Indicates whether or not a user selected to share their whiteboard during the screenshare.
	ShareWhiteboard *bool `json:"share_whiteboard,omitempty"`
	// The type of speaker participant used during the meeting.
	Speaker *string `json:"speaker,omitempty"`
	// Indicates whether the participant is in the waiting room or in the meeting.
	//
	// The value of this field can be `in_meeting` or `in_waiting_room`.
	Status *DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum `json:"status,omitempty"`
	// Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
	UserID *string `json:"user_id,omitempty"`
	// Participant display name.
	UserName *string `json:"user_name,omitempty"`
	// Participant's Zoom Client version.
	Version *string `json:"version,omitempty"`
	// Video quality of the participant.
	VideoQuality *DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum `json:"video_quality,omitempty"`
}

// DashboardMeetingParticipants200ApplicationJSON - Pagination object.
type DashboardMeetingParticipants200ApplicationJSON struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// Array of participant session objects. If a participant left a meeting and rejoined the same meeting, their information will appear multiple times (as many times as they joined the meeting).
	Participants []DashboardMeetingParticipants200ApplicationJSONParticipants `json:"participants,omitempty"`
	// The number of all records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type DashboardMeetingParticipantsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Meeting participants returned.<br>
	// Only available for paid accounts that have enabled the dashboard feature.
	DashboardMeetingParticipants200ApplicationJSONObject *DashboardMeetingParticipants200ApplicationJSON
}
