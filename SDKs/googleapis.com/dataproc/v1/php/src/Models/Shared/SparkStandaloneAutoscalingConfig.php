<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SparkStandaloneAutoscalingConfig - Basic autoscaling configurations for Spark Standalone.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SparkStandaloneAutoscalingConfig
{
    /**
     * Required. Timeout for Spark graceful decommissioning of spark workers. Specifies the duration to wait for spark worker to complete spark decomissioning tasks before forcefully removing workers. Only applicable to downscaling operations.Bounds: 0s, 1d.
     * 
     * @var ?string $gracefulDecommissionTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('gracefulDecommissionTimeout')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gracefulDecommissionTimeout = null;
    
    /**
     * Required. Fraction of required executors to remove from Spark Serverless clusters. A scale-down factor of 1.0 will result in scaling down so that there are no more executors for the Spark Job.(more aggressive scaling). A scale-down factor closer to 0 will result in a smaller magnitude of scaling donw (less aggressive scaling).Bounds: 0.0, 1.0.
     * 
     * @var ?float $scaleDownFactor
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleDownFactor')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleDownFactor = null;
    
    /**
     * Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     * 
     * @var ?float $scaleDownMinWorkerFraction
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleDownMinWorkerFraction')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleDownMinWorkerFraction = null;
    
    /**
     * Required. Fraction of required workers to add to Spark Standalone clusters. A scale-up factor of 1.0 will result in scaling up so that there are no more required workers for the Spark Job (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling).Bounds: 0.0, 1.0.
     * 
     * @var ?float $scaleUpFactor
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleUpFactor')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleUpFactor = null;
    
    /**
     * Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     * 
     * @var ?float $scaleUpMinWorkerFraction
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleUpMinWorkerFraction')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $scaleUpMinWorkerFraction = null;
    
	public function __construct()
	{
		$this->gracefulDecommissionTimeout = null;
		$this->scaleDownFactor = null;
		$this->scaleDownMinWorkerFraction = null;
		$this->scaleUpFactor = null;
		$this->scaleUpMinWorkerFraction = null;
	}
}
