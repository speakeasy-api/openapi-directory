/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class SendchatbotSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  clientCredentials: string;
}

export class SendchatbotApplicationJSON extends SpeakeasyBase {
  /**
   * Account ID of the authorized account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * JSON template describing how the message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content: Record<string, any>;

  /**
   * **Optional**<br>
   *
   * @remarks
   * Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_markdown_support" })
  isMarkdownSupport?: boolean;

  /**
   * Robot JID created when enabling chatbot features on your marketplace app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "robot_jid" })
  robotJid: string;

  /**
   * Unique JID of reciever. Can be a group or user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to_jid" })
  toJid: string;

  /**
   * **Optional**<br>
   *
   * @remarks
   * The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_jid" })
  userJid?: string;

  /**
   * **Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visible_to_user" })
  visibleToUser?: string;
}

export class SendchatbotResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
