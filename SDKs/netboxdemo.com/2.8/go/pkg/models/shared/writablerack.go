// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableRackOuterUnitEnum string

const (
	WritableRackOuterUnitEnumMm WritableRackOuterUnitEnum = "mm"
	WritableRackOuterUnitEnumIn WritableRackOuterUnitEnum = "in"
)

func (e *WritableRackOuterUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mm":
		fallthrough
	case "in":
		*e = WritableRackOuterUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRackOuterUnitEnum: %s", s)
	}
}

type WritableRackStatusEnum string

const (
	WritableRackStatusEnumReserved   WritableRackStatusEnum = "reserved"
	WritableRackStatusEnumAvailable  WritableRackStatusEnum = "available"
	WritableRackStatusEnumPlanned    WritableRackStatusEnum = "planned"
	WritableRackStatusEnumActive     WritableRackStatusEnum = "active"
	WritableRackStatusEnumDeprecated WritableRackStatusEnum = "deprecated"
)

func (e *WritableRackStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "reserved":
		fallthrough
	case "available":
		fallthrough
	case "planned":
		fallthrough
	case "active":
		fallthrough
	case "deprecated":
		*e = WritableRackStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRackStatusEnum: %s", s)
	}
}

type WritableRackTypeEnum string

const (
	WritableRackTypeEnumTwoPostFrame    WritableRackTypeEnum = "2-post-frame"
	WritableRackTypeEnumFourPostFrame   WritableRackTypeEnum = "4-post-frame"
	WritableRackTypeEnumFourPostCabinet WritableRackTypeEnum = "4-post-cabinet"
	WritableRackTypeEnumWallFrame       WritableRackTypeEnum = "wall-frame"
	WritableRackTypeEnumWallCabinet     WritableRackTypeEnum = "wall-cabinet"
)

func (e *WritableRackTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2-post-frame":
		fallthrough
	case "4-post-frame":
		fallthrough
	case "4-post-cabinet":
		fallthrough
	case "wall-frame":
		fallthrough
	case "wall-cabinet":
		*e = WritableRackTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRackTypeEnum: %s", s)
	}
}

// WritableRackWidthEnum - Rail-to-rail width
type WritableRackWidthEnum string

const (
	WritableRackWidthEnumTen         WritableRackWidthEnum = "10"
	WritableRackWidthEnumNineteen    WritableRackWidthEnum = "19"
	WritableRackWidthEnumTwentyOne   WritableRackWidthEnum = "21"
	WritableRackWidthEnumTwentyThree WritableRackWidthEnum = "23"
)

func (e *WritableRackWidthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "10":
		fallthrough
	case "19":
		fallthrough
	case "21":
		fallthrough
	case "23":
		*e = WritableRackWidthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRackWidthEnum: %s", s)
	}
}

type WritableRackInput struct {
	// A unique tag used to identify this rack
	AssetTag     *string                `json:"asset_tag,omitempty"`
	Comments     *string                `json:"comments,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	// Units are numbered top-to-bottom
	DescUnits *bool `json:"desc_units,omitempty"`
	// Locally-assigned identifier
	FacilityID *string `json:"facility_id,omitempty"`
	// Assigned group
	Group *int64 `json:"group,omitempty"`
	Name  string `json:"name"`
	// Outer dimension of rack (depth)
	OuterDepth *int64                     `json:"outer_depth,omitempty"`
	OuterUnit  *WritableRackOuterUnitEnum `json:"outer_unit,omitempty"`
	// Outer dimension of rack (width)
	OuterWidth *int64 `json:"outer_width,omitempty"`
	// Functional role
	Role   *int64                  `json:"role,omitempty"`
	Serial *string                 `json:"serial,omitempty"`
	Site   int64                   `json:"site"`
	Status *WritableRackStatusEnum `json:"status,omitempty"`
	Tags   []string                `json:"tags,omitempty"`
	Tenant *int64                  `json:"tenant,omitempty"`
	Type   *WritableRackTypeEnum   `json:"type,omitempty"`
	// Height in rack units
	UHeight *int64 `json:"u_height,omitempty"`
	// Rail-to-rail width
	Width *WritableRackWidthEnum `json:"width,omitempty"`
}
