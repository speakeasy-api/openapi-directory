// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DisruptionsGetDisruptionsByRouteDisruptionStatusEnum - Filter by status of disruption
type DisruptionsGetDisruptionsByRouteDisruptionStatusEnum string

const (
	DisruptionsGetDisruptionsByRouteDisruptionStatusEnumCurrent DisruptionsGetDisruptionsByRouteDisruptionStatusEnum = "current"
	DisruptionsGetDisruptionsByRouteDisruptionStatusEnumPlanned DisruptionsGetDisruptionsByRouteDisruptionStatusEnum = "planned"
)

func (e DisruptionsGetDisruptionsByRouteDisruptionStatusEnum) ToPointer() *DisruptionsGetDisruptionsByRouteDisruptionStatusEnum {
	return &e
}

func (e *DisruptionsGetDisruptionsByRouteDisruptionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "current":
		fallthrough
	case "planned":
		*e = DisruptionsGetDisruptionsByRouteDisruptionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisruptionsGetDisruptionsByRouteDisruptionStatusEnum: %v", v)
	}
}

type DisruptionsGetDisruptionsByRouteRequest struct {
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// Filter by status of disruption
	DisruptionStatus *DisruptionsGetDisruptionsByRouteDisruptionStatusEnum `queryParam:"style=form,explode=true,name=disruption_status"`
	// Identifier of route; values returned by Routes API - v3/routes
	RouteID int `pathParam:"style=simple,explode=false,name=route_id"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type DisruptionsGetDisruptionsByRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// All disruption information (if any exists) for the specified route.
	V3DisruptionsResponse *shared.V3DisruptionsResponse
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
}
