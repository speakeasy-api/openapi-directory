"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetConsumedLicensesUsers:
    
    enterprise_server_emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enterprise_server_emails'), 'exclude': lambda f: f is None }})  
    enterprise_server_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enterprise_server_user'), 'exclude': lambda f: f is None }})  
    enterprise_server_user_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enterprise_server_user_ids'), 'exclude': lambda f: f is None }})  
    github_com_enterprise_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_enterprise_roles'), 'exclude': lambda f: f is None }})
    r"""All enterprise roles for a user."""  
    github_com_login: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_login'), 'exclude': lambda f: f is None }})  
    github_com_member_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_member_roles'), 'exclude': lambda f: f is None }})  
    github_com_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_name'), 'exclude': lambda f: f is None }})  
    github_com_orgs_with_pending_invites: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_orgs_with_pending_invites'), 'exclude': lambda f: f is None }})  
    github_com_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_profile'), 'exclude': lambda f: f is None }})  
    github_com_saml_name_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_saml_name_id'), 'exclude': lambda f: f is None }})  
    github_com_two_factor_auth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_two_factor_auth'), 'exclude': lambda f: f is None }})  
    github_com_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_user'), 'exclude': lambda f: f is None }})  
    github_com_verified_domain_emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('github_com_verified_domain_emails'), 'exclude': lambda f: f is None }})  
    license_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license_type'), 'exclude': lambda f: f is None }})  
    total_user_accounts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_user_accounts'), 'exclude': lambda f: f is None }})  
    visual_studio_license_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visual_studio_license_status'), 'exclude': lambda f: f is None }})  
    visual_studio_subscription_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visual_studio_subscription_email'), 'exclude': lambda f: f is None }})  
    visual_studio_subscription_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visual_studio_subscription_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetConsumedLicenses:
    r"""A breakdown of the licenses consumed by an enterprise."""
    
    total_seats_consumed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_seats_consumed'), 'exclude': lambda f: f is None }})  
    total_seats_purchased: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_seats_purchased'), 'exclude': lambda f: f is None }})  
    users: Optional[list[GetConsumedLicensesUsers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})  
    