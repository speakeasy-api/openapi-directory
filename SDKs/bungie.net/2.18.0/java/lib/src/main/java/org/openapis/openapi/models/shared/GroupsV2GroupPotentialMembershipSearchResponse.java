/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



public class GroupsV2GroupPotentialMembershipSearchResponse {
    
    public Boolean hasMore;

    public GroupsV2GroupPotentialMembershipSearchResponse withHasMore(Boolean hasMore) {
        this.hasMore = hasMore;
        return this;
    }
    
    
    public QueriesPagedQuery query;

    public GroupsV2GroupPotentialMembershipSearchResponse withQuery(QueriesPagedQuery query) {
        this.query = query;
        return this;
    }
    
    
    public String replacementContinuationToken;

    public GroupsV2GroupPotentialMembershipSearchResponse withReplacementContinuationToken(String replacementContinuationToken) {
        this.replacementContinuationToken = replacementContinuationToken;
        return this;
    }
    
    
    public GroupsV2GroupPotentialMembership[] results;

    public GroupsV2GroupPotentialMembershipSearchResponse withResults(GroupsV2GroupPotentialMembership[] results) {
        this.results = results;
        return this;
    }
    
    
    public Integer totalResults;

    public GroupsV2GroupPotentialMembershipSearchResponse withTotalResults(Integer totalResults) {
        this.totalResults = totalResults;
        return this;
    }
    
    /**
     * If useTotalResults is true, then totalResults represents an accurate count.
     * If False, it does not, and may be estimated/only the size of the current page.
     * Either way, you should probably always only trust hasMore.
     * This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
     */
    
    public Boolean useTotalResults;

    public GroupsV2GroupPotentialMembershipSearchResponse withUseTotalResults(Boolean useTotalResults) {
        this.useTotalResults = useTotalResults;
        return this;
    }
    
    public GroupsV2GroupPotentialMembershipSearchResponse(){}
}
