// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
	"time"
)

type ReportOperationLogsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// ReportOperationLogsCategoryTypeEnum - **Optional**<br>
// Filter your response by a category type to see reports for a specific category.
// The value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`
type ReportOperationLogsCategoryTypeEnum string

const (
	ReportOperationLogsCategoryTypeEnumAll           ReportOperationLogsCategoryTypeEnum = "all"
	ReportOperationLogsCategoryTypeEnumUser          ReportOperationLogsCategoryTypeEnum = "user"
	ReportOperationLogsCategoryTypeEnumUserSettings  ReportOperationLogsCategoryTypeEnum = "user_settings"
	ReportOperationLogsCategoryTypeEnumAccount       ReportOperationLogsCategoryTypeEnum = "account"
	ReportOperationLogsCategoryTypeEnumBilling       ReportOperationLogsCategoryTypeEnum = "billing"
	ReportOperationLogsCategoryTypeEnumIm            ReportOperationLogsCategoryTypeEnum = "im"
	ReportOperationLogsCategoryTypeEnumRecording     ReportOperationLogsCategoryTypeEnum = "recording"
	ReportOperationLogsCategoryTypeEnumPhoneContacts ReportOperationLogsCategoryTypeEnum = "phone_contacts"
	ReportOperationLogsCategoryTypeEnumWebinar       ReportOperationLogsCategoryTypeEnum = "webinar"
	ReportOperationLogsCategoryTypeEnumSubAccount    ReportOperationLogsCategoryTypeEnum = "sub_account"
	ReportOperationLogsCategoryTypeEnumRole          ReportOperationLogsCategoryTypeEnum = "role"
	ReportOperationLogsCategoryTypeEnumZoomRooms     ReportOperationLogsCategoryTypeEnum = "zoom_rooms"
)

func (e *ReportOperationLogsCategoryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "user":
		fallthrough
	case "user_settings":
		fallthrough
	case "account":
		fallthrough
	case "billing":
		fallthrough
	case "im":
		fallthrough
	case "recording":
		fallthrough
	case "phone_contacts":
		fallthrough
	case "webinar":
		fallthrough
	case "sub_account":
		fallthrough
	case "role":
		fallthrough
	case "zoom_rooms":
		*e = ReportOperationLogsCategoryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportOperationLogsCategoryTypeEnum: %s", s)
	}
}

type ReportOperationLogsRequest struct {
	// **Optional**<br>
	// Filter your response by a category type to see reports for a specific category.
	// The value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`
	CategoryType *ReportOperationLogsCategoryTypeEnum `queryParam:"style=form,explode=true,name=category_type"`
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
}

type ReportOperationLogs200ApplicationXMLOperationLogs struct {
	// Action
	Action *string
	// Category type
	CategoryType *string
	// Operation detail
	OperationDetail *string
	// The user who performed the operation.
	Operator *string
	// The time at which the operation was performed.
	Time *time.Time
}

// ReportOperationLogs200ApplicationXML - Pagination object.
type ReportOperationLogs200ApplicationXML struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.
	NextPageToken *string
	// Array of operation log objects
	OperationLogs []ReportOperationLogs200ApplicationXMLOperationLogs
	// The amount of records returns within a single API call.
	PageSize *int64
}

type ReportOperationLogs200ApplicationJSONOperationLogs struct {
	// Action
	Action *string `json:"action,omitempty"`
	// Category type
	CategoryType *string `json:"category_type,omitempty"`
	// Operation detail
	OperationDetail *string `json:"operation_detail,omitempty"`
	// The user who performed the operation.
	Operator *string `json:"operator,omitempty"`
	// The time at which the operation was performed.
	Time *time.Time `json:"time,omitempty"`
}

// ReportOperationLogs200ApplicationJSON - Pagination object.
type ReportOperationLogs200ApplicationJSON struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// Array of operation log objects
	OperationLogs []ReportOperationLogs200ApplicationJSONOperationLogs `json:"operation_logs,omitempty"`
	// The amount of records returns within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
}

type ReportOperationLogsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Operation Logs Report Returned
	ReportOperationLogs200ApplicationJSONObject *ReportOperationLogs200ApplicationJSON
}
