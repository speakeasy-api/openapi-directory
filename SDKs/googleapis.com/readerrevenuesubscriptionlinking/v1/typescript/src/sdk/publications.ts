/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Publications {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Removes a publication reader, effectively severing the association with a Google user. If `force` is set to true, any entitlements for this reader will also be deleted. (Otherwise, the request will only work if the reader has no entitlements.) - If the reader does not exist, return NOT_FOUND. - Return FAILED_PRECONDITION if the force field is false (or unset) and entitlements are present.
   */
  readerrevenuesubscriptionlinkingPublicationsReadersDelete(
    req: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteResponse =
        new operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteReaderResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the reader entitlements for a publication reader. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist.
   */
  readerrevenuesubscriptionlinkingPublicationsReadersGetEntitlements(
    req: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsResponse =
        new operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.readerEntitlements = utils.objectToClass(
              httpRes?.data,
              shared.ReaderEntitlements
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the reader entitlements for a publication reader. The entire reader entitlements will be overwritten by the new reader entitlements in the payload, like a PUT. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist.
   */
  readerrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlements(
    req: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "readerEntitlementsInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsResponse =
        new operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.readerEntitlements = utils.objectToClass(
              httpRes?.data,
              shared.ReaderEntitlements
            );
          }
          break;
      }

      return res;
    });
  }
}
