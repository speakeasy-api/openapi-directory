"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudorgpolicyv1policy as shared_googlecloudorgpolicyv1policy
from ..shared import googleidentityaccesscontextmanagerv1accesslevel as shared_googleidentityaccesscontextmanagerv1accesslevel
from ..shared import googleidentityaccesscontextmanagerv1accesspolicy as shared_googleidentityaccesscontextmanagerv1accesspolicy
from ..shared import googleidentityaccesscontextmanagerv1serviceperimeter as shared_googleidentityaccesscontextmanagerv1serviceperimeter
from ..shared import policy as shared_policy
from ..shared import resource as shared_resource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Asset:
    r"""An asset in Google Cloud. An asset can be any resource in the Google Cloud [resource hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy), a resource outside the Google Cloud resource hierarchy (such as Google Kubernetes Engine clusters and objects), or a policy (e.g. IAM policy). See [Supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for more information."""
    
    access_level: Optional[shared_googleidentityaccesscontextmanagerv1accesslevel.GoogleIdentityAccesscontextmanagerV1AccessLevel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessLevel'), 'exclude': lambda f: f is None }})
    r"""An `AccessLevel` is a label that can be applied to requests to Google Cloud services, along with a list of requirements necessary for the label to be applied."""  
    access_policy: Optional[shared_googleidentityaccesscontextmanagerv1accesspolicy.GoogleIdentityAccesscontextmanagerV1AccessPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPolicy'), 'exclude': lambda f: f is None }})
    r"""`AccessPolicy` is a container for `AccessLevels` (which define the necessary attributes to use Google Cloud services) and `ServicePerimeters` (which define regions of services able to freely pass data within a perimeter). An access policy is globally visible within an organization, and the restrictions it specifies apply to all projects within an organization."""  
    asset_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetType'), 'exclude': lambda f: f is None }})
    r"""The type of the asset. Example: `compute.googleapis.com/Disk` See [Supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for more information."""  
    iam_policy: Optional[shared_policy.Policy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamPolicy'), 'exclude': lambda f: f is None }})
    r"""An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \\"bindings\\": [ { \\"role\\": \\"roles/resourcemanager.organizationAdmin\\", \\"members\\": [ \\"user:mike@example.com\\", \\"group:admins@example.com\\", \\"domain:google.com\\", \\"serviceAccount:my-project-id@appspot.gserviceaccount.com\\" ] }, { \\"role\\": \\"roles/resourcemanager.organizationViewer\\", \\"members\\": [ \\"user:eve@example.com\\" ], \\"condition\\": { \\"title\\": \\"expirable access\\", \\"description\\": \\"Does not grant access after Sep 2020\\", \\"expression\\": \\"request.time < timestamp('2020-10-01T00:00:00.000Z')\\", } } ], \\"etag\\": \\"BwWWja0YfJA=\\", \\"version\\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The full name of the asset. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1` See [Resource names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information."""  
    org_policy: Optional[list[shared_googlecloudorgpolicyv1policy.GoogleCloudOrgpolicyV1Policy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgPolicy'), 'exclude': lambda f: f is None }})
    r"""A representation of an [organization policy](https://cloud.google.com/resource-manager/docs/organization-policy/overview#organization_policy). There can be more than one organization policy with different constraints set on a given resource."""  
    resource: Optional[shared_resource.Resource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    r"""A representation of a Google Cloud resource."""  
    service_perimeter: Optional[shared_googleidentityaccesscontextmanagerv1serviceperimeter.GoogleIdentityAccesscontextmanagerV1ServicePerimeter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicePerimeter'), 'exclude': lambda f: f is None }})
    r"""`ServicePerimeter` describes a set of Google Cloud resources which can freely import and export data amongst themselves, but not export outside of the `ServicePerimeter`. If a request with a source within this `ServicePerimeter` has a target outside of the `ServicePerimeter`, the request will be blocked. Otherwise the request is allowed. There are two types of Service Perimeter - Regular and Bridge. Regular Service Perimeters cannot overlap, a single Google Cloud project or VPC network can only belong to a single regular Service Perimeter. Service Perimeter Bridges can contain only Google Cloud projects as members, a single Google Cloud project may belong to multiple Service Perimeter Bridges."""  
    