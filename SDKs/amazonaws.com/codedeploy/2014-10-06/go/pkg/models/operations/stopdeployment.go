// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StopDeploymentXAmzTargetEnum
type StopDeploymentXAmzTargetEnum string

const (
	StopDeploymentXAmzTargetEnumCodeDeploy20141006StopDeployment StopDeploymentXAmzTargetEnum = "CodeDeploy_20141006.StopDeployment"
)

func (e StopDeploymentXAmzTargetEnum) ToPointer() *StopDeploymentXAmzTargetEnum {
	return &e
}

func (e *StopDeploymentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.StopDeployment":
		*e = StopDeploymentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopDeploymentXAmzTargetEnum: %v", v)
	}
}

type StopDeploymentRequest struct {
	StopDeploymentInput shared.StopDeploymentInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          StopDeploymentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StopDeploymentResponse struct {
	ContentType string
	// DeploymentAlreadyCompletedException
	DeploymentAlreadyCompletedException interface{}
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentGroupDoesNotExistException
	DeploymentGroupDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// Success
	StopDeploymentOutput *shared.StopDeploymentOutput
	// UnsupportedActionForDeploymentTypeException
	UnsupportedActionForDeploymentTypeException interface{}
}
