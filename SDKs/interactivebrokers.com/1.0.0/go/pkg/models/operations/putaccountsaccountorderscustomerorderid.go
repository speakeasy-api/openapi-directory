// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum - Buy = '1', Sell = '2'
type PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum string

const (
	PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnumOne PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum = "1"
	PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnumTwo PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum = "2"
)

func (e *PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum: %s", s)
	}
}

// PutAccountsAccountOrdersCustomerOrderIDRequestBody - Order Parameters
type PutAccountsAccountOrdersCustomerOrderIDRequestBody struct {
	// Required Price to support Stop and Stop Limit orders
	AuxPrice *float64 `json:"Aux Price,omitempty"`
	// The new order ID assigned by the customer for the modification.
	CustomerOrderID *string `json:"CustomerOrderId,omitempty"`
	// By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.
	GermanHftAlgo *bool `json:"GermanHftAlgo,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions
	Mifid2Algo *string `json:"Mifid2Algo,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.
	Mifid2DecisionMaker *string `json:"Mifid2DecisionMaker,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.
	Mifid2ExecutionAlgo *string `json:"Mifid2ExecutionAlgo,omitempty"`
	// This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order
	Mifid2ExecutionTrader *string `json:"Mifid2ExecutionTrader,omitempty"`
	// Market = '1'
	// Limit = '2'
	// Stop = '3'
	// StopLimit = '4'
	//
	OrderType *shared.OrderTypeEnum `json:"Order Type,omitempty"`
	// The order ID assigned by the customer
	OrigCustomerOrderID *string `json:"OrigCustomerOrderId,omitempty"`
	// Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes
	OutsideRTH *float64 `json:"Outside RTH,omitempty"`
	// The order price
	Price *float64 `json:"Price,omitempty"`
	// The number of units in the order; contracts or shares
	Quantity *float64 `json:"Quantity,omitempty"`
	// Buy = '1', Sell = '2'
	Side *PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum `json:"Side,omitempty"`
	// Defines order's active lifetime.
	// Day = '0'
	// GTC (Good till Cancel) = '1'
	// IOC (Immediate or Cancel) = '3'
	// Open = '2'
	// Close = '7'
	//
	TimeInForce *shared.TimeInForceEnum `json:"Time in Force,omitempty"`
}

type PutAccountsAccountOrdersCustomerOrderIDRequest struct {
	// Customer Order ID
	CustomerOrderID string `pathParam:"style=simple,explode=false,name=CustomerOrderId"`
	// Order Parameters
	RequestBody PutAccountsAccountOrdersCustomerOrderIDRequestBody `request:"mediaType=application/json"`
	// Account Number
	Account string `pathParam:"style=simple,explode=false,name=account"`
}

type PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum string

const (
	PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnumOne PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum = "1"
	PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnumTwo PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum = "2"
)

func (e *PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum: %s", s)
	}
}

type PutAccountsAccountOrdersCustomerOrderID200ApplicationJSON struct {
	CustomerOrderID *string  `json:"CustomerOrderId,omitempty"`
	OrderQty        *float64 `json:"OrderQty,omitempty"`
	// Market = '1'
	// Limit = '2'
	// Stop = '3'
	// StopLimit = '4'
	//
	OrderType *shared.OrderTypeEnum                                              `json:"OrderType,omitempty"`
	Price     *string                                                            `json:"Price,omitempty"`
	Side      *PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum `json:"Side,omitempty"`
	// Status of the order
	// InvalidOrderStatus = '-1'
	// New = '0'
	// PartiallyFilled = '1'
	// Filled = '2'
	// DoneForTheDay = '3'
	// Canceled = '4'
	// Replaced = '5'
	// PendingCancelReplace = '6'
	// Stopped = '7'
	// Rejected = '8'
	// Suspended = '9'
	// PendingNew = 'A'
	// Calculated = 'B'
	// Expired = 'C'
	// AcceptedForBidding = 'D'
	// PendingReplace = 'E'
	//
	Status  *shared.OrderStatusEnum `json:"Status,omitempty"`
	Symbol  *float64                `json:"Symbol,omitempty"`
	Warning *string                 `json:"Warning,omitempty"`
}

type PutAccountsAccountOrdersCustomerOrderIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Result of order modification attempt
	PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONObjects []PutAccountsAccountOrdersCustomerOrderID200ApplicationJSON
}
