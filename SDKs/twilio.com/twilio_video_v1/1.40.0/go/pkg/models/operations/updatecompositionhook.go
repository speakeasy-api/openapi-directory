// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateCompositionHookServerList = []string{
	"https://video.twilio.com",
}

type UpdateCompositionHookSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
type UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum string

const (
	UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnumHead   UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum = "HEAD"
	UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnumGet    UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum = "GET"
	UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnumPost   UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum = "POST"
	UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnumPatch  UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum = "PATCH"
	UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnumPut    UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum = "PUT"
	UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnumDelete UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum = "DELETE"
)

func (e *UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum: %s", s)
	}
}

type UpdateCompositionHookUpdateCompositionHookRequest struct {
	// An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.
	AudioSources []string `form:"name=AudioSources"`
	// An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
	AudioSourcesExcluded []string `form:"name=AudioSourcesExcluded"`
	// Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook never triggers.
	Enabled *bool                                 `form:"name=Enabled"`
	Format  *shared.CompositionHookEnumFormatEnum `form:"name=Format"`
	// A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.
	FriendlyName string `form:"name=FriendlyName"`
	// A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.
	// The string's format is `{width}x{height}` where:
	//
	// * 16 <= `{width}` <= 1280
	// * 16 <= `{height}` <= 1280
	// * `{width}` * `{height}` <= 921,600
	//
	// Typical values are:
	//
	// * HD = `1280x720`
	// * PAL = `1024x576`
	// * VGA = `640x480`
	// * CIF = `320x240`
	//
	// Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
	Resolution *string `form:"name=Resolution"`
	// The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
	StatusCallback *string `form:"name=StatusCallback"`
	// The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
	StatusCallbackMethod *UpdateCompositionHookUpdateCompositionHookRequestStatusCallbackMethodEnum `form:"name=StatusCallbackMethod"`
	// Whether to clip the intervals where there is no active media in the compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
	Trim *bool `form:"name=Trim"`
	// A JSON object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
	VideoLayout interface{} `form:"name=VideoLayout"`
}

type UpdateCompositionHookRequest struct {
	RequestBody *UpdateCompositionHookUpdateCompositionHookRequest `request:"mediaType=application/x-www-form-urlencoded"`
	// The SID of the CompositionHook resource to update.
	Sid string `pathParam:"style=simple,explode=false,name=Sid"`
}

type UpdateCompositionHookResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	VideoV1CompositionHook *shared.VideoV1CompositionHook
}
