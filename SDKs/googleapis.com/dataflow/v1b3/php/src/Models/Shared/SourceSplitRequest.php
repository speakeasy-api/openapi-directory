<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SourceSplitRequest - Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SourceSplitRequest
{
    /**
     * Hints for splitting a Source into bundles (parts for parallel processing) using SourceSplitRequest.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SourceSplitOptions $options
     */
	#[\JMS\Serializer\Annotation\SerializedName('options')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SourceSplitOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SourceSplitOptions $options = null;
    
    /**
     * A source that records can be read and decoded from.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Source $source
     */
	#[\JMS\Serializer\Annotation\SerializedName('source')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Source')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Source $source = null;
    
	public function __construct()
	{
		$this->options = null;
		$this->source = null;
	}
}
