"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceAttachment = exports.ServiceAttachmentConnectionPreferenceEnum = void 0;
var utils_1 = require("../../../internal/utils");
var serviceattachmentconnectedendpoint_1 = require("./serviceattachmentconnectedendpoint");
var serviceattachmentconsumerprojectlimit_1 = require("./serviceattachmentconsumerprojectlimit");
var uint128_1 = require("./uint128");
var class_transformer_1 = require("class-transformer");
/**
 * The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
 */
var ServiceAttachmentConnectionPreferenceEnum;
(function (ServiceAttachmentConnectionPreferenceEnum) {
    ServiceAttachmentConnectionPreferenceEnum["AcceptAutomatic"] = "ACCEPT_AUTOMATIC";
    ServiceAttachmentConnectionPreferenceEnum["AcceptManual"] = "ACCEPT_MANUAL";
    ServiceAttachmentConnectionPreferenceEnum["ConnectionPreferenceUnspecified"] = "CONNECTION_PREFERENCE_UNSPECIFIED";
})(ServiceAttachmentConnectionPreferenceEnum = exports.ServiceAttachmentConnectionPreferenceEnum || (exports.ServiceAttachmentConnectionPreferenceEnum = {}));
/**
 * Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service.
 */
var ServiceAttachment = /** @class */ (function (_super) {
    __extends(ServiceAttachment, _super);
    function ServiceAttachment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: serviceattachmentconnectedendpoint_1.ServiceAttachmentConnectedEndpoint }),
        (0, class_transformer_1.Expose)({ name: "connectedEndpoints" }),
        (0, class_transformer_1.Type)(function () { return serviceattachmentconnectedendpoint_1.ServiceAttachmentConnectedEndpoint; }),
        __metadata("design:type", Array)
    ], ServiceAttachment.prototype, "connectedEndpoints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "connectionPreference" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "connectionPreference", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: serviceattachmentconsumerprojectlimit_1.ServiceAttachmentConsumerProjectLimit }),
        (0, class_transformer_1.Expose)({ name: "consumerAcceptLists" }),
        (0, class_transformer_1.Type)(function () { return serviceattachmentconsumerprojectlimit_1.ServiceAttachmentConsumerProjectLimit; }),
        __metadata("design:type", Array)
    ], ServiceAttachment.prototype, "consumerAcceptLists", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "consumerRejectLists" }),
        __metadata("design:type", Array)
    ], ServiceAttachment.prototype, "consumerRejectLists", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "domainNames" }),
        __metadata("design:type", Array)
    ], ServiceAttachment.prototype, "domainNames", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enableProxyProtocol" }),
        __metadata("design:type", Boolean)
    ], ServiceAttachment.prototype, "enableProxyProtocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "natSubnets" }),
        __metadata("design:type", Array)
    ], ServiceAttachment.prototype, "natSubnets", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "producerForwardingRule" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "producerForwardingRule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pscServiceAttachmentId" }),
        (0, class_transformer_1.Type)(function () { return uint128_1.Uint128; }),
        __metadata("design:type", uint128_1.Uint128)
    ], ServiceAttachment.prototype, "pscServiceAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetService" }),
        __metadata("design:type", String)
    ], ServiceAttachment.prototype, "targetService", void 0);
    return ServiceAttachment;
}(utils_1.SpeakeasyBase));
exports.ServiceAttachment = ServiceAttachment;
