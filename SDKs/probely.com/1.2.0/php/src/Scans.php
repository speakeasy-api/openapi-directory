<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Scans 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List scans for all targets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScansResponse
     */
	public function getTargetsAllScans(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/scans/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScansRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllScans200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScans200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllScans401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllScans401ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List scans
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansResponse
     */
	public function getTargetsTargetIdScans(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScans200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScans200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScans401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScans401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScans404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScans404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Dates where scans have ocurred
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDatesResponse
     */
	public function getTargetsTargetIdScansDates(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/dates/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansDates200ApplicationJSONDateStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<DateTime>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansDates401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDates401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansDates404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansDates404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan page
     * 
     * Given a date return the page number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageResponse
     */
	public function getTargetsTargetIdScansRetrievePage(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/retrieve_page/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansRetrievePage200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePage200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansRetrievePage400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePage400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansRetrievePage401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePage401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansRetrievePage404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansRetrievePage404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve scan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdResponse
     */
	public function getTargetsTargetIdScansId(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scan', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansId401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansId401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansId404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansId404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan endpoints file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpointsResponse
     */
	public function getTargetsTargetIdScansIdEndpoints(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/endpoints/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/csv')) {
                $response->getTargetsTargetIdScansIdEndpoints200ApplicationCsvBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdEndpoints401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpoints401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdEndpoints404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdEndpoints404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan report PDF, using the report type specified for the target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportResponse
     */
	public function getTargetsTargetIdScansIdReport(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/report/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->getTargetsTargetIdScansIdReport200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReport401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReport401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReport404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReport404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan report PDF, using the default report type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefaultRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefaultResponse
     */
	public function getTargetsTargetIdScansIdReportDefault(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefaultRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefaultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/report/default/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefaultRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefaultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->getTargetsTargetIdScansIdReportDefault200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReportDefault401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefault401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReportDefault404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportDefault404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan report PDF, using the OWASP report type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwaspRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwaspResponse
     */
	public function getTargetsTargetIdScansIdReportOwasp(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwaspRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwaspResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/report/owasp/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwaspRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwaspResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->getTargetsTargetIdScansIdReportOwasp200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReportOwasp401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwasp401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReportOwasp404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportOwasp404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan report PDF, using the PCI report type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPciRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPciResponse
     */
	public function getTargetsTargetIdScansIdReportPci(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPciRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPciResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/report/pci/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPciRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPciResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->getTargetsTargetIdScansIdReportPci200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReportPci401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPci401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdScansIdReportPci404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdScansIdReportPci404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start a scan on the target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNowResponse
     */
	public function postTargetsTargetIdScanNow(
        \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scan_now/', \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scan', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScanNow400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNow400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScanNow401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNow401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScanNow403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNow403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScanNow404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScanNow404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel running scan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancelResponse
     */
	public function postTargetsTargetIdScansIdCancel(
        \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/scans/{id}/cancel/', \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scan', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScansIdCancel401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancel401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScansIdCancel403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancel403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postTargetsTargetIdScansIdCancel404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostTargetsTargetIdScansIdCancel404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}