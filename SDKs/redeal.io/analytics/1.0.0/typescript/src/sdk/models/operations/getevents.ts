/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * type of records to return
 */
export enum GetEventsTypeEnum {
  All = "all",
  Clicks = "clicks",
  Contacts = "contacts",
}

export class GetEventsRequest extends SpeakeasyBase {
  /**
   * pass an optional company Id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=company",
  })
  company?: string;

  /**
   * pass an optional deal Id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=deal" })
  deal?: string;

  /**
   * next token to start returning records from
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nexttoken",
  })
  nexttoken?: string;

  /**
   * id of execution to get more records based on next token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=queryexecutionid",
  })
  queryexecutionid?: string;

  /**
   * pass an optional site Id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=site" })
  site?: string;

  /**
   * type of records to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetEventsTypeEnum;
}

export class GetEventsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * analytics results matching criteria
   */
  @SpeakeasyMetadata({ elemType: shared.EventRecord })
  eventRecords?: shared.EventRecord[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
