"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETUpdateAccountPasswordPolicyActionEnum(str, Enum):
    UPDATE_ACCOUNT_PASSWORD_POLICY = 'UpdateAccountPasswordPolicy'

class GETUpdateAccountPasswordPolicyVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_05_08 = '2010-05-08'


@dataclasses.dataclass
class GETUpdateAccountPasswordPolicyRequest:
    
    action: GETUpdateAccountPasswordPolicyActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETUpdateAccountPasswordPolicyVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    allow_users_to_change_password: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowUsersToChangePassword', 'style': 'form', 'explode': True }})
    r"""<p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href=\\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html\\">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>"""  
    hard_expiry: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HardExpiry', 'style': 'form', 'explode': True }})
    r"""<p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note> <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p> </note>"""  
    max_password_age: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxPasswordAge', 'style': 'form', 'explode': True }})
    r"""<p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>"""  
    minimum_password_length: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MinimumPasswordLength', 'style': 'form', 'explode': True }})
    r"""<p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>"""  
    password_reuse_prevention: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PasswordReusePrevention', 'style': 'form', 'explode': True }})
    r"""<p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>"""  
    require_lowercase_characters: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RequireLowercaseCharacters', 'style': 'form', 'explode': True }})
    r"""<p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>"""  
    require_numbers: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RequireNumbers', 'style': 'form', 'explode': True }})
    r"""<p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>"""  
    require_symbols: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RequireSymbols', 'style': 'form', 'explode': True }})
    r"""<p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>"""  
    require_uppercase_characters: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RequireUppercaseCharacters', 'style': 'form', 'explode': True }})
    r"""<p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETUpdateAccountPasswordPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    