"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import optimisationactionname_enum as shared_optimisationactionname_enum
from ..shared import ruleexecutionreportingerrortype_enum as shared_ruleexecutionreportingerrortype_enum
from ..shared import ruleexecutionreportingexecutionsource_enum as shared_ruleexecutionreportingexecutionsource_enum
from ..shared import ruleexecutionreportinglinks as shared_ruleexecutionreportinglinks
from ..shared import ruleexecutionreportingstatus_enum as shared_ruleexecutionreportingstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuleExecutionReporting:
    
    execution_source: shared_ruleexecutionreportingexecutionsource_enum.RuleExecutionReportingExecutionSourceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionSource') }})
    r"""The requestor type for the execution of the rule"""  
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleId') }})
    r"""The rule identifier"""  
    rule_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleName') }})
    r"""The name of the rule"""  
    status: shared_ruleexecutionreportingstatus_enum.RuleExecutionReportingStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the execution of the rule"""  
    active_affected_product_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeAffectedProductCount'), 'exclude': lambda f: f is None }})
    r"""The count of affected active products"""  
    affected_channel_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affectedChannelCount'), 'exclude': lambda f: f is None }})
    r"""The count of affected Channels across all products"""  
    affected_product_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affectedProductCount'), 'exclude': lambda f: f is None }})
    r"""The count of affected products, active or not"""  
    completed_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The completed utc date of the execution of the rule"""  
    error_type: Optional[shared_ruleexecutionreportingerrortype_enum.RuleExecutionReportingErrorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""The error type for this execution if any"""  
    links: Optional[shared_ruleexecutionreportinglinks.RuleExecutionReportingLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    r"""Links to retrieve/action on this rule execution"""  
    optimisation_action_name: Optional[shared_optimisationactionname_enum.OptimisationActionNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optimisationActionName'), 'exclude': lambda f: f is None }})
    r"""The optimisation action"""  
    report_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportUrl'), 'exclude': lambda f: f is None }})
    r"""The url for the excel report for this execution"""  
    started_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start utc date of the execution of the rule"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""The userId that executed the rule if any"""  
    