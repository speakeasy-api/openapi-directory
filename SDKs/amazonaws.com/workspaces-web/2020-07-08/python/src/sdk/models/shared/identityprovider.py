"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import identityprovidertype_enum as shared_identityprovidertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentityProvider:
    r"""The identity provider."""
    
    identity_provider_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviderArn') }})  
    identity_provider_details: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviderDetails'), 'exclude': lambda f: f is None }})  
    identity_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviderName'), 'exclude': lambda f: f is None }})  
    identity_provider_type: Optional[shared_identityprovidertype_enum.IdentityProviderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviderType'), 'exclude': lambda f: f is None }})  
    