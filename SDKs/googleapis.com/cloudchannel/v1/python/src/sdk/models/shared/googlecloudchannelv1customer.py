"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudchannelv1cloudidentityinfo as shared_googlecloudchannelv1cloudidentityinfo
from ..shared import googlecloudchannelv1contactinfo as shared_googlecloudchannelv1contactinfo
from ..shared import googletypepostaladdress as shared_googletypepostaladdress
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1Customer:
    r"""Entity representing a customer of a reseller or distributor."""
    
    alternate_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateEmail'), 'exclude': lambda f: f is None }})
    r"""Secondary contact email. You need to provide an alternate email to create different domains if a primary contact email already exists. Users will receive a notification with credentials when you create an admin.google.com account. Secondary emails are also recovery email addresses. Alternate emails are optional when you create Team customers."""  
    channel_partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelPartnerId'), 'exclude': lambda f: f is None }})
    r"""Cloud Identity ID of the customer's channel partner. Populated only if a channel partner exists for this customer."""  
    cloud_identity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudIdentityId'), 'exclude': lambda f: f is None }})
    r"""Output only. The customer's Cloud Identity ID if the customer has a Cloud Identity resource."""  
    cloud_identity_info: Optional[shared_googlecloudchannelv1cloudidentityinfo.GoogleCloudChannelV1CloudIdentityInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudIdentityInfo'), 'exclude': lambda f: f is None }})
    r"""Cloud Identity information for the Cloud Channel Customer."""  
    correlation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correlationId'), 'exclude': lambda f: f is None }})
    r"""Optional. External CRM ID for the customer. Populated only if a CRM ID exists for this customer."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time when the customer was created."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Required. The customer's primary domain. Must match the primary contact email's domain."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""Optional. The BCP-47 language code, such as \\"en-US\\" or \\"sr-Latn\\". For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the customer. Format: accounts/{account_id}/customers/{customer_id}"""  
    org_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgDisplayName'), 'exclude': lambda f: f is None }})
    r"""Required. Name of the organization that the customer entity represents."""  
    org_postal_address: Optional[shared_googletypepostaladdress.GoogleTypePostalAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgPostalAddress'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478"""  
    primary_contact_info: Optional[shared_googlecloudchannelv1contactinfo.GoogleCloudChannelV1ContactInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactInfo'), 'exclude': lambda f: f is None }})
    r"""Contact information for a customer account."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time when the customer was updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1CustomerInput:
    r"""Entity representing a customer of a reseller or distributor."""
    
    alternate_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateEmail'), 'exclude': lambda f: f is None }})
    r"""Secondary contact email. You need to provide an alternate email to create different domains if a primary contact email already exists. Users will receive a notification with credentials when you create an admin.google.com account. Secondary emails are also recovery email addresses. Alternate emails are optional when you create Team customers."""  
    channel_partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelPartnerId'), 'exclude': lambda f: f is None }})
    r"""Cloud Identity ID of the customer's channel partner. Populated only if a channel partner exists for this customer."""  
    cloud_identity_info: Optional[shared_googlecloudchannelv1cloudidentityinfo.GoogleCloudChannelV1CloudIdentityInfoInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudIdentityInfo'), 'exclude': lambda f: f is None }})
    r"""Cloud Identity information for the Cloud Channel Customer."""  
    correlation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correlationId'), 'exclude': lambda f: f is None }})
    r"""Optional. External CRM ID for the customer. Populated only if a CRM ID exists for this customer."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Required. The customer's primary domain. Must match the primary contact email's domain."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""Optional. The BCP-47 language code, such as \\"en-US\\" or \\"sr-Latn\\". For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier."""  
    org_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgDisplayName'), 'exclude': lambda f: f is None }})
    r"""Required. Name of the organization that the customer entity represents."""  
    org_postal_address: Optional[shared_googletypepostaladdress.GoogleTypePostalAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgPostalAddress'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478"""  
    primary_contact_info: Optional[shared_googlecloudchannelv1contactinfo.GoogleCloudChannelV1ContactInfoInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactInfo'), 'exclude': lambda f: f is None }})
    r"""Contact information for a customer account."""  
    