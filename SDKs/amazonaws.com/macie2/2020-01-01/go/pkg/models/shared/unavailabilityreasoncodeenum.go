// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UnavailabilityReasonCodeEnum - Specifies why occurrences of sensitive data can't be retrieved for a finding. Possible values are:
type UnavailabilityReasonCodeEnum string

const (
	UnavailabilityReasonCodeEnumObjectExceedsSizeQuota      UnavailabilityReasonCodeEnum = "OBJECT_EXCEEDS_SIZE_QUOTA"
	UnavailabilityReasonCodeEnumUnsupportedObjectType       UnavailabilityReasonCodeEnum = "UNSUPPORTED_OBJECT_TYPE"
	UnavailabilityReasonCodeEnumUnsupportedFindingType      UnavailabilityReasonCodeEnum = "UNSUPPORTED_FINDING_TYPE"
	UnavailabilityReasonCodeEnumInvalidClassificationResult UnavailabilityReasonCodeEnum = "INVALID_CLASSIFICATION_RESULT"
	UnavailabilityReasonCodeEnumObjectUnavailable           UnavailabilityReasonCodeEnum = "OBJECT_UNAVAILABLE"
)

func (e *UnavailabilityReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OBJECT_EXCEEDS_SIZE_QUOTA":
		fallthrough
	case "UNSUPPORTED_OBJECT_TYPE":
		fallthrough
	case "UNSUPPORTED_FINDING_TYPE":
		fallthrough
	case "INVALID_CLASSIFICATION_RESULT":
		fallthrough
	case "OBJECT_UNAVAILABLE":
		*e = UnavailabilityReasonCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnavailabilityReasonCodeEnum: %s", s)
	}
}
