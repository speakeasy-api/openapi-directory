/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specifies the HTTP context to use for the test authorizer request.
 */
export class TestInvokeAuthorizerRequestBodyHttpContext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "headers" })
  headers?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "queryString" })
  queryString?: string;
}

/**
 * Specifies the MQTT context to use for the test authorizer request
 */
export class TestInvokeAuthorizerRequestBodyMqttContext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

/**
 * Specifies the TLS context to use for the test authorizer request.
 */
export class TestInvokeAuthorizerRequestBodyTlsContext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "serverName" })
  serverName?: string;
}

export class TestInvokeAuthorizerRequestBody extends SpeakeasyBase {
  /**
   * Specifies the HTTP context to use for the test authorizer request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpContext" })
  @Type(() => TestInvokeAuthorizerRequestBodyHttpContext)
  httpContext?: TestInvokeAuthorizerRequestBodyHttpContext;

  /**
   * Specifies the MQTT context to use for the test authorizer request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mqttContext" })
  @Type(() => TestInvokeAuthorizerRequestBodyMqttContext)
  mqttContext?: TestInvokeAuthorizerRequestBodyMqttContext;

  /**
   * Specifies the TLS context to use for the test authorizer request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tlsContext" })
  @Type(() => TestInvokeAuthorizerRequestBodyTlsContext)
  tlsContext?: TestInvokeAuthorizerRequestBodyTlsContext;

  /**
   * The token returned by your custom authentication service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "token" })
  token?: string;

  /**
   * The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenSignature" })
  tokenSignature?: string;
}

export class TestInvokeAuthorizerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: TestInvokeAuthorizerRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The custom authorizer name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=authorizerName",
  })
  authorizerName: string;
}

export class TestInvokeAuthorizerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * InvalidResponseException
   */
  @SpeakeasyMetadata()
  invalidResponseException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  testInvokeAuthorizerResponse?: shared.TestInvokeAuthorizerResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
