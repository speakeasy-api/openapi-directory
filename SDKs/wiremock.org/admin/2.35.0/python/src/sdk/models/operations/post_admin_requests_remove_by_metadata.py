"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyXPathMatch:
    
    matches_xpath: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchesXpath') }})  
    namespaces: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespaces'), 'exclude': lambda f: f is None }})  
    value_pattern: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valuePattern'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyXMLEquality:
    
    equal_to_xml: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equalToXml') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyJSONPathMatch:
    
    matches_json_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchesJsonPath') }})  
    ignore_array_order: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreArrayOrder'), 'exclude': lambda f: f is None }})  
    ignore_extra_elements: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreExtraElements'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyJSONEquals:
    
    equal_to_json: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equalToJson') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyNegativeRegularExpressionMatch:
    
    does_not_match: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doesNotMatch') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyRegularExpressionMatch:
    
    matches: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matches') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyStringContains:
    
    contains: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contains') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataRequestBodyStringEquals:
    
    equal_to: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equalTo') }})  
    case_insensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseInsensitive'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostAdminRequestsRemoveByMetadataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    