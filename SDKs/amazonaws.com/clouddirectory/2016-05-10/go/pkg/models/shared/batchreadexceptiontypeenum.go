// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BatchReadExceptionTypeEnum string

const (
	BatchReadExceptionTypeEnumValidationException             BatchReadExceptionTypeEnum = "ValidationException"
	BatchReadExceptionTypeEnumInvalidArnException             BatchReadExceptionTypeEnum = "InvalidArnException"
	BatchReadExceptionTypeEnumResourceNotFoundException       BatchReadExceptionTypeEnum = "ResourceNotFoundException"
	BatchReadExceptionTypeEnumInvalidNextTokenException       BatchReadExceptionTypeEnum = "InvalidNextTokenException"
	BatchReadExceptionTypeEnumAccessDeniedException           BatchReadExceptionTypeEnum = "AccessDeniedException"
	BatchReadExceptionTypeEnumNotNodeException                BatchReadExceptionTypeEnum = "NotNodeException"
	BatchReadExceptionTypeEnumFacetValidationException        BatchReadExceptionTypeEnum = "FacetValidationException"
	BatchReadExceptionTypeEnumCannotListParentOfRootException BatchReadExceptionTypeEnum = "CannotListParentOfRootException"
	BatchReadExceptionTypeEnumNotIndexException               BatchReadExceptionTypeEnum = "NotIndexException"
	BatchReadExceptionTypeEnumNotPolicyException              BatchReadExceptionTypeEnum = "NotPolicyException"
	BatchReadExceptionTypeEnumDirectoryNotEnabledException    BatchReadExceptionTypeEnum = "DirectoryNotEnabledException"
	BatchReadExceptionTypeEnumLimitExceededException          BatchReadExceptionTypeEnum = "LimitExceededException"
	BatchReadExceptionTypeEnumInternalServiceException        BatchReadExceptionTypeEnum = "InternalServiceException"
)

func (e *BatchReadExceptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ValidationException":
		fallthrough
	case "InvalidArnException":
		fallthrough
	case "ResourceNotFoundException":
		fallthrough
	case "InvalidNextTokenException":
		fallthrough
	case "AccessDeniedException":
		fallthrough
	case "NotNodeException":
		fallthrough
	case "FacetValidationException":
		fallthrough
	case "CannotListParentOfRootException":
		fallthrough
	case "NotIndexException":
		fallthrough
	case "NotPolicyException":
		fallthrough
	case "DirectoryNotEnabledException":
		fallthrough
	case "LimitExceededException":
		fallthrough
	case "InternalServiceException":
		*e = BatchReadExceptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchReadExceptionTypeEnum: %s", s)
	}
}
