// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CorporateTaxDeclarationOrderEnum string

const (
	CorporateTaxDeclarationOrderEnumOnestAdvance   CorporateTaxDeclarationOrderEnum = "1st advance"
	CorporateTaxDeclarationOrderEnumTwondAdvance   CorporateTaxDeclarationOrderEnum = "2nd advance"
	CorporateTaxDeclarationOrderEnumThreerdAdvance CorporateTaxDeclarationOrderEnum = "3rd advance"
	CorporateTaxDeclarationOrderEnumFourthAdvance  CorporateTaxDeclarationOrderEnum = "4th advance"
	CorporateTaxDeclarationOrderEnumRegularization CorporateTaxDeclarationOrderEnum = "regularization"
)

func (e *CorporateTaxDeclarationOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1st advance":
		fallthrough
	case "2nd advance":
		fallthrough
	case "3rd advance":
		fallthrough
	case "4th advance":
		fallthrough
	case "regularization":
		*e = CorporateTaxDeclarationOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CorporateTaxDeclarationOrderEnum: %s", s)
	}
}

type CorporateTaxDeclaration struct {
	Amount          *float32                          `json:"Amount,omitempty"`
	Author          *string                           `json:"Author,omitempty"`
	Class           []string                          `json:"Class,omitempty"`
	Code            *string                           `json:"Code,omitempty"`
	Comment         *string                           `json:"Comment,omitempty"`
	Date            *string                           `json:"Date,omitempty"`
	DeclarationDate *string                           `json:"DeclarationDate,omitempty"`
	Extension       *string                           `json:"Extension,omitempty"`
	FolderDate      *string                           `json:"FolderDate,omitempty"`
	ID              *string                           `json:"Id,omitempty"`
	Order           *CorporateTaxDeclarationOrderEnum `json:"Order,omitempty"`
	Rate            *float32                          `json:"Rate,omitempty"`
	TaxBase         *float32                          `json:"TaxBase,omitempty"`
	Title           *string                           `json:"Title,omitempty"`
}
