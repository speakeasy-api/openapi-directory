"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inappproductlisting as shared_inappproductlisting
from ..shared import managedproducttaxandcompliancesettings as shared_managedproducttaxandcompliancesettings
from ..shared import price as shared_price
from ..shared import subscriptiontaxandcompliancesettings as shared_subscriptiontaxandcompliancesettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InAppProductPurchaseTypeEnum(str, Enum):
    r"""The type of the product, e.g. a recurring subscription."""
    PURCHASE_TYPE_UNSPECIFIED = 'purchaseTypeUnspecified'
    MANAGED_USER = 'managedUser'
    SUBSCRIPTION = 'subscription'

class InAppProductStatusEnum(str, Enum):
    r"""The status of the product, e.g. whether it's active."""
    STATUS_UNSPECIFIED = 'statusUnspecified'
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InAppProduct:
    r"""An in-app product. The resource for InappproductsService."""
    
    default_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLanguage'), 'exclude': lambda f: f is None }})
    r"""Default language of the localized data, as defined by BCP-47. e.g. \\"en-US\\"."""  
    default_price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultPrice'), 'exclude': lambda f: f is None }})
    r"""Definition of a price, i.e. currency and units."""  
    grace_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gracePeriod'), 'exclude': lambda f: f is None }})
    r"""Grace period of the subscription, specified in ISO 8601 format. Allows developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values are P0D (zero days), P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days)."""  
    listings: Optional[dict[str, shared_inappproductlisting.InAppProductListing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listings'), 'exclude': lambda f: f is None }})
    r"""List of localized title and description data. Map key is the language of the localized data, as defined by BCP-47, e.g. \\"en-US\\"."""  
    managed_product_taxes_and_compliance_settings: Optional[shared_managedproducttaxandcompliancesettings.ManagedProductTaxAndComplianceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedProductTaxesAndComplianceSettings'), 'exclude': lambda f: f is None }})
    r"""Details about taxation and legal compliance for managed products."""  
    package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName'), 'exclude': lambda f: f is None }})
    r"""Package name of the parent app."""  
    prices: Optional[dict[str, shared_price.Price]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prices'), 'exclude': lambda f: f is None }})
    r"""Prices per buyer region. None of these can be zero, as in-app products are never free. Map key is region code, as defined by ISO 3166-2."""  
    purchase_type: Optional[InAppProductPurchaseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseType'), 'exclude': lambda f: f is None }})
    r"""The type of the product, e.g. a recurring subscription."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""Stock-keeping-unit (SKU) of the product, unique within an app."""  
    status: Optional[InAppProductStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the product, e.g. whether it's active."""  
    subscription_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionPeriod'), 'exclude': lambda f: f is None }})
    r"""Subscription period, specified in ISO 8601 format. Acceptable values are P1W (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y (one year)."""  
    subscription_taxes_and_compliance_settings: Optional[shared_subscriptiontaxandcompliancesettings.SubscriptionTaxAndComplianceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionTaxesAndComplianceSettings'), 'exclude': lambda f: f is None }})
    r"""Details about taxation, Google Play policy and legal compliance for subscription products."""  
    trial_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialPeriod'), 'exclude': lambda f: f is None }})
    r"""Trial period, specified in ISO 8601 format. Acceptable values are anything between P7D (seven days) and P999D (999 days)."""  
    