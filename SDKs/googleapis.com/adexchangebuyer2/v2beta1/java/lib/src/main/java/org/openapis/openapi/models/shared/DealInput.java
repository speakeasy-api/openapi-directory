/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DealInput - A deal represents a segment of inventory for displaying ads on. A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
 */
public class DealInput {
    /**
     * Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableEndTime")
    public String availableEndTime;
    public DealInput withAvailableEndTime(String availableEndTime) {
        this.availableEndTime = availableEndTime;
        return this;
    }
    
    /**
     * Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableStartTime")
    public String availableStartTime;
    public DealInput withAvailableStartTime(String availableStartTime) {
        this.availableStartTime = availableStartTime;
        return this;
    }
    
    /**
     * Buyers are allowed to store certain types of private data in a proposal/deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerPrivateData")
    public PrivateData buyerPrivateData;
    public DealInput withBuyerPrivateData(PrivateData buyerPrivateData) {
        this.buyerPrivateData = buyerPrivateData;
        return this;
    }
    
    /**
     * The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createProductId")
    public String createProductId;
    public DealInput withCreateProductId(String createProductId) {
        this.createProductId = createProductId;
        return this;
    }
    
    /**
     * Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createProductRevision")
    public String createProductRevision;
    public DealInput withCreateProductRevision(String createProductRevision) {
        this.createProductRevision = createProductRevision;
        return this;
    }
    
    /**
     * Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn't apply to Private Auction and AdX Preferred Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeRestrictions")
    public CreativeRestrictions creativeRestrictions;
    public DealInput withCreativeRestrictions(CreativeRestrictions creativeRestrictions) {
        this.creativeRestrictions = creativeRestrictions;
        return this;
    }
    
    /**
     * Message captures metadata about the serving status of a deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealServingMetadata")
    public DealServingMetadata dealServingMetadata;
    public DealInput withDealServingMetadata(DealServingMetadata dealServingMetadata) {
        this.dealServingMetadata = dealServingMetadata;
        return this;
    }
    
    /**
     * The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealTerms")
    public DealTerms dealTerms;
    public DealInput withDealTerms(DealTerms dealTerms) {
        this.dealTerms = dealTerms;
        return this;
    }
    
    /**
     * Description for the deal terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public DealInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The name of the deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public DealInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syndicationProduct")
    public DealSyndicationProductEnum syndicationProduct;
    public DealInput withSyndicationProduct(DealSyndicationProductEnum syndicationProduct) {
        this.syndicationProduct = syndicationProduct;
        return this;
    }
    
    /**
     * Targeting represents different criteria that can be used by advertisers to target ad inventory. For example, they can choose to target ad requests only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targeting")
    public MarketplaceTargeting targeting;
    public DealInput withTargeting(MarketplaceTargeting targeting) {
        this.targeting = targeting;
        return this;
    }
    
    /**
     * The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetingCriterion")
    public TargetingCriteria[] targetingCriterion;
    public DealInput withTargetingCriterion(TargetingCriteria[] targetingCriterion) {
        this.targetingCriterion = targetingCriterion;
        return this;
    }
    
    /**
     * The web property code for the seller copied over from the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webPropertyCode")
    public String webPropertyCode;
    public DealInput withWebPropertyCode(String webPropertyCode) {
        this.webPropertyCode = webPropertyCode;
        return this;
    }
    
}
