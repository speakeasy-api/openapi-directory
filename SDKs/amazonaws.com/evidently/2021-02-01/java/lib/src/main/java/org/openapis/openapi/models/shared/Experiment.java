/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Experiment - A structure containing the configuration details of an experiment.
 */
public class Experiment {
    @JsonProperty("arn")
    public String arn;

    public Experiment withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdTime")
    public OffsetDateTime createdTime;

    public Experiment withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Experiment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("execution")
    public ExperimentExecution execution;

    public Experiment withExecution(ExperimentExecution execution) {
        this.execution = execution;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdatedTime")
    public OffsetDateTime lastUpdatedTime;

    public Experiment withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricGoals")
    public MetricGoal[] metricGoals;

    public Experiment withMetricGoals(MetricGoal[] metricGoals) {
        this.metricGoals = metricGoals;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Experiment withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onlineAbDefinition")
    public OnlineAbDefinition onlineAbDefinition;

    public Experiment withOnlineAbDefinition(OnlineAbDefinition onlineAbDefinition) {
        this.onlineAbDefinition = onlineAbDefinition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;

    public Experiment withProject(String project) {
        this.project = project;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("randomizationSalt")
    public String randomizationSalt;

    public Experiment withRandomizationSalt(String randomizationSalt) {
        this.randomizationSalt = randomizationSalt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplingRate")
    public Long samplingRate;

    public Experiment withSamplingRate(Long samplingRate) {
        this.samplingRate = samplingRate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public ExperimentSchedule schedule;

    public Experiment withSchedule(ExperimentSchedule schedule) {
        this.schedule = schedule;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segment")
    public String segment;

    public Experiment withSegment(String segment) {
        this.segment = segment;
        return this;
    }
    
    @JsonProperty("status")
    public ExperimentStatusEnum status;

    public Experiment withStatus(ExperimentStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusReason")
    public String statusReason;

    public Experiment withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public Experiment withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("treatments")
    public Treatment[] treatments;

    public Experiment withTreatments(Treatment[] treatments) {
        this.treatments = treatments;
        return this;
    }
    
    @JsonProperty("type")
    public ExperimentTypeEnum type;

    public Experiment withType(ExperimentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public Experiment(@JsonProperty("arn") String arn, @JsonProperty("createdTime") OffsetDateTime createdTime, @JsonProperty("lastUpdatedTime") OffsetDateTime lastUpdatedTime, @JsonProperty("name") String name, @JsonProperty("status") ExperimentStatusEnum status, @JsonProperty("type") ExperimentTypeEnum type) {
        this.arn = arn;
        this.createdTime = createdTime;
        this.lastUpdatedTime = lastUpdatedTime;
        this.name = name;
        this.status = status;
        this.type = type;
  }
}
