/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class SnapshotLocationRetentionInfo {
    /**
     * Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationTime")
    public OffsetDateTime expirationTime;

    public SnapshotLocationRetentionInfo withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * ID of the location.
     */
    @JsonProperty("id")
    public String id;

    public SnapshotLocationRetentionInfo withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isExpirationDateCalculated")
    public Boolean isExpirationDateCalculated;

    public SnapshotLocationRetentionInfo withIsExpirationDateCalculated(Boolean isExpirationDateCalculated) {
        this.isExpirationDateCalculated = isExpirationDateCalculated;
        return this;
    }
    
    /**
     * Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isExpirationInformationUnavailable")
    public Boolean isExpirationInformationUnavailable;

    public SnapshotLocationRetentionInfo withIsExpirationInformationUnavailable(Boolean isExpirationInformationUnavailable) {
        this.isExpirationInformationUnavailable = isExpirationInformationUnavailable;
        return this;
    }
    
    /**
     * Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
     */
    @JsonProperty("isSnapshotPresent")
    public Boolean isSnapshotPresent;

    public SnapshotLocationRetentionInfo withIsSnapshotPresent(Boolean isSnapshotPresent) {
        this.isSnapshotPresent = isSnapshotPresent;
        return this;
    }
    
    /**
     * Name of the location.
     */
    @JsonProperty("name")
    public String name;

    public SnapshotLocationRetentionInfo withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotFrequency")
    public String snapshotFrequency;

    public SnapshotLocationRetentionInfo withSnapshotFrequency(String snapshotFrequency) {
        this.snapshotFrequency = snapshotFrequency;
        return this;
    }
    
    public SnapshotLocationRetentionInfo(@JsonProperty("id") String id, @JsonProperty("isSnapshotPresent") Boolean isSnapshotPresent, @JsonProperty("name") String name) {
        this.id = id;
        this.isSnapshotPresent = isSnapshotPresent;
        this.name = name;
  }
}
