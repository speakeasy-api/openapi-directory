/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Class XII Passing Certificate
   *
   * @remarks
   * API to verify Class XII Passing Certificate.
   */
  hpcer(
    req: operations.HpcerRequestBody,
    security: operations.HpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hpcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HpcerResponse = new operations.HpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class XII Marksheet
   *
   * @remarks
   * API to verify Class XII Marksheet.
   */
  hscer(
    req: operations.HscerRequestBody,
    security: operations.HscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HscerResponse = new operations.HscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class XII Migration Certificate
   *
   * @remarks
   * API to verify Class XII Migration Certificate.
   */
  hsmgr(
    req: operations.HsmgrRequestBody,
    security: operations.HsmgrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HsmgrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HsmgrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hsmgr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HsmgrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HsmgrResponse = new operations.HsmgrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NCHMCT Skill Certificate (X)
   *
   * @remarks
   * API to verify NCHMCT Skill Certificate (X).
   */
  nchsc(
    req: operations.NchscRequestBody,
    security: operations.NchscSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NchscResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NchscRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nchsc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NchscSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NchscResponse = new operations.NchscResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nchsc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nchsc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NCHMCT Skill Certificate (XII)
   *
   * @remarks
   * API to verify NCHMCT Skill Certificate (XII).
   */
  nctsc(
    req: operations.NctscRequestBody,
    security: operations.NctscSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NctscResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NctscRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nctsc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NctscSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NctscResponse = new operations.NctscResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nctsc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nctsc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NSE Skill Certificate (X)
   *
   * @remarks
   * API to verify NSE Skill Certificate (X).
   */
  nsesc(
    req: operations.NsescRequestBody,
    security: operations.NsescSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NsescResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NsescRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nsesc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NsescSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NsescResponse = new operations.NsescResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nsesc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nsesc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NSE Skill Certificate (XII)
   *
   * @remarks
   * API to verify NSE Skill Certificate (XII).
   */
  nstsc(
    req: operations.NstscRequestBody,
    security: operations.NstscSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NstscResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NstscRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nstsc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NstscSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NstscResponse = new operations.NstscResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nstsc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Nstsc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NEET Rank Letter
   *
   * @remarks
   * API to verify NEET Rank Letter.
   */
  ntltr(
    req: operations.NtltrRequestBody,
    security: operations.NtltrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NtltrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NtltrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ntltr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NtltrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NtltrResponse = new operations.NtltrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntltr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntltr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NEET Marksheet
   *
   * @remarks
   * API to verify NEET Marksheet.
   */
  ntmks(
    req: operations.NtmksRequestBody,
    security: operations.NtmksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NtmksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NtmksRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ntmks/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NtmksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NtmksResponse = new operations.NtmksResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ntmks504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ntmks504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Skill Certificate (X)
   *
   * @remarks
   * API to verify Skill Certificate (X).
   */
  skhsc(
    req: operations.SkhscRequestBody,
    security: operations.SkhscSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SkhscResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SkhscRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/skhsc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SkhscSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SkhscResponse = new operations.SkhscResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.skhsc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Skhsc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Skill Certificate (XII)
   *
   * @remarks
   * API to verify Skill Certificate (XII).
   */
  sktsc(
    req: operations.SktscRequestBody,
    security: operations.SktscSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SktscResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SktscRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sktsc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SktscSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SktscResponse = new operations.SktscResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sktsc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sktsc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Passing Certificate
   *
   * @remarks
   * API to verify Class X Passing Certificate.
   */
  spcer(
    req: operations.SpcerRequestBody,
    security: operations.SpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/spcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpcerResponse = new operations.SpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Marksheet
   *
   * @remarks
   * API to verify Class X Marksheet.
   */
  sscer(
    req: operations.SscerRequestBody,
    security: operations.SscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SscerResponse = new operations.SscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Migration Certificate
   *
   * @remarks
   * API to verify Class X Migration Certificate.
   */
  ssmgr(
    req: operations.SsmgrRequestBody,
    security: operations.SsmgrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SsmgrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SsmgrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ssmgr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SsmgrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SsmgrResponse = new operations.SsmgrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Teachers Eligibility Test Certificate
   *
   * @remarks
   * API to verify Teachers Eligibility Test Certificate.
   */
  tetcr(
    req: operations.TetcrRequestBody,
    security: operations.TetcrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TetcrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TetcrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tetcr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TetcrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TetcrResponse = new operations.TetcrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetcr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetcr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Teachers Eligibility Test Mark Sheet
   *
   * @remarks
   * API to verify Teachers Eligibility Test Mark Sheet.
   */
  tetms(
    req: operations.TetmsRequestBody,
    security: operations.TetmsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TetmsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TetmsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tetms/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TetmsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TetmsResponse = new operations.TetmsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tetms504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tetms504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
