// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceUndeafResponseMessageEnum - Response message
type ConferenceUndeafResponseMessageEnum string

const (
	ConferenceUndeafResponseMessageEnumConferenceUndeafExecuted                 ConferenceUndeafResponseMessageEnum = "Conference Undeaf Executed"
	ConferenceUndeafResponseMessageEnumConferenceNameParameterMustBePresent     ConferenceUndeafResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceUndeafResponseMessageEnumMemberIDParameterMustBePresent           ConferenceUndeafResponseMessageEnum = "MemberID Parameter must be present"
	ConferenceUndeafResponseMessageEnumConferenceUndeafFailedConferenceNotFound ConferenceUndeafResponseMessageEnum = "Conference Undeaf Failed -- Conference not found"
)

func (e *ConferenceUndeafResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Conference Undeaf Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "MemberID Parameter must be present":
		fallthrough
	case "Conference Undeaf Failed -- Conference not found":
		*e = ConferenceUndeafResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceUndeafResponseMessageEnum: %s", s)
	}
}

// ConferenceUndeafResponse - Response
type ConferenceUndeafResponse struct {
	// List of affected members
	Members []string `json:"Members,omitempty"`
	// Response message
	Message ConferenceUndeafResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
