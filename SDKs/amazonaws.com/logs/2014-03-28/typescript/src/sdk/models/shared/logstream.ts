/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Represents a log stream, which is a sequence of log events from a single emitter of logs.
 */
export class LogStream extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  creationTime?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "firstEventTimestamp" })
  firstEventTimestamp?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "lastEventTimestamp" })
  lastEventTimestamp?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "lastIngestionTime" })
  lastIngestionTime?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "logStreamName" })
  logStreamName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "storedBytes" })
  storedBytes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "uploadSequenceToken" })
  uploadSequenceToken?: string;
}
