// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetFoodBrandedSearchPhpSecurity struct {
	APIKeyAuth shared.SchemeAPIKeyAuth `security:"scheme,type=apiKey,subtype=query"`
}

// GetFoodBrandedSearchPhpDietEnum - #### Filter the search to only include branded foods that are considered compatible with a specific diet.
//
// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
type GetFoodBrandedSearchPhpDietEnum string

const (
	GetFoodBrandedSearchPhpDietEnumVegan      GetFoodBrandedSearchPhpDietEnum = "Vegan"
	GetFoodBrandedSearchPhpDietEnumVegetarian GetFoodBrandedSearchPhpDietEnum = "Vegetarian"
	GetFoodBrandedSearchPhpDietEnumGlutenFree GetFoodBrandedSearchPhpDietEnum = "Gluten Free"
)

func (e *GetFoodBrandedSearchPhpDietEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Vegan":
		fallthrough
	case "Vegetarian":
		fallthrough
	case "Gluten Free":
		*e = GetFoodBrandedSearchPhpDietEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFoodBrandedSearchPhpDietEnum: %s", s)
	}
}

// GetFoodBrandedSearchPhpLimitEnum - #### Set maximum number of records you want the API to return. The default value is "**10**."
//
// **Example**
// > ```&limit=10```
type GetFoodBrandedSearchPhpLimitEnum string

const (
	GetFoodBrandedSearchPhpLimitEnumOne   GetFoodBrandedSearchPhpLimitEnum = "1"
	GetFoodBrandedSearchPhpLimitEnumTwo   GetFoodBrandedSearchPhpLimitEnum = "2"
	GetFoodBrandedSearchPhpLimitEnumThree GetFoodBrandedSearchPhpLimitEnum = "3"
	GetFoodBrandedSearchPhpLimitEnumFour  GetFoodBrandedSearchPhpLimitEnum = "4"
	GetFoodBrandedSearchPhpLimitEnumFive  GetFoodBrandedSearchPhpLimitEnum = "5"
	GetFoodBrandedSearchPhpLimitEnumSix   GetFoodBrandedSearchPhpLimitEnum = "6"
	GetFoodBrandedSearchPhpLimitEnumSeven GetFoodBrandedSearchPhpLimitEnum = "7"
	GetFoodBrandedSearchPhpLimitEnumEight GetFoodBrandedSearchPhpLimitEnum = "8"
	GetFoodBrandedSearchPhpLimitEnumNine  GetFoodBrandedSearchPhpLimitEnum = "9"
	GetFoodBrandedSearchPhpLimitEnumTen   GetFoodBrandedSearchPhpLimitEnum = "10"
)

func (e *GetFoodBrandedSearchPhpLimitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		fallthrough
	case "9":
		fallthrough
	case "10":
		*e = GetFoodBrandedSearchPhpLimitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFoodBrandedSearchPhpLimitEnum: %s", s)
	}
}

type GetFoodBrandedSearchPhpQueryParams struct {
	// #### Filter the search to only include branded foods that contain a specific allergen.
	//
	// **Example**
	// > ```&allergen=Peanuts```
	//
	// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
	//
	Allergen *string `queryParam:"style=form,explode=true,name=allergen"`
	// #### Filter the search to only include branded foods that are owned by a specific brand.
	//
	// **Example**
	// > ```&brand=Starbucks```
	//
	Brand *string `queryParam:"style=form,explode=true,name=brand"`
	// #### Filter the search to only include branded foods from a specific category.
	//
	// **Example**
	// > ```&category=Plant Based Foods```
	//
	Category *string `queryParam:"style=form,explode=true,name=category"`
	// #### Filter the search to only include branded foods that are sold in a specific country.
	//
	// **Example**
	// > ```&country=United States```
	//
	// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
	//
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// #### Filter the search to only include branded foods that are considered compatible with a specific diet.
	//
	// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
	//
	Diet *GetFoodBrandedSearchPhpDietEnum `queryParam:"style=form,explode=true,name=diet"`
	// #### Filter the search to only include branded foods that contain a specific ingredient.
	//
	// **Example**
	// > ```&ingredient=Salt```
	//
	Ingredient *string `queryParam:"style=form,explode=true,name=ingredient"`
	// #### Filter the search to only include branded foods that are associated with a specific keyword.
	//
	// **Example**
	// > ```&keyword=Organic```
	//
	// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
	//
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// #### Set maximum number of records you want the API to return. The default value is "**10**."
	//
	// **Example**
	// > ```&limit=10```
	//
	Limit *GetFoodBrandedSearchPhpLimitEnum `queryParam:"style=form,explode=true,name=limit"`
	// #### Filter the search to only include branded foods that contain a specific mineral.
	//
	// **Example**
	// > ```&mineral=Potassium```
	//
	Mineral *string `queryParam:"style=form,explode=true,name=mineral"`
	// #### Filter the search to only include branded foods that contain a specific nutrient.
	//
	// **Example**
	// > ```&nutrient=Caffeine```
	//
	// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
	//
	Nutrient *string `queryParam:"style=form,explode=true,name=nutrient"`
	// #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is "**1**."
	//
	// **Example**
	// > ```&page=1```
	//
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.
	//
	// **Example**
	// > ```&palm_oil=E160a Beta Carotene```
	//
	PalmOil *string `queryParam:"style=form,explode=true,name=palm_oil"`
	// ### Filter the search to only include branded foods that contain a specific trace ingredient.
	//
	// **Example**
	// > ```&trace=Tree Nuts```
	//
	// **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
	//
	Trace *string `queryParam:"style=form,explode=true,name=trace"`
	// #### Filter the search to only include branded foods that contain a specific vitamin.
	//
	// **Example**
	// > ```&vitamin=Biotin```
	//
	Vitamin *string `queryParam:"style=form,explode=true,name=vitamin"`
}

type GetFoodBrandedSearchPhpRequest struct {
	QueryParams GetFoodBrandedSearchPhpQueryParams
	Security    GetFoodBrandedSearchPhpSecurity
}

type GetFoodBrandedSearchPhpResponse struct {
	// **Valid** - Will return an object containing any matching foods.
	//
	BrandedFoodObject *shared.BrandedFoodObject
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
