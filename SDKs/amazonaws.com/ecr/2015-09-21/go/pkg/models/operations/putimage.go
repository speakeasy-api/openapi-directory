// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutImageXAmzTargetEnum
type PutImageXAmzTargetEnum string

const (
	PutImageXAmzTargetEnumAmazonEc2ContainerRegistryV20150921PutImage PutImageXAmzTargetEnum = "AmazonEC2ContainerRegistry_V20150921.PutImage"
)

func (e *PutImageXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerRegistry_V20150921.PutImage":
		*e = PutImageXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutImageXAmzTargetEnum: %s", s)
	}
}

type PutImageHeaders struct {
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutImageXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutImageRequest struct {
	Headers PutImageHeaders
	Request shared.PutImageRequest `request:"mediaType=application/json"`
}

type PutImageResponse struct {
	ContentType string
	// ImageAlreadyExistsException
	ImageAlreadyExistsException interface{}
	// ImageDigestDoesNotMatchException
	ImageDigestDoesNotMatchException interface{}
	// ImageTagAlreadyExistsException
	ImageTagAlreadyExistsException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// KmsException
	KmsException interface{}
	// LayersNotFoundException
	LayersNotFoundException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	PutImageResponse *shared.PutImageResponse
	// ReferencedImagesNotFoundException
	ReferencedImagesNotFoundException interface{}
	// RepositoryNotFoundException
	RepositoryNotFoundException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
}
