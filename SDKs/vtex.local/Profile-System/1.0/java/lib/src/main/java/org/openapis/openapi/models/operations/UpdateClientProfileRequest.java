/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateClientProfileRequest {
    /**
     * HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Accept")
    public String accept;

    public UpdateClientProfileRequest withAccept(String accept) {
        this.accept = accept;
        return this;
    }
    
    /**
     * Type of the content being sent.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Content-Type")
    public String contentType;

    public UpdateClientProfileRequest withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    @SpeakeasyMetadata("request:mediaType=application/json")
    public UpdateClientProfileRequestBody requestBody;

    public UpdateClientProfileRequest withRequestBody(UpdateClientProfileRequestBody requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    /**
     * The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
     * 
     * &gt; Currently, there are two possible values for this parameter: `email` and `document`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alternativeKey")
    public String alternativeKey;

    public UpdateClientProfileRequest withAlternativeKey(String alternativeKey) {
        this.alternativeKey = alternativeKey;
        return this;
    }
    
    /**
     * ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=profileId")
    public String profileId;

    public UpdateClientProfileRequest withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }
    
    /**
     * This parameter sets the the Time To Live (TTL), in days, of the specific document being created or updated with this request. After this period of time from the moment of the request, the document is deleted. By sending this parameter you override the TTL set for the schema.
     * 
     * &gt; Currently, the available default document schemas have no TTL. This means that documents are stored indefinitely, unless a TTL is sent when creating or updating.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ttl")
    public Long ttl;

    public UpdateClientProfileRequest withTtl(Long ttl) {
        this.ttl = ttl;
        return this;
    }
    
    public UpdateClientProfileRequest(@JsonProperty("Accept") String accept, @JsonProperty("Content-Type") String contentType, @JsonProperty("profileId") String profileId) {
        this.accept = accept;
        this.contentType = contentType;
        this.profileId = profileId;
  }
}
