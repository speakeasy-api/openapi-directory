/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DimensionProperties - Properties about a dimension.
 */
public class DimensionProperties {
    /**
     * An unique identifier that references a data source column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceColumnReference")
    public DataSourceColumnReference dataSourceColumnReference;

    public DimensionProperties withDataSourceColumnReference(DataSourceColumnReference dataSourceColumnReference) {
        this.dataSourceColumnReference = dataSourceColumnReference;
        return this;
    }
    
    /**
     * The developer metadata associated with a single row or column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("developerMetadata")
    public DeveloperMetadata[] developerMetadata;

    public DimensionProperties withDeveloperMetadata(DeveloperMetadata[] developerMetadata) {
        this.developerMetadata = developerMetadata;
        return this;
    }
    
    /**
     * True if this dimension is being filtered. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiddenByFilter")
    public Boolean hiddenByFilter;

    public DimensionProperties withHiddenByFilter(Boolean hiddenByFilter) {
        this.hiddenByFilter = hiddenByFilter;
        return this;
    }
    
    /**
     * True if this dimension is explicitly hidden.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiddenByUser")
    public Boolean hiddenByUser;

    public DimensionProperties withHiddenByUser(Boolean hiddenByUser) {
        this.hiddenByUser = hiddenByUser;
        return this;
    }
    
    /**
     * The height (if a row) or width (if a column) of the dimension in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pixelSize")
    public Integer pixelSize;

    public DimensionProperties withPixelSize(Integer pixelSize) {
        this.pixelSize = pixelSize;
        return this;
    }
    
    public DimensionProperties(){}
}
