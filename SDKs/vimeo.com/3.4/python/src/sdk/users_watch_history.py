"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UsersWatchHistory:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_from_watch_history(self, request: operations.DeleteFromWatchHistoryRequest, security: operations.DeleteFromWatchHistorySecurity) -> operations.DeleteFromWatchHistoryResponse:
        r"""Delete a specific video from a user's watch history"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFromWatchHistoryRequest, base_url, '/me/watched/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFromWatchHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_watch_history(self) -> operations.DeleteWatchHistoryResponse:
        r"""Delete a user's watch history"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/watched/videos'
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWatchHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_watch_history(self, request: operations.GetWatchHistoryRequest, security: operations.GetWatchHistorySecurity) -> operations.GetWatchHistoryResponse:
        r"""Get all the videos that a user has watched"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/watched/videos'
        
        query_params = utils.get_query_params(operations.GetWatchHistoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWatchHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    