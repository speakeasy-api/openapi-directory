// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type WebinarPollCreateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarPollCreatePathParams struct {
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

// WebinarPollCreatePollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type WebinarPollCreatePollQuestionsTypeEnum string

const (
	WebinarPollCreatePollQuestionsTypeEnumSingle   WebinarPollCreatePollQuestionsTypeEnum = "single"
	WebinarPollCreatePollQuestionsTypeEnumMultiple WebinarPollCreatePollQuestionsTypeEnum = "multiple"
)

func (e *WebinarPollCreatePollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = WebinarPollCreatePollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollCreatePollQuestionsTypeEnum: %s", s)
	}
}

type WebinarPollCreatePollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *WebinarPollCreatePollQuestionsTypeEnum `json:"type,omitempty"`
}

// WebinarPollCreatePoll - Poll
type WebinarPollCreatePoll struct {
	// Array of Polls
	Questions []WebinarPollCreatePollQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
	// Title for the poll.
	Title *string `json:"title,omitempty" multipartForm:"name=title"`
}

type WebinarPollCreateRequest struct {
	PathParams WebinarPollCreatePathParams
	// Webinar poll object
	Request  WebinarPollCreatePoll `request:"mediaType=application/json"`
	Security WebinarPollCreateSecurity
}

// WebinarPollCreatePollStatusEnum - Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type WebinarPollCreatePollStatusEnum string

const (
	WebinarPollCreatePollStatusEnumNotstart WebinarPollCreatePollStatusEnum = "notstart"
	WebinarPollCreatePollStatusEnumStarted  WebinarPollCreatePollStatusEnum = "started"
	WebinarPollCreatePollStatusEnumEnded    WebinarPollCreatePollStatusEnum = "ended"
	WebinarPollCreatePollStatusEnumSharing  WebinarPollCreatePollStatusEnum = "sharing"
)

func (e *WebinarPollCreatePollStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = WebinarPollCreatePollStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollCreatePollStatusEnum: %s", s)
	}
}

// WebinarPollCreatePoll2 - Poll
type WebinarPollCreatePoll2 struct {
	// Webinar Poll ID
	ID *string `json:"id,omitempty"`
	// Array of Polls
	Questions []WebinarPollCreatePollQuestions `json:"questions,omitempty"`
	// Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *WebinarPollCreatePollStatusEnum `json:"status,omitempty"`
	// Title for the poll.
	Title *string `json:"title,omitempty"`
}

type WebinarPollCreateResponse struct {
	Body        []byte
	ContentType string
	Headers     map[string][]string
	// **HTTP Status Code:** `201`<br>
	// Webinar Poll Created
	Poll        *WebinarPollCreatePoll2
	StatusCode  int
	RawResponse *http.Response
}
