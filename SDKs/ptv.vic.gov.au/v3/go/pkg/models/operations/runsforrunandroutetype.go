// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// RunsForRunAndRouteTypeRouteTypeEnum - Number identifying transport mode; values returned via RouteTypes API
type RunsForRunAndRouteTypeRouteTypeEnum string

const (
	RunsForRunAndRouteTypeRouteTypeEnumZero  RunsForRunAndRouteTypeRouteTypeEnum = "0"
	RunsForRunAndRouteTypeRouteTypeEnumOne   RunsForRunAndRouteTypeRouteTypeEnum = "1"
	RunsForRunAndRouteTypeRouteTypeEnumTwo   RunsForRunAndRouteTypeRouteTypeEnum = "2"
	RunsForRunAndRouteTypeRouteTypeEnumThree RunsForRunAndRouteTypeRouteTypeEnum = "3"
	RunsForRunAndRouteTypeRouteTypeEnumFour  RunsForRunAndRouteTypeRouteTypeEnum = "4"
)

func (e *RunsForRunAndRouteTypeRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = RunsForRunAndRouteTypeRouteTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RunsForRunAndRouteTypeRouteTypeEnum: %s", s)
	}
}

type RunsForRunAndRouteTypePathParams struct {
	// Number identifying transport mode; values returned via RouteTypes API
	RouteType RunsForRunAndRouteTypeRouteTypeEnum `pathParam:"style=simple,explode=false,name=route_type"`
	// The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
	RunRef string `pathParam:"style=simple,explode=false,name=run_ref"`
}

type RunsForRunAndRouteTypeExpandEnum string

const (
	RunsForRunAndRouteTypeExpandEnumAll               RunsForRunAndRouteTypeExpandEnum = "All"
	RunsForRunAndRouteTypeExpandEnumVehicleDescriptor RunsForRunAndRouteTypeExpandEnum = "VehicleDescriptor"
	RunsForRunAndRouteTypeExpandEnumVehiclePosition   RunsForRunAndRouteTypeExpandEnum = "VehiclePosition"
	RunsForRunAndRouteTypeExpandEnumNone              RunsForRunAndRouteTypeExpandEnum = "None"
)

func (e *RunsForRunAndRouteTypeExpandEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "All":
		fallthrough
	case "VehicleDescriptor":
		fallthrough
	case "VehiclePosition":
		fallthrough
	case "None":
		*e = RunsForRunAndRouteTypeExpandEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RunsForRunAndRouteTypeExpandEnum: %s", s)
	}
}

type RunsForRunAndRouteTypeQueryParams struct {
	// Date of the request. (optional - defaults to now)
	DateUtc *time.Time `queryParam:"style=form,explode=true,name=date_utc"`
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.
	Expand []RunsForRunAndRouteTypeExpandEnum `queryParam:"style=form,explode=true,name=expand"`
	// Indicates if geopath data will be returned (default = false)
	IncludeGeopath *bool `queryParam:"style=form,explode=true,name=include_geopath"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type RunsForRunAndRouteTypeRequest struct {
	PathParams  RunsForRunAndRouteTypePathParams
	QueryParams RunsForRunAndRouteTypeQueryParams
}

type RunsForRunAndRouteTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
	// The trip/service run details for the run_ref and route type specified.
	V3RunResponse *shared.V3RunResponse
}
