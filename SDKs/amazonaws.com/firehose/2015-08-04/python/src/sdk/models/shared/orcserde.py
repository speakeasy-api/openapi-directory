"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orccompression_enum as shared_orccompression_enum
from ..shared import orcformatversion_enum as shared_orcformatversion_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrcSerDe:
    r"""A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see <a href=\\"https://orc.apache.org/docs/\\">Apache ORC</a>."""
    
    block_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockSizeBytes'), 'exclude': lambda f: f is None }})  
    bloom_filter_columns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BloomFilterColumns'), 'exclude': lambda f: f is None }})  
    bloom_filter_false_positive_probability: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BloomFilterFalsePositiveProbability'), 'exclude': lambda f: f is None }})  
    compression: Optional[shared_orccompression_enum.OrcCompressionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Compression'), 'exclude': lambda f: f is None }})  
    dictionary_key_threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DictionaryKeyThreshold'), 'exclude': lambda f: f is None }})  
    enable_padding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnablePadding'), 'exclude': lambda f: f is None }})  
    format_version: Optional[shared_orcformatversion_enum.OrcFormatVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FormatVersion'), 'exclude': lambda f: f is None }})  
    padding_tolerance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaddingTolerance'), 'exclude': lambda f: f is None }})  
    row_index_stride: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RowIndexStride'), 'exclude': lambda f: f is None }})  
    stripe_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StripeSizeBytes'), 'exclude': lambda f: f is None }})  
    