"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Bookings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancel_booking(self, request: operations.CancelBookingRequest, security: operations.CancelBookingSecurity) -> operations.CancelBookingResponse:
        r"""CancelBooking
        Cancels an existing booking.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelBookingRequest, base_url, '/v2/bookings/{booking_id}/cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cancel_booking_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelBookingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelBookingResponse])
                res.cancel_booking_response = out

        return res

    def create_booking(self, request: shared.CreateBookingRequest, security: operations.CreateBookingSecurity) -> operations.CreateBookingResponse:
        r"""CreateBooking
        Creates a booking.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/bookings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBookingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateBookingResponse])
                res.create_booking_response = out

        return res

    def list_team_member_booking_profiles(self, request: operations.ListTeamMemberBookingProfilesRequest, security: operations.ListTeamMemberBookingProfilesSecurity) -> operations.ListTeamMemberBookingProfilesResponse:
        r"""ListTeamMemberBookingProfiles
        Lists booking profiles for team members.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/bookings/team-member-booking-profiles'
        
        query_params = utils.get_query_params(operations.ListTeamMemberBookingProfilesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTeamMemberBookingProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTeamMemberBookingProfilesResponse])
                res.list_team_member_booking_profiles_response = out

        return res

    def retrieve_booking(self, request: operations.RetrieveBookingRequest, security: operations.RetrieveBookingSecurity) -> operations.RetrieveBookingResponse:
        r"""RetrieveBooking
        Retrieves a booking.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveBookingRequest, base_url, '/v2/bookings/{booking_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveBookingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveBookingResponse])
                res.retrieve_booking_response = out

        return res

    def retrieve_business_booking_profile(self) -> operations.RetrieveBusinessBookingProfileResponse:
        r"""RetrieveBusinessBookingProfile
        Retrieves a seller's booking profile.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/bookings/business-booking-profile'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveBusinessBookingProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveBusinessBookingProfileResponse])
                res.retrieve_business_booking_profile_response = out

        return res

    def retrieve_team_member_booking_profile(self, request: operations.RetrieveTeamMemberBookingProfileRequest, security: operations.RetrieveTeamMemberBookingProfileSecurity) -> operations.RetrieveTeamMemberBookingProfileResponse:
        r"""RetrieveTeamMemberBookingProfile
        Retrieves a team member's booking profile.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveTeamMemberBookingProfileRequest, base_url, '/v2/bookings/team-member-booking-profiles/{team_member_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveTeamMemberBookingProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveTeamMemberBookingProfileResponse])
                res.retrieve_team_member_booking_profile_response = out

        return res

    def search_availability(self, request: shared.SearchAvailabilityRequest, security: operations.SearchAvailabilitySecurity) -> operations.SearchAvailabilityResponse:
        r"""SearchAvailability
        Searches for availabilities for booking.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/bookings/availability/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchAvailabilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchAvailabilityResponse])
                res.search_availability_response = out

        return res

    def update_booking(self, request: operations.UpdateBookingRequest, security: operations.UpdateBookingSecurity) -> operations.UpdateBookingResponse:
        r"""UpdateBooking
        Updates a booking.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBookingRequest, base_url, '/v2/bookings/{booking_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_booking_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBookingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateBookingResponse])
                res.update_booking_response = out

        return res

    