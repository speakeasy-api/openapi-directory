"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkWebhooksWebhookTestRequestBody:
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The URL where the test webhook will be sent"""  
    alert_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertTypeId'), 'exclude': lambda f: f is None }})
    r"""The type of alert which the test webhook will send. Optional. Defaults to power_supply_down."""  
    payload_template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payloadTemplateId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payload template of the test webhook. Defaults to the HTTP server's template ID if one exists for the given URL, or Generic template ID otherwise"""  
    payload_template_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payloadTemplateName'), 'exclude': lambda f: f is None }})
    r"""The name of the payload template."""  
    shared_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedSecret'), 'exclude': lambda f: f is None }})
    r"""The shared secret the test webhook will send. Optional. Defaults to an empty string."""  
    

@dataclasses.dataclass
class CreateNetworkWebhooksWebhookTestRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkWebhooksWebhookTestRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    
class CreateNetworkWebhooksWebhookTest201ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the webhook delivery"""
    ABANDONED = 'abandoned'
    DELIVERED = 'delivered'
    ENQUEUED = 'enqueued'
    PROCESSING = 'processing'
    RETRYING = 'retrying'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkWebhooksWebhookTest201ApplicationJSON:
    r"""Successful operation"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Webhook delivery identifier"""  
    status: Optional[CreateNetworkWebhooksWebhookTest201ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of the webhook delivery"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL where the webhook was delivered"""  
    

@dataclasses.dataclass
class CreateNetworkWebhooksWebhookTestResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_webhooks_webhook_test_201_application_json_object: Optional[CreateNetworkWebhooksWebhookTest201ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    