"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://azure-api.sportsdata.io/v3/soccer/scores",
    "https://azure-api.sportsdata.io/v3/soccer/scores",
];
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
    }
    /**
     * Areas (Countries)
     */
    SDK.prototype.areasCountries = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AreasCountriesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Areas", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AreasCountriesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.areas = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.areas = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Area, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Canceled Memberships
     */
    SDK.prototype.canceledMemberships = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CanceledMembershipsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/CanceledMemberships", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CanceledMembershipsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.canceledMembership = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CanceledMembership);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Competition Fixtures (League Details)
     */
    SDK.prototype.competitionFixturesLeagueDetails = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CompetitionFixturesLeagueDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/CompetitionDetails/{competition}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CompetitionFixturesLeagueDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.competitionDetail = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CompetitionDetail);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Competition Hierarchy (League Hierarchy)
     */
    SDK.prototype.competitionHierarchyLeagueHierarchy = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CompetitionHierarchyLeagueHierarchyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/CompetitionHierarchy", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CompetitionHierarchyLeagueHierarchyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.areas = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.areas = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Area, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Competitions (Leagues)
     */
    SDK.prototype.competitionsLeagues = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CompetitionsLeaguesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Competitions", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CompetitionsLeaguesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.competitions = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.competitions = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Competition, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Games by Date
     */
    SDK.prototype.gamesByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GamesByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/GamesByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GamesByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.games = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.games = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Game, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships (Active)
     */
    SDK.prototype.membershipsActive = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsActiveRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/ActiveMemberships", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsActiveResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships by Competition (Active)
     */
    SDK.prototype.membershipsByCompetitionActive = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsByCompetitionActiveRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/MembershipsByCompetition/{competition}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsByCompetitionActiveResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships by Competition (Historical)
     */
    SDK.prototype.membershipsByCompetitionHistorical = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsByCompetitionHistoricalRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/HistoricalMembershipsByCompetition/{competition}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsByCompetitionHistoricalResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships by Team (Active)
     */
    SDK.prototype.membershipsByTeamActive = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsByTeamActiveRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/MembershipsByTeam/{teamid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsByTeamActiveResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships by Team (Historical)
     */
    SDK.prototype.membershipsByTeamHistorical = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsByTeamHistoricalRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/HistoricalMembershipsByTeam/{teamid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsByTeamHistoricalResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships (Historical)
     */
    SDK.prototype.membershipsHistorical = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsHistoricalRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/HistoricalMemberships", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsHistoricalResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Memberships (Recently Changed)
     */
    SDK.prototype.membershipsRecentlyChanged = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.MembershipsRecentlyChangedRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/RecentlyChangedMemberships/{days}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.MembershipsRecentlyChangedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.memberships = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.memberships = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Membership, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Player
     */
    SDK.prototype.player = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Player/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.player = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Players
     */
    SDK.prototype.players = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayersRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Players", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Players by Team
     */
    SDK.prototype.playersByTeam = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PlayersByTeamRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/PlayersByTeam/{teamid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PlayersByTeamResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.players = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.players = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Player, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Schedule
     */
    SDK.prototype.schedule = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ScheduleRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Schedule/{roundid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ScheduleResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.games = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.games = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Game, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Season Teams
     */
    SDK.prototype.seasonTeams = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SeasonTeamsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/SeasonTeams/{seasonid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SeasonTeamsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.seasonTeams = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.seasonTeams = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SeasonTeam, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Standings
     */
    SDK.prototype.standings = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.StandingsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Standings/{roundid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.StandingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.standings = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.standings = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Standing, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Team Game Stats by Date
     */
    SDK.prototype.teamGameStatsByDate = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamGameStatsByDateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/TeamGameStatsByDate/{date}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamGameStatsByDateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teamGames = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teamGames = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TeamGame, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Team Season Stats
     */
    SDK.prototype.teamSeasonStats = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamSeasonStatsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/TeamSeasonStats/{roundid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamSeasonStatsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teamSeasons = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teamSeasons = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TeamSeason, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Teams
     */
    SDK.prototype.teams = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TeamsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Teams", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TeamsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.teams = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.teams = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Team, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Upcoming Schedule By Player
     */
    SDK.prototype.upcomingScheduleByPlayer = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpcomingScheduleByPlayerRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/UpcomingScheduleByPlayer/{playerid}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpcomingScheduleByPlayerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.games = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.games = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Game, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Venues
     */
    SDK.prototype.venues = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.VenuesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/{format}/Venues", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.VenuesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.venues = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.venues = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Venue, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
