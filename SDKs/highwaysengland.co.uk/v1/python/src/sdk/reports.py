"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Reports:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def reports_index(self, request: operations.ReportsIndexRequest) -> operations.ReportsIndexResponse:
        r"""Gets the daily report.
        Get's the report.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReportsIndexRequest, base_url, '/v{version}/reports/{report_type}', request)
        
        query_params = utils.get_query_params(operations.ReportsIndexRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReportsIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_v_version_reports_start_date_to_end_date_report_type_(self, request: operations.GetVVersionReportsStartDateToEndDateReportTypeRequest) -> operations.GetVVersionReportsStartDateToEndDateReportTypeResponse:
        r"""Gets the daily report.
        Get's the report.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVVersionReportsStartDateToEndDateReportTypeRequest, base_url, '/v{version}/reports/{start_date}/to/{end_date}/{report_type}', request)
        
        query_params = utils.get_query_params(operations.GetVVersionReportsStartDateToEndDateReportTypeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVVersionReportsStartDateToEndDateReportTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    