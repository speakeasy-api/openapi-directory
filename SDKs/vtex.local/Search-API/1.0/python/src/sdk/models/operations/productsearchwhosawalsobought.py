"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional

PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS = [
	"http://example.com/.{environment}.com.br",
]


@dataclasses.dataclass
class ProductSearchWhoSawAlsoBoughtRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    product_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'productId', 'style': 'simple', 'explode': False }})
    r"""Product unique identifier."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsImages:
    
    image_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageId') }})
    r"""Image ID."""  
    image_label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageLabel') }})
    r"""Image label."""  
    image_last_modified: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageLastModified') }})
    r"""Date and time of the last update of the image."""  
    image_tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageTag') }})
    r"""Image tag."""  
    image_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageText') }})
    r"""Image text."""  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl') }})
    r"""Image URL."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsKitItems:
    
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Amount of the SKU component in the kit."""  
    item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId') }})
    r"""SKU kit component ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsReferenceID:
    
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Key') }})
    r"""Reference Code."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value') }})
    r"""Unique reference code used internally for organizational purposes."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamples:
    
    delivery_sla_per_types: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliverySlaPerTypes') }})
    r"""Delivery SLA per types."""  
    region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region') }})
    r"""Region."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion0:
    r"""Delivery SLA ID."""
    
    delivery_sla_per_types: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliverySlaPerTypes') }})
    r"""Delivery SLA per types."""  
    region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region') }})
    r"""Region."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion:
    r"""Delivery SLA samples per region."""
    
    zero: Optional[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion0] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('0'), 'exclude': lambda f: f is None }})
    r"""Delivery SLA ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferInstallments:
    
    interest_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterestRate') }})
    r"""Interest rate of the installment."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Name of the installment."""  
    number_of_installments: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfInstallments') }})
    r"""Number of the installment."""  
    payment_system_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentSystemGroupName') }})
    r"""Payment system group name of the installment."""  
    payment_system_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentSystemName') }})
    r"""Payment system name of the installment."""  
    total_value_plus_interest_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalValuePlusInterestRate') }})
    r"""Total value plus interest rate of the installment."""  
    value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value') }})
    r"""Value of the installment."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallmentsSellerMerchantInstallments:
    
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""Count."""  
    has_interest_rate: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasInterestRate') }})
    r"""Has interest rate."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID."""  
    interest_rate: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interestRate') }})
    r"""Interest rate."""  
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total."""  
    value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallments:
    
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""Count."""  
    has_interest_rate: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasInterestRate') }})
    r"""Has interest rate."""  
    interest_rate: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interestRate') }})
    r"""Interest rate."""  
    seller_merchant_installments: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallmentsSellerMerchantInstallments] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerMerchantInstallments') }})
    r"""Seller merchant installments."""  
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total."""  
    value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptions:
    
    bin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bin') }})
    r"""Bin."""  
    installments: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallments] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installments') }})
    r"""Installments."""  
    payment_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentGroupName') }})
    r"""Payment group name."""  
    payment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentName') }})
    r"""Payment name."""  
    payment_system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSystem') }})
    r"""Payment system."""  
    value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsPaymentSystems:
    
    available_payments: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availablePayments') }})
    r"""Available payments."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description."""  
    due_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueDate') }})
    r"""Due date."""  
    group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName') }})
    r"""Group name."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID."""  
    is_custom: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCustom') }})
    r"""If is custom or not."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name."""  
    requires_authentication: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresAuthentication') }})
    r"""If requires authentication."""  
    requires_document: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresDocument') }})
    r"""If requires document or not."""  
    string_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringId') }})
    r"""String ID."""  
    template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template') }})
    r"""Template."""  
    validator: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validator') }})
    r"""Validator."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptions:
    r"""Payment options."""
    
    available_accounts: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAccounts') }})
    r"""Available accounts."""  
    available_tokens: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableTokens') }})
    r"""Available tokens."""  
    gift_card_messages: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftCardMessages') }})
    r"""GiftCardMessages."""  
    gift_cards: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftCards') }})
    r"""GiftCards."""  
    installment_options: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installmentOptions') }})
    r"""installment options."""  
    payments: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payments') }})
    r"""Payments."""  
    payment_systems: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsPaymentSystems] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSystems') }})
    r"""Payment systems."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOffer:
    r"""AKA Commertial Condition."""
    
    available_quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableQuantity') }})
    r"""Use the `IsAvailable` field instead."""  
    buy_together: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuyTogether') }})
    r"""Array of other products that can be bought together with the product in question."""  
    cache_version_used_to_call_checkout: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CacheVersionUsedToCallCheckout') }})
    r"""Cache version used to call checkout."""  
    delivery_sla_samples: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamples] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliverySlaSamples') }})
    r"""Delivery SLA samples."""  
    delivery_sla_samples_per_region: ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliverySlaSamplesPerRegion') }})
    r"""Delivery SLA samples per region."""  
    discount_high_light: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DiscountHighLight') }})
    r"""Discount hightlight."""  
    get_info_error_message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GetInfoErrorMessage') }})
    r"""Get info error message."""  
    gift_sku_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GiftSkuIds') }})
    r"""Array of SKU gifts IDs."""  
    installments: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferInstallments] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Installments') }})
    r"""Installments options."""  
    is_available: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAvailable') }})
    r"""If the product is available or not."""  
    item_metadata_attachment: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemMetadataAttachment') }})
    r"""Item metadata attachment."""  
    list_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListPrice') }})
    r"""List price of the product."""  
    payment_options: ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOfferPaymentOptions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentOptions') }})
    r"""Payment options."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price') }})
    r"""Price of the product."""  
    price_valid_until: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceValidUntil') }})
    r"""Price of the product valid until a certain date."""  
    price_without_discount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceWithoutDiscount') }})
    r"""Price of the product without discount."""  
    reward_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RewardValue') }})
    r"""Reward value of the product."""  
    sale_channel: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SaleChannel') }})
    r"""Trade policy which the product is contained."""  
    tax: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tax') }})
    r"""Tax of the product."""  
    teasers: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Teasers') }})
    r"""Teasers."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellers:
    
    add_to_cart_link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addToCartLink') }})
    r"""URL to add the product to the cart."""  
    commertial_offer: ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellersCommertialOffer = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commertialOffer') }})
    r"""AKA Commertial Condition."""  
    seller_default: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerDefault') }})
    r"""If the seller is default or not."""  
    seller_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerId') }})
    r"""SKU seller ID."""  
    seller_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerName') }})
    r"""SKU seller name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSONItems:
    
    complement_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complementName') }})
    r"""SKU complement name."""  
    ean: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ean') }})
    r"""SKU unique identification code (barcode), accepts up to 13 numerical characters."""  
    estimated_date_arrival: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedDateArrival') }})
    r"""Estimated date arrival."""  
    images: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsImages] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images') }})
    r"""Array of information about the SKU image."""  
    is_kit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isKit') }})
    r"""If the SKU is part of a kit."""  
    item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId') }})
    r"""SKU ID."""  
    kit_items: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsKitItems] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kitItems') }})
    r"""Array with information of SKUs components from a Kit."""  
    measurement_unit: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit') }})
    r"""Used only in cases when you need to convert the unit of measure for sale. In common cases, use 'un'."""  
    modal_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modalType') }})
    r"""Modal Type."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""SKU name."""  
    name_complete: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameComplete') }})
    r"""SKU complete name."""  
    reference_id: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsReferenceID] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId') }})
    r"""Reference code ID."""  
    sellers: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItemsSellers] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellers') }})
    r"""Array of SKU sellers."""  
    unit_multiplier: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitMultiplier') }})
    r"""numerical unit that multiplies the selected quantity of the product when it is inserted in the cart."""  
    videos: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Videos') }})
    r"""Videos."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSearchWhoSawAlsoBought200ApplicationJSON:
    
    all_specifications: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allSpecifications') }})
    r"""Array of the product's specifications."""  
    all_specifications_groups: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allSpecificationsGroups') }})
    r"""Array of the product's specifications groups."""  
    brand: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand') }})
    r"""Brand name."""  
    brand_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandId') }})
    r"""Product brand ID."""  
    brand_image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandImageUrl') }})
    r"""Product's brand image URL."""  
    categories: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""Array of the product's categories URLs."""  
    categories_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoriesIds') }})
    r"""Array of the product's categories IDs."""  
    category_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryId') }})
    r"""Product category ID."""  
    cluster_highlights: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterHighlights') }})
    r"""Cluster highlight ID and name."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the main information related to the product. A simple and easy to understand summary for the customer."""  
    items: list[ProductSearchWhoSawAlsoBought200ApplicationJSONItems] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})
    r"""Array containing the product SKU general information."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""Product URL."""  
    link_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkText') }})
    r"""Product URL."""  
    meta_tag_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metaTagDescription') }})
    r"""Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page."""  
    product_clusters: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productClusters') }})
    r"""Product clusters' IDs and names."""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId') }})
    r"""Product unique identifier."""  
    product_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productName') }})
    r"""Product name."""  
    product_reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productReference') }})
    r"""Product reference."""  
    product_reference_code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productReferenceCode') }})
    r"""Product reference ID."""  
    product_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTitle') }})
    r"""Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO."""  
    release_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate') }})
    r"""Product release date."""  
    searchable_clusters: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchableClusters') }})
    r"""Searchable clusters IDs and names"""  
    

@dataclasses.dataclass
class ProductSearchWhoSawAlsoBoughtResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    product_search_who_saw_also_bought_200_application_json_objects: Optional[list[ProductSearchWhoSawAlsoBought200ApplicationJSON]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    