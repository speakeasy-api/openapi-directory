// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum - name of value for sort
type GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum string

const (
	GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnumExpenseDate GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum = "ExpenseDate"
	GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnumInclVat     GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum = "InclVAT"
	GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnumTitle       GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum = "Title"
)

func (e GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum) ToPointer() *GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum {
	return &e
}

func (e *GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ExpenseDate":
		fallthrough
	case "InclVAT":
		fallthrough
	case "Title":
		*e = GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum: %v", v)
	}
}

// GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum - order of sort (if absent default is asc)
type GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum string

const (
	GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnumAsc  GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum = "asc"
	GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnumDesc GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum = "desc"
)

func (e GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum) ToPointer() *GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum {
	return &e
}

func (e *GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum: %v", v)
	}
}

// GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum - If present returns also the data extend
type GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum string

const (
	GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnumTrue  GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum = "true"
	GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnumFalse GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum = "false"
)

func (e GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum) ToPointer() *GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum {
	return &e
}

func (e *GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum: %v", v)
	}
}

type GetSpacesSpaceIDFoldersIDExpenseReportsRequest struct {
	// date range of the documents
	Date *string `queryParam:"style=form,explode=true,name=Date"`
	// range of ExpenseDate (valid available)
	ExpenseDate interface{} `queryParam:"style=form,explode=true,name=ExpenseDate"`
	// date range of attachment
	FolderDate *string `queryParam:"style=form,explode=true,name=FolderDate"`
	// range of processing date (boolean available)
	ProcessingDate *string `queryParam:"style=form,explode=true,name=ProcessingDate"`
	// index range of the results
	Range *string `queryParam:"style=form,explode=true,name=Range"`
	// name of value for sort
	SortName *GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum `queryParam:"style=form,explode=true,name=SortName"`
	// order of sort (if absent default is asc)
	SortOrder *GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum `queryParam:"style=form,explode=true,name=SortOrder"`
	// If present returns also the data extend
	WithExtend *GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum `queryParam:"style=form,explode=true,name=WithExtend"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type GetSpacesSpaceIDFoldersIDExpenseReportsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of expense reports of the folder (if the folder is social the PersonId is also returned)
	GetSpacesSpaceIDFoldersIDExpenseReports200ApplicationJSONAllOfs []shared.ExpenseReport
}
