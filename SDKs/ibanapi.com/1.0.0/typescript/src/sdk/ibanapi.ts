/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * API Endpoints of IBANAPI
 */
export class Ibanapi {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Account Balance
   *
   * @remarks
   * Returns the account balance and expiry
   */
  getBalance(
    config?: AxiosRequestConfig
  ): Promise<operations.GetBalanceResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/balance";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBalanceResponse =
        new operations.GetBalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.balanceResponse = utils.objectToClass(
              httpRes?.data,
              shared.BalanceResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndOne = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndOne
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwentyTwo = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwentyTwo
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Validate IBAN
   *
   * @remarks
   * Returns the validation results
   */
  validateIBAN(
    req: operations.ValidateIBANRequest,
    security: operations.ValidateIBANSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ValidateIBANResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ValidateIBANRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/validate";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ValidateIBANSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ValidateIBANResponse =
        new operations.ValidateIBANResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibanResult = utils.objectToClass(
              httpRes?.data,
              shared.IBANResult
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndOne = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndOne
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwentyTwo = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwentyTwo
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Validate IBAN Basic
   *
   * @remarks
   * Returns the basic validation results
   */
  validateIBANBasic(
    req: operations.ValidateIBANBasicRequest,
    security: operations.ValidateIBANBasicSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ValidateIBANBasicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ValidateIBANBasicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/validate-basic";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ValidateIBANBasicSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ValidateIBANBasicResponse =
        new operations.ValidateIBANBasicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibanResultBasic = utils.objectToClass(
              httpRes?.data,
              shared.IBANResultBasic
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndOne = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndOne
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndThree = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndThree
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwentyTwo = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwentyTwo
            );
          }
          break;
      }

      return res;
    });
  }
}
