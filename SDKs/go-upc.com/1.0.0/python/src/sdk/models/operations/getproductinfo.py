"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetProductInfoRequest:
    
    code: str = dataclasses.field(metadata={'path_param': { 'field_name': 'code', 'style': 'simple', 'explode': False }})  
    
class GetProductInfo200ApplicationJSONCodeTypeEnum(str, Enum):
    r"""The type of product code (UPC/EAN/ISBN)."""
    UPC = 'UPC'
    EAN = 'EAN'
    ISBN = 'ISBN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetProductInfo200ApplicationJSONProduct:
    r"""all matching product details."""
    
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""The brand of the product (if available)."""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category of the product (if available)."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the product (if available)."""  
    ean: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ean'), 'exclude': lambda f: f is None }})
    r"""The EAN code of the product."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""The URL for the product image."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the product."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""The region of the product."""  
    specs: Optional[list[list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specs'), 'exclude': lambda f: f is None }})
    r"""A list of additional item specifications (if available)."""  
    upc: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upc'), 'exclude': lambda f: f is None }})
    r"""The UPC code of the product."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetProductInfo200ApplicationJSON:
    r"""The product corresponding to the provided `code`"""
    
    barcode_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeUrl'), 'exclude': lambda f: f is None }})
    r"""The URL to the scannable barcode image."""  
    code_type: Optional[GetProductInfo200ApplicationJSONCodeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeType'), 'exclude': lambda f: f is None }})
    r"""The type of product code (UPC/EAN/ISBN)."""  
    product: Optional[GetProductInfo200ApplicationJSONProduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product'), 'exclude': lambda f: f is None }})
    r"""all matching product details."""  
    

@dataclasses.dataclass
class GetProductInfoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""No product information was found for the given `code`."""  
    get_product_info_200_application_json_object: Optional[GetProductInfo200ApplicationJSON] = dataclasses.field(default=None)
    r"""The product corresponding to the provided `code`"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    