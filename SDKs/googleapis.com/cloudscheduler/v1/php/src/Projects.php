<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateResponse
     */
	public function cloudschedulerProjectsLocationsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "job", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteResponse
     */
	public function cloudschedulerProjectsLocationsJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetResponse
     */
	public function cloudschedulerProjectsLocationsJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListResponse
     */
	public function cloudschedulerProjectsLocationsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a job. If successful, the updated Job is returned. If the job does not exist, `NOT_FOUND` is returned. If UpdateJob does not successfully return, it is possible for the job to be in an Job.State.UPDATE_FAILED state. A job in this state may not be executed. If this happens, retry the UpdateJob request until a successful response is received.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchResponse
     */
	public function cloudschedulerProjectsLocationsJobsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "job", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pauses a job. If a job is paused then the system will stop executing the job until it is re-enabled via ResumeJob. The state of the job is stored in state; if paused it will be set to Job.State.PAUSED. A job must be in Job.State.ENABLED to be paused.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseResponse
     */
	public function cloudschedulerProjectsLocationsJobsPause(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:pause', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsPauseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resume a job. This method reenables a job after it has been Job.State.PAUSED. The state of a job is stored in Job.state; after calling this method it will be set to Job.State.ENABLED. A job must be in Job.State.PAUSED to be resumed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeResponse
     */
	public function cloudschedulerProjectsLocationsJobsResume(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:resume', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Forces a job to run now. When this method is called, Cloud Scheduler will dispatch the job, even if the job is already running.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunResponse
     */
	public function cloudschedulerProjectsLocationsJobsRun(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:run', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsJobsRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListResponse
     */
	public function cloudschedulerProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudschedulerProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
}