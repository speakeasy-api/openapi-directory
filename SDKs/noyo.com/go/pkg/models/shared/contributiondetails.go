// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ContributionDetailsContributionRuleTypeEnum - The type of contribution rule
type ContributionDetailsContributionRuleTypeEnum string

const (
	ContributionDetailsContributionRuleTypeEnumFixedDollar ContributionDetailsContributionRuleTypeEnum = "fixed_dollar"
	ContributionDetailsContributionRuleTypeEnumPercent     ContributionDetailsContributionRuleTypeEnum = "percent"
)

func (e *ContributionDetailsContributionRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fixed_dollar":
		fallthrough
	case "percent":
		*e = ContributionDetailsContributionRuleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContributionDetailsContributionRuleTypeEnum: %s", s)
	}
}

// ContributionDetailsContributionSourceEnum - The source of the contribution, either employee_amount or employer_amount
type ContributionDetailsContributionSourceEnum string

const (
	ContributionDetailsContributionSourceEnumEmployeeAmount ContributionDetailsContributionSourceEnum = "employee_amount"
	ContributionDetailsContributionSourceEnumEmployerAmount ContributionDetailsContributionSourceEnum = "employer_amount"
)

func (e *ContributionDetailsContributionSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "employee_amount":
		fallthrough
	case "employer_amount":
		*e = ContributionDetailsContributionSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContributionDetailsContributionSourceEnum: %s", s)
	}
}

// ContributionDetailsContributionTargetEnum - Where this particular contribution rule is applied, either employee or dependents
type ContributionDetailsContributionTargetEnum string

const (
	ContributionDetailsContributionTargetEnumDependents ContributionDetailsContributionTargetEnum = "dependents"
	ContributionDetailsContributionTargetEnumEmployee   ContributionDetailsContributionTargetEnum = "employee"
)

func (e *ContributionDetailsContributionTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dependents":
		fallthrough
	case "employee":
		*e = ContributionDetailsContributionTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContributionDetailsContributionTargetEnum: %s", s)
	}
}

type ContributionDetails struct {
	// The contribution rule
	ContributionRule string `json:"contribution_rule"`
	// The type of contribution rule
	ContributionRuleType ContributionDetailsContributionRuleTypeEnum `json:"contribution_rule_type"`
	// The source of the contribution, either employee_amount or employer_amount
	ContributionSource ContributionDetailsContributionSourceEnum `json:"contribution_source"`
	// Where this particular contribution rule is applied, either employee or dependents
	ContributionTarget ContributionDetailsContributionTargetEnum `json:"contribution_target"`
}
