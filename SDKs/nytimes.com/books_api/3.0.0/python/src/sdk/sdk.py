"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

SERVERS = [
    "https://api.nytimes.com/svc/books/v3",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Books API provides information about book reviews and The New York Times bestsellers lists.
    http://developer.nytimes.com/
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_lists_best_sellers_history_json(self, request: operations.GETListsBestSellersHistoryJSONRequest, security: operations.GETListsBestSellersHistoryJSONSecurity) -> operations.GETListsBestSellersHistoryJSONResponse:
        r"""Best Seller History List"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lists/best-sellers/history.json'
        
        query_params = utils.get_query_params(operations.GETListsBestSellersHistoryJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETListsBestSellersHistoryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETListsBestSellersHistoryJSON200ApplicationJSON])
                res.get_lists_best_sellers_history_json_200_application_json_object = out

        return res

    def get_lists_date_list_json(self, request: operations.GETListsDateListJSONRequest, security: operations.GETListsDateListJSONSecurity) -> operations.GETListsDateListJSONResponse:
        r"""Best Seller List by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETListsDateListJSONRequest, base_url, '/lists/{date}/{list}.json', request)
        
        query_params = utils.get_query_params(operations.GETListsDateListJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETListsDateListJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETListsDateListJSON200ApplicationJSON])
                res.get_lists_date_list_json_200_application_json_object = out

        return res

    def get_lists_format(self, request: operations.GETListsFormatRequest, security: operations.GETListsFormatSecurity) -> operations.GETListsFormatResponse:
        r"""Best Seller List"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETListsFormatRequest, base_url, '/lists.{format}', request)
        
        query_params = utils.get_query_params(operations.GETListsFormatRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETListsFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETListsFormat200ApplicationJSON])
                res.get_lists_format_200_application_json_object = out

        return res

    def get_lists_names_format(self, request: operations.GETListsNamesFormatRequest, security: operations.GETListsNamesFormatSecurity) -> operations.GETListsNamesFormatResponse:
        r"""Best Seller List Names"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETListsNamesFormatRequest, base_url, '/lists/names.{format}', request)
        
        query_params = utils.get_query_params(operations.GETListsNamesFormatRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETListsNamesFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETListsNamesFormat200ApplicationJSON])
                res.get_lists_names_format_200_application_json_object = out

        return res

    def get_lists_overview_format(self, request: operations.GETListsOverviewFormatRequest, security: operations.GETListsOverviewFormatSecurity) -> operations.GETListsOverviewFormatResponse:
        r"""Best Seller List Overview"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETListsOverviewFormatRequest, base_url, '/lists/overview.{format}', request)
        
        query_params = utils.get_query_params(operations.GETListsOverviewFormatRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETListsOverviewFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETListsOverviewFormat200ApplicationJSON])
                res.get_lists_overview_format_200_application_json_object = out

        return res

    def get_reviews_format(self, request: operations.GETReviewsFormatRequest, security: operations.GETReviewsFormatSecurity) -> operations.GETReviewsFormatResponse:
        r"""Reviews"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETReviewsFormatRequest, base_url, '/reviews.{format}', request)
        
        query_params = utils.get_query_params(operations.GETReviewsFormatRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETReviewsFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETReviewsFormat200ApplicationJSON])
                res.get_reviews_format_200_application_json_object = out

        return res

    