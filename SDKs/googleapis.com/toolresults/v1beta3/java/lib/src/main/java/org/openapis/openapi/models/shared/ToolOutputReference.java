/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ToolOutputReference - A reference to a ToolExecution output file.
 */
public class ToolOutputReference {
    /**
     * A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public Timestamp creationTime;
    public ToolOutputReference withCreationTime(Timestamp creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * A reference to a file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("output")
    public FileReference output;
    public ToolOutputReference withOutput(FileReference output) {
        this.output = output;
        return this;
    }
    
    /**
     * A reference to a test case. Test case references are canonically ordered lexicographically by these three factors: * First, by test_suite_name. * Second, by class_name. * Third, by name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testCase")
    public TestCaseReference testCase;
    public ToolOutputReference withTestCase(TestCaseReference testCase) {
        this.testCase = testCase;
        return this;
    }
    
}
