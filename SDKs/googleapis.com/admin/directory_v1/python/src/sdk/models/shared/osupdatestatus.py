"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OsUpdateStatusStateEnum(str, Enum):
    r"""The update state of an OS update."""
    UPDATE_STATE_UNSPECIFIED = 'updateStateUnspecified'
    UPDATE_STATE_NOT_STARTED = 'updateStateNotStarted'
    UPDATE_STATE_DOWNLOAD_IN_PROGRESS = 'updateStateDownloadInProgress'
    UPDATE_STATE_NEED_REBOOT = 'updateStateNeedReboot'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OsUpdateStatus:
    r"""Contains information regarding the current OS update status."""
    
    reboot_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebootTime'), 'exclude': lambda f: f is None }})
    r"""Date and time of the last reboot."""  
    state: Optional[OsUpdateStatusStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The update state of an OS update."""  
    target_kiosk_app_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetKioskAppVersion'), 'exclude': lambda f: f is None }})
    r"""New required platform version from the pending updated kiosk app."""  
    target_os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetOsVersion'), 'exclude': lambda f: f is None }})
    r"""New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy \\"0.0.0.0\\" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot."""  
    update_check_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateCheckTime'), 'exclude': lambda f: f is None }})
    r"""Date and time of the last update check."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Date and time of the last successful OS update."""  
    