/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { StringTranslation } from "./stringtranslation";
import { Expose, Transform } from "class-transformer";

export class StringWithTranslations extends SpeakeasyBase {
  /**
   * source string content
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata({ elemType: StringTranslation })
  @Expose({ name: "translations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, StringTranslation> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], StringTranslation);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  translations?: Record<string, StringTranslation>;
}
