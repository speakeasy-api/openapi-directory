/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StandardSqlDataType } from "./standardsqldatatype";
import { Expose, Type } from "class-transformer";

/**
 * Optional. Defaults to FIXED_TYPE.
 */
export enum ArgumentArgumentKindEnum {
  ArgumentKindUnspecified = "ARGUMENT_KIND_UNSPECIFIED",
  FixedType = "FIXED_TYPE",
  AnyType = "ANY_TYPE",
}

/**
 * Optional. Specifies whether the argument is input or output. Can be set for procedures only.
 */
export enum ArgumentModeEnum {
  ModeUnspecified = "MODE_UNSPECIFIED",
  In = "IN",
  Out = "OUT",
  Inout = "INOUT",
}

/**
 * Input/output argument of a function or a stored procedure.
 */
export class Argument extends SpeakeasyBase {
  /**
   * Optional. Defaults to FIXED_TYPE.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "argumentKind" })
  argumentKind?: ArgumentArgumentKindEnum;

  /**
   * The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  @Type(() => StandardSqlDataType)
  dataType?: StandardSqlDataType;

  /**
   * Optional. Specifies whether the argument is input or output. Can be set for procedures only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: ArgumentModeEnum;

  /**
   * Optional. The name of this argument. Can be absent for function return argument.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
