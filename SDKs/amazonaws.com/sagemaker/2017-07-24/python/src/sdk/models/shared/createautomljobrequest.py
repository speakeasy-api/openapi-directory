"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import automlchannel as shared_automlchannel
from ..shared import automljobconfig as shared_automljobconfig
from ..shared import automljobobjective as shared_automljobobjective
from ..shared import automloutputdataconfig as shared_automloutputdataconfig
from ..shared import modeldeployconfig as shared_modeldeployconfig
from ..shared import problemtype_enum as shared_problemtype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAutoMLJobRequest:
    
    auto_ml_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobName') }})  
    input_data_config: list[shared_automlchannel.AutoMLChannel] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig') }})  
    output_data_config: shared_automloutputdataconfig.AutoMLOutputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputDataConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    auto_ml_job_config: Optional[shared_automljobconfig.AutoMLJobConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobConfig'), 'exclude': lambda f: f is None }})  
    auto_ml_job_objective: Optional[shared_automljobobjective.AutoMLJobObjective] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobObjective'), 'exclude': lambda f: f is None }})  
    generate_candidate_definitions_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GenerateCandidateDefinitionsOnly'), 'exclude': lambda f: f is None }})  
    model_deploy_config: Optional[shared_modeldeployconfig.ModelDeployConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelDeployConfig'), 'exclude': lambda f: f is None }})  
    problem_type: Optional[shared_problemtype_enum.ProblemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProblemType'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    