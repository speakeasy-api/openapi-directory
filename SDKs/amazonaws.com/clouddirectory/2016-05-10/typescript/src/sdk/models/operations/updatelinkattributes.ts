/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
 */
export class UpdateLinkAttributesRequestBodyTypedLinkSpecifier extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.AttributeNameAndValue })
  @Expose({ name: "IdentityAttributeValues" })
  @Type(() => shared.AttributeNameAndValue)
  identityAttributeValues?: shared.AttributeNameAndValue[];

  @SpeakeasyMetadata()
  @Expose({ name: "SourceObjectReference" })
  @Type(() => shared.ObjectReference)
  sourceObjectReference?: shared.ObjectReference;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetObjectReference" })
  @Type(() => shared.ObjectReference)
  targetObjectReference?: shared.ObjectReference;

  @SpeakeasyMetadata()
  @Expose({ name: "TypedLinkFacet" })
  @Type(() => shared.TypedLinkSchemaAndFacetName)
  typedLinkFacet?: shared.TypedLinkSchemaAndFacetName;
}

export class UpdateLinkAttributesRequestBody extends SpeakeasyBase {
  /**
   * The attributes update structure.
   */
  @SpeakeasyMetadata({ elemType: shared.LinkAttributeUpdate })
  @Expose({ name: "AttributeUpdates" })
  @Type(() => shared.LinkAttributeUpdate)
  attributeUpdates: shared.LinkAttributeUpdate[];

  /**
   * Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TypedLinkSpecifier" })
  @Type(() => UpdateLinkAttributesRequestBodyTypedLinkSpecifier)
  typedLinkSpecifier: UpdateLinkAttributesRequestBodyTypedLinkSpecifier;
}

export class UpdateLinkAttributesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateLinkAttributesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see <a>arns</a> or <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-data-partition",
  })
  xAmzDataPartition: string;
}

export class UpdateLinkAttributesResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: shared.AccessDeniedException;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DirectoryNotEnabledException
   */
  @SpeakeasyMetadata()
  directoryNotEnabledException?: shared.DirectoryNotEnabledException;

  /**
   * FacetValidationException
   */
  @SpeakeasyMetadata()
  facetValidationException?: shared.FacetValidationException;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: shared.InternalServiceException;

  /**
   * InvalidArnException
   */
  @SpeakeasyMetadata()
  invalidArnException?: shared.InvalidArnException;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: shared.LimitExceededException;

  /**
   * RetryableConflictException
   */
  @SpeakeasyMetadata()
  retryableConflictException?: shared.RetryableConflictException;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: shared.ResourceNotFoundException;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateLinkAttributesResponse?: Record<string, any>;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: shared.ValidationException;
}
