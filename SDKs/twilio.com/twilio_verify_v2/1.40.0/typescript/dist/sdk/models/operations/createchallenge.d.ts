import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export declare const CreateChallengeServerList: readonly ["https://verify.twilio.com"];
export declare class CreateChallengeSecurity extends SpeakeasyBase {
    password: string;
    username: string;
}
export declare class CreateChallengeCreateChallengeRequest extends SpeakeasyBase {
    /**
     * Optional payload used to verify the Challenge upon creation. Only used with a Factor of type `totp` to carry the TOTP code that needs to be verified. For `TOTP` this value must be between 3 and 8 characters long.
     */
    authPayload?: string;
    /**
     * A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when `factor_type` is `push`. There can be up to 20 details fields.
     */
    detailsFields?: any[];
    /**
     * Shown to the user when the push notification arrives. Required when `factor_type` is `push`. Can be up to 256 characters in length
     */
    detailsMessage?: string;
    /**
     * The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.
     */
    expirationDate?: Date;
    /**
     * The unique SID identifier of the Factor.
     */
    factorSid: string;
    /**
     * Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. `{"ip": "172.168.1.234"}`. Can be up to 1024 characters in length
     */
    hiddenDetails?: any;
}
export declare class CreateChallengeRequest extends SpeakeasyBase {
    /**
     * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     */
    identity: string;
    requestBody?: CreateChallengeCreateChallengeRequest;
    /**
     * The unique SID identifier of the Service.
     */
    serviceSid: string;
}
export declare class CreateChallengeResponse extends SpeakeasyBase {
    contentType: string;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * Created
     */
    verifyV2ServiceEntityChallenge?: shared.VerifyV2ServiceEntityChallenge;
}
