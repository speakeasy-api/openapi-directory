<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new AuthorizationPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse
     */
	public function networksecurityProjectsLocationsAuthorizationPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/authorizationPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorizationPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists AuthorizationPolicies in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse
     */
	public function networksecurityProjectsLocationsAuthorizationPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/authorizationPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAuthorizationPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAuthorizationPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new ClientTlsPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateResponse
     */
	public function networksecurityProjectsLocationsClientTlsPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/clientTlsPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clientTlsPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ClientTlsPolicies in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListResponse
     */
	public function networksecurityProjectsLocationsClientTlsPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/clientTlsPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsClientTlsPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClientTlsPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClientTlsPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new GatewaySecurityPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse
     */
	public function networksecurityProjectsLocationsGatewaySecurityPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/gatewaySecurityPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "gatewaySecurityPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists GatewaySecurityPolicies in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse
     */
	public function networksecurityProjectsLocationsGatewaySecurityPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/gatewaySecurityPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGatewaySecurityPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGatewaySecurityPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new GatewaySecurityPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse
     */
	public function networksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/rules', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "gatewaySecurityPolicyRuleInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists GatewaySecurityPolicyRules in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse
     */
	public function networksecurityProjectsLocationsGatewaySecurityPoliciesRulesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/rules', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGatewaySecurityPolicyRulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGatewaySecurityPolicyRulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListResponse
     */
	public function networksecurityProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelResponse
     */
	public function networksecurityProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListResponse
     */
	public function networksecurityProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new ServerTlsPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateResponse
     */
	public function networksecurityProjectsLocationsServerTlsPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/serverTlsPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serverTlsPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyResponse
     */
	public function networksecurityProjectsLocationsServerTlsPoliciesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ServerTlsPolicies in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListResponse
     */
	public function networksecurityProjectsLocationsServerTlsPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/serverTlsPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServerTlsPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServerTlsPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyResponse
     */
	public function networksecurityProjectsLocationsServerTlsPoliciesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsResponse
     */
	public function networksecurityProjectsLocationsServerTlsPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new TlsInspectionPolicy in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateResponse
     */
	public function networksecurityProjectsLocationsTlsInspectionPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tlsInspectionPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tlsInspectionPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists TlsInspectionPolicies in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListResponse
     */
	public function networksecurityProjectsLocationsTlsInspectionPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tlsInspectionPolicies', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsTlsInspectionPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTlsInspectionPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTlsInspectionPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new UrlList in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateResponse
     */
	public function networksecurityProjectsLocationsUrlListsCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/urlLists', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single UrlList.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteResponse
     */
	public function networksecurityProjectsLocationsUrlListsDelete(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single UrlList.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetResponse
     */
	public function networksecurityProjectsLocationsUrlListsGet(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists UrlLists in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListResponse
     */
	public function networksecurityProjectsLocationsUrlListsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/urlLists', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUrlListsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUrlListsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single UrlList.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchResponse
     */
	public function networksecurityProjectsLocationsUrlListsPatch(
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworksecurityProjectsLocationsUrlListsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}