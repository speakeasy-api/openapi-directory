/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateParagraphStyleRequest - Update the styling of all paragraphs that overlap with the given range.
 */
public class UpdateParagraphStyleRequest {
    /**
     * The fields that should be updated. At least one field must be specified. The root `paragraph_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph style's alignment property, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public String fields;
    public UpdateParagraphStyleRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paragraphStyle")
    public ParagraphStyle paragraphStyle;
    public UpdateParagraphStyleRequest withParagraphStyle(ParagraphStyle paragraphStyle) {
        this.paragraphStyle = paragraphStyle;
        return this;
    }
    
    /**
     * Specifies a contiguous range of text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("range")
    public Range range;
    public UpdateParagraphStyleRequest withRange(Range range) {
        this.range = range;
        return this;
    }
    
}
