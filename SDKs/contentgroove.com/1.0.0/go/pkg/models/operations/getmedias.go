// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetMediasSecurity struct {
	BearerHeader string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
}

// GetMediasSortEnum - Sorting to be applied to the query. For more info: https://jsonapi.org/format/#fetching-sorting
type GetMediasSortEnum string

const (
	GetMediasSortEnumCreatedAt              GetMediasSortEnum = "created_at"
	GetMediasSortEnumMinusCreatedAt         GetMediasSortEnum = "-created_at"
	GetMediasSortEnumOriginalCreatedAt      GetMediasSortEnum = "original_created_at"
	GetMediasSortEnumMinusOriginalCreatedAt GetMediasSortEnum = "-original_created_at"
	GetMediasSortEnumName                   GetMediasSortEnum = "name"
	GetMediasSortEnumMinusName              GetMediasSortEnum = "-name"
)

func (e GetMediasSortEnum) ToPointer() *GetMediasSortEnum {
	return &e
}

func (e *GetMediasSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "-created_at":
		fallthrough
	case "original_created_at":
		fallthrough
	case "-original_created_at":
		fallthrough
	case "name":
		fallthrough
	case "-name":
		*e = GetMediasSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMediasSortEnum: %v", v)
	}
}

type GetMediasRequest struct {
	// Filters to be applied to the query.
	//
	// Query params in the url must look like this: "filter[attributeName_*matcher*]"
	//
	// (i.e. filter[name_eq]=chimp%20into%20space)
	//
	// Available matchers can be found here: https://activerecord-hackery.github.io/ransack/getting-started/search-matches/
	//
	//
	Filter map[string]interface{} `queryParam:"style=deepObject,explode=true,name=filter"`
	// Specify page number and page size for the query
	Page map[string]interface{} `queryParam:"style=deepObject,explode=true,name=page"`
	// Sorting to be applied to the query. For more info: https://jsonapi.org/format/#fetching-sorting
	Sort *GetMediasSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetMediasResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// successful
	MediasResponseObject *shared.MediasResponseObject
	// too many requests
	TooManyRequestsErrorResponseObject *shared.TooManyRequestsErrorResponseObject
}
