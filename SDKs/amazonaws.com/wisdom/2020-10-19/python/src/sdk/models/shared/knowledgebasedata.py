"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import knowledgebasestatus_enum as shared_knowledgebasestatus_enum
from ..shared import knowledgebasetype_enum as shared_knowledgebasetype_enum
from ..shared import renderingconfiguration as shared_renderingconfiguration
from ..shared import serversideencryptionconfiguration as shared_serversideencryptionconfiguration
from ..shared import sourceconfiguration as shared_sourceconfiguration
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KnowledgeBaseData:
    r"""Information about the knowledge base."""
    
    knowledge_base_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knowledgeBaseArn') }})  
    knowledge_base_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knowledgeBaseId') }})  
    knowledge_base_type: shared_knowledgebasetype_enum.KnowledgeBaseTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knowledgeBaseType') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    status: shared_knowledgebasestatus_enum.KnowledgeBaseStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    last_content_modification_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastContentModificationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    rendering_configuration: Optional[shared_renderingconfiguration.RenderingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renderingConfiguration'), 'exclude': lambda f: f is None }})  
    server_side_encryption_configuration: Optional[shared_serversideencryptionconfiguration.ServerSideEncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverSideEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    source_configuration: Optional[shared_sourceconfiguration.SourceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceConfiguration'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    