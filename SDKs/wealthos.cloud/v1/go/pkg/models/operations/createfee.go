// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateFeeSecurity struct {
	APISecretKey shared.SchemeAPISecretKey `security:"scheme,type=apiKey,subtype=header"`
}

type CreateFeeHeaders struct {
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// CreateFeeRootTypeForFeeSubTransactionTypeEnum - Fee sub transaction type
type CreateFeeRootTypeForFeeSubTransactionTypeEnum string

const (
	CreateFeeRootTypeForFeeSubTransactionTypeEnumAncillaryFee      CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Ancillary fee"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumManagementFee     CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Management fee"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumAdvisorOngoingFee CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Advisor ongoing fee"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumOneOffAdvisorFee  CreateFeeRootTypeForFeeSubTransactionTypeEnum = "One-off advisor fee"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumCustodyFees       CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Custody fees"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumCommission        CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Commission"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumFeeCredit         CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Fee credit"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumFeeRebate         CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Fee rebate"
	CreateFeeRootTypeForFeeSubTransactionTypeEnumCommissionRebate  CreateFeeRootTypeForFeeSubTransactionTypeEnum = "Commission rebate"
)

func (e *CreateFeeRootTypeForFeeSubTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Ancillary fee":
		fallthrough
	case "Management fee":
		fallthrough
	case "Advisor ongoing fee":
		fallthrough
	case "One-off advisor fee":
		fallthrough
	case "Custody fees":
		fallthrough
	case "Commission":
		fallthrough
	case "Fee credit":
		fallthrough
	case "Fee rebate":
		fallthrough
	case "Commission rebate":
		*e = CreateFeeRootTypeForFeeSubTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeSubTransactionTypeEnum: %s", s)
	}
}

// CreateFeeRootTypeForFee - JSON for the Fee resource type
type CreateFeeRootTypeForFee struct {
	// Currency of the Fee.must be a currency configured for the Pot
	Currency string `json:"currency"`
	// Pot ID
	PotID string `json:"pot_id"`
	// Unique request id to ensure idempotency. (ex: UUID)
	RequestID string `json:"request_id"`
	// Fee sub transaction type
	SubTransactionType CreateFeeRootTypeForFeeSubTransactionTypeEnum `json:"sub_transaction_type"`
	// Fee Amount upto 2 decimal places
	TransactionValue string `json:"transaction_value"`
}

type CreateFeeRequest struct {
	Headers  CreateFeeHeaders
	Request  CreateFeeRootTypeForFee `request:"mediaType=application/json"`
	Security CreateFeeSecurity
}

// CreateFee500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type CreateFee500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateFee429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type CreateFee429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateFee409ApplicationJSONStatusEnum - Current status of the original request
type CreateFee409ApplicationJSONStatusEnum string

const (
	CreateFee409ApplicationJSONStatusEnumProcessing CreateFee409ApplicationJSONStatusEnum = "PROCESSING"
	CreateFee409ApplicationJSONStatusEnumComplete   CreateFee409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e *CreateFee409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = CreateFee409ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFee409ApplicationJSONStatusEnum: %s", s)
	}
}

// CreateFee409ApplicationJSON - Duplicate request
type CreateFee409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status CreateFee409ApplicationJSONStatusEnum `json:"status"`
}

// CreateFee404ApplicationJSON - The specified resource was not found
type CreateFee404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateFee403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type CreateFee403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateFee401ApplicationJSON - You do not have permissions to access this resource.
type CreateFee401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateFee400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type CreateFee400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateFeeRootTypeForFeeCreationResponseDirectionEnum - in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
type CreateFeeRootTypeForFeeCreationResponseDirectionEnum string

const (
	CreateFeeRootTypeForFeeCreationResponseDirectionEnumIn  CreateFeeRootTypeForFeeCreationResponseDirectionEnum = "in"
	CreateFeeRootTypeForFeeCreationResponseDirectionEnumOut CreateFeeRootTypeForFeeCreationResponseDirectionEnum = "out"
)

func (e *CreateFeeRootTypeForFeeCreationResponseDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = CreateFeeRootTypeForFeeCreationResponseDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeCreationResponseDirectionEnum: %s", s)
	}
}

// CreateFeeRootTypeForFeeCreationResponseOriginEnum - Origin of the transaction
type CreateFeeRootTypeForFeeCreationResponseOriginEnum string

const (
	CreateFeeRootTypeForFeeCreationResponseOriginEnumAPI        CreateFeeRootTypeForFeeCreationResponseOriginEnum = "api"
	CreateFeeRootTypeForFeeCreationResponseOriginEnumAdminUI    CreateFeeRootTypeForFeeCreationResponseOriginEnum = "admin_ui"
	CreateFeeRootTypeForFeeCreationResponseOriginEnumFileUpload CreateFeeRootTypeForFeeCreationResponseOriginEnum = "file_upload"
	CreateFeeRootTypeForFeeCreationResponseOriginEnumSystem     CreateFeeRootTypeForFeeCreationResponseOriginEnum = "system"
)

func (e *CreateFeeRootTypeForFeeCreationResponseOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api":
		fallthrough
	case "admin_ui":
		fallthrough
	case "file_upload":
		fallthrough
	case "system":
		*e = CreateFeeRootTypeForFeeCreationResponseOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeCreationResponseOriginEnum: %s", s)
	}
}

type CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnum string

const (
	CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnumFees CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnum = "Fees"
)

func (e *CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Fees":
		*e = CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnum: %s", s)
	}
}

// CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum - Sub transaction type
type CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum string

const (
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumAncillaryFee      CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Ancillary fee"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumManagementFee     CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Management fee"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumAdvisorOngoingFee CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Advisor ongoing fee"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumOneOffAdvisorFee  CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "One-off advisor fee"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumCustodyFees       CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Custody fees"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumCommission        CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Commission"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumFeeCredit         CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Fee credit"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumFeeRebate         CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Fee rebate"
	CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnumCommissionRebate  CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum = "Commission rebate"
)

func (e *CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Ancillary fee":
		fallthrough
	case "Management fee":
		fallthrough
	case "Advisor ongoing fee":
		fallthrough
	case "One-off advisor fee":
		fallthrough
	case "Custody fees":
		fallthrough
	case "Commission":
		fallthrough
	case "Fee credit":
		fallthrough
	case "Fee rebate":
		fallthrough
	case "Commission rebate":
		*e = CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum: %s", s)
	}
}

// CreateFeeRootTypeForFeeCreationResponseSubTypeEnum - Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
type CreateFeeRootTypeForFeeCreationResponseSubTypeEnum string

const (
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumInstructed CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "instructed"
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumConfirmed  CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "confirmed"
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumPriced     CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "priced"
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumRejected   CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "rejected"
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumSettled    CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "settled"
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumCancelled  CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "cancelled"
	CreateFeeRootTypeForFeeCreationResponseSubTypeEnumScheduled  CreateFeeRootTypeForFeeCreationResponseSubTypeEnum = "scheduled"
)

func (e *CreateFeeRootTypeForFeeCreationResponseSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "instructed":
		fallthrough
	case "confirmed":
		fallthrough
	case "priced":
		fallthrough
	case "rejected":
		fallthrough
	case "settled":
		fallthrough
	case "cancelled":
		fallthrough
	case "scheduled":
		*e = CreateFeeRootTypeForFeeCreationResponseSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeCreationResponseSubTypeEnum: %s", s)
	}
}

// CreateFeeRootTypeForFeeCreationResponseTypeEnum - State of the transaction
type CreateFeeRootTypeForFeeCreationResponseTypeEnum string

const (
	CreateFeeRootTypeForFeeCreationResponseTypeEnumPending  CreateFeeRootTypeForFeeCreationResponseTypeEnum = "pending"
	CreateFeeRootTypeForFeeCreationResponseTypeEnumArchived CreateFeeRootTypeForFeeCreationResponseTypeEnum = "archived"
)

func (e *CreateFeeRootTypeForFeeCreationResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "archived":
		*e = CreateFeeRootTypeForFeeCreationResponseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFeeRootTypeForFeeCreationResponseTypeEnum: %s", s)
	}
}

// CreateFeeRootTypeForFeeCreationResponse - JSON for the Fee creation response
type CreateFeeRootTypeForFeeCreationResponse struct {
	// Will indicate the date where this record was created
	CreatedAt string `json:"created_at"`
	// Currency of the Fee
	Currency string `json:"currency"`
	// in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
	Direction CreateFeeRootTypeForFeeCreationResponseDirectionEnum `json:"direction"`
	// External Transaction Reference
	ExternalTransactionReference *string `json:"external_transaction_reference,omitempty"`
	// investment_product_id
	InvestmentProductID string `json:"investment_product_id"`
	// Origin of the transaction
	Origin CreateFeeRootTypeForFeeCreationResponseOriginEnum `json:"origin"`
	// Pot ID
	PotID                  string                                                            `json:"pot_id"`
	PrimaryTransactionType CreateFeeRootTypeForFeeCreationResponsePrimaryTransactionTypeEnum `json:"primary_transaction_type"`
	// Intended settlement date of the pending transaction or actual the settled day of the transaction
	SettlementDate *string `json:"settlement_date,omitempty"`
	// Sub transaction type
	SubTransactionType CreateFeeRootTypeForFeeCreationResponseSubTransactionTypeEnum `json:"sub_transaction_type"`
	// Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
	SubType CreateFeeRootTypeForFeeCreationResponseSubTypeEnum `json:"sub_type"`
	// Date the transaction was effected
	TradeDate *string `json:"trade_date,omitempty"`
	// Unique ID of the fee transaction
	TransactionID string `json:"transaction_id"`
	// Fee Amount upto 2 decimal places
	TransactionValue string `json:"transaction_value"`
	// State of the transaction
	Type CreateFeeRootTypeForFeeCreationResponseTypeEnum `json:"type"`
	// Will indicate the date where this record was last changed
	UpdatedAt string `json:"updated_at"`
}

type CreateFeeResponse struct {
	ContentType string
	// success
	RootTypeForFeeCreationResponse *CreateFeeRootTypeForFeeCreationResponse
	StatusCode                     int
	RawResponse                    *http.Response
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	CreateFee400ApplicationJSONObject *CreateFee400ApplicationJSON
	// You do not have permissions to access this resource.
	CreateFee401ApplicationJSONObject *CreateFee401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	CreateFee403ApplicationJSONObject *CreateFee403ApplicationJSON
	// The specified resource was not found
	CreateFee404ApplicationJSONObject *CreateFee404ApplicationJSON
	// Duplicate request
	CreateFee409ApplicationJSONObject *CreateFee409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	CreateFee429ApplicationJSONObject *CreateFee429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	CreateFee500ApplicationJSONObject *CreateFee500ApplicationJSON
}
