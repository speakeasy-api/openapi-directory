/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * API integration layer for linked biological objects.
 * 
 *  __Source:__ https://github.com/biolink/biolink-api/
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "/api",
	};
  	
    /**
     * Retrieve associations between entities or entity and descriptors
     */
    public Association association;
    /**
     * Retrieval of domain entities plus associations
     */
    public Bioentity bioentity;
    /**
     * Operations over sets of entities
     */
    public Bioentityset bioentityset;
    /**
     * Map gene IDs to their homologs
     */
    public BioentitysetHomologs bioentitysetHomologs;
    /**
     * maps a set of entities to a slim
     */
    public BioentitysetSlimmer bioentitysetSlimmer;
    /**
     * Operations on GO Causal Activity Models (GO-CAMs)
     */
    public Cam cam;
    /**
     * Operations on evidence graphs
     */
    public EvidenceGraph evidenceGraph;
    /**
     * Operations to retrieve sequence features
     */
    public GenomeFeatures genomeFeatures;
    /**
     * Operations over data graphs
     */
    public Graph graph;
    /**
     * mapping and resolution of identifiers
     */
    public IdentifierMapper identifierMapper;
    /**
     * identifier prefixes
     */
    public IdentifierPrefixes identifierPrefixes;
    /**
     * Individual humans (including patients), or organisms
     */
    public Individual individual;
    /**
     * Perform bulk operations
     */
    public Mart mart;
    /**
     * Get metadata
     */
    public Metadata metadata;
    /**
     * Match patients with similar diseases and non-human genes based on their phenotypes
     */
    public Mme mme;
    /**
     * annotate text using named entities
     */
    public NlpAnnotate nlpAnnotate;
    /**
     * extract a subgraph from an ontology
     */
    public Ontol ontol;
    /**
     * Retrieve IDs for labels
     */
    public OntolIdentifier ontolIdentifier;
    /**
     * Assign labels to IDs
     */
    public OntolLabeler ontolLabeler;
    /**
     * Operations on Ontology Terms and Subsets
     */
    public Ontology ontology;
    /**
     * OWL-level operations on an ontology
     */
    public OwlOntology owlOntology;
    /**
     * pairwise similarity between two entities
     */
    public PairSim pairSim;
    /**
     * Usage of different relationship types
     */
    public RelationUsage relationUsage;
    /**
     * Search for entities
     */
    public Search search;
    /**
     * Perform semantic similarity, ranking, and sufficiency scoring
     */
    public Sim sim;
    /**
     * Operations related to sets of variants
     */
    public VariationSet variationSet;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.association = new Association(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bioentity = new Bioentity(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bioentityset = new Bioentityset(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bioentitysetHomologs = new BioentitysetHomologs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bioentitysetSlimmer = new BioentitysetSlimmer(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.cam = new Cam(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.evidenceGraph = new EvidenceGraph(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.genomeFeatures = new GenomeFeatures(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.graph = new Graph(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.identifierMapper = new IdentifierMapper(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.identifierPrefixes = new IdentifierPrefixes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.individual = new Individual(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.mart = new Mart(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.metadata = new Metadata(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.mme = new Mme(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.nlpAnnotate = new NlpAnnotate(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ontol = new Ontol(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ontolIdentifier = new OntolIdentifier(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ontolLabeler = new OntolLabeler(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.ontology = new Ontology(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.owlOntology = new OwlOntology(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.pairSim = new PairSim(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.relationUsage = new RelationUsage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.search = new Search(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sim = new Sim(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.variationSet = new VariationSet(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}