// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TagResourceXAmzTargetEnum
type TagResourceXAmzTargetEnum string

const (
	TagResourceXAmzTargetEnumAwsSimbaAPIServiceV20180301TagResource TagResourceXAmzTargetEnum = "AWSSimbaAPIService_v20180301.TagResource"
)

func (e TagResourceXAmzTargetEnum) ToPointer() *TagResourceXAmzTargetEnum {
	return &e
}

func (e *TagResourceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSSimbaAPIService_v20180301.TagResource":
		*e = TagResourceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagResourceXAmzTargetEnum: %v", v)
	}
}

type TagResourceRequest struct {
	TagResourceRequest shared.TagResourceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         TagResourceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type TagResourceResponse struct {
	// BadRequest
	BadRequest  interface{}
	ContentType string
	// InternalServerError
	InternalServerError interface{}
	// NotServiceResourceError
	NotServiceResourceError interface{}
	// ResourceDoesNotSupportTagging
	ResourceDoesNotSupportTagging interface{}
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
	// Success
	TagResourceResponse map[string]interface{}
}
