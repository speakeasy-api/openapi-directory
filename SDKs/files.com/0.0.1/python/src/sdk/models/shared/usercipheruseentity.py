"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UserCipherUseEntityInterfaceEnum(str, Enum):
    r"""The interface accessed"""
    WEB = 'web'
    FTP = 'ftp'
    SFTP = 'sftp'
    DAV = 'dav'
    DESKTOP = 'desktop'
    RESTAPI = 'restapi'
    ROBOT = 'robot'
    JSAPI = 'jsapi'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserCipherUseEntity:
    r"""List User Cipher Uses"""
    
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The earliest recorded use of this combination of interface and protocol and cipher (for this user)"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""UserCipherUse ID"""  
    interface: Optional[UserCipherUseEntityInterfaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})
    r"""The interface accessed"""  
    protocol_cipher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol_cipher'), 'exclude': lambda f: f is None }})
    r"""The protocol and cipher employed"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The most recent use of this combination of interface and protocol and cipher (for this user)"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""ID of the user who performed this access"""  
    