/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GetTransactionsByIdv1CardTransactionsv1Transaction {
    /**
     * Net amount lodged or taken from the account after fees and charges were applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountAfterCharges")
    public Long amountAfterCharges;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withAmountAfterCharges(Long amountAfterCharges) {
        this.amountAfterCharges = amountAfterCharges;
        return this;
    }
    
    /**
     * Amount of the transaction before the fees and taxes were applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountBeforeCharges")
    public Long amountBeforeCharges;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withAmountBeforeCharges(Long amountBeforeCharges) {
        this.amountBeforeCharges = amountBeforeCharges;
        return this;
    }
    
    /**
     * the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    public Long balance;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withBalance(Long balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * Details of the batch run if this transaction was part of a batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchItemDetails")
    public GetTransactionsByIdv1CardTransactionsv1TransactionBatchItemDetails batchItemDetails;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withBatchItemDetails(GetTransactionsByIdv1CardTransactionsv1TransactionBatchItemDetails batchItemDetails) {
        this.batchItemDetails = batchItemDetails;
        return this;
    }
    
    /**
     * Details of the card used (if applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    public GetTransactionsByIdv1CardTransactionsv1TransactionRelatedCard card;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withCard(GetTransactionsByIdv1CardTransactionsv1TransactionRelatedCard card) {
        this.card = card;
        return this;
    }
    
    /**
     * The currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public GetTransactionsByIdv1CardTransactionsv1TransactionCurrency currency;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withCurrency(GetTransactionsByIdv1CardTransactionsv1TransactionCurrency currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Date of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateAcknowledged")
    public OffsetDateTime dateAcknowledged;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withDateAcknowledged(OffsetDateTime dateAcknowledged) {
        this.dateAcknowledged = dateAcknowledged;
        return this;
    }
    
    /**
     * Details of the direct debit (if applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directDebitDetails")
    public GetTransactionsByIdv1CardTransactionsv1TransactionDirectDebitDetails directDebitDetails;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withDirectDebitDetails(GetTransactionsByIdv1CardTransactionsv1TransactionDirectDebitDetails directDebitDetails) {
        this.directDebitDetails = directDebitDetails;
        return this;
    }
    
    /**
     * An internal Fire reference for the transaction (UUID)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventUuid")
    public String eventUuid;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withEventUuid(String eventUuid) {
        this.eventUuid = eventUuid;
        return this;
    }
    
    /**
     * The amount of the fee, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feeAmount")
    public Long feeAmount;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withFeeAmount(Long feeAmount) {
        this.feeAmount = feeAmount;
        return this;
    }
    
    /**
     * Details of the FX trade (if applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fxTradeDetails")
    public GetTransactionsByIdv1CardTransactionsv1TransactionFxTrade fxTradeDetails;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withFxTradeDetails(GetTransactionsByIdv1CardTransactionsv1TransactionFxTrade fxTradeDetails) {
        this.fxTradeDetails = fxTradeDetails;
        return this;
    }
    
    /**
     * identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ican")
    public Long ican;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withIcan(Long ican) {
        this.ican = ican;
        return this;
    }
    
    /**
     * The comment/reference on the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myRef")
    public String myRef;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withMyRef(String myRef) {
        this.myRef = myRef;
        return this;
    }
    
    /**
     * (FOP payments only) The FOP Payment Code that was used to make this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentRequestPublicCode")
    public String paymentRequestPublicCode;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withPaymentRequestPublicCode(String paymentRequestPublicCode) {
        this.paymentRequestPublicCode = paymentRequestPublicCode;
        return this;
    }
    
    /**
     * Extra details about the transaction based on the scheme used to make the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proprietarySchemeDetails")
    public GetTransactionsByIdv1CardTransactionsv1TransactionProprietarySchemeDetails[] proprietarySchemeDetails;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withProprietarySchemeDetails(GetTransactionsByIdv1CardTransactionsv1TransactionProprietarySchemeDetails[] proprietarySchemeDetails) {
        this.proprietarySchemeDetails = proprietarySchemeDetails;
        return this;
    }
    
    /**
     * The id of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refId")
    public Long refId;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withRefId(Long refId) {
        this.refId = refId;
        return this;
    }
    
    /**
     * Details of the related third party involved in the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedParty")
    public Object relatedParty;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withRelatedParty(Object relatedParty) {
        this.relatedParty = relatedParty;
        return this;
    }
    
    /**
     * The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    public Long taxAmount;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withTaxAmount(Long taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    
    /**
     * The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("txnId")
    public Long txnId;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withTxnId(Long txnId) {
        this.txnId = txnId;
        return this;
    }
    
    /**
     * The type of the transaction:
     * * `LODGEMENT` - Bank Transfer received
     * * `PIS_LODGEMENT` - Fire Open Payments Lodgement received
     * * `MANUAL_TRANSFER` - Manual Transfer to
     * * `WITHDRAWAL` - Bank Transfer sent
     * * `REVERSAL` - Credit Reversal
     * * `DIRECT_DEBIT` - A direct debit.
     * * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
     * * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
     * * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
     * * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
     * * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
     * * `LODGEMENT_REVERSED` - Bank Transfer received returned
     * * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
     * * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
     * * `CREATE_CARD` - The fee taken when a debit card is issued.
     * * `ADD_ACCOUNT` - The fee taken when an account is created.
     * * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
     * * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
     * * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
     * * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
     * * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
     * * `CARD_ECOMMERCE_DEBIT` - Card used on the internet
     * * `CARD_ECOMMERCE_CREDIT` - Card used on the internet
     * * `CARD_ATM_DEBIT` - Card used in an ATM
     * * `CARD_ATM_CREDIT` - Card used in an ATM
     * * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
     * * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
     * * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
     * * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
     * * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
     * * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
     * * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
     * * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
     * * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
     * * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
     * * `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
     * * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
     * * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
     * * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
     * * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
     * * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
     * * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
     * * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yourRef")
    public String yourRef;
    public GetTransactionsByIdv1CardTransactionsv1Transaction withYourRef(String yourRef) {
        this.yourRef = yourRef;
        return this;
    }
    
}
