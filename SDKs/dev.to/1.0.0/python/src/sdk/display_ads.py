"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class DisplayAds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_api_display_ads(self) -> operations.GetAPIDisplayAdsResponse:
        r"""display ads
        This endpoint allows the client to retrieve a list of all display ads.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/display_ads'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIDisplayAdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_display_ads_id_(self, request: operations.GetAPIDisplayAdsIDRequest) -> operations.GetAPIDisplayAdsIDResponse:
        r"""display ad
        This endpoint allows the client to retrieve a single display ad, via its id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIDisplayAdsIDRequest, base_url, '/api/display_ads/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIDisplayAdsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_display_ads(self, request: operations.PostAPIDisplayAdsRequestBody) -> operations.PostAPIDisplayAdsResponse:
        r"""display ads
        This endpoint allows the client to create a new display ad.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/display_ads'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIDisplayAdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_api_display_ads_id_(self, request: operations.PutAPIDisplayAdsIDRequest) -> operations.PutAPIDisplayAdsIDResponse:
        r"""display ads
        This endpoint allows the client to update the attributes of a single display ad, via its id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIDisplayAdsIDRequest, base_url, '/api/display_ads/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIDisplayAdsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_api_display_ads_id_unpublish(self, request: operations.PutAPIDisplayAdsIDUnpublishRequest) -> operations.PutAPIDisplayAdsIDUnpublishResponse:
        r"""unpublish
        This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIDisplayAdsIDUnpublishRequest, base_url, '/api/display_ads/{id}/unpublish', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIDisplayAdsIDUnpublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    