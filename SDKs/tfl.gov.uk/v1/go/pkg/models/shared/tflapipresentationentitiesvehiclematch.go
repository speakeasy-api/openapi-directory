// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TflAPIPresentationEntitiesVehicleMatchComplianceEnum string

const (
	TflAPIPresentationEntitiesVehicleMatchComplianceEnumNotAvailable TflAPIPresentationEntitiesVehicleMatchComplianceEnum = "NotAvailable"
	TflAPIPresentationEntitiesVehicleMatchComplianceEnumNotCompliant TflAPIPresentationEntitiesVehicleMatchComplianceEnum = "NotCompliant"
	TflAPIPresentationEntitiesVehicleMatchComplianceEnumCompliant    TflAPIPresentationEntitiesVehicleMatchComplianceEnum = "Compliant"
	TflAPIPresentationEntitiesVehicleMatchComplianceEnumExempt       TflAPIPresentationEntitiesVehicleMatchComplianceEnum = "Exempt"
)

func (e *TflAPIPresentationEntitiesVehicleMatchComplianceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotAvailable":
		fallthrough
	case "NotCompliant":
		fallthrough
	case "Compliant":
		fallthrough
	case "Exempt":
		*e = TflAPIPresentationEntitiesVehicleMatchComplianceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TflAPIPresentationEntitiesVehicleMatchComplianceEnum: %s", s)
	}
}

// TflAPIPresentationEntitiesVehicleMatch - OK
type TflAPIPresentationEntitiesVehicleMatch struct {
	Colour     *string                                               `json:"colour,omitempty"`
	Compliance *TflAPIPresentationEntitiesVehicleMatchComplianceEnum `json:"compliance,omitempty"`
	Make       *string                                               `json:"make,omitempty"`
	Model      *string                                               `json:"model,omitempty"`
	Type       *string                                               `json:"type,omitempty"`
	Vrm        *string                                               `json:"vrm,omitempty"`
}
