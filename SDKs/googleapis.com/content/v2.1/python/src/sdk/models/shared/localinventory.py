"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customattribute as shared_customattribute
from ..shared import price as shared_price
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LocalInventory:
    r"""Local inventory resource. For accepted attribute values, see the local product inventory feed specification."""
    
    availability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Availability of the product. For accepted attribute values, see the local product inventory feed specification."""  
    custom_attributes: Optional[list[shared_customattribute.CustomAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customAttributes'), 'exclude': lambda f: f is None }})
    r"""A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, `{ \\"name\\": \\"size type\\", \\"value\\": \\"regular\\" }`."""  
    instore_product_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instoreProductLocation'), 'exclude': lambda f: f is None }})
    r"""In-store product location."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"`content#localInventory`\\" """  
    pickup_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupMethod'), 'exclude': lambda f: f is None }})
    r"""Supported pickup method for this offer. Unless the value is \\"not supported\\", this field must be submitted together with `pickupSla`. For accepted attribute values, see the local product inventory feed specification."""  
    pickup_sla: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupSla'), 'exclude': lambda f: f is None }})
    r"""Expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the local product inventory feed specification."""  
    price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity of the product. Must be nonnegative."""  
    sale_price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salePrice'), 'exclude': lambda f: f is None }})  
    sale_price_effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salePriceEffectiveDate'), 'exclude': lambda f: f is None }})
    r"""A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as 'null' if undecided."""  
    store_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeCode'), 'exclude': lambda f: f is None }})
    r"""Required. Store code of this local inventory resource."""  
    