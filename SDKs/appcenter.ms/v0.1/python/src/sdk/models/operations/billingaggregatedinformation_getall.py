"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class BillingAggregatedInformationGetAllSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class BillingAggregatedInformationGetAllPeriodEnum(str, Enum):
    r"""Type of period that should be included in the Billing Information"""
    PREVIOUS = 'Previous'
    CURRENT = 'Current'
    NEXT = 'Next'

class BillingAggregatedInformationGetAllServiceEnum(str, Enum):
    r"""Type of service that should be included in the Billing Information"""
    TEST = 'Test'
    BUILD = 'Build'


@dataclasses.dataclass
class BillingAggregatedInformationGetAllRequest:
    
    period: Optional[BillingAggregatedInformationGetAllPeriodEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'period', 'style': 'form', 'explode': True }})
    r"""Type of period that should be included in the Billing Information"""  
    service: Optional[BillingAggregatedInformationGetAllServiceEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'service', 'style': 'form', 'explode': True }})
    r"""Type of service that should be included in the Billing Information"""  
    show_original_plans: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showOriginalPlans', 'style': 'form', 'explode': True }})
    r"""Controls whether the API should show the original plan when Azure Subscription is not enabled"""  
    
class BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum(str, Enum):
    r"""The status code return by the API. It can be 400 or 403 or 500."""
    FOUR_HUNDRED = '400'
    FOUR_HUNDRED_AND_THREE = '403'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAllDefaultApplicationJSONError:
    
    code: Optional[BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The status code return by the API. It can be 400 or 403 or 500."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The reason for the request failed"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAllDefaultApplicationJSON:
    r"""Error"""
    
    error: Optional[BillingAggregatedInformationGetAllDefaultApplicationJSONError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum(str, Enum):
    r"""State of the Azure subscription used for billing"""
    ENABLED = 'Enabled'
    DISABLED = 'Disabled'
    NOT_SET = 'NotSet'

class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum(str, Enum):
    r"""Service that receives payments for this billing plan."""
    NONE = 'None'
    APP_CENTER = 'AppCenter'
    GIT_HUB = 'GitHub'
    XTC = 'Xtc'

class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum(str, Enum):
    r"""Name of the service that the plan applies to."""
    BUILD = 'Build'
    TEST = 'Test'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan:
    r"""Billing Plan"""
    
    attributes: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Collection of attribute values."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Billing Plan ID"""  
    limits: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limits'), 'exclude': lambda f: f is None }})
    r"""A collection of named numeric values"""  
    parent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentId'), 'exclude': lambda f: f is None }})  
    payment_source: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSource'), 'exclude': lambda f: f is None }})
    r"""Service that receives payments for this billing plan."""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price of the Billing Plan"""  
    service: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""Name of the service that the plan applies to."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the Billing Plan schema"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount:
    r"""Selection of a billing plan"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Number of instances of the billing plan."""  
    plan: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan'), 'exclude': lambda f: f is None }})
    r"""Billing Plan"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod:
    r"""Billing plans for a given period"""
    
    by_account: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byAccount'), 'exclude': lambda f: f is None }})
    r"""Selection of a billing plan"""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Exclusive end of the period."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Inclusive start of the period"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService:
    r"""Billing Plans for a single service"""
    
    can_select_trial_plan: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canSelectTrialPlan'), 'exclude': lambda f: f is None }})
    r"""Can customer select trial plan for that service (if it exists)?"""  
    current_billing_period: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentBillingPeriod'), 'exclude': lambda f: f is None }})
    r"""Billing plans for a given period"""  
    last_trial_plan_expiration_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastTrialPlanExpirationTime'), 'exclude': lambda f: f is None }})
    r"""Expiration time of the last selected trial plan. Will be null if trial plan was not used."""  
    
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum(str, Enum):
    r"""Service that receives payments for this billing plan."""
    NONE = 'None'
    APP_CENTER = 'AppCenter'
    GIT_HUB = 'GitHub'
    XTC = 'Xtc'

class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum(str, Enum):
    r"""Name of the service that the plan applies to."""
    BUILD = 'Build'
    TEST = 'Test'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan:
    r"""Billing Plan"""
    
    attributes: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Collection of attribute values."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Billing Plan ID"""  
    limits: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limits'), 'exclude': lambda f: f is None }})
    r"""A collection of named numeric values"""  
    parent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentId'), 'exclude': lambda f: f is None }})  
    payment_source: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSource'), 'exclude': lambda f: f is None }})
    r"""Service that receives payments for this billing plan."""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price of the Billing Plan"""  
    service: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""Name of the service that the plan applies to."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the Billing Plan schema"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount:
    r"""Selection of a billing plan"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Number of instances of the billing plan."""  
    plan: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan'), 'exclude': lambda f: f is None }})
    r"""Billing Plan"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod:
    r"""Billing plans for a given period"""
    
    by_account: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byAccount'), 'exclude': lambda f: f is None }})
    r"""Selection of a billing plan"""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Exclusive end of the period."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Inclusive start of the period"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService:
    r"""Billing Plans for a single service"""
    
    can_select_trial_plan: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canSelectTrialPlan'), 'exclude': lambda f: f is None }})
    r"""Can customer select trial plan for that service (if it exists)?"""  
    current_billing_period: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentBillingPeriod'), 'exclude': lambda f: f is None }})
    r"""Billing plans for a given period"""  
    last_trial_plan_expiration_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastTrialPlanExpirationTime'), 'exclude': lambda f: f is None }})
    r"""Expiration time of the last selected trial plan. Will be null if trial plan was not used."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans:
    r"""Billing Plans section in the Billing Information"""
    
    build_service: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildService'), 'exclude': lambda f: f is None }})
    r"""Billing Plans for a single service"""  
    test_service: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testService'), 'exclude': lambda f: f is None }})
    r"""Billing Plans for a single service"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod:
    r"""Usage for a single period"""
    
    by_account: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byAccount'), 'exclude': lambda f: f is None }})
    r"""A collection of named numeric values"""  
    by_app: Optional[dict[str, dict[str, float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byApp'), 'exclude': lambda f: f is None }})
    r"""A collection of  named numeric values grouped by app"""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Exclusive end time of the usage period."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Inclusive start time of the usage period"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService:
    r"""Resource usage for a single Mobile Center service"""
    
    current_usage_period: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentUsagePeriod'), 'exclude': lambda f: f is None }})
    r"""Usage for a single period"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod:
    r"""Usage for a single period"""
    
    by_account: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byAccount'), 'exclude': lambda f: f is None }})
    r"""A collection of named numeric values"""  
    by_app: Optional[dict[str, dict[str, float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byApp'), 'exclude': lambda f: f is None }})
    r"""A collection of  named numeric values grouped by app"""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Exclusive end time of the usage period."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Inclusive start time of the usage period"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService:
    r"""Resource usage for a single Mobile Center service"""
    
    current_usage_period: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentUsagePeriod'), 'exclude': lambda f: f is None }})
    r"""Usage for a single period"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage:
    r"""Usage section in the Billing Information"""
    
    build_service: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildService'), 'exclude': lambda f: f is None }})
    r"""Resource usage for a single Mobile Center service"""  
    test_service: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testService'), 'exclude': lambda f: f is None }})
    r"""Resource usage for a single Mobile Center service"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings:
    r"""Aggregated Billing Information for a user or an organization"""
    
    azure_subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('azureSubscriptionId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the Azure subscription used for billing"""  
    azure_subscription_state: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('azureSubscriptionState'), 'exclude': lambda f: f is None }})
    r"""State of the Azure subscription used for billing"""  
    billing_plans: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingPlans'), 'exclude': lambda f: f is None }})
    r"""Billing Plans section in the Billing Information"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the user or organization"""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The ISO 8601 datetime of last modification"""  
    usage: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Usage section in the Billing Information"""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the Billing Information schema"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingAggregatedInformationGetAll200ApplicationJSON:
    r"""Aggregated Billing Information for a user an the organizations in which the user is an admin."""
    
    aggregated_billings: Optional[BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregatedBillings'), 'exclude': lambda f: f is None }})
    r"""Aggregated Billing Information for a user or an organization"""  
    

@dataclasses.dataclass
class BillingAggregatedInformationGetAllResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    billing_aggregated_information_get_all_200_application_json_object: Optional[BillingAggregatedInformationGetAll200ApplicationJSON] = dataclasses.field(default=None)
    r"""Aggregated Billing Information for the requesting user and the organizations in which the user is an admin."""  
    billing_aggregated_information_get_all_default_application_json_object: Optional[BillingAggregatedInformationGetAllDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    