"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import graph as shared_graph
from enum import Enum
from typing import Optional

class GetEdgeResourceDirectionEnum(str, Enum):
    r"""Which direction to traverse (used only if relationship_type is defined)"""
    INCOMING = 'INCOMING'
    OUTGOING = 'OUTGOING'
    BOTH = 'BOTH'

class GetEdgeResourceGraphEnum(str, Enum):
    r"""Which monarch graph to query"""
    DATA = 'data'
    ONTOLOGY = 'ontology'


@dataclasses.dataclass
class GetEdgeResourceRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""CURIE e.g. HP:0000465"""  
    depth: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'depth', 'style': 'form', 'explode': True }})
    r"""How far to traverse for neighbors"""  
    direction: Optional[GetEdgeResourceDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Which direction to traverse (used only if relationship_type is defined)"""  
    entail: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entail', 'style': 'form', 'explode': True }})
    r"""Include sub-properties and equivalent properties"""  
    graph: Optional[GetEdgeResourceGraphEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'graph', 'style': 'form', 'explode': True }})
    r"""Which monarch graph to query"""  
    relationship_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relationship_type', 'style': 'form', 'explode': True }})
    r"""Relationship type to traverse"""  
    

@dataclasses.dataclass
class GetEdgeResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    graphs: Optional[list[shared_graph.Graph]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    