/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RRSetRoutingPolicyGeoPolicy - Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
 */
public class RRSetRoutingPolicyGeoPolicy {
    /**
     * Without fencing, if health check fails for all configured items in the current geo bucket, we'll failover to the next nearest geo bucket. With fencing, if health check is enabled, as long as some targets in the current geo bucket are healthy, we'll return only the healthy targets. However, if they're all unhealthy, we won't failover to the next nearest bucket, we'll simply return all the items in the current bucket even though they're unhealthy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableFencing")
    public Boolean enableFencing;

    public RRSetRoutingPolicyGeoPolicy withEnableFencing(Boolean enableFencing) {
        this.enableFencing = enableFencing;
        return this;
    }
    
    /**
     * The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public RRSetRoutingPolicyGeoPolicyGeoPolicyItem[] items;

    public RRSetRoutingPolicyGeoPolicy withItems(RRSetRoutingPolicyGeoPolicyGeoPolicyItem[] items) {
        this.items = items;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public RRSetRoutingPolicyGeoPolicy withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    public RRSetRoutingPolicyGeoPolicy(){}
}
