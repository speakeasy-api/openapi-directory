/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Additional configuration for protocol http
 */
export class PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHttp extends SpeakeasyBase {
  /**
   * Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain" })
  domain: string;

  /**
   * HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  /**
   * String that must be contained in HTTP response in order to pass the health check
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  response?: string;

  /**
   * List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status_codes" })
  statusCodes?: string[];

  /**
   * Use HTTPS for health check
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tls" })
  tls?: boolean;
}

/**
 * Type of the health check
 */
export enum PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum {
  Tcp = "tcp",
  Http = "http",
}

/**
 * Service health check
 */
export class PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheck extends SpeakeasyBase {
  /**
   * Additional configuration for protocol http
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http" })
  @Type(
    () =>
      PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHttp
  )
  http?: PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHttp;

  /**
   * Time interval in seconds health checks are performed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  interval: number;

  /**
   * Port the health check will be performed on
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port: number;

  /**
   * Type of the health check
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum;

  /**
   * Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retries" })
  retries: number;

  /**
   * Time in seconds after an attempt is considered a timeout
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeout" })
  timeout: number;
}

/**
 * Configuration option for protocols http and https
 */
export class PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHTTP extends SpeakeasyBase {
  /**
   * IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificates" })
  certificates?: number[];

  /**
   * Lifetime of the cookie used for sticky sessions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cookie_lifetime" })
  cookieLifetime?: number;

  /**
   * Name of the cookie used for sticky sessions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cookie_name" })
  cookieName?: string;

  /**
   * Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirect_http" })
  redirectHttp?: boolean;

  /**
   * Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sticky_sessions" })
  stickySessions?: boolean;
}

/**
 * Protocol of the Load Balancer
 */
export enum PostLoadBalancersIdActionsAddServiceLoadBalancerServiceProtocolEnum {
  Tcp = "tcp",
  Http = "http",
  Https = "https",
}

export class PostLoadBalancersIdActionsAddServiceLoadBalancerService extends SpeakeasyBase {
  /**
   * Port the Load Balancer will balance to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_port" })
  destinationPort: number;

  /**
   * Service health check
   */
  @SpeakeasyMetadata()
  @Expose({ name: "health_check" })
  @Type(
    () =>
      PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheck
  )
  healthCheck: PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheck;

  /**
   * Configuration option for protocols http and https
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http" })
  @Type(
    () =>
      PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHTTP
  )
  http?: PostLoadBalancersIdActionsAddServiceLoadBalancerServiceLoadBalancerServiceHTTP;

  /**
   * Port the Load Balancer listens on
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listen_port" })
  listenPort: number;

  /**
   * Protocol of the Load Balancer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: PostLoadBalancersIdActionsAddServiceLoadBalancerServiceProtocolEnum;

  /**
   * Is Proxyprotocol enabled or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "proxyprotocol" })
  proxyprotocol: boolean;
}

export class PostLoadBalancersIdActionsAddServiceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PostLoadBalancersIdActionsAddServiceLoadBalancerService;

  /**
   * ID of the Load Balancer
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostLoadBalancersIdActionsAddServiceActionResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostLoadBalancersIdActionsAddServiceActionResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostLoadBalancersIdActionsAddServiceActionResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostLoadBalancersIdActionsAddServiceActionResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostLoadBalancersIdActionsAddServiceActionResponseActionError)
  error: PostLoadBalancersIdActionsAddServiceActionResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostLoadBalancersIdActionsAddServiceActionResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostLoadBalancersIdActionsAddServiceActionResponseActionResources)
  resources: PostLoadBalancersIdActionsAddServiceActionResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostLoadBalancersIdActionsAddServiceActionResponseActionStatusEnum;
}

/**
 * The `action` key contains the `add_service` Action
 */
export class PostLoadBalancersIdActionsAddServiceActionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostLoadBalancersIdActionsAddServiceActionResponseAction)
  action: PostLoadBalancersIdActionsAddServiceActionResponseAction;
}

export class PostLoadBalancersIdActionsAddServiceResponse extends SpeakeasyBase {
  /**
   * The `action` key contains the `add_service` Action
   */
  @SpeakeasyMetadata()
  actionResponse?: PostLoadBalancersIdActionsAddServiceActionResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
