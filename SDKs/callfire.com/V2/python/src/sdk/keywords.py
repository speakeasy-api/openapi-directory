"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Keywords:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def find_keyword_lease_configs(self, request: operations.FindKeywordLeaseConfigsRequest, security: operations.FindKeywordLeaseConfigsSecurity) -> operations.FindKeywordLeaseConfigsResponse:
        r"""Find keyword lease configs
        Searches for all keyword lease configs for the user. Returns a paged list of KeywordConfig
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keywords/leases/configs'
        
        query_params = utils.get_query_params(operations.FindKeywordLeaseConfigsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindKeywordLeaseConfigsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_keyword_leases(self, request: operations.FindKeywordLeasesRequest, security: operations.FindKeywordLeasesSecurity) -> operations.FindKeywordLeasesResponse:
        r"""Find keyword leases
        Searches for all keywords owned by user. A keyword lease is the ownership information involving a keyword
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keywords/leases'
        
        query_params = utils.get_query_params(operations.FindKeywordLeasesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindKeywordLeasesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeywordLeasePage])
                res.keyword_lease_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_keywords(self, request: operations.FindKeywordsRequest, security: operations.FindKeywordsSecurity) -> operations.FindKeywordsResponse:
        r"""Find keywords
        Searches for all keywords available for purchase on the CallFire platform. If a keyword appears in the response, it is available for purchase. List the 'keywords' in a query parameter to search for multiple keywords (at least one keyword should be sent in request). Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keywords'
        
        query_params = utils.get_query_params(operations.FindKeywordsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindKeywordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeywordList])
                res.keyword_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_keyword_lease(self, request: operations.GetKeywordLeaseRequest, security: operations.GetKeywordLeaseSecurity) -> operations.GetKeywordLeaseResponse:
        r"""Find a specific lease
        Searches for all keywords owned by user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetKeywordLeaseRequest, base_url, '/keywords/leases/{keyword}', request)
        
        query_params = utils.get_query_params(operations.GetKeywordLeaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeywordLeaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeywordLease])
                res.keyword_lease = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_keyword_lease_by_id(self, request: operations.GetKeywordLeaseByIDRequest, security: operations.GetKeywordLeaseByIDSecurity) -> operations.GetKeywordLeaseByIDResponse:
        r"""Find a keyword by id
        Get keyword by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetKeywordLeaseByIDRequest, base_url, '/keywords/leases/id/{id}', request)
        
        query_params = utils.get_query_params(operations.GetKeywordLeaseByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeywordLeaseByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeywordLease])
                res.keyword_lease = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_keyword_lease_config(self, request: operations.GetKeywordLeaseConfigRequest, security: operations.GetKeywordLeaseConfigSecurity) -> operations.GetKeywordLeaseConfigResponse:
        r"""Find a specific keyword lease config
        Returns a single KeywordConfig instance for a given keyword lease
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetKeywordLeaseConfigRequest, base_url, '/keywords/leases/configs/{keyword}', request)
        
        query_params = utils.get_query_params(operations.GetKeywordLeaseConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeywordLeaseConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeywordConfig])
                res.keyword_config = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def is_keyword_available(self, request: operations.IsKeywordAvailableRequest, security: operations.IsKeywordAvailableSecurity) -> operations.IsKeywordAvailableResponse:
        r"""Check for a specific keyword
        Searches for the specific keyword to purchase on the CallFire platform. Returns 'true' if keyword is available. Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.IsKeywordAvailableRequest, base_url, '/keywords/{keyword}/available', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IsKeywordAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.is_keyword_available_200_application_json_boolean = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_keyword_lease(self, request: operations.UpdateKeywordLeaseRequest, security: operations.UpdateKeywordLeaseSecurity) -> operations.UpdateKeywordLeaseResponse:
        r"""Update a lease
        Updates a keyword lease. Turns the autoRenew on/off. Configure double opt in feature. Add/remove contact list from keyword.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateKeywordLeaseRequest, base_url, '/keywords/leases/{keyword}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "keyword_lease", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateKeywordLeaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_keyword_lease_config(self, request: operations.UpdateKeywordLeaseConfigRequest, security: operations.UpdateKeywordLeaseConfigSecurity) -> operations.UpdateKeywordLeaseConfigResponse:
        r"""Update a keyword lease config
        Updates a keyword lease configuration. Use this API endpoint to enable/disable inbound SMS forwarding, set forward number. Forward number must be in E.164 format)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateKeywordLeaseConfigRequest, base_url, '/keywords/leases/configs/{keyword}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "keyword_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateKeywordLeaseConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    