// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateScenePathParams struct {
	// The ID of the workspace that contains the scene.
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspaceId"`
}

type CreateSceneHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateSceneRequestBody struct {
	// A list of capabilities that the scene uses to render itself.
	Capabilities []string `json:"capabilities,omitempty"`
	// The relative path that specifies the location of the content definition file.
	ContentLocation string `json:"contentLocation"`
	// The description for this scene.
	Description *string `json:"description,omitempty"`
	// The ID of the scene.
	SceneID string `json:"sceneId"`
	// The request metadata.
	SceneMetadata map[string]string `json:"sceneMetadata,omitempty"`
	// Metadata that you can use to manage the scene.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateSceneRequest struct {
	PathParams CreateScenePathParams
	Headers    CreateSceneHeaders
	Request    CreateSceneRequestBody `request:"mediaType=application/json"`
}

type CreateSceneResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateSceneResponse *shared.CreateSceneResponse
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
