"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listaccesspoliciesresponse as shared_listaccesspoliciesresponse
from enum import Enum
from typing import Any, Optional

class ListAccessPoliciesIdentityTypeEnum(str, Enum):
    r"""The type of identity (IAM Identity Center user, IAM Identity Center group, or IAM user). This parameter is required if you specify <code>identityId</code>."""
    USER = 'USER'
    GROUP = 'GROUP'
    IAM = 'IAM'

class ListAccessPoliciesResourceTypeEnum(str, Enum):
    r"""The type of resource (portal or project). This parameter is required if you specify <code>resourceId</code>."""
    PORTAL = 'PORTAL'
    PROJECT = 'PROJECT'


@dataclasses.dataclass
class ListAccessPoliciesRequest:
    
    iam_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'iamArn', 'style': 'form', 'explode': True }})
    r"""The ARN of the IAM user. For more information, see <a href=\\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\\">IAM ARNs</a> in the <i>IAM User Guide</i>. This parameter is required if you specify <code>IAM</code> for <code>identityType</code>."""  
    identity_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'identityId', 'style': 'form', 'explode': True }})
    r"""The ID of the identity. This parameter is required if you specify <code>USER</code> or <code>GROUP</code> for <code>identityType</code>."""  
    identity_type: Optional[ListAccessPoliciesIdentityTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'identityType', 'style': 'form', 'explode': True }})
    r"""The type of identity (IAM Identity Center user, IAM Identity Center group, or IAM user). This parameter is required if you specify <code>identityId</code>."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""<p>The maximum number of results to return for each paginated request.</p> <p>Default: 50</p>"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The token to be used for the next set of paginated results."""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceId', 'style': 'form', 'explode': True }})
    r"""The ID of the resource. This parameter is required if you specify <code>resourceType</code>."""  
    resource_type: Optional[ListAccessPoliciesResourceTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceType', 'style': 'form', 'explode': True }})
    r"""The type of resource (portal or project). This parameter is required if you specify <code>resourceId</code>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListAccessPoliciesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    list_access_policies_response: Optional[shared_listaccesspoliciesresponse.ListAccessPoliciesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    