/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MatrixRequest {
    /**
     * Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fail_fast")
    public Boolean failFast;
    public MatrixRequest withFailFast(Boolean failFast) {
        this.failFast = failFast;
        return this;
    }
    
    /**
     * See `curbsides`of symmetrical matrix
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_curbsides")
    public String[] fromCurbsides;
    public MatrixRequest withFromCurbsides(String[] fromCurbsides) {
        this.fromCurbsides = fromCurbsides;
        return this;
    }
    
    /**
     * See `point_hints`of symmetrical matrix
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_point_hints")
    public String[] fromPointHints;
    public MatrixRequest withFromPointHints(String[] fromPointHints) {
        this.fromPointHints = fromPointHints;
        return this;
    }
    
    /**
     * The starting points for the routes in an array of `[longitude,latitude]`. For instance, if you want to calculate three routes from point A such as A-&gt;1, A-&gt;2, A-&gt;3 then you have one `from_point` parameter and three `to_point` parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_points")
    public Double[][] fromPoints;
    public MatrixRequest withFromPoints(Double[][] fromPoints) {
        this.fromPoints = fromPoints;
        return this;
    }
    
    /**
     * Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("out_arrays")
    public String[] outArrays;
    public MatrixRequest withOutArrays(String[] outArrays) {
        this.outArrays = outArrays;
        return this;
    }
    
    /**
     * See `snap_preventions` of symmetrical matrix
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snap_preventions")
    public String[] snapPreventions;
    public MatrixRequest withSnapPreventions(String[] snapPreventions) {
        this.snapPreventions = snapPreventions;
        return this;
    }
    
    /**
     * See `curbsides`of symmetrical matrix
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to_curbsides")
    public String[] toCurbsides;
    public MatrixRequest withToCurbsides(String[] toCurbsides) {
        this.toCurbsides = toCurbsides;
        return this;
    }
    
    /**
     * See `point_hints`of symmetrical matrix
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to_point_hints")
    public String[] toPointHints;
    public MatrixRequest withToPointHints(String[] toPointHints) {
        this.toPointHints = toPointHints;
        return this;
    }
    
    /**
     * The destination points for the routes in an array of `[longitude,latitude]`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to_points")
    public Double[][] toPoints;
    public MatrixRequest withToPoints(Double[][] toPoints) {
        this.toPoints = toPoints;
        return this;
    }
    
    /**
     * Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("turn_costs")
    public Boolean turnCosts;
    public MatrixRequest withTurnCosts(Boolean turnCosts) {
        this.turnCosts = turnCosts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicle")
    public VehicleProfileIdEnum vehicle;
    public MatrixRequest withVehicle(VehicleProfileIdEnum vehicle) {
        this.vehicle = vehicle;
        return this;
    }
    
}
