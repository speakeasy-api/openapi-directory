// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type WebhooksShortExecuteSecurity struct {
	APIKey string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
}

type WebhooksShortExecuteRequestBodyType string

const (
	WebhooksShortExecuteRequestBodyTypeMapOfany        WebhooksShortExecuteRequestBodyType = "mapOfany"
	WebhooksShortExecuteRequestBodyTypeArrayOfmapOfany WebhooksShortExecuteRequestBodyType = "arrayOfmapOfany"
)

type WebhooksShortExecuteRequestBody struct {
	MapOfany        map[string]interface{}
	ArrayOfmapOfany []map[string]interface{}

	Type WebhooksShortExecuteRequestBodyType
}

func CreateWebhooksShortExecuteRequestBodyMapOfany(mapOfany map[string]interface{}) WebhooksShortExecuteRequestBody {
	typ := WebhooksShortExecuteRequestBodyTypeMapOfany

	return WebhooksShortExecuteRequestBody{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func CreateWebhooksShortExecuteRequestBodyArrayOfmapOfany(arrayOfmapOfany []map[string]interface{}) WebhooksShortExecuteRequestBody {
	typ := WebhooksShortExecuteRequestBodyTypeArrayOfmapOfany

	return WebhooksShortExecuteRequestBody{
		ArrayOfmapOfany: arrayOfmapOfany,
		Type:            typ,
	}
}

func (u *WebhooksShortExecuteRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	mapOfany := map[string]interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mapOfany); err == nil {
		u.MapOfany = mapOfany
		u.Type = WebhooksShortExecuteRequestBodyTypeMapOfany
		return nil
	}

	arrayOfmapOfany := []map[string]interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfmapOfany); err == nil {
		u.ArrayOfmapOfany = arrayOfmapOfany
		u.Type = WebhooksShortExecuteRequestBodyTypeArrayOfmapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WebhooksShortExecuteRequestBody) MarshalJSON() ([]byte, error) {
	if u.MapOfany != nil {
		return json.Marshal(u.MapOfany)
	}

	if u.ArrayOfmapOfany != nil {
		return json.Marshal(u.ArrayOfmapOfany)
	}

	return nil, nil
}

type WebhooksShortExecuteRequest struct {
	RequestBody WebhooksShortExecuteRequestBody `request:"mediaType=application/json"`
	// The name of downstream event when connector does not supply in body or header
	E *string `queryParam:"style=form,explode=true,name=e"`
	// JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Unique identifier to used to look up consumer/connection when receiving connector events from downstream.
	LID *string `queryParam:"style=form,explode=true,name=l_id"`
	// Service provider ID.
	ServiceID string `pathParam:"style=simple,explode=false,name=serviceId"`
}

type WebhooksShortExecuteResponse struct {
	// Bad Request
	BadRequestResponse *shared.BadRequestResponse
	ContentType        string
	// Execute Webhook
	ExecuteWebhookResponse *shared.ExecuteWebhookResponse
	// The specified resource was not found
	NotFoundResponse *shared.NotFoundResponse
	// Payment Required
	PaymentRequiredResponse *shared.PaymentRequiredResponse
	StatusCode              int
	RawResponse             *http.Response
	// Unauthorized
	UnauthorizedResponse *shared.UnauthorizedResponse
	// Unexpected error
	UnexpectedErrorResponse *shared.UnexpectedErrorResponse
	// Unprocessable
	UnprocessableResponse *shared.UnprocessableResponse
}
