// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReceiverJurisdictionalFiltersMatchFieldsEnum - What fields to match in the filter
type ReceiverJurisdictionalFiltersMatchFieldsEnum string

const (
	ReceiverJurisdictionalFiltersMatchFieldsEnumFacilityOrPatientAddress ReceiverJurisdictionalFiltersMatchFieldsEnum = "FACILITY_OR_PATIENT_ADDRESS"
	ReceiverJurisdictionalFiltersMatchFieldsEnumFacilityAddress          ReceiverJurisdictionalFiltersMatchFieldsEnum = "FACILITY_ADDRESS"
	ReceiverJurisdictionalFiltersMatchFieldsEnumFacilityName             ReceiverJurisdictionalFiltersMatchFieldsEnum = "FACILITY_NAME"
	ReceiverJurisdictionalFiltersMatchFieldsEnumAbnormalValue            ReceiverJurisdictionalFiltersMatchFieldsEnum = "ABNORMAL_VALUE"
)

func (e *ReceiverJurisdictionalFiltersMatchFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FACILITY_OR_PATIENT_ADDRESS":
		fallthrough
	case "FACILITY_ADDRESS":
		fallthrough
	case "FACILITY_NAME":
		fallthrough
	case "ABNORMAL_VALUE":
		*e = ReceiverJurisdictionalFiltersMatchFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceiverJurisdictionalFiltersMatchFieldsEnum: %s", s)
	}
}

// ReceiverJurisdictionalFilters - A single filter
type ReceiverJurisdictionalFilters struct {
	// Ensure that the result does not match
	DoesNotMatch *bool `json:"doesNotMatch,omitempty"`
	// What fields to match in the filter
	MatchFields *ReceiverJurisdictionalFiltersMatchFieldsEnum `json:"matchFields,omitempty"`
	// What is the value to match against
	MatchValues []string `json:"matchValues,omitempty"`
}

// ReceiverTimingFrequencyEnum - How often send a report
type ReceiverTimingFrequencyEnum string

const (
	ReceiverTimingFrequencyEnumRealTime ReceiverTimingFrequencyEnum = "REAL_TIME"
	ReceiverTimingFrequencyEnumHourly   ReceiverTimingFrequencyEnum = "HOURLY"
	ReceiverTimingFrequencyEnumDaily    ReceiverTimingFrequencyEnum = "DAILY"
)

func (e *ReceiverTimingFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REAL_TIME":
		fallthrough
	case "HOURLY":
		fallthrough
	case "DAILY":
		*e = ReceiverTimingFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceiverTimingFrequencyEnum: %s", s)
	}
}

// ReceiverTiming - When the report is sent if not immediately
type ReceiverTiming struct {
	// The UTC hour to send a daily batch
	DailyAt *float64 `json:"dailyAt,omitempty"`
	// How often send a report
	Frequency ReceiverTimingFrequencyEnum `json:"frequency"`
}

// ReceiverInput - A receiver of reports from the data hub
type ReceiverInput struct {
	// Display ready description of the receiver
	Description string `json:"description"`
	// What items to include in the report.
	JurisdictionalFilters []ReceiverJurisdictionalFilters `json:"jurisdictionalFilters,omitempty"`
	// The unique name for the receiver. Should include the organization name as a prefix.
	Name string `json:"name"`
	// When the report is sent if not immediately
	Timing ReceiverTiming `json:"timing"`
	// The topic of for this receiver. Must match the supported topics.
	Topic string `json:"topic"`
	// How the report is translated from the sender. A report can be sent in multiple ways.
	Translations []interface{} `json:"translations,omitempty"`
}

// Receiver - A receiver of reports from the data hub
type Receiver struct {
	// Display ready description of the receiver
	Description string `json:"description"`
	// What items to include in the report.
	JurisdictionalFilters []ReceiverJurisdictionalFilters `json:"jurisdictionalFilters,omitempty"`
	// The metadata associated with an setting
	Meta *SettingMetadata `json:"meta,omitempty"`
	// The unique name for the receiver. Should include the organization name as a prefix.
	Name string `json:"name"`
	// The name of the organization that this receiver belongs to
	OrganizationName *string `json:"organizationName,omitempty"`
	// When the report is sent if not immediately
	Timing ReceiverTiming `json:"timing"`
	// The topic of for this receiver. Must match the supported topics.
	Topic string `json:"topic"`
	// How the report is translated from the sender. A report can be sent in multiple ways.
	Translations []interface{} `json:"translations,omitempty"`
}
