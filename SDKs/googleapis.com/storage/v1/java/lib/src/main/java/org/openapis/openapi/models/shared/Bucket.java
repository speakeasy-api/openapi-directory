/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Bucket - A bucket.
 */
public class Bucket {
    /**
     * Access controls on the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acl")
    public BucketAccessControl[] acl;
    public Bucket withAcl(BucketAccessControl[] acl) {
        this.acl = acl;
        return this;
    }
    
    /**
     * The bucket's Autoclass configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoclass")
    public BucketAutoclass autoclass;
    public Bucket withAutoclass(BucketAutoclass autoclass) {
        this.autoclass = autoclass;
        return this;
    }
    
    /**
     * The bucket's billing configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    public BucketBilling billing;
    public Bucket withBilling(BucketBilling billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cors")
    public BucketCors[] cors;
    public Bucket withCors(BucketCors[] cors) {
        this.cors = cors;
        return this;
    }
    
    /**
     * The bucket's custom placement configuration for Custom Dual Regions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customPlacementConfig")
    public BucketCustomPlacementConfig customPlacementConfig;
    public Bucket withCustomPlacementConfig(BucketCustomPlacementConfig customPlacementConfig) {
        this.customPlacementConfig = customPlacementConfig;
        return this;
    }
    
    /**
     * The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultEventBasedHold")
    public Boolean defaultEventBasedHold;
    public Bucket withDefaultEventBasedHold(Boolean defaultEventBasedHold) {
        this.defaultEventBasedHold = defaultEventBasedHold;
        return this;
    }
    
    /**
     * Default access controls to apply to new objects when no ACL is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultObjectAcl")
    public ObjectAccessControl[] defaultObjectAcl;
    public Bucket withDefaultObjectAcl(ObjectAccessControl[] defaultObjectAcl) {
        this.defaultObjectAcl = defaultObjectAcl;
        return this;
    }
    
    /**
     * Encryption configuration for a bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption")
    public BucketEncryption encryption;
    public Bucket withEncryption(BucketEncryption encryption) {
        this.encryption = encryption;
        return this;
    }
    
    /**
     * HTTP 1.1 Entity tag for the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Bucket withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The bucket's IAM configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iamConfiguration")
    public BucketIamConfiguration iamConfiguration;
    public Bucket withIamConfiguration(BucketIamConfiguration iamConfiguration) {
        this.iamConfiguration = iamConfiguration;
        return this;
    }
    
    /**
     * The ID of the bucket. For buckets, the id and name properties are the same.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Bucket withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The kind of item this is. For buckets, this is always storage#bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Bucket withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * User-provided labels, in key/value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Bucket withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The bucket's lifecycle configuration. See lifecycle management for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifecycle")
    public BucketLifecycle lifecycle;
    public Bucket withLifecycle(BucketLifecycle lifecycle) {
        this.lifecycle = lifecycle;
        return this;
    }
    
    /**
     * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Bucket withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The type of the bucket location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationType")
    public String locationType;
    public Bucket withLocationType(String locationType) {
        this.locationType = locationType;
        return this;
    }
    
    /**
     * The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logging")
    public BucketLogging logging;
    public Bucket withLogging(BucketLogging logging) {
        this.logging = logging;
        return this;
    }
    
    /**
     * The metadata generation of this bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metageneration")
    public String metageneration;
    public Bucket withMetageneration(String metageneration) {
        this.metageneration = metageneration;
        return this;
    }
    
    /**
     * The name of the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Bucket withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The owner of the bucket. This is always the project team's owner group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public BucketOwner owner;
    public Bucket withOwner(BucketOwner owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * The project number of the project the bucket belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectNumber")
    public String projectNumber;
    public Bucket withProjectNumber(String projectNumber) {
        this.projectNumber = projectNumber;
        return this;
    }
    
    /**
     * The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionPolicy")
    public BucketRetentionPolicy retentionPolicy;
    public Bucket withRetentionPolicy(BucketRetentionPolicy retentionPolicy) {
        this.retentionPolicy = retentionPolicy;
        return this;
    }
    
    /**
     * The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rpo")
    public String rpo;
    public Bucket withRpo(String rpo) {
        this.rpo = rpo;
        return this;
    }
    
    /**
     * Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("satisfiesPZS")
    public Boolean satisfiesPZS;
    public Bucket withSatisfiesPZS(Boolean satisfiesPZS) {
        this.satisfiesPZS = satisfiesPZS;
        return this;
    }
    
    /**
     * The URI of this bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Bucket withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageClass")
    public String storageClass;
    public Bucket withStorageClass(String storageClass) {
        this.storageClass = storageClass;
        return this;
    }
    
    /**
     * The creation time of the bucket in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeCreated")
    public OffsetDateTime timeCreated;
    public Bucket withTimeCreated(OffsetDateTime timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * The modification time of the bucket in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;
    public Bucket withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    /**
     * The bucket's versioning configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versioning")
    public BucketVersioning versioning;
    public Bucket withVersioning(BucketVersioning versioning) {
        this.versioning = versioning;
        return this;
    }
    
    /**
     * The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public BucketWebsite website;
    public Bucket withWebsite(BucketWebsite website) {
        this.website = website;
        return this;
    }
    
}
