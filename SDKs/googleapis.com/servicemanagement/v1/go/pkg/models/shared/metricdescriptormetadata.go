// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MetricDescriptorMetadataLaunchStageEnum - Deprecated. Must use the MetricDescriptor.launch_stage instead.
type MetricDescriptorMetadataLaunchStageEnum string

const (
	MetricDescriptorMetadataLaunchStageEnumLaunchStageUnspecified MetricDescriptorMetadataLaunchStageEnum = "LAUNCH_STAGE_UNSPECIFIED"
	MetricDescriptorMetadataLaunchStageEnumUnimplemented          MetricDescriptorMetadataLaunchStageEnum = "UNIMPLEMENTED"
	MetricDescriptorMetadataLaunchStageEnumPrelaunch              MetricDescriptorMetadataLaunchStageEnum = "PRELAUNCH"
	MetricDescriptorMetadataLaunchStageEnumEarlyAccess            MetricDescriptorMetadataLaunchStageEnum = "EARLY_ACCESS"
	MetricDescriptorMetadataLaunchStageEnumAlpha                  MetricDescriptorMetadataLaunchStageEnum = "ALPHA"
	MetricDescriptorMetadataLaunchStageEnumBeta                   MetricDescriptorMetadataLaunchStageEnum = "BETA"
	MetricDescriptorMetadataLaunchStageEnumGa                     MetricDescriptorMetadataLaunchStageEnum = "GA"
	MetricDescriptorMetadataLaunchStageEnumDeprecated             MetricDescriptorMetadataLaunchStageEnum = "DEPRECATED"
)

func (e MetricDescriptorMetadataLaunchStageEnum) ToPointer() *MetricDescriptorMetadataLaunchStageEnum {
	return &e
}

func (e *MetricDescriptorMetadataLaunchStageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAUNCH_STAGE_UNSPECIFIED":
		fallthrough
	case "UNIMPLEMENTED":
		fallthrough
	case "PRELAUNCH":
		fallthrough
	case "EARLY_ACCESS":
		fallthrough
	case "ALPHA":
		fallthrough
	case "BETA":
		fallthrough
	case "GA":
		fallthrough
	case "DEPRECATED":
		*e = MetricDescriptorMetadataLaunchStageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricDescriptorMetadataLaunchStageEnum: %v", v)
	}
}

// MetricDescriptorMetadata - Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadata struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay *string `json:"ingestDelay,omitempty"`
	// Deprecated. Must use the MetricDescriptor.launch_stage instead.
	LaunchStage *MetricDescriptorMetadataLaunchStageEnum `json:"launchStage,omitempty"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod *string `json:"samplePeriod,omitempty"`
}
