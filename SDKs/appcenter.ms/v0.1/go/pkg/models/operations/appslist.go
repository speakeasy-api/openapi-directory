// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// AppsListDollarOrderByEnum - The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.
type AppsListDollarOrderByEnum string

const (
	AppsListDollarOrderByEnumDisplayName AppsListDollarOrderByEnum = "display_name"
	AppsListDollarOrderByEnumName        AppsListDollarOrderByEnum = "name"
)

func (e AppsListDollarOrderByEnum) ToPointer() *AppsListDollarOrderByEnum {
	return &e
}

func (e *AppsListDollarOrderByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "display_name":
		fallthrough
	case "name":
		*e = AppsListDollarOrderByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListDollarOrderByEnum: %v", v)
	}
}

type AppsListRequest struct {
	// The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.
	DollarOrderBy *AppsListDollarOrderByEnum `queryParam:"style=form,explode=true,name=$orderBy"`
}

type AppsListDefaultApplicationJSONErrorCodeEnum string

const (
	AppsListDefaultApplicationJSONErrorCodeEnumBadRequest          AppsListDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsListDefaultApplicationJSONErrorCodeEnumConflict            AppsListDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsListDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsListDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsListDefaultApplicationJSONErrorCodeEnumNotFound            AppsListDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsListDefaultApplicationJSONErrorCodeEnumInternalServerError AppsListDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsListDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsListDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsListDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsListDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsListDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsListDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsListDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsListDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsListDefaultApplicationJSONError struct {
	Code    AppsListDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                      `json:"message"`
}

// AppsListDefaultApplicationJSON - Error
type AppsListDefaultApplicationJSON struct {
	Error AppsListDefaultApplicationJSONError `json:"error"`
}

type AppsList200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppsList200ApplicationJSONMemberPermissionsEnum string

const (
	AppsList200ApplicationJSONMemberPermissionsEnumManager   AppsList200ApplicationJSONMemberPermissionsEnum = "manager"
	AppsList200ApplicationJSONMemberPermissionsEnumDeveloper AppsList200ApplicationJSONMemberPermissionsEnum = "developer"
	AppsList200ApplicationJSONMemberPermissionsEnumViewer    AppsList200ApplicationJSONMemberPermissionsEnum = "viewer"
	AppsList200ApplicationJSONMemberPermissionsEnumTester    AppsList200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e AppsList200ApplicationJSONMemberPermissionsEnum) ToPointer() *AppsList200ApplicationJSONMemberPermissionsEnum {
	return &e
}

func (e *AppsList200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsList200ApplicationJSONMemberPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsList200ApplicationJSONMemberPermissionsEnum: %v", v)
	}
}

// AppsList200ApplicationJSONOriginEnum - The creation origin of this app
type AppsList200ApplicationJSONOriginEnum string

const (
	AppsList200ApplicationJSONOriginEnumAppcenter AppsList200ApplicationJSONOriginEnum = "appcenter"
	AppsList200ApplicationJSONOriginEnumHockeyapp AppsList200ApplicationJSONOriginEnum = "hockeyapp"
	AppsList200ApplicationJSONOriginEnumCodepush  AppsList200ApplicationJSONOriginEnum = "codepush"
)

func (e AppsList200ApplicationJSONOriginEnum) ToPointer() *AppsList200ApplicationJSONOriginEnum {
	return &e
}

func (e *AppsList200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsList200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsList200ApplicationJSONOriginEnum: %v", v)
	}
}

// AppsList200ApplicationJSONOsEnum - The OS the app will be running on
type AppsList200ApplicationJSONOsEnum string

const (
	AppsList200ApplicationJSONOsEnumAndroid AppsList200ApplicationJSONOsEnum = "Android"
	AppsList200ApplicationJSONOsEnumIOs     AppsList200ApplicationJSONOsEnum = "iOS"
	AppsList200ApplicationJSONOsEnumMacOs   AppsList200ApplicationJSONOsEnum = "macOS"
	AppsList200ApplicationJSONOsEnumTizen   AppsList200ApplicationJSONOsEnum = "Tizen"
	AppsList200ApplicationJSONOsEnumTvOs    AppsList200ApplicationJSONOsEnum = "tvOS"
	AppsList200ApplicationJSONOsEnumWindows AppsList200ApplicationJSONOsEnum = "Windows"
	AppsList200ApplicationJSONOsEnumLinux   AppsList200ApplicationJSONOsEnum = "Linux"
	AppsList200ApplicationJSONOsEnumCustom  AppsList200ApplicationJSONOsEnum = "Custom"
)

func (e AppsList200ApplicationJSONOsEnum) ToPointer() *AppsList200ApplicationJSONOsEnum {
	return &e
}

func (e *AppsList200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsList200ApplicationJSONOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsList200ApplicationJSONOsEnum: %v", v)
	}
}

// AppsList200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppsList200ApplicationJSONOwnerTypeEnum string

const (
	AppsList200ApplicationJSONOwnerTypeEnumOrg  AppsList200ApplicationJSONOwnerTypeEnum = "org"
	AppsList200ApplicationJSONOwnerTypeEnumUser AppsList200ApplicationJSONOwnerTypeEnum = "user"
)

func (e AppsList200ApplicationJSONOwnerTypeEnum) ToPointer() *AppsList200ApplicationJSONOwnerTypeEnum {
	return &e
}

func (e *AppsList200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org":
		fallthrough
	case "user":
		*e = AppsList200ApplicationJSONOwnerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsList200ApplicationJSONOwnerTypeEnum: %v", v)
	}
}

// AppsList200ApplicationJSONOwner - The information about the app's owner
type AppsList200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppsList200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// AppsList200ApplicationJSONPlatformEnum - The platform of the app
type AppsList200ApplicationJSONPlatformEnum string

const (
	AppsList200ApplicationJSONPlatformEnumJava            AppsList200ApplicationJSONPlatformEnum = "Java"
	AppsList200ApplicationJSONPlatformEnumObjectiveCSwift AppsList200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	AppsList200ApplicationJSONPlatformEnumUwp             AppsList200ApplicationJSONPlatformEnum = "UWP"
	AppsList200ApplicationJSONPlatformEnumCordova         AppsList200ApplicationJSONPlatformEnum = "Cordova"
	AppsList200ApplicationJSONPlatformEnumReactNative     AppsList200ApplicationJSONPlatformEnum = "React-Native"
	AppsList200ApplicationJSONPlatformEnumUnity           AppsList200ApplicationJSONPlatformEnum = "Unity"
	AppsList200ApplicationJSONPlatformEnumElectron        AppsList200ApplicationJSONPlatformEnum = "Electron"
	AppsList200ApplicationJSONPlatformEnumXamarin         AppsList200ApplicationJSONPlatformEnum = "Xamarin"
	AppsList200ApplicationJSONPlatformEnumWpf             AppsList200ApplicationJSONPlatformEnum = "WPF"
	AppsList200ApplicationJSONPlatformEnumWinForms        AppsList200ApplicationJSONPlatformEnum = "WinForms"
	AppsList200ApplicationJSONPlatformEnumUnknown         AppsList200ApplicationJSONPlatformEnum = "Unknown"
	AppsList200ApplicationJSONPlatformEnumCustom          AppsList200ApplicationJSONPlatformEnum = "Custom"
)

func (e AppsList200ApplicationJSONPlatformEnum) ToPointer() *AppsList200ApplicationJSONPlatformEnum {
	return &e
}

func (e *AppsList200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppsList200ApplicationJSONPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsList200ApplicationJSONPlatformEnum: %v", v)
	}
}

type AppsList200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                       `json:"app_secret"`
	AzureSubscription *AppsList200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppsList200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppsList200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppsList200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppsList200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform AppsList200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type AppsListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsList200ApplicationJSONAnies []AppsList200ApplicationJSON
	// Error
	AppsListDefaultApplicationJSONObject *AppsListDefaultApplicationJSON
}
