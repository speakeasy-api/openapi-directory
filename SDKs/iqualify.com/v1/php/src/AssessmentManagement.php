<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AssessmentManagement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove assessment document
     * 
     * Removes the assessment document file for a specified assessment in an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdResponse
     */
	public function deleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset user's assessment to draft state
     * 
     * Resets the user's submitted assessment to a draft state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdResponse
     */
	public function deleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdUsersUserEmailAssessmentsAssessmentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find offering's activities
     * 
     * Responds with the activities in a specific offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdActivitiesOpenresponseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdActivitiesOpenresponseResponse
     */
	public function getOfferingsOfferingIdActivitiesOpenresponse(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdActivitiesOpenresponseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdActivitiesOpenresponseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/activities/openresponse', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdActivitiesOpenresponseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdActivitiesOpenresponseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->offeringActivitiesResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OfferingActivitiesResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find offering's assessments
     * 
     * Responds with all assessments in an offering matching the offeringId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAssessmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAssessmentsResponse
     */
	public function getOfferingsOfferingIdAssessments(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAssessmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAssessmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/assessments', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAssessmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAssessmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assessmentResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssessmentResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find learners with assessments pending x days before due date within the specified offeringId
     * 
     * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionResponse
     */
	public function getOfferingsOfferingIdLearnersPendingSubmission(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/learners/pending-submission', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdLearnersPendingSubmissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assessmentPendingSubmissions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssessmentPendingSubmission>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find learner's open response assessment submissions
     * 
     * Responds with open response assessment submissions by a learner in an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseResponse
     */
	public function getOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponse(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/users/{userEmail}/submissions/open-response', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdUsersUserEmailSubmissionsOpenResponseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Assignments>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update assessment details
     * 
     * Updates the assessment details for a specified assessment in an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdResponse
     */
	public function patchOfferingsOfferingIdAssessmentsAssessmentId(
        \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/assessments/{assessmentId}', \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assessment", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assessmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssessmentResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the due dates for a learner's quiz attempt
     * 
     * Updates the due dates for a learner's quiz attempt specified by the assessmentId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailResponse
     */
	public function patchOfferingsOfferingIdAssessmentsAssessmentIdUserEmail(
        \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}', \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdAssessmentsAssessmentIdUserEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}