// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SessionFilterKeyEnum string

const (
	SessionFilterKeyEnumInvokedAfter  SessionFilterKeyEnum = "InvokedAfter"
	SessionFilterKeyEnumInvokedBefore SessionFilterKeyEnum = "InvokedBefore"
	SessionFilterKeyEnumTarget        SessionFilterKeyEnum = "Target"
	SessionFilterKeyEnumOwner         SessionFilterKeyEnum = "Owner"
	SessionFilterKeyEnumStatus        SessionFilterKeyEnum = "Status"
	SessionFilterKeyEnumSessionID     SessionFilterKeyEnum = "SessionId"
)

func (e *SessionFilterKeyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "InvokedAfter":
		fallthrough
	case "InvokedBefore":
		fallthrough
	case "Target":
		fallthrough
	case "Owner":
		fallthrough
	case "Status":
		fallthrough
	case "SessionId":
		*e = SessionFilterKeyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SessionFilterKeyEnum: %s", s)
	}
}
