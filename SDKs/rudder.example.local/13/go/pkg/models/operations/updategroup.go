// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateGroupPathParams struct {
	// Id of the group
	GroupID string `pathParam:"style=simple,explode=false,name=groupId"`
}

type UpdateGroupRequest struct {
	PathParams UpdateGroupPathParams
	Request    shared.GroupUpdate `request:"mediaType=application/json"`
}

// UpdateGroup200ApplicationJSONActionEnum - The id of the action
type UpdateGroup200ApplicationJSONActionEnum string

const (
	UpdateGroup200ApplicationJSONActionEnumUpdateGroup UpdateGroup200ApplicationJSONActionEnum = "updateGroup"
)

func (e *UpdateGroup200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateGroup":
		*e = UpdateGroup200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateGroup200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateGroup200ApplicationJSONData struct {
	Groups []shared.Group `json:"groups"`
}

// UpdateGroup200ApplicationJSONResultEnum - Result of the request
type UpdateGroup200ApplicationJSONResultEnum string

const (
	UpdateGroup200ApplicationJSONResultEnumSuccess UpdateGroup200ApplicationJSONResultEnum = "success"
	UpdateGroup200ApplicationJSONResultEnumError   UpdateGroup200ApplicationJSONResultEnum = "error"
)

func (e *UpdateGroup200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateGroup200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateGroup200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateGroup200ApplicationJSON - Groups information
type UpdateGroup200ApplicationJSON struct {
	// The id of the action
	Action UpdateGroup200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateGroup200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateGroup200ApplicationJSONResultEnum `json:"result"`
}

type UpdateGroupResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Groups information
	UpdateGroup200ApplicationJSONObject *UpdateGroup200ApplicationJSON
}
