"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyUsageLimitActionEnum(str, Enum):
    MODIFY_USAGE_LIMIT = 'ModifyUsageLimit'

class GETModifyUsageLimitBreachActionEnum(str, Enum):
    r"""The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>."""
    LOG = 'log'
    EMIT_METRIC = 'emit-metric'
    DISABLE = 'disable'

class GETModifyUsageLimitVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TWELVE_12_01 = '2012-12-01'


@dataclasses.dataclass
class GETModifyUsageLimitRequest:
    
    action: GETModifyUsageLimitActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    usage_limit_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'UsageLimitId', 'style': 'form', 'explode': True }})
    r"""The identifier of the usage limit to modify."""  
    version: GETModifyUsageLimitVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    amount: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Amount', 'style': 'form', 'explode': True }})
    r"""The new limit amount. For more information about this parameter, see <a>UsageLimit</a>."""  
    breach_action: Optional[GETModifyUsageLimitBreachActionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'BreachAction', 'style': 'form', 'explode': True }})
    r"""The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyUsageLimitResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    