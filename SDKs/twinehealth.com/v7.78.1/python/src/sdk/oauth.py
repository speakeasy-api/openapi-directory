"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Oauth:
    r"""Authentication operations"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_token(self, request: operations.CreateTokenRequest, security: operations.CreateTokenSecurity) -> operations.CreateTokenResponse:
        r"""Create an oauth token
        Create an OAuth 2.0 Bearer token. A valid bearer token is required for all other API requests.
        
        Be sure to set the header `Content-Type: \"application/vnd.api+json\"`. Otherwise, you will get an error
        403 Forbidden. Using `Content-Type: \"application/json\"` is permitted (to support older oauth clients) but when
        using `application/json` the body should have a body in the following format instead of nesting under
        `data.attributes`:
        ```
        {
          \"grant_type\": \"client_credentials\",
          \"client_id\": \"95c78ab2-167f-40b8-8bec-8398d4b87454\",
          \"client_secret\": \"35d18dc9-a3dd-4948-b787-063a490b9354\"
        }
        ```
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/oauth/token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateTokenResponse])
                res.create_token_response = out
        elif http_res.status_code in [401, 403, 409]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrUpdateErrorResponse])
                res.create_or_update_error_response = out

        return res

    def fetch_token_groups(self, request: operations.FetchTokenGroupsRequest, security: operations.FetchTokenGroupsSecurity) -> operations.FetchTokenGroupsResponse:
        r"""Get the groups for a token
        Get the list of groups a token can be used to access.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchTokenGroupsRequest, base_url, '/oauth/token/{id}/groups', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTokenGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchGroupsResponse])
                res.fetch_groups_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    def fetch_token_organization(self, request: operations.FetchTokenOrganizationRequest) -> operations.FetchTokenOrganizationResponse:
        r"""Get the organization for a token
        Get the organization a token can be used to access.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchTokenOrganizationRequest, base_url, '/oauth/token/{id}/organization', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTokenOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchOrganizationResponse])
                res.fetch_organization_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    