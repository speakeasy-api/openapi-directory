/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Creative - A creative and its classification data.
 */
public class Creative {
    /**
     * The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HTMLSnippet")
    public String htmlSnippet;

    public Creative withHTMLSnippet(String htmlSnippet) {
        this.htmlSnippet = htmlSnippet;
        return this;
    }
    
    /**
     * Account id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public Integer accountId;

    public Creative withAccountId(Integer accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Detected advertiser id, if any. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserId")
    public String[] advertiserId;

    public Creative withAdvertiserId(String[] advertiserId) {
        this.advertiserId = advertiserId;
        return this;
    }
    
    /**
     * The name of the company being advertised in the creative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserName")
    public String advertiserName;

    public Creative withAdvertiserName(String advertiserName) {
        this.advertiserName = advertiserName;
        return this;
    }
    
    /**
     * The agency id for this creative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agencyId")
    public String agencyId;

    public Creative withAgencyId(String agencyId) {
        this.agencyId = agencyId;
        return this;
    }
    
    /**
     * The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("apiUploadTimestamp")
    public OffsetDateTime apiUploadTimestamp;

    public Creative withApiUploadTimestamp(OffsetDateTime apiUploadTimestamp) {
        this.apiUploadTimestamp = apiUploadTimestamp;
        return this;
    }
    
    /**
     * All attributes for the ads that may be shown from this snippet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute")
    public Integer[] attribute;

    public Creative withAttribute(Integer[] attribute) {
        this.attribute = attribute;
        return this;
    }
    
    /**
     * A buyer-specific id identifying the creative in this ad.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerCreativeId")
    public String buyerCreativeId;

    public Creative withBuyerCreativeId(String buyerCreativeId) {
        this.buyerCreativeId = buyerCreativeId;
        return this;
    }
    
    /**
     * The set of destination urls for the snippet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickThroughUrl")
    public String[] clickThroughUrl;

    public Creative withClickThroughUrl(String[] clickThroughUrl) {
        this.clickThroughUrl = clickThroughUrl;
        return this;
    }
    
    /**
     * Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corrections")
    public CreativeCorrections[] corrections;

    public Creative withCorrections(CreativeCorrections[] corrections) {
        this.corrections = corrections;
        return this;
    }
    
    /**
     * The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disapprovalReasons")
    public CreativeDisapprovalReasons[] disapprovalReasons;

    public Creative withDisapprovalReasons(CreativeDisapprovalReasons[] disapprovalReasons) {
        this.disapprovalReasons = disapprovalReasons;
        return this;
    }
    
    /**
     * The filtering reasons for the creative. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filteringReasons")
    public CreativeFilteringReasons filteringReasons;

    public Creative withFilteringReasons(CreativeFilteringReasons filteringReasons) {
        this.filteringReasons = filteringReasons;
        return this;
    }
    
    /**
     * Ad height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Integer height;

    public Creative withHeight(Integer height) {
        this.height = height;
        return this;
    }
    
    /**
     * The set of urls to be called to record an impression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("impressionTrackingUrl")
    public String[] impressionTrackingUrl;

    public Creative withImpressionTrackingUrl(String[] impressionTrackingUrl) {
        this.impressionTrackingUrl = impressionTrackingUrl;
        return this;
    }
    
    /**
     * Resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Creative withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Detected product categories, if any. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productCategories")
    public Integer[] productCategories;

    public Creative withProductCategories(Integer[] productCategories) {
        this.productCategories = productCategories;
        return this;
    }
    
    /**
     * All restricted categories for the ads that may be shown from this snippet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restrictedCategories")
    public Integer[] restrictedCategories;

    public Creative withRestrictedCategories(Integer[] restrictedCategories) {
        this.restrictedCategories = restrictedCategories;
        return this;
    }
    
    /**
     * Detected sensitive categories, if any. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitiveCategories")
    public Integer[] sensitiveCategories;

    public Creative withSensitiveCategories(Integer[] sensitiveCategories) {
        this.sensitiveCategories = sensitiveCategories;
        return this;
    }
    
    /**
     * Creative serving status. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Creative withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * All vendor types for the ads that may be shown from this snippet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendorType")
    public Integer[] vendorType;

    public Creative withVendorType(Integer[] vendorType) {
        this.vendorType = vendorType;
        return this;
    }
    
    /**
     * The version for this creative. Read-only. This field should not be set in requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Integer version;

    public Creative withVersion(Integer version) {
        this.version = version;
        return this;
    }
    
    /**
     * The url to fetch a video ad. If set, HTMLSnippet should not be set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoURL")
    public String videoURL;

    public Creative withVideoURL(String videoURL) {
        this.videoURL = videoURL;
        return this;
    }
    
    /**
     * Ad width.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Integer width;

    public Creative withWidth(Integer width) {
        this.width = width;
        return this;
    }
    
    public Creative(){}
}
