// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FieldDataTypeEnum - The data type of the Field.
type FieldDataTypeEnum string

const (
	FieldDataTypeEnumDataTypeUnspecified   FieldDataTypeEnum = "DATA_TYPE_UNSPECIFIED"
	FieldDataTypeEnumInt                   FieldDataTypeEnum = "INT"
	FieldDataTypeEnumSmallint              FieldDataTypeEnum = "SMALLINT"
	FieldDataTypeEnumDouble                FieldDataTypeEnum = "DOUBLE"
	FieldDataTypeEnumDate                  FieldDataTypeEnum = "DATE"
	FieldDataTypeEnumDatetime              FieldDataTypeEnum = "DATETIME"
	FieldDataTypeEnumTime                  FieldDataTypeEnum = "TIME"
	FieldDataTypeEnumString                FieldDataTypeEnum = "STRING"
	FieldDataTypeEnumLong                  FieldDataTypeEnum = "LONG"
	FieldDataTypeEnumBoolean               FieldDataTypeEnum = "BOOLEAN"
	FieldDataTypeEnumDecimal               FieldDataTypeEnum = "DECIMAL"
	FieldDataTypeEnumUUID                  FieldDataTypeEnum = "UUID"
	FieldDataTypeEnumBlob                  FieldDataTypeEnum = "BLOB"
	FieldDataTypeEnumBit                   FieldDataTypeEnum = "BIT"
	FieldDataTypeEnumTinyint               FieldDataTypeEnum = "TINYINT"
	FieldDataTypeEnumInteger               FieldDataTypeEnum = "INTEGER"
	FieldDataTypeEnumBigint                FieldDataTypeEnum = "BIGINT"
	FieldDataTypeEnumFloat                 FieldDataTypeEnum = "FLOAT"
	FieldDataTypeEnumReal                  FieldDataTypeEnum = "REAL"
	FieldDataTypeEnumNumeric               FieldDataTypeEnum = "NUMERIC"
	FieldDataTypeEnumChar                  FieldDataTypeEnum = "CHAR"
	FieldDataTypeEnumVarchar               FieldDataTypeEnum = "VARCHAR"
	FieldDataTypeEnumLongvarchar           FieldDataTypeEnum = "LONGVARCHAR"
	FieldDataTypeEnumTimestamp             FieldDataTypeEnum = "TIMESTAMP"
	FieldDataTypeEnumNchar                 FieldDataTypeEnum = "NCHAR"
	FieldDataTypeEnumNvarchar              FieldDataTypeEnum = "NVARCHAR"
	FieldDataTypeEnumLongnvarchar          FieldDataTypeEnum = "LONGNVARCHAR"
	FieldDataTypeEnumNull                  FieldDataTypeEnum = "NULL"
	FieldDataTypeEnumOther                 FieldDataTypeEnum = "OTHER"
	FieldDataTypeEnumJavaObject            FieldDataTypeEnum = "JAVA_OBJECT"
	FieldDataTypeEnumDistinct              FieldDataTypeEnum = "DISTINCT"
	FieldDataTypeEnumStruct                FieldDataTypeEnum = "STRUCT"
	FieldDataTypeEnumArray                 FieldDataTypeEnum = "ARRAY"
	FieldDataTypeEnumClob                  FieldDataTypeEnum = "CLOB"
	FieldDataTypeEnumRef                   FieldDataTypeEnum = "REF"
	FieldDataTypeEnumDatalink              FieldDataTypeEnum = "DATALINK"
	FieldDataTypeEnumRowid                 FieldDataTypeEnum = "ROWID"
	FieldDataTypeEnumBinary                FieldDataTypeEnum = "BINARY"
	FieldDataTypeEnumVarbinary             FieldDataTypeEnum = "VARBINARY"
	FieldDataTypeEnumLongvarbinary         FieldDataTypeEnum = "LONGVARBINARY"
	FieldDataTypeEnumNclob                 FieldDataTypeEnum = "NCLOB"
	FieldDataTypeEnumSqlxml                FieldDataTypeEnum = "SQLXML"
	FieldDataTypeEnumRefCursor             FieldDataTypeEnum = "REF_CURSOR"
	FieldDataTypeEnumTimeWithTimezone      FieldDataTypeEnum = "TIME_WITH_TIMEZONE"
	FieldDataTypeEnumTimestampWithTimezone FieldDataTypeEnum = "TIMESTAMP_WITH_TIMEZONE"
)

func (e FieldDataTypeEnum) ToPointer() *FieldDataTypeEnum {
	return &e
}

func (e *FieldDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_TYPE_UNSPECIFIED":
		fallthrough
	case "INT":
		fallthrough
	case "SMALLINT":
		fallthrough
	case "DOUBLE":
		fallthrough
	case "DATE":
		fallthrough
	case "DATETIME":
		fallthrough
	case "TIME":
		fallthrough
	case "STRING":
		fallthrough
	case "LONG":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "DECIMAL":
		fallthrough
	case "UUID":
		fallthrough
	case "BLOB":
		fallthrough
	case "BIT":
		fallthrough
	case "TINYINT":
		fallthrough
	case "INTEGER":
		fallthrough
	case "BIGINT":
		fallthrough
	case "FLOAT":
		fallthrough
	case "REAL":
		fallthrough
	case "NUMERIC":
		fallthrough
	case "CHAR":
		fallthrough
	case "VARCHAR":
		fallthrough
	case "LONGVARCHAR":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "NCHAR":
		fallthrough
	case "NVARCHAR":
		fallthrough
	case "LONGNVARCHAR":
		fallthrough
	case "NULL":
		fallthrough
	case "OTHER":
		fallthrough
	case "JAVA_OBJECT":
		fallthrough
	case "DISTINCT":
		fallthrough
	case "STRUCT":
		fallthrough
	case "ARRAY":
		fallthrough
	case "CLOB":
		fallthrough
	case "REF":
		fallthrough
	case "DATALINK":
		fallthrough
	case "ROWID":
		fallthrough
	case "BINARY":
		fallthrough
	case "VARBINARY":
		fallthrough
	case "LONGVARBINARY":
		fallthrough
	case "NCLOB":
		fallthrough
	case "SQLXML":
		fallthrough
	case "REF_CURSOR":
		fallthrough
	case "TIME_WITH_TIMEZONE":
		fallthrough
	case "TIMESTAMP_WITH_TIMEZONE":
		*e = FieldDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldDataTypeEnum: %v", v)
	}
}

// Field - Message contains EntityType's Field metadata.
type Field struct {
	// The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.
	AdditionalDetails map[string]interface{} `json:"additionalDetails,omitempty"`
	// The data type of the Field.
	DataType *FieldDataTypeEnum `json:"dataType,omitempty"`
	// The following field specifies the default value of the Field provided by the external system if a value is not provided.
	DefaultValue interface{} `json:"defaultValue,omitempty"`
	// A brief description of the Field.
	Description *string `json:"description,omitempty"`
	// The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.
	Key *bool `json:"key,omitempty"`
	// Name of the Field.
	Name *string `json:"name,omitempty"`
	// Specifies whether a null value is allowed.
	Nullable  *bool      `json:"nullable,omitempty"`
	Reference *Reference `json:"reference,omitempty"`
}
