"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import datefilter as shared_datefilter
from ..shared import listfindingsresponse as shared_listfindingsresponse
from ..shared import mapfilter as shared_mapfilter
from ..shared import numberfilter as shared_numberfilter
from ..shared import packagefilter as shared_packagefilter
from ..shared import portrangefilter as shared_portrangefilter
from ..shared import sortfield_enum as shared_sortfield_enum
from ..shared import sortorder_enum as shared_sortorder_enum
from ..shared import stringfilter as shared_stringfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListFindingsRequestBodyFilterCriteria:
    r"""Details on the criteria used to define the filter."""
    
    aws_account_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsAccountId'), 'exclude': lambda f: f is None }})  
    component_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentId'), 'exclude': lambda f: f is None }})  
    component_type: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentType'), 'exclude': lambda f: f is None }})  
    ec2_instance_image_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceImageId'), 'exclude': lambda f: f is None }})  
    ec2_instance_subnet_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceSubnetId'), 'exclude': lambda f: f is None }})  
    ec2_instance_vpc_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceVpcId'), 'exclude': lambda f: f is None }})  
    ecr_image_architecture: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecrImageArchitecture'), 'exclude': lambda f: f is None }})  
    ecr_image_hash: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecrImageHash'), 'exclude': lambda f: f is None }})  
    ecr_image_pushed_at: Optional[list[shared_datefilter.DateFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecrImagePushedAt'), 'exclude': lambda f: f is None }})  
    ecr_image_registry: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecrImageRegistry'), 'exclude': lambda f: f is None }})  
    ecr_image_repository_name: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecrImageRepositoryName'), 'exclude': lambda f: f is None }})  
    ecr_image_tags: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecrImageTags'), 'exclude': lambda f: f is None }})  
    exploit_available: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exploitAvailable'), 'exclude': lambda f: f is None }})  
    finding_arn: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingArn'), 'exclude': lambda f: f is None }})  
    finding_status: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingStatus'), 'exclude': lambda f: f is None }})  
    finding_type: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingType'), 'exclude': lambda f: f is None }})  
    first_observed_at: Optional[list[shared_datefilter.DateFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstObservedAt'), 'exclude': lambda f: f is None }})  
    fix_available: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixAvailable'), 'exclude': lambda f: f is None }})  
    inspector_score: Optional[list[shared_numberfilter.NumberFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectorScore'), 'exclude': lambda f: f is None }})  
    lambda_function_execution_role_arn: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionExecutionRoleArn'), 'exclude': lambda f: f is None }})  
    lambda_function_last_modified_at: Optional[list[shared_datefilter.DateFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionLastModifiedAt'), 'exclude': lambda f: f is None }})  
    lambda_function_layers: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionLayers'), 'exclude': lambda f: f is None }})  
    lambda_function_name: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionName'), 'exclude': lambda f: f is None }})  
    lambda_function_runtime: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionRuntime'), 'exclude': lambda f: f is None }})  
    last_observed_at: Optional[list[shared_datefilter.DateFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastObservedAt'), 'exclude': lambda f: f is None }})  
    network_protocol: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkProtocol'), 'exclude': lambda f: f is None }})  
    port_range: Optional[list[shared_portrangefilter.PortRangeFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portRange'), 'exclude': lambda f: f is None }})  
    related_vulnerabilities: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedVulnerabilities'), 'exclude': lambda f: f is None }})  
    resource_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceId'), 'exclude': lambda f: f is None }})  
    resource_tags: Optional[list[shared_mapfilter.MapFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceTags'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})  
    severity: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})  
    title: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[list[shared_datefilter.DateFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'exclude': lambda f: f is None }})  
    vendor_severity: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorSeverity'), 'exclude': lambda f: f is None }})  
    vulnerability_id: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vulnerabilityId'), 'exclude': lambda f: f is None }})  
    vulnerability_source: Optional[list[shared_stringfilter.StringFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vulnerabilitySource'), 'exclude': lambda f: f is None }})  
    vulnerable_packages: Optional[list[shared_packagefilter.PackageFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vulnerablePackages'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListFindingsRequestBodySortCriteria:
    r"""Details about the criteria used to sort finding results."""
    
    field: Optional[shared_sortfield_enum.SortFieldEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})  
    sort_order: Optional[shared_sortorder_enum.SortOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListFindingsRequestBody:
    
    filter_criteria: Optional[ListFindingsRequestBodyFilterCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterCriteria'), 'exclude': lambda f: f is None }})
    r"""Details on the criteria used to define the filter."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return in the response."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page."""  
    sort_criteria: Optional[ListFindingsRequestBodySortCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortCriteria'), 'exclude': lambda f: f is None }})
    r"""Details about the criteria used to sort finding results."""  
    

@dataclasses.dataclass
class ListFindingsRequest:
    
    request_body: ListFindingsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListFindingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_findings_response: Optional[shared_listfindingsresponse.ListFindingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    