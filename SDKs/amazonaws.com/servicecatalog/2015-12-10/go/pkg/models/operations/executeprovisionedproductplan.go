// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExecuteProvisionedProductPlanXAmzTargetEnum
type ExecuteProvisionedProductPlanXAmzTargetEnum string

const (
	ExecuteProvisionedProductPlanXAmzTargetEnumAws242ServiceCatalogServiceExecuteProvisionedProductPlan ExecuteProvisionedProductPlanXAmzTargetEnum = "AWS242ServiceCatalogService.ExecuteProvisionedProductPlan"
)

func (e ExecuteProvisionedProductPlanXAmzTargetEnum) ToPointer() *ExecuteProvisionedProductPlanXAmzTargetEnum {
	return &e
}

func (e *ExecuteProvisionedProductPlanXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS242ServiceCatalogService.ExecuteProvisionedProductPlan":
		*e = ExecuteProvisionedProductPlanXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteProvisionedProductPlanXAmzTargetEnum: %v", v)
	}
}

type ExecuteProvisionedProductPlanRequest struct {
	ExecuteProvisionedProductPlanInput shared.ExecuteProvisionedProductPlanInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                      *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                  *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                     *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                           *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                  *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                      *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                  *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                         ExecuteProvisionedProductPlanXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ExecuteProvisionedProductPlanResponse struct {
	ContentType string
	// Success
	ExecuteProvisionedProductPlanOutput *shared.ExecuteProvisionedProductPlanOutput
	// InvalidParametersException
	InvalidParametersException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
