/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetFeedConfigurationRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;
}

/**
 * Information on how orders are filtered to show on the feed.
 */
export class GetFeedConfiguration200ApplicationJSONFilter extends SpeakeasyBase {
  /**
   * Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disableSingleFire" })
  disableSingleFire?: boolean;

  /**
   * JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is `FromOrders`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expression" })
  expression?: string;

  /**
   * List of order statuses that should be included in the feed. This should only be used in case `type` is `FromWorkflow`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string[];

  /**
   * Determines what orders appear in the feed and how they are filtered. If a feed has the `FromWorkflow` type configuration, it will receive order updates only when orderâ€™s statuses change and orders can be filtered by status, using the `status` field. A feed with the `FromOrders` type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the `expression` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Information that define the functioning of the queue.
 */
export class GetFeedConfiguration200ApplicationJSONQueue extends SpeakeasyBase {
  /**
   * Maximum life span of an order update after it gets to the feed. When a feed item is on the feed for this period of time, it is removed from the feed. Measured in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MessageRetentionPeriodInSeconds" })
  messageRetentionPeriodInSeconds?: number;

  /**
   * Period of time for which an item is not visible in the feed after it has been retrieved with the Get feed items request. Measured in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibilityTimeoutInSeconds" })
  visibilityTimeoutInSeconds?: number;
}

/**
 * OK
 */
export class GetFeedConfiguration200ApplicationJSON extends SpeakeasyBase {
  /**
   * Aproximate age of the oldest message in the feed, measured in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approximateAgeOfOldestMessageInSeconds" })
  approximateAgeOfOldestMessageInSeconds?: number;

  /**
   * Information on how orders are filtered to show on the feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filter" })
  @Type(() => GetFeedConfiguration200ApplicationJSONFilter)
  filter?: GetFeedConfiguration200ApplicationJSONFilter;

  /**
   * Current number of messages in the feed, including messages that may not be visible due to time out after retrieval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  /**
   * Information that define the functioning of the queue.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queue" })
  @Type(() => GetFeedConfiguration200ApplicationJSONQueue)
  queue?: GetFeedConfiguration200ApplicationJSONQueue;
}

export class GetFeedConfigurationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  getFeedConfiguration200ApplicationJSONObject?: GetFeedConfiguration200ApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
