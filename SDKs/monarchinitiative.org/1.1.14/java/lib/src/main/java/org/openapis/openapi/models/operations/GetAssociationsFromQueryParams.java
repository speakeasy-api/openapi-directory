/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetAssociationsFromQueryParams {
    /**
     * Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=evidence")
    public String evidence;
    public GetAssociationsFromQueryParams withEvidence(String evidence) {
        this.evidence = evidence;
        return this;
    }
    
    /**
     * If true, excludes associations that involve IEAs (ECO:0000501)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclude_automatic_assertions")
    public Boolean excludeAutomaticAssertions;
    public GetAssociationsFromQueryParams withExcludeAutomaticAssertions(Boolean excludeAutomaticAssertions) {
        this.excludeAutomaticAssertions = excludeAutomaticAssertions;
        return this;
    }
    
    /**
     * Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=object_taxon")
    public String objectTaxon;
    public GetAssociationsFromQueryParams withObjectTaxon(String objectTaxon) {
        this.objectTaxon = objectTaxon;
        return this;
    }
    
    /**
     * Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=relation")
    public String relation;
    public GetAssociationsFromQueryParams withRelation(String relation) {
        this.relation = relation;
        return this;
    }
    
    /**
     * number of rows
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=rows")
    public Long rows;
    public GetAssociationsFromQueryParams withRows(Long rows) {
        this.rows = rows;
        return this;
    }
    
    /**
     * beginning row
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start")
    public Long start;
    public GetAssociationsFromQueryParams withStart(Long start) {
        this.start = start;
        return this;
    }
    
    /**
     * If true, excludes evidence objects in response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=unselect_evidence")
    public Boolean unselectEvidence;
    public GetAssociationsFromQueryParams withUnselectEvidence(Boolean unselectEvidence) {
        this.unselectEvidence = unselectEvidence;
        return this;
    }
    
    /**
     * If true, returns results in compact associations format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=use_compact_associations")
    public Boolean useCompactAssociations;
    public GetAssociationsFromQueryParams withUseCompactAssociations(Boolean useCompactAssociations) {
        this.useCompactAssociations = useCompactAssociations;
        return this;
    }
    
}
