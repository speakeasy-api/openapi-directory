"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Payments:
    r"""The Payments endpoint allows you to put cash into a specific pot in your account by sending a payment intent. This intent must capture the following information regarding the payment:
    
    * Details regarding payment such as the `amount` to collect and the `currency`
    * Supported `payment_type` (card payments, electronic fund transfers etc.).
    * Associated key information to track a payment (e.g. `pot_id`).
    * Intention of payment:
        * Cash into the pot only, do not invest (`purpose: \"cash\"`)
        * Invest based on the portfolio attached to the investor (`purpose: \"invest\"` and `investment_instructions` not populated)
        * Invest based on attached instructions (`purpose: \"invest\"` and `investment_instructions` populated). If the pot has a portfolio attached, then the priority will be given to investment instructions. If the investment instructions apply only for a propotion of money coming in, then the rest will be added as cash.
    
    <!-- If you have additional parameters to associate with a payment, you can define a custom object and include it under a top-level field of the request body with the value you used for `payment_type` as its field name. (e.g. `\"stripe\": {.....}`). -->
    Additionaly, if the `service_provider` is given as `\"truelayer\"` extra accept an extra object `service_provider_params` where you have to provide the `bank_account_id`as a key-value pair and you will recieve this object in response including the fields, `bank_account_id`, `payment_intent_id` and `hpp_url`. (e.g `\"service_provider_params: {\"bank_account_id\": \"ba-82faf049...\", \"payment_intent_id: 91aa9de...\", \"hpp_url\":\"https://...\"}\"`).
    
    For `\"stripe\"`, in the response, you will receive the  `payment_intent_id`, `client_secret` and `publishable_key` inside that additional object with the value you used for `payment_type` as its field name. (e.g. `\"service_provider_params\": {\"payment_intent_id: 91aa9de...\", \"client_secret\": \"pi_XXXXX\", \"publishable_key\": \"pk_test_XXXXX\", .....}`).
    
    These values will be used with the client library for each payment call for the following purposes.
    
    * `payment_intent_id` - to uniquely identify your payment intent
    * `client_secret` - The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
    * `publishable_key` - to uniquely identify your payment service account
    * `hpp_url` - The redirect URL for proceed with bank payment (only for Truelayer)
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_single_payment_intent(self, request: operations.CreateSinglePaymentIntentRequest, security: operations.CreateSinglePaymentIntentSecurity) -> operations.CreateSinglePaymentIntentResponse:
        r"""Create Single Payment Intent
        Create a new Single Payment Intent for the given `amount` and `currency`. If successful, a new Payment Intent will be created with `pending_confirmation` status and the API will return the `client_secret` and `publishable_key` as response.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/payments/v1/single-payment-intent'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSinglePaymentIntentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent201ApplicationJSON])
                res.create_single_payment_intent_201_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent400ApplicationJSON])
                res.create_single_payment_intent_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent401ApplicationJSON])
                res.create_single_payment_intent_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent403ApplicationJSON])
                res.create_single_payment_intent_403_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent409ApplicationJSON])
                res.create_single_payment_intent_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent429ApplicationJSON])
                res.create_single_payment_intent_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSinglePaymentIntent500ApplicationJSON])
                res.create_single_payment_intent_500_application_json_object = out

        return res

    def get_all_payments(self, request: operations.GetAllPaymentsRequest, security: operations.GetAllPaymentsSecurity) -> operations.GetAllPaymentsResponse:
        r"""Get All Payments
        Returns all the Payments setup for the tenant in an array
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/payments/v1/'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAllPaymentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPaymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments200ApplicationJSON])
                res.get_all_payments_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments400ApplicationJSON])
                res.get_all_payments_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments401ApplicationJSON])
                res.get_all_payments_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments403ApplicationJSON])
                res.get_all_payments_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments404ApplicationJSON])
                res.get_all_payments_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments429ApplicationJSON])
                res.get_all_payments_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPayments500ApplicationJSON])
                res.get_all_payments_500_application_json_object = out

        return res

    def get_payment(self, request: operations.GetPaymentRequest, security: operations.GetPaymentSecurity) -> operations.GetPaymentResponse:
        r"""Get Payment by Transaction Id
        Get Payment by transaction ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentRequest, base_url, '/tenant/payments/v1/{transaction_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPaymentRootTypeForPayments])
                res.root_type_for_payments = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPayment400ApplicationJSON])
                res.get_payment_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPayment401ApplicationJSON])
                res.get_payment_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPayment403ApplicationJSON])
                res.get_payment_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPayment404ApplicationJSON])
                res.get_payment_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPayment429ApplicationJSON])
                res.get_payment_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPayment500ApplicationJSON])
                res.get_payment_500_application_json_object = out

        return res

    def get_pot_payments(self, request: operations.GetPotPaymentsRequest, security: operations.GetPotPaymentsSecurity) -> operations.GetPotPaymentsResponse:
        r"""Get Payments by Pot Id
        Only last 1000 records will be recieved if the result contain more that 1000 payments. In that case, the pagination should be used.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPotPaymentsRequest, base_url, '/tenant/payments/v1/getPotPayments/{pot_id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPotPaymentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPotPaymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotPayments200ApplicationJSON])
                res.get_pot_payments_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotPayments401ApplicationJSON])
                res.get_pot_payments_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotPayments403ApplicationJSON])
                res.get_pot_payments_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotPayments404ApplicationJSON])
                res.get_pot_payments_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotPayments429ApplicationJSON])
                res.get_pot_payments_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPotPayments500ApplicationJSON])
                res.get_pot_payments_500_application_json_object = out

        return res

    