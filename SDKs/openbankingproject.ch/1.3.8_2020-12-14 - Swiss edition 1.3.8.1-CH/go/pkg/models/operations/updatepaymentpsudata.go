// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdatePaymentPsuDataSecurity struct {
	BearerAuthOAuth *string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type UpdatePaymentPsuDataRequestBodyType string

const (
	UpdatePaymentPsuDataRequestBodyTypeAny                           UpdatePaymentPsuDataRequestBodyType = "any"
	UpdatePaymentPsuDataRequestBodyTypeUpdatePsuAuthentication       UpdatePaymentPsuDataRequestBodyType = "updatePsuAuthentication"
	UpdatePaymentPsuDataRequestBodyTypeSelectPsuAuthenticationMethod UpdatePaymentPsuDataRequestBodyType = "selectPsuAuthenticationMethod"
	UpdatePaymentPsuDataRequestBodyTypeTransactionAuthorisation      UpdatePaymentPsuDataRequestBodyType = "transactionAuthorisation"
	UpdatePaymentPsuDataRequestBodyTypeAuthorisationConfirmation     UpdatePaymentPsuDataRequestBodyType = "authorisationConfirmation"
)

type UpdatePaymentPsuDataRequestBody struct {
	Any                           interface{}
	UpdatePsuAuthentication       *shared.UpdatePsuAuthentication
	SelectPsuAuthenticationMethod *shared.SelectPsuAuthenticationMethod
	TransactionAuthorisation      *shared.TransactionAuthorisation
	AuthorisationConfirmation     *shared.AuthorisationConfirmation

	Type UpdatePaymentPsuDataRequestBodyType
}

func CreateUpdatePaymentPsuDataRequestBodyAny(any interface{}) UpdatePaymentPsuDataRequestBody {
	typ := UpdatePaymentPsuDataRequestBodyTypeAny

	return UpdatePaymentPsuDataRequestBody{
		Any:  &any,
		Type: typ,
	}
}

func CreateUpdatePaymentPsuDataRequestBodyUpdatePsuAuthentication(updatePsuAuthentication shared.UpdatePsuAuthentication) UpdatePaymentPsuDataRequestBody {
	typ := UpdatePaymentPsuDataRequestBodyTypeUpdatePsuAuthentication

	return UpdatePaymentPsuDataRequestBody{
		UpdatePsuAuthentication: &updatePsuAuthentication,
		Type:                    typ,
	}
}

func CreateUpdatePaymentPsuDataRequestBodySelectPsuAuthenticationMethod(selectPsuAuthenticationMethod shared.SelectPsuAuthenticationMethod) UpdatePaymentPsuDataRequestBody {
	typ := UpdatePaymentPsuDataRequestBodyTypeSelectPsuAuthenticationMethod

	return UpdatePaymentPsuDataRequestBody{
		SelectPsuAuthenticationMethod: &selectPsuAuthenticationMethod,
		Type:                          typ,
	}
}

func CreateUpdatePaymentPsuDataRequestBodyTransactionAuthorisation(transactionAuthorisation shared.TransactionAuthorisation) UpdatePaymentPsuDataRequestBody {
	typ := UpdatePaymentPsuDataRequestBodyTypeTransactionAuthorisation

	return UpdatePaymentPsuDataRequestBody{
		TransactionAuthorisation: &transactionAuthorisation,
		Type:                     typ,
	}
}

func CreateUpdatePaymentPsuDataRequestBodyAuthorisationConfirmation(authorisationConfirmation shared.AuthorisationConfirmation) UpdatePaymentPsuDataRequestBody {
	typ := UpdatePaymentPsuDataRequestBodyTypeAuthorisationConfirmation

	return UpdatePaymentPsuDataRequestBody{
		AuthorisationConfirmation: &authorisationConfirmation,
		Type:                      typ,
	}
}

func (u *UpdatePaymentPsuDataRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = UpdatePaymentPsuDataRequestBodyTypeAny
		return nil
	}

	updatePsuAuthentication := new(shared.UpdatePsuAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuAuthentication); err == nil {
		u.UpdatePsuAuthentication = updatePsuAuthentication
		u.Type = UpdatePaymentPsuDataRequestBodyTypeUpdatePsuAuthentication
		return nil
	}

	selectPsuAuthenticationMethod := new(shared.SelectPsuAuthenticationMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&selectPsuAuthenticationMethod); err == nil {
		u.SelectPsuAuthenticationMethod = selectPsuAuthenticationMethod
		u.Type = UpdatePaymentPsuDataRequestBodyTypeSelectPsuAuthenticationMethod
		return nil
	}

	transactionAuthorisation := new(shared.TransactionAuthorisation)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transactionAuthorisation); err == nil {
		u.TransactionAuthorisation = transactionAuthorisation
		u.Type = UpdatePaymentPsuDataRequestBodyTypeTransactionAuthorisation
		return nil
	}

	authorisationConfirmation := new(shared.AuthorisationConfirmation)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authorisationConfirmation); err == nil {
		u.AuthorisationConfirmation = authorisationConfirmation
		u.Type = UpdatePaymentPsuDataRequestBodyTypeAuthorisationConfirmation
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdatePaymentPsuDataRequestBody) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.UpdatePsuAuthentication != nil {
		return json.Marshal(u.UpdatePsuAuthentication)
	}

	if u.SelectPsuAuthenticationMethod != nil {
		return json.Marshal(u.SelectPsuAuthenticationMethod)
	}

	if u.TransactionAuthorisation != nil {
		return json.Marshal(u.TransactionAuthorisation)
	}

	if u.AuthorisationConfirmation != nil {
		return json.Marshal(u.AuthorisationConfirmation)
	}

	return nil, nil
}

type UpdatePaymentPsuDataRequest struct {
	// Is contained if and only if the "Signature" element is contained in the header of the request.
	Digest *string `header:"style=simple,explode=false,name=Digest"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	//
	PSUCorporateID *string `header:"style=simple,explode=false,name=PSU-Corporate-ID"`
	// Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	//
	PSUCorporateIDType *string `header:"style=simple,explode=false,name=PSU-Corporate-ID-Type"`
	// UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
	// UUID identifies either a device or a device dependant application installation.
	// In case of an installation identification this ID needs to be unaltered until removal from device.
	//
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
	//
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// HTTP method used at the PSU ? TPP interface, if available.
	// Valid values are:
	// * GET
	// * POST
	// * PUT
	// * PATCH
	// * DELETE
	//
	PSUHTTPMethod *shared.PSUHTTPMethodEnum `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Client ID of the PSU in the ASPSP client interface.
	//
	// Might be mandated in the ASPSP's documentation.
	//
	// It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding
	// AIS service in the same session.
	// In this case the ASPSP might check whether PSU-ID and token match,
	// according to ASPSP documentation.
	//
	PsuID *string `header:"style=simple,explode=false,name=PSU-ID"`
	// Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
	//
	// In this case, the mean and use are then defined in the ASPSP's documentation.
	//
	PSUIDType *string `header:"style=simple,explode=false,name=PSU-ID-Type"`
	// The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
	//
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
	//
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
	//
	PSUUserAgent *string                          `header:"style=simple,explode=false,name=PSU-User-Agent"`
	RequestBody  *UpdatePaymentPsuDataRequestBody `request:"mediaType=application/json"`
	// A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	//
	Signature *string `header:"style=simple,explode=false,name=Signature"`
	// The certificate used for signing the request, in base64 encoding.
	// Must be contained if a signature is contained.
	//
	TPPSignatureCertificate *string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// ID of the request, unique to the call, as determined by the initiating party.
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Resource identification of the related SCA.
	AuthorisationID string `pathParam:"style=simple,explode=false,name=authorisationId"`
	// The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).
	// The ASPSP will publish which of the payment products/endpoints will be supported.
	//
	// The following payment products are supported:
	//   - domestic-swiss-credit-transfers-isr
	//   - domestic-swiss-credit-transfers
	//   - domestic-swiss-credit-transfers-qr
	//   - domestic-swiss-foreign-credit-transfers
	//   - swiss-sepa-credit-transfers
	//   - swiss-cross-border-credit-transfers
	//   - pain.001-sepa-credit-transfers
	//   - pain.001-cross-border-credit-transfers
	//   - pain.001-swiss-six-credit-transfers
	//
	// **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,
	// the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.
	// Further XML schemes might be supported by some communities.
	//
	// **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.
	// There are plenty of country specificic scheme variants.
	//
	PaymentProduct shared.PaymentProductEnum `pathParam:"style=simple,explode=false,name=payment-product"`
	// Payment service:
	//
	// Possible values are:
	// * payments
	// * bulk-payments
	// * periodic-payments
	//
	PaymentService shared.PaymentServiceEnum `pathParam:"style=simple,explode=false,name=payment-service"`
	// Resource identification of the generated payment initiation resource.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
}

type UpdatePaymentPsuData200ApplicationJSONType string

const (
	UpdatePaymentPsuData200ApplicationJSONTypeUpdatePsuIdenticationResponse         UpdatePaymentPsuData200ApplicationJSONType = "updatePsuIdenticationResponse"
	UpdatePaymentPsuData200ApplicationJSONTypeUpdatePsuAuthenticationResponse       UpdatePaymentPsuData200ApplicationJSONType = "updatePsuAuthenticationResponse"
	UpdatePaymentPsuData200ApplicationJSONTypeSelectPsuAuthenticationMethodResponse UpdatePaymentPsuData200ApplicationJSONType = "selectPsuAuthenticationMethodResponse"
	UpdatePaymentPsuData200ApplicationJSONTypeScaStatusResponse                     UpdatePaymentPsuData200ApplicationJSONType = "scaStatusResponse"
	UpdatePaymentPsuData200ApplicationJSONTypeAuthorisationConfirmationResponse     UpdatePaymentPsuData200ApplicationJSONType = "authorisationConfirmationResponse"
)

type UpdatePaymentPsuData200ApplicationJSON struct {
	UpdatePsuIdenticationResponse         *shared.UpdatePsuIdenticationResponse
	UpdatePsuAuthenticationResponse       *shared.UpdatePsuAuthenticationResponse
	SelectPsuAuthenticationMethodResponse *shared.SelectPsuAuthenticationMethodResponse
	ScaStatusResponse                     *shared.ScaStatusResponse
	AuthorisationConfirmationResponse     *shared.AuthorisationConfirmationResponse

	Type UpdatePaymentPsuData200ApplicationJSONType
}

func CreateUpdatePaymentPsuData200ApplicationJSONUpdatePsuIdenticationResponse(updatePsuIdenticationResponse shared.UpdatePsuIdenticationResponse) UpdatePaymentPsuData200ApplicationJSON {
	typ := UpdatePaymentPsuData200ApplicationJSONTypeUpdatePsuIdenticationResponse

	return UpdatePaymentPsuData200ApplicationJSON{
		UpdatePsuIdenticationResponse: &updatePsuIdenticationResponse,
		Type:                          typ,
	}
}

func CreateUpdatePaymentPsuData200ApplicationJSONUpdatePsuAuthenticationResponse(updatePsuAuthenticationResponse shared.UpdatePsuAuthenticationResponse) UpdatePaymentPsuData200ApplicationJSON {
	typ := UpdatePaymentPsuData200ApplicationJSONTypeUpdatePsuAuthenticationResponse

	return UpdatePaymentPsuData200ApplicationJSON{
		UpdatePsuAuthenticationResponse: &updatePsuAuthenticationResponse,
		Type:                            typ,
	}
}

func CreateUpdatePaymentPsuData200ApplicationJSONSelectPsuAuthenticationMethodResponse(selectPsuAuthenticationMethodResponse shared.SelectPsuAuthenticationMethodResponse) UpdatePaymentPsuData200ApplicationJSON {
	typ := UpdatePaymentPsuData200ApplicationJSONTypeSelectPsuAuthenticationMethodResponse

	return UpdatePaymentPsuData200ApplicationJSON{
		SelectPsuAuthenticationMethodResponse: &selectPsuAuthenticationMethodResponse,
		Type:                                  typ,
	}
}

func CreateUpdatePaymentPsuData200ApplicationJSONScaStatusResponse(scaStatusResponse shared.ScaStatusResponse) UpdatePaymentPsuData200ApplicationJSON {
	typ := UpdatePaymentPsuData200ApplicationJSONTypeScaStatusResponse

	return UpdatePaymentPsuData200ApplicationJSON{
		ScaStatusResponse: &scaStatusResponse,
		Type:              typ,
	}
}

func CreateUpdatePaymentPsuData200ApplicationJSONAuthorisationConfirmationResponse(authorisationConfirmationResponse shared.AuthorisationConfirmationResponse) UpdatePaymentPsuData200ApplicationJSON {
	typ := UpdatePaymentPsuData200ApplicationJSONTypeAuthorisationConfirmationResponse

	return UpdatePaymentPsuData200ApplicationJSON{
		AuthorisationConfirmationResponse: &authorisationConfirmationResponse,
		Type:                              typ,
	}
}

func (u *UpdatePaymentPsuData200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updatePsuIdenticationResponse := new(shared.UpdatePsuIdenticationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuIdenticationResponse); err == nil {
		u.UpdatePsuIdenticationResponse = updatePsuIdenticationResponse
		u.Type = UpdatePaymentPsuData200ApplicationJSONTypeUpdatePsuIdenticationResponse
		return nil
	}

	updatePsuAuthenticationResponse := new(shared.UpdatePsuAuthenticationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuAuthenticationResponse); err == nil {
		u.UpdatePsuAuthenticationResponse = updatePsuAuthenticationResponse
		u.Type = UpdatePaymentPsuData200ApplicationJSONTypeUpdatePsuAuthenticationResponse
		return nil
	}

	selectPsuAuthenticationMethodResponse := new(shared.SelectPsuAuthenticationMethodResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&selectPsuAuthenticationMethodResponse); err == nil {
		u.SelectPsuAuthenticationMethodResponse = selectPsuAuthenticationMethodResponse
		u.Type = UpdatePaymentPsuData200ApplicationJSONTypeSelectPsuAuthenticationMethodResponse
		return nil
	}

	scaStatusResponse := new(shared.ScaStatusResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&scaStatusResponse); err == nil {
		u.ScaStatusResponse = scaStatusResponse
		u.Type = UpdatePaymentPsuData200ApplicationJSONTypeScaStatusResponse
		return nil
	}

	authorisationConfirmationResponse := new(shared.AuthorisationConfirmationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authorisationConfirmationResponse); err == nil {
		u.AuthorisationConfirmationResponse = authorisationConfirmationResponse
		u.Type = UpdatePaymentPsuData200ApplicationJSONTypeAuthorisationConfirmationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdatePaymentPsuData200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.UpdatePsuIdenticationResponse != nil {
		return json.Marshal(u.UpdatePsuIdenticationResponse)
	}

	if u.UpdatePsuAuthenticationResponse != nil {
		return json.Marshal(u.UpdatePsuAuthenticationResponse)
	}

	if u.SelectPsuAuthenticationMethodResponse != nil {
		return json.Marshal(u.SelectPsuAuthenticationMethodResponse)
	}

	if u.ScaStatusResponse != nil {
		return json.Marshal(u.ScaStatusResponse)
	}

	if u.AuthorisationConfirmationResponse != nil {
		return json.Marshal(u.AuthorisationConfirmationResponse)
	}

	return nil, nil
}

type UpdatePaymentPsuDataResponse struct {
	ContentType string
	// Bad Request
	Error400NGPIS *shared.Error400NGPIS
	// Bad Request
	Error400PIS *shared.Error400PIS
	// Unauthorized
	Error401NGPIS *shared.Error401NGPIS
	// Unauthorized
	Error401PIS *shared.Error401PIS
	// Forbidden
	Error403NGPIS *shared.Error403NGPIS
	// Forbidden
	Error403PIS *shared.Error403PIS
	// Not found
	Error404NGPIS *shared.Error404NGPIS
	// Not found
	Error404PIS *shared.Error404PIS
	// Method Not Allowed
	Error405NGPIS *shared.Error405NGPIS
	// Method Not Allowed
	Error405PIS *shared.Error405PIS
	// Conflict
	Error409NGPIS *shared.Error409NGPIS
	// Conflict
	Error409PIS *shared.Error409PIS
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// OK
	UpdatePaymentPsuData200ApplicationJSONOneOf *UpdatePaymentPsuData200ApplicationJSON
}
