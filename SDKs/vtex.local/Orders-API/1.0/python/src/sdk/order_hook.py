"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OrderHook:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_hook_configuration(self, request: operations.DeleteHookConfigurationRequest) -> operations.DeleteHookConfigurationResponse:
        r"""Delete hook configuration
        Deletes a given hook configuration.
        
        
        Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/hook/config'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteHookConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_hook_configuration(self, request: operations.GetHookConfigurationRequest) -> operations.GetHookConfigurationResponse:
        r"""Get hook configuration
        Retrieves a given hook's configuration details. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook). 
        
        > ðŸ“˜ Onboarding guide 
        >
        > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/hook/config'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHookConfigurationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHookConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def hook_configuration(self, request: operations.HookConfigurationRequest) -> operations.HookConfigurationResponse:
        r"""Create or update hook configuration
        Configures filtering rules applied to orders hook. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).
        
        
        There are two types of filtering that can be used: 
        
        
         - `FromWorkflow`: filters orders by status.
        
        
         - `FromOrders`: uses JSONata expressions to filter orders according to any property in the orders JSON document.
        
        
         This enables stores to filter delivered orders and orders in which products have been added or removed, for example.
        
        
        To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [expressions API](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/hook/config'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hook_configuration_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HookConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HookConfiguration])
                res.hook_configuration = out

        return res

    