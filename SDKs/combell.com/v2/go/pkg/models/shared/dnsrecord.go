// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// DNSRecord - The record to create
type DNSRecord struct {
	// Variable data depending on the record type.
	// <ul><li>A: the IPv4 address.</li><li>CNAME: canonical name of an alias.</li><li>MX: fully qualified domain name of a mail host.</li><li>SRV: does not apply. Data for the SRV records can be found in specific properties.</li><li>TXT: free form text data.</li><li>ALIAS: canonical name of an alias.</li><li>TLSA: format should match specific values for usage, selector, matching type and data: "{usage} {selector} {matching_type} {data}"
	//         <ul><li>The usage. The first field after the TLSA text in the DNS RR, specifies how to verify the certificate.<br /><ul><li>A value of 0 is for what is commonly called CA constraint (and PKIX-TA). The certificate provided when establishing TLS must be issued by the listed root-CA or one of its intermediate CAs, with a valid certification path to a root-CA already trusted by the application doing the verification.</li><li>A value of 1 is for what is commonly called Service certificate constraint (and PKIX-EE). The certificate used must match the TLSA record exactly, and it must also pass PKIX certification path validation to a trusted root-CA.</li><li>A value of 2 is for what is commonly called Trust Anchor Assertion (and DANE-TA). The certificate used has a valid certification path pointing back to the certificate mention in this record, but there is no need for it to pass the PKIX certification path validation to a trusted root-CA.</li><li>A value of 3 is for what is commonly called Domain issued certificate (and DANE-EE). The services uses a self-signed certificate. It is not signed by anyone else, and is exactly this record.</li></ul></li><li>The selector. When connecting to the service and a certificate is received, the selector field specifies which parts of it should be checked.<br /><ul><li>A value of 0 means to select the entire certificate for matching.</li><li>A value of 1 means to select just the public key for certificate matching. Matching the public key is often sufficient, as this is likely to be unique.</li></ul></li><li>The matching type.<br /><ul><li>A type of 0 means the entire information selected is present in the certificate association data.</li><li>A type of 1 means to do a SHA-256 hash of the selected data.</li><li>A type of 2 means to do a SHA-512 hash of the selected data.</li></ul></li><li>The actual data to be matched given the settings of the other fields. This is a long text string of hexadecimal data.</li></ul></li></ul>
	Content *string `json:"content,omitempty"`
	// The id of the record
	// This value is ignored for creation of new records.
	ID *string `json:"id,omitempty"`
	// The port for SRV records.<br />
	// The value MUST be a positive integer.<br />
	// Editing the value is not possible. You should add a new SRV record and delete the existing record.
	Port *int `json:"port,omitempty"`
	// The priority for MX or SRV records.<br />
	// A lower value means more preferred.<br />
	// The value MUST be a positive integer less or equal to 9999.
	Priority *int `json:"priority,omitempty"`
	// Used for the creation of SRV records. Possible options: TCP, UDP, ...<br />
	// Editing the value is not possible. You should add a new SRV record and delete the existing record.
	Protocol *string `json:"protocol,omitempty"`
	// The name of the record.<br />
	// This is the host name, alias defined by the record.<br />
	// An empty record or '@' is equal to the domain name.<br />
	// Applies to A, MX, CNAME, TXT, ALIAS and TLSA records.<br />
	// When type is TLSA the recommended value format is port number, protocol and host: _25._tcp.<br />
	// Does not apply for SRV records.
	RecordName *string `json:"record_name,omitempty"`
	// The symbolic name of the desired service for SRV records.<br />
	// Editing the value is not possible. You should add a new SRV record and can delete the existing record.
	Service *string `json:"service,omitempty"`
	// The canonical hostname of the machine providing the service for SRV records.<br />
	// Editing the value is not possible. You should add a new SRV record and delete the existing record.
	Target *string `json:"target,omitempty"`
	// Time to live of the record in seconds.<br />
	// It defines the time frame that clients can cache the information.<br />
	// The value MUST be between 60 and 86400. The default value is 3600 (= 1 hour).
	TTL *int `json:"ttl,omitempty"`
	// The type of the record (A, MX, CNAME, SRV, TXT, ALIAS and TLSA).
	Type *string `json:"type,omitempty"`
	// The weight for SRV records with the same priority.<br />
	// A higher value means more preferred.
	Weight *int `json:"weight,omitempty"`
}
