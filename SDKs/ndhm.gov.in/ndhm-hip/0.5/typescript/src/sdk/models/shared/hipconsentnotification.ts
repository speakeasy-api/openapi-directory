/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConsentManagerPatientID } from "./consentmanagerpatientid";
import { ConsentStatusEnum } from "./consentstatusenum";
import { HITypeEnumEnum } from "./hitypeenumenum";
import { Permission } from "./permission";
import { UsePurpose } from "./usepurpose";
import { Expose, Transform, Type } from "class-transformer";

export class HIPConsentNotificationNotificationConsentDetailCareContexts extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "careContextReference" })
  careContextReference: string;

  @SpeakeasyMetadata()
  @Expose({ name: "patientReference" })
  patientReference: string;
}

export class HIPConsentNotificationNotificationConsentDetailConsentManager extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;
}

export class HIPConsentNotificationNotificationConsentDetailHIP extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;
}

export class HIPConsentNotificationNotificationConsentDetail extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: HIPConsentNotificationNotificationConsentDetailCareContexts,
  })
  @Expose({ name: "careContexts" })
  @Type(() => HIPConsentNotificationNotificationConsentDetailCareContexts)
  careContexts: HIPConsentNotificationNotificationConsentDetailCareContexts[];

  @SpeakeasyMetadata()
  @Expose({ name: "consentId" })
  consentId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "consentManager" })
  @Type(() => HIPConsentNotificationNotificationConsentDetailConsentManager)
  consentManager: HIPConsentNotificationNotificationConsentDetailConsentManager;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "hiTypes" })
  hiTypes: HITypeEnumEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "hip" })
  @Type(() => HIPConsentNotificationNotificationConsentDetailHIP)
  hip: HIPConsentNotificationNotificationConsentDetailHIP;

  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => ConsentManagerPatientID)
  patient: ConsentManagerPatientID;

  @SpeakeasyMetadata()
  @Expose({ name: "permission" })
  @Type(() => Permission)
  permission: Permission;

  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  @Type(() => UsePurpose)
  purpose: UsePurpose;

  @SpeakeasyMetadata()
  @Expose({ name: "schemaVersion" })
  schemaVersion?: string;
}

export class HIPConsentNotificationNotification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "consentDetail" })
  @Type(() => HIPConsentNotificationNotificationConsentDetail)
  consentDetail: HIPConsentNotificationNotificationConsentDetail;

  @SpeakeasyMetadata()
  @Expose({ name: "consentId" })
  consentId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "signature" })
  signature: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ConsentStatusEnum;
}

export class HIPConsentNotification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "notification" })
  @Type(() => HIPConsentNotificationNotification)
  notification: HIPConsentNotificationNotification;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
