/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List OS policies compliance data for all Compute Engine VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstanceOSPoliciesCompliancesList(
    req: operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListRequest,
    security: operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/instanceOSPoliciesCompliances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListResponse =
        new operations.OsconfigProjectsLocationsInstanceOSPoliciesCompliancesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInstanceOSPoliciesCompliancesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInstanceOSPoliciesCompliancesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List inventory data for all VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstancesInventoriesList(
    req: operations.OsconfigProjectsLocationsInstancesInventoriesListRequest,
    security: operations.OsconfigProjectsLocationsInstancesInventoriesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstancesInventoriesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstancesInventoriesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/inventories",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstancesInventoriesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstancesInventoriesListResponse =
        new operations.OsconfigProjectsLocationsInstancesInventoriesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInventoriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInventoriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List OS policy asssignment reports for all Compute Engine VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsList(
    req: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest,
    security: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/reports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse =
        new operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOSPolicyAssignmentReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOSPolicyAssignmentReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List vulnerability reports for all VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstancesVulnerabilityReportsList(
    req: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest,
    security: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/vulnerabilityReports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse =
        new operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVulnerabilityReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVulnerabilityReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).
   */
  osconfigProjectsLocationsOsPolicyAssignmentsCreate(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/osPolicyAssignments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "osPolicyAssignmentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete the OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. If the LRO completes and is not cancelled, all revisions associated with the OS policy assignment are deleted. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).
   */
  osconfigProjectsLocationsOsPolicyAssignmentsDelete(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.
   */
  osconfigProjectsLocationsOsPolicyAssignmentsList(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/osPolicyAssignments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOSPolicyAssignmentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOSPolicyAssignmentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the OS policy assignment revisions for a given OS policy assignment.
   */
  osconfigProjectsLocationsOsPolicyAssignmentsListRevisions(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}:listRevisions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOSPolicyAssignmentRevisionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOSPolicyAssignmentRevisionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  osconfigProjectsLocationsOsPolicyAssignmentsOperationsCancel(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}:cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsCancelResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
   */
  osconfigProjectsLocationsOsPolicyAssignmentsOperationsGet(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsOperationsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).
   */
  osconfigProjectsLocationsOsPolicyAssignmentsPatch(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "osPolicyAssignmentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
