<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Chinese 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesResponse
     */
	public function chineseNameCandidates(
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}', \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesBatchResponse
     */
	public function chineseNameCandidatesBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/chineseNameCandidatesBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesGenderBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesGenderBatchResponse
     */
	public function chineseNameCandidatesGenderBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesGenderBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesGenderBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/chineseNameCandidatesGenderBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChineseNameCandidatesGenderBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesResponse
     */
	public function chineseNameGenderCandidates(
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}', \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChineseNameGenderCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchCandidatesOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchCandidatesOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchResponse
     */
	public function chineseNameMatch(
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}', \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nameMatchedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NameMatchedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchMatchPersonalFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchBatchResponse
     */
	public function chineseNameMatchBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchMatchPersonalFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/chineseNameMatchBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChineseNameMatchBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchNameMatchedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchNameMatchedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a Chinese full name ex. 王晓明
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameResponse
     */
	public function genderChineseName(
        \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderChineseName/{chineseName}', \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 full names ex. 王晓明
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameBatchResponse
     */
	public function genderChineseNameBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderChineseNameBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderChineseNameBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a Chinese name in LATIN (Pinyin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinResponse
     */
	public function genderChineseNamePinyin(
        \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}', \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinBatchResponse
     */
	public function genderChineseNamePinyinBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderChineseNamePinyinBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderChineseNamePinyinBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameResponse
     */
	public function parseChineseName(
        \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseChineseName/{chineseName}', \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameBatchResponse
     */
	public function parseChineseNameBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseChineseNameBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseChineseNameBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameResponse
     */
	public function pinyinChineseName(
        \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/pinyinChineseName/{chineseName}', \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameBatchResponse
     */
	public function pinyinChineseNameBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/pinyinChineseNameBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PinyinChineseNameBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}