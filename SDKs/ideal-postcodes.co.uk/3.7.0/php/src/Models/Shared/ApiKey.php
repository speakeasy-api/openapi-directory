<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class ApiKey
{
    /**
     * Determines whether the key can be used by the requesting agent. 
     * 
     * 
     * Returns false if one of the following conditions are met:
     *   - Key has no lookups remaining
     *   - Daily limit has been reached on the key
     *   - Daily individual limit has been reached
     *   - Key is not being used via an authorised URL
     *   - (Sublicensed key only) Key has a valid licensee attached
     *   - (Sublicensed key only) Key is not being used via an authorised URL specified by licensee
     * 
     * 
     * @var bool $available
     */
	#[\JMS\Serializer\Annotation\SerializedName('available')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $available;
    
    /**
     * Returns current context if it is in the list of available contexts for this key.
     * 
     * 
     * 
     * @var mixed $context
     */
	#[\JMS\Serializer\Annotation\SerializedName('context')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    public mixed $context;
    
    /**
     * A list of available contexts for a key
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\AvailableContexts> $contexts
     */
	#[\JMS\Serializer\Annotation\SerializedName('contexts')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AvailableContexts>')]
    public array $contexts;
    
	public function __construct()
	{
		$this->available = false;
		$this->context = null;
		$this->contexts = [];
	}
}
