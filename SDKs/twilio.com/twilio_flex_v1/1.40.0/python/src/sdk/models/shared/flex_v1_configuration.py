"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import configuration_enum_status_enum as shared_configuration_enum_status_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlexV1Configuration:
    r"""OK"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Configuration resource."""  
    attributes: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""An object that contains application-specific data."""  
    call_recording_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_recording_enabled'), 'exclude': lambda f: f is None }})
    r"""Whether call recording is enabled."""  
    call_recording_webhook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_recording_webhook_url'), 'exclude': lambda f: f is None }})
    r"""The call recording webhook URL."""  
    channel_configs: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel_configs'), 'exclude': lambda f: f is None }})
    r"""Settings for different limits for Flex Conversations channels attachments."""  
    chat_service_instance_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat_service_instance_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the chat service this user belongs to."""  
    crm_attributes: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crm_attributes'), 'exclude': lambda f: f is None }})
    r"""An object that contains the CRM attributes."""  
    crm_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crm_callback_url'), 'exclude': lambda f: f is None }})
    r"""The CRM Callback URL."""  
    crm_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crm_enabled'), 'exclude': lambda f: f is None }})
    r"""Whether CRM is present for Flex."""  
    crm_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crm_fallback_url'), 'exclude': lambda f: f is None }})
    r"""The CRM Fallback URL."""  
    crm_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crm_type'), 'exclude': lambda f: f is None }})
    r"""The CRM type."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time in GMT when the Configuration resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""  
    date_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time in GMT when the Configuration resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""  
    debugger_integration: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debugger_integration'), 'exclude': lambda f: f is None }})
    r"""Configurable parameters for Debugger Integration."""  
    flex_insights_drilldown: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flex_insights_drilldown'), 'exclude': lambda f: f is None }})
    r"""Setting this to true will redirect Flex UI to the URL set in flex_url"""  
    flex_insights_hr: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flex_insights_hr'), 'exclude': lambda f: f is None }})
    r"""Object with enabled/disabled flag with list of workspaces."""  
    flex_service_instance_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flex_service_instance_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the Flex service instance."""  
    flex_ui_status_report: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flex_ui_status_report'), 'exclude': lambda f: f is None }})
    r"""Configurable parameters for Flex UI Status report."""  
    flex_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flex_url'), 'exclude': lambda f: f is None }})
    r"""URL to redirect to in case drilldown is enabled."""  
    integrations: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrations'), 'exclude': lambda f: f is None }})
    r"""A list of objects that contain the configurations for the Integrations supported in this configuration."""  
    markdown: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markdown'), 'exclude': lambda f: f is None }})
    r"""Configurable parameters for Markdown."""  
    messaging_service_instance_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messaging_service_instance_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the Messaging service instance."""  
    notifications: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})
    r"""Configurable parameters for Notifications."""  
    outbound_call_flows: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outbound_call_flows'), 'exclude': lambda f: f is None }})
    r"""The list of outbound call flows."""  
    plugin_service_attributes: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plugin_service_attributes'), 'exclude': lambda f: f is None }})
    r"""The plugin service attributes."""  
    plugin_service_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plugin_service_enabled'), 'exclude': lambda f: f is None }})
    r"""Whether the plugin service enabled."""  
    public_attributes: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_attributes'), 'exclude': lambda f: f is None }})
    r"""The list of public attributes, which are visible to unauthenticated clients."""  
    queue_stats_configuration: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queue_stats_configuration'), 'exclude': lambda f: f is None }})
    r"""Configurable parameters for Queues Statistics."""  
    runtime_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtime_domain'), 'exclude': lambda f: f is None }})
    r"""The URL where the Flex instance is hosted."""  
    serverless_service_sids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverless_service_sids'), 'exclude': lambda f: f is None }})
    r"""The list of serverless service SIDs."""  
    service_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_version'), 'exclude': lambda f: f is None }})
    r"""The Flex Service version."""  
    status: Optional[shared_configuration_enum_status_enum.ConfigurationEnumStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    taskrouter_offline_activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_offline_activity_sid'), 'exclude': lambda f: f is None }})
    r"""The TaskRouter SID of the offline activity."""  
    taskrouter_skills: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_skills'), 'exclude': lambda f: f is None }})
    r"""The Skill description for TaskRouter workers."""  
    taskrouter_target_taskqueue_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_target_taskqueue_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the TaskRouter Target TaskQueue."""  
    taskrouter_target_workflow_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_target_workflow_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the TaskRouter target Workflow."""  
    taskrouter_taskqueues: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_taskqueues'), 'exclude': lambda f: f is None }})
    r"""The list of TaskRouter TaskQueues."""  
    taskrouter_worker_attributes: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_worker_attributes'), 'exclude': lambda f: f is None }})
    r"""The TaskRouter Worker attributes."""  
    taskrouter_worker_channels: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_worker_channels'), 'exclude': lambda f: f is None }})
    r"""The TaskRouter default channel capacities and availability for workers."""  
    taskrouter_workspace_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskrouter_workspace_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the TaskRouter Workspace."""  
    ui_attributes: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ui_attributes'), 'exclude': lambda f: f is None }})
    r"""The object that describes Flex UI characteristics and settings."""  
    ui_dependencies: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ui_dependencies'), 'exclude': lambda f: f is None }})
    r"""The object that defines the NPM packages and versions to be used in Hosted Flex."""  
    ui_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ui_language'), 'exclude': lambda f: f is None }})
    r"""The primary language of the Flex UI."""  
    ui_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ui_version'), 'exclude': lambda f: f is None }})
    r"""The Pinned UI version."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The absolute URL of the Configuration resource."""  
    