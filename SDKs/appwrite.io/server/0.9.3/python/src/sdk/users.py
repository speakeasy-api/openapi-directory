"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Users:
    r"""The Users service allows you to manage your project users."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def users_create(self, request: operations.UsersCreateRequestBody, security: operations.UsersCreateSecurity) -> operations.UsersCreateResponse:
        r"""Create User
        Create a new user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def users_delete(self, request: operations.UsersDeleteRequest, security: operations.UsersDeleteSecurity) -> operations.UsersDeleteResponse:
        r"""Delete User
        Delete a user by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersDeleteRequest, base_url, '/users/{userId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def users_delete_session(self, request: operations.UsersDeleteSessionRequest, security: operations.UsersDeleteSessionSecurity) -> operations.UsersDeleteSessionResponse:
        r"""Delete User Session
        Delete a user sessions by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersDeleteSessionRequest, base_url, '/users/{userId}/sessions/{sessionId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersDeleteSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def users_delete_sessions(self, request: operations.UsersDeleteSessionsRequest, security: operations.UsersDeleteSessionsSecurity) -> operations.UsersDeleteSessionsResponse:
        r"""Delete User Sessions
        Delete all user's sessions by using the user's unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersDeleteSessionsRequest, base_url, '/users/{userId}/sessions', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersDeleteSessionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def users_get(self, request: operations.UsersGetRequest, security: operations.UsersGetSecurity) -> operations.UsersGetResponse:
        r"""Get User
        Get a user by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersGetRequest, base_url, '/users/{userId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def users_get_logs(self, request: operations.UsersGetLogsRequest, security: operations.UsersGetLogsSecurity) -> operations.UsersGetLogsResponse:
        r"""Get User Logs
        Get a user activity logs list by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersGetLogsRequest, base_url, '/users/{userId}/logs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersGetLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LogList])
                res.log_list = out

        return res

    def users_get_prefs(self, request: operations.UsersGetPrefsRequest, security: operations.UsersGetPrefsSecurity) -> operations.UsersGetPrefsResponse:
        r"""Get User Preferences
        Get the user preferences by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersGetPrefsRequest, base_url, '/users/{userId}/prefs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersGetPrefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.preferences = out

        return res

    def users_get_sessions(self, request: operations.UsersGetSessionsRequest, security: operations.UsersGetSessionsSecurity) -> operations.UsersGetSessionsResponse:
        r"""Get User Sessions
        Get the user sessions list by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersGetSessionsRequest, base_url, '/users/{userId}/sessions', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersGetSessionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SessionList])
                res.session_list = out

        return res

    def users_list(self, request: operations.UsersListRequest, security: operations.UsersListSecurity) -> operations.UsersListResponse:
        r"""List Users
        Get a list of all the project's users. You can use the query params to filter your results.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        query_params = utils.get_query_params(operations.UsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserList])
                res.user_list = out

        return res

    def users_update_prefs(self, request: operations.UsersUpdatePrefsRequest, security: operations.UsersUpdatePrefsSecurity) -> operations.UsersUpdatePrefsResponse:
        r"""Update User Preferences
        Update the user preferences by its unique ID. You can pass only the specific settings you wish to update.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersUpdatePrefsRequest, base_url, '/users/{userId}/prefs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersUpdatePrefsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.preferences = out

        return res

    def users_update_status(self, request: operations.UsersUpdateStatusRequest, security: operations.UsersUpdateStatusSecurity) -> operations.UsersUpdateStatusResponse:
        r"""Update User Status
        Update the user status by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersUpdateStatusRequest, base_url, '/users/{userId}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersUpdateStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def users_update_verification(self, request: operations.UsersUpdateVerificationRequest, security: operations.UsersUpdateVerificationSecurity) -> operations.UsersUpdateVerificationResponse:
        r"""Update Email Verification
        Update the user email verification status by its unique ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UsersUpdateVerificationRequest, base_url, '/users/{userId}/verification', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UsersUpdateVerificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    