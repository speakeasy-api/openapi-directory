"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class CollectionsDetailRequest:
    
    collection_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'collection_id', 'style': 'simple', 'explode': False }})
    r"""A short id for that collection"""  
    

@dataclasses.dataclass
class CollectionsDetailCollectionAttributes:
    r"""The properties of the collection."""
    
    bookmarks: Optional[bool] = dataclasses.field(default=None)
    r"""This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection."""  
    collected_type_choices: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection."""  
    date_created: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the collection was created, as an iso8601 formatted timestamp."""  
    date_modified: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the collection was last modified, as an iso8601 formatted timestamp."""  
    is_promoted: Optional[bool] = dataclasses.field(default=None)
    r"""???"""  
    is_public: Optional[bool] = dataclasses.field(default=None)
    r"""This attribute indicates if a collection is viewable to a user with no special permissions."""  
    issue_choices: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection."""  
    program_area_choices: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of ."""  
    status_choices: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection."""  
    title: Optional[str] = dataclasses.field(default=None)
    r"""The title of the collection."""  
    volume_choices: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection."""  
    

@dataclasses.dataclass
class CollectionsDetailCollectionLinks:
    r"""URLs to alternative representations of the entity."""
    
    self_: Optional[str] = dataclasses.field(default=None)
    r"""A link to the canonical API endpoint of this collection."""  
    

@dataclasses.dataclass
class CollectionsDetailCollectionRelationships:
    r"""URLs to other entities or entity collections that have a relationship to the node entity."""
    
    collected_metadata: Optional[str] = dataclasses.field(default=None)
    r"""A link to the list of metadata entries that are linked to the current collections."""  
    linked_nodes: Optional[str] = dataclasses.field(default=None)
    r"""A link to the list of nodes that are linked to the current collection."""  
    linked_preprints: Optional[str] = dataclasses.field(default=None)
    r"""A link to the list of preprints that are linked to the current collection."""  
    linked_registrations: Optional[str] = dataclasses.field(default=None)
    r"""A link to the list of registrations that are linked to the current collection."""  
    node_links: Optional[str] = dataclasses.field(default=None)
    r"""A link to the list of nodes that are linked to the current collection."""  
    provider: Optional[str] = dataclasses.field(default=None)
    r"""A link to the list of preprints that this node relates to."""  
    

@dataclasses.dataclass
class CollectionsDetailCollection:
    
    type: str = dataclasses.field()
    r"""The type identifier of the entity (`collections`)."""  
    attributes: Optional[CollectionsDetailCollectionAttributes] = dataclasses.field(default=None)
    r"""The properties of the collection."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The unique identifier of the collection."""  
    links: Optional[CollectionsDetailCollectionLinks] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the entity."""  
    relationships: Optional[CollectionsDetailCollectionRelationships] = dataclasses.field(default=None)
    r"""URLs to other entities or entity collections that have a relationship to the node entity."""  
    

@dataclasses.dataclass
class CollectionsDetailResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    