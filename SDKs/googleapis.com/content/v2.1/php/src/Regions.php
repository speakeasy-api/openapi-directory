<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Regions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a region definition in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateResponse
     */
	public function contentRegionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/regions', \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRegionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a region definition from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteResponse
     */
	public function contentRegionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/regions/{regionId}', \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRegionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a region defined in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetResponse
     */
	public function contentRegionsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/regions/{regionId}', \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRegionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the regions in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListResponse
     */
	public function contentRegionsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/regions', \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRegionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRegionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRegionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRegionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a region definition in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchResponse
     */
	public function contentRegionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/regions/{regionId}', \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRegionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
}