"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sentimentscore as shared_sentimentscore
from ..shared import sentimenttype_enum as shared_sentimenttype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchDetectSentimentItemResult:
    r"""The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation."""
    
    index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Index'), 'exclude': lambda f: f is None }})  
    sentiment: Optional[shared_sentimenttype_enum.SentimentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sentiment'), 'exclude': lambda f: f is None }})  
    sentiment_score: Optional[shared_sentimentscore.SentimentScore] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SentimentScore'), 'exclude': lambda f: f is None }})  
    