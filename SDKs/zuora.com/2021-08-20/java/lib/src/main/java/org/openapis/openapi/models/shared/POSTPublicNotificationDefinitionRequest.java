/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * POSTPublicNotificationDefinitionRequest - The request body used to create the notification definition.
 */
public class POSTPublicNotificationDefinitionRequest {
    /**
     * The status of the notification definition. The default value is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public POSTPublicNotificationDefinitionRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callout")
    public POSTPublicNotificationDefinitionRequestCallout callout;
    public POSTPublicNotificationDefinitionRequest withCallout(POSTPublicNotificationDefinitionRequestCallout callout) {
        this.callout = callout;
        return this;
    }
    
    /**
     * The status of the callout action. Default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutActive")
    public Boolean calloutActive;
    public POSTPublicNotificationDefinitionRequest withCalloutActive(Boolean calloutActive) {
        this.calloutActive = calloutActive;
        return this;
    }
    
    /**
     * The profile that notification definition belongs to. 
     * 
     * You can use the [Query Action](https://www.zuora.com/developer/api-reference/#operation/Action_POSTquery) to get the communication profile Id. See the following request sample:
     * 
     * `{
     *     "queryString": "select Id, ProfileName from CommunicationProfile"
     *  }`
     * 
     * If you do not pass the communicationProfileId, notification service will be automatically added to the 'Default Profile'.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("communicationProfileId")
    public String communicationProfileId;
    public POSTPublicNotificationDefinitionRequest withCommunicationProfileId(String communicationProfileId) {
        this.communicationProfileId = communicationProfileId;
        return this;
    }
    
    /**
     * The description of the notification definition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public POSTPublicNotificationDefinitionRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The status of the email action. The default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailActive")
    public Boolean emailActive;
    public POSTPublicNotificationDefinitionRequest withEmailActive(Boolean emailActive) {
        this.emailActive = emailActive;
        return this;
    }
    
    /**
     * The ID of the email template. If emailActive is true, an email template is required. And EventType of the email template MUST be the same as the eventType.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailTemplateId")
    public String emailTemplateId;
    public POSTPublicNotificationDefinitionRequest withEmailTemplateId(String emailTemplateId) {
        this.emailTemplateId = emailTemplateId;
        return this;
    }
    
    /**
     * The name of the event type. 
     * 
     */
    @JsonProperty("eventTypeName")
    public String eventTypeName;
    public POSTPublicNotificationDefinitionRequest withEventTypeName(String eventTypeName) {
        this.eventTypeName = eventTypeName;
        return this;
    }
    
    /**
     * The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default. 
     *           
     * For example, if you want to create a notification definition on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypeNamespace")
    public String eventTypeNamespace;
    public POSTPublicNotificationDefinitionRequest withEventTypeNamespace(String eventTypeNamespace) {
        this.eventTypeNamespace = eventTypeNamespace;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterRule")
    public POSTPublicNotificationDefinitionRequestFilterRule filterRule;
    public POSTPublicNotificationDefinitionRequest withFilterRule(POSTPublicNotificationDefinitionRequestFilterRule filterRule) {
        this.filterRule = filterRule;
        return this;
    }
    
    /**
     * The parameter values used to configure the filter rule.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterRuleParams")
    public java.util.Map<String, String> filterRuleParams;
    public POSTPublicNotificationDefinitionRequest withFilterRuleParams(java.util.Map<String, String> filterRuleParams) {
        this.filterRuleParams = filterRuleParams;
        return this;
    }
    
    /**
     * The name of the notification definition, unique per communication profile.
     */
    @JsonProperty("name")
    public String name;
    public POSTPublicNotificationDefinitionRequest withName(String name) {
        this.name = name;
        return this;
    }
    
}
