// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// EmployeeEmployeeAEAssessmentOverrideEnum - The employees' a e assessment override
type EmployeeEmployeeAEAssessmentOverrideEnum string

const (
	EmployeeEmployeeAEAssessmentOverrideEnumNone               EmployeeEmployeeAEAssessmentOverrideEnum = "None"
	EmployeeEmployeeAEAssessmentOverrideEnumOptOut             EmployeeEmployeeAEAssessmentOverrideEnum = "OptOut"
	EmployeeEmployeeAEAssessmentOverrideEnumOptIn              EmployeeEmployeeAEAssessmentOverrideEnum = "OptIn"
	EmployeeEmployeeAEAssessmentOverrideEnumVoluntaryJoiner    EmployeeEmployeeAEAssessmentOverrideEnum = "VoluntaryJoiner"
	EmployeeEmployeeAEAssessmentOverrideEnumContractualPension EmployeeEmployeeAEAssessmentOverrideEnum = "ContractualPension"
	EmployeeEmployeeAEAssessmentOverrideEnumCeasedMembership   EmployeeEmployeeAEAssessmentOverrideEnum = "CeasedMembership"
	EmployeeEmployeeAEAssessmentOverrideEnumLeaver             EmployeeEmployeeAEAssessmentOverrideEnum = "Leaver"
	EmployeeEmployeeAEAssessmentOverrideEnumExcluded           EmployeeEmployeeAEAssessmentOverrideEnum = "Excluded"
)

func (e EmployeeEmployeeAEAssessmentOverrideEnum) ToPointer() *EmployeeEmployeeAEAssessmentOverrideEnum {
	return &e
}

func (e *EmployeeEmployeeAEAssessmentOverrideEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "OptOut":
		fallthrough
	case "OptIn":
		fallthrough
	case "VoluntaryJoiner":
		fallthrough
	case "ContractualPension":
		fallthrough
	case "CeasedMembership":
		fallthrough
	case "Leaver":
		fallthrough
	case "Excluded":
		*e = EmployeeEmployeeAEAssessmentOverrideEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeAEAssessmentOverrideEnum: %v", v)
	}
}

// EmployeeEmployeeAEExclusionReasonCodeEnum - The employees' a e exclusion reason code
type EmployeeEmployeeAEExclusionReasonCodeEnum string

const (
	EmployeeEmployeeAEExclusionReasonCodeEnumOtherNotKnown                  EmployeeEmployeeAEExclusionReasonCodeEnum = "OtherNotKnown"
	EmployeeEmployeeAEExclusionReasonCodeEnumNotAWorker                     EmployeeEmployeeAEExclusionReasonCodeEnum = "NotAWorker"
	EmployeeEmployeeAEExclusionReasonCodeEnumNotUkWorker                    EmployeeEmployeeAEExclusionReasonCodeEnum = "NotUKWorker"
	EmployeeEmployeeAEExclusionReasonCodeEnumTemporaryUkWorker              EmployeeEmployeeAEExclusionReasonCodeEnum = "TemporaryUKWorker"
	EmployeeEmployeeAEExclusionReasonCodeEnumOutsideAgeRange                EmployeeEmployeeAEExclusionReasonCodeEnum = "OutsideAgeRange"
	EmployeeEmployeeAEExclusionReasonCodeEnumSingleEmployeeDirector         EmployeeEmployeeAEExclusionReasonCodeEnum = "SingleEmployeeDirector"
	EmployeeEmployeeAEExclusionReasonCodeEnumCeasedMembershipWithin12Months EmployeeEmployeeAEExclusionReasonCodeEnum = "CeasedMembershipWithin12Months"
	EmployeeEmployeeAEExclusionReasonCodeEnumCeasedMembershipBeyond12Months EmployeeEmployeeAEExclusionReasonCodeEnum = "CeasedMembershipBeyond12Months"
	EmployeeEmployeeAEExclusionReasonCodeEnumWorkerWulsWithin12Month        EmployeeEmployeeAEExclusionReasonCodeEnum = "WorkerWULSWithin12Month"
	EmployeeEmployeeAEExclusionReasonCodeEnumWorkerWulsBeyond12Month        EmployeeEmployeeAEExclusionReasonCodeEnum = "WorkerWULSBeyond12Month"
	EmployeeEmployeeAEExclusionReasonCodeEnumWorkerInNoticePeriod           EmployeeEmployeeAEExclusionReasonCodeEnum = "WorkerInNoticePeriod"
	EmployeeEmployeeAEExclusionReasonCodeEnumWorkerTaxProtection            EmployeeEmployeeAEExclusionReasonCodeEnum = "WorkerTaxProtection"
)

func (e EmployeeEmployeeAEExclusionReasonCodeEnum) ToPointer() *EmployeeEmployeeAEExclusionReasonCodeEnum {
	return &e
}

func (e *EmployeeEmployeeAEExclusionReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OtherNotKnown":
		fallthrough
	case "NotAWorker":
		fallthrough
	case "NotUKWorker":
		fallthrough
	case "TemporaryUKWorker":
		fallthrough
	case "OutsideAgeRange":
		fallthrough
	case "SingleEmployeeDirector":
		fallthrough
	case "CeasedMembershipWithin12Months":
		fallthrough
	case "CeasedMembershipBeyond12Months":
		fallthrough
	case "WorkerWULSWithin12Month":
		fallthrough
	case "WorkerWULSBeyond12Month":
		fallthrough
	case "WorkerInNoticePeriod":
		fallthrough
	case "WorkerTaxProtection":
		*e = EmployeeEmployeeAEExclusionReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeAEExclusionReasonCodeEnum: %v", v)
	}
}

// EmployeeEmployeeAddress - The employees' address
type EmployeeEmployeeAddress struct {
	// The addresss' line 1
	Address1 *string `json:"Address1,omitempty"`
	// The addresss' line 2
	Address2 *string `json:"Address2,omitempty"`
	// The addresss' line 3
	Address3 *string `json:"Address3,omitempty"`
	// The addresss' line 4
	Address4 *string `json:"Address4,omitempty"`
	// The addresss' country
	Country *string `json:"Country,omitempty"`
	// The addresss' postcode
	Postcode *string `json:"Postcode,omitempty"`
}

// EmployeeEmployeeBankAccount - The employees' bank account
type EmployeeEmployeeBankAccount struct {
	// The bank accounts' account name
	AccountName *string `json:"AccountName,omitempty"`
	// The bank accounts' account number
	AccountNumber *string `json:"AccountNumber,omitempty"`
	// The bank accounts' branch name
	BranchName *string `json:"BranchName,omitempty"`
	// The bank accounts' reference
	Reference *string `json:"Reference,omitempty"`
	// The bank accounts' sort code
	SortCode *string `json:"SortCode,omitempty"`
}

// EmployeeEmployeeEmployeePartner - The employees' employee partner
type EmployeeEmployeeEmployeePartner struct {
	// The employee partners' first name
	FirstName *string `json:"FirstName,omitempty"`
	// The employee partners' initials
	Initials *string `json:"Initials,omitempty"`
	// The employee partners' last name
	LastName *string `json:"LastName,omitempty"`
	// The employee partners' middle name
	MiddleName *string `json:"MiddleName,omitempty"`
	// The employee partners' ni number
	NiNumber *string `json:"NiNumber,omitempty"`
}

// EmployeeEmployeeGenderEnum - The employees' gender
type EmployeeEmployeeGenderEnum string

const (
	EmployeeEmployeeGenderEnumUnknown EmployeeEmployeeGenderEnum = "Unknown"
	EmployeeEmployeeGenderEnumMale    EmployeeEmployeeGenderEnum = "Male"
	EmployeeEmployeeGenderEnumFemale  EmployeeEmployeeGenderEnum = "Female"
)

func (e EmployeeEmployeeGenderEnum) ToPointer() *EmployeeEmployeeGenderEnum {
	return &e
}

func (e *EmployeeEmployeeGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unknown":
		fallthrough
	case "Male":
		fallthrough
	case "Female":
		*e = EmployeeEmployeeGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeGenderEnum: %v", v)
	}
}

// EmployeeEmployeeLeaverReasonEnum - The employees' leaver reason
type EmployeeEmployeeLeaverReasonEnum string

const (
	EmployeeEmployeeLeaverReasonEnumResigned     EmployeeEmployeeLeaverReasonEnum = "Resigned"
	EmployeeEmployeeLeaverReasonEnumDismissed    EmployeeEmployeeLeaverReasonEnum = "Dismissed"
	EmployeeEmployeeLeaverReasonEnumRedundant    EmployeeEmployeeLeaverReasonEnum = "Redundant"
	EmployeeEmployeeLeaverReasonEnumRetired      EmployeeEmployeeLeaverReasonEnum = "Retired"
	EmployeeEmployeeLeaverReasonEnumDeceased     EmployeeEmployeeLeaverReasonEnum = "Deceased"
	EmployeeEmployeeLeaverReasonEnumLegalCustody EmployeeEmployeeLeaverReasonEnum = "LegalCustody"
	EmployeeEmployeeLeaverReasonEnumOther        EmployeeEmployeeLeaverReasonEnum = "Other"
)

func (e EmployeeEmployeeLeaverReasonEnum) ToPointer() *EmployeeEmployeeLeaverReasonEnum {
	return &e
}

func (e *EmployeeEmployeeLeaverReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Resigned":
		fallthrough
	case "Dismissed":
		fallthrough
	case "Redundant":
		fallthrough
	case "Retired":
		fallthrough
	case "Deceased":
		fallthrough
	case "LegalCustody":
		fallthrough
	case "Other":
		*e = EmployeeEmployeeLeaverReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeLeaverReasonEnum: %v", v)
	}
}

// EmployeeEmployeeMaritalStatusEnum - The employees' marital status
type EmployeeEmployeeMaritalStatusEnum string

const (
	EmployeeEmployeeMaritalStatusEnumNotSet   EmployeeEmployeeMaritalStatusEnum = "NotSet"
	EmployeeEmployeeMaritalStatusEnumSingle   EmployeeEmployeeMaritalStatusEnum = "Single"
	EmployeeEmployeeMaritalStatusEnumMarried  EmployeeEmployeeMaritalStatusEnum = "Married"
	EmployeeEmployeeMaritalStatusEnumDivorced EmployeeEmployeeMaritalStatusEnum = "Divorced"
	EmployeeEmployeeMaritalStatusEnumWidowed  EmployeeEmployeeMaritalStatusEnum = "Widowed"
)

func (e EmployeeEmployeeMaritalStatusEnum) ToPointer() *EmployeeEmployeeMaritalStatusEnum {
	return &e
}

func (e *EmployeeEmployeeMaritalStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NotSet":
		fallthrough
	case "Single":
		fallthrough
	case "Married":
		fallthrough
	case "Divorced":
		fallthrough
	case "Widowed":
		*e = EmployeeEmployeeMaritalStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeMaritalStatusEnum: %v", v)
	}
}

// EmployeeEmployeeNicLiabilityEnum - The employees' nic liability
type EmployeeEmployeeNicLiabilityEnum string

const (
	EmployeeEmployeeNicLiabilityEnumHasOtherJob                   EmployeeEmployeeNicLiabilityEnum = "HasOtherJob"
	EmployeeEmployeeNicLiabilityEnumIsFemaleEntitledToReducedRate EmployeeEmployeeNicLiabilityEnum = "IsFemaleEntitledToReducedRate"
	EmployeeEmployeeNicLiabilityEnumIsNotLiable                   EmployeeEmployeeNicLiabilityEnum = "IsNotLiable"
	EmployeeEmployeeNicLiabilityEnumIsContractedOut               EmployeeEmployeeNicLiabilityEnum = "IsContractedOut"
	EmployeeEmployeeNicLiabilityEnumIsFullyLiable                 EmployeeEmployeeNicLiabilityEnum = "IsFullyLiable"
	EmployeeEmployeeNicLiabilityEnumIsApprentice                  EmployeeEmployeeNicLiabilityEnum = "IsApprentice"
	EmployeeEmployeeNicLiabilityEnumLeaverBeyond6Weeks            EmployeeEmployeeNicLiabilityEnum = "LeaverBeyond6Weeks"
	EmployeeEmployeeNicLiabilityEnumPaymentAfterLeavingIrregular  EmployeeEmployeeNicLiabilityEnum = "PaymentAfterLeavingIrregular"
	EmployeeEmployeeNicLiabilityEnumIsFreePortWorker              EmployeeEmployeeNicLiabilityEnum = "IsFreePortWorker"
	EmployeeEmployeeNicLiabilityEnumIsNotLiableForEmployerNi      EmployeeEmployeeNicLiabilityEnum = "IsNotLiableForEmployerNi"
)

func (e EmployeeEmployeeNicLiabilityEnum) ToPointer() *EmployeeEmployeeNicLiabilityEnum {
	return &e
}

func (e *EmployeeEmployeeNicLiabilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HasOtherJob":
		fallthrough
	case "IsFemaleEntitledToReducedRate":
		fallthrough
	case "IsNotLiable":
		fallthrough
	case "IsContractedOut":
		fallthrough
	case "IsFullyLiable":
		fallthrough
	case "IsApprentice":
		fallthrough
	case "LeaverBeyond6Weeks":
		fallthrough
	case "PaymentAfterLeavingIrregular":
		fallthrough
	case "IsFreePortWorker":
		fallthrough
	case "IsNotLiableForEmployerNi":
		*e = EmployeeEmployeeNicLiabilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeNicLiabilityEnum: %v", v)
	}
}

// EmployeeEmployeePaySchedule - The employees' pay schedule
type EmployeeEmployeePaySchedule struct {
	// The links' href
	AtHref *string `json:"@href,omitempty"`
	// The links' target type
	AtRel *string `json:"@rel,omitempty"`
	// The links' title
	AtTitle *string `json:"@title,omitempty"`
}

// EmployeeEmployeePaymentMethodEnum - The employees' payment method
type EmployeeEmployeePaymentMethodEnum string

const (
	EmployeeEmployeePaymentMethodEnumNotSet         EmployeeEmployeePaymentMethodEnum = "NotSet"
	EmployeeEmployeePaymentMethodEnumCash           EmployeeEmployeePaymentMethodEnum = "Cash"
	EmployeeEmployeePaymentMethodEnumCheque         EmployeeEmployeePaymentMethodEnum = "Cheque"
	EmployeeEmployeePaymentMethodEnumBacs           EmployeeEmployeePaymentMethodEnum = "BACS"
	EmployeeEmployeePaymentMethodEnumFasterPayments EmployeeEmployeePaymentMethodEnum = "FasterPayments"
	EmployeeEmployeePaymentMethodEnumOther          EmployeeEmployeePaymentMethodEnum = "Other"
)

func (e EmployeeEmployeePaymentMethodEnum) ToPointer() *EmployeeEmployeePaymentMethodEnum {
	return &e
}

func (e *EmployeeEmployeePaymentMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NotSet":
		fallthrough
	case "Cash":
		fallthrough
	case "Cheque":
		fallthrough
	case "BACS":
		fallthrough
	case "FasterPayments":
		fallthrough
	case "Other":
		*e = EmployeeEmployeePaymentMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeePaymentMethodEnum: %v", v)
	}
}

// EmployeeEmployeeRegionEnum - The employees' region
type EmployeeEmployeeRegionEnum string

const (
	EmployeeEmployeeRegionEnumNotSet   EmployeeEmployeeRegionEnum = "NotSet"
	EmployeeEmployeeRegionEnumEngland  EmployeeEmployeeRegionEnum = "England"
	EmployeeEmployeeRegionEnumScotland EmployeeEmployeeRegionEnum = "Scotland"
	EmployeeEmployeeRegionEnumWales    EmployeeEmployeeRegionEnum = "Wales"
)

func (e EmployeeEmployeeRegionEnum) ToPointer() *EmployeeEmployeeRegionEnum {
	return &e
}

func (e *EmployeeEmployeeRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NotSet":
		fallthrough
	case "England":
		fallthrough
	case "Scotland":
		fallthrough
	case "Wales":
		*e = EmployeeEmployeeRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeRegionEnum: %v", v)
	}
}

// EmployeeEmployeeRuleExclusionsEnum - The employees' rule exclusions
type EmployeeEmployeeRuleExclusionsEnum string

const (
	EmployeeEmployeeRuleExclusionsEnumNone                                  EmployeeEmployeeRuleExclusionsEnum = "None"
	EmployeeEmployeeRuleExclusionsEnumNiMissingPayInstructionRule           EmployeeEmployeeRuleExclusionsEnum = "NiMissingPayInstructionRule"
	EmployeeEmployeeRuleExclusionsEnumTaxMissingPayInstructionRule          EmployeeEmployeeRuleExclusionsEnum = "TaxMissingPayInstructionRule"
	EmployeeEmployeeRuleExclusionsEnumTaxCodeUpliftRule                     EmployeeEmployeeRuleExclusionsEnum = "TaxCodeUpliftRule"
	EmployeeEmployeeRuleExclusionsEnumNiSetExpectedLetterRule               EmployeeEmployeeRuleExclusionsEnum = "NiSetExpectedLetterRule"
	EmployeeEmployeeRuleExclusionsEnumNiDateOfBirthChangeRetrospectiveCRule EmployeeEmployeeRuleExclusionsEnum = "NiDateOfBirthChangeRetrospectiveCRule"
	EmployeeEmployeeRuleExclusionsEnumNiDefermentStatusChangeRule           EmployeeEmployeeRuleExclusionsEnum = "NiDefermentStatusChangeRule"
	EmployeeEmployeeRuleExclusionsEnumNiEndContractedOutTransferRule        EmployeeEmployeeRuleExclusionsEnum = "NiEndContractedOutTransferRule"
	EmployeeEmployeeRuleExclusionsEnumPaymentAfterLeavingTaxCodeRule        EmployeeEmployeeRuleExclusionsEnum = "PaymentAfterLeavingTaxCodeRule"
	EmployeeEmployeeRuleExclusionsEnumLeaverEndInstructionsRule             EmployeeEmployeeRuleExclusionsEnum = "LeaverEndInstructionsRule"
	EmployeeEmployeeRuleExclusionsEnumP45StudentLoanInstructionRule         EmployeeEmployeeRuleExclusionsEnum = "P45StudentLoanInstructionRule"
	EmployeeEmployeeRuleExclusionsEnumP45TaxInstructionRule                 EmployeeEmployeeRuleExclusionsEnum = "P45TaxInstructionRule"
	EmployeeEmployeeRuleExclusionsEnumP45YtdTaxRule                         EmployeeEmployeeRuleExclusionsEnum = "P45YtdTaxRule"
	EmployeeEmployeeRuleExclusionsEnumYtdInstructionRule                    EmployeeEmployeeRuleExclusionsEnum = "YtdInstructionRule"
	EmployeeEmployeeRuleExclusionsEnumTaxCodeRegionChangeRule               EmployeeEmployeeRuleExclusionsEnum = "TaxCodeRegionChangeRule"
	EmployeeEmployeeRuleExclusionsEnumAutoEnrolmentStatusChangeRule         EmployeeEmployeeRuleExclusionsEnum = "AutoEnrolmentStatusChangeRule"
	EmployeeEmployeeRuleExclusionsEnumEmployeeDeceasedRule                  EmployeeEmployeeRuleExclusionsEnum = "EmployeeDeceasedRule"
	EmployeeEmployeeRuleExclusionsEnumBenefitInstructionAutoEndRule         EmployeeEmployeeRuleExclusionsEnum = "BenefitInstructionAutoEndRule"
)

func (e EmployeeEmployeeRuleExclusionsEnum) ToPointer() *EmployeeEmployeeRuleExclusionsEnum {
	return &e
}

func (e *EmployeeEmployeeRuleExclusionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "NiMissingPayInstructionRule":
		fallthrough
	case "TaxMissingPayInstructionRule":
		fallthrough
	case "TaxCodeUpliftRule":
		fallthrough
	case "NiSetExpectedLetterRule":
		fallthrough
	case "NiDateOfBirthChangeRetrospectiveCRule":
		fallthrough
	case "NiDefermentStatusChangeRule":
		fallthrough
	case "NiEndContractedOutTransferRule":
		fallthrough
	case "PaymentAfterLeavingTaxCodeRule":
		fallthrough
	case "LeaverEndInstructionsRule":
		fallthrough
	case "P45StudentLoanInstructionRule":
		fallthrough
	case "P45TaxInstructionRule":
		fallthrough
	case "P45YtdTaxRule":
		fallthrough
	case "YtdInstructionRule":
		fallthrough
	case "TaxCodeRegionChangeRule":
		fallthrough
	case "AutoEnrolmentStatusChangeRule":
		fallthrough
	case "EmployeeDeceasedRule":
		fallthrough
	case "BenefitInstructionAutoEndRule":
		*e = EmployeeEmployeeRuleExclusionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeRuleExclusionsEnum: %v", v)
	}
}

// EmployeeEmployeeSecondedEnum - The employees' seconded
type EmployeeEmployeeSecondedEnum string

const (
	EmployeeEmployeeSecondedEnumNotSet              EmployeeEmployeeSecondedEnum = "NotSet"
	EmployeeEmployeeSecondedEnumStay183DaysOrMore   EmployeeEmployeeSecondedEnum = "Stay183DaysOrMore"
	EmployeeEmployeeSecondedEnumStayLessThan183Days EmployeeEmployeeSecondedEnum = "StayLessThan183Days"
	EmployeeEmployeeSecondedEnumInOutUk             EmployeeEmployeeSecondedEnum = "InOutUk"
)

func (e EmployeeEmployeeSecondedEnum) ToPointer() *EmployeeEmployeeSecondedEnum {
	return &e
}

func (e *EmployeeEmployeeSecondedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NotSet":
		fallthrough
	case "Stay183DaysOrMore":
		fallthrough
	case "StayLessThan183Days":
		fallthrough
	case "InOutUk":
		*e = EmployeeEmployeeSecondedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeSecondedEnum: %v", v)
	}
}

// EmployeeEmployeeStarterDeclarationEnum - The employees' starter declaration
type EmployeeEmployeeStarterDeclarationEnum string

const (
	EmployeeEmployeeStarterDeclarationEnumPreviouslyReported EmployeeEmployeeStarterDeclarationEnum = "PreviouslyReported"
	EmployeeEmployeeStarterDeclarationEnumA                  EmployeeEmployeeStarterDeclarationEnum = "A"
	EmployeeEmployeeStarterDeclarationEnumB                  EmployeeEmployeeStarterDeclarationEnum = "B"
	EmployeeEmployeeStarterDeclarationEnumC                  EmployeeEmployeeStarterDeclarationEnum = "C"
)

func (e EmployeeEmployeeStarterDeclarationEnum) ToPointer() *EmployeeEmployeeStarterDeclarationEnum {
	return &e
}

func (e *EmployeeEmployeeStarterDeclarationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PreviouslyReported":
		fallthrough
	case "A":
		fallthrough
	case "B":
		fallthrough
	case "C":
		*e = EmployeeEmployeeStarterDeclarationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeStarterDeclarationEnum: %v", v)
	}
}

// EmployeeEmployeeTerritoryEnum - The employees' territory
type EmployeeEmployeeTerritoryEnum string

const (
	EmployeeEmployeeTerritoryEnumUnitedKingdom EmployeeEmployeeTerritoryEnum = "UnitedKingdom"
)

func (e EmployeeEmployeeTerritoryEnum) ToPointer() *EmployeeEmployeeTerritoryEnum {
	return &e
}

func (e *EmployeeEmployeeTerritoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UnitedKingdom":
		*e = EmployeeEmployeeTerritoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeTerritoryEnum: %v", v)
	}
}

// EmployeeEmployeeWorkingWeekEnum - The employees' working week
type EmployeeEmployeeWorkingWeekEnum string

const (
	EmployeeEmployeeWorkingWeekEnumNone        EmployeeEmployeeWorkingWeekEnum = "None"
	EmployeeEmployeeWorkingWeekEnumMonday      EmployeeEmployeeWorkingWeekEnum = "Monday"
	EmployeeEmployeeWorkingWeekEnumTuesday     EmployeeEmployeeWorkingWeekEnum = "Tuesday"
	EmployeeEmployeeWorkingWeekEnumWednesday   EmployeeEmployeeWorkingWeekEnum = "Wednesday"
	EmployeeEmployeeWorkingWeekEnumThursday    EmployeeEmployeeWorkingWeekEnum = "Thursday"
	EmployeeEmployeeWorkingWeekEnumFriday      EmployeeEmployeeWorkingWeekEnum = "Friday"
	EmployeeEmployeeWorkingWeekEnumAllWeekDays EmployeeEmployeeWorkingWeekEnum = "AllWeekDays"
	EmployeeEmployeeWorkingWeekEnumSaturday    EmployeeEmployeeWorkingWeekEnum = "Saturday"
	EmployeeEmployeeWorkingWeekEnumSunday      EmployeeEmployeeWorkingWeekEnum = "Sunday"
	EmployeeEmployeeWorkingWeekEnumAllDays     EmployeeEmployeeWorkingWeekEnum = "AllDays"
)

func (e EmployeeEmployeeWorkingWeekEnum) ToPointer() *EmployeeEmployeeWorkingWeekEnum {
	return &e
}

func (e *EmployeeEmployeeWorkingWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Monday":
		fallthrough
	case "Tuesday":
		fallthrough
	case "Wednesday":
		fallthrough
	case "Thursday":
		fallthrough
	case "Friday":
		fallthrough
	case "AllWeekDays":
		fallthrough
	case "Saturday":
		fallthrough
	case "Sunday":
		fallthrough
	case "AllDays":
		*e = EmployeeEmployeeWorkingWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmployeeWorkingWeekEnum: %v", v)
	}
}

type EmployeeEmployee struct {
	// The employees' a e assessment override
	AEAssessmentOverride *EmployeeEmployeeAEAssessmentOverrideEnum `json:"AEAssessmentOverride,omitempty"`
	// The employees' a e assessment override date
	AEAssessmentOverrideDate *types.Date `json:"AEAssessmentOverrideDate,omitempty"`
	// The employees' a e exclusion reason code
	AEExclusionReasonCode *EmployeeEmployeeAEExclusionReasonCodeEnum `json:"AEExclusionReasonCode,omitempty"`
	// The employees' a e postponement date
	AEPostponementDate *types.Date `json:"AEPostponementDate,omitempty"`
	// The employees' address
	Address *EmployeeEmployeeAddress `json:"Address,omitempty"`
	// The employees' bank account
	BankAccount *EmployeeEmployeeBankAccount `json:"BankAccount,omitempty"`
	// The employees' code
	Code *string `json:"Code,omitempty"`
	// The employees' date of birth
	DateOfBirth *types.Date `json:"DateOfBirth,omitempty"`
	// The employees' deactivated
	Deactivated *bool `json:"Deactivated,omitempty"`
	// The employees' directorship appointment date
	DirectorshipAppointmentDate *types.Date `json:"DirectorshipAppointmentDate,omitempty"`
	// The employees' e e a citizen
	EEACitizen *bool `json:"EEACitizen,omitempty"`
	// The employees' e p m6
	Epm6 *bool `json:"EPM6,omitempty"`
	// The employees' effective date
	EffectiveDate *types.Date `json:"EffectiveDate,omitempty"`
	// The employees' employee partner
	EmployeePartner *EmployeeEmployeeEmployeePartner `json:"EmployeePartner,omitempty"`
	// The employees' the first name
	FirstName *string `json:"FirstName,omitempty"`
	// The employees' gender
	Gender *EmployeeEmployeeGenderEnum `json:"Gender,omitempty"`
	// The employees' hours per week
	HoursPerWeek *float64 `json:"HoursPerWeek,omitempty"`
	// The employees' initials
	Initials *string `json:"Initials,omitempty"`
	// The employees' irregular employment
	IrregularEmployment *bool `json:"IrregularEmployment,omitempty"`
	// The employees' is agency worker
	IsAgencyWorker *bool `json:"IsAgencyWorker,omitempty"`
	// The employees' last name
	LastName *string `json:"LastName,omitempty"`
	// The employees' leaver reason
	LeaverReason *EmployeeEmployeeLeaverReasonEnum `json:"LeaverReason,omitempty"`
	// The employees' leaving date
	LeavingDate *types.Date `json:"LeavingDate,omitempty"`
	// The employees' marital status
	MaritalStatus *EmployeeEmployeeMaritalStatusEnum `json:"MaritalStatus,omitempty"`
	// The employees' meta data
	MetaData map[string]interface{} `json:"MetaData,omitempty"`
	// The employees' middle name
	MiddleName *string `json:"MiddleName,omitempty"`
	// The employees' next revision date
	NextRevisionDate *types.Date `json:"NextRevisionDate,omitempty"`
	// The employees' ni number
	NiNumber *string `json:"NiNumber,omitempty"`
	// The employees' nic liability
	NicLiability *EmployeeEmployeeNicLiabilityEnum `json:"NicLiability,omitempty"`
	// The employees' off payroll worker
	OffPayrollWorker *bool `json:"OffPayrollWorker,omitempty"`
	// The employees' on strike
	OnStrike *bool `json:"OnStrike,omitempty"`
	// The employees' p45 issued date
	P45IssuedDate *types.Date `json:"P45IssuedDate,omitempty"`
	// The employees' passport number
	PassportNumber *string `json:"PassportNumber,omitempty"`
	// The employees' pay schedule
	PaySchedule *EmployeeEmployeePaySchedule `json:"PaySchedule,omitempty"`
	// The employees' payment method
	PaymentMethod *EmployeeEmployeePaymentMethodEnum `json:"PaymentMethod,omitempty"`
	// The employees' payment to a non individual
	PaymentToANonIndividual *bool `json:"PaymentToANonIndividual,omitempty"`
	// The employees' region
	Region *EmployeeEmployeeRegionEnum `json:"Region,omitempty"`
	// The employees' revision
	Revision *int `json:"Revision,omitempty"`
	// The employees' rule exclusions
	RuleExclusions *EmployeeEmployeeRuleExclusionsEnum `json:"RuleExclusions,omitempty"`
	// The employees' seconded
	Seconded *EmployeeEmployeeSecondedEnum `json:"Seconded,omitempty"`
	// The employees' start date
	StartDate *types.Date `json:"StartDate,omitempty"`
	// The employees' starter declaration
	StarterDeclaration *EmployeeEmployeeStarterDeclarationEnum `json:"StarterDeclaration,omitempty"`
	// The employees' territory
	Territory *EmployeeEmployeeTerritoryEnum `json:"Territory,omitempty"`
	// The employees' title
	Title *string `json:"Title,omitempty"`
	// The employees' veteran period start date
	VeteranPeriodStartDate *types.Date `json:"VeteranPeriodStartDate,omitempty"`
	// The employees' working week
	WorkingWeek *EmployeeEmployeeWorkingWeekEnum `json:"WorkingWeek,omitempty"`
}

// Employee - The employee object.
type Employee struct {
	Employee *EmployeeEmployee `json:"Employee,omitempty"`
}
