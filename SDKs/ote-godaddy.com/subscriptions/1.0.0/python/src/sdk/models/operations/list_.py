"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import errorlimit as shared_errorlimit
from ..shared import subscriptionlist as shared_subscriptionlist
from enum import Enum
from typing import Optional

class ListIncludesEnum(str, Enum):
    r"""Optional details to be included in the response"""
    ADDONS = 'addons'
    RELATIONS = 'relations'

class ListSortEnum(str, Enum):
    r"""Property name that will be used to sort results. \\"-\\" indicates descending"""
    EXPIRES_AT = 'expiresAt'
    MINUS_EXPIRES_AT = '-expiresAt'


@dataclasses.dataclass
class ListRequest:
    
    includes: Optional[ListIncludesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includes', 'style': 'form', 'explode': False }})
    r"""Optional details to be included in the response"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of Subscriptions to retrieve in this page, starting after offset"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit)"""  
    product_group_keys: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productGroupKeys', 'style': 'form', 'explode': False }})
    r"""Only return Subscriptions with the specified product groups"""  
    sort: Optional[ListSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Property name that will be used to sort results. \\"-\\" indicates descending"""  
    x_market_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Market-Id', 'style': 'simple', 'explode': False }})
    r"""The market that the response should be formatted for"""  
    x_shopper_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Shopper-Id', 'style': 'simple', 'explode': False }})
    r"""Shopper ID to return subscriptions for when not using JWT"""  
    

@dataclasses.dataclass
class ListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Request was malformed"""  
    error_limit: Optional[shared_errorlimit.ErrorLimit] = dataclasses.field(default=None)
    r"""Too many requests received within interval"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    subscription_list: Optional[shared_subscriptionlist.SubscriptionList] = dataclasses.field(default=None)
    r"""Request was successful"""  
    