// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// ReposListForAuthenticatedUserDirectionEnum - Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
type ReposListForAuthenticatedUserDirectionEnum string

const (
	ReposListForAuthenticatedUserDirectionEnumAsc  ReposListForAuthenticatedUserDirectionEnum = "asc"
	ReposListForAuthenticatedUserDirectionEnumDesc ReposListForAuthenticatedUserDirectionEnum = "desc"
)

func (e ReposListForAuthenticatedUserDirectionEnum) ToPointer() *ReposListForAuthenticatedUserDirectionEnum {
	return &e
}

func (e *ReposListForAuthenticatedUserDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ReposListForAuthenticatedUserDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForAuthenticatedUserDirectionEnum: %v", v)
	}
}

// ReposListForAuthenticatedUserSortEnum - Can be one of `created`, `updated`, `pushed`, `full_name`.
type ReposListForAuthenticatedUserSortEnum string

const (
	ReposListForAuthenticatedUserSortEnumCreated  ReposListForAuthenticatedUserSortEnum = "created"
	ReposListForAuthenticatedUserSortEnumUpdated  ReposListForAuthenticatedUserSortEnum = "updated"
	ReposListForAuthenticatedUserSortEnumPushed   ReposListForAuthenticatedUserSortEnum = "pushed"
	ReposListForAuthenticatedUserSortEnumFullName ReposListForAuthenticatedUserSortEnum = "full_name"
)

func (e ReposListForAuthenticatedUserSortEnum) ToPointer() *ReposListForAuthenticatedUserSortEnum {
	return &e
}

func (e *ReposListForAuthenticatedUserSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "updated":
		fallthrough
	case "pushed":
		fallthrough
	case "full_name":
		*e = ReposListForAuthenticatedUserSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForAuthenticatedUserSortEnum: %v", v)
	}
}

// ReposListForAuthenticatedUserTypeEnum - Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
//
// Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
type ReposListForAuthenticatedUserTypeEnum string

const (
	ReposListForAuthenticatedUserTypeEnumAll     ReposListForAuthenticatedUserTypeEnum = "all"
	ReposListForAuthenticatedUserTypeEnumOwner   ReposListForAuthenticatedUserTypeEnum = "owner"
	ReposListForAuthenticatedUserTypeEnumPublic  ReposListForAuthenticatedUserTypeEnum = "public"
	ReposListForAuthenticatedUserTypeEnumPrivate ReposListForAuthenticatedUserTypeEnum = "private"
	ReposListForAuthenticatedUserTypeEnumMember  ReposListForAuthenticatedUserTypeEnum = "member"
)

func (e ReposListForAuthenticatedUserTypeEnum) ToPointer() *ReposListForAuthenticatedUserTypeEnum {
	return &e
}

func (e *ReposListForAuthenticatedUserTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "owner":
		fallthrough
	case "public":
		fallthrough
	case "private":
		fallthrough
	case "member":
		*e = ReposListForAuthenticatedUserTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForAuthenticatedUserTypeEnum: %v", v)
	}
}

// ReposListForAuthenticatedUserVisibilityEnum - Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
type ReposListForAuthenticatedUserVisibilityEnum string

const (
	ReposListForAuthenticatedUserVisibilityEnumAll     ReposListForAuthenticatedUserVisibilityEnum = "all"
	ReposListForAuthenticatedUserVisibilityEnumPublic  ReposListForAuthenticatedUserVisibilityEnum = "public"
	ReposListForAuthenticatedUserVisibilityEnumPrivate ReposListForAuthenticatedUserVisibilityEnum = "private"
)

func (e ReposListForAuthenticatedUserVisibilityEnum) ToPointer() *ReposListForAuthenticatedUserVisibilityEnum {
	return &e
}

func (e *ReposListForAuthenticatedUserVisibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "public":
		fallthrough
	case "private":
		*e = ReposListForAuthenticatedUserVisibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForAuthenticatedUserVisibilityEnum: %v", v)
	}
}

type ReposListForAuthenticatedUserRequest struct {
	// Comma-separated list of values. Can include:
	// \* `owner`: Repositories that are owned by the authenticated user.
	// \* `collaborator`: Repositories that the user has been added to as a collaborator.
	// \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
	Affiliation *string `queryParam:"style=form,explode=true,name=affiliation"`
	// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before *time.Time `queryParam:"style=form,explode=true,name=before"`
	// Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
	Direction *ReposListForAuthenticatedUserDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *time.Time `queryParam:"style=form,explode=true,name=since"`
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort *ReposListForAuthenticatedUserSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
	//
	// Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
	Type *ReposListForAuthenticatedUserTypeEnum `queryParam:"style=form,explode=true,name=type"`
	// Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
	Visibility *ReposListForAuthenticatedUserVisibilityEnum `queryParam:"style=form,explode=true,name=visibility"`
}

type ReposListForAuthenticatedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	Repositories []shared.Repository
	// Validation failed
	ValidationError *shared.ValidationError
}
