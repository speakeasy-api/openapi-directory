/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PostAuthJwtRequestBody extends SpeakeasyBase {
  /**
   * id of the client
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=client_id" })
  clientId?: string;

  /**
   * secret for the client
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=client_secret" })
  clientSecret?: string;

  /**
   * if set to True, the token will expire n minutes after its creation, n being the value of configuration key auth.default_token_expire (default: True)
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=expire" })
  expire?: boolean;

  /**
   * user for whom the token has to be generated. If not supplied, a user will be created
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=id_user" })
  idUser?: number;

  /**
   * scope requested for the token
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=scope" })
  scope?: string;
}

export class PostAuthJwt200ApplicationJSON extends SpeakeasyBase {
  /**
   * the jwt token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jwt_token" })
  jwtToken: string;

  /**
   * the payload contained in the jwt token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payload" })
  payload: Record<string, any>;
}

export class PostAuthJwtResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  @SpeakeasyMetadata()
  postAuthJwt200ApplicationJSONObject?: PostAuthJwt200ApplicationJSON;
}
