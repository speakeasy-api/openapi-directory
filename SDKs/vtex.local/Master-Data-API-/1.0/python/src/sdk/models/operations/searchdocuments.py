"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class SearchdocumentsRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    data_entity_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'dataEntityName', 'style': 'simple', 'explode': False }})
    r"""Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."""  
    rest_range: str = dataclasses.field(metadata={'header': { 'field_name': 'REST-Range', 'style': 'simple', 'explode': False }})
    r"""Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_fields', 'style': 'form', 'explode': True }})
    r"""Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields."""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_keyword', 'style': 'form', 'explode': True }})
    r"""String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword=\\"Maria\\"`."""  
    schema: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_schema', 'style': 'form', 'explode': True }})
    r"""Name of the schema the document to be created needs to be compliant with."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_sort', 'style': 'form', 'explode': True }})
    r"""Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending."""  
    where: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_where', 'style': 'form', 'explode': True }})
    r"""Filter specification."""  
    

@dataclasses.dataclass
class SearchdocumentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    searchdocuments_503_application_json_any: Optional[Any] = dataclasses.field(default=None)
    r"""Service Unavailable"""  
    