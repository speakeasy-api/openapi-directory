/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * Transactions - Transaction details.
 */
public class Transactions {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public java.util.Map<String, HrefType> links;

    public Transactions withLinks(java.util.Map<String, HrefType> links) {
        this.links = links;
        return this;
    }
    
    /**
     * Might be used by the ASPSP to transport additional transaction related information to the PSU
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalInformation")
    public String additionalInformation;

    public Transactions withAdditionalInformation(String additionalInformation) {
        this.additionalInformation = additionalInformation;
        return this;
    }
    
    /**
     * Is used if and only if the bookingStatus entry equals "information". 
     * Every active standing order related to the dedicated payment account result into one entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalInformationStructured")
    public AdditionalInformationStructured additionalInformationStructured;

    public Transactions withAdditionalInformationStructured(AdditionalInformationStructured additionalInformationStructured) {
        this.additionalInformationStructured = additionalInformationStructured;
        return this;
    }
    
    /**
     * A single balance element.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceAfterTransaction")
    public Balance balanceAfterTransaction;

    public Transactions withBalanceAfterTransaction(Balance balanceAfterTransaction) {
        this.balanceAfterTransaction = balanceAfterTransaction;
        return this;
    }
    
    /**
     * Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.
     * 
     * This code type is concatenating the three ISO20022 Codes
     *   * Domain Code,
     *   * Family Code, and
     *   * SubFamiliy Code
     * by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankTransactionCode")
    public String bankTransactionCode;

    public Transactions withBankTransactionCode(String bankTransactionCode) {
        this.bankTransactionCode = bankTransactionCode;
        return this;
    }
    
    /**
     * If this indicator equals true, then the related entry is a batch entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchIndicator")
    public Boolean batchIndicator;

    public Transactions withBatchIndicator(Boolean batchIndicator) {
        this.batchIndicator = batchIndicator;
        return this;
    }
    
    /**
     * Shall be used if and only if the batchIndicator is contained and equals true.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchNumberOfTransactions")
    public Long batchNumberOfTransactions;

    public Transactions withBatchNumberOfTransactions(Long batchNumberOfTransactions) {
        this.batchNumberOfTransactions = batchNumberOfTransactions;
        return this;
    }
    
    /**
     * The date when an entry is posted to an account on the ASPSPs books.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("bookingDate")
    public LocalDate bookingDate;

    public Transactions withBookingDate(LocalDate bookingDate) {
        this.bookingDate = bookingDate;
        return this;
    }
    
    /**
     * Identification of a Cheque.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkId")
    public String checkId;

    public Transactions withCheckId(String checkId) {
        this.checkId = checkId;
        return this;
    }
    
    /**
     * Reference to an account by either
     *   * IBAN, of a payment accounts, or
     *   * otherAccountIdentification, for payment accounts if there is no IBAN
     * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditorAccount")
    public AccountReference16CH creditorAccount;

    public Transactions withCreditorAccount(AccountReference16CH creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    /**
     * BICFI
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditorAgent")
    public String creditorAgent;

    public Transactions withCreditorAgent(String creditorAgent) {
        this.creditorAgent = creditorAgent;
        return this;
    }
    
    /**
     * Identification of Creditors, e.g. a SEPA Creditor ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditorId")
    public String creditorId;

    public Transactions withCreditorId(String creditorId) {
        this.creditorId = creditorId;
        return this;
    }
    
    /**
     * Creditor name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditorName")
    public String creditorName;

    public Transactions withCreditorName(String creditorName) {
        this.creditorName = creditorName;
        return this;
    }
    
    /**
     * Array of exchange rates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyExchange")
    public ReportExchangeRate[] currencyExchange;

    public Transactions withCurrencyExchange(ReportExchangeRate[] currencyExchange) {
        this.currencyExchange = currencyExchange;
        return this;
    }
    
    /**
     * Reference to an account by either
     *   * IBAN, of a payment accounts, or
     *   * otherAccountIdentification, for payment accounts if there is no IBAN
     * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debtorAccount")
    public AccountReference16CH debtorAccount;

    public Transactions withDebtorAccount(AccountReference16CH debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * BICFI
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debtorAgent")
    public String debtorAgent;

    public Transactions withDebtorAgent(String debtorAgent) {
        this.debtorAgent = debtorAgent;
        return this;
    }
    
    /**
     * Debtor name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debtorName")
    public String debtorName;

    public Transactions withDebtorName(String debtorName) {
        this.debtorName = debtorName;
        return this;
    }
    
    /**
     * Unique end to end identity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endToEndId")
    public String endToEndId;

    public Transactions withEndToEndId(String endToEndId) {
        this.endToEndId = endToEndId;
        return this;
    }
    
    /**
     * Might be used by the ASPSP to transport details about transactions within a batch.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entryDetails")
    public EntryDetailsElement[] entryDetails;

    public Transactions withEntryDetails(EntryDetailsElement[] entryDetails) {
        this.entryDetails = entryDetails;
        return this;
    }
    
    /**
     * Is the identification of the transaction as used e.g. for reference for deltafunction on application level.
     * The same identification as for example used within camt.05x messages.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entryReference")
    public String entryReference;

    public Transactions withEntryReference(String entryReference) {
        this.entryReference = entryReference;
        return this;
    }
    
    /**
     * Identification of Mandates, e.g. a SEPA Mandate ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    public String mandateId;

    public Transactions withMandateId(String mandateId) {
        this.mandateId = mandateId;
        return this;
    }
    
    /**
     * Proprietary bank transaction code as used within a community or within an ASPSP e.g.
     * for MT94x based transaction reports.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proprietaryBankTransactionCode")
    public String proprietaryBankTransactionCode;

    public Transactions withProprietaryBankTransactionCode(String proprietaryBankTransactionCode) {
        this.proprietaryBankTransactionCode = proprietaryBankTransactionCode;
        return this;
    }
    
    /**
     * ExternalPurpose1Code from ISO 20022.
     * 
     * Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purposeCode")
    public PurposeCodeEnum purposeCode;

    public Transactions withPurposeCode(PurposeCodeEnum purposeCode) {
        this.purposeCode = purposeCode;
        return this;
    }
    
    /**
     * Structured remittance information Max
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remittanceInformationStructured")
    public String remittanceInformationStructured;

    public Transactions withRemittanceInformationStructured(String remittanceInformationStructured) {
        this.remittanceInformationStructured = remittanceInformationStructured;
        return this;
    }
    
    /**
     * Array of structured remittance information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remittanceInformationStructuredArray")
    public RemittanceInformationStructured[] remittanceInformationStructuredArray;

    public Transactions withRemittanceInformationStructuredArray(RemittanceInformationStructured[] remittanceInformationStructuredArray) {
        this.remittanceInformationStructuredArray = remittanceInformationStructuredArray;
        return this;
    }
    
    /**
     * Unstructured remittance information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remittanceInformationUnstructured")
    public String remittanceInformationUnstructured;

    public Transactions withRemittanceInformationUnstructured(String remittanceInformationUnstructured) {
        this.remittanceInformationUnstructured = remittanceInformationUnstructured;
        return this;
    }
    
    /**
     * Array of unstructured remittance information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remittanceInformationUnstructuredArray")
    public String[] remittanceInformationUnstructuredArray;

    public Transactions withRemittanceInformationUnstructuredArray(String[] remittanceInformationUnstructuredArray) {
        this.remittanceInformationUnstructuredArray = remittanceInformationUnstructuredArray;
        return this;
    }
    
    @JsonProperty("transactionAmount")
    public Amount transactionAmount;

    public Transactions withTransactionAmount(Amount transactionAmount) {
        this.transactionAmount = transactionAmount;
        return this;
    }
    
    /**
     * This identification is given by the attribute transactionId of the corresponding entry of a transaction list.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionId")
    public String transactionId;

    public Transactions withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * Ultimate creditor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ultimateCreditor")
    public String ultimateCreditor;

    public Transactions withUltimateCreditor(String ultimateCreditor) {
        this.ultimateCreditor = ultimateCreditor;
        return this;
    }
    
    /**
     * Ultimate debtor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ultimateDebtor")
    public String ultimateDebtor;

    public Transactions withUltimateDebtor(String ultimateDebtor) {
        this.ultimateDebtor = ultimateDebtor;
        return this;
    }
    
    /**
     * The Date at which assets become available to the account owner in case of a credit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("valueDate")
    public LocalDate valueDate;

    public Transactions withValueDate(LocalDate valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    public Transactions(@JsonProperty("transactionAmount") Amount transactionAmount) {
        this.transactionAmount = transactionAmount;
  }
}
