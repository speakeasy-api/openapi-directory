"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FormFieldSets:
    r"""Operations about form_field_sets"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_form_field_sets_id(self, request: operations.DeleteFormFieldSetsIDRequest) -> operations.DeleteFormFieldSetsIDResponse:
        r"""Delete Form Field Set
        Delete Form Field Set
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFormFieldSetsIDRequest, base_url, '/form_field_sets/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFormFieldSetsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_form_field_sets(self, request: operations.GetFormFieldSetsRequest) -> operations.GetFormFieldSetsResponse:
        r"""List Form Field Sets
        List Form Field Sets
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/form_field_sets'
        
        query_params = utils.get_query_params(operations.GetFormFieldSetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFormFieldSetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FormFieldSetEntity]])
                res.form_field_set_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_form_field_sets_id(self, request: operations.GetFormFieldSetsIDRequest) -> operations.GetFormFieldSetsIDResponse:
        r"""Show Form Field Set
        Show Form Field Set
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFormFieldSetsIDRequest, base_url, '/form_field_sets/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFormFieldSetsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FormFieldSetEntity])
                res.form_field_set_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_form_field_sets_id(self, request: operations.PatchFormFieldSetsIDRequest) -> operations.PatchFormFieldSetsIDResponse:
        r"""Update Form Field Set
        Update Form Field Set
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchFormFieldSetsIDRequest, base_url, '/form_field_sets/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_form_field_sets", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchFormFieldSetsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FormFieldSetEntity])
                res.form_field_set_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_form_field_sets(self, request: shared.PostFormFieldSets) -> operations.PostFormFieldSetsResponse:
        r"""Create Form Field Set
        Create Form Field Set
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/form_field_sets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFormFieldSetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FormFieldSetEntity])
                res.form_field_set_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    