// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RemoveTagsXAmzTargetEnum
type RemoveTagsXAmzTargetEnum string

const (
	RemoveTagsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101RemoveTags RemoveTagsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RemoveTags"
)

func (e *RemoveTagsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RemoveTags":
		*e = RemoveTagsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveTagsXAmzTargetEnum: %s", s)
	}
}

type RemoveTagsRequest struct {
	RemoveTagsRequest shared.RemoveTagsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        RemoveTagsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RemoveTagsResponse struct {
	// ChannelNotFoundException
	ChannelNotFoundException interface{}
	// CloudTrailARNInvalidException
	CloudTrailARNInvalidException interface{}
	ContentType                   string
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InvalidTagParameterException
	InvalidTagParameterException interface{}
	// InvalidTrailNameException
	InvalidTrailNameException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// Success
	RemoveTagsResponse map[string]interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceTypeNotSupportedException
	ResourceTypeNotSupportedException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
