// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteTagsForDomainXAmzTargetEnum
type DeleteTagsForDomainXAmzTargetEnum string

const (
	DeleteTagsForDomainXAmzTargetEnumRoute53DomainsV20140515DeleteTagsForDomain DeleteTagsForDomainXAmzTargetEnum = "Route53Domains_v20140515.DeleteTagsForDomain"
)

func (e *DeleteTagsForDomainXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Domains_v20140515.DeleteTagsForDomain":
		*e = DeleteTagsForDomainXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteTagsForDomainXAmzTargetEnum: %s", s)
	}
}

type DeleteTagsForDomainHeaders struct {
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteTagsForDomainXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteTagsForDomainRequest struct {
	Headers DeleteTagsForDomainHeaders
	Request shared.DeleteTagsForDomainRequest `request:"mediaType=application/json"`
}

type DeleteTagsForDomainResponse struct {
	ContentType string
	// Success
	DeleteTagsForDomainResponse map[string]interface{}
	// InvalidInput
	InvalidInput interface{}
	// OperationLimitExceeded
	OperationLimitExceeded interface{}
	StatusCode             int
	RawResponse            *http.Response
	// UnsupportedTLD
	UnsupportedTLD interface{}
}
