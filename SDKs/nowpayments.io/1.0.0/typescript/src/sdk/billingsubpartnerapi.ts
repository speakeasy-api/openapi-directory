/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * NOWPayments allows you to create sub-partner accounts for your users, enabling full-fledged crypto billing solution.
 */
export class BillingSubPartnerAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all transfers
   *
   * @remarks
   * Returns the entire list of transfers created by your sub-partners.
   */
  getAllTransfers(
    req: operations.GetAllTransfersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllTransfersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllTransfersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/sub-partner/transfers";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllTransfersResponse =
        new operations.GetAllTransfersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllTransfers200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllTransfers200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get sub-partner balance
   *
   * @remarks
   * This request can be made only from a whitelisted IP.
   * If IP whitelisting is disabled, this request can be made by any user that has an API key.
   */
  getSubPartnerBalance(
    req: operations.GetSubPartnerBalanceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSubPartnerBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSubPartnerBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/sub-partner/balance/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSubPartnerBalanceResponse =
        new operations.GetSubPartnerBalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSubPartnerBalance200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSubPartnerBalance200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get sub-partners
   *
   * @remarks
   * This method returns the entire list of your sub-partners.
   */
  getSubPartners(
    req: operations.GetSubPartnersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSubPartnersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSubPartnersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/sub-partner";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSubPartnersResponse =
        new operations.GetSubPartnersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get transfer
   *
   * @remarks
   * Get the actual information about the transfer. You need to provide the transfer ID in the request.
   */
  getTransfer(
    req: operations.GetTransferRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransferResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransferRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/sub-partner/transfer/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransferResponse =
        new operations.GetTransferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTransfer200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTransfer200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
