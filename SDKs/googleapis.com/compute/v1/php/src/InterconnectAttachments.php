<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InterconnectAttachments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of interconnect attachments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListResponse
     */
	public function computeInterconnectAttachmentsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/interconnectAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interconnectAttachmentAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterconnectAttachmentAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified interconnect attachment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteResponse
     */
	public function computeInterconnectAttachmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified interconnect attachment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetResponse
     */
	public function computeInterconnectAttachmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interconnectAttachment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterconnectAttachment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an InterconnectAttachment in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertResponse
     */
	public function computeInterconnectAttachmentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/interconnectAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "interconnectAttachment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of interconnect attachments contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListResponse
     */
	public function computeInterconnectAttachmentsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/interconnectAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interconnectAttachmentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterconnectAttachmentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchResponse
     */
	public function computeInterconnectAttachmentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "interconnectAttachment1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsResponse
     */
	public function computeInterconnectAttachmentsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectAttachmentsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}