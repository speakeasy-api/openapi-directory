"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import approximateprogress as shared_approximateprogress
from ..shared import approximatesplitrequest as shared_approximatesplitrequest
from ..shared import hotkeydetection as shared_hotkeydetection
from ..shared import metricshortid as shared_metricshortid
from ..shared import position as shared_position
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkItemServiceState:
    r"""The Dataflow service's idea of the current state of a WorkItem being processed by a worker."""
    
    complete_work_status: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completeWorkStatus'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    harness_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('harnessData'), 'exclude': lambda f: f is None }})
    r"""Other data returned by the service, specific to the particular worker harness."""  
    hot_key_detection: Optional[shared_hotkeydetection.HotKeyDetection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotKeyDetection'), 'exclude': lambda f: f is None }})
    r"""Proto describing a hot key detected on a given WorkItem."""  
    lease_expire_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaseExpireTime'), 'exclude': lambda f: f is None }})
    r"""Time at which the current lease will expire."""  
    metric_short_id: Optional[list[shared_metricshortid.MetricShortID]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricShortId'), 'exclude': lambda f: f is None }})
    r"""The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics."""  
    next_report_index: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextReportIndex'), 'exclude': lambda f: f is None }})
    r"""The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts."""  
    report_status_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportStatusInterval'), 'exclude': lambda f: f is None }})
    r"""New recommended reporting interval."""  
    split_request: Optional[shared_approximatesplitrequest.ApproximateSplitRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splitRequest'), 'exclude': lambda f: f is None }})
    r"""A suggestion by the service to the worker to dynamically split the WorkItem."""  
    suggested_stop_point: Optional[shared_approximateprogress.ApproximateProgress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedStopPoint'), 'exclude': lambda f: f is None }})
    r"""Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest."""  
    suggested_stop_position: Optional[shared_position.Position] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedStopPosition'), 'exclude': lambda f: f is None }})
    r"""Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index."""  
    