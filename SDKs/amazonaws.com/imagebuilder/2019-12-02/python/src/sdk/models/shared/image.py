"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import buildtype_enum as shared_buildtype_enum
from ..shared import containerrecipe as shared_containerrecipe
from ..shared import distributionconfiguration as shared_distributionconfiguration
from ..shared import imagerecipe as shared_imagerecipe
from ..shared import imagesource_enum as shared_imagesource_enum
from ..shared import imagestate as shared_imagestate
from ..shared import imagetestsconfiguration as shared_imagetestsconfiguration
from ..shared import imagetype_enum as shared_imagetype_enum
from ..shared import infrastructureconfiguration as shared_infrastructureconfiguration
from ..shared import outputresources as shared_outputresources
from ..shared import platform_enum as shared_platform_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Image:
    r"""An Image Builder image. You must specify exactly one recipe for the image â€“ either a container recipe (<code>containerRecipe</code>), which creates a container image, or an image recipe (<code>imageRecipe</code>), which creates an AMI."""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    build_type: Optional[shared_buildtype_enum.BuildTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildType'), 'exclude': lambda f: f is None }})  
    container_recipe: Optional[shared_containerrecipe.ContainerRecipe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerRecipe'), 'exclude': lambda f: f is None }})  
    date_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'exclude': lambda f: f is None }})  
    distribution_configuration: Optional[shared_distributionconfiguration.DistributionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributionConfiguration'), 'exclude': lambda f: f is None }})  
    enhanced_image_metadata_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enhancedImageMetadataEnabled'), 'exclude': lambda f: f is None }})  
    image_recipe: Optional[shared_imagerecipe.ImageRecipe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageRecipe'), 'exclude': lambda f: f is None }})  
    image_source: Optional[shared_imagesource_enum.ImageSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageSource'), 'exclude': lambda f: f is None }})  
    image_tests_configuration: Optional[shared_imagetestsconfiguration.ImageTestsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageTestsConfiguration'), 'exclude': lambda f: f is None }})  
    infrastructure_configuration: Optional[shared_infrastructureconfiguration.InfrastructureConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infrastructureConfiguration'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osVersion'), 'exclude': lambda f: f is None }})  
    output_resources: Optional[shared_outputresources.OutputResources] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputResources'), 'exclude': lambda f: f is None }})  
    platform: Optional[shared_platform_enum.PlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})  
    source_pipeline_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourcePipelineArn'), 'exclude': lambda f: f is None }})  
    source_pipeline_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourcePipelineName'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_imagestate.ImageState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_imagetype_enum.ImageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})  
    