"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Conversions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_conversions_batchinsert(self, request: operations.DfareportingConversionsBatchinsertRequest, security: operations.DfareportingConversionsBatchinsertSecurity) -> operations.DfareportingConversionsBatchinsertResponse:
        r"""Inserts conversions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingConversionsBatchinsertRequest, base_url, '/userprofiles/{profileId}/conversions/batchinsert', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversions_batch_insert_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingConversionsBatchinsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingConversionsBatchinsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionsBatchInsertResponse])
                res.conversions_batch_insert_response = out

        return res

    def dfareporting_conversions_batchupdate(self, request: operations.DfareportingConversionsBatchupdateRequest, security: operations.DfareportingConversionsBatchupdateSecurity) -> operations.DfareportingConversionsBatchupdateResponse:
        r"""Updates existing conversions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingConversionsBatchupdateRequest, base_url, '/userprofiles/{profileId}/conversions/batchupdate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversions_batch_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingConversionsBatchupdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingConversionsBatchupdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConversionsBatchUpdateResponse])
                res.conversions_batch_update_response = out

        return res

    