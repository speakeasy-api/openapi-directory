// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ActionResourceAttributesFrequencyGoalWeeksDaysEnum - Days of week that the action is scheduled for. Zero-indexed, ex 0 represents Sunday, etc.
type ActionResourceAttributesFrequencyGoalWeeksDaysEnum int64

const (
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumZero  ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 0
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumOne   ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 1
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumTwo   ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 2
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumThree ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 3
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumFour  ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 4
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumFive  ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 5
	ActionResourceAttributesFrequencyGoalWeeksDaysEnumSix   ActionResourceAttributesFrequencyGoalWeeksDaysEnum = 6
)

func (e ActionResourceAttributesFrequencyGoalWeeksDaysEnum) ToPointer() *ActionResourceAttributesFrequencyGoalWeeksDaysEnum {
	return &e
}

func (e *ActionResourceAttributesFrequencyGoalWeeksDaysEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		*e = ActionResourceAttributesFrequencyGoalWeeksDaysEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionResourceAttributesFrequencyGoalWeeksDaysEnum: %v", v)
	}
}

type ActionResourceAttributesFrequencyGoalWeeks struct {
	Days []ActionResourceAttributesFrequencyGoalWeeksDaysEnum `json:"days,omitempty"`
}

type ActionResourceAttributesFrequencyGoal struct {
	Weeks *ActionResourceAttributesFrequencyGoalWeeks `json:"weeks,omitempty"`
}

type ActionResourceAttributesTypeEnum string

const (
	ActionResourceAttributesTypeEnumOtherLifestyle ActionResourceAttributesTypeEnum = "other_lifestyle"
)

func (e ActionResourceAttributesTypeEnum) ToPointer() *ActionResourceAttributesTypeEnum {
	return &e
}

func (e *ActionResourceAttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "other_lifestyle":
		*e = ActionResourceAttributesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionResourceAttributesTypeEnum: %v", v)
	}
}

type ActionResourceAttributesInput struct {
	Thread         *string                                `json:"_thread,omitempty"`
	Details        map[string]interface{}                 `json:"details,omitempty"`
	EffectiveFrom  string                                 `json:"effective_from"`
	EffectiveTo    *string                                `json:"effective_to,omitempty"`
	FrequencyGoal  *ActionResourceAttributesFrequencyGoal `json:"frequency_goal,omitempty"`
	Identifiers    []Identifier                           `json:"identifiers,omitempty"`
	Intake         map[string]interface{}                 `json:"intake,omitempty"`
	MetricRequired *bool                                  `json:"metric_required,omitempty"`
	Metrics        []ActionMetric                         `json:"metrics,omitempty"`
	Title          string                                 `json:"title"`
	Tracking       *bool                                  `json:"tracking,omitempty"`
	Type           ActionResourceAttributesTypeEnum       `json:"type"`
	Windows        []ActionWindow                         `json:"windows,omitempty"`
}

type ActionResourceRelationshipsPlanData struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type ActionResourceRelationshipsPlan struct {
	Data  *ActionResourceRelationshipsPlanData `json:"data,omitempty"`
	Links map[string]interface{}               `json:"links,omitempty"`
}

type ActionResourceRelationships struct {
	Plan *ActionResourceRelationshipsPlan `json:"plan,omitempty"`
}

type ActionResourceInput struct {
	Attributes    *ActionResourceAttributesInput `json:"attributes,omitempty"`
	ID            string                         `json:"id"`
	Relationships *ActionResourceRelationships   `json:"relationships,omitempty"`
	Type          string                         `json:"type"`
}

type ActionResourceAttributesAdherenceStreak struct {
	Count     *int64  `json:"count,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type ActionResourceAttributesAdherence struct {
	Complete *int64                                   `json:"complete,omitempty"`
	Due      *int64                                   `json:"due,omitempty"`
	Streak   *ActionResourceAttributesAdherenceStreak `json:"streak,omitempty"`
}

type ActionResourceAttributes struct {
	Thread         *string                                `json:"_thread,omitempty"`
	Adherence      *ActionResourceAttributesAdherence     `json:"adherence,omitempty"`
	Details        map[string]interface{}                 `json:"details,omitempty"`
	EffectiveFrom  string                                 `json:"effective_from"`
	EffectiveTo    *string                                `json:"effective_to,omitempty"`
	FrequencyGoal  *ActionResourceAttributesFrequencyGoal `json:"frequency_goal,omitempty"`
	Identifiers    []Identifier                           `json:"identifiers,omitempty"`
	Intake         map[string]interface{}                 `json:"intake,omitempty"`
	MetricRequired *bool                                  `json:"metric_required,omitempty"`
	Metrics        []ActionMetric                         `json:"metrics,omitempty"`
	StaticTitle    *string                                `json:"static_title,omitempty"`
	Title          string                                 `json:"title"`
	Tracking       *bool                                  `json:"tracking,omitempty"`
	Type           ActionResourceAttributesTypeEnum       `json:"type"`
	Windows        []ActionWindow                         `json:"windows,omitempty"`
}

type ActionResource struct {
	Attributes    *ActionResourceAttributes    `json:"attributes,omitempty"`
	ID            string                       `json:"id"`
	Relationships *ActionResourceRelationships `json:"relationships,omitempty"`
	Type          string                       `json:"type"`
}
