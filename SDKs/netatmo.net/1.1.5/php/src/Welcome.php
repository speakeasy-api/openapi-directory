<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Welcome 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Links a callback url to a user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddwebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddwebhookSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddwebhookResponse
     */
	public function addwebhook(
        \OpenAPI\OpenAPI\Models\Operations\AddwebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddwebhookSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddwebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addwebhook');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddwebhookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddwebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomeWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomeWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Dissociates a webhook from a user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DropwebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DropwebhookSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DropwebhookResponse
     */
	public function dropwebhook(
        \OpenAPI\OpenAPI\Models\Operations\DropwebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DropwebhookSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DropwebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dropwebhook');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DropwebhookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DropwebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomeWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomeWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the snapshot associated to an event.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureResponse
     */
	public function getcamerapicture(
        \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getcamerapicture');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetcamerapictureRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetcamerapictureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getcamerapicture200ApplicationJSONByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the snapshot associated to an event.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilResponse
     */
	public function geteventsuntil(
        \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/geteventsuntil');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GeteventsuntilRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GeteventsuntilResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomeEventResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomeEventResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about users homes and cameras.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GethomedataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GethomedataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GethomedataResponse
     */
	public function gethomedata(
        \OpenAPI\OpenAPI\Models\Operations\GethomedataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GethomedataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GethomedataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gethomedata');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GethomedataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GethomedataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomeHomeDataResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomeHomeDataResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns most recent events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetlasteventofRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetlasteventofSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetlasteventofResponse
     */
	public function getlasteventof(
        \OpenAPI\OpenAPI\Models\Operations\GetlasteventofRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetlasteventofSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetlasteventofResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getlasteventof');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetlasteventofRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetlasteventofResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomeEventResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomeEventResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns previous events.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetnexteventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetnexteventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetnexteventsResponse
     */
	public function getnextevents(
        \OpenAPI\OpenAPI\Models\Operations\GetnexteventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetnexteventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetnexteventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getnextevents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetnexteventsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetnexteventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomeEventResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomeEventResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets a person as 'Away' or the Home as 'Empty'. The event will be added to the user’s timeline.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetpersonsawayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetpersonsawaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetpersonsawayResponse
     */
	public function setpersonsaway(
        \OpenAPI\OpenAPI\Models\Operations\SetpersonsawayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetpersonsawaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetpersonsawayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setpersonsaway');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SetpersonsawayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetpersonsawayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomePersonsAwayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomePersonsAwayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets a person as 'At home'.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeResponse
     */
	public function setpersonshome(
        \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setpersonshome');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SetpersonshomeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetpersonshomeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naWelcomePersonsHomeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAWelcomePersonsHomeResponse', 'json');
            }
        }

        return $response;
    }
}