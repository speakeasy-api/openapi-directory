/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
 *
 * @remarks
 *
 */
export enum POSTReconcileRefundResponseFinanceInformationTransferredToAccountingEnum {
  Processing = "Processing",
  Yes = "Yes",
  No = "No",
  Error = "Error",
  Ignore = "Ignore",
}

/**
 * Container for the finance information related to the refund.
 *
 * @remarks
 *
 */
export class POSTReconcileRefundResponseFinanceInformation extends SpeakeasyBase {
  /**
   * The accounting code that maps to a bank account in your accounting system.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bankAccountAccountingCode" })
  bankAccountAccountingCode?: string;

  /**
   * The type of the accounting code that maps to a bank account in your accounting system.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bankAccountAccountingCodeType" })
  bankAccountAccountingCodeType?: string;

  /**
   * Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferredToAccounting" })
  transferredToAccounting?: POSTReconcileRefundResponseFinanceInformationTransferredToAccountingEnum;

  /**
   * The accounting code for the unapplied payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unappliedPaymentAccountingCode" })
  unappliedPaymentAccountingCode?: string;

  /**
   * The type of the accounting code for the unapplied payment.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unappliedPaymentAccountingCodeType" })
  unappliedPaymentAccountingCodeType?: string;
}

/**
 * The status of the refund in the gateway; used for reconciliation.
 *
 * @remarks
 *
 */
export enum POSTReconcileRefundResponseGatewayStateEnum {
  Settled = "Settled",
  FailedToSettle = "FailedToSettle",
}

/**
 * How an external refund was issued to a customer.
 *
 * @remarks
 *
 */
export enum POSTReconcileRefundResponseMethodTypeEnum {
  Ach = "ACH",
  Cash = "Cash",
  Check = "Check",
  CreditCard = "CreditCard",
  PayPal = "PayPal",
  WireTransfer = "WireTransfer",
  DebitCard = "DebitCard",
  CreditCardReferenceTransaction = "CreditCardReferenceTransaction",
  BankTransfer = "BankTransfer",
  Other = "Other",
}

/**
 * The type of the refund.
 *
 * @remarks
 *
 */
export enum POSTReconcileRefundResponseTypeEnum {
  External = "External",
  Electronic = "Electronic",
}

export class POSTReconcileRefundResponse extends SpeakeasyBase {
  /**
   * The ID of the customer account that the refund is for.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * The total amount of the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * The date and time when the transaction was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  cancelledOn?: Date;

  /**
   * Comments about the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * The ID of the Zuora user who created the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdById" })
  createdById?: string;

  /**
   * The date and time when the refund is created, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * The ID of the credit memo that is refunded.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditMemoId" })
  creditMemoId?: string;

  /**
   * Container for the finance information related to the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "financeInformation" })
  @Type(() => POSTReconcileRefundResponseFinanceInformation)
  financeInformation?: POSTReconcileRefundResponseFinanceInformation;

  /**
   * The ID of the gateway instance that processes the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayId" })
  gatewayId?: string;

  /**
   * The reason of gateway reconciliation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayReconciliationReason" })
  gatewayReconciliationReason?: string;

  /**
   * The status of gateway reconciliation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayReconciliationStatus" })
  gatewayReconciliationStatus?: string;

  /**
   * The message returned from the payment gateway for the refund. This message is gateway-dependent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayResponse" })
  gatewayResponse?: string;

  /**
   * The code returned from the payment gateway for the refund. This code is gateway-dependent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayResponseCode" })
  gatewayResponseCode?: string;

  /**
   * The status of the refund in the gateway; used for reconciliation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayState" })
  gatewayState?: POSTReconcileRefundResponseGatewayStateEnum;

  /**
   * The ID of the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "markedForSubmissionOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  markedForSubmissionOn?: Date;

  /**
   * How an external refund was issued to a customer.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "methodType" })
  methodType?: POSTReconcileRefundResponseMethodTypeEnum;

  /**
   * The unique identification number of the refund. For example, R-00000001.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: string;

  /**
   * The ID of the payment that is refunded.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentId" })
  paymentId?: string;

  /**
   * The unique ID of the payment method that the customer used to make the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMethodId" })
  paymentMethodId?: string;

  /**
   * The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMethodSnapshotId" })
  paymentMethodSnapshotId?: string;

  /**
   * The payout ID of the refund from the gateway side.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payoutId" })
  payoutId?: string;

  /**
   * A code identifying the reason for the transaction.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reasonCode" })
  reasonCode?: string;

  /**
   * The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referenceId" })
  referenceId?: string;

  /**
   * The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2020-03-01.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refundDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  refundDate?: Date;

  /**
   * The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refundTransactionTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  refundTransactionTime?: Date;

  /**
   * The transaction ID returned by the payment gateway if there is an additional refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondRefundReferenceId" })
  secondRefundReferenceId?: string;

  /**
   * The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  settledOn?: Date;

  /**
   * A payment gateway-specific field that maps Zuora to other gateways.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "softDescriptor" })
  softDescriptor?: string;

  /**
   * A payment gateway-specific field that maps Zuora to other gateways.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "softDescriptorPhone" })
  softDescriptorPhone?: string;

  /**
   * The status of the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * The date and time when the refund was submitted, in yyyy-mm-dd hh:mm:ss format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submittedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  submittedOn?: Date;

  /**
   * Indicates if the request is processed successfully.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * The type of the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: POSTReconcileRefundResponseTypeEnum;

  /**
   * The ID of the Zuora user who last updated the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedById" })
  updatedById?: string;

  /**
   * The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;
}
