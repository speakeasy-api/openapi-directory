/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Component - Template component definition
 */
public class Component {
    /**
     * Defines component class/type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cls")
    public ComponentClsEnum cls;

    public Component withCls(ComponentClsEnum cls) {
        this.cls = cls;
        return this;
    }
    
    /**
     * Defines data field for Table and Container components which are used to iterate over list of items
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataIndex")
    public String dataIndex;

    public Component withDataIndex(String dataIndex) {
        this.dataIndex = dataIndex;
        return this;
    }
    
    /**
     * Height in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Double height;

    public Component withHeight(Double height) {
        this.height = height;
        return this;
    }
    
    /**
     * Component id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Component withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Position from the page left in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("left")
    public Double left;

    public Component withLeft(Double left) {
        this.left = left;
        return this;
    }
    
    /**
     * Position from the page top in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("top")
    public Double top;

    public Component withTop(Double top) {
        this.top = top;
        return this;
    }
    
    /**
     * Component value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public String value;

    public Component withValue(String value) {
        this.value = value;
        return this;
    }
    
    /**
     * Width in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Double width;

    public Component withWidth(Double width) {
        this.width = width;
        return this;
    }
    
    /**
     * Defines the rendering order on page. Components with smaller zindex are rendered before
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zindex")
    public Long zindex;

    public Component withZindex(Long zindex) {
        this.zindex = zindex;
        return this;
    }
    
    public Component(){}
}
