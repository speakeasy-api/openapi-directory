"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class User:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def approve_vendor_application(self, request: operations.ApproveVendorApplicationRequest, security: operations.ApproveVendorApplicationSecurity) -> operations.ApproveVendorApplicationResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApproveVendorApplicationRequest, base_url, '/{userId}/approve', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApproveVendorApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_user(self, request: operations.CreateUserRequest) -> operations.CreateUserResponse:
        r"""Create a new user
        Create a new platform user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateUserRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def delete_account(self) -> operations.DeleteAccountResponse:
        r"""Delete your account
        Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/delete-account'
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_user_account(self, request: operations.DeleteUserAccountRequest) -> operations.DeleteUserAccountResponse:
        r"""Delete requester account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserAccountRequest, base_url, '/{userId}/delete-account', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def downgrade_proofreader(self) -> operations.DowngradeProofreaderResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/downgrade-proofreader'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DowngradeProofreaderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def downgrade_user_proofreader(self, request: operations.DowngradeUserProofreaderRequest, security: operations.DowngradeUserProofreaderSecurity) -> operations.DowngradeUserProofreaderResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DowngradeUserProofreaderRequest, base_url, '/{userId}/downgrade-proofreader', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DowngradeUserProofreaderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def freeze_account(self) -> operations.FreezeAccountResponse:
        r"""Freeze account
        Freeze your account temporarily, especially to stop receiving project notifications.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/freeze-account'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FreezeAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def freeze_user_account(self, request: operations.FreezeUserAccountRequest) -> operations.FreezeUserAccountResponse:
        r"""Freeze requester account for project notifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FreezeUserAccountRequest, base_url, '/{userId}/freeze-account', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FreezeUserAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_all_vendor_tags(self) -> operations.GetAllVendorTagsResponse:
        r"""Returns all vendor tags for vendors filter
        Returns all vendor tags for vendors filter
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/tags'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllVendorTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.VendorTag]])
                res.vendor_tags = out

        return res

    def get_earnings(self) -> operations.GetEarningsResponse:
        r"""View your vendor earnings
        View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/earnings'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEarningsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Earnings])
                res.earnings = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_filtered_vendors(self, request: operations.GetFilteredVendorsRequest) -> operations.GetFilteredVendorsResponse:
        r"""Filter vendors based on provided parameters
        Get a list of vendors available for the criteria given
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/filter'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "filter_vendor_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GetFilteredVendorsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilteredVendorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserList])
                res.user_list = out

        return res

    def get_me(self) -> operations.GetMeResponse:
        r"""View your account info
        Get your user information, including client, corporate account and vendor account information.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_payment_info(self) -> operations.GetPaymentInfoResponse:
        r"""View your payment and billing info
        Returns billing and saved credit card information for user, and their corporate account if present & allowed.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payment'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInfo])
                res.payment_info = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_permissions(self) -> operations.GetPermissionsResponse:
        r"""View your permissions
        View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/permissions'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionList])
                res.permission_list = out

        return res

    def get_responsivity(self, request: operations.GetResponsivityRequest) -> operations.GetResponsivityResponse:
        r"""View your vendor responsiveness
        View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/responsivity'
        
        query_params = utils.get_query_params(operations.GetResponsivityRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResponsivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsivityList])
                res.responsivity_list = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_stats(self) -> operations.GetStatsResponse:
        r"""View your account statistics
        View your client and vendor statistics.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stats'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Stats])
                res.stats = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_this_user_groups(self, request: operations.GetThisUserGroupsRequest) -> operations.GetThisUserGroupsResponse:
        r"""Returns a list of user groups that this user belongs to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetThisUserGroupsRequest, base_url, '/{userId}/user-groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetThisUserGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroupList])
                res.user_group_list = out

        return res

    def get_user(self, request: operations.GetUserRequest, security: operations.GetUserSecurity) -> operations.GetUserResponse:
        r"""Get user information, including client or vendor specific info."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/{userId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_user_earnings(self, request: operations.GetUserEarningsRequest, security: operations.GetUserEarningsSecurity) -> operations.GetUserEarningsResponse:
        r"""Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserEarningsRequest, base_url, '/{userId}/earnings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserEarningsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Earnings])
                res.earnings = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_user_groups(self) -> operations.GetUserGroupsResponse:
        r"""View your user groups
        View the user groups that your user account belongs to. This is typically configured by your account administator's dashboard.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user-groups'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroupList])
                res.user_group_list = out

        return res

    def get_user_payment_info(self, request: operations.GetUserPaymentInfoRequest) -> operations.GetUserPaymentInfoResponse:
        r"""View user's payment and billing info
        Returns billing and saved credit card information for user, and their corporate account if present & allowed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserPaymentInfoRequest, base_url, '/{userId}/payment', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserPaymentInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInfo])
                res.payment_info = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_user_permissions(self, request: operations.GetUserPermissionsRequest) -> operations.GetUserPermissionsResponse:
        r"""Returns a list of permissions that this user is authorized for."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserPermissionsRequest, base_url, '/{userId}/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionList])
                res.permission_list = out

        return res

    def get_user_popular_pairs(self, request: operations.GetUserPopularPairsRequest, security: operations.GetUserPopularPairsSecurity) -> operations.GetUserPopularPairsResponse:
        r"""Returns the language pairs that the user has ordered most."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserPopularPairsRequest, base_url, '/{userId}/stats/popular-pairs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserPopularPairsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PopularLanguagePairs])
                res.popular_language_pairs = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_user_project_stats(self, request: operations.GetUserProjectStatsRequest, security: operations.GetUserProjectStatsSecurity) -> operations.GetUserProjectStatsResponse:
        r"""Returns a user's project statistics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserProjectStatsRequest, base_url, '/{userId}/stats/projects', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserProjectStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientProjectStats])
                res.client_project_stats = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_user_responsivity(self, request: operations.GetUserResponsivityRequest, security: operations.GetUserResponsivitySecurity) -> operations.GetUserResponsivityResponse:
        r"""Returns a user's vendor responsivity stats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserResponsivityRequest, base_url, '/{userId}/responsivity', request)
        
        query_params = utils.get_query_params(operations.GetUserResponsivityRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponsivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsivityList])
                res.responsivity_list = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_user_stats(self, request: operations.GetUserStatsRequest, security: operations.GetUserStatsSecurity) -> operations.GetUserStatsResponse:
        r"""Returns a user's client and vendor statistics. This used to be called \\"summary\\" (\@deprecated)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserStatsRequest, base_url, '/{userId}/stats', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Stats])
                res.stats = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users(self, request: operations.GetUsersRequest) -> operations.GetUsersResponse:
        r"""Get a list of platform users
        Get a list of platform users
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        query_params = utils.get_query_params(operations.GetUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserList])
                res.user_list = out

        return res

    def log_location(self, request: shared.LocationUpdateContent) -> operations.LogLocationResponse:
        r"""Log user's current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/location'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LogLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def make_proofreader(self) -> operations.MakeProofreaderResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/make-proofreader'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MakeProofreaderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def make_user_proofreader(self, request: operations.MakeUserProofreaderRequest, security: operations.MakeUserProofreaderSecurity) -> operations.MakeUserProofreaderResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.MakeUserProofreaderRequest, base_url, '/{userId}/make-proofreader', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MakeUserProofreaderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def reject_vendor_application(self, request: operations.RejectVendorApplicationRequest, security: operations.RejectVendorApplicationSecurity) -> operations.RejectVendorApplicationResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.RejectVendorApplicationRequest, base_url, '/{userId}/reject', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RejectVendorApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def send_email_confirmation(self) -> operations.SendEmailConfirmationResponse:
        r"""Sends email confirmation email for current user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/resend-email-confirmation'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendEmailConfirmationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendEmailConfirmation200ApplicationJSON])
                res.send_email_confirmation_200_application_json_object = out

        return res

    def send_password_reminder(self, request: shared.Email) -> operations.SendPasswordReminderResponse:
        r"""Sends password reset email to the user's registered email address"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users/send-password-reminder'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendPasswordReminderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def send_user_email_confirmation(self, request: operations.SendUserEmailConfirmationRequest, security: operations.SendUserEmailConfirmationSecurity) -> operations.SendUserEmailConfirmationResponse:
        r"""Sends email confirmation email for a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendUserEmailConfirmationRequest, base_url, '/{userId}/resend-email-confirmation', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendUserEmailConfirmationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendUserEmailConfirmation200ApplicationJSON])
                res.send_user_email_confirmation_200_application_json_object = out
        elif http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendUserEmailConfirmation202ApplicationJSON])
                res.send_user_email_confirmation_202_application_json_object = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def subscribe_notification(self, request: shared.NotificationSubscription) -> operations.SubscribeNotificationResponse:
        r"""Subscribe to push notifications
        Subscribe to push notifications to receive project and platform notifications.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/notifications/subscribe'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeNotificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def subscribe_user_notification(self, request: operations.SubscribeUserNotificationRequest, security: operations.SubscribeUserNotificationSecurity) -> operations.SubscribeUserNotificationResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscribeUserNotificationRequest, base_url, '/{userId}/notifications/subscribe', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "notification_subscription", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeUserNotificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def suspend_user(self, request: operations.SuspendUserRequest, security: operations.SuspendUserSecurity) -> operations.SuspendUserResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuspendUserRequest, base_url, '/{userId}/suspend', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "suspend_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def unfreeze_account(self) -> operations.UnfreezeAccountResponse:
        r"""Defreeze your account
        Reactive your account to start receiving notifications.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/unfreeze-account'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnfreezeAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def unfreeze_user_account(self, request: operations.UnfreezeUserAccountRequest) -> operations.UnfreezeUserAccountResponse:
        r"""Unfreeze requester account for project notifications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnfreezeUserAccountRequest, base_url, '/{userId}/unfreeze-account', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnfreezeUserAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def unsubscribe_notification(self, request: shared.NotificationSubscription) -> operations.UnsubscribeNotificationResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/notifications/unsubscribe'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeNotificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def unsubscribe_user_notification(self, request: operations.UnsubscribeUserNotificationRequest, security: operations.UnsubscribeUserNotificationSecurity) -> operations.UnsubscribeUserNotificationResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnsubscribeUserNotificationRequest, base_url, '/{userId}/notifications/unsubscribe', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "notification_subscription", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeUserNotificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_me(self, request: shared.UserUpdateContent) -> operations.UpdateMeResponse:
        r"""Update your account info"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_password(self, request: shared.PasswordUpdateContent) -> operations.UpdatePasswordResponse:
        r"""Update your account password
        Password should contain at least one uppercase, lowercase character and one number
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/password'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_payment_info(self, request: shared.UpdatePaymentInfo) -> operations.UpdatePaymentInfoResponse:
        r"""Update payment info
        Update your billing and saved credit card information
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePaymentInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentInfo])
                res.payment_info = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_user(self, request: operations.UpdateUserRequest) -> operations.UpdateUserResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUserRequest, base_url, '/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_update_content", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_user_group(self, request: operations.UpdateUserGroupRequest, security: operations.UpdateUserGroupSecurity) -> operations.UpdateUserGroupResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUserGroupRequest, base_url, '/{userId}/user-groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "active_widget", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUserGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserGroupList])
                res.user_group_list = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_user_payment_info(self, request: operations.UpdateUserPaymentInfoRequest) -> operations.UpdateUserPaymentInfoResponse:
        r"""Update user payment info
        Update user's billing and saved credit card information
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUserPaymentInfoRequest, base_url, '/{userId}/payment', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payment_info", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUserPaymentInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def upload_profile_picture_json(self, request: shared.ProfilePictureUpload) -> operations.UploadProfilePictureJSONResponse:
        r"""Upload profile picture
        Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile-picture'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadProfilePictureJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def upload_profile_picture_multipart(self, request: shared.ProfilePictureUpload1) -> operations.UploadProfilePictureMultipartResponse:
        r"""Upload profile picture
        Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile-picture'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadProfilePictureMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def upload_user_profile_picture_json(self, request: operations.UploadUserProfilePictureJSONRequest, security: operations.UploadUserProfilePictureJSONSecurity) -> operations.UploadUserProfilePictureJSONResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadUserProfilePictureJSONRequest, base_url, '/{userId}/profile-picture', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_picture_upload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadUserProfilePictureJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def upload_user_profile_picture_multipart(self, request: operations.UploadUserProfilePictureMultipartRequest, security: operations.UploadUserProfilePictureMultipartSecurity) -> operations.UploadUserProfilePictureMultipartResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadUserProfilePictureMultipartRequest, base_url, '/{userId}/profile-picture', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_picture_upload1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadUserProfilePictureMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    