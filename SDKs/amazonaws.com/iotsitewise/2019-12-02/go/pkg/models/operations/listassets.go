// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAssetsFilterEnum - <p>The filter for the requested list of assets. Choose one of the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all assets for a given asset model ID. The <code>assetModelId</code> parameter is required if you filter by <code>ALL</code>.</p> </li> <li> <p> <code>TOP_LEVEL</code> – The list includes only top-level assets in the asset hierarchy tree.</p> </li> </ul> <p>Default: <code>ALL</code> </p>
type ListAssetsFilterEnum string

const (
	ListAssetsFilterEnumAll      ListAssetsFilterEnum = "ALL"
	ListAssetsFilterEnumTopLevel ListAssetsFilterEnum = "TOP_LEVEL"
)

func (e ListAssetsFilterEnum) ToPointer() *ListAssetsFilterEnum {
	return &e
}

func (e *ListAssetsFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "TOP_LEVEL":
		*e = ListAssetsFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAssetsFilterEnum: %v", v)
	}
}

type ListAssetsRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID of the asset model by which to filter the list of assets. This parameter is required if you choose <code>ALL</code> for <code>filter</code>.
	AssetModelID *string `queryParam:"style=form,explode=true,name=assetModelId"`
	// <p>The filter for the requested list of assets. Choose one of the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all assets for a given asset model ID. The <code>assetModelId</code> parameter is required if you filter by <code>ALL</code>.</p> </li> <li> <p> <code>TOP_LEVEL</code> – The list includes only top-level assets in the asset hierarchy tree.</p> </li> </ul> <p>Default: <code>ALL</code> </p>
	Filter *ListAssetsFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// <p>The maximum number of results to return for each paginated request.</p> <p>Default: 50</p>
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to be used for the next set of paginated results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListAssetsResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListAssetsResponse *shared.ListAssetsResponse
	StatusCode         int
	RawResponse        *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
