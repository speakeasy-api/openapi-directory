"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import concatposition as shared_concatposition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Position:
    r"""Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index."""
    
    byte_offset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byteOffset'), 'exclude': lambda f: f is None }})
    r"""Position is a byte offset."""  
    concat_position: Optional[shared_concatposition.ConcatPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concatPosition'), 'exclude': lambda f: f is None }})
    r"""A position that encapsulates an inner position and an index for the inner position. A ConcatPosition can be used by a reader of a source that encapsulates a set of other sources."""  
    end: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'exclude': lambda f: f is None }})
    r"""Position is past all other positions. Also useful for the end position of an unbounded range."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Position is a string key, ordered lexicographically."""  
    record_index: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordIndex'), 'exclude': lambda f: f is None }})
    r"""Position is a record index."""  
    shuffle_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shufflePosition'), 'exclude': lambda f: f is None }})
    r"""CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding)."""  
    