/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The criteria that determine when and how a job abort takes place.
 */
export class CreateJobTemplateRequestBodyAbortConfig extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.AbortCriteria })
  @Expose({ name: "criteriaList" })
  @Type(() => shared.AbortCriteria)
  criteriaList?: shared.AbortCriteria[];
}

/**
 * The configuration that determines how many retries are allowed for each failure type for a job.
 */
export class CreateJobTemplateRequestBodyJobExecutionsRetryConfig extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.RetryCriteria })
  @Expose({ name: "criteriaList" })
  @Type(() => shared.RetryCriteria)
  criteriaList?: shared.RetryCriteria[];
}

/**
 * Allows you to create a staged rollout of a job.
 */
export class CreateJobTemplateRequestBodyJobExecutionsRolloutConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "exponentialRate" })
  @Type(() => shared.ExponentialRolloutRate)
  exponentialRate?: shared.ExponentialRolloutRate;

  @SpeakeasyMetadata()
  @Expose({ name: "maximumPerMinute" })
  maximumPerMinute?: number;
}

/**
 * Configuration for pre-signed S3 URLs.
 */
export class CreateJobTemplateRequestBodyPresignedUrlConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "expiresInSec" })
  expiresInSec?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;
}

/**
 * Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
 */
export class CreateJobTemplateRequestBodyTimeoutConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "inProgressTimeoutInMinutes" })
  inProgressTimeoutInMinutes?: number;
}

export class CreateJobTemplateRequestBody extends SpeakeasyBase {
  /**
   * The criteria that determine when and how a job abort takes place.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "abortConfig" })
  @Type(() => CreateJobTemplateRequestBodyAbortConfig)
  abortConfig?: CreateJobTemplateRequestBodyAbortConfig;

  /**
   * A description of the job document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The job document. Required if you don't specify a value for <code>documentSource</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "document" })
  document?: string;

  /**
   * <p>An S3 link to the job document to use in the template. Required if you don't specify a value for <code>document</code>.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentSource" })
  documentSource?: string;

  /**
   * The ARN of the job to use as the basis for the job template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobArn" })
  jobArn?: string;

  /**
   * The configuration that determines how many retries are allowed for each failure type for a job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobExecutionsRetryConfig" })
  @Type(() => CreateJobTemplateRequestBodyJobExecutionsRetryConfig)
  jobExecutionsRetryConfig?: CreateJobTemplateRequestBodyJobExecutionsRetryConfig;

  /**
   * Allows you to create a staged rollout of a job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobExecutionsRolloutConfig" })
  @Type(() => CreateJobTemplateRequestBodyJobExecutionsRolloutConfig)
  jobExecutionsRolloutConfig?: CreateJobTemplateRequestBodyJobExecutionsRolloutConfig;

  /**
   * Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.
   */
  @SpeakeasyMetadata({ elemType: shared.MaintenanceWindow })
  @Expose({ name: "maintenanceWindows" })
  @Type(() => shared.MaintenanceWindow)
  maintenanceWindows?: shared.MaintenanceWindow[];

  /**
   * Configuration for pre-signed S3 URLs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "presignedUrlConfig" })
  @Type(() => CreateJobTemplateRequestBodyPresignedUrlConfig)
  presignedUrlConfig?: CreateJobTemplateRequestBodyPresignedUrlConfig;

  /**
   * Metadata that can be used to manage the job template.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];

  /**
   * Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeoutConfig" })
  @Type(() => CreateJobTemplateRequestBodyTimeoutConfig)
  timeoutConfig?: CreateJobTemplateRequestBodyTimeoutConfig;
}

export class CreateJobTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateJobTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=jobTemplateId",
  })
  jobTemplateId: string;
}

export class CreateJobTemplateResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createJobTemplateResponse?: shared.CreateJobTemplateResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
