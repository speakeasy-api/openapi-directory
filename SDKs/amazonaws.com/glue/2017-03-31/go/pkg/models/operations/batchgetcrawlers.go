// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetCrawlersXAmzTargetEnum
type BatchGetCrawlersXAmzTargetEnum string

const (
	BatchGetCrawlersXAmzTargetEnumAwsGlueBatchGetCrawlers BatchGetCrawlersXAmzTargetEnum = "AWSGlue.BatchGetCrawlers"
)

func (e *BatchGetCrawlersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSGlue.BatchGetCrawlers":
		*e = BatchGetCrawlersXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetCrawlersXAmzTargetEnum: %s", s)
	}
}

type BatchGetCrawlersRequest struct {
	BatchGetCrawlersRequest shared.BatchGetCrawlersRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              BatchGetCrawlersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetCrawlersResponse struct {
	// Success
	BatchGetCrawlersResponse *shared.BatchGetCrawlersResponse
	ContentType              string
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
