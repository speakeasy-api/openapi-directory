/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The corporation's address.
 */
export class CreateAnEntityParametersCorporationAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * The individual's address.
 */
export class CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
 */
export class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense extends SpeakeasyBase {
  /**
   * The driver's license's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;

  /**
   * The state that issued the provided driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * Information about the identification document provided. Required if `method` is equal to `other`.
 */
export class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther extends SpeakeasyBase {
  /**
   * The two-character ISO 3166-1 code representing the country that issued the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * A description of the document submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The document's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * The identifier of the File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * Information about the passport used for identification. Required if `method` is equal to `passport`.
 */
export class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport extends SpeakeasyBase {
  /**
   * The country that issued the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * The passport's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * A means of verifying the person's identity.
 */
export class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification extends SpeakeasyBase {
  /**
   * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drivers_license" })
  @Type(
    () =>
      CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense
  )
  driversLicense?: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense;

  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum;

  /**
   * An identification number that can be used to verify the individual's identity, such as a social security number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * Information about the identification document provided. Required if `method` is equal to `other`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "other" })
  @Type(
    () =>
      CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther
  )
  other?: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther;

  /**
   * Information about the passport used for identification. Required if `method` is equal to `passport`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passport" })
  @Type(
    () =>
      CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport
  )
  passport?: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport;
}

/**
 * Personal details for the beneficial owner.
 */
export class CreateAnEntityParametersCorporationBeneficialOwnersIndividual extends SpeakeasyBase {
  /**
   * The individual's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(
    () => CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress
  )
  address: CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress;

  /**
   * The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed_no_us_tax_id" })
  confirmedNoUsTaxId?: boolean;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(
    () =>
      CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification
  )
  identification: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Why this person is considered a beneficial owner of the entity.
 */
export enum CreateAnEntityParametersCorporationBeneficialOwnersProngEnum {
  Ownership = "ownership",
  Control = "control",
}

export class CreateAnEntityParametersCorporationBeneficialOwners extends SpeakeasyBase {
  /**
   * This person's role or title within the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_title" })
  companyTitle?: string;

  /**
   * Personal details for the beneficial owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individual" })
  @Type(() => CreateAnEntityParametersCorporationBeneficialOwnersIndividual)
  individual: CreateAnEntityParametersCorporationBeneficialOwnersIndividual;

  /**
   * Why this person is considered a beneficial owner of the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prong" })
  prong: CreateAnEntityParametersCorporationBeneficialOwnersProngEnum;
}

/**
 * Details of the corporation entity to create. Required if `structure` is equal to `corporation`.
 */
export class CreateAnEntityParametersCorporation extends SpeakeasyBase {
  /**
   * The corporation's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateAnEntityParametersCorporationAddress)
  address: CreateAnEntityParametersCorporationAddress;

  /**
   * The identifying details of anyone controlling or owning 25% or more of the corporation.
   */
  @SpeakeasyMetadata({
    elemType: CreateAnEntityParametersCorporationBeneficialOwners,
  })
  @Expose({ name: "beneficial_owners" })
  @Type(() => CreateAnEntityParametersCorporationBeneficialOwners)
  beneficialOwners: CreateAnEntityParametersCorporationBeneficialOwners[];

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incorporation_state" })
  incorporationState?: string;

  /**
   * The legal name of the corporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Employer Identification Number (EIN) for the corporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_identifier" })
  taxIdentifier: string;

  /**
   * The website of the corporation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "website" })
  website?: string;
}

/**
 * The individual's address.
 */
export class CreateAnEntityParametersJointIndividualsAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
 */
export class CreateAnEntityParametersJointIndividualsIdentificationDriversLicense extends SpeakeasyBase {
  /**
   * The driver's license's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;

  /**
   * The state that issued the provided driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum CreateAnEntityParametersJointIndividualsIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * Information about the identification document provided. Required if `method` is equal to `other`.
 */
export class CreateAnEntityParametersJointIndividualsIdentificationOther extends SpeakeasyBase {
  /**
   * The two-character ISO 3166-1 code representing the country that issued the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * A description of the document submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The document's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * The identifier of the File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * Information about the passport used for identification. Required if `method` is equal to `passport`.
 */
export class CreateAnEntityParametersJointIndividualsIdentificationPassport extends SpeakeasyBase {
  /**
   * The country that issued the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * The passport's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * A means of verifying the person's identity.
 */
export class CreateAnEntityParametersJointIndividualsIdentification extends SpeakeasyBase {
  /**
   * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drivers_license" })
  @Type(
    () => CreateAnEntityParametersJointIndividualsIdentificationDriversLicense
  )
  driversLicense?: CreateAnEntityParametersJointIndividualsIdentificationDriversLicense;

  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: CreateAnEntityParametersJointIndividualsIdentificationMethodEnum;

  /**
   * An identification number that can be used to verify the individual's identity, such as a social security number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * Information about the identification document provided. Required if `method` is equal to `other`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "other" })
  @Type(() => CreateAnEntityParametersJointIndividualsIdentificationOther)
  other?: CreateAnEntityParametersJointIndividualsIdentificationOther;

  /**
   * Information about the passport used for identification. Required if `method` is equal to `passport`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passport" })
  @Type(() => CreateAnEntityParametersJointIndividualsIdentificationPassport)
  passport?: CreateAnEntityParametersJointIndividualsIdentificationPassport;
}

export class CreateAnEntityParametersJointIndividuals extends SpeakeasyBase {
  /**
   * The individual's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateAnEntityParametersJointIndividualsAddress)
  address: CreateAnEntityParametersJointIndividualsAddress;

  /**
   * The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed_no_us_tax_id" })
  confirmedNoUsTaxId?: boolean;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => CreateAnEntityParametersJointIndividualsIdentification)
  identification: CreateAnEntityParametersJointIndividualsIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Details of the joint entity to create. Required if `structure` is equal to `joint`.
 */
export class CreateAnEntityParametersJoint extends SpeakeasyBase {
  /**
   * The two individuals that share control of the entity.
   */
  @SpeakeasyMetadata({ elemType: CreateAnEntityParametersJointIndividuals })
  @Expose({ name: "individuals" })
  @Type(() => CreateAnEntityParametersJointIndividuals)
  individuals: CreateAnEntityParametersJointIndividuals[];

  /**
   * The name of the joint entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * The individual's address.
 */
export class CreateAnEntityParametersNaturalPersonAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
 */
export class CreateAnEntityParametersNaturalPersonIdentificationDriversLicense extends SpeakeasyBase {
  /**
   * The driver's license's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;

  /**
   * The state that issued the provided driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum CreateAnEntityParametersNaturalPersonIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * Information about the identification document provided. Required if `method` is equal to `other`.
 */
export class CreateAnEntityParametersNaturalPersonIdentificationOther extends SpeakeasyBase {
  /**
   * The two-character ISO 3166-1 code representing the country that issued the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * A description of the document submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The document's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * The identifier of the File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * Information about the passport used for identification. Required if `method` is equal to `passport`.
 */
export class CreateAnEntityParametersNaturalPersonIdentificationPassport extends SpeakeasyBase {
  /**
   * The country that issued the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * The passport's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * A means of verifying the person's identity.
 */
export class CreateAnEntityParametersNaturalPersonIdentification extends SpeakeasyBase {
  /**
   * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drivers_license" })
  @Type(() => CreateAnEntityParametersNaturalPersonIdentificationDriversLicense)
  driversLicense?: CreateAnEntityParametersNaturalPersonIdentificationDriversLicense;

  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: CreateAnEntityParametersNaturalPersonIdentificationMethodEnum;

  /**
   * An identification number that can be used to verify the individual's identity, such as a social security number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * Information about the identification document provided. Required if `method` is equal to `other`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "other" })
  @Type(() => CreateAnEntityParametersNaturalPersonIdentificationOther)
  other?: CreateAnEntityParametersNaturalPersonIdentificationOther;

  /**
   * Information about the passport used for identification. Required if `method` is equal to `passport`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passport" })
  @Type(() => CreateAnEntityParametersNaturalPersonIdentificationPassport)
  passport?: CreateAnEntityParametersNaturalPersonIdentificationPassport;
}

/**
 * Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.
 */
export class CreateAnEntityParametersNaturalPerson extends SpeakeasyBase {
  /**
   * The individual's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateAnEntityParametersNaturalPersonAddress)
  address: CreateAnEntityParametersNaturalPersonAddress;

  /**
   * The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed_no_us_tax_id" })
  confirmedNoUsTaxId?: boolean;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => CreateAnEntityParametersNaturalPersonIdentification)
  identification: CreateAnEntityParametersNaturalPersonIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The relationship between your group and the entity.
 */
export enum CreateAnEntityParametersRelationshipEnum {
  Affiliated = "affiliated",
  Informational = "informational",
  Unaffiliated = "unaffiliated",
}

/**
 * The type of Entity to create.
 */
export enum CreateAnEntityParametersStructureEnum {
  Corporation = "corporation",
  NaturalPerson = "natural_person",
  Joint = "joint",
  Trust = "trust",
}

export class CreateAnEntityParametersSupplementalDocuments extends SpeakeasyBase {
  /**
   * The identifier of the File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * The trust's address.
 */
export class CreateAnEntityParametersTrustAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
 */
export enum CreateAnEntityParametersTrustCategoryEnum {
  Revocable = "revocable",
  Irrevocable = "irrevocable",
}

/**
 * The individual's address.
 */
export class CreateAnEntityParametersTrustGrantorAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
 */
export class CreateAnEntityParametersTrustGrantorIdentificationDriversLicense extends SpeakeasyBase {
  /**
   * The driver's license's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;

  /**
   * The state that issued the provided driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum CreateAnEntityParametersTrustGrantorIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * Information about the identification document provided. Required if `method` is equal to `other`.
 */
export class CreateAnEntityParametersTrustGrantorIdentificationOther extends SpeakeasyBase {
  /**
   * The two-character ISO 3166-1 code representing the country that issued the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * A description of the document submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The document's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * The identifier of the File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * Information about the passport used for identification. Required if `method` is equal to `passport`.
 */
export class CreateAnEntityParametersTrustGrantorIdentificationPassport extends SpeakeasyBase {
  /**
   * The country that issued the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * The passport's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * A means of verifying the person's identity.
 */
export class CreateAnEntityParametersTrustGrantorIdentification extends SpeakeasyBase {
  /**
   * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drivers_license" })
  @Type(() => CreateAnEntityParametersTrustGrantorIdentificationDriversLicense)
  driversLicense?: CreateAnEntityParametersTrustGrantorIdentificationDriversLicense;

  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: CreateAnEntityParametersTrustGrantorIdentificationMethodEnum;

  /**
   * An identification number that can be used to verify the individual's identity, such as a social security number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * Information about the identification document provided. Required if `method` is equal to `other`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "other" })
  @Type(() => CreateAnEntityParametersTrustGrantorIdentificationOther)
  other?: CreateAnEntityParametersTrustGrantorIdentificationOther;

  /**
   * Information about the passport used for identification. Required if `method` is equal to `passport`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passport" })
  @Type(() => CreateAnEntityParametersTrustGrantorIdentificationPassport)
  passport?: CreateAnEntityParametersTrustGrantorIdentificationPassport;
}

/**
 * The grantor of the trust. Required if `category` is equal to `revocable`.
 */
export class CreateAnEntityParametersTrustGrantor extends SpeakeasyBase {
  /**
   * The individual's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateAnEntityParametersTrustGrantorAddress)
  address: CreateAnEntityParametersTrustGrantorAddress;

  /**
   * The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed_no_us_tax_id" })
  confirmedNoUsTaxId?: boolean;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => CreateAnEntityParametersTrustGrantorIdentification)
  identification: CreateAnEntityParametersTrustGrantorIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The individual's address.
 */
export class CreateAnEntityParametersTrustTrusteesIndividualAddress extends SpeakeasyBase {
  /**
   * The city of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * The first line of the address. This is usually the street number and street.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line1" })
  line1: string;

  /**
   * The second line of the address. This might be the floor or room number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line2" })
  line2?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * The ZIP code of the address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip: string;
}

/**
 * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
 */
export class CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense extends SpeakeasyBase {
  /**
   * The driver's license's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;

  /**
   * The state that issued the provided driver's license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;
}

/**
 * A method that can be used to verify the individual's identity.
 */
export enum CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum {
  SocialSecurityNumber = "social_security_number",
  IndividualTaxpayerIdentificationNumber = "individual_taxpayer_identification_number",
  Passport = "passport",
  DriversLicense = "drivers_license",
  Other = "other",
}

/**
 * Information about the identification document provided. Required if `method` is equal to `other`.
 */
export class CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther extends SpeakeasyBase {
  /**
   * The two-character ISO 3166-1 code representing the country that issued the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * A description of the document submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The document's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * The identifier of the File containing the document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * Information about the passport used for identification. Required if `method` is equal to `passport`.
 */
export class CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport extends SpeakeasyBase {
  /**
   * The country that issued the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * The passport's expiration date in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate: Date;

  /**
   * The identifier of the File containing the passport.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * A means of verifying the person's identity.
 */
export class CreateAnEntityParametersTrustTrusteesIndividualIdentification extends SpeakeasyBase {
  /**
   * Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drivers_license" })
  @Type(
    () =>
      CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense
  )
  driversLicense?: CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense;

  /**
   * A method that can be used to verify the individual's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method: CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum;

  /**
   * An identification number that can be used to verify the individual's identity, such as a social security number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * Information about the identification document provided. Required if `method` is equal to `other`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "other" })
  @Type(
    () => CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther
  )
  other?: CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther;

  /**
   * Information about the passport used for identification. Required if `method` is equal to `passport`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passport" })
  @Type(
    () => CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport
  )
  passport?: CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport;
}

/**
 * Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.
 */
export class CreateAnEntityParametersTrustTrusteesIndividual extends SpeakeasyBase {
  /**
   * The individual's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateAnEntityParametersTrustTrusteesIndividualAddress)
  address: CreateAnEntityParametersTrustTrusteesIndividualAddress;

  /**
   * The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed_no_us_tax_id" })
  confirmedNoUsTaxId?: boolean;

  /**
   * The person's date of birth in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * A means of verifying the person's identity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identification" })
  @Type(() => CreateAnEntityParametersTrustTrusteesIndividualIdentification)
  identification: CreateAnEntityParametersTrustTrusteesIndividualIdentification;

  /**
   * The person's legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The structure of the trustee.
 */
export enum CreateAnEntityParametersTrustTrusteesStructureEnum {
  Individual = "individual",
}

export class CreateAnEntityParametersTrustTrustees extends SpeakeasyBase {
  /**
   * Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "individual" })
  @Type(() => CreateAnEntityParametersTrustTrusteesIndividual)
  individual?: CreateAnEntityParametersTrustTrusteesIndividual;

  /**
   * The structure of the trustee.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "structure" })
  structure: CreateAnEntityParametersTrustTrusteesStructureEnum;
}

/**
 * Details of the trust entity to create. Required if `structure` is equal to `trust`.
 */
export class CreateAnEntityParametersTrust extends SpeakeasyBase {
  /**
   * The trust's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => CreateAnEntityParametersTrustAddress)
  address: CreateAnEntityParametersTrustAddress;

  /**
   * Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: CreateAnEntityParametersTrustCategoryEnum;

  /**
   * The identifier of the File containing the formation document of the trust.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formation_document_file_id" })
  formationDocumentFileId?: string;

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formation_state" })
  formationState?: string;

  /**
   * The grantor of the trust. Required if `category` is equal to `revocable`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "grantor" })
  @Type(() => CreateAnEntityParametersTrustGrantor)
  grantor?: CreateAnEntityParametersTrustGrantor;

  /**
   * The legal name of the trust.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_identifier" })
  taxIdentifier?: string;

  /**
   * The trustees of the trust.
   */
  @SpeakeasyMetadata({ elemType: CreateAnEntityParametersTrustTrustees })
  @Expose({ name: "trustees" })
  @Type(() => CreateAnEntityParametersTrustTrustees)
  trustees: CreateAnEntityParametersTrustTrustees[];
}

export class CreateAnEntityParameters extends SpeakeasyBase {
  /**
   * Details of the corporation entity to create. Required if `structure` is equal to `corporation`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "corporation" })
  @Type(() => CreateAnEntityParametersCorporation)
  corporation?: CreateAnEntityParametersCorporation;

  /**
   * The description you choose to give the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Details of the joint entity to create. Required if `structure` is equal to `joint`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "joint" })
  @Type(() => CreateAnEntityParametersJoint)
  joint?: CreateAnEntityParametersJoint;

  /**
   * Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "natural_person" })
  @Type(() => CreateAnEntityParametersNaturalPerson)
  naturalPerson?: CreateAnEntityParametersNaturalPerson;

  /**
   * The relationship between your group and the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationship" })
  relationship: CreateAnEntityParametersRelationshipEnum;

  /**
   * The type of Entity to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "structure" })
  structure: CreateAnEntityParametersStructureEnum;

  /**
   * Additional documentation associated with the entity.
   */
  @SpeakeasyMetadata({
    elemType: CreateAnEntityParametersSupplementalDocuments,
  })
  @Expose({ name: "supplemental_documents" })
  @Type(() => CreateAnEntityParametersSupplementalDocuments)
  supplementalDocuments?: CreateAnEntityParametersSupplementalDocuments[];

  /**
   * Details of the trust entity to create. Required if `structure` is equal to `trust`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trust" })
  @Type(() => CreateAnEntityParametersTrust)
  trust?: CreateAnEntityParametersTrust;
}
