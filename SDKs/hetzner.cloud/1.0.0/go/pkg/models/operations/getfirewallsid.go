// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetFirewallsIDRequest struct {
	// ID of the resource
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum - Type of resource referenced
type GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum string

const (
	GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnumServer GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum = "server"
)

func (e *GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		*e = GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum: %s", s)
	}
}

type GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResources struct {
	Server *GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesServer `json:"server,omitempty"`
	// Type of resource referenced
	Type *GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum `json:"type,omitempty"`
}

type GetFirewallsIDFirewallResponseFirewallAppliedToLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

type GetFirewallsIDFirewallResponseFirewallAppliedToServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum - Type of resource referenced
type GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum string

const (
	GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnumServer        GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum = "server"
	GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnumLabelSelector GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum = "label_selector"
)

func (e *GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		*e = GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum: %s", s)
	}
}

type GetFirewallsIDFirewallResponseFirewallAppliedTo struct {
	AppliedToResources []GetFirewallsIDFirewallResponseFirewallAppliedToAppliedToResources `json:"applied_to_resources,omitempty"`
	LabelSelector      *GetFirewallsIDFirewallResponseFirewallAppliedToLabelSelector       `json:"label_selector,omitempty"`
	Server             *GetFirewallsIDFirewallResponseFirewallAppliedToServer              `json:"server,omitempty"`
	// Type of resource referenced
	Type GetFirewallsIDFirewallResponseFirewallAppliedToTypeEnum `json:"type"`
}

// GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum - Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
type GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum string

const (
	GetFirewallsIDFirewallResponseFirewallRuleDirectionEnumIn  GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum = "in"
	GetFirewallsIDFirewallResponseFirewallRuleDirectionEnumOut GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum = "out"
)

func (e *GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in":
		fallthrough
	case "out":
		*e = GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum: %s", s)
	}
}

// GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum - Type of traffic to allow
type GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum string

const (
	GetFirewallsIDFirewallResponseFirewallRuleProtocolEnumTCP  GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "tcp"
	GetFirewallsIDFirewallResponseFirewallRuleProtocolEnumUDP  GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "udp"
	GetFirewallsIDFirewallResponseFirewallRuleProtocolEnumIcmp GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "icmp"
	GetFirewallsIDFirewallResponseFirewallRuleProtocolEnumEsp  GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "esp"
	GetFirewallsIDFirewallResponseFirewallRuleProtocolEnumGre  GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum = "gre"
)

func (e *GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		fallthrough
	case "esp":
		fallthrough
	case "gre":
		*e = GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum: %s", s)
	}
}

type GetFirewallsIDFirewallResponseFirewallRule struct {
	// Description of the Rule
	Description *string `json:"description,omitempty"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	DestinationIps []string `json:"destination_ips,omitempty"`
	// Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
	Direction GetFirewallsIDFirewallResponseFirewallRuleDirectionEnum `json:"direction"`
	// Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
	Port *string `json:"port,omitempty"`
	// Type of traffic to allow
	Protocol GetFirewallsIDFirewallResponseFirewallRuleProtocolEnum `json:"protocol"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	SourceIps []string `json:"source_ips,omitempty"`
}

type GetFirewallsIDFirewallResponseFirewall struct {
	AppliedTo []GetFirewallsIDFirewallResponseFirewallAppliedTo `json:"applied_to"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels,omitempty"`
	// Name of the Resource. Must be unique per Project.
	Name  string                                       `json:"name"`
	Rules []GetFirewallsIDFirewallResponseFirewallRule `json:"rules"`
}

// GetFirewallsIDFirewallResponse - The `firewall` key contains a Firewall object
type GetFirewallsIDFirewallResponse struct {
	Firewall GetFirewallsIDFirewallResponseFirewall `json:"firewall"`
}

type GetFirewallsIDResponse struct {
	ContentType string
	// The `firewall` key contains a Firewall object
	FirewallResponse *GetFirewallsIDFirewallResponse
	StatusCode       int
	RawResponse      *http.Response
}
