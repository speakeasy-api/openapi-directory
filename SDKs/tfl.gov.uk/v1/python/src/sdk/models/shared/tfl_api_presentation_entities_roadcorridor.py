"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesRoadCorridor:
    
    bounds: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bounds'), 'exclude': lambda f: f is None }})
    r"""The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate
                pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\" 
    """  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the Corridor e.g. \\"North Circular (A406)\\". This
                may be identical to the Id.
    """  
    envelope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('envelope'), 'exclude': lambda f: f is None }})
    r"""The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon
                in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\" 
    """  
    group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""The group name of the Corridor e.g. \\"Central London\\". Most corridors are not grouped, in which case this field can be null."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Id of the Corridor e.g. \\"A406\\" """  
    status_aggregation_end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusAggregationEndDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end of the period over which status has been aggregated, or null if this is the current corridor status."""  
    status_aggregation_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusAggregationStartDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start of the period over which status has been aggregated, or null if this is the current corridor status."""  
    status_severity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusSeverity'), 'exclude': lambda f: f is None }})
    r"""Standard multi-mode status severity code"""  
    status_severity_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusSeverityDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the status severity as applied to RoadCorridors"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL to retrieve this Corridor."""  
    