/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The event filter.
 */
export class CreateEventIntegrationRequestBodyEventFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Source" })
  source?: string;
}

export class CreateEventIntegrationRequestBody extends SpeakeasyBase {
  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientToken" })
  clientToken?: string;

  /**
   * The description of the event integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * The EventBridge bus.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EventBridgeBus" })
  eventBridgeBus: string;

  /**
   * The event filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EventFilter" })
  @Type(() => CreateEventIntegrationRequestBodyEventFilter)
  eventFilter: CreateEventIntegrationRequestBodyEventFilter;

  /**
   * The name of the event integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class CreateEventIntegrationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateEventIntegrationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateEventIntegrationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createEventIntegrationResponse?: shared.CreateEventIntegrationResponse;

  /**
   * DuplicateResourceException
   */
  @SpeakeasyMetadata()
  duplicateResourceException?: any;

  /**
   * InternalServiceError
   */
  @SpeakeasyMetadata()
  internalServiceError?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceQuotaExceededException
   */
  @SpeakeasyMetadata()
  resourceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
