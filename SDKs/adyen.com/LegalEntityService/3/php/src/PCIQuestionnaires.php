<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PCIQuestionnaires 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get PCI questionnaire details
     * 
     * Get a list of signed PCI questionnaires.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesResponse
     */
	public function getLegalEntitiesIdPciQuestionnaires(
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/pciQuestionnaires', \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPciQuestionnaireInfosResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetPciQuestionnaireInfosResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get PCI questionnaire
     * 
     * Returns the signed PCI questionnaire.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidResponse
     */
	public function getLegalEntitiesIdPciQuestionnairesPciid(
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/pciQuestionnaires/{pciid}', \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLegalEntitiesIdPciQuestionnairesPciidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPciQuestionnaireResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetPciQuestionnaireResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate PCI questionnaire
     * 
     * Generates the required PCI questionnaire based on the user's [salesChannel](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__reqParam_salesChannels). If multiple questionnaires are required, this request creates a single consodilated document to be signed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesResponse
     */
	public function postLegalEntitiesIdPciQuestionnairesGeneratePciTemplates(
        \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/pciQuestionnaires/generatePciTemplates', \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generatePciDescriptionRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesGeneratePciTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generatePciDescriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GeneratePciDescriptionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sign PCI questionnaire
     * 
     * Signs the required PCI questionnaire.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesResponse
     */
	public function postLegalEntitiesIdPciQuestionnairesSignPciTemplates(
        \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legalEntities/{id}/pciQuestionnaires/signPciTemplates', \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pciSigningRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLegalEntitiesIdPciQuestionnairesSignPciTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pciSigningResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PciSigningResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
}