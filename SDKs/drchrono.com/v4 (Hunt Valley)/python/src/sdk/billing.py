"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Billing:
    r"""Create and manage billing resources"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def billing_profiles_list(self, request: operations.BillingProfilesListRequest, security: operations.BillingProfilesListSecurity) -> operations.BillingProfilesListResponse:
        r"""Retrieve or search billing profiles"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/billing_profiles'
        
        query_params = utils.get_query_params(operations.BillingProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BillingProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BillingProfilesList200ApplicationJSON])
                res.billing_profiles_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def billing_profiles_read(self, request: operations.BillingProfilesReadRequest, security: operations.BillingProfilesReadSecurity) -> operations.BillingProfilesReadResponse:
        r"""Retrieve an existing billing profiles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BillingProfilesReadRequest, base_url, '/api/billing_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.BillingProfilesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BillingProfilesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BillingProfile])
                res.billing_profile = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def comm_logs_create(self, request: operations.CommLogsCreateRequest, security: operations.CommLogsCreateSecurity) -> operations.CommLogsCreateResponse:
        r"""Create communication (phone call) logs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/comm_logs'
        
        query_params = utils.get_query_params(operations.CommLogsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CommLogsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PhoneCallLog])
                res.phone_call_log = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def comm_logs_list(self, request: operations.CommLogsListRequest, security: operations.CommLogsListSecurity) -> operations.CommLogsListResponse:
        r"""Retrieve or search communicatioin (phone call) logs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/comm_logs'
        
        query_params = utils.get_query_params(operations.CommLogsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CommLogsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CommLogsList200ApplicationJSON])
                res.comm_logs_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def comm_logs_partial_update(self, request: operations.CommLogsPartialUpdateRequest, security: operations.CommLogsPartialUpdateSecurity) -> operations.CommLogsPartialUpdateResponse:
        r"""Update an existing communication (phone call) logs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CommLogsPartialUpdateRequest, base_url, '/api/comm_logs/{id}', request)
        
        query_params = utils.get_query_params(operations.CommLogsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CommLogsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def comm_logs_read(self, request: operations.CommLogsReadRequest, security: operations.CommLogsReadSecurity) -> operations.CommLogsReadResponse:
        r"""Retrieve an existing communication (phone call) logs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CommLogsReadRequest, base_url, '/api/comm_logs/{id}', request)
        
        query_params = utils.get_query_params(operations.CommLogsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CommLogsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PhoneCallLog])
                res.phone_call_log = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def comm_logs_update(self, request: operations.CommLogsUpdateRequest, security: operations.CommLogsUpdateSecurity) -> operations.CommLogsUpdateResponse:
        r"""Update an existing communication (phone call) logs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CommLogsUpdateRequest, base_url, '/api/comm_logs/{id}', request)
        
        query_params = utils.get_query_params(operations.CommLogsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CommLogsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def custom_insurance_plan_names_list(self, request: operations.CustomInsurancePlanNamesListRequest, security: operations.CustomInsurancePlanNamesListSecurity) -> operations.CustomInsurancePlanNamesListResponse:
        r"""Retrieve or search custom insurance plan names"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/custom_insurance_plan_names'
        
        query_params = utils.get_query_params(operations.CustomInsurancePlanNamesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomInsurancePlanNamesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CustomInsurancePlanNamesList200ApplicationJSON])
                res.custom_insurance_plan_names_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_insurance_plan_names_read(self, request: operations.CustomInsurancePlanNamesReadRequest, security: operations.CustomInsurancePlanNamesReadSecurity) -> operations.CustomInsurancePlanNamesReadResponse:
        r"""Retrieve an existing custom insurance plan name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomInsurancePlanNamesReadRequest, base_url, '/api/custom_insurance_plan_names/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomInsurancePlanNamesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomInsurancePlanNamesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomInsurancePlanName])
                res.custom_insurance_plan_name = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def eligibility_checks_list(self, request: operations.EligibilityChecksListRequest, security: operations.EligibilityChecksListSecurity) -> operations.EligibilityChecksListResponse:
        r"""Retrieve or search past eligibility checks for patient"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/eligibility_checks'
        
        query_params = utils.get_query_params(operations.EligibilityChecksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EligibilityChecksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EligibilityChecksList200ApplicationJSON])
                res.eligibility_checks_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def eligibility_checks_read(self, request: operations.EligibilityChecksReadRequest, security: operations.EligibilityChecksReadSecurity) -> operations.EligibilityChecksReadResponse:
        r"""Retrieve an existing past eligibility check"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EligibilityChecksReadRequest, base_url, '/api/eligibility_checks/{id}', request)
        
        query_params = utils.get_query_params(operations.EligibilityChecksReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EligibilityChecksReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Coverage])
                res.coverage = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def line_items_create(self, request: operations.LineItemsCreateRequest, security: operations.LineItemsCreateSecurity) -> operations.LineItemsCreateResponse:
        r"""Create billing line item for appointments"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/line_items'
        
        query_params = utils.get_query_params(operations.LineItemsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LineItemsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BillingLineItem])
                res.billing_line_item = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def line_items_delete(self, request: operations.LineItemsDeleteRequest, security: operations.LineItemsDeleteSecurity) -> operations.LineItemsDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.LineItemsDeleteRequest, base_url, '/api/line_items/{id}', request)
        
        query_params = utils.get_query_params(operations.LineItemsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LineItemsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def line_items_list(self, request: operations.LineItemsListRequest, security: operations.LineItemsListSecurity) -> operations.LineItemsListResponse:
        r"""Retrieve or search billing line items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/line_items'
        
        query_params = utils.get_query_params(operations.LineItemsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LineItemsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LineItemsList200ApplicationJSON])
                res.line_items_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def line_items_partial_update(self, request: operations.LineItemsPartialUpdateRequest, security: operations.LineItemsPartialUpdateSecurity) -> operations.LineItemsPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.LineItemsPartialUpdateRequest, base_url, '/api/line_items/{id}', request)
        
        query_params = utils.get_query_params(operations.LineItemsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LineItemsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def line_items_read(self, request: operations.LineItemsReadRequest, security: operations.LineItemsReadSecurity) -> operations.LineItemsReadResponse:
        r"""Retrieve an existing billing line item"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LineItemsReadRequest, base_url, '/api/line_items/{id}', request)
        
        query_params = utils.get_query_params(operations.LineItemsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LineItemsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BillingLineItem])
                res.billing_line_item = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def line_items_update(self, request: operations.LineItemsUpdateRequest, security: operations.LineItemsUpdateSecurity) -> operations.LineItemsUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.LineItemsUpdateRequest, base_url, '/api/line_items/{id}', request)
        
        query_params = utils.get_query_params(operations.LineItemsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LineItemsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_payment_log_list(self, request: operations.PatientPaymentLogListRequest, security: operations.PatientPaymentLogListSecurity) -> operations.PatientPaymentLogListResponse:
        r"""Retrieve or search patient payment logs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_payment_log'
        
        query_params = utils.get_query_params(operations.PatientPaymentLogListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPaymentLogListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientPaymentLogList200ApplicationJSON])
                res.patient_payment_log_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_payment_log_read(self, request: operations.PatientPaymentLogReadRequest, security: operations.PatientPaymentLogReadSecurity) -> operations.PatientPaymentLogReadResponse:
        r"""Retrieve an existing patient payment log"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientPaymentLogReadRequest, base_url, '/api/patient_payment_log/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientPaymentLogReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPaymentLogReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CashPaymentLog])
                res.cash_payment_log = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_payments_create(self, request: operations.PatientPaymentsCreateRequest, security: operations.PatientPaymentsCreateSecurity) -> operations.PatientPaymentsCreateResponse:
        r"""Create patient payment"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_payments'
        
        query_params = utils.get_query_params(operations.PatientPaymentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPaymentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CashPayment])
                res.cash_payment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_payments_list(self, request: operations.PatientPaymentsListRequest, security: operations.PatientPaymentsListSecurity) -> operations.PatientPaymentsListResponse:
        r"""Retrieve or search patient payments"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_payments'
        
        query_params = utils.get_query_params(operations.PatientPaymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPaymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientPaymentsList200ApplicationJSON])
                res.patient_payments_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_payments_read(self, request: operations.PatientPaymentsReadRequest, security: operations.PatientPaymentsReadSecurity) -> operations.PatientPaymentsReadResponse:
        r"""Retrieve an existing patient payment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientPaymentsReadRequest, base_url, '/api/patient_payments/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientPaymentsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPaymentsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CashPayment])
                res.cash_payment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def procedures_list(self, request: operations.ProceduresListRequest, security: operations.ProceduresListSecurity) -> operations.ProceduresListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/procedures'
        
        query_params = utils.get_query_params(operations.ProceduresListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProceduresListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProceduresList200ApplicationJSON])
                res.procedures_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def procedures_read(self, request: operations.ProceduresReadRequest, security: operations.ProceduresReadSecurity) -> operations.ProceduresReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProceduresReadRequest, base_url, '/api/procedures/{id}', request)
        
        query_params = utils.get_query_params(operations.ProceduresReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProceduresReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BillingLineItem])
                res.billing_line_item = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def transactions_list(self, request: operations.TransactionsListRequest, security: operations.TransactionsListSecurity) -> operations.TransactionsListResponse:
        r"""Retrieve or search insurance transactions associated with billing line items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/transactions'
        
        query_params = utils.get_query_params(operations.TransactionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransactionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TransactionsList200ApplicationJSON])
                res.transactions_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def transactions_read(self, request: operations.TransactionsReadRequest, security: operations.TransactionsReadSecurity) -> operations.TransactionsReadResponse:
        r"""Retrieve an existing insurance transaction"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransactionsReadRequest, base_url, '/api/transactions/{id}', request)
        
        query_params = utils.get_query_params(operations.TransactionsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransactionsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LineItemTransaction])
                res.line_item_transaction = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    