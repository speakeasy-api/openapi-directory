"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsJSONSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum(str, Enum):
    CUSTOMER = 'customer'
    PROVIDER = 'provider'
    BANK = 'bank'
    CASH_WOUCHER = 'cashWoucher'
    FISCAL = 'fiscal'
    INSURANCE = 'insurance'
    SOCIAL = 'social'
    OTHER = 'other'
    PERMANENT = 'permanent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2Accounting:
    
    accounted_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountedOn'), 'exclude': lambda f: f is None }})  
    workbook: Optional[PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2AccountingWorkbookEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Workbook'), 'exclude': lambda f: f is None }})  
    year_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YearMonth'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2File:
    
    content64_encoded: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content64Encoded'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2:
    
    file: PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2File = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('File') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title') }})  
    accounting: Optional[PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON2Accounting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Accounting'), 'exclude': lambda f: f is None }})  
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Author'), 'exclude': lambda f: f is None }})  
    begin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Begin'), 'exclude': lambda f: f is None }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    employee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeContributions'), 'exclude': lambda f: f is None }})  
    employer_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerContributions'), 'exclude': lambda f: f is None }})  
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('End'), 'exclude': lambda f: f is None }})  
    fixed_gross_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedGrossAmount'), 'exclude': lambda f: f is None }})  
    net_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetAmount'), 'exclude': lambda f: f is None }})  
    total_gross_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalGrossAmount'), 'exclude': lambda f: f is None }})  
    vacation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Vacation'), 'exclude': lambda f: f is None }})  
    variable_gross_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VariableGrossAmount'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsApplicationJSON1:
    
    document_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentId') }})  
    begin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Begin'), 'exclude': lambda f: f is None }})  
    employee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeContributions'), 'exclude': lambda f: f is None }})  
    employer_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployerContributions'), 'exclude': lambda f: f is None }})  
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('End'), 'exclude': lambda f: f is None }})  
    fixed_gross_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedGrossAmount'), 'exclude': lambda f: f is None }})  
    net_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetAmount'), 'exclude': lambda f: f is None }})  
    total_gross_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalGrossAmount'), 'exclude': lambda f: f is None }})  
    vacation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Vacation'), 'exclude': lambda f: f is None }})  
    variable_gross_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VariableGrossAmount'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsJSONRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder employee"""  
    request_body: Any = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Payslip to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSON:
    r"""Id of document created"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDPayslipsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    post_spaces_space_id_folders_id_payslips_json_201_application_json_object: Optional[PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSON] = dataclasses.field(default=None)
    r"""Id of document created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    