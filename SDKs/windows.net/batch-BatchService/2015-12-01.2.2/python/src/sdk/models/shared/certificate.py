"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import deletecertificateerror as shared_deletecertificateerror
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CertificatePreviousStateEnum(str, Enum):
    r"""Gets or sets the previous state of the certificate. This property is not set if the certificate is in its initial Active state."""
    ACTIVE = 'active'
    DELETING = 'deleting'
    DELETEFAILED = 'deletefailed'

class CertificateStateEnum(str, Enum):
    r"""Gets or sets the current state of the certificate."""
    ACTIVE = 'active'
    DELETING = 'deleting'
    DELETEFAILED = 'deletefailed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Certificate:
    r"""A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine."""
    
    delete_certificate_error: Optional[shared_deletecertificateerror.DeleteCertificateError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteCertificateError'), 'exclude': lambda f: f is None }})
    r"""An error encountered by the Batch service when deleting a certificate."""  
    previous_state: Optional[CertificatePreviousStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousState'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the previous state of the certificate. This property is not set if the certificate is in its initial Active state."""  
    previous_state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousStateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the time at which the certificate entered its previous state.  This property is not set if the certificate is in its initial Active state."""  
    public_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicData'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the public part of the certificate as a base-64 encoded .cer file."""  
    state: Optional[CertificateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the current state of the certificate."""  
    state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the time at which the certificate entered its current state."""  
    thumbprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbprint'), 'exclude': lambda f: f is None }})
    r"""Get or sets the X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed)."""  
    thumbprint_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbprintAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the algorithm used to derive the thumbprint. This must be sha1."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the URL of the certificate."""  
    