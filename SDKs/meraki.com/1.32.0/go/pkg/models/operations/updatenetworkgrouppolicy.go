// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkGroupPolicyRequestBodyBandwidthBandwidthLimits - The bandwidth limits object, specifying upload and download speed for clients bound to the group policy. These are only enforced if 'settings' is set to 'custom'.
type UpdateNetworkGroupPolicyRequestBodyBandwidthBandwidthLimits struct {
	// The maximum download limit (integer, in Kbps). null indicates no limit
	LimitDown *int64 `json:"limitDown,omitempty"`
	// The maximum upload limit (integer, in Kbps). null indicates no limit
	LimitUp *int64 `json:"limitUp,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum - How bandwidth limits are enforced. Can be 'network default', 'ignore' or 'custom'.
type UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnumCustom         UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum = "custom"
	UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnumIgnore         UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum = "ignore"
	UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum = "network default"
)

func (e UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyBandwidth -     The bandwidth settings for clients bound to your group policy.
type UpdateNetworkGroupPolicyRequestBodyBandwidth struct {
	// The bandwidth limits object, specifying upload and download speed for clients bound to the group policy. These are only enforced if 'settings' is set to 'custom'.
	BandwidthLimits *UpdateNetworkGroupPolicyRequestBodyBandwidthBandwidthLimits `json:"bandwidthLimits,omitempty"`
	// How bandwidth limits are enforced. Can be 'network default', 'ignore' or 'custom'.
	Settings *UpdateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum `json:"settings,omitempty"`
}

type UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumAfp         UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "AFP"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumAirPlay     UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "AirPlay"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumAllServices UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "All Services"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumBitTorrent  UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "BitTorrent"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumFtp         UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "FTP"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumPrinters    UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "Printers"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumSSH         UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "SSH"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumSamba       UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "Samba"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumScanners    UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "Scanners"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumIChat       UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "iChat"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumITunes      UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "iTunes"
)

func (e UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AFP":
		fallthrough
	case "AirPlay":
		fallthrough
	case "All Services":
		fallthrough
	case "BitTorrent":
		fallthrough
	case "FTP":
		fallthrough
	case "Printers":
		fallthrough
	case "SSH":
		fallthrough
	case "Samba":
		fallthrough
	case "Scanners":
		fallthrough
	case "iChat":
		fallthrough
	case "iTunes":
		*e = UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum: %v", v)
	}
}

type UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRules struct {
	// A description for your Bonjour forwarding rule. Optional.
	Description *string `json:"description,omitempty"`
	// A list of Bonjour services. At least one service must be specified. Available services are 'All Services', 'AirPlay', 'AFP', 'BitTorrent', 'FTP', 'iChat', 'iTunes', 'Printers', 'Samba', 'Scanners' and 'SSH'
	Services []UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum `json:"services"`
	// The ID of the service VLAN. Required.
	VlanID string `json:"vlanId"`
}

// UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum - How Bonjour rules are applied. Can be 'network default', 'ignore' or 'custom'.
type UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnumCustom         UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum = "custom"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnumIgnore         UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum = "ignore"
	UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum = "network default"
)

func (e UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyBonjourForwarding - The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
type UpdateNetworkGroupPolicyRequestBodyBonjourForwarding struct {
	// A list of the Bonjour forwarding rules for your group policy. If 'settings' is set to 'custom', at least one rule must be specified.
	Rules []UpdateNetworkGroupPolicyRequestBodyBonjourForwardingRules `json:"rules,omitempty"`
	// How Bonjour rules are applied. Can be 'network default', 'ignore' or 'custom'.
	Settings *UpdateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum `json:"settings,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum - How URL patterns are applied. Can be 'network default', 'append' or 'override'.
type UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnumAppend         UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum = "append"
	UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum = "network default"
	UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnumOverride       UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum = "override"
)

func (e UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "append":
		fallthrough
	case "network default":
		fallthrough
	case "override":
		*e = UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatterns - Settings for allowed URL patterns
type UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatterns struct {
	// A list of URL patterns that are allowed
	Patterns []string `json:"patterns,omitempty"`
	// How URL patterns are applied. Can be 'network default', 'append' or 'override'.
	Settings *UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum `json:"settings,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum - How URL categories are applied. Can be 'network default', 'append' or 'override'.
type UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnumAppend         UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum = "append"
	UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum = "network default"
	UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnumOverride       UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum = "override"
)

func (e UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "append":
		fallthrough
	case "network default":
		fallthrough
	case "override":
		*e = UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategories - Settings for blocked URL categories
type UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategories struct {
	// A list of URL categories to block
	Categories []string `json:"categories,omitempty"`
	// How URL categories are applied. Can be 'network default', 'append' or 'override'.
	Settings *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum `json:"settings,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum - How URL patterns are applied. Can be 'network default', 'append' or 'override'.
type UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnumAppend         UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum = "append"
	UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum = "network default"
	UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnumOverride       UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum = "override"
)

func (e UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "append":
		fallthrough
	case "network default":
		fallthrough
	case "override":
		*e = UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatterns - Settings for blocked URL patterns
type UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatterns struct {
	// A list of URL patterns that are blocked
	Patterns []string `json:"patterns,omitempty"`
	// How URL patterns are applied. Can be 'network default', 'append' or 'override'.
	Settings *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum `json:"settings,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyContentFiltering - The content filtering settings for your group policy
type UpdateNetworkGroupPolicyRequestBodyContentFiltering struct {
	// Settings for allowed URL patterns
	AllowedURLPatterns *UpdateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatterns `json:"allowedUrlPatterns,omitempty"`
	// Settings for blocked URL categories
	BlockedURLCategories *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategories `json:"blockedUrlCategories,omitempty"`
	// Settings for blocked URL patterns
	BlockedURLPatterns *UpdateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatterns `json:"blockedUrlPatterns,omitempty"`
}

type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL3FirewallRules struct {
	// Description of the rule (optional)
	Comment *string `json:"comment,omitempty"`
	// Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or 'any'.
	DestCidr string `json:"destCidr"`
	// Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or 'any'
	DestPort *string `json:"destPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule
	Policy string `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
	Protocol string `json:"protocol"`
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum - The policy applied to matching traffic. Must be 'deny'.
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnumDeny UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum = "deny"
)

func (e UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		*e = UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum - Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumApplication         UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "application"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumApplicationCategory UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "applicationCategory"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumHost                UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "host"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumIPRange             UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "ipRange"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumPort                UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "port"
)

func (e UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application":
		fallthrough
	case "applicationCategory":
		fallthrough
	case "host":
		fallthrough
	case "ipRange":
		fallthrough
	case "port":
		*e = UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum: %v", v)
	}
}

type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRules struct {
	// The policy applied to matching traffic. Must be 'deny'.
	Policy *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum `json:"policy,omitempty"`
	// Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'
	Type *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum `json:"type,omitempty"`
	// The 'value' of what you want to block. If 'type' is 'host', 'port' or 'ipRange', 'value' must be a string matching either a hostname (e.g. somewhere.com), a port (e.g. 8080), or an IP range (e.g. 192.1.0.0/16). If 'type' is 'application' or 'applicationCategory', then 'value' must be an object with an ID for the application.
	Value *string `json:"value,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum - How firewall and traffic shaping rules are enforced. Can be 'network default', 'ignore' or 'custom'.
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnumCustom         UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum = "custom"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnumIgnore         UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum = "ignore"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum = "network default"
)

func (e UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum - The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumApplication         UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "application"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumApplicationCategory UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "applicationCategory"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumHost                UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "host"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumIPRange             UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "ipRange"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumLocalNet            UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "localNet"
	UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumPort                UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "port"
)

func (e UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application":
		fallthrough
	case "applicationCategory":
		fallthrough
	case "host":
		fallthrough
	case "ipRange":
		fallthrough
	case "localNet":
		fallthrough
	case "port":
		*e = UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum: %v", v)
	}
}

type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitions struct {
	// The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
	Type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum `json:"type"`
	//     If "type" is 'host', 'port', 'ipRange' or 'localNet', then "value" must be a string, matching either
	//     a hostname (e.g. "somesite.com"), a port (e.g. 8080), or an IP range ("192.1.0.0",
	//     "192.1.0.0/16", or "10.1.0.0/16:80"). 'localNet' also supports CIDR notation, excluding
	//     custom ports.
	//      If "type" is 'application' or 'applicationCategory', then "value" must be an object
	//     with the structure { "id": "meraki:layer7/..." }, where "id" is the application category or
	//     application ID (for a list of IDs for your network, use the trafficShaping/applicationCategories
	//     endpoint).
	//
	Value string `json:"value"`
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimitsBandwidthLimits - The bandwidth limits object, specifying the upload ('limitUp') and download ('limitDown') speed in Kbps. These are only enforced if 'settings' is set to 'custom'.
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimitsBandwidthLimits struct {
	// The maximum download limit (integer, in Kbps).
	LimitDown *int64 `json:"limitDown,omitempty"`
	// The maximum upload limit (integer, in Kbps).
	LimitUp *int64 `json:"limitUp,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimits -     An object describing the bandwidth settings for your rule.
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimits struct {
	// The bandwidth limits object, specifying the upload ('limitUp') and download ('limitDown') speed in Kbps. These are only enforced if 'settings' is set to 'custom'.
	BandwidthLimits *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimitsBandwidthLimits `json:"bandwidthLimits,omitempty"`
	// How bandwidth limits are applied by your rule. Can be one of 'network default', 'ignore' or 'custom'.
	Settings *string `json:"settings,omitempty"`
}

type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRules struct {
	//     A list of objects describing the definitions of your traffic shaping rule. At least one definition is required.
	//
	Definitions []UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitions `json:"definitions"`
	//     The DSCP tag applied by your rule. null means 'Do not change DSCP tag'.
	//     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint.
	//
	DscpTagValue *int64 `json:"dscpTagValue,omitempty"`
	//     The PCP tag applied by your rule. Can be 0 (lowest priority) through 7 (highest priority).
	//     null means 'Do not set PCP tag'.
	//
	PcpTagValue *int64 `json:"pcpTagValue,omitempty"`
	//     An object describing the bandwidth settings for your rule.
	//
	PerClientBandwidthLimits *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimits `json:"perClientBandwidthLimits,omitempty"`
	//     A string, indicating the priority level for packets bound to your rule.
	//     Can be 'low', 'normal' or 'high'.
	//
	Priority *string `json:"priority,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShaping -     The firewall and traffic shaping rules and settings for your policy.
type UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShaping struct {
	// An ordered array of the L3 firewall rules
	L3FirewallRules []UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL3FirewallRules `json:"l3FirewallRules,omitempty"`
	// An ordered array of L7 firewall rules
	L7FirewallRules []UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRules `json:"l7FirewallRules,omitempty"`
	// How firewall and traffic shaping rules are enforced. Can be 'network default', 'ignore' or 'custom'.
	Settings *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum `json:"settings,omitempty"`
	//     An array of traffic shaping rules. Rules are applied in the order that
	//     they are specified in. An empty list (or null) means no rules. Note that
	//     you are allowed a maximum of 8 rules.
	//
	TrafficShapingRules []UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRules `json:"trafficShapingRules,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingFriday - The schedule object for Friday.
type UpdateNetworkGroupPolicyRequestBodySchedulingFriday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingMonday - The schedule object for Monday.
type UpdateNetworkGroupPolicyRequestBodySchedulingMonday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingSaturday - The schedule object for Saturday.
type UpdateNetworkGroupPolicyRequestBodySchedulingSaturday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingSunday - The schedule object for Sunday.
type UpdateNetworkGroupPolicyRequestBodySchedulingSunday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingThursday - The schedule object for Thursday.
type UpdateNetworkGroupPolicyRequestBodySchedulingThursday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingTuesday - The schedule object for Tuesday.
type UpdateNetworkGroupPolicyRequestBodySchedulingTuesday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySchedulingWednesday - The schedule object for Wednesday.
type UpdateNetworkGroupPolicyRequestBodySchedulingWednesday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodyScheduling -     The schedule for the group policy. Schedules are applied to days of the week.
type UpdateNetworkGroupPolicyRequestBodyScheduling struct {
	// Whether scheduling is enabled (true) or disabled (false). Defaults to false. If true, the schedule objects for each day of the week (monday - sunday) are parsed.
	Enabled *bool `json:"enabled,omitempty"`
	// The schedule object for Friday.
	Friday *UpdateNetworkGroupPolicyRequestBodySchedulingFriday `json:"friday,omitempty"`
	// The schedule object for Monday.
	Monday *UpdateNetworkGroupPolicyRequestBodySchedulingMonday `json:"monday,omitempty"`
	// The schedule object for Saturday.
	Saturday *UpdateNetworkGroupPolicyRequestBodySchedulingSaturday `json:"saturday,omitempty"`
	// The schedule object for Sunday.
	Sunday *UpdateNetworkGroupPolicyRequestBodySchedulingSunday `json:"sunday,omitempty"`
	// The schedule object for Thursday.
	Thursday *UpdateNetworkGroupPolicyRequestBodySchedulingThursday `json:"thursday,omitempty"`
	// The schedule object for Tuesday.
	Tuesday *UpdateNetworkGroupPolicyRequestBodySchedulingTuesday `json:"tuesday,omitempty"`
	// The schedule object for Wednesday.
	Wednesday *UpdateNetworkGroupPolicyRequestBodySchedulingWednesday `json:"wednesday,omitempty"`
}

// UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum - Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
type UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnumBypass         UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum = "bypass"
	UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum = "network default"
)

func (e UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bypass":
		fallthrough
	case "network default":
		*e = UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum - How VLAN tagging is applied. Can be 'network default', 'ignore' or 'custom'.
type UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum string

const (
	UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnumCustom         UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum = "custom"
	UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnumIgnore         UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum = "ignore"
	UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnumNetworkDefault UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum = "network default"
)

func (e UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum) ToPointer() *UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum {
	return &e
}

func (e *UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum: %v", v)
	}
}

// UpdateNetworkGroupPolicyRequestBodyVlanTagging - The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
type UpdateNetworkGroupPolicyRequestBodyVlanTagging struct {
	// How VLAN tagging is applied. Can be 'network default', 'ignore' or 'custom'.
	Settings *UpdateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum `json:"settings,omitempty"`
	// The ID of the vlan you want to tag. This only applies if 'settings' is set to 'custom'.
	VlanID *string `json:"vlanId,omitempty"`
}

type UpdateNetworkGroupPolicyRequestBody struct {
	//     The bandwidth settings for clients bound to your group policy.
	//
	Bandwidth *UpdateNetworkGroupPolicyRequestBodyBandwidth `json:"bandwidth,omitempty"`
	// The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
	BonjourForwarding *UpdateNetworkGroupPolicyRequestBodyBonjourForwarding `json:"bonjourForwarding,omitempty"`
	// The content filtering settings for your group policy
	ContentFiltering *UpdateNetworkGroupPolicyRequestBodyContentFiltering `json:"contentFiltering,omitempty"`
	//     The firewall and traffic shaping rules and settings for your policy.
	//
	FirewallAndTrafficShaping *UpdateNetworkGroupPolicyRequestBodyFirewallAndTrafficShaping `json:"firewallAndTrafficShaping,omitempty"`
	// The name for your group policy.
	Name *string `json:"name,omitempty"`
	//     The schedule for the group policy. Schedules are applied to days of the week.
	//
	Scheduling *UpdateNetworkGroupPolicyRequestBodyScheduling `json:"scheduling,omitempty"`
	// Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
	SplashAuthSettings *UpdateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum `json:"splashAuthSettings,omitempty"`
	// The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
	VlanTagging *UpdateNetworkGroupPolicyRequestBodyVlanTagging `json:"vlanTagging,omitempty"`
}

type UpdateNetworkGroupPolicyRequest struct {
	RequestBody   *UpdateNetworkGroupPolicyRequestBody `request:"mediaType=application/json"`
	GroupPolicyID string                               `pathParam:"style=simple,explode=false,name=groupPolicyId"`
	NetworkID     string                               `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkGroupPolicyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkGroupPolicy200ApplicationJSONObject map[string]interface{}
}
