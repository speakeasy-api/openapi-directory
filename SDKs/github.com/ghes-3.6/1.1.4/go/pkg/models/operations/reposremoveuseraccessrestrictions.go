// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposRemoveUserAccessRestrictionsPathParams struct {
	// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.6/graphql).
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposRemoveUserAccessRestrictionsRequestBody1 struct {
	// The username for users
	Users []string `json:"users"`
}

type ReposRemoveUserAccessRestrictionsRequestBodyType string

const (
	ReposRemoveUserAccessRestrictionsRequestBodyTypeReposRemoveUserAccessRestrictionsRequestBody1 ReposRemoveUserAccessRestrictionsRequestBodyType = "repos/remove-user-access-restrictions_requestBody_1"
	ReposRemoveUserAccessRestrictionsRequestBodyTypeArrayOfstr                                    ReposRemoveUserAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposRemoveUserAccessRestrictionsRequestBody struct {
	ReposRemoveUserAccessRestrictionsRequestBody1 *ReposRemoveUserAccessRestrictionsRequestBody1
	ArrayOfstr                                    []string

	Type ReposRemoveUserAccessRestrictionsRequestBodyType
}

func CreateReposRemoveUserAccessRestrictionsRequestBodyReposRemoveUserAccessRestrictionsRequestBody1(reposRemoveUserAccessRestrictionsRequestBody1 ReposRemoveUserAccessRestrictionsRequestBody1) ReposRemoveUserAccessRestrictionsRequestBody {
	typ := ReposRemoveUserAccessRestrictionsRequestBodyTypeReposRemoveUserAccessRestrictionsRequestBody1

	return ReposRemoveUserAccessRestrictionsRequestBody{
		ReposRemoveUserAccessRestrictionsRequestBody1: &reposRemoveUserAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposRemoveUserAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposRemoveUserAccessRestrictionsRequestBody {
	typ := ReposRemoveUserAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposRemoveUserAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposRemoveUserAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposRemoveUserAccessRestrictionsRequestBody1 := new(ReposRemoveUserAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposRemoveUserAccessRestrictionsRequestBody1); err == nil {
		u.ReposRemoveUserAccessRestrictionsRequestBody1 = reposRemoveUserAccessRestrictionsRequestBody1
		u.Type = ReposRemoveUserAccessRestrictionsRequestBodyTypeReposRemoveUserAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposRemoveUserAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposRemoveUserAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposRemoveUserAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposRemoveUserAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposRemoveUserAccessRestrictionsRequest struct {
	PathParams ReposRemoveUserAccessRestrictionsPathParams
	Request    *ReposRemoveUserAccessRestrictionsRequestBody `request:"mediaType=application/json"`
}

type ReposRemoveUserAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	SimpleUsers []shared.SimpleUser
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
