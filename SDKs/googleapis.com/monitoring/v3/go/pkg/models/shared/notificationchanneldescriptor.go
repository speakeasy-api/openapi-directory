// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NotificationChannelDescriptorLaunchStageEnum - The product launch stage for channels of this type.
type NotificationChannelDescriptorLaunchStageEnum string

const (
	NotificationChannelDescriptorLaunchStageEnumLaunchStageUnspecified NotificationChannelDescriptorLaunchStageEnum = "LAUNCH_STAGE_UNSPECIFIED"
	NotificationChannelDescriptorLaunchStageEnumUnimplemented          NotificationChannelDescriptorLaunchStageEnum = "UNIMPLEMENTED"
	NotificationChannelDescriptorLaunchStageEnumPrelaunch              NotificationChannelDescriptorLaunchStageEnum = "PRELAUNCH"
	NotificationChannelDescriptorLaunchStageEnumEarlyAccess            NotificationChannelDescriptorLaunchStageEnum = "EARLY_ACCESS"
	NotificationChannelDescriptorLaunchStageEnumAlpha                  NotificationChannelDescriptorLaunchStageEnum = "ALPHA"
	NotificationChannelDescriptorLaunchStageEnumBeta                   NotificationChannelDescriptorLaunchStageEnum = "BETA"
	NotificationChannelDescriptorLaunchStageEnumGa                     NotificationChannelDescriptorLaunchStageEnum = "GA"
	NotificationChannelDescriptorLaunchStageEnumDeprecated             NotificationChannelDescriptorLaunchStageEnum = "DEPRECATED"
)

func (e NotificationChannelDescriptorLaunchStageEnum) ToPointer() *NotificationChannelDescriptorLaunchStageEnum {
	return &e
}

func (e *NotificationChannelDescriptorLaunchStageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAUNCH_STAGE_UNSPECIFIED":
		fallthrough
	case "UNIMPLEMENTED":
		fallthrough
	case "PRELAUNCH":
		fallthrough
	case "EARLY_ACCESS":
		fallthrough
	case "ALPHA":
		fallthrough
	case "BETA":
		fallthrough
	case "GA":
		fallthrough
	case "DEPRECATED":
		*e = NotificationChannelDescriptorLaunchStageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationChannelDescriptorLaunchStageEnum: %v", v)
	}
}

type NotificationChannelDescriptorSupportedTiersEnum string

const (
	NotificationChannelDescriptorSupportedTiersEnumServiceTierUnspecified NotificationChannelDescriptorSupportedTiersEnum = "SERVICE_TIER_UNSPECIFIED"
	NotificationChannelDescriptorSupportedTiersEnumServiceTierBasic       NotificationChannelDescriptorSupportedTiersEnum = "SERVICE_TIER_BASIC"
	NotificationChannelDescriptorSupportedTiersEnumServiceTierPremium     NotificationChannelDescriptorSupportedTiersEnum = "SERVICE_TIER_PREMIUM"
)

func (e NotificationChannelDescriptorSupportedTiersEnum) ToPointer() *NotificationChannelDescriptorSupportedTiersEnum {
	return &e
}

func (e *NotificationChannelDescriptorSupportedTiersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SERVICE_TIER_UNSPECIFIED":
		fallthrough
	case "SERVICE_TIER_BASIC":
		fallthrough
	case "SERVICE_TIER_PREMIUM":
		*e = NotificationChannelDescriptorSupportedTiersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationChannelDescriptorSupportedTiersEnum: %v", v)
	}
}

// NotificationChannelDescriptor - A description of a notification channel. The descriptor includes the properties of the channel and the set of labels or fields that must be specified to configure channels of a given type.
type NotificationChannelDescriptor struct {
	// A human-readable description of the notification channel type. The description may include a description of the properties of the channel and pointers to external documentation.
	Description *string `json:"description,omitempty"`
	// A human-readable name for the notification channel type. This form of the name is suitable for a user interface.
	DisplayName *string `json:"displayName,omitempty"`
	// The set of labels that must be defined to identify a particular channel of the corresponding type. Each label includes a description for how that field should be populated.
	Labels []LabelDescriptor `json:"labels,omitempty"`
	// The product launch stage for channels of this type.
	LaunchStage *NotificationChannelDescriptorLaunchStageEnum `json:"launchStage,omitempty"`
	// The full REST resource name for this descriptor. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE] In the above, [TYPE] is the value of the type field.
	Name *string `json:"name,omitempty"`
	// The tiers that support this notification channel; the project service tier must be one of the supported_tiers.
	SupportedTiers []NotificationChannelDescriptorSupportedTiersEnum `json:"supportedTiers,omitempty"`
	// The type of notification channel, such as "email" and "sms". To view the full list of channels, see Channel descriptors (https://cloud.google.com/monitoring/alerts/using-channels-api#ncd). Notification channel types are globally unique.
	Type *string `json:"type,omitempty"`
}
