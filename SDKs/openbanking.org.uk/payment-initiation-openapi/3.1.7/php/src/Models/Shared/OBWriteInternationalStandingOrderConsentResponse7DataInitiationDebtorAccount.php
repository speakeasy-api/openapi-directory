<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OBWriteInternationalStandingOrderConsentResponse7DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OBWriteInternationalStandingOrderConsentResponse7DataInitiationDebtorAccount
{
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     * 
     * @var string $identification
     */
	#[\JMS\Serializer\Annotation\SerializedName('Identification')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $identification;
    
    /**
     * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
     * 
     * Note, the account name is not the product name or the nickname of the account.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Name of the identification scheme, in a coded form as published in an external list.
     * 
     * @var string $schemeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('SchemeName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $schemeName;
    
    /**
     * This is secondary identification of the account, as assigned by the account servicing institution. 
     * 
     * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
     * 
     * @var ?string $secondaryIdentification
     */
	#[\JMS\Serializer\Annotation\SerializedName('SecondaryIdentification')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $secondaryIdentification = null;
    
	public function __construct()
	{
		$this->identification = "";
		$this->name = null;
		$this->schemeName = "";
		$this->secondaryIdentification = null;
	}
}
