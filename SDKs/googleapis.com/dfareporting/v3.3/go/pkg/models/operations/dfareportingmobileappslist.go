// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DfareportingMobileAppsListSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type DfareportingMobileAppsListDirectoriesEnum string

const (
	DfareportingMobileAppsListDirectoriesEnumUnknown         DfareportingMobileAppsListDirectoriesEnum = "UNKNOWN"
	DfareportingMobileAppsListDirectoriesEnumAppleAppStore   DfareportingMobileAppsListDirectoriesEnum = "APPLE_APP_STORE"
	DfareportingMobileAppsListDirectoriesEnumGooglePlayStore DfareportingMobileAppsListDirectoriesEnum = "GOOGLE_PLAY_STORE"
)

func (e *DfareportingMobileAppsListDirectoriesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "APPLE_APP_STORE":
		fallthrough
	case "GOOGLE_PLAY_STORE":
		*e = DfareportingMobileAppsListDirectoriesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingMobileAppsListDirectoriesEnum: %s", s)
	}
}

type DfareportingMobileAppsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Select only apps from these directories.
	Directories []DfareportingMobileAppsListDirectoriesEnum `queryParam:"style=form,explode=true,name=directories"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Select only apps with these IDs.
	Ids []string `queryParam:"style=form,explode=true,name=ids"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Value of the nextPageToken from the previous result page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// User profile ID associated with this request.
	ProfileID string `pathParam:"style=simple,explode=false,name=profileId"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
	SearchString *string `queryParam:"style=form,explode=true,name=searchString"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type DfareportingMobileAppsListResponse struct {
	ContentType string
	// Successful response
	MobileAppsListResponse *shared.MobileAppsListResponse
	StatusCode             int
	RawResponse            *http.Response
}
