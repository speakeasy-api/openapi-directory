"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import redshiftresultcompressiontype_enum as shared_redshiftresultcompressiontype_enum
from ..shared import redshiftresultformat_enum as shared_redshiftresultformat_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RedshiftDatasetDefinition:
    r"""Configuration for Redshift Dataset Definition input."""
    
    cluster_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterId') }})
    r"""The Redshift cluster Identifier."""  
    cluster_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterRoleArn') }})  
    database: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Database') }})
    r"""The name of the Redshift database used in Redshift query execution."""  
    db_user: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbUser') }})
    r"""The database user name used in Redshift query execution."""  
    output_format: shared_redshiftresultformat_enum.RedshiftResultFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputFormat') }})
    r"""The data storage format for Redshift query results."""  
    output_s3_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputS3Uri') }})  
    query_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueryString') }})
    r"""The SQL query statements to be executed."""  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    output_compression: Optional[shared_redshiftresultcompressiontype_enum.RedshiftResultCompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputCompression'), 'exclude': lambda f: f is None }})
    r"""The compression used for Redshift query results."""  
    