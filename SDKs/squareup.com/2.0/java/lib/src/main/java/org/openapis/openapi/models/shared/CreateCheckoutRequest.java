/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateCheckoutRequest - Defines the parameters that can be included in the body of
 * a request to the `CreateCheckout` endpoint.
 */
public class CreateCheckoutRequest {
    /**
     * The basic primitive of a multi-party transaction. The value is optional.
     * The transaction facilitated by you can be split from here.
     * 
     * If you provide this value, the `amount_money` value in your `additional_recipients` field
     * cannot be more than 90% of the `total_money` calculated by Square for your order.
     * The `location_id` must be a valid seller location where the checkout is occurring.
     * 
     * This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
     * 
     * This field is currently not supported in the Square Sandbox.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_recipients")
    public ChargeRequestAdditionalRecipient[] additionalRecipients;

    public CreateCheckoutRequest withAdditionalRecipients(ChargeRequestAdditionalRecipient[] additionalRecipients) {
        this.additionalRecipients = additionalRecipients;
        return this;
    }
    
    /**
     * If `true`, Square Checkout collects shipping information on your behalf and stores 
     * that information with the transaction information in the Square Seller Dashboard.
     * 
     * Default: `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ask_for_shipping_address")
    public Boolean askForShippingAddress;

    public CreateCheckoutRequest withAskForShippingAddress(Boolean askForShippingAddress) {
        this.askForShippingAddress = askForShippingAddress;
        return this;
    }
    
    /**
     * A unique string that identifies this checkout among others you have created. It can be
     * any valid string but must be unique for every order sent to Square Checkout for a given location ID.
     * 
     * The idempotency key is used to avoid processing the same order more than once. If you are 
     * unsure whether a particular checkout was created successfully, you can attempt it again with
     * the same idempotency key and all the same other parameters without worrying about creating duplicates.
     * 
     * You should use a random number/string generator native to the language
     * you are working in to generate strings for your idempotency keys.
     * 
     * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
     */
    @JsonProperty("idempotency_key")
    public String idempotencyKey;

    public CreateCheckoutRequest withIdempotencyKey(String idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    /**
     * The email address to display on the Square Checkout confirmation page
     * and confirmation email that the buyer can use to contact the seller.
     * 
     * If this value is not set, the confirmation page and email display the
     * primary email address associated with the seller's Square account.
     * 
     * Default: none; only exists if explicitly set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_support_email")
    public String merchantSupportEmail;

    public CreateCheckoutRequest withMerchantSupportEmail(String merchantSupportEmail) {
        this.merchantSupportEmail = merchantSupportEmail;
        return this;
    }
    
    /**
     * An optional note to associate with the `checkout` object.
     * 
     * This value cannot exceed 60 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public CreateCheckoutRequest withNote(String note) {
        this.note = note;
        return this;
    }
    
    @JsonProperty("order")
    public CreateOrderRequest order;

    public CreateCheckoutRequest withOrder(CreateOrderRequest order) {
        this.order = order;
        return this;
    }
    
    /**
     * If provided, the buyer's email is prepopulated on the checkout page
     * as an editable text field.
     * 
     * Default: none; only exists if explicitly set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pre_populate_buyer_email")
    public String prePopulateBuyerEmail;

    public CreateCheckoutRequest withPrePopulateBuyerEmail(String prePopulateBuyerEmail) {
        this.prePopulateBuyerEmail = prePopulateBuyerEmail;
        return this;
    }
    
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pre_populate_shipping_address")
    public Address prePopulateShippingAddress;

    public CreateCheckoutRequest withPrePopulateShippingAddress(Address prePopulateShippingAddress) {
        this.prePopulateShippingAddress = prePopulateShippingAddress;
        return this;
    }
    
    /**
     * The URL to redirect to after the checkout is completed with `checkoutId`,
     * `transactionId`, and `referenceId` appended as URL parameters. For example,
     * if the provided redirect URL is `http://www.example.com/order-complete`, a
     * successful transaction redirects the customer to:
     * 
     * &lt;pre&gt;&lt;code&gt;http://www.example.com/order-complete?checkoutId=xxxxxx&amp;amp;referenceId=xxxxxx&amp;amp;transactionId=xxxxxx&lt;/code&gt;&lt;/pre&gt;
     * 
     * If you do not provide a redirect URL, Square Checkout displays an order
     * confirmation page on your behalf; however, it is strongly recommended that
     * you provide a redirect URL so you can verify the transaction results and
     * finalize the order through your existing/normal confirmation workflow.
     * 
     * Default: none; only exists if explicitly set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    public String redirectUrl;

    public CreateCheckoutRequest withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    public CreateCheckoutRequest(@JsonProperty("idempotency_key") String idempotencyKey, @JsonProperty("order") CreateOrderRequest order) {
        this.idempotencyKey = idempotencyKey;
        this.order = order;
  }
}
