// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SecurityAndAnalysisAdvancedSecurityStatusEnum string

const (
	SecurityAndAnalysisAdvancedSecurityStatusEnumEnabled  SecurityAndAnalysisAdvancedSecurityStatusEnum = "enabled"
	SecurityAndAnalysisAdvancedSecurityStatusEnumDisabled SecurityAndAnalysisAdvancedSecurityStatusEnum = "disabled"
)

func (e *SecurityAndAnalysisAdvancedSecurityStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "disabled":
		*e = SecurityAndAnalysisAdvancedSecurityStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityAndAnalysisAdvancedSecurityStatusEnum: %s", s)
	}
}

type SecurityAndAnalysisAdvancedSecurity struct {
	Status *SecurityAndAnalysisAdvancedSecurityStatusEnum `json:"status,omitempty"`
}

type SecurityAndAnalysisSecretScanningStatusEnum string

const (
	SecurityAndAnalysisSecretScanningStatusEnumEnabled  SecurityAndAnalysisSecretScanningStatusEnum = "enabled"
	SecurityAndAnalysisSecretScanningStatusEnumDisabled SecurityAndAnalysisSecretScanningStatusEnum = "disabled"
)

func (e *SecurityAndAnalysisSecretScanningStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "disabled":
		*e = SecurityAndAnalysisSecretScanningStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityAndAnalysisSecretScanningStatusEnum: %s", s)
	}
}

type SecurityAndAnalysisSecretScanning struct {
	Status *SecurityAndAnalysisSecretScanningStatusEnum `json:"status,omitempty"`
}

type SecurityAndAnalysisSecretScanningPushProtectionStatusEnum string

const (
	SecurityAndAnalysisSecretScanningPushProtectionStatusEnumEnabled  SecurityAndAnalysisSecretScanningPushProtectionStatusEnum = "enabled"
	SecurityAndAnalysisSecretScanningPushProtectionStatusEnumDisabled SecurityAndAnalysisSecretScanningPushProtectionStatusEnum = "disabled"
)

func (e *SecurityAndAnalysisSecretScanningPushProtectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "disabled":
		*e = SecurityAndAnalysisSecretScanningPushProtectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityAndAnalysisSecretScanningPushProtectionStatusEnum: %s", s)
	}
}

type SecurityAndAnalysisSecretScanningPushProtection struct {
	Status *SecurityAndAnalysisSecretScanningPushProtectionStatusEnum `json:"status,omitempty"`
}

type SecurityAndAnalysis struct {
	AdvancedSecurity             *SecurityAndAnalysisAdvancedSecurity             `json:"advanced_security,omitempty"`
	SecretScanning               *SecurityAndAnalysisSecretScanning               `json:"secret_scanning,omitempty"`
	SecretScanningPushProtection *SecurityAndAnalysisSecretScanningPushProtection `json:"secret_scanning_push_protection,omitempty"`
}
