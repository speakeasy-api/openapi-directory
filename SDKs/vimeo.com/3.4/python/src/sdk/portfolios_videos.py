"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PortfoliosVideos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_to_portfolio(self, request: operations.AddVideoToPortfolioRequest, security: operations.AddVideoToPortfolioSecurity) -> operations.AddVideoToPortfolioResponse:
        r"""Add a video to a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToPortfolioRequest, base_url, '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToPortfolioResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def add_video_to_portfolio_alt1(self, request: operations.AddVideoToPortfolioAlt1Request, security: operations.AddVideoToPortfolioAlt1Security) -> operations.AddVideoToPortfolioAlt1Response:
        r"""Add a video to a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToPortfolioAlt1Request, base_url, '/me/portfolios/{portfolio_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToPortfolioAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_from_portfolio(self, request: operations.DeleteVideoFromPortfolioRequest, security: operations.DeleteVideoFromPortfolioSecurity) -> operations.DeleteVideoFromPortfolioResponse:
        r"""Remove a video from a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoFromPortfolioRequest, base_url, '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoFromPortfolioResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_from_portfolio_alt1(self, request: operations.DeleteVideoFromPortfolioAlt1Request, security: operations.DeleteVideoFromPortfolioAlt1Security) -> operations.DeleteVideoFromPortfolioAlt1Response:
        r"""Remove a video from a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoFromPortfolioAlt1Request, base_url, '/me/portfolios/{portfolio_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoFromPortfolioAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_portfolio_video(self, request: operations.GetPortfolioVideoRequest) -> operations.GetPortfolioVideoResponse:
        r"""Get a specific video in a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioVideoRequest, base_url, '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioVideoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out

        return res

    def get_portfolio_video_alt1(self, request: operations.GetPortfolioVideoAlt1Request) -> operations.GetPortfolioVideoAlt1Response:
        r"""Get a specific video in a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioVideoAlt1Request, base_url, '/me/portfolios/{portfolio_id}/videos/{video_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioVideoAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out

        return res

    def get_portfolio_videos(self, request: operations.GetPortfolioVideosRequest) -> operations.GetPortfolioVideosResponse:
        r"""Get all the videos in a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioVideosRequest, base_url, '/users/{user_id}/portfolios/{portfolio_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetPortfolioVideosRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out

        return res

    def get_portfolio_videos_alt1(self, request: operations.GetPortfolioVideosAlt1Request) -> operations.GetPortfolioVideosAlt1Response:
        r"""Get all the videos in a portfolio"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioVideosAlt1Request, base_url, '/me/portfolios/{portfolio_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetPortfolioVideosAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioVideosAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out

        return res

    