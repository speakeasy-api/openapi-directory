// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum - The three letter code for the currency - either `EUR` or `GBP`.
type OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum string

const (
	OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnumEur OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum = "EUR"
	OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnumGbp OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum = "GBP"
)

func (e *OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EUR":
		fallthrough
	case "GBP":
		*e = OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum: %s", s)
	}
}

type OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrency struct {
	// The three letter code for the currency - either `EUR` or `GBP`.
	Code *OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrencyCodeEnum `json:"code,omitempty"`
	// The name of the currency
	Description *string `json:"description,omitempty"`
}

// OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum - Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
type OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum string

const (
	OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnumLive     OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum = "LIVE"
	OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnumMigrated OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum = "MIGRATED"
)

func (e *OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIVE":
		fallthrough
	case "MIGRATED":
		*e = OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum: %s", s)
	}
}

// OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItems - The details of the new account
type OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItems struct {
	// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
	Balance *int64 `json:"balance,omitempty"`
	// the BIC of the account (provided if currency is EUR).
	Cbic *string `json:"cbic,omitempty"`
	// the Account Number of the account.
	Ccan *string `json:"ccan,omitempty"`
	// the IBAN of the account (provided if currency is EUR).
	Ciban *string `json:"ciban,omitempty"`
	// the Sort Code of the account.
	Cnsc *string `json:"cnsc,omitempty"`
	// Internal Use
	Colour   *string                                                                                 `json:"colour,omitempty"`
	Currency *OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsCurrency `json:"currency,omitempty"`
	// true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).
	DefaultAccount *bool `json:"defaultAccount,omitempty"`
	// Whether or not direct debits can be set up on this account.
	DirectDebitsAllowed *bool `json:"directDebitsAllowed,omitempty"`
	// identifier for the fire.com account (assigned by fire.com)
	Ican *int64 `json:"ican,omitempty"`
	// the name the user gives to the account to help them identify it.
	Name *string `json:"name,omitempty"`
	// Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
	Status *OneaccountsGetResponses200ContentApplication1jsonSchemaPropertiesAccountsItemsStatusEnum `json:"status,omitempty"`
}
