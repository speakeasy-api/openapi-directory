/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AnalyticsProductColumnFilter } from "./analyticsproductcolumnfilter";
import { Expose, Transform } from "class-transformer";

export class AnalyticsProductColumnFilters extends SpeakeasyBase {
  /**
   * Describes a filter on a product's column.
   *
   * @remarks
   * The key is the column identifier of your catalog or a custom column.
   *
   */
  @SpeakeasyMetadata({ elemType: AnalyticsProductColumnFilter })
  @Expose({ name: "additionalAnalyticsProductColumnFilters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AnalyticsProductColumnFilter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AnalyticsProductColumnFilter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  additionalAnalyticsProductColumnFilters?: Record<
    string,
    AnalyticsProductColumnFilter
  >;

  /**
   * The product sku filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;

  /**
   * The product title filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}
