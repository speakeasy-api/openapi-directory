/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CustomMusic {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create rendered audio
   *
   * @remarks
   * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
   */
  createAudioRenders(
    req: shared.CreateAudioRendersRequest,
    security: operations.CreateAudioRendersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAudioRendersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateAudioRendersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/ai/audio/renders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAudioRendersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAudioRendersResponse =
        new operations.CreateAudioRendersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.audioRendersListResults = utils.objectToClass(
              httpRes?.data,
              shared.AudioRendersListResults
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get details about audio renders
   *
   * @remarks
   * This endpoint shows the status of one or more audio renders, including download links for completed audio.
   */
  fetchRenders(
    req: operations.FetchRendersRequest,
    security: operations.FetchRendersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchRendersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchRendersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/ai/audio/renders";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchRendersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchRendersResponse =
        new operations.FetchRendersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.audioRendersListResults = utils.objectToClass(
              httpRes?.data,
              shared.AudioRendersListResults
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List computer audio descriptors
   *
   * @remarks
   * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
   */
  listCustomDescriptors(
    req: operations.ListCustomDescriptorsRequest,
    security: operations.ListCustomDescriptorsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCustomDescriptorsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCustomDescriptorsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/ai/audio/descriptors";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCustomDescriptorsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCustomDescriptorsResponse =
        new operations.ListCustomDescriptorsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.descriptorsListResult = utils.objectToClass(
              httpRes?.data,
              shared.DescriptorsListResult
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List computer audio instruments
   *
   * @remarks
   * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
   */
  listCustomInstruments(
    req: operations.ListCustomInstrumentsRequest,
    security: operations.ListCustomInstrumentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCustomInstrumentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCustomInstrumentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/ai/audio/instruments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCustomInstrumentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCustomInstrumentsResponse =
        new operations.ListCustomInstrumentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.instrumentsListResult = utils.objectToClass(
              httpRes?.data,
              shared.InstrumentsListResult
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
