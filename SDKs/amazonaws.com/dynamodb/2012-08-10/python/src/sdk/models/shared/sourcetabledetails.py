"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import billingmode_enum as shared_billingmode_enum
from ..shared import keyschemaelement as shared_keyschemaelement
from ..shared import provisionedthroughput as shared_provisionedthroughput
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceTableDetails:
    r"""Contains the details of the table when the backup was created."""
    
    key_schema: list[shared_keyschemaelement.KeySchemaElement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySchema') }})  
    provisioned_throughput: shared_provisionedthroughput.ProvisionedThroughput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughput') }})  
    table_creation_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableCreationDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    table_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableId') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName') }})  
    billing_mode: Optional[shared_billingmode_enum.BillingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillingMode'), 'exclude': lambda f: f is None }})  
    item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemCount'), 'exclude': lambda f: f is None }})  
    table_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableArn'), 'exclude': lambda f: f is None }})  
    table_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableSizeBytes'), 'exclude': lambda f: f is None }})  
    