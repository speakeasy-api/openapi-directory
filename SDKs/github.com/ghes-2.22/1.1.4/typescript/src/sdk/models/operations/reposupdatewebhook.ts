/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-hook-config-params).
 */
export class ReposUpdateWebhookRequestBodyConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_type" })
  contentType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insecure_ssl" })
  insecureSsl?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "room" })
  room?: string;

  /**
   * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@2.22/webhooks/event-payloads/#delivery-headers).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  /**
   * The URL to which the payloads will be delivered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class ReposUpdateWebhookRequestBody extends SpeakeasyBase {
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * Determines a list of events to be added to the list of events that the Hook triggers for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add_events" })
  addEvents?: string[];

  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-hook-config-params).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  @Type(() => ReposUpdateWebhookRequestBodyConfig)
  config?: ReposUpdateWebhookRequestBodyConfig;

  /**
   * Determines what [events](https://docs.github.com/enterprise-server@2.22/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "events" })
  events?: string[];

  /**
   * Determines a list of events to be removed from the list of events that the Hook triggers for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remove_events" })
  removeEvents?: string[];
}

export class ReposUpdateWebhookRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReposUpdateWebhookRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=hook_id",
  })
  hookId: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class ReposUpdateWebhookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  hook?: shared.Hook;

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
