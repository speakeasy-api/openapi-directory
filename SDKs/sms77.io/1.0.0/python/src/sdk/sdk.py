"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .analytics import Analytics
from .balance import Balance
from .contacts import Contacts
from .hooks import Hooks
from .lookup import Lookup
from .pricing import Pricing
from .sms import Sms
from .status import Status
from .validate_for_voice import ValidateForVoice
from .voice import Voice
from sdk.models import shared

SERVERS = [
    "https://gateway.sms77.io/api",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""sms77.io Swagger API. Get your API-Key now at sms77.io.
    https://sms77.io/en/docs/gateway/http-api - Find out more about the Sms77.io SMS gateway.
    """
    analytics: Analytics
    r"""https://www.sms77.io/en/docs/gateway/http-api/analytics - Retrieve analytics"""
    balance: Balance
    r"""https://sms77.io/en/docs/gateway/http-api/credit-balance - Retrieve account balance"""
    contacts: Contacts
    r"""https://sms77.io/en/docs/gateway/http-api/contacts - Retrieve/edit/delete contact(s)"""
    hooks: Hooks
    r"""https://www.sms77.io/en/docs/gateway/http-api/webhooks/ - Create, view and delete webhooks"""
    lookup: Lookup
    r"""https://sms77.io/en/docs/gateway/http-api - Get number format, CNAM,- HLR- or MNP information for given phone number"""
    pricing: Pricing
    r"""https://sms77.io/en/docs/gateway/http-api/pricing - Retrieve pricing information"""
    sms: Sms
    r"""https://sms77.io/en/docs/gateway/http-api/sms-disptach - Send one/multiple SMS"""
    status: Status
    r"""https://sms77.io/en/docs/gateway/http-api/status-reports - Retrieve the status for a sent SMS with the given ID"""
    validate_for_voice: ValidateForVoice
    r"""https://sms77.io/en/docs/gateway/http-api/caller-ids - Validate caller ID for voice Voice API"""
    voice: Voice
    r"""https://sms77.io/en/docs/gateway/http-api/voice - Issue voice call to phone number"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.analytics = Analytics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.balance = Balance(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.contacts = Contacts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.hooks = Hooks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.lookup = Lookup(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pricing = Pricing(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sms = Sms(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.status = Status(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.validate_for_voice = ValidateForVoice(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.voice = Voice(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    