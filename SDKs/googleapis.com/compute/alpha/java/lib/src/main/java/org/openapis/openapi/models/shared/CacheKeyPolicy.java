/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CacheKeyPolicy - Message containing what to include in the cache key for a request for Cloud CDN.
 */
public class CacheKeyPolicy {
    /**
     * If true, requests to different hosts will be cached separately.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeHost")
    public Boolean includeHost;

    public CacheKeyPolicy withIncludeHost(Boolean includeHost) {
        this.includeHost = includeHost;
        return this;
    }
    
    /**
     * Allows HTTP request headers (by name) to be used in the cache key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeHttpHeaders")
    public String[] includeHttpHeaders;

    public CacheKeyPolicy withIncludeHttpHeaders(String[] includeHttpHeaders) {
        this.includeHttpHeaders = includeHttpHeaders;
        return this;
    }
    
    /**
     * Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeNamedCookies")
    public String[] includeNamedCookies;

    public CacheKeyPolicy withIncludeNamedCookies(String[] includeNamedCookies) {
        this.includeNamedCookies = includeNamedCookies;
        return this;
    }
    
    /**
     * If true, http and https requests will be cached separately.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeProtocol")
    public Boolean includeProtocol;

    public CacheKeyPolicy withIncludeProtocol(Boolean includeProtocol) {
        this.includeProtocol = includeProtocol;
        return this;
    }
    
    /**
     * If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeQueryString")
    public Boolean includeQueryString;

    public CacheKeyPolicy withIncludeQueryString(Boolean includeQueryString) {
        this.includeQueryString = includeQueryString;
        return this;
    }
    
    /**
     * Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&amp;' and '=' will be percent encoded and not treated as delimiters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryStringBlacklist")
    public String[] queryStringBlacklist;

    public CacheKeyPolicy withQueryStringBlacklist(String[] queryStringBlacklist) {
        this.queryStringBlacklist = queryStringBlacklist;
        return this;
    }
    
    /**
     * Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&amp;' and '=' will be percent encoded and not treated as delimiters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryStringWhitelist")
    public String[] queryStringWhitelist;

    public CacheKeyPolicy withQueryStringWhitelist(String[] queryStringWhitelist) {
        this.queryStringWhitelist = queryStringWhitelist;
        return this;
    }
    
    public CacheKeyPolicy(){}
}
