"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnTunnelOptionsSpecification = exports.VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms = exports.VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms = exports.VpnTunnelOptionsSpecificationPhase2DHGroupNumbers = exports.VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms = exports.VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms = exports.VpnTunnelOptionsSpecificationPhase1DHGroupNumbers = exports.VpnTunnelOptionsSpecificationIKEVersions = void 0;
var utils_1 = require("../../../internal/utils");
var vpntunnellogoptionsspecification_1 = require("./vpntunnellogoptionsspecification");
/**
 * The IKE version that is permitted for the VPN tunnel.
 */
var VpnTunnelOptionsSpecificationIKEVersions = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationIKEVersions, _super);
    function VpnTunnelOptionsSpecificationIKEVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecificationIKEVersions.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationIKEVersions;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationIKEVersions = VpnTunnelOptionsSpecificationIKEVersions;
/**
 * Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations.
 */
var VpnTunnelOptionsSpecificationPhase1DHGroupNumbers = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationPhase1DHGroupNumbers, _super);
    function VpnTunnelOptionsSpecificationPhase1DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecificationPhase1DHGroupNumbers.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationPhase1DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationPhase1DHGroupNumbers = VpnTunnelOptionsSpecificationPhase1DHGroupNumbers;
/**
 * Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.
 */
var VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms, _super);
    function VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms = VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms;
/**
 * Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.
 */
var VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms, _super);
    function VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms = VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms;
/**
 * Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations.
 */
var VpnTunnelOptionsSpecificationPhase2DHGroupNumbers = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationPhase2DHGroupNumbers, _super);
    function VpnTunnelOptionsSpecificationPhase2DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecificationPhase2DHGroupNumbers.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationPhase2DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationPhase2DHGroupNumbers = VpnTunnelOptionsSpecificationPhase2DHGroupNumbers;
/**
 * Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.
 */
var VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms, _super);
    function VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms = VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms;
/**
 * Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.
 */
var VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms, _super);
    function VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms.prototype, "value", void 0);
    return VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms = VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms;
/**
 * The tunnel options for a single VPN tunnel.
 */
var VpnTunnelOptionsSpecification = /** @class */ (function (_super) {
    __extends(VpnTunnelOptionsSpecification, _super);
    function VpnTunnelOptionsSpecification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecification.prototype, "dpdTimeoutAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecification.prototype, "dpdTimeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: VpnTunnelOptionsSpecificationIKEVersions }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "ikeVersions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", vpntunnellogoptionsspecification_1.VpnTunnelLogOptionsSpecification)
    ], VpnTunnelOptionsSpecification.prototype, "logOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: VpnTunnelOptionsSpecificationPhase1DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "phase1DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: VpnTunnelOptionsSpecificationPhase1EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "phase1EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: VpnTunnelOptionsSpecificationPhase1IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "phase1IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecification.prototype, "phase1LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: VpnTunnelOptionsSpecificationPhase2DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "phase2DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: VpnTunnelOptionsSpecificationPhase2EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "phase2EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: VpnTunnelOptionsSpecificationPhase2IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], VpnTunnelOptionsSpecification.prototype, "phase2IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecification.prototype, "phase2LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecification.prototype, "preSharedKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecification.prototype, "rekeyFuzzPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecification.prototype, "rekeyMarginTimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], VpnTunnelOptionsSpecification.prototype, "replayWindowSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecification.prototype, "startupAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecification.prototype, "tunnelInsideCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], VpnTunnelOptionsSpecification.prototype, "tunnelInsideIpv6Cidr", void 0);
    return VpnTunnelOptionsSpecification;
}(utils_1.SpeakeasyBase));
exports.VpnTunnelOptionsSpecification = VpnTunnelOptionsSpecification;
