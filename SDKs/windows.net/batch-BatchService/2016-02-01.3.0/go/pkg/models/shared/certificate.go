// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CertificatePreviousStateEnum - The previous state of the certificate. This property is not set if the certificate is in its initial Active state.
type CertificatePreviousStateEnum string

const (
	CertificatePreviousStateEnumActive       CertificatePreviousStateEnum = "active"
	CertificatePreviousStateEnumDeleting     CertificatePreviousStateEnum = "deleting"
	CertificatePreviousStateEnumDeletefailed CertificatePreviousStateEnum = "deletefailed"
)

func (e CertificatePreviousStateEnum) ToPointer() *CertificatePreviousStateEnum {
	return &e
}

func (e *CertificatePreviousStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "deleting":
		fallthrough
	case "deletefailed":
		*e = CertificatePreviousStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificatePreviousStateEnum: %v", v)
	}
}

// CertificateStateEnum - The current state of the certificate.
type CertificateStateEnum string

const (
	CertificateStateEnumActive       CertificateStateEnum = "active"
	CertificateStateEnumDeleting     CertificateStateEnum = "deleting"
	CertificateStateEnumDeletefailed CertificateStateEnum = "deletefailed"
)

func (e CertificateStateEnum) ToPointer() *CertificateStateEnum {
	return &e
}

func (e *CertificateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "deleting":
		fallthrough
	case "deletefailed":
		*e = CertificateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateStateEnum: %v", v)
	}
}

// Certificate - A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
type Certificate struct {
	// An error encountered by the Batch service when deleting a certificate.
	DeleteCertificateError *DeleteCertificateError `json:"deleteCertificateError,omitempty"`
	// The previous state of the certificate. This property is not set if the certificate is in its initial Active state.
	PreviousState *CertificatePreviousStateEnum `json:"previousState,omitempty"`
	// The time at which the certificate entered its previous state. This property is not set if the certificate is in its initial Active state.
	PreviousStateTransitionTime *time.Time `json:"previousStateTransitionTime,omitempty"`
	// The public part of the certificate as a base-64 encoded .cer file.
	PublicData *string `json:"publicData,omitempty"`
	// The current state of the certificate.
	State *CertificateStateEnum `json:"state,omitempty"`
	// The time at which the certificate entered its current state.
	StateTransitionTime *time.Time `json:"stateTransitionTime,omitempty"`
	// The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
	Thumbprint *string `json:"thumbprint,omitempty"`
	// The algorithm used to derive the thumbprint. This must be sha1.
	ThumbprintAlgorithm *string `json:"thumbprintAlgorithm,omitempty"`
	// The URL of the certificate.
	URL *string `json:"url,omitempty"`
}
