<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Lookup 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Translate an RGD ID to an Ensembl Gene  ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEnsemblGeneMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEnsemblGeneMappingUsingGETResponse
     */
	public function getEnsemblGeneMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETEnsemblGeneMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEnsemblGeneMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/EnsemblGene/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETEnsemblGeneMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEnsemblGeneMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to Ensembl Gene IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnsemblGeneMappingUsingPOSTResponse
     */
	public function getEnsemblGeneMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnsemblGeneMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/EnsemblGene');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnsemblGeneMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to an Ensembl Protein ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEnsemblProteinMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEnsemblProteinMappingUsingGETResponse
     */
	public function getEnsemblProteinMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETEnsemblProteinMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEnsemblProteinMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/EnsemblProtein/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETEnsemblProteinMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEnsemblProteinMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to Ensembl Protein IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnsemblProteinMappingUsingPOSTResponse
     */
	public function getEnsemblProteinMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnsemblProteinMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/EnsemblProtein');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnsemblProteinMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to an Ensembl Transcript ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEnsemblTranscriptMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEnsemblTranscriptMappingUsingGETResponse
     */
	public function getEnsemblTranscriptMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETEnsemblTranscriptMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEnsemblTranscriptMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/EnsemblTranscript/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETEnsemblTranscriptMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEnsemblTranscriptMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to Ensembl Transcript IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnsemblTranscriptMappingUsingPOSTResponse
     */
	public function getEnsemblTranscriptMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnsemblTranscriptMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/EnsemblTranscript');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnsemblTranscriptMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to an GTEx ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGTEXMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGTEXMappingUsingGETResponse
     */
	public function getGTEXMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGTEXMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGTEXMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/GTEx/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETGTEXMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGTEXMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to GTEx IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGTEXMappingUsingPOSTResponse
     */
	public function getGTEXMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGTEXMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/GTEx');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGTEXMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to a GenBank Nucleotide ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenBankNucleotideMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenBankNucleotideMappingUsingGETResponse
     */
	public function getGenBankNucleotideMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenBankNucleotideMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenBankNucleotideMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/GenBankNucleotide/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETGenBankNucleotideMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenBankNucleotideMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to GenBank Nucleotide IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenBankNucleotideMappingUsingPOSTResponse
     */
	public function getGenBankNucleotideMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenBankNucleotideMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/GenBankNucleotide');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenBankNucleotideMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to a GenBank Protein ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenBankProteinMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenBankProteinMappingUsingGETResponse
     */
	public function getGenBankProteinMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenBankProteinMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenBankProteinMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/GenBankProtein/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETGenBankProteinMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenBankProteinMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to GenBank Protein IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenBankProteinMappingUsingPOSTResponse
     */
	public function getGenBankProteinMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenBankProteinMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/GenBankProtein');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenBankProteinMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list of gene types avialable in RGD
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGeneTypesUsingGETResponse
     */
	public function getGeneTypesUsingGET(
    ): \OpenAPI\OpenAPI\Models\Operations\GETGeneTypesUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/geneTypes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGeneTypesUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to an HGNC ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETHGNCMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETHGNCMappingUsingGETResponse
     */
	public function getHGNCMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETHGNCMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETHGNCMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/HGNC/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETHGNCMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETHGNCMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to HGNC IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHGNCMappingUsingPOSTResponse
     */
	public function getHGNCMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHGNCMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/HGNC');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHGNCMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to an MGI ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMGIMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMGIMappingUsingGETResponse
     */
	public function getMGIMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETMGIMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMGIMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/MGI/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETMGIMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMGIMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to MGI IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMGIMappingUsingPOSTResponse
     */
	public function getMGIMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMGIMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/MGI');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMGIMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list assembly maps for a species
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGETResponse
     */
	public function getMapsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/maps/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a standardUnit for an ontology if it exists
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGET1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGET1Response
     */
	public function getMapsUsingGET1(
        \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGET1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGET1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/standardUnit/{accId}', \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGET1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMapsUsingGET1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getMapsUsingGET1200WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to an NCBI Gene ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETNCBIGeneMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETNCBIGeneMappingUsingGETResponse
     */
	public function getNCBIGeneMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETNCBIGeneMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETNCBIGeneMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/NCBIGene/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETNCBIGeneMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETNCBIGeneMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to NCBI Gene IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNCBIGeneMappingUsingPOSTResponse
     */
	public function getNCBIGeneMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNCBIGeneMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/NCBIGene');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNCBIGeneMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a Map of species type keys available in RGD
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GETSpeciesTypesUsingGETResponse
     */
	public function getSpeciesTypesUsingGET(
    ): \OpenAPI\OpenAPI\Models\Operations\GETSpeciesTypesUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/speciesTypeKeys');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETSpeciesTypesUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate an RGD ID to a UniProt ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETUniProtMappingUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETUniProtMappingUsingGETResponse
     */
	public function getUniProtMappingUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETUniProtMappingUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETUniProtMappingUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/UniProt/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETUniProtMappingUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETUniProtMappingUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Translate RGD IDs to UniProt IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUniProtMappingUsingPOSTResponse
     */
	public function getUniProtMappingUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\RGDIDListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUniProtMappingUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lookup/id/map/UniProt');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUniProtMappingUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}