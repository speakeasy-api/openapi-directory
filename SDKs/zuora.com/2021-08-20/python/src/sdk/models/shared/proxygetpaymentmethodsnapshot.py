"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ProxyGetPaymentMethodSnapshotAchAccountTypeEnum(str, Enum):
    r"""The type of bank account associated with the ACH payment."""
    BUSINESS_CHECKING = 'BusinessChecking'
    CHECKING = 'Checking'
    SAVING = 'Saving'

class ProxyGetPaymentMethodSnapshotBankTransferTypeEnum(str, Enum):
    r"""Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
    
    Possible Values: 
    
    
    * `AutomatischIncasso` (NL)
    
    * `LastschriftDE` (Germany)
    
    * `LastschriftAT` (Austria)
    
    * `DemandeDePrelevement` (FR)
    
    * `DirectDebitUK` (UK)
    
    * `Domicil` (Belgium)
    
    * `LastschriftCH` (CH)
    
    * `RID` (Italy)
    
    * `OrdenDeDomiciliacion` (Spain)
    * `Autogiro` (Sweden)
    * `Betalingsservice` (Denmark)
    """
    AUTOMATISCH_INCASSO = 'AutomatischIncasso'
    LASTSCHRIFT_DE = 'LastschriftDE'
    LASTSCHRIFT_AT = 'LastschriftAT'
    DEMANDE_DE_PRELEVEMENT = 'DemandeDePrelevement'
    DIRECT_DEBIT_UK = 'DirectDebitUK'
    DOMICIL = 'Domicil'
    LASTSCHRIFT_CH = 'LastschriftCH'
    RID = 'RID'
    ORDEN_DE_DOMICILIACION = 'OrdenDeDomiciliacion'
    AUTOGIRO = 'Autogiro'
    BETALINGSSERVICE = 'Betalingsservice'

class ProxyGetPaymentMethodSnapshotCreditCardTypeEnum(str, Enum):
    r"""The type of credit card or debit card."""
    AMERICAN_EXPRESS = 'AmericanExpress'
    DISCOVER = 'Discover'
    MASTER_CARD = 'MasterCard'
    VISA = 'Visa'

class ProxyGetPaymentMethodSnapshotExistingMandateEnum(str, Enum):
    r"""Indicates if the customer has an existing mandate or a new mandate. Only applicable to direct debit payment methods."""
    YES = 'Yes'
    NO = 'No'

class ProxyGetPaymentMethodSnapshotPaymentMethodStatusEnum(str, Enum):
    r"""Specifies the status of the payment method."""
    ACTIVE = 'Active'
    CLOSED = 'Closed'

class ProxyGetPaymentMethodSnapshotPaypalTypeEnum(str, Enum):
    r"""Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments."""
    EXPRESS_CHECKOUT = 'ExpressCheckout'
    ADAPTIVE_PAYMENTS = 'AdaptivePayments'

class ProxyGetPaymentMethodSnapshotTypeEnum(str, Enum):
    r"""The type of payment method."""
    ACH = 'ACH'
    APPLE_PAY = 'ApplePay'
    BANK_TRANSFER = 'BankTransfer'
    CASH = 'Cash'
    CHECK = 'Check'
    CREDIT_CARD = 'CreditCard'
    CREDIT_CARD_REFERENCE_TRANSACTION = 'CreditCardReferenceTransaction'
    DEBIT_CARD = 'DebitCard'
    OTHER = 'Other'
    PAY_PAL = 'PayPal'
    WIRE_TRANSFER = 'WireTransfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetPaymentMethodSnapshot:
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the customer account associated with this payment method."""  
    ach_aba_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AchAbaCode'), 'exclude': lambda f: f is None }})
    r"""The nine-digit routing number or ABA number used by banks. Applicable to ACH payment methods."""  
    ach_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AchAccountName'), 'exclude': lambda f: f is None }})
    r"""The name of the account holder, which can be either a person or a company. Applicable to ACH payment methods."""  
    ach_account_number_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AchAccountNumberMask'), 'exclude': lambda f: f is None }})
    r"""This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`."""  
    ach_account_type: Optional[ProxyGetPaymentMethodSnapshotAchAccountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AchAccountType'), 'exclude': lambda f: f is None }})
    r"""The type of bank account associated with the ACH payment."""  
    ach_bank_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AchBankName'), 'exclude': lambda f: f is None }})
    r"""The name of the bank where the ACH payment account is held."""  
    bank_branch_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankBranchCode'), 'exclude': lambda f: f is None }})
    r"""The branch code of the bank used for direct debit."""  
    bank_check_digit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankCheckDigit'), 'exclude': lambda f: f is None }})
    r"""The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods."""  
    bank_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankCity'), 'exclude': lambda f: f is None }})
    r"""The city of the direct debit bank."""  
    bank_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankCode'), 'exclude': lambda f: f is None }})
    r"""The sort code or number that identifies the bank. This is also known as the sort code."""  
    bank_identification_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankIdentificationNumber'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method."""  
    bank_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankName'), 'exclude': lambda f: f is None }})
    r"""The name of the direct debit bank."""  
    bank_postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankPostalCode'), 'exclude': lambda f: f is None }})
    r"""The zip code or postal code of the direct debit bank."""  
    bank_street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankStreetName'), 'exclude': lambda f: f is None }})
    r"""The name of the street of the direct debit bank."""  
    bank_street_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankStreetNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the direct debit bank."""  
    bank_transfer_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankTransferAccountName'), 'exclude': lambda f: f is None }})
    r"""The name on the direct debit bank account."""  
    bank_transfer_account_number_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankTransferAccountNumberMask'), 'exclude': lambda f: f is None }})
    r"""This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`."""  
    bank_transfer_account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankTransferAccountType'), 'exclude': lambda f: f is None }})
    r"""The type of the customer's bank account. Applicable to direct debit payment methods."""  
    bank_transfer_type: Optional[ProxyGetPaymentMethodSnapshotBankTransferTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankTransferType'), 'exclude': lambda f: f is None }})
    r"""Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
    
    Possible Values: 
    
    
    * `AutomatischIncasso` (NL)
    
    * `LastschriftDE` (Germany)
    
    * `LastschriftAT` (Austria)
    
    * `DemandeDePrelevement` (FR)
    
    * `DirectDebitUK` (UK)
    
    * `Domicil` (Belgium)
    
    * `LastschriftCH` (CH)
    
    * `RID` (Italy)
    
    * `OrdenDeDomiciliacion` (Spain)
    * `Autogiro` (Sweden)
    * `Betalingsservice` (Denmark)
    """  
    business_identification_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BusinessIdentificationCode'), 'exclude': lambda f: f is None }})
    r"""The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Only applicable to direct debit payments in Switzerland with Global Collect."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})
    r"""The city of the customer's address. Applicable to debit payment methods."""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompanyName'), 'exclude': lambda f: f is None }})
    r"""The name of the company."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The two-letter country code of the customer's address. Applicable to direct debit payment methods."""  
    credit_card_address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardAddress1'), 'exclude': lambda f: f is None }})
    r"""The first line of the card holder's address, which is often a street address or business name. Applicable to credit card and direct debit payment methods."""  
    credit_card_address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardAddress2'), 'exclude': lambda f: f is None }})
    r"""The second line of the card holder's address. Applicable to credit card and direct debit payment methods."""  
    credit_card_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardCity'), 'exclude': lambda f: f is None }})
    r"""The city of the card holder's address. Applicable to credit card and direct debit payment methods."""  
    credit_card_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardCountry'), 'exclude': lambda f: f is None }})
    r"""The country of the card holder's address."""  
    credit_card_expiration_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardExpirationMonth'), 'exclude': lambda f: f is None }})
    r"""The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods."""  
    credit_card_expiration_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardExpirationYear'), 'exclude': lambda f: f is None }})
    r"""The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods."""  
    credit_card_holder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardHolderName'), 'exclude': lambda f: f is None }})
    r"""The full name of the card holder. Applicable to credit card and direct debit payment methods."""  
    credit_card_mask_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardMaskNumber'), 'exclude': lambda f: f is None }})
    r"""A masked version of the credit or debit card number."""  
    credit_card_postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardPostalCode'), 'exclude': lambda f: f is None }})
    r"""The billing address's zip code."""  
    credit_card_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardState'), 'exclude': lambda f: f is None }})
    r"""The billing address's state. Applicable if `CreditCardCountry` is either Canada or the US."""  
    credit_card_type: Optional[ProxyGetPaymentMethodSnapshotCreditCardTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditCardType'), 'exclude': lambda f: f is None }})
    r"""The type of credit card or debit card."""  
    device_session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceSessionId'), 'exclude': lambda f: f is None }})
    r"""The session ID of the user when the `PaymentMethod` was created or updated."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }})
    r"""An email address for the payment method in addition to the bill to contact email address."""  
    existing_mandate: Optional[ProxyGetPaymentMethodSnapshotExistingMandateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExistingMandate'), 'exclude': lambda f: f is None }})
    r"""Indicates if the customer has an existing mandate or a new mandate. Only applicable to direct debit payment methods."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})
    r"""The customer's first name. Only applicable to direct debit payment methods."""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IBAN'), 'exclude': lambda f: f is None }})
    r"""The International Bank Account Number. Only applicable to direct debit payment methods."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Object identifier."""  
    identity_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityNumber'), 'exclude': lambda f: f is None }})
    r"""The unique identity number of the customer account."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IPAddress'), 'exclude': lambda f: f is None }})
    r"""The IP address of the user when the payment method was created or updated."""  
    is_company: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCompany'), 'exclude': lambda f: f is None }})
    r"""Whether the customer account is a company."""  
    last_failed_sale_transaction_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastFailedSaleTransactionDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date of the last failed attempt to collect payment with this payment method."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }})
    r"""The customer's last name. Only applicable to direct debit payment methods."""  
    last_transaction_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastTransactionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date of the most recent transaction."""  
    last_transaction_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastTransactionStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the most recent transaction."""  
    mandate_creation_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MandateCreationDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods."""  
    mandate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MandateID'), 'exclude': lambda f: f is None }})
    r"""The ID of the mandate. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods."""  
    mandate_received: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MandateReceived'), 'exclude': lambda f: f is None }})
    r"""Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods."""  
    mandate_update_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MandateUpdateDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods."""  
    max_consecutive_payment_failures: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConsecutivePaymentFailures'), 'exclude': lambda f: f is None }})
    r"""The number of allowable consecutive failures Zuora attempts with the payment method before stopping."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The name of the payment method."""  
    num_consecutive_failures: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumConsecutiveFailures'), 'exclude': lambda f: f is None }})
    r"""The number of consecutive failed payment for the payment method."""  
    payment_method_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethodId'), 'exclude': lambda f: f is None }})
    r"""Object identifier of the payment method."""  
    payment_method_status: Optional[ProxyGetPaymentMethodSnapshotPaymentMethodStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethodStatus'), 'exclude': lambda f: f is None }})
    r"""Specifies the status of the payment method."""  
    payment_retry_window: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentRetryWindow'), 'exclude': lambda f: f is None }})
    r"""The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours."""  
    paypal_baid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaypalBaid'), 'exclude': lambda f: f is None }})
    r"""The PayPal billing agreement ID, which is a contract between two PayPal accounts."""  
    paypal_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaypalEmail'), 'exclude': lambda f: f is None }})
    r"""The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service."""  
    paypal_preapproval_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaypalPreapprovalKey'), 'exclude': lambda f: f is None }})
    r"""PayPal's Adaptive Payments API key."""  
    paypal_type: Optional[ProxyGetPaymentMethodSnapshotPaypalTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaypalType'), 'exclude': lambda f: f is None }})
    r"""Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments."""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phone'), 'exclude': lambda f: f is None }})
    r"""The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalCode'), 'exclude': lambda f: f is None }})
    r"""The zip code of the customer's address. Only applicable to direct debit payment methods."""  
    second_token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondTokenId'), 'exclude': lambda f: f is None }})
    r"""A gateway unique identifier that replaces sensitive payment method data. Applicable to CC Reference Transaction payment methods."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})
    r"""The state of the customer's address. Only applicable to direct debit payment methods."""  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreetName'), 'exclude': lambda f: f is None }})
    r"""The street name of the customer's address. Only applicable to direct debit payment methods."""  
    street_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreetNumber'), 'exclude': lambda f: f is None }})
    r"""The street number of the customer's address. Only applicable to direct debit payment methods."""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TokenId'), 'exclude': lambda f: f is None }})
    r"""A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. Applicable to CC Reference Transaction payment methods."""  
    total_number_of_error_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalNumberOfErrorPayments'), 'exclude': lambda f: f is None }})
    r"""The number of error payments that used this payment method."""  
    total_number_of_processed_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalNumberOfProcessedPayments'), 'exclude': lambda f: f is None }})
    r"""The number of successful payments that used this payment method."""  
    type: Optional[ProxyGetPaymentMethodSnapshotTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})
    r"""The type of payment method."""  
    use_default_retry_rule: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseDefaultRetryRule'), 'exclude': lambda f: f is None }})
    r"""Determines whether to use the default retry rules configured in the Zuora Payments settings."""  
    