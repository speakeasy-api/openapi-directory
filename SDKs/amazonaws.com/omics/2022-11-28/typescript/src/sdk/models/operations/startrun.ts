/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * A log level for the run.
 */
export enum StartRunRequestBodyLogLevelEnum {
  Off = "OFF",
  Fatal = "FATAL",
  Error = "ERROR",
  All = "ALL",
}

/**
 * The run's workflows type.
 */
export enum StartRunRequestBodyWorkflowTypeEnum {
  Private = "PRIVATE",
  Service = "SERVICE",
}

export class StartRunRequestBody extends SpeakeasyBase {
  /**
   * A log level for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logLevel" })
  logLevel?: StartRunRequestBodyLogLevelEnum;

  /**
   * A name for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * An output URI for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputUri" })
  outputUri?: string;

  /**
   * Parameters for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  parameters?: Record<string, any>;

  /**
   * A priority for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  /**
   * To ensure that requests don't run multiple times, specify a unique ID for each request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * A service role for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn: string;

  /**
   * The run's group ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runGroupId" })
  runGroupId?: string;

  /**
   * The run's ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runId" })
  runId?: string;

  /**
   * A storage capacity for the run in gigabytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageCapacity" })
  storageCapacity?: number;

  /**
   * Tags for the run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * The run's workflow ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowId" })
  workflowId?: string;

  /**
   * The run's workflows type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowType" })
  workflowType?: StartRunRequestBodyWorkflowTypeEnum;
}

export class StartRunRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartRunRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class StartRunResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * RequestTimeoutException
   */
  @SpeakeasyMetadata()
  requestTimeoutException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startRunResponse?: shared.StartRunResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
