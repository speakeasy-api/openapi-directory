// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineScriptDetailFailureHandlingEnum - Action to take if the script returns an error or times out.
type VirtualMachineScriptDetailFailureHandlingEnum string

const (
	VirtualMachineScriptDetailFailureHandlingEnumAbort    VirtualMachineScriptDetailFailureHandlingEnum = "abort"
	VirtualMachineScriptDetailFailureHandlingEnumContinue VirtualMachineScriptDetailFailureHandlingEnum = "continue"
)

func (e VirtualMachineScriptDetailFailureHandlingEnum) ToPointer() *VirtualMachineScriptDetailFailureHandlingEnum {
	return &e
}

func (e *VirtualMachineScriptDetailFailureHandlingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "abort":
		fallthrough
	case "continue":
		*e = VirtualMachineScriptDetailFailureHandlingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineScriptDetailFailureHandlingEnum: %v", v)
	}
}

type VirtualMachineScriptDetail struct {
	// Action to take if the script returns an error or times out.
	FailureHandling VirtualMachineScriptDetailFailureHandlingEnum `json:"failureHandling"`
	// The command to be run in VM guest OS.
	ScriptPath string `json:"scriptPath"`
	// Time (in ms) after which the script will be terminated if it has not completed.
	TimeoutMs int64 `json:"timeoutMs"`
}
