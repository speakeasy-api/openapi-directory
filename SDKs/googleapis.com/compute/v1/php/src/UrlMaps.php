<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UrlMaps 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListResponse
     */
	public function computeUrlMapsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/urlMaps', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlMapsAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlMapsAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified UrlMap resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteResponse
     */
	public function computeUrlMapsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps/{urlMap}', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified UrlMap resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetResponse
     */
	public function computeUrlMapsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps/{urlMap}', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlMap = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlMap', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a UrlMap resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertResponse
     */
	public function computeUrlMapsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMap", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheResponse
     */
	public function computeUrlMapsInvalidateCache(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps/{urlMap}/invalidateCache', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cacheInvalidationRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsInvalidateCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of UrlMap resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListResponse
     */
	public function computeUrlMapsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlMapList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlMapList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchResponse
     */
	public function computeUrlMapsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps/{urlMap}', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMap1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified UrlMap resource with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateResponse
     */
	public function computeUrlMapsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps/{urlMap}', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMap1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateResponse
     */
	public function computeUrlMapsValidate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/urlMaps/{urlMap}/validate', \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMapsValidateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeUrlMapsValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlMapsValidateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlMapsValidateResponse', 'json');
            }
        }

        return $response;
    }
}