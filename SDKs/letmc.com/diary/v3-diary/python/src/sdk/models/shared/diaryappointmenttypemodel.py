"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DiaryAppointmentTypeModelSystemTypeEnum(str, Enum):
    r"""The appointment system type."""
    VIEWING = 'Viewing'
    VIEW_AND_VALUE = 'ViewAndValue'
    OPENING_INSPECTION = 'OpeningInspection'
    INTERIM_INSPECTION = 'InterimInspection'
    CLOSING_INSPECTION = 'ClosingInspection'
    SALES_APPRAISAL = 'SalesAppraisal'
    CUSTOM = 'Custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DiaryAppointmentTypeModel:
    r"""Represents a diary appointment type."""
    
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ETag'), 'exclude': lambda f: f is None }})
    r"""A unique identifier defining the object and change revision."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The appointment type name."""  
    oid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OID'), 'exclude': lambda f: f is None }})
    r"""The unique Object ID (OID)."""  
    system_type: Optional[DiaryAppointmentTypeModelSystemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SystemType'), 'exclude': lambda f: f is None }})
    r"""The appointment system type."""  
    