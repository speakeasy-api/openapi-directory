/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Adds items to an address group.
   */
  networksecurityProjectsLocationsAddressGroupsAddItems(
    req: operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsRequest,
    security: operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{addressGroup}:addItems",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addAddressGroupItemsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsResponse =
        new operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Clones items from one address group to another.
   */
  networksecurityProjectsLocationsAddressGroupsCloneItems(
    req: operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsRequest,
    security: operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{addressGroup}:cloneItems",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cloneAddressGroupItemsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsResponse =
        new operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new address group in a given project and location.
   */
  networksecurityProjectsLocationsAddressGroupsCreate(
    req: operations.NetworksecurityProjectsLocationsAddressGroupsCreateRequest,
    security: operations.NetworksecurityProjectsLocationsAddressGroupsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAddressGroupsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAddressGroupsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/addressGroups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addressGroupInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAddressGroupsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAddressGroupsCreateResponse =
        new operations.NetworksecurityProjectsLocationsAddressGroupsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists address groups in a given project and location.
   */
  networksecurityProjectsLocationsAddressGroupsList(
    req: operations.NetworksecurityProjectsLocationsAddressGroupsListRequest,
    security: operations.NetworksecurityProjectsLocationsAddressGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAddressGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAddressGroupsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/addressGroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAddressGroupsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAddressGroupsListResponse =
        new operations.NetworksecurityProjectsLocationsAddressGroupsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAddressGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAddressGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists references of an address group.
   */
  networksecurityProjectsLocationsAddressGroupsListReferences(
    req: operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesRequest,
    security: operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{addressGroup}:listReferences",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesResponse =
        new operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAddressGroupReferencesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAddressGroupReferencesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes items from an address group.
   */
  networksecurityProjectsLocationsAddressGroupsRemoveItems(
    req: operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsRequest,
    security: operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{addressGroup}:removeItems",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "removeAddressGroupItemsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsResponse =
        new operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new AuthorizationPolicy in a given project and location.
   */
  networksecurityProjectsLocationsAuthorizationPoliciesCreate(
    req: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest,
    security: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/authorizationPolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "authorizationPolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse =
        new operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists AuthorizationPolicies in a given project and location.
   */
  networksecurityProjectsLocationsAuthorizationPoliciesList(
    req: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest,
    security: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/authorizationPolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse =
        new operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorizationPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAuthorizationPoliciesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new ClientTlsPolicy in a given project and location.
   */
  networksecurityProjectsLocationsClientTlsPoliciesCreate(
    req: operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateRequest,
    security: operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/clientTlsPolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "clientTlsPolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateResponse =
        new operations.NetworksecurityProjectsLocationsClientTlsPoliciesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists ClientTlsPolicies in a given project and location.
   */
  networksecurityProjectsLocationsClientTlsPoliciesList(
    req: operations.NetworksecurityProjectsLocationsClientTlsPoliciesListRequest,
    security: operations.NetworksecurityProjectsLocationsClientTlsPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsClientTlsPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsClientTlsPoliciesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/clientTlsPolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsClientTlsPoliciesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsClientTlsPoliciesListResponse =
        new operations.NetworksecurityProjectsLocationsClientTlsPoliciesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listClientTlsPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListClientTlsPoliciesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new GatewaySecurityPolicy in a given project and location.
   */
  networksecurityProjectsLocationsGatewaySecurityPoliciesCreate(
    req: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest,
    security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/gatewaySecurityPolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "gatewaySecurityPolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists GatewaySecurityPolicies in a given project and location.
   */
  networksecurityProjectsLocationsGatewaySecurityPoliciesList(
    req: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest,
    security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/gatewaySecurityPolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGatewaySecurityPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGatewaySecurityPoliciesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new GatewaySecurityPolicy in a given project and location.
   */
  networksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreate(
    req: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest,
    security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/rules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "gatewaySecurityPolicyRuleInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists GatewaySecurityPolicyRules in a given project and location.
   */
  networksecurityProjectsLocationsGatewaySecurityPoliciesRulesList(
    req: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest,
    security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/rules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse =
        new operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGatewaySecurityPolicyRulesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGatewaySecurityPolicyRulesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  networksecurityProjectsLocationsList(
    req: operations.NetworksecurityProjectsLocationsListRequest,
    security: operations.NetworksecurityProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NetworksecurityProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NetworksecurityProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsListResponse =
        new operations.NetworksecurityProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  networksecurityProjectsLocationsOperationsCancel(
    req: operations.NetworksecurityProjectsLocationsOperationsCancelRequest,
    security: operations.NetworksecurityProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsOperationsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsOperationsCancelResponse =
        new operations.NetworksecurityProjectsLocationsOperationsCancelResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  networksecurityProjectsLocationsOperationsList(
    req: operations.NetworksecurityProjectsLocationsOperationsListRequest,
    security: operations.NetworksecurityProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsOperationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsOperationsListResponse =
        new operations.NetworksecurityProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new ServerTlsPolicy in a given project and location.
   */
  networksecurityProjectsLocationsServerTlsPoliciesCreate(
    req: operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateRequest,
    security: operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/serverTlsPolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "serverTlsPolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateResponse =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  networksecurityProjectsLocationsServerTlsPoliciesGetIamPolicy(
    req: operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyRequest,
    security: operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyResponse =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists ServerTlsPolicies in a given project and location.
   */
  networksecurityProjectsLocationsServerTlsPoliciesList(
    req: operations.NetworksecurityProjectsLocationsServerTlsPoliciesListRequest,
    security: operations.NetworksecurityProjectsLocationsServerTlsPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsServerTlsPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/serverTlsPolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsServerTlsPoliciesListResponse =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listServerTlsPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListServerTlsPoliciesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  networksecurityProjectsLocationsServerTlsPoliciesSetIamPolicy(
    req: operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyRequest,
    security: operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1SetIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyResponse =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  networksecurityProjectsLocationsServerTlsPoliciesTestIamPermissions(
    req: operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsRequest,
    security: operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1TestIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsResponse =
        new operations.NetworksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1TestIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new TlsInspectionPolicy in a given project and location.
   */
  networksecurityProjectsLocationsTlsInspectionPoliciesCreate(
    req: operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateRequest,
    security: operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/tlsInspectionPolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "tlsInspectionPolicyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateResponse =
        new operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists TlsInspectionPolicies in a given project and location.
   */
  networksecurityProjectsLocationsTlsInspectionPoliciesList(
    req: operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListRequest,
    security: operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/tlsInspectionPolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListResponse =
        new operations.NetworksecurityProjectsLocationsTlsInspectionPoliciesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTlsInspectionPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTlsInspectionPoliciesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new UrlList in a given project and location.
   */
  networksecurityProjectsLocationsUrlListsCreate(
    req: operations.NetworksecurityProjectsLocationsUrlListsCreateRequest,
    security: operations.NetworksecurityProjectsLocationsUrlListsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsUrlListsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsUrlListsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/urlLists",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "urlListInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsUrlListsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsUrlListsCreateResponse =
        new operations.NetworksecurityProjectsLocationsUrlListsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a single UrlList.
   */
  networksecurityProjectsLocationsUrlListsDelete(
    req: operations.NetworksecurityProjectsLocationsUrlListsDeleteRequest,
    security: operations.NetworksecurityProjectsLocationsUrlListsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsUrlListsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NetworksecurityProjectsLocationsUrlListsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsUrlListsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsUrlListsDeleteResponse =
        new operations.NetworksecurityProjectsLocationsUrlListsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of a single UrlList.
   */
  networksecurityProjectsLocationsUrlListsGet(
    req: operations.NetworksecurityProjectsLocationsUrlListsGetRequest,
    security: operations.NetworksecurityProjectsLocationsUrlListsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsUrlListsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NetworksecurityProjectsLocationsUrlListsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsUrlListsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsUrlListsGetResponse =
        new operations.NetworksecurityProjectsLocationsUrlListsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.urlList = utils.objectToClass(httpRes?.data, shared.UrlList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists UrlLists in a given project and location.
   */
  networksecurityProjectsLocationsUrlListsList(
    req: operations.NetworksecurityProjectsLocationsUrlListsListRequest,
    security: operations.NetworksecurityProjectsLocationsUrlListsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsUrlListsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NetworksecurityProjectsLocationsUrlListsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/urlLists",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsUrlListsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsUrlListsListResponse =
        new operations.NetworksecurityProjectsLocationsUrlListsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listUrlListsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListUrlListsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the parameters of a single UrlList.
   */
  networksecurityProjectsLocationsUrlListsPatch(
    req: operations.NetworksecurityProjectsLocationsUrlListsPatchRequest,
    security: operations.NetworksecurityProjectsLocationsUrlListsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NetworksecurityProjectsLocationsUrlListsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NetworksecurityProjectsLocationsUrlListsPatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "urlListInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NetworksecurityProjectsLocationsUrlListsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NetworksecurityProjectsLocationsUrlListsPatchResponse =
        new operations.NetworksecurityProjectsLocationsUrlListsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
