"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatientDrugOrderStatusEnum(str, Enum):
    r"""One of `\\"\\"`, `\\"Ordered\\"`, `\\"Administered during visit\\"`, `\\"Electronic eRx Sent\\"`, `\\"Phoned into Pharmacy\\"`, `\\"Faxed to Pharmacy\\"`, `\\"Paper Rx\\"`, `\\"Prescription Printed\\"`, `\\"Discontinued\\"`, `\\"Prescribed by other Dr\\"` or `\\"Over the Counter\\"`. If omitted in writing, default to `\\"\\"`"""
    UNKNOWN = ''
    ORDERED = 'Ordered'
    ADMINISTERED_DURING_VISIT = 'Administered during visit'
    ELECTRONIC_E_RX_SENT = 'Electronic eRx Sent'
    PHONED_INTO_PHARMACY = 'Phoned into Pharmacy'
    FAXED_TO_PHARMACY = 'Faxed to Pharmacy'
    PAPER_RX = 'Paper Rx'
    PRESCRIPTION_PRINTED = 'Prescription Printed'
    DISCONTINUED = 'Discontinued'
    PRESCRIBED_BY_OTHER_DR = 'Prescribed by other Dr'
    OVER_THE_COUNTER = 'Over the Counter'

class PatientDrugStatusEnum(str, Enum):
    r"""If present, one of `\\"active\\"` or `\\"inactive\\"`. If omitted in writing, default to `\\"active\\"`"""
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientDrug:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})
    r"""Prescribing doctor ID"""  
    patient: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    appointment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appointment'), 'exclude': lambda f: f is None }})
    r"""Appointment ID corresponding to the initial prescription"""  
    date_prescribed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_prescribed'), 'exclude': lambda f: f is None }})  
    date_started_taking: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_started_taking'), 'exclude': lambda f: f is None }})  
    date_stopped_taking: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_stopped_taking'), 'exclude': lambda f: f is None }})  
    daw: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daw'), 'exclude': lambda f: f is None }})
    r"""If true, the prescription should be dispensed as written and not substituted"""  
    dispense_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispense_quantity'), 'exclude': lambda f: f is None }})  
    dosage_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dosage_quantity'), 'exclude': lambda f: f is None }})
    r"""Please note, this used to be an decimal field, you can still pass decimal value to it. Or you can pass in some formatted string if needed."""  
    dosage_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dosage_units'), 'exclude': lambda f: f is None }})  
    frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Frequency pf administration"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    indication: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indication'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    ndc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ndc'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Any additional notes from the provider"""  
    number_refills: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_refills'), 'exclude': lambda f: f is None }})  
    order_status: Optional[PatientDrugOrderStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_status'), 'exclude': lambda f: f is None }})
    r"""One of `\\"\\"`, `\\"Ordered\\"`, `\\"Administered during visit\\"`, `\\"Electronic eRx Sent\\"`, `\\"Phoned into Pharmacy\\"`, `\\"Faxed to Pharmacy\\"`, `\\"Paper Rx\\"`, `\\"Prescription Printed\\"`, `\\"Discontinued\\"`, `\\"Prescribed by other Dr\\"` or `\\"Over the Counter\\"`. If omitted in writing, default to `\\"\\"`"""  
    pharmacy_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pharmacy_note'), 'exclude': lambda f: f is None }})  
    prn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prn'), 'exclude': lambda f: f is None }})
    r"""If `True`, the medication should be taken when necessary"""  
    route: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route'), 'exclude': lambda f: f is None }})
    r"""Route of administration"""  
    rxnorm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxnorm'), 'exclude': lambda f: f is None }})
    r"""RxNorm code for the medication"""  
    signature_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signature_note'), 'exclude': lambda f: f is None }})  
    status: Optional[PatientDrugStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""If present, one of `\\"active\\"` or `\\"inactive\\"`. If omitted in writing, default to `\\"active\\"`"""  
    