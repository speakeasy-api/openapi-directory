// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetAccountsAccountTradesPathParams struct {
	// Account Number
	Account string `pathParam:"style=simple,explode=false,name=account"`
}

type GetAccountsAccountTradesRequest struct {
	PathParams GetAccountsAccountTradesPathParams
	// Start time specified in UTC. Allowed formats are "yyyy-MM-dd" or "yyyy-MM-dd'T'HH:mm:ss". Time is optional and is set to midnight if omitted, e.g. "00:00:00 hh:mm:ss".
	//
	Request *string `request:"mediaType=application/json"`
}

type GetAccountsAccountTrades200ApplicationJSONSideEnum string

const (
	GetAccountsAccountTrades200ApplicationJSONSideEnumOne GetAccountsAccountTrades200ApplicationJSONSideEnum = "1"
	GetAccountsAccountTrades200ApplicationJSONSideEnumTwo GetAccountsAccountTrades200ApplicationJSONSideEnum = "2"
)

func (e *GetAccountsAccountTrades200ApplicationJSONSideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = GetAccountsAccountTrades200ApplicationJSONSideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountsAccountTrades200ApplicationJSONSideEnum: %s", s)
	}
}

type GetAccountsAccountTrades200ApplicationJSON struct {
	AvgPrice           *float64 `json:"AvgPrice,omitempty"`
	Commission         *float64 `json:"Commission,omitempty"`
	CommissionCurrency *string  `json:"CommissionCurrency,omitempty"`
	ContractID         *float64 `json:"ContractId,omitempty"`
	Currency           *string  `json:"Currency,omitempty"`
	CustomerOrderID    *float64 `json:"CustomerOrderId,omitempty"`
	ExecID             *string  `json:"ExecId,omitempty"`
	ExecutionTime      *string  `json:"ExecutionTime,omitempty"`
	FilledQuantity     *float64 `json:"FilledQuantity,omitempty"`
	LastMarket         *string  `json:"LastMarket,omitempty"`
	ListingExchange    *string  `json:"ListingExchange,omitempty"`
	OrderID            *string  `json:"OrderId,omitempty"`
	// Market = '1'
	// Limit = '2'
	// Stop = '3'
	// StopLimit = '4'
	//
	OrderType         *shared.OrderTypeEnum                               `json:"OrderType,omitempty"`
	Quantity          *float64                                            `json:"Quantity,omitempty"`
	RemainingQuantity *float64                                            `json:"RemainingQuantity,omitempty"`
	Side              *GetAccountsAccountTrades200ApplicationJSONSideEnum `json:"Side,omitempty"`
	Ticker            *string                                             `json:"Ticker,omitempty"`
	TradePrice        *float64                                            `json:"TradePrice,omitempty"`
	TradeSize         *float64                                            `json:"TradeSize,omitempty"`
}

type GetAccountsAccountTradesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// List of Trades
	GetAccountsAccountTrades200ApplicationJSONObjects []GetAccountsAccountTrades200ApplicationJSON
}
