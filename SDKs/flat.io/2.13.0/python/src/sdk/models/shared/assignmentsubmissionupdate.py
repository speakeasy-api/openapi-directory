"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classattachmentcreation as shared_classattachmentcreation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentSubmissionUpdateComments:
    
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""The total number of comments added to the submission"""  
    unread: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unread'), 'exclude': lambda f: f is None }})
    r"""The number of unread comments for the current user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentSubmissionUpdate:
    r"""Assignment Submission creation"""
    
    attachments: Optional[list[shared_classattachmentcreation.ClassAttachmentCreation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})  
    comments: Optional[AssignmentSubmissionUpdateComments] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    draft_grade: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draftGrade'), 'exclude': lambda f: f is None }})
    r"""Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission"""  
    grade: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grade'), 'exclude': lambda f: f is None }})
    r"""Optional grade. If unset, no grade was set."""  
    return_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return'), 'exclude': lambda f: f is None }})
    r"""If `true`, the submission will be marked as done"""  
    submit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submit'), 'exclude': lambda f: f is None }})
    r"""If `true`, the submission will be marked as done"""  
    