"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import group as shared_group
from ..shared import listapplicationcomponentsresponse as shared_listapplicationcomponentsresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ListApplicationComponentsRequestBodyApplicationComponentCriteriaEnum(str, Enum):
    r"""Criteria for filtering the list of application components."""
    NOT_DEFINED = 'NOT_DEFINED'
    APP_NAME = 'APP_NAME'
    SERVER_ID = 'SERVER_ID'
    APP_TYPE = 'APP_TYPE'
    STRATEGY = 'STRATEGY'
    DESTINATION = 'DESTINATION'
    ANALYSIS_STATUS = 'ANALYSIS_STATUS'
    ERROR_CATEGORY = 'ERROR_CATEGORY'

class ListApplicationComponentsRequestBodySortEnum(str, Enum):
    r"""Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order."""
    ASC = 'ASC'
    DESC = 'DESC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListApplicationComponentsRequestBody:
    
    application_component_criteria: Optional[ListApplicationComponentsRequestBodyApplicationComponentCriteriaEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationComponentCriteria'), 'exclude': lambda f: f is None }})
    r"""Criteria for filtering the list of application components."""  
    filter_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterValue'), 'exclude': lambda f: f is None }})
    r"""Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <a>ListApplicationComponents</a> returns all the application components running on server1."""  
    group_id_filter: Optional[list[shared_group.Group]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupIdFilter'), 'exclude': lambda f: f is None }})
    r"""The group ID specified in to filter on."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of items to include in the response. The maximum value is 100."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10."""  
    sort: Optional[ListApplicationComponentsRequestBodySortEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort'), 'exclude': lambda f: f is None }})
    r"""Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order."""  
    

@dataclasses.dataclass
class ListApplicationComponentsRequest:
    
    request_body: ListApplicationComponentsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListApplicationComponentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_application_components_response: Optional[shared_listapplicationcomponentsresponse.ListApplicationComponentsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_linked_role_lock_client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceLinkedRoleLockClientException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    