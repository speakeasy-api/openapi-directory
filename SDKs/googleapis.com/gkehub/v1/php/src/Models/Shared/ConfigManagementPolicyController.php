<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ConfigManagementPolicyController - Configuration for Policy Controller
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ConfigManagementPolicyController
{
    /**
     * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     * @var ?string $auditIntervalSeconds
     */
	#[\JMS\Serializer\Annotation\SerializedName('auditIntervalSeconds')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $auditIntervalSeconds = null;
    
    /**
     * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
     * 
     * @var ?bool $enabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enabled = null;
    
    /**
     * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     * @var ?array<string> $exemptableNamespaces
     */
	#[\JMS\Serializer\Annotation\SerializedName('exemptableNamespaces')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $exemptableNamespaces = null;
    
    /**
     * Logs all denies and dry run failures.
     * 
     * @var ?bool $logDeniesEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('logDeniesEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $logDeniesEnabled = null;
    
    /**
     * PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ConfigManagementPolicyControllerMonitoring $monitoring
     */
	#[\JMS\Serializer\Annotation\SerializedName('monitoring')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ConfigManagementPolicyControllerMonitoring')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConfigManagementPolicyControllerMonitoring $monitoring = null;
    
    /**
     * Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
     * 
     * @var ?bool $mutationEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('mutationEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $mutationEnabled = null;
    
    /**
     * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     * @var ?bool $referentialRulesEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('referentialRulesEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $referentialRulesEnabled = null;
    
    /**
     * Installs the default template library along with Policy Controller.
     * 
     * @var ?bool $templateLibraryInstalled
     */
	#[\JMS\Serializer\Annotation\SerializedName('templateLibraryInstalled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $templateLibraryInstalled = null;
    
	public function __construct()
	{
		$this->auditIntervalSeconds = null;
		$this->enabled = null;
		$this->exemptableNamespaces = null;
		$this->logDeniesEnabled = null;
		$this->monitoring = null;
		$this->mutationEnabled = null;
		$this->referentialRulesEnabled = null;
		$this->templateLibraryInstalled = null;
	}
}
