/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PdfUploadAttributes } from "./pdfuploadattributes";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Document upload status.
 *
 * @remarks
 *
 */
export enum DocumentUploadStatusAttributesStatusEnum {
  Pending = "pending",
  Uploaded = "uploaded",
  Received = "received",
  Processing = "processing",
  Success = "success",
  Vbms = "vbms",
  Error = "error",
}

export class DocumentUploadStatusAttributes extends SpeakeasyBase {
  /**
   * Unambiguous status code. Only present if status = "error"
   *
   * @remarks
   *
   * * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
   * * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
   * * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
   * * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
   * * `DOC105` - Invalid or unknown id
   * * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
   * * `DOC107` - Empty payload.
   * * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
   * * `DOC201` - Upload server error.
   * * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Human readable error detail. Only present if status = "error"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * The document upload identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "guid" })
  guid: string;

  /**
   * Human readable error description. Only present if status = "error"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * Document upload status.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: DocumentUploadStatusAttributesStatusEnum;

  /**
   * The last time the submission was updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "uploaded_pdf" })
  @Type(() => PdfUploadAttributes)
  uploadedPdf?: PdfUploadAttributes;
}
