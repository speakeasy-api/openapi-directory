"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class PendingEmails:
    r"""Pending Emails"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_pending_emails_json(self, request: operations.GetV2PendingEmailsJSONRequest) -> operations.GetV2PendingEmailsJSONResponse:
        r"""Fetches a list of emails ready to be sent by an external email service. Only emails sent with an External Email Client will appear here.
        Fetches a list of emails ready to be sent by an external email service.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/pending_emails.json'
        
        query_params = utils.get_query_params(operations.GetV2PendingEmailsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2PendingEmailsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_pending_emails_id_json(self, request: operations.PutV2PendingEmailsIDJSONRequest) -> operations.PutV2PendingEmailsIDJSONResponse:
        r"""Updates the status of an email sent by an External Email Client
        Updates the status of an email sent by an External Email Client. Does not affect lofted emails.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2PendingEmailsIDJSONRequest, base_url, '/v2/pending_emails/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2PendingEmailsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    