/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig - The reCAPTCHA Enterprise integration config.
 */
public class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig {
    /**
     * The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailPasswordEnforcementState")
    public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum emailPasswordEnforcementState;

    public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig withEmailPasswordEnforcementState(GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum emailPasswordEnforcementState) {
        this.emailPasswordEnforcementState = emailPasswordEnforcementState;
        return this;
    }
    
    /**
     * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managedRules")
    public GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule[] managedRules;

    public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig withManagedRules(GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule[] managedRules) {
        this.managedRules = managedRules;
        return this;
    }
    
    /**
     * Output only. The reCAPTCHA keys.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recaptchaKeys")
    public GoogleCloudIdentitytoolkitAdminV2RecaptchaKey[] recaptchaKeys;

    public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig withRecaptchaKeys(GoogleCloudIdentitytoolkitAdminV2RecaptchaKey[] recaptchaKeys) {
        this.recaptchaKeys = recaptchaKeys;
        return this;
    }
    
    /**
     * Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useAccountDefender")
    public Boolean useAccountDefender;

    public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig withUseAccountDefender(Boolean useAccountDefender) {
        this.useAccountDefender = useAccountDefender;
        return this;
    }
    
    public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(){}
}
