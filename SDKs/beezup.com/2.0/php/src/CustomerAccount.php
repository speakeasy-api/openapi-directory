<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomerAccount 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate the user account
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateUserAccountResponse
     */
	public function activateUserAccount(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateUserAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/activate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateUserAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change user email
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ChangeEmailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeEmailResponse
     */
	public function changeEmail(
        \OpenAPI\OpenAPI\Models\Shared\ChangeEmailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/changeEmail');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change user password
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ChangePasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
     */
	public function changePassword(
        \OpenAPI\OpenAPI\Models\Shared\ChangePasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/changePassword');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get credit card information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCreditCardInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCreditCardInfoResponse
     */
	public function getCreditCardInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetCreditCardInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCreditCardInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/creditCardInfo');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCreditCardInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creditCardInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreditCardInfoResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get profile picture information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProfilePictureInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProfilePictureInfoResponse
     */
	public function getProfilePictureInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetProfilePictureInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProfilePictureInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/profilePictureInfo');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProfilePictureInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profilePictureInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfilePictureInfoResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user account information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserAccountInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserAccountInfoResponse
     */
	public function getUserAccountInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetUserAccountInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserAccountInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserAccountInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resend email activation
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResendEmailActivationResponse
     */
	public function resendEmailActivation(
    ): \OpenAPI\OpenAPI\Models\Operations\ResendEmailActivationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/resendEmailActivation');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResendEmailActivationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change company information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CompanyInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveCompanyInfoResponse
     */
	public function saveCompanyInfo(
        \OpenAPI\OpenAPI\Models\Shared\CompanyInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveCompanyInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/companyInfo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveCompanyInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Save user credit card info
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreditCardInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveCreditCardInfoResponse
     */
	public function saveCreditCardInfo(
        \OpenAPI\OpenAPI\Models\Shared\CreditCardInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveCreditCardInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/creditCardInfo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveCreditCardInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Save user personal information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PersonalInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SavePersonalInfoResponse
     */
	public function savePersonalInfo(
        \OpenAPI\OpenAPI\Models\Shared\PersonalInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SavePersonalInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/personalInfo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SavePersonalInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change user picture information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProfilePictureInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveProfilePictureInfoResponse
     */
	public function saveProfilePictureInfo(
        \OpenAPI\OpenAPI\Models\Shared\ProfilePictureInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveProfilePictureInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/customer/account/profilePictureInfo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveProfilePictureInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}