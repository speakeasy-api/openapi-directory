"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class CrossSelling:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def product_search_accessories(self, request: operations.ProductSearchAccessoriesRequest, server_url: Optional[str] = None) -> operations.ProductSearchAccessoriesResponse:
        r"""Get Product Search of Accessories
        Retrieves general information about the product's accessories.
        """
        base_url = operations.PRODUCT_SEARCH_ACCESSORIES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchAccessoriesRequest, base_url, '/api/catalog_system/pub/products/crossselling/accessories/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchAccessoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def product_search_show_together(self, request: operations.ProductSearchShowTogetherRequest, server_url: Optional[str] = None) -> operations.ProductSearchShowTogetherResponse:
        r"""Get Product Search of Show Together
        Retrieves general information about the products that are show together with the product in question.
        """
        base_url = operations.PRODUCT_SEARCH_SHOW_TOGETHER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchShowTogetherRequest, base_url, '/api/catalog_system/pub/products/crossselling/showtogether/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchShowTogetherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def product_search_similars(self, request: operations.ProductSearchSimilarsRequest, server_url: Optional[str] = None) -> operations.ProductSearchSimilarsResponse:
        r"""Get Product Search of Similars
        Retrieves general information about related product searches.
        """
        base_url = operations.PRODUCT_SEARCH_SIMILARS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchSimilarsRequest, base_url, '/api/catalog_system/pub/products/crossselling/similars/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchSimilarsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def product_search_suggestions(self, request: operations.ProductSearchSuggestionsRequest, server_url: Optional[str] = None) -> operations.ProductSearchSuggestionsResponse:
        r"""Get Product Search of Suggestions
        Retrieves general information about other product suggestions related to the product.
        """
        base_url = operations.PRODUCT_SEARCH_SUGGESTIONS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchSuggestionsRequest, base_url, '/api/catalog_system/pub/products/crossselling/suggestions/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchSuggestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def product_search_who_bought_also_bought(self, request: operations.ProductSearchWhoBoughtAlsoBoughtRequest, server_url: Optional[str] = None) -> operations.ProductSearchWhoBoughtAlsoBoughtResponse:
        r"""Get Product Search of Who Bought Also Bought
        Retrieves general information about other related products that the user also bought.
        """
        base_url = operations.PRODUCT_SEARCH_WHO_BOUGHT_ALSO_BOUGHT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchWhoBoughtAlsoBoughtRequest, base_url, '/api/catalog_system/pub/products/crossselling/whoboughtalsobought/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchWhoBoughtAlsoBoughtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.ProductSearchWhoBoughtAlsoBought200ApplicationJSON]])
                res.product_search_who_bought_also_bought_200_application_json_objects = out

        return res

    def product_search_who_saw_also_bought(self, request: operations.ProductSearchWhoSawAlsoBoughtRequest, server_url: Optional[str] = None) -> operations.ProductSearchWhoSawAlsoBoughtResponse:
        r"""Get Product Search of Who Saw Also Bought
        Retrieves general information about other related products that the users saw and also bought.
        """
        base_url = operations.PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchWhoSawAlsoBoughtRequest, base_url, '/api/catalog_system/pub/products/crossselling/whosawalsobought/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchWhoSawAlsoBoughtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.ProductSearchWhoSawAlsoBought200ApplicationJSON]])
                res.product_search_who_saw_also_bought_200_application_json_objects = out

        return res

    def product_search_who_saw_also_saw(self, request: operations.ProductSearchWhoSawAlsoSawRequest, server_url: Optional[str] = None) -> operations.ProductSearchWhoSawAlsoSawResponse:
        r"""Get Product Search of Who Saw Also Saw
        Retrieves general information about other related products that the users also saw.
        """
        base_url = operations.PRODUCT_SEARCH_WHO_SAW_ALSO_SAW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ProductSearchWhoSawAlsoSawRequest, base_url, '/api/catalog_system/pub/products/crossselling/whosawalsosaw/{productId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductSearchWhoSawAlsoSawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.ProductSearchWhoSawAlsoSaw200ApplicationJSON]])
                res.product_search_who_saw_also_saw_200_application_json_objects = out

        return res

    