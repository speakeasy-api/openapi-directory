<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class PostUsersRequestBody
{
    /**
     * A list of allowed IPs if applicable.  Newline delimited
     * 
     * @var ?string $allowedIps
     */
	#[SpeakeasyMetadata('multipartForm:name=allowed_ips')]
    public ?string $allowedIps = null;
    
    /**
     * Signifies that the user has read all the announcements in the UI.
     * 
     * @var ?bool $announcementsRead
     */
	#[SpeakeasyMetadata('multipartForm:name=announcements_read')]
    public ?bool $announcementsRead = null;
    
    /**
     * DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
     * 
     * @var ?bool $attachmentsPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=attachments_permission')]
    public ?bool $attachmentsPermission = null;
    
    /**
     * Scheduled Date/Time at which user will be deactivated
     * 
     * @var ?\DateTime $authenticateUntil
     */
	#[SpeakeasyMetadata('multipartForm:name=authenticate_until,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $authenticateUntil = null;
    
    /**
     * How is this user authenticated?
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PostUsersRequestBodyAuthenticationMethodEnum $authenticationMethod
     */
	#[SpeakeasyMetadata('multipartForm:name=authentication_method')]
    public ?PostUsersRequestBodyAuthenticationMethodEnum $authenticationMethod = null;
    
    /**
     * If true, the avatar will be deleted.
     * 
     * @var ?bool $avatarDelete
     */
	#[SpeakeasyMetadata('multipartForm:name=avatar_delete')]
    public ?bool $avatarDelete = null;
    
    /**
     * An image file for your user avatar.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PostUsersRequestBodyAvatarFile $avatarFile
     */
	#[SpeakeasyMetadata('multipartForm:file=true')]
    public ?PostUsersRequestBodyAvatarFile $avatarFile = null;
    
    /**
     * Allow this user to perform operations on the account, payments, and invoices?
     * 
     * @var ?bool $billingPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=billing_permission')]
    public ?bool $billingPermission = null;
    
    /**
     * Exempt this user from being disabled based on inactivity?
     * 
     * @var ?bool $bypassInactiveDisable
     */
	#[SpeakeasyMetadata('multipartForm:name=bypass_inactive_disable')]
    public ?bool $bypassInactiveDisable = null;
    
    /**
     * Allow this user to skip site-wide IP blacklists?
     * 
     * @var ?bool $bypassSiteAllowedIps
     */
	#[SpeakeasyMetadata('multipartForm:name=bypass_site_allowed_ips')]
    public ?bool $bypassSiteAllowedIps = null;
    
    /**
     * Used for changing a password on an existing user.
     * 
     * @var ?string $changePassword
     */
	#[SpeakeasyMetadata('multipartForm:name=change_password')]
    public ?string $changePassword = null;
    
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `change_password`.
     * 
     * @var ?string $changePasswordConfirmation
     */
	#[SpeakeasyMetadata('multipartForm:name=change_password_confirmation')]
    public ?string $changePasswordConfirmation = null;
    
    /**
     * User's company
     * 
     * @var ?string $company
     */
	#[SpeakeasyMetadata('multipartForm:name=company')]
    public ?string $company = null;
    
    /**
     * Can the user connect with WebDAV?
     * 
     * @var ?bool $davPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=dav_permission')]
    public ?bool $davPermission = null;
    
    /**
     * Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
     * 
     * @var ?bool $disabled
     */
	#[SpeakeasyMetadata('multipartForm:name=disabled')]
    public ?bool $disabled = null;
    
    /**
     * User's email.
     * 
     * @var ?string $email
     */
	#[SpeakeasyMetadata('multipartForm:name=email')]
    public ?string $email = null;
    
    /**
     * Can the user access with FTP/FTPS?
     * 
     * @var ?bool $ftpPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=ftp_permission')]
    public ?bool $ftpPermission = null;
    
    /**
     * Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`.
     * 
     * @var ?string $grantPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=grant_permission')]
    public ?string $grantPermission = null;
    
    /**
     * Group ID to associate this user with.
     * 
     * @var ?int $groupId
     */
	#[SpeakeasyMetadata('multipartForm:name=group_id')]
    public ?int $groupId = null;
    
    /**
     * A list of group ids to associate this user with.  Comma delimited.
     * 
     * @var ?string $groupIds
     */
	#[SpeakeasyMetadata('multipartForm:name=group_ids')]
    public ?string $groupIds = null;
    
    /**
     * Text to display to the user in the header of the UI
     * 
     * @var ?string $headerText
     */
	#[SpeakeasyMetadata('multipartForm:name=header_text')]
    public ?string $headerText = null;
    
    /**
     * Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.
     * 
     * @var ?string $importedPasswordHash
     */
	#[SpeakeasyMetadata('multipartForm:name=imported_password_hash')]
    public ?string $importedPasswordHash = null;
    
    /**
     * Preferred language
     * 
     * @var ?string $language
     */
	#[SpeakeasyMetadata('multipartForm:name=language')]
    public ?string $language = null;
    
    /**
     * User's full name
     * 
     * @var ?string $name
     */
	#[SpeakeasyMetadata('multipartForm:name=name')]
    public ?string $name = null;
    
    /**
     * Any internal notes on the user
     * 
     * @var ?string $notes
     */
	#[SpeakeasyMetadata('multipartForm:name=notes')]
    public ?string $notes = null;
    
    /**
     * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
     * 
     * @var ?int $notificationDailySendTime
     */
	#[SpeakeasyMetadata('multipartForm:name=notification_daily_send_time')]
    public ?int $notificationDailySendTime = null;
    
    /**
     * Enable integration with Office for the web?
     * 
     * @var ?bool $officeIntegrationEnabled
     */
	#[SpeakeasyMetadata('multipartForm:name=office_integration_enabled')]
    public ?bool $officeIntegrationEnabled = null;
    
    /**
     * User password.
     * 
     * @var ?string $password
     */
	#[SpeakeasyMetadata('multipartForm:name=password')]
    public ?string $password = null;
    
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `password`.
     * 
     * @var ?string $passwordConfirmation
     */
	#[SpeakeasyMetadata('multipartForm:name=password_confirmation')]
    public ?string $passwordConfirmation = null;
    
    /**
     * Number of days to allow user to use the same password
     * 
     * @var ?int $passwordValidityDays
     */
	#[SpeakeasyMetadata('multipartForm:name=password_validity_days')]
    public ?int $passwordValidityDays = null;
    
    /**
     * Should the user receive admin alerts such a certificate expiration notifications and overages?
     * 
     * @var ?bool $receiveAdminAlerts
     */
	#[SpeakeasyMetadata('multipartForm:name=receive_admin_alerts')]
    public ?bool $receiveAdminAlerts = null;
    
    /**
     * 2FA required setting
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PostUsersRequestBodyRequire2faEnum $require2fa
     */
	#[SpeakeasyMetadata('multipartForm:name=require_2fa')]
    public ?PostUsersRequestBodyRequire2faEnum $require2fa = null;
    
    /**
     * Is a password change required upon next user login?
     * 
     * @var ?bool $requirePasswordChange
     */
	#[SpeakeasyMetadata('multipartForm:name=require_password_change')]
    public ?bool $requirePasswordChange = null;
    
    /**
     * Can this user access the REST API?
     * 
     * @var ?bool $restapiPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=restapi_permission')]
    public ?bool $restapiPermission = null;
    
    /**
     * Does this user manage it's own credentials or is it a shared/bot user?
     * 
     * @var ?bool $selfManaged
     */
	#[SpeakeasyMetadata('multipartForm:name=self_managed')]
    public ?bool $selfManaged = null;
    
    /**
     * Can the user access with SFTP?
     * 
     * @var ?bool $sftpPermission
     */
	#[SpeakeasyMetadata('multipartForm:name=sftp_permission')]
    public ?bool $sftpPermission = null;
    
    /**
     * Is the user an administrator for this site?
     * 
     * @var ?bool $siteAdmin
     */
	#[SpeakeasyMetadata('multipartForm:name=site_admin')]
    public ?bool $siteAdmin = null;
    
    /**
     * Skip Welcome page in the UI?
     * 
     * @var ?bool $skipWelcomeScreen
     */
	#[SpeakeasyMetadata('multipartForm:name=skip_welcome_screen')]
    public ?bool $skipWelcomeScreen = null;
    
    /**
     * SSL required setting
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PostUsersRequestBodySslRequiredEnum $sslRequired
     */
	#[SpeakeasyMetadata('multipartForm:name=ssl_required')]
    public ?PostUsersRequestBodySslRequiredEnum $sslRequired = null;
    
    /**
     * SSO (Single Sign On) strategy ID for the user, if applicable.
     * 
     * @var ?int $ssoStrategyId
     */
	#[SpeakeasyMetadata('multipartForm:name=sso_strategy_id')]
    public ?int $ssoStrategyId = null;
    
    /**
     * Is the user subscribed to the newsletter?
     * 
     * @var ?bool $subscribeToNewsletter
     */
	#[SpeakeasyMetadata('multipartForm:name=subscribe_to_newsletter')]
    public ?bool $subscribeToNewsletter = null;
    
    /**
     * User time zone
     * 
     * @var ?string $timeZone
     */
	#[SpeakeasyMetadata('multipartForm:name=time_zone')]
    public ?string $timeZone = null;
    
    /**
     * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
     * 
     * @var ?string $userRoot
     */
	#[SpeakeasyMetadata('multipartForm:name=user_root')]
    public ?string $userRoot = null;
    
    /**
     * User's username
     * 
     * @var ?string $username
     */
	#[SpeakeasyMetadata('multipartForm:name=username')]
    public ?string $username = null;
    
	public function __construct()
	{
		$this->allowedIps = null;
		$this->announcementsRead = null;
		$this->attachmentsPermission = null;
		$this->authenticateUntil = null;
		$this->authenticationMethod = null;
		$this->avatarDelete = null;
		$this->avatarFile = null;
		$this->billingPermission = null;
		$this->bypassInactiveDisable = null;
		$this->bypassSiteAllowedIps = null;
		$this->changePassword = null;
		$this->changePasswordConfirmation = null;
		$this->company = null;
		$this->davPermission = null;
		$this->disabled = null;
		$this->email = null;
		$this->ftpPermission = null;
		$this->grantPermission = null;
		$this->groupId = null;
		$this->groupIds = null;
		$this->headerText = null;
		$this->importedPasswordHash = null;
		$this->language = null;
		$this->name = null;
		$this->notes = null;
		$this->notificationDailySendTime = null;
		$this->officeIntegrationEnabled = null;
		$this->password = null;
		$this->passwordConfirmation = null;
		$this->passwordValidityDays = null;
		$this->receiveAdminAlerts = null;
		$this->require2fa = null;
		$this->requirePasswordChange = null;
		$this->restapiPermission = null;
		$this->selfManaged = null;
		$this->sftpPermission = null;
		$this->siteAdmin = null;
		$this->skipWelcomeScreen = null;
		$this->sslRequired = null;
		$this->ssoStrategyId = null;
		$this->subscribeToNewsletter = null;
		$this->timeZone = null;
		$this->userRoot = null;
		$this->username = null;
	}
}
