"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudsqlconfig as shared_cloudsqlconfig
from ..shared import googlecloudservicenetworkingv1consumerconfigreservedrange as shared_googlecloudservicenetworkingv1consumerconfigreservedrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsumerConfigInput:
    r"""Configuration information for a private service access connection."""
    
    cloudsql_configs: Optional[list[shared_cloudsqlconfig.CloudSQLConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudsqlConfigs'), 'exclude': lambda f: f is None }})
    r"""Represents one or multiple Cloud SQL configurations."""  
    consumer_export_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerExportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Export custom routes flag value for peering from consumer to producer."""  
    consumer_export_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerExportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Export subnet routes with public ip flag value for peering from consumer to producer."""  
    consumer_import_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerImportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Import custom routes flag value for peering from consumer to producer."""  
    consumer_import_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerImportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Import subnet routes with public ip flag value for peering from consumer to producer."""  
    producer_export_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerExportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Export custom routes flag value for peering from producer to consumer."""  
    producer_export_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerExportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Export subnet routes with public ip flag value for peering from producer to consumer."""  
    producer_import_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerImportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Import custom routes flag value for peering from producer to consumer."""  
    producer_import_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerImportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Import subnet routes with public ip flag value for peering from producer to consumer."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsumerConfig:
    r"""Configuration information for a private service access connection."""
    
    cloudsql_configs: Optional[list[shared_cloudsqlconfig.CloudSQLConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudsqlConfigs'), 'exclude': lambda f: f is None }})
    r"""Represents one or multiple Cloud SQL configurations."""  
    consumer_export_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerExportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Export custom routes flag value for peering from consumer to producer."""  
    consumer_export_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerExportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Export subnet routes with public ip flag value for peering from consumer to producer."""  
    consumer_import_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerImportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Import custom routes flag value for peering from consumer to producer."""  
    consumer_import_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerImportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Import subnet routes with public ip flag value for peering from consumer to producer."""  
    producer_export_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerExportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Export custom routes flag value for peering from producer to consumer."""  
    producer_export_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerExportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Export subnet routes with public ip flag value for peering from producer to consumer."""  
    producer_import_custom_routes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerImportCustomRoutes'), 'exclude': lambda f: f is None }})
    r"""Import custom routes flag value for peering from producer to consumer."""  
    producer_import_subnet_routes_with_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerImportSubnetRoutesWithPublicIp'), 'exclude': lambda f: f is None }})
    r"""Import subnet routes with public ip flag value for peering from producer to consumer."""  
    producer_network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producerNetwork'), 'exclude': lambda f: f is None }})
    r"""Output only. The VPC host network that is used to host managed service instances. In the format, projects/{project}/global/networks/{network} where {project} is the project number e.g. '12345' and {network} is the network name."""  
    reserved_ranges: Optional[list[shared_googlecloudservicenetworkingv1consumerconfigreservedrange.GoogleCloudServicenetworkingV1ConsumerConfigReservedRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservedRanges'), 'exclude': lambda f: f is None }})
    r"""Output only. The reserved ranges associated with this private service access connection."""  
    used_ip_ranges: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usedIpRanges'), 'exclude': lambda f: f is None }})
    r"""Output only. The IP ranges already in use by consumer or producer"""  
    vpc_sc_reference_architecture_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcScReferenceArchitectureEnabled'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates whether the VPC Service Controls reference architecture is configured for the producer VPC host network."""  
    