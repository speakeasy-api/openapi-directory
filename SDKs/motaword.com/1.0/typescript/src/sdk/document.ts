/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Document {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a list of subjects of projects
   *
   * @remarks
   * Get a list of subjects of projects
   */
  getAllDocumentSubjects(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllDocumentSubjectsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/documents/subjects";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllDocumentSubjectsResponse =
        new operations.GetAllDocumentSubjectsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.documentSubjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.documentSubjects = utils.objectToClass(
              httpRes?.data,
              shared.DocumentSubjects,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View a single document
   *
   * @remarks
   * View a single document from your MotaWord account with its translation info.
   */
  getDocument(
    req: operations.GetDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{documentId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDocumentResponse =
        new operations.GetDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.continuousProjectDocument = utils.objectToClass(
              httpRes?.data,
              shared.ContinuousProjectDocument
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View a document translation progress
   *
   * @remarks
   * View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
   */
  getDocumentProgress(
    req: operations.GetDocumentProgressRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDocumentProgressResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDocumentProgressRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{documentId}/progress",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDocumentProgressResponse =
        new operations.GetDocumentProgressResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.progress = utils.objectToClass(httpRes?.data, shared.Progress);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * View your documents
   *
   * @remarks
   * View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
   */
  getDocuments(
    req: operations.GetDocumentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDocumentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDocumentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/documents";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDocumentsResponse =
        new operations.GetDocumentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.documentList = utils.objectToClass(
              httpRes?.data,
              shared.DocumentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find documents similar to this document.
   *
   * @remarks
   * Find documents similar to this document. Optionally, include translation information.
   */
  getSimilarDocuments(
    req: operations.GetSimilarDocumentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSimilarDocumentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSimilarDocumentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{documentId}/similars",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSimilarDocumentsResponse =
        new operations.GetSimilarDocumentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.documentList = utils.objectToClass(
              httpRes?.data,
              shared.DocumentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of your documents
   *
   * @remarks
   * Get a list of your documents
   */
  getUserDocuments(
    req: operations.GetUserDocumentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserDocumentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserDocumentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{userId}/documents", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserDocumentsResponse =
        new operations.GetUserDocumentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.documentList = utils.objectToClass(
              httpRes?.data,
              shared.DocumentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Regenerate preview and return preview URL for given file
   *
   * @remarks
   * Regenerate preview and return preview URL for given file
   */
  regeneratePreview(
    req: operations.RegeneratePreviewRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RegeneratePreviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RegeneratePreviewRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{documentId}/regenerate_preview",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RegeneratePreviewResponse =
        new operations.RegeneratePreviewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.regeneratePreviewResponse = utils.objectToClass(
              httpRes?.data,
              shared.RegeneratePreviewResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Use the translation of given source manual document as manual draft source for the given target document.
   *
   * @remarks
   * Use the translation of given source manual document as manual draft source for the given target document.
   */
  useAsDraft(
    req: operations.UseAsDraftRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UseAsDraftResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UseAsDraftRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{documentId}/use_as_draft",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "useAsDraftPayload",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UseAsDraftResponse =
        new operations.UseAsDraftResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationStatus = utils.objectToClass(
              httpRes?.data,
              shared.OperationStatus
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Use the translation of the given manual document as a regular file.
   *
   * @remarks
   * Use the translation of the given manual document as a regular file.
   */
  useAsRegular(
    req: operations.UseAsRegularRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UseAsRegularResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UseAsRegularRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{documentId}/use_as_regular",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "useAsRegularPayload",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UseAsRegularResponse =
        new operations.UseAsRegularResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationStatus = utils.objectToClass(
              httpRes?.data,
              shared.OperationStatus
            );
          }
          break;
      }

      return res;
    });
  }
}
