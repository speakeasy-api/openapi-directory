// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReachabilityDetailsResultEnum - The overall result of the test's configuration analysis.
type ReachabilityDetailsResultEnum string

const (
	ReachabilityDetailsResultEnumResultUnspecified ReachabilityDetailsResultEnum = "RESULT_UNSPECIFIED"
	ReachabilityDetailsResultEnumReachable         ReachabilityDetailsResultEnum = "REACHABLE"
	ReachabilityDetailsResultEnumUnreachable       ReachabilityDetailsResultEnum = "UNREACHABLE"
	ReachabilityDetailsResultEnumAmbiguous         ReachabilityDetailsResultEnum = "AMBIGUOUS"
	ReachabilityDetailsResultEnumUndetermined      ReachabilityDetailsResultEnum = "UNDETERMINED"
)

func (e ReachabilityDetailsResultEnum) ToPointer() *ReachabilityDetailsResultEnum {
	return &e
}

func (e *ReachabilityDetailsResultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESULT_UNSPECIFIED":
		fallthrough
	case "REACHABLE":
		fallthrough
	case "UNREACHABLE":
		fallthrough
	case "AMBIGUOUS":
		fallthrough
	case "UNDETERMINED":
		*e = ReachabilityDetailsResultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReachabilityDetailsResultEnum: %v", v)
	}
}

// ReachabilityDetails - Results of the configuration analysis from the last run of the test.
type ReachabilityDetails struct {
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// The overall result of the test's configuration analysis.
	Result *ReachabilityDetailsResultEnum `json:"result,omitempty"`
	// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
	Traces []Trace `json:"traces,omitempty"`
	// The time of the configuration analysis.
	VerifyTime *string `json:"verifyTime,omitempty"`
}
