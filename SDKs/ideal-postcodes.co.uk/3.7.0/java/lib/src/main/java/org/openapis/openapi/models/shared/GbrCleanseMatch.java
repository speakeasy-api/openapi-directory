/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class GbrCleanseMatch {
    /**
     * A confidence score represented as number between 1 and 0. 1 indicates a full match. 0 indicates no complete matching elements.
     * 
     */
    @JsonProperty("confidence")
    public Double confidence;
    public GbrCleanseMatch withConfidence(Double confidence) {
        this.confidence = confidence;
        return this;
    }
    
    /**
     * The number of addresses we matched to the input. We return the closest match by default.
     * 
     */
    @JsonProperty("count")
    public Double count;
    public GbrCleanseMatch withCount(Double count) {
        this.count = count;
        return this;
    }
    
    /**
     * A score represented as number between 1 and 0. Fit compares the address elements present in your query against the matching address elements. It does not incorporate elements you have not presented in the score. A partial address (e.g. 12 Pye Green Road) will have a fit of 1 even though it is missing post town and postcode. Its confidence score will be less than 1 however because it is missing some crucial elements.
     * 
     */
    @JsonProperty("fit")
    public Double fit;
    public GbrCleanseMatch withFit(Double fit) {
        this.fit = fit;
        return this;
    }
    
    /**
     * Match indicator for the locality
     */
    @JsonProperty("locality_match")
    public GbrCleanseMatchLocalityMatchEnum localityMatch;
    public GbrCleanseMatch withLocalityMatch(GbrCleanseMatchLocalityMatchEnum localityMatch) {
        this.localityMatch = localityMatch;
        return this;
    }
    
    /**
     * Nearest matching address
     */
    @JsonProperty("match")
    public Object match;
    public GbrCleanseMatch withMatch(Object match) {
        this.match = match;
        return this;
    }
    
    /**
     * Match indicator for the organisation
     */
    @JsonProperty("organisation_match")
    public GbrCleanseMatchOrganisationMatchEnum organisationMatch;
    public GbrCleanseMatch withOrganisationMatch(GbrCleanseMatchOrganisationMatchEnum organisationMatch) {
        this.organisationMatch = organisationMatch;
        return this;
    }
    
    /**
     * Match indicator for the post_town
     */
    @JsonProperty("post_town_match")
    public GbrCleanseMatchPostTownMatchEnum postTownMatch;
    public GbrCleanseMatch withPostTownMatch(GbrCleanseMatchPostTownMatchEnum postTownMatch) {
        this.postTownMatch = postTownMatch;
        return this;
    }
    
    /**
     * Match indicator for the postcode
     */
    @JsonProperty("postcode_match")
    public GbrCleanseMatchPostcodeMatchEnum postcodeMatch;
    public GbrCleanseMatch withPostcodeMatch(GbrCleanseMatchPostcodeMatchEnum postcodeMatch) {
        this.postcodeMatch = postcodeMatch;
        return this;
    }
    
    /**
     * Match indicator for the premise
     */
    @JsonProperty("premise_match")
    public GbrCleanseMatchPremiseMatchEnum premiseMatch;
    public GbrCleanseMatch withPremiseMatch(GbrCleanseMatchPremiseMatchEnum premiseMatch) {
        this.premiseMatch = premiseMatch;
        return this;
    }
    
    /**
     * Originally submitted query
     */
    @JsonProperty("query")
    public String query;
    public GbrCleanseMatch withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Match indicator for the street
     */
    @JsonProperty("thoroughfare_match")
    public GbrCleanseMatchThoroughfareMatchEnum thoroughfareMatch;
    public GbrCleanseMatch withThoroughfareMatch(GbrCleanseMatchThoroughfareMatchEnum thoroughfareMatch) {
        this.thoroughfareMatch = thoroughfareMatch;
        return this;
    }
    
}
