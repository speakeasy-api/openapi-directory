// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListTagsForCertificateXAmzTargetEnum
type ListTagsForCertificateXAmzTargetEnum string

const (
	ListTagsForCertificateXAmzTargetEnumCertificateManagerListTagsForCertificate ListTagsForCertificateXAmzTargetEnum = "CertificateManager.ListTagsForCertificate"
)

func (e *ListTagsForCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CertificateManager.ListTagsForCertificate":
		*e = ListTagsForCertificateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTagsForCertificateXAmzTargetEnum: %s", s)
	}
}

type ListTagsForCertificateRequest struct {
	ListTagsForCertificateRequest shared.ListTagsForCertificateRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    ListTagsForCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListTagsForCertificateResponse struct {
	ContentType string
	// InvalidArnException
	InvalidArnException interface{}
	// Success
	ListTagsForCertificateResponse *shared.ListTagsForCertificateResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
