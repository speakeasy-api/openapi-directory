/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Recipient, RecipientOutput } from "./recipient";
import { Expose, Type } from "class-transformer";

/**
 * Form factor of the push device.
 */
export enum DeviceDetailsFormFactorEnum {
  Phone = "phone",
  Tablet = "tablet",
  Desktop = "desktop",
  Tv = "tv",
  Watch = "watch",
  Car = "car",
  Embedded = "embedded",
}

/**
 * Platform of the push device.
 */
export enum DeviceDetailsPlatformEnum {
  Ios = "ios",
  Android = "android",
}

/**
 * the current state of the push device.
 */
export enum DeviceDetailsPushStateEnum {
  Active = "Active",
  Failing = "Failing",
  Failed = "Failed",
}

/**
 * OK
 */
export class DeviceDetailsOutput extends SpeakeasyBase {
  /**
   * Optional trusted client identifier for the device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * Secret value for the device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceSecret" })
  deviceSecret?: string;

  /**
   * Form factor of the push device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formFactor" })
  formFactor?: DeviceDetailsFormFactorEnum;

  /**
   * Unique identifier for the device generated by the device itself.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * Platform of the push device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform?: DeviceDetailsPlatformEnum;

  /**
   * Push recipient details for a device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push.recipient" })
  @Type(() => RecipientOutput)
  pushRecipient?: RecipientOutput;

  /**
   * the current state of the push device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push.state" })
  pushState?: DeviceDetailsPushStateEnum;
}

export class DeviceDetailsInput extends SpeakeasyBase {
  /**
   * Optional trusted client identifier for the device.
   */
  @SpeakeasyMetadata({ data: "form, name=clientId" })
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * Secret value for the device.
   */
  @SpeakeasyMetadata({ data: "form, name=deviceSecret" })
  @Expose({ name: "deviceSecret" })
  deviceSecret?: string;

  /**
   * Form factor of the push device.
   */
  @SpeakeasyMetadata({ data: "form, name=formFactor" })
  @Expose({ name: "formFactor" })
  formFactor?: DeviceDetailsFormFactorEnum;

  /**
   * Unique identifier for the device generated by the device itself.
   */
  @SpeakeasyMetadata({ data: "form, name=id" })
  @Expose({ name: "id" })
  id?: string;

  /**
   * Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
   */
  @SpeakeasyMetadata({ data: "form, name=metadata;json=true" })
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * Platform of the push device.
   */
  @SpeakeasyMetadata({ data: "form, name=platform" })
  @Expose({ name: "platform" })
  platform?: DeviceDetailsPlatformEnum;

  /**
   * Push recipient details for a device.
   */
  @SpeakeasyMetadata({ data: "form, name=push.recipient;json=true" })
  @Expose({ name: "push.recipient" })
  @Type(() => Recipient)
  pushRecipient?: Recipient;
}
