"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import simple_user as shared_simple_user
from enum import Enum
from typing import Optional

class TeamsListMembersInOrgRoleEnum(str, Enum):
    r"""Filters members returned by their role in the team."""
    MEMBER = 'member'
    MAINTAINER = 'maintainer'
    ALL = 'all'


@dataclasses.dataclass
class TeamsListMembersInOrgRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    team_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'team_slug', 'style': 'simple', 'explode': False }})
    r"""The slug of the team name."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    role: Optional[TeamsListMembersInOrgRoleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filters members returned by their role in the team."""  
    

@dataclasses.dataclass
class TeamsListMembersInOrgResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    simple_users: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None)
    r"""Response"""  
    