<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class DescribeBucketsRequestBody
{
    /**
     * Specifies, as a map, one or more property-based conditions that filter the results of a query for information about S3 buckets.
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\BucketCriteriaAdditionalProperties> $criteria
     */
	#[\JMS\Serializer\Annotation\SerializedName('criteria')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\BucketCriteriaAdditionalProperties>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $criteria = null;
    
    /**
     * The maximum number of items to include in each page of the response. The default value is 50.
     * 
     * @var ?int $maxResults
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxResults')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxResults = null;
    
    /**
     * The nextToken string that specifies which page of results to return in a paginated response.
     * 
     * @var ?string $nextToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('nextToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $nextToken = null;
    
    /**
     * Specifies criteria for sorting the results of a query for information about S3 buckets.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\DescribeBucketsRequestBodySortCriteria $sortCriteria
     */
	#[\JMS\Serializer\Annotation\SerializedName('sortCriteria')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\DescribeBucketsRequestBodySortCriteria')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DescribeBucketsRequestBodySortCriteria $sortCriteria = null;
    
	public function __construct()
	{
		$this->criteria = null;
		$this->maxResults = null;
		$this->nextToken = null;
		$this->sortCriteria = null;
	}
}
