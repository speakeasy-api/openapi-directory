// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AggregateBucketTypeEnum - The type of a bucket signifies how the data aggregation is performed in the bucket.
type AggregateBucketTypeEnum string

const (
	AggregateBucketTypeEnumUnknown         AggregateBucketTypeEnum = "unknown"
	AggregateBucketTypeEnumTime            AggregateBucketTypeEnum = "time"
	AggregateBucketTypeEnumSession         AggregateBucketTypeEnum = "session"
	AggregateBucketTypeEnumActivityType    AggregateBucketTypeEnum = "activityType"
	AggregateBucketTypeEnumActivitySegment AggregateBucketTypeEnum = "activitySegment"
)

func (e *AggregateBucketTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknown":
		fallthrough
	case "time":
		fallthrough
	case "session":
		fallthrough
	case "activityType":
		fallthrough
	case "activitySegment":
		*e = AggregateBucketTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregateBucketTypeEnum: %s", s)
	}
}

type AggregateBucket struct {
	// Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT
	Activity *int `json:"activity,omitempty"`
	// There will be one dataset per AggregateBy in the request.
	Dataset []Dataset `json:"dataset,omitempty"`
	// The end time for the aggregated data, in milliseconds since epoch, inclusive.
	EndTimeMillis *string `json:"endTimeMillis,omitempty"`
	// Sessions contain metadata, such as a user-friendly name and time interval information.
	Session *Session `json:"session,omitempty"`
	// The start time for the aggregated data, in milliseconds since epoch, inclusive.
	StartTimeMillis *string `json:"startTimeMillis,omitempty"`
	// The type of a bucket signifies how the data aggregation is performed in the bucket.
	Type *AggregateBucketTypeEnum `json:"type,omitempty"`
}
