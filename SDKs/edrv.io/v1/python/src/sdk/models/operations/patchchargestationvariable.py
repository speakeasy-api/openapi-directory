"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PatchChargeStationVariableRequestBodyVariableEnum(str, Enum):
    METER_VALUE_SAMPLE_INTERVAL = 'MeterValueSampleInterval'
    HEARTBEAT_INTERVAL = 'HeartbeatInterval'
    CONNECTION_TIME_OUT = 'ConnectionTimeOut'
    WEB_SOCKET_PING_INTERVAL = 'WebSocketPingInterval'
    TRANSACTION_MESSAGE_RETRY_INTERVAL = 'TransactionMessageRetryInterval'
    TRANSACTION_MESSAGE_ATTEMPTS = 'TransactionMessageAttempts'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchChargeStationVariableRequestBody:
    r"""Charge Station Variable to set"""
    
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    variable: Optional[PatchChargeStationVariableRequestBodyVariableEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variable'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchChargeStationVariableRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of charge station"""  
    request_body: PatchChargeStationVariableRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Charge Station Variable to set"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchChargeStationVariable201ApplicationJSON:
    r"""A successful response"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    ok: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ok'), 'exclude': lambda f: f is None }})  
    result: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchChargeStationVariableResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    patch_charge_station_variable_201_application_json_object: Optional[PatchChargeStationVariable201ApplicationJSON] = dataclasses.field(default=None)
    r"""A successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    