// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FailbackStateEnum string

const (
	FailbackStateEnumFailbackNotStarted              FailbackStateEnum = "FAILBACK_NOT_STARTED"
	FailbackStateEnumFailbackInProgress              FailbackStateEnum = "FAILBACK_IN_PROGRESS"
	FailbackStateEnumFailbackReadyForLaunch          FailbackStateEnum = "FAILBACK_READY_FOR_LAUNCH"
	FailbackStateEnumFailbackCompleted               FailbackStateEnum = "FAILBACK_COMPLETED"
	FailbackStateEnumFailbackError                   FailbackStateEnum = "FAILBACK_ERROR"
	FailbackStateEnumFailbackNotReadyForLaunch       FailbackStateEnum = "FAILBACK_NOT_READY_FOR_LAUNCH"
	FailbackStateEnumFailbackLaunchStateNotAvailable FailbackStateEnum = "FAILBACK_LAUNCH_STATE_NOT_AVAILABLE"
)

func (e *FailbackStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FAILBACK_NOT_STARTED":
		fallthrough
	case "FAILBACK_IN_PROGRESS":
		fallthrough
	case "FAILBACK_READY_FOR_LAUNCH":
		fallthrough
	case "FAILBACK_COMPLETED":
		fallthrough
	case "FAILBACK_ERROR":
		fallthrough
	case "FAILBACK_NOT_READY_FOR_LAUNCH":
		fallthrough
	case "FAILBACK_LAUNCH_STATE_NOT_AVAILABLE":
		*e = FailbackStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FailbackStateEnum: %s", s)
	}
}
