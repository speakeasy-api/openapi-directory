// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type GetNetworkInsightApplicationHealthByTimeRequest struct {
	ApplicationID string `pathParam:"style=simple,explode=false,name=applicationId"`
	NetworkID     string `pathParam:"style=simple,explode=false,name=networkId"`
	// The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300.
	Resolution *int64 `queryParam:"style=form,explode=true,name=resolution"`
	// The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
	T0 *string `queryParam:"style=form,explode=true,name=t0"`
	// The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
	T1 *string `queryParam:"style=form,explode=true,name=t1"`
	// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
	Timespan *float32 `queryParam:"style=form,explode=true,name=timespan"`
}

type GetNetworkInsightApplicationHealthByTime200ApplicationJSON struct {
	// The end time of the query range
	EndTs *time.Time `json:"endTs,omitempty"`
	// LAN goodput (Number of useful information bits delivered over a LAN per unit of time)
	LanGoodput *int64 `json:"lanGoodput,omitempty"`
	// LAN latency in milliseconds
	LanLatencyMs *float32 `json:"lanLatencyMs,omitempty"`
	// LAN loss percentage
	LanLossPercent *float32 `json:"lanLossPercent,omitempty"`
	// Number of clients
	NumClients *int64 `json:"numClients,omitempty"`
	// Received kilobytes-per-second
	Recv *int64 `json:"recv,omitempty"`
	// Duration of the response, in milliseconds
	ResponseDuration *int64 `json:"responseDuration,omitempty"`
	// Sent kilobytes-per-second
	Sent *int64 `json:"sent,omitempty"`
	// The start time of the query range
	StartTs *time.Time `json:"startTs,omitempty"`
	// WAN goodput (Number of useful information bits delivered over a WAN per unit of time)
	WanGoodput *int64 `json:"wanGoodput,omitempty"`
	// WAN latency in milliseconds
	WanLatencyMs *float32 `json:"wanLatencyMs,omitempty"`
	// WAN loss percentage
	WanLossPercent *float32 `json:"wanLossPercent,omitempty"`
}

type GetNetworkInsightApplicationHealthByTimeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkInsightApplicationHealthByTime200ApplicationJSONObjects []GetNetworkInsightApplicationHealthByTime200ApplicationJSON
}
