"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import carecontextdefinition as shared_carecontextdefinition
from ..shared import hitypeenum_enum as shared_hitypeenum_enum
from ..shared import permission as shared_permission
from ..shared import requester as shared_requester
from ..shared import usepurpose as shared_usepurpose
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentRequestConsentHip:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentRequestConsentHiu:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentRequestConsentPatient:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentRequestConsent:
    
    hi_types: list[shared_hitypeenum_enum.HITypeEnumEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiTypes') }})  
    hiu: ConsentRequestConsentHiu = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiu') }})  
    patient: ConsentRequestConsentPatient = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    permission: shared_permission.Permission = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission') }})  
    purpose: shared_usepurpose.UsePurpose = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})  
    requester: shared_requester.Requester = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requester') }})  
    care_contexts: Optional[list[shared_carecontextdefinition.CareContextDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('careContexts'), 'exclude': lambda f: f is None }})  
    hip: Optional[ConsentRequestConsentHip] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hip'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConsentRequest:
    
    consent: ConsentRequestConsent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consent') }})  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})
    r"""a nonce, unique for each HTTP request."""  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ"""  
    