"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = exports.PolicyProductAvailabilityPolicyEnum = exports.PolicyDeviceReportPolicyEnum = exports.PolicyAutoUpdatePolicyEnum = void 0;
var utils_1 = require("../../../internal/utils");
var maintenancewindow_1 = require("./maintenancewindow");
var productpolicy_1 = require("./productpolicy");
var class_transformer_1 = require("class-transformer");
/**
 * Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect. "choiceToTheUser" allows the device's user to configure the app update policy. "always" enables auto updates. "never" disables auto updates. "wifiOnly" enables auto updates only when the device is connected to wifi.
 */
var PolicyAutoUpdatePolicyEnum;
(function (PolicyAutoUpdatePolicyEnum) {
    PolicyAutoUpdatePolicyEnum["AutoUpdatePolicyUnspecified"] = "autoUpdatePolicyUnspecified";
    PolicyAutoUpdatePolicyEnum["ChoiceToTheUser"] = "choiceToTheUser";
    PolicyAutoUpdatePolicyEnum["Never"] = "never";
    PolicyAutoUpdatePolicyEnum["WifiOnly"] = "wifiOnly";
    PolicyAutoUpdatePolicyEnum["Always"] = "always";
})(PolicyAutoUpdatePolicyEnum = exports.PolicyAutoUpdatePolicyEnum || (exports.PolicyAutoUpdatePolicyEnum = {}));
/**
 * Whether the device reports app states to the EMM. The default value is "deviceReportDisabled".
 */
var PolicyDeviceReportPolicyEnum;
(function (PolicyDeviceReportPolicyEnum) {
    PolicyDeviceReportPolicyEnum["DeviceReportPolicyUnspecified"] = "deviceReportPolicyUnspecified";
    PolicyDeviceReportPolicyEnum["DeviceReportDisabled"] = "deviceReportDisabled";
    PolicyDeviceReportPolicyEnum["DeviceReportEnabled"] = "deviceReportEnabled";
})(PolicyDeviceReportPolicyEnum = exports.PolicyDeviceReportPolicyEnum || (exports.PolicyDeviceReportPolicyEnum = {}));
/**
 * The availability granted to the device for the specified products. "all" gives the device access to all products, regardless of approval status. "all" does not enable automatic visibility of "alpha" or "beta" tracks. "whitelist" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.
 */
var PolicyProductAvailabilityPolicyEnum;
(function (PolicyProductAvailabilityPolicyEnum) {
    PolicyProductAvailabilityPolicyEnum["ProductAvailabilityPolicyUnspecified"] = "productAvailabilityPolicyUnspecified";
    PolicyProductAvailabilityPolicyEnum["Whitelist"] = "whitelist";
    PolicyProductAvailabilityPolicyEnum["All"] = "all";
})(PolicyProductAvailabilityPolicyEnum = exports.PolicyProductAvailabilityPolicyEnum || (exports.PolicyProductAvailabilityPolicyEnum = {}));
/**
 * The device policy for a given managed device.
 */
var Policy = /** @class */ (function (_super) {
    __extends(Policy, _super);
    function Policy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoUpdatePolicy" }),
        __metadata("design:type", String)
    ], Policy.prototype, "autoUpdatePolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deviceReportPolicy" }),
        __metadata("design:type", String)
    ], Policy.prototype, "deviceReportPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maintenanceWindow" }),
        (0, class_transformer_1.Type)(function () { return maintenancewindow_1.MaintenanceWindow; }),
        __metadata("design:type", maintenancewindow_1.MaintenanceWindow)
    ], Policy.prototype, "maintenanceWindow", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "productAvailabilityPolicy" }),
        __metadata("design:type", String)
    ], Policy.prototype, "productAvailabilityPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: productpolicy_1.ProductPolicy }),
        (0, class_transformer_1.Expose)({ name: "productPolicy" }),
        (0, class_transformer_1.Type)(function () { return productpolicy_1.ProductPolicy; }),
        __metadata("design:type", Array)
    ], Policy.prototype, "productPolicy", void 0);
    return Policy;
}(utils_1.SpeakeasyBase));
exports.Policy = Policy;
