// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DncerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DncerRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// DncerRequestBodyFormatEnum - The format of the certificate in response.
type DncerRequestBodyFormatEnum string

const (
	DncerRequestBodyFormatEnumPdf DncerRequestBodyFormatEnum = "pdf"
)

func (e DncerRequestBodyFormatEnum) ToPointer() *DncerRequestBodyFormatEnum {
	return &e
}

func (e *DncerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = DncerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DncerRequestBodyFormatEnum: %v", v)
	}
}

// DncerRequestBody - Request format
type DncerRequestBody struct {
	CertificateParameters *DncerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DncerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dncer504ApplicationJSONErrorEnum string

const (
	Dncer504ApplicationJSONErrorEnumGatewayTimeout Dncer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Dncer504ApplicationJSONErrorEnum) ToPointer() *Dncer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Dncer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer504ApplicationJSONErrorDescriptionEnum string

const (
	Dncer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dncer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Dncer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Dncer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer504ApplicationJSON - Gateway timeout
type Dncer504ApplicationJSON struct {
	Error            *Dncer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dncer503ApplicationJSONErrorEnum string

const (
	Dncer503ApplicationJSONErrorEnumServiceUnavailable Dncer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Dncer503ApplicationJSONErrorEnum) ToPointer() *Dncer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Dncer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer503ApplicationJSONErrorDescriptionEnum string

const (
	Dncer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dncer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Dncer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Dncer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer503ApplicationJSON - Service unavailable
type Dncer503ApplicationJSON struct {
	Error            *Dncer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dncer502ApplicationJSONErrorEnum string

const (
	Dncer502ApplicationJSONErrorEnumBadGatewy Dncer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Dncer502ApplicationJSONErrorEnum) ToPointer() *Dncer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Dncer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer502ApplicationJSONErrorDescriptionEnum string

const (
	Dncer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dncer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Dncer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Dncer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer502ApplicationJSON - Bad gateway
type Dncer502ApplicationJSON struct {
	Error            *Dncer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dncer500ApplicationJSONErrorEnum string

const (
	Dncer500ApplicationJSONErrorEnumInternalServerError Dncer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Dncer500ApplicationJSONErrorEnum) ToPointer() *Dncer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Dncer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer500ApplicationJSONErrorDescriptionEnum string

const (
	Dncer500ApplicationJSONErrorDescriptionEnumInternalServerError Dncer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Dncer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Dncer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer500ApplicationJSON - Internal server error
type Dncer500ApplicationJSON struct {
	Error            *Dncer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dncer404ApplicationJSONErrorEnum string

const (
	Dncer404ApplicationJSONErrorEnumRecordNotFound Dncer404ApplicationJSONErrorEnum = "record_not_found"
	Dncer404ApplicationJSONErrorEnumURLNotFound    Dncer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Dncer404ApplicationJSONErrorEnum) ToPointer() *Dncer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dncer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer404ApplicationJSONErrorDescriptionEnum string

const (
	Dncer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dncer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dncer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dncer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Dncer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dncer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer404ApplicationJSON - No record found
type Dncer404ApplicationJSON struct {
	Error            *Dncer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dncer401ApplicationJSONErrorEnum string

const (
	Dncer401ApplicationJSONErrorEnumInvalidAuthentication Dncer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dncer401ApplicationJSONErrorEnumInvalidAuthorization  Dncer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Dncer401ApplicationJSONErrorEnum) ToPointer() *Dncer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dncer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer401ApplicationJSONErrorDescriptionEnum string

const (
	Dncer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dncer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dncer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dncer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Dncer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dncer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer401ApplicationJSON - Unauthorized access
type Dncer401ApplicationJSON struct {
	Error            *Dncer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dncer400ApplicationJSONErrorEnum string

const (
	Dncer400ApplicationJSONErrorEnumMissingParameter Dncer400ApplicationJSONErrorEnum = "missing_parameter"
	Dncer400ApplicationJSONErrorEnumInvalidParameter Dncer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dncer400ApplicationJSONErrorEnumInvalidFormat    Dncer400ApplicationJSONErrorEnum = "invalid_format"
	Dncer400ApplicationJSONErrorEnumInvalidTxnid     Dncer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dncer400ApplicationJSONErrorEnumInvalidConsentid Dncer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Dncer400ApplicationJSONErrorEnum) ToPointer() *Dncer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Dncer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dncer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Dncer400ApplicationJSONErrorDescriptionEnum string

const (
	Dncer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dncer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dncer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dncer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dncer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dncer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dncer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dncer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dncer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dncer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Dncer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Dncer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dncer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dncer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dncer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dncer400ApplicationJSON - Bad request
type Dncer400ApplicationJSON struct {
	Error            *Dncer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dncer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DncerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dncer400ApplicationJSONObject *Dncer400ApplicationJSON
	// Unauthorized access
	Dncer401ApplicationJSONObject *Dncer401ApplicationJSON
	// No record found
	Dncer404ApplicationJSONObject *Dncer404ApplicationJSON
	// Internal server error
	Dncer500ApplicationJSONObject *Dncer500ApplicationJSON
	// Bad gateway
	Dncer502ApplicationJSONObject *Dncer502ApplicationJSON
	// Service unavailable
	Dncer503ApplicationJSONObject *Dncer503ApplicationJSON
	// Gateway timeout
	Dncer504ApplicationJSONObject *Dncer504ApplicationJSON
}
