"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recognitionaudio as shared_recognitionaudio
from ..shared import recognitionconfig as shared_recognitionconfig
from ..shared import transcriptoutputconfig as shared_transcriptoutputconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LongRunningRecognizeRequestInput:
    r"""The top-level message sent by the client for the `LongRunningRecognize` method."""
    
    audio: Optional[shared_recognitionaudio.RecognitionAudio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Contains audio data in the encoding specified in the `RecognitionConfig`. Either `content` or `uri` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. See [content limits](https://cloud.google.com/speech-to-text/quotas#content)."""  
    config: Optional[shared_recognitionconfig.RecognitionConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config'), 'exclude': lambda f: f is None }})
    r"""Provides information to the recognizer that specifies how to process the request."""  
    output_config: Optional[shared_transcriptoutputconfig.TranscriptOutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies an optional destination for the recognition results."""  
    