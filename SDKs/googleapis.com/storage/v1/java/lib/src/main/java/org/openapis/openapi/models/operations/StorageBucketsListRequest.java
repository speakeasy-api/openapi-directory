/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class StorageBucketsListRequest {
    /**
     * Data format for the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public StorageBucketsListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public StorageBucketsListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public StorageBucketsListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;

    public StorageBucketsListRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public StorageBucketsListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * A previously-returned page token representing part of the larger set of results to view.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;

    public StorageBucketsListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Filter results to buckets whose names begin with this prefix.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prefix")
    public String prefix;

    public StorageBucketsListRequest withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public StorageBucketsListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * A valid API project identifier.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=project")
    public String project;

    public StorageBucketsListRequest withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * Set of properties to return. Defaults to noAcl.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=projection")
    public StorageBucketsListProjectionEnum projection;

    public StorageBucketsListRequest withProjection(StorageBucketsListProjectionEnum projection) {
        this.projection = projection;
        return this;
    }
    
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public StorageBucketsListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "media", "multipart", "resumable").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public StorageBucketsListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Deprecated. Please use quotaUser instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userIp")
    public String userIp;

    public StorageBucketsListRequest withUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }
    
    /**
     * The project to be billed for this request.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userProject")
    public String userProject;

    public StorageBucketsListRequest withUserProject(String userProject) {
        this.userProject = userProject;
        return this;
    }
    
    public StorageBucketsListRequest(@JsonProperty("project") String project) {
        this.project = project;
  }
}
