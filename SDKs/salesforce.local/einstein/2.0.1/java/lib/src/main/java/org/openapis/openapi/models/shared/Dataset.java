/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Dataset - Upload initiated
 */
public class Dataset {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    public Boolean available;

    public Dataset withAvailable(Boolean available) {
        this.available = available;
        return this;
    }
    
    /**
     * Date and time that the dataset was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public Dataset withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;

    public Dataset withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Contains the labels array that contains all the labels for the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labelSummary")
    public LabelSummary labelSummary;

    public Dataset withLabelSummary(LabelSummary labelSummary) {
        this.labelSummary = labelSummary;
        return this;
    }
    
    /**
     * Dataset language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public Dataset withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Dataset withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numOfDuplicates")
    public Integer numOfDuplicates;

    public Dataset withNumOfDuplicates(Integer numOfDuplicates) {
        this.numOfDuplicates = numOfDuplicates;
        return this;
    }
    
    /**
     * Object returned; in this case, dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    public String object;

    public Dataset withObject(String object) {
        this.object = object;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMsg")
    public String statusMsg;

    public Dataset withStatusMsg(String statusMsg) {
        this.statusMsg = statusMsg;
        return this;
    }
    
    /**
     * Total number of examples in the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalExamples")
    public Integer totalExamples;

    public Dataset withTotalExamples(Integer totalExamples) {
        this.totalExamples = totalExamples;
        return this;
    }
    
    /**
     * Total number of labels in the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalLabels")
    public Integer totalLabels;

    public Dataset withTotalLabels(Integer totalLabels) {
        this.totalLabels = totalLabels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public Dataset withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;

    public Dataset withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public Dataset(@JsonProperty("id") Long id, @JsonProperty("name") String name) {
        this.id = id;
        this.name = name;
  }
}
