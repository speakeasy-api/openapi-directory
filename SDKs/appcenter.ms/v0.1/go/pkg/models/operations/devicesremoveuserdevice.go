// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DevicesRemoveUserDeviceSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DevicesRemoveUserDeviceRequest struct {
	// The UDID of the device
	DeviceUdid string `pathParam:"style=simple,explode=false,name=device_udid"`
}

type DevicesRemoveUserDevice404ApplicationJSONCodeEnum string

const (
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumBadRequest          DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "BadRequest"
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumConflict            DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "Conflict"
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumNotAcceptable       DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumNotFound            DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "NotFound"
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumInternalServerError DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "InternalServerError"
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumUnauthorized        DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "Unauthorized"
	DevicesRemoveUserDevice404ApplicationJSONCodeEnumTooManyRequests     DevicesRemoveUserDevice404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesRemoveUserDevice404ApplicationJSONCodeEnum) ToPointer() *DevicesRemoveUserDevice404ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesRemoveUserDevice404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesRemoveUserDevice404ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesRemoveUserDevice404ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesRemoveUserDevice404ApplicationJSON - <b>not_found</b>: The user or the device can't be found.
type DevicesRemoveUserDevice404ApplicationJSON struct {
	Code    DevicesRemoveUserDevice404ApplicationJSONCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

type DevicesRemoveUserDevice403ApplicationJSONCodeEnum string

const (
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumBadRequest          DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "BadRequest"
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumConflict            DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "Conflict"
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumNotAcceptable       DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumNotFound            DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "NotFound"
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumInternalServerError DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "InternalServerError"
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumUnauthorized        DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "Unauthorized"
	DevicesRemoveUserDevice403ApplicationJSONCodeEnumTooManyRequests     DevicesRemoveUserDevice403ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesRemoveUserDevice403ApplicationJSONCodeEnum) ToPointer() *DevicesRemoveUserDevice403ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesRemoveUserDevice403ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesRemoveUserDevice403ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesRemoveUserDevice403ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesRemoveUserDevice403ApplicationJSON - <b>forbidden</b>: The user is not allowed to delete someone else's device.
type DevicesRemoveUserDevice403ApplicationJSON struct {
	Code    DevicesRemoveUserDevice403ApplicationJSONCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

type DevicesRemoveUserDeviceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// <b>forbidden</b>: The user is not allowed to delete someone else's device.
	//
	DevicesRemoveUserDevice403ApplicationJSONObject *DevicesRemoveUserDevice403ApplicationJSON
	// <b>not_found</b>: The user or the device can't be found.
	//
	DevicesRemoveUserDevice404ApplicationJSONObject *DevicesRemoveUserDevice404ApplicationJSON
}
