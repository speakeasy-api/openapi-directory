// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// EmployerEmployerAddress - The employers' address
type EmployerEmployerAddress struct {
	// The addresss' line 1
	Address1 *string `json:"Address1,omitempty"`
	// The addresss' line 2
	Address2 *string `json:"Address2,omitempty"`
	// The addresss' line 3
	Address3 *string `json:"Address3,omitempty"`
	// The addresss' line 4
	Address4 *string `json:"Address4,omitempty"`
	// The addresss' country
	Country *string `json:"Country,omitempty"`
	// The addresss' postcode
	Postcode *string `json:"Postcode,omitempty"`
}

// EmployerEmployerAutoEnrolmentPension - The employer auto enrolments' pension
type EmployerEmployerAutoEnrolmentPension struct {
	// The links' href
	AtHref *string `json:"@href,omitempty"`
	// The links' target type
	AtRel *string `json:"@rel,omitempty"`
	// The links' title
	AtTitle *string `json:"@title,omitempty"`
}

// EmployerEmployerAutoEnrolmentPrimaryAddress - The employer auto enrolments' primary address
type EmployerEmployerAutoEnrolmentPrimaryAddress struct {
	// The addresss' line 1
	Address1 *string `json:"Address1,omitempty"`
	// The addresss' line 2
	Address2 *string `json:"Address2,omitempty"`
	// The addresss' line 3
	Address3 *string `json:"Address3,omitempty"`
	// The addresss' line 4
	Address4 *string `json:"Address4,omitempty"`
	// The addresss' country
	Country *string `json:"Country,omitempty"`
	// The addresss' postcode
	Postcode *string `json:"Postcode,omitempty"`
}

// EmployerEmployerAutoEnrolmentSecondaryAddress - The employer auto enrolments' secondary address
type EmployerEmployerAutoEnrolmentSecondaryAddress struct {
	// The addresss' line 1
	Address1 *string `json:"Address1,omitempty"`
	// The addresss' line 2
	Address2 *string `json:"Address2,omitempty"`
	// The addresss' line 3
	Address3 *string `json:"Address3,omitempty"`
	// The addresss' line 4
	Address4 *string `json:"Address4,omitempty"`
	// The addresss' country
	Country *string `json:"Country,omitempty"`
	// The addresss' postcode
	Postcode *string `json:"Postcode,omitempty"`
}

// EmployerEmployerAutoEnrolment - The employers' auto enrolment
type EmployerEmployerAutoEnrolment struct {
	// The employer auto enrolments' pension
	Pension *EmployerEmployerAutoEnrolmentPension `json:"Pension,omitempty"`
	// The employer auto enrolments' postponement date
	PostponementDate *types.Date `json:"PostponementDate,omitempty"`
	// The employer auto enrolments' primary address
	PrimaryAddress *EmployerEmployerAutoEnrolmentPrimaryAddress `json:"PrimaryAddress,omitempty"`
	// The employer auto enrolments' primary email
	PrimaryEmail *string `json:"PrimaryEmail,omitempty"`
	// The employer auto enrolments' primary first name
	PrimaryFirstName *string `json:"PrimaryFirstName,omitempty"`
	// The employer auto enrolments' primary job title
	PrimaryJobTitle *string `json:"PrimaryJobTitle,omitempty"`
	// The employer auto enrolments' primary last name
	PrimaryLastName *string `json:"PrimaryLastName,omitempty"`
	// The employer auto enrolments' primary telephone
	PrimaryTelephone *string `json:"PrimaryTelephone,omitempty"`
	// The employer auto enrolments' re enrolment day offset
	ReEnrolmentDayOffset *int `json:"ReEnrolmentDayOffset,omitempty"`
	// The employer auto enrolments' re enrolment month offset
	ReEnrolmentMonthOffset *int `json:"ReEnrolmentMonthOffset,omitempty"`
	// The employer auto enrolments' recent opt out re enrolment excluded
	RecentOptOutReEnrolmentExcluded *bool `json:"RecentOptOutReEnrolmentExcluded,omitempty"`
	// The employer auto enrolments' secondary address
	SecondaryAddress *EmployerEmployerAutoEnrolmentSecondaryAddress `json:"SecondaryAddress,omitempty"`
	// The employer auto enrolments' secondary email
	SecondaryEmail *string `json:"SecondaryEmail,omitempty"`
	// The employer auto enrolments' secondary first name
	SecondaryFirstName *string `json:"SecondaryFirstName,omitempty"`
	// The employer auto enrolments' secondary job title
	SecondaryJobTitle *string `json:"SecondaryJobTitle,omitempty"`
	// The employer auto enrolments' secondary last name
	SecondaryLastName *string `json:"SecondaryLastName,omitempty"`
	// The employer auto enrolments' secondary telephone
	SecondaryTelephone *string `json:"SecondaryTelephone,omitempty"`
	// The employer auto enrolments' staging date
	StagingDate *types.Date `json:"StagingDate,omitempty"`
}

// EmployerEmployerBankAccount - The employers' bank account
type EmployerEmployerBankAccount struct {
	// The bank accounts' account name
	AccountName *string `json:"AccountName,omitempty"`
	// The bank accounts' account number
	AccountNumber *string `json:"AccountNumber,omitempty"`
	// The bank accounts' branch name
	BranchName *string `json:"BranchName,omitempty"`
	// The bank accounts' reference
	Reference *string `json:"Reference,omitempty"`
	// The bank accounts' sort code
	SortCode *string `json:"SortCode,omitempty"`
}

// EmployerEmployerHmrcSettingsSenderEnum - The hmrc settingss' sender
type EmployerEmployerHmrcSettingsSenderEnum string

const (
	EmployerEmployerHmrcSettingsSenderEnumEmployer         EmployerEmployerHmrcSettingsSenderEnum = "Employer"
	EmployerEmployerHmrcSettingsSenderEnumIndividual       EmployerEmployerHmrcSettingsSenderEnum = "Individual"
	EmployerEmployerHmrcSettingsSenderEnumCompany          EmployerEmployerHmrcSettingsSenderEnum = "Company"
	EmployerEmployerHmrcSettingsSenderEnumAgent            EmployerEmployerHmrcSettingsSenderEnum = "Agent"
	EmployerEmployerHmrcSettingsSenderEnumBureau           EmployerEmployerHmrcSettingsSenderEnum = "Bureau"
	EmployerEmployerHmrcSettingsSenderEnumPartnership      EmployerEmployerHmrcSettingsSenderEnum = "Partnership"
	EmployerEmployerHmrcSettingsSenderEnumTrust            EmployerEmployerHmrcSettingsSenderEnum = "Trust"
	EmployerEmployerHmrcSettingsSenderEnumGovernment       EmployerEmployerHmrcSettingsSenderEnum = "Government"
	EmployerEmployerHmrcSettingsSenderEnumActingInCapacity EmployerEmployerHmrcSettingsSenderEnum = "ActingInCapacity"
	EmployerEmployerHmrcSettingsSenderEnumOther            EmployerEmployerHmrcSettingsSenderEnum = "Other"
)

func (e *EmployerEmployerHmrcSettingsSenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Employer":
		fallthrough
	case "Individual":
		fallthrough
	case "Company":
		fallthrough
	case "Agent":
		fallthrough
	case "Bureau":
		fallthrough
	case "Partnership":
		fallthrough
	case "Trust":
		fallthrough
	case "Government":
		fallthrough
	case "ActingInCapacity":
		fallthrough
	case "Other":
		*e = EmployerEmployerHmrcSettingsSenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployerEmployerHmrcSettingsSenderEnum: %s", s)
	}
}

// EmployerEmployerHmrcSettingsStateAidSectorEnum - The hmrc settingss' state aid sector
type EmployerEmployerHmrcSettingsStateAidSectorEnum string

const (
	EmployerEmployerHmrcSettingsStateAidSectorEnumAgriculture          EmployerEmployerHmrcSettingsStateAidSectorEnum = "Agriculture"
	EmployerEmployerHmrcSettingsStateAidSectorEnumFisheriesAquaculture EmployerEmployerHmrcSettingsStateAidSectorEnum = "FisheriesAquaculture"
	EmployerEmployerHmrcSettingsStateAidSectorEnumRoadTransport        EmployerEmployerHmrcSettingsStateAidSectorEnum = "RoadTransport"
	EmployerEmployerHmrcSettingsStateAidSectorEnumIndustrial           EmployerEmployerHmrcSettingsStateAidSectorEnum = "Industrial"
	EmployerEmployerHmrcSettingsStateAidSectorEnumNotApplicable        EmployerEmployerHmrcSettingsStateAidSectorEnum = "NotApplicable"
)

func (e *EmployerEmployerHmrcSettingsStateAidSectorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Agriculture":
		fallthrough
	case "FisheriesAquaculture":
		fallthrough
	case "RoadTransport":
		fallthrough
	case "Industrial":
		fallthrough
	case "NotApplicable":
		*e = EmployerEmployerHmrcSettingsStateAidSectorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployerEmployerHmrcSettingsStateAidSectorEnum: %s", s)
	}
}

// EmployerEmployerHmrcSettings - The employers' hmrc settings
type EmployerEmployerHmrcSettings struct {
	// The hmrc settingss' accounting office ref
	AccountingOfficeRef *string `json:"AccountingOfficeRef,omitempty"`
	// The hmrc settingss' c o t a x ref
	COTAXRef *string `json:"COTAXRef,omitempty"`
	// The hmrc settingss' contact email
	ContactEmail *string `json:"ContactEmail,omitempty"`
	// The hmrc settingss' contact fax
	ContactFax *string `json:"ContactFax,omitempty"`
	// The hmrc settingss' contact first name
	ContactFirstName *string `json:"ContactFirstName,omitempty"`
	// The hmrc settingss' contact last name
	ContactLastName *string `json:"ContactLastName,omitempty"`
	// The hmrc settingss' contact telephone
	ContactTelephone *string `json:"ContactTelephone,omitempty"`
	// The hmrc settingss' employment allowance override
	EmploymentAllowanceOverride *float64 `json:"EmploymentAllowanceOverride,omitempty"`
	// The hmrc settingss' password
	Password *string `json:"Password,omitempty"`
	// The hmrc settingss' s a u t r
	Sautr *string `json:"SAUTR,omitempty"`
	// The hmrc settingss' sender
	Sender *EmployerEmployerHmrcSettingsSenderEnum `json:"Sender,omitempty"`
	// The hmrc settingss' sender id
	SenderID *string `json:"SenderId,omitempty"`
	// The hmrc settingss' state aid sector
	StateAidSector *EmployerEmployerHmrcSettingsStateAidSectorEnum `json:"StateAidSector,omitempty"`
	// The hmrc settingss' tax office number
	TaxOfficeNumber *string `json:"TaxOfficeNumber,omitempty"`
	// The hmrc settingss' tax office reference
	TaxOfficeReference *string `json:"TaxOfficeReference,omitempty"`
}

// EmployerEmployerRegionEnum - The employers' region
type EmployerEmployerRegionEnum string

const (
	EmployerEmployerRegionEnumNotSet   EmployerEmployerRegionEnum = "NotSet"
	EmployerEmployerRegionEnumEngland  EmployerEmployerRegionEnum = "England"
	EmployerEmployerRegionEnumScotland EmployerEmployerRegionEnum = "Scotland"
	EmployerEmployerRegionEnumWales    EmployerEmployerRegionEnum = "Wales"
)

func (e *EmployerEmployerRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "England":
		fallthrough
	case "Scotland":
		fallthrough
	case "Wales":
		*e = EmployerEmployerRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployerEmployerRegionEnum: %s", s)
	}
}

// EmployerEmployerRuleExclusionsEnum - The employers' rule exclusions
type EmployerEmployerRuleExclusionsEnum string

const (
	EmployerEmployerRuleExclusionsEnumNone                                  EmployerEmployerRuleExclusionsEnum = "None"
	EmployerEmployerRuleExclusionsEnumNiMissingPayInstructionRule           EmployerEmployerRuleExclusionsEnum = "NiMissingPayInstructionRule"
	EmployerEmployerRuleExclusionsEnumTaxMissingPayInstructionRule          EmployerEmployerRuleExclusionsEnum = "TaxMissingPayInstructionRule"
	EmployerEmployerRuleExclusionsEnumTaxCodeUpliftRule                     EmployerEmployerRuleExclusionsEnum = "TaxCodeUpliftRule"
	EmployerEmployerRuleExclusionsEnumNiSetExpectedLetterRule               EmployerEmployerRuleExclusionsEnum = "NiSetExpectedLetterRule"
	EmployerEmployerRuleExclusionsEnumNiDateOfBirthChangeRetrospectiveCRule EmployerEmployerRuleExclusionsEnum = "NiDateOfBirthChangeRetrospectiveCRule"
	EmployerEmployerRuleExclusionsEnumNiDefermentStatusChangeRule           EmployerEmployerRuleExclusionsEnum = "NiDefermentStatusChangeRule"
	EmployerEmployerRuleExclusionsEnumNiEndContractedOutTransferRule        EmployerEmployerRuleExclusionsEnum = "NiEndContractedOutTransferRule"
	EmployerEmployerRuleExclusionsEnumPaymentAfterLeavingTaxCodeRule        EmployerEmployerRuleExclusionsEnum = "PaymentAfterLeavingTaxCodeRule"
	EmployerEmployerRuleExclusionsEnumLeaverEndInstructionsRule             EmployerEmployerRuleExclusionsEnum = "LeaverEndInstructionsRule"
	EmployerEmployerRuleExclusionsEnumP45StudentLoanInstructionRule         EmployerEmployerRuleExclusionsEnum = "P45StudentLoanInstructionRule"
	EmployerEmployerRuleExclusionsEnumP45TaxInstructionRule                 EmployerEmployerRuleExclusionsEnum = "P45TaxInstructionRule"
	EmployerEmployerRuleExclusionsEnumP45YtdTaxRule                         EmployerEmployerRuleExclusionsEnum = "P45YtdTaxRule"
	EmployerEmployerRuleExclusionsEnumYtdInstructionRule                    EmployerEmployerRuleExclusionsEnum = "YtdInstructionRule"
	EmployerEmployerRuleExclusionsEnumTaxCodeRegionChangeRule               EmployerEmployerRuleExclusionsEnum = "TaxCodeRegionChangeRule"
	EmployerEmployerRuleExclusionsEnumAutoEnrolmentStatusChangeRule         EmployerEmployerRuleExclusionsEnum = "AutoEnrolmentStatusChangeRule"
	EmployerEmployerRuleExclusionsEnumEmployeeDeceasedRule                  EmployerEmployerRuleExclusionsEnum = "EmployeeDeceasedRule"
	EmployerEmployerRuleExclusionsEnumBenefitInstructionAutoEndRule         EmployerEmployerRuleExclusionsEnum = "BenefitInstructionAutoEndRule"
)

func (e *EmployerEmployerRuleExclusionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "NiMissingPayInstructionRule":
		fallthrough
	case "TaxMissingPayInstructionRule":
		fallthrough
	case "TaxCodeUpliftRule":
		fallthrough
	case "NiSetExpectedLetterRule":
		fallthrough
	case "NiDateOfBirthChangeRetrospectiveCRule":
		fallthrough
	case "NiDefermentStatusChangeRule":
		fallthrough
	case "NiEndContractedOutTransferRule":
		fallthrough
	case "PaymentAfterLeavingTaxCodeRule":
		fallthrough
	case "LeaverEndInstructionsRule":
		fallthrough
	case "P45StudentLoanInstructionRule":
		fallthrough
	case "P45TaxInstructionRule":
		fallthrough
	case "P45YtdTaxRule":
		fallthrough
	case "YtdInstructionRule":
		fallthrough
	case "TaxCodeRegionChangeRule":
		fallthrough
	case "AutoEnrolmentStatusChangeRule":
		fallthrough
	case "EmployeeDeceasedRule":
		fallthrough
	case "BenefitInstructionAutoEndRule":
		*e = EmployerEmployerRuleExclusionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployerEmployerRuleExclusionsEnum: %s", s)
	}
}

// EmployerEmployerTerritoryEnum - The employers' territory
type EmployerEmployerTerritoryEnum string

const (
	EmployerEmployerTerritoryEnumUnitedKingdom EmployerEmployerTerritoryEnum = "UnitedKingdom"
)

func (e *EmployerEmployerTerritoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UnitedKingdom":
		*e = EmployerEmployerTerritoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployerEmployerTerritoryEnum: %s", s)
	}
}

type EmployerEmployer struct {
	// The employers' address
	Address *EmployerEmployerAddress `json:"Address,omitempty"`
	// The employers' apprenticeship levy allowance
	ApprenticeshipLevyAllowance *float64 `json:"ApprenticeshipLevyAllowance,omitempty"`
	// The employers' auto enrolment
	AutoEnrolment *EmployerEmployerAutoEnrolment `json:"AutoEnrolment,omitempty"`
	// The employers' bacs service user number
	BacsServiceUserNumber *string `json:"BacsServiceUserNumber,omitempty"`
	// The employers' bank account
	BankAccount *EmployerEmployerBankAccount `json:"BankAccount,omitempty"`
	// The employers' calculate apprenticeship levy
	CalculateApprenticeshipLevy *bool `json:"CalculateApprenticeshipLevy,omitempty"`
	// The employers' claim employment allowance
	ClaimEmploymentAllowance *bool `json:"ClaimEmploymentAllowance,omitempty"`
	// The employers' claim small employer relief
	ClaimSmallEmployerRelief *bool `json:"ClaimSmallEmployerRelief,omitempty"`
	// The employers' effective date
	EffectiveDate *types.Date `json:"EffectiveDate,omitempty"`
	// The employers' hmrc settings
	HmrcSettings *EmployerEmployerHmrcSettings `json:"HmrcSettings,omitempty"`
	// The employers' meta data
	MetaData map[string]interface{} `json:"MetaData,omitempty"`
	// The employers' name
	Name *string `json:"Name,omitempty"`
	// The employers' next revision date
	NextRevisionDate *types.Date `json:"NextRevisionDate,omitempty"`
	// The employers' region
	Region *EmployerEmployerRegionEnum `json:"Region,omitempty"`
	// The employers' revision
	Revision *int `json:"Revision,omitempty"`
	// The employers' rule exclusions
	RuleExclusions *EmployerEmployerRuleExclusionsEnum `json:"RuleExclusions,omitempty"`
	// The employers' territory
	Territory *EmployerEmployerTerritoryEnum `json:"Territory,omitempty"`
}

// Employer - The employer object.
type Employer struct {
	Employer *EmployerEmployer `json:"Employer,omitempty"`
}
