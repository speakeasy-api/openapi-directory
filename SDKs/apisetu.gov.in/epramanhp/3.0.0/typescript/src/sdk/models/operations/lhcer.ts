/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class LhcerSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-APIKEY",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-CLIENTID",
  })
  clientId: string;
}

export class LhcerRequestBodyCertificateParameters extends SpeakeasyBase {
  /**
   * Applicant Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * Certificate Id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RefNo" })
  refNo: string;
}

/**
 * The format of the certificate in response.
 */
export enum LhcerRequestBodyFormatEnum {
  Pdf = "pdf",
}

/**
 * Request format
 */
export class LhcerRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificateParameters" })
  @Type(() => LhcerRequestBodyCertificateParameters)
  certificateParameters?: LhcerRequestBodyCertificateParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "consentArtifact" })
  @Type(() => shared.ConsentArtifactSchema)
  consentArtifact?: shared.ConsentArtifactSchema;

  /**
   * The format of the certificate in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: LhcerRequestBodyFormatEnum;

  /**
   * A unique transaction id for this request in UUID format. It is used for tracking the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId: string;
}

export enum Lhcer504ApplicationJSONErrorEnum {
  GatewayTimeout = "gateway_timeout",
}

export enum Lhcer504ApplicationJSONErrorDescriptionEnum {
  PublisherServiceDidNotRespondInTime = "Publisher service did not respond in time",
}

/**
 * Gateway timeout
 */
export class Lhcer504ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer504ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer504ApplicationJSONErrorDescriptionEnum;
}

export enum Lhcer503ApplicationJSONErrorEnum {
  ServiceUnavailable = "service_unavailable",
}

export enum Lhcer503ApplicationJSONErrorDescriptionEnum {
  PublisherServiceIsTemporarilyUnavailable = "Publisher service is temporarily unavailable",
}

/**
 * Service unavailable
 */
export class Lhcer503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer503ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer503ApplicationJSONErrorDescriptionEnum;
}

export enum Lhcer502ApplicationJSONErrorEnum {
  BadGatewy = "bad_gatewy",
}

export enum Lhcer502ApplicationJSONErrorDescriptionEnum {
  PublisherServiceReturnedAnInvalidResponse = "Publisher service returned an invalid response",
}

/**
 * Bad gateway
 */
export class Lhcer502ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer502ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer502ApplicationJSONErrorDescriptionEnum;
}

export enum Lhcer500ApplicationJSONErrorEnum {
  InternalServerError = "internal_server_error",
}

export enum Lhcer500ApplicationJSONErrorDescriptionEnum {
  InternalServerError = "Internal server error",
}

/**
 * Internal server error
 */
export class Lhcer500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer500ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer500ApplicationJSONErrorDescriptionEnum;
}

export enum Lhcer404ApplicationJSONErrorEnum {
  RecordNotFound = "record_not_found",
  UrlNotFound = "url_not_found",
}

export enum Lhcer404ApplicationJSONErrorDescriptionEnum {
  NoRecordFound = "No record found",
  YourAPIUrlOrPathIsIncorrect = "Your API url or path is incorrect",
}

/**
 * No record found
 */
export class Lhcer404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer404ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer404ApplicationJSONErrorDescriptionEnum;
}

export enum Lhcer401ApplicationJSONErrorEnum {
  InvalidAuthentication = "invalid_authentication",
  InvalidAuthorization = "invalid_authorization",
}

export enum Lhcer401ApplicationJSONErrorDescriptionEnum {
  AuthenticationFailed = "Authentication failed",
  YouAreNotAuthorizedToUseThisAPI = "You are not authorized to use this API",
}

/**
 * Unauthorized access
 */
export class Lhcer401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer401ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer401ApplicationJSONErrorDescriptionEnum;
}

export enum Lhcer400ApplicationJSONErrorEnum {
  MissingParameter = "missing_parameter",
  InvalidParameter = "invalid_parameter",
  InvalidFormat = "invalid_format",
  InvalidTxnid = "invalid_txnid",
  InvalidConsentid = "invalid_consentid",
}

export enum Lhcer400ApplicationJSONErrorDescriptionEnum {
  PleaseProvideAllMandatoryParameters = "Please provide all mandatory parameters",
  BadRequest = "Bad request",
  TheFormatParameterIsInvalid = "The format parameter is invalid",
  TheTxnIdParameterMustBeInUUIDFormat = "The txnId parameter must be in UUID format",
  TheConsentIdParameterMustBeInUUIDFormat = "The consentId parameter must be in UUID format",
}

/**
 * Bad request
 */
export class Lhcer400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Lhcer400ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Lhcer400ApplicationJSONErrorDescriptionEnum;
}

export class LhcerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request
   */
  @SpeakeasyMetadata()
  lhcer400ApplicationJSONObject?: Lhcer400ApplicationJSON;

  /**
   * Unauthorized access
   */
  @SpeakeasyMetadata()
  lhcer401ApplicationJSONObject?: Lhcer401ApplicationJSON;

  /**
   * No record found
   */
  @SpeakeasyMetadata()
  lhcer404ApplicationJSONObject?: Lhcer404ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  lhcer500ApplicationJSONObject?: Lhcer500ApplicationJSON;

  /**
   * Bad gateway
   */
  @SpeakeasyMetadata()
  lhcer502ApplicationJSONObject?: Lhcer502ApplicationJSON;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  lhcer503ApplicationJSONObject?: Lhcer503ApplicationJSON;

  /**
   * Gateway timeout
   */
  @SpeakeasyMetadata()
  lhcer504ApplicationJSONObject?: Lhcer504ApplicationJSON;
}
