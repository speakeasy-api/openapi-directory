/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination - BigQuery destination.
 */
public class GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination {
    /**
     * Required. The BigQuery dataset where the query results will be saved. It has the format of "projects/{projectId}/datasets/{datasetId}".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset")
    public String dataset;
    public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination withDataset(String dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * Required. The BigQuery table where the query results will be saved. If this table does not exist, a new table with the given name will be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    public String table;
    public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination withTable(String table) {
        this.table = table;
        return this;
    }
    
    /**
     * Specifies the action that occurs if the destination table or partition already exists. The following values are supported: * WRITE_TRUNCATE: If the table or partition already exists, BigQuery overwrites the entire table or all the partitions data. * WRITE_APPEND: If the table or partition already exists, BigQuery appends the data to the table or the latest partition. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("writeDisposition")
    public String writeDisposition;
    public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination withWriteDisposition(String writeDisposition) {
        this.writeDisposition = writeDisposition;
        return this;
    }
    
}
