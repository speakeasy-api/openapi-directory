"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import actionentity as shared_actionentity
from datetime import datetime
from typing import Any, Optional


@dataclasses.dataclass
class HistoryListForUserRequest:
    
    user_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""User ID."""  
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination."""  
    display: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'display', 'style': 'form', 'explode': True }})
    r"""Display format. Leave blank or set to `full` or `parent`."""  
    end_at: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_at', 'style': 'form', 'explode': True }})
    r"""Leave blank or set to a date/time to filter later entries."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended)."""  
    sort_by: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[user_id]=desc`). Valid fields are `user_id` and `created_at`."""  
    start_at: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start_at', 'style': 'form', 'explode': True }})
    r"""Leave blank or set to a date/time to filter earlier entries."""  
    

@dataclasses.dataclass
class HistoryListForUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    action_entities: Optional[list[shared_actionentity.ActionEntity]] = dataclasses.field(default=None)
    r"""A list of History objects."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    