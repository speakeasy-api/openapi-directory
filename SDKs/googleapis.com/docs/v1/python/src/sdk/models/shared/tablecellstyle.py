"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimension as shared_dimension
from ..shared import optionalcolor as shared_optionalcolor
from ..shared import tablecellborder as shared_tablecellborder
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TableCellStyleContentAlignmentEnum(str, Enum):
    r"""The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor."""
    CONTENT_ALIGNMENT_UNSPECIFIED = 'CONTENT_ALIGNMENT_UNSPECIFIED'
    CONTENT_ALIGNMENT_UNSUPPORTED = 'CONTENT_ALIGNMENT_UNSUPPORTED'
    TOP = 'TOP'
    MIDDLE = 'MIDDLE'
    BOTTOM = 'BOTTOM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableCellStyle:
    r"""The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style."""
    
    background_color: Optional[shared_optionalcolor.OptionalColor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundColor'), 'exclude': lambda f: f is None }})
    r"""A color that can either be fully opaque or fully transparent."""  
    border_bottom: Optional[shared_tablecellborder.TableCellBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderBottom'), 'exclude': lambda f: f is None }})
    r"""A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0."""  
    border_left: Optional[shared_tablecellborder.TableCellBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderLeft'), 'exclude': lambda f: f is None }})
    r"""A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0."""  
    border_right: Optional[shared_tablecellborder.TableCellBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderRight'), 'exclude': lambda f: f is None }})
    r"""A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0."""  
    border_top: Optional[shared_tablecellborder.TableCellBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderTop'), 'exclude': lambda f: f is None }})
    r"""A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0."""  
    column_span: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnSpan'), 'exclude': lambda f: f is None }})
    r"""The column span of the cell. This property is read-only."""  
    content_alignment: Optional[TableCellStyleContentAlignmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentAlignment'), 'exclude': lambda f: f is None }})
    r"""The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor."""  
    padding_bottom: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingBottom'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    padding_left: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingLeft'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    padding_right: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingRight'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    padding_top: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingTop'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    row_span: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowSpan'), 'exclude': lambda f: f is None }})
    r"""The row span of the cell. This property is read-only."""  
    