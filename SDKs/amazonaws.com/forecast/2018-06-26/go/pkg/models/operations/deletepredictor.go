// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeletePredictorXAmzTargetEnum
type DeletePredictorXAmzTargetEnum string

const (
	DeletePredictorXAmzTargetEnumAmazonForecastDeletePredictor DeletePredictorXAmzTargetEnum = "AmazonForecast.DeletePredictor"
)

func (e DeletePredictorXAmzTargetEnum) ToPointer() *DeletePredictorXAmzTargetEnum {
	return &e
}

func (e *DeletePredictorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonForecast.DeletePredictor":
		*e = DeletePredictorXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePredictorXAmzTargetEnum: %v", v)
	}
}

type DeletePredictorRequest struct {
	DeletePredictorRequest shared.DeletePredictorRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DeletePredictorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeletePredictorResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
