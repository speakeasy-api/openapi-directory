"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rampintervalmetrics as shared_rampintervalmetrics
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RampMetrics:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The short description of the ramp."""  
    discount_tcb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discountTcb'), 'exclude': lambda f: f is None }})
    r"""The discount amount for the TCB."""  
    discount_tcv: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discountTcv'), 'exclude': lambda f: f is None }})
    r"""The discount amount for the TCV."""  
    gross_tcb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grossTcb'), 'exclude': lambda f: f is None }})
    r"""The gross TCB value before discount charges are applied."""  
    gross_tcv: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grossTcv'), 'exclude': lambda f: f is None }})
    r"""The gross TCV value before discount charges are applied."""  
    intervals: Optional[list[shared_rampintervalmetrics.RampIntervalMetrics]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intervals'), 'exclude': lambda f: f is None }})
    r"""Container for the intervals that the ramp is split into in its timeline."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the ramp."""  
    net_tcb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('netTcb'), 'exclude': lambda f: f is None }})
    r"""The net TCB value after discount charges are applied."""  
    net_tcv: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('netTcv'), 'exclude': lambda f: f is None }})
    r"""The net TCV value after discount charges are applied."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number of the ramp. It is automaticcally generated by the billing system."""  
    